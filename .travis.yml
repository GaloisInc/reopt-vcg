# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs 'haskell-proto/reopt-vcg.cabal'
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:
    - compiler: "ghc-8.4.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.4,ghc-8.4.3], sources: [hvr-ghc]}}

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER
  # This is an unfortunate hack that changes ssh paths into http path, so that
  # we can do a read-only clone of our submodules without worrying about ssh
  # keys.
  - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
  - git submodule update --recursive --init
  - travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'

install:
  - pushd haskell-proto
  - cabal --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - UNCONSTRAINED=${UNCONSTRAINED-true}
  - NOINSTALLEDCONSTRAINTS=${NOINSTALLEDCONSTRAINTS-false}
  - GHCHEAD=${GHCHEAD-false}
  - travis_retry cabal update -v
  - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  - rm -fv cabal.project.local
  - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
  - "printf 'write-ghc-environment-files: always\\n' >> cabal.project"
  - touch cabal.project.local
  - "if ! $NOINSTALLEDCONSTRAINTS; then for pkg in $($HCPKG list --simple-output); do echo $pkg  | grep -vw -- reopt-vcg | sed 's/^/constraints: /' | sed 's/-[^-]*$/ installed/' >> cabal.project.local; done; fi"
  - cat cabal.project || true
  - cat cabal.project.local || true
  - if [ -f "haskell-proto/configure.ac" ]; then
      (cd "haskell-proto" && autoreconf -i);
    fi
  - rm -f cabal.project.freeze
  # Build stackage now, so that during the script phase we only see the project
  # build.
  - travis_wait stack --no-terminal --skip-ghc-check setup
  - stack --stack-yaml stack.yaml build --dependencies-only reopt-vcg
  # Setup elan so we can use it to install lean
  - curl https://raw.githubusercontent.com/Kha/elan/master/elan-init.sh -sSf > elan-init.sh
  - chmod a+x elan-init.sh
  - ./elan-init.sh -y
  - source $HOME/.elan/env
  - elan install 3.4.1
  - popd

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # First, build/test the lean code
  - pushd decodex86
  - leanpkg build
  - leanpkg test
  - popd

  - pushd lean
  - leanpkg build
  - leanpkg test
  - popd

  # Now go into the haskell-proto directory to test the Haskell side of things
  - pushd haskell-proto
  - touch cabal.project.local
  - "if ! $NOINSTALLEDCONSTRAINTS; then for pkg in $($HCPKG list --simple-output); do echo $pkg  | grep -vw -- reopt-vcg | sed 's/^/constraints: /' | sed 's/-[^-]*$/ installed/' >> cabal.project.local; done; fi"
  - cat cabal.project || true
  - cat cabal.project.local || true
  # this builds all libraries and executables (without tests/benchmarks)
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all

  # build & run tests, build benchmarks
  - cabal new-build -w ${HC} ${TEST} ${BENCH}
  - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} ${BENCH}; fi

  - cabal check

  # haddock
  - if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH}; else echo "Skipping haddock generation";fi

  # Build without installed constraints for packages in global-db
  - if $UNCONSTRAINED; then rm -f cabal.project.local; echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks; else echo "Not building without installed constraints"; fi

  # If we made it this far, everything builds on cabal, but we also have stack
  # users to support, so let's try it one more time but building on stack
  # w/stackage
  - stack --stack-yaml stack.yaml build reopt-vcg
  - stack --stack-yaml stack.yaml test  reopt-vcg
  - popd

# REGENDATA ["haskell-proto/reopt-vcg.cabal"]
# EOF
