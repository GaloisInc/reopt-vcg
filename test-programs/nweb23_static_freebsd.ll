declare { i4, i1 } @llvm.uadd.with.overflow.i4(i4, i4)
declare { i8, i1 } @llvm.uadd.with.overflow.i8(i8, i8)
declare { i16, i1 } @llvm.uadd.with.overflow.i16(i16, i16)
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32)
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64)
declare { i4, i1 } @llvm.sadd.with.overflow.i4(i4, i4)
declare { i8, i1 } @llvm.sadd.with.overflow.i8(i8, i8)
declare { i16, i1 } @llvm.sadd.with.overflow.i16(i16, i16)
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32)
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64)
declare { i4, i1 } @llvm.usub.with.overflow.i4(i4, i4)
declare { i8, i1 } @llvm.usub.with.overflow.i8(i8, i8)
declare { i16, i1 } @llvm.usub.with.overflow.i16(i16, i16)
declare { i32, i1 } @llvm.usub.with.overflow.i32(i32, i32)
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64)
declare { i4, i1 } @llvm.ssub.with.overflow.i4(i4, i4)
declare { i8, i1 } @llvm.ssub.with.overflow.i8(i8, i8)
declare { i16, i1 } @llvm.ssub.with.overflow.i16(i16, i16)
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32)
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64)
declare i8 @llvm.cttz.i8(i8, i1)
declare i16 @llvm.cttz.i16(i16, i1)
declare i32 @llvm.cttz.i32(i32, i1)
declare i64 @llvm.cttz.i64(i64, i1)
declare i8 @llvm.ctlz.i8(i8, i1)
declare i16 @llvm.ctlz.i16(i16, i1)
declare i32 @llvm.ctlz.i32(i32, i1)
declare i64 @llvm.ctlz.i64(i64, i1)
declare { i64, i64, <8 x double> } @__Bfree_D2A(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @__assert(i64, i64, i64, i64, i64, i64)
declare { i64, i64, <8 x double> } @__clean_env(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare void @__do_global_dtors_aux(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @__fail(i64, i64, i64, <8 x double>)
declare { i64, <8 x double> } @__fread(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare i64 @__getosreldate(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @__multadd_D2A(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @__printf_flush(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @__sbprintf(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @__setenv(i64, i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @__sinit(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @__smakebuf(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @__sys_close(i64)
declare { i64, <8 x double> } @__sys_freebsd6_lseek(i64, i64, i64, i64)
declare { i64, i64, <8 x double> } @__sys_freebsd6_mmap(i64, i64, i64, i64, i64, i64)
declare { i64, i64, <8 x double> } @__sys_getpid()
declare { i64, i64, <8 x double> } @__sys_getsid(i64)
declare { i64, <8 x double> } @__sys_ioctl(i64, i64, i64)
declare { i64, i64, <8 x double> } @__sys_issetugid()
declare { i64, i64, <8 x double> } @__sys_kill(i64, i64)
declare { i64, <8 x double> } @__sys_lseek(i64, i64, i64)
declare { i64, i64, <8 x double> } @__sys_mmap(i64, i64, i64, i64, i64, i64)
declare { i64, i64, <8 x double> } @__sys_munmap(i64, i64)
declare i64 @__sys_read(i64, i64, i64)
declare { i64, i64, <8 x double> } @__sys_sendto(i64, i64, i64, i64, i64, i64)
declare void @__sys_setpgid(i64, i64)
declare { i64, i64, <8 x double> } @__sys_write(i64, i64, i64)
declare { i64, i64, <8 x double> } @__vfprintf(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @_conv(i64, i64, i64, i64, i64, i64)
declare { i64, i64, <8 x double> } @_fwalk(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare <8 x double> @_init(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @_once(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare i64 @_rtld_allocate_tls(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @_spinlock_stub(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @_spinunlock_stub(i64, i64, i64, <8 x double>)
declare { i64, <8 x double> } @_sread(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @_sseek(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @_swrite(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @abort(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @amd64_set_fsbase(i64)
declare { i64, i64, <8 x double> } @arena_avail_tree_insert(i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @arena_avail_tree_remove(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @arena_chunk_tree_dirty_insert(i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @arena_purge(i64, <8 x double>)
declare { i64, i64, <8 x double> } @arena_run_alloc(i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @arena_run_dalloc(i64, i64, i64, <8 x double>)
declare <8 x double> @arena_run_tree_remove(i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @arenas_extend(i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare i64 @asctime_r(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @atexit(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @currentlocale(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @exit(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @extent_tree_ad_remove(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @extent_tree_szad_insert(i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @extent_tree_szad_remove(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @free(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare void @ftello(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @getsecs(i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @loadlocale(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @localsub(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @main(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @malloc(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @moreglue(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @openlog_unlocked(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @pages_map(i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pages_unmap(i64, i64)
declare { i64, i64, <8 x double> } @pthread_getspecific_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare i64 @pthread_key_create_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_mutex_lock_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_mutex_trylock_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_mutex_unlock_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_once_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_rwlock_rdlock_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_rwlock_unlock_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_rwlock_wrlock_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_self_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @pthread_setspecific_int(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @realloc(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @sbrk(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @strcmp(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @strdup(i64, <8 x double>)
declare { i64, i64, <8 x double> } @strtol(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @time1(i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @time2sub(i64, i64, i64, i64, i64, <8 x double>)
declare { i64, <8 x double> } @timesub(i64, i64, i64, i64, <8 x double>)
declare { i64, i64, <8 x double> } @tzload(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, i64, <8 x double> } @tzparse(i64, i64, i64, <8 x double>)
declare <8 x double> @tzset_basic(i64, i64, i64, <8 x double>)
declare <8 x double> @tzsetwall_basic(i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>)
declare { i64, <8 x double> } @vis(i64, i64, i64, i64, i64, i64, <8 x double>)
declare void @vwarnc(i64, i64, i64, <8 x double>)
define void @_start(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_400150:
  ; r0 := (bv_add arg0 (0x8 : bv 64))
  %t0 = add i64 %arg0, 8
  ; r1 := (read arg0 (bv 32))
  %t1 = inttoptr i64 %arg0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (uext r1 64)
  %t3 = zext i32 %t2 to i64
  ; r3 := (sext r1 64)
  %t4 = sext i32 %t2 to i64
  ; r4 := (bv_slt r1 (0x0 : bv 32))
  %t5 = icmp slt i32 %t2, 0
  ; r5 := (eq r1 (0x0 : bv 32))
  %t6 = icmp eq i32 %t2, 0
  ; r6 := (bv_mul (0x8 : bv 64) r3)
  %t7 = mul i64 8, %t4
  ; r7 := (bv_add arg0 r6)
  %t8 = add i64 %arg0, %t7
  ; r8 := (bv_add r7 (0x10 : bv 64))
  %t9 = add i64 %t8, 16
  ; write (0x641e20 : bv 64) r8
  %t10 = inttoptr i64 6561312 to i64*
  store i64 %t9, i64* %t10
  ; r9 := (or r5 r4)
  %t11 = or i1 %t6, %t5
  ; r10 := (bitcast arg6 (bv 512))
  %t12 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t13 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t14 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t15 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t16 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t17 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t18 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t19 = bitcast <8 x double> %arg13 to i512
  ; r18 := (bitcast arg6 (bv 512))
  %t20 = bitcast <8 x double> %arg6 to i512
  ; r19 := (bitcast arg7 (bv 512))
  %t21 = bitcast <8 x double> %arg7 to i512
  ; r20 := (bitcast arg8 (bv 512))
  %t22 = bitcast <8 x double> %arg8 to i512
  ; r21 := (bitcast arg9 (bv 512))
  %t23 = bitcast <8 x double> %arg9 to i512
  ; r22 := (bitcast arg10 (bv 512))
  %t24 = bitcast <8 x double> %arg10 to i512
  ; r23 := (bitcast arg11 (bv 512))
  %t25 = bitcast <8 x double> %arg11 to i512
  ; r24 := (bitcast arg12 (bv 512))
  %t26 = bitcast <8 x double> %arg12 to i512
  ; r25 := (bitcast arg13 (bv 512))
  %t27 = bitcast <8 x double> %arg13 to i512
  br i1 %t11, label %block_0_4001b0, label %block_0_400176
block_0_400176:
  %t28 = phi i64 [ %arg3, %block_0_400150 ]
  %t29 = phi i64 [ %t3, %block_0_400150 ]
  %t30 = phi i64 [ %arg1, %block_0_400150 ]
  %t31 = phi i64 [ %arg0, %block_0_400150 ]
  %t32 = phi i64 [ %arg4, %block_0_400150 ]
  %t33 = phi i64 [ %arg5, %block_0_400150 ]
  %t34 = phi i64 [ %t9, %block_0_400150 ]
  %t35 = phi i64 [ %t0, %block_0_400150 ]
  %t36 = phi i512 [ %t20, %block_0_400150 ]
  %t37 = phi i512 [ %t21, %block_0_400150 ]
  %t38 = phi i512 [ %t22, %block_0_400150 ]
  %t39 = phi i512 [ %t23, %block_0_400150 ]
  %t40 = phi i512 [ %t24, %block_0_400150 ]
  %t41 = phi i512 [ %t25, %block_0_400150 ]
  %t42 = phi i512 [ %t26, %block_0_400150 ]
  %t43 = phi i512 [ %t27, %block_0_400150 ]
  ; r42 := (bv_add r29 (0x8 : bv 64))
  %t44 = add i64 %t31, 8
  ; r43 := (read r42 (bv 64))
  %t45 = inttoptr i64 %t44 to i64*
  %t46 = load i64, i64* %t45
  ; r44 := (eq r43 (0x0 : bv 64))
  %t47 = icmp eq i64 %t46, 0
  br i1 %t47, label %block_0_4001b0, label %block_0_40017f
block_0_40017f:
  %t48 = phi i64 [ %t28, %block_0_400176 ]
  %t49 = phi i64 [ %t46, %block_0_400176 ]
  %t50 = phi i64 [ %t29, %block_0_400176 ]
  %t51 = phi i64 [ %t30, %block_0_400176 ]
  %t52 = phi i64 [ %t31, %block_0_400176 ]
  %t53 = phi i64 [ %t32, %block_0_400176 ]
  %t54 = phi i64 [ %t33, %block_0_400176 ]
  %t55 = phi i64 [ %t34, %block_0_400176 ]
  %t56 = phi i64 [ %t35, %block_0_400176 ]
  %t57 = phi i512 [ %t36, %block_0_400176 ]
  %t58 = phi i512 [ %t37, %block_0_400176 ]
  %t59 = phi i512 [ %t38, %block_0_400176 ]
  %t60 = phi i512 [ %t39, %block_0_400176 ]
  %t61 = phi i512 [ %t40, %block_0_400176 ]
  %t62 = phi i512 [ %t41, %block_0_400176 ]
  %t63 = phi i512 [ %t42, %block_0_400176 ]
  %t64 = phi i512 [ %t43, %block_0_400176 ]
  ; write (0x630040 : bv 64) r46
  %t65 = inttoptr i64 6488128 to i64*
  store i64 %t49, i64* %t65
  ; r62 := (read r46 (bv 8))
  %t66 = inttoptr i64 %t49 to i8*
  %t67 = load i8, i8* %t66
  ; r63 := (uext r62 64)
  %t68 = zext i8 %t67 to i64
  ; r64 := (eq r62 (0x0 : bv 8))
  %t69 = icmp eq i8 %t67, 0
  br i1 %t69, label %block_0_4001b0, label %block_0_40018d
block_0_40018d:
  %t70 = phi i64 [ %t68, %block_0_40017f ]
  %t71 = phi i64 [ %t48, %block_0_40017f ]
  %t72 = phi i64 [ %t49, %block_0_40017f ]
  %t73 = phi i64 [ %t50, %block_0_40017f ]
  %t74 = phi i64 [ %t51, %block_0_40017f ]
  %t75 = phi i64 [ %t52, %block_0_40017f ]
  %t76 = phi i64 [ %t53, %block_0_40017f ]
  %t77 = phi i64 [ %t54, %block_0_40017f ]
  %t78 = phi i64 [ %t55, %block_0_40017f ]
  %t79 = phi i64 [ %t56, %block_0_40017f ]
  %t80 = phi i512 [ %t57, %block_0_40017f ]
  %t81 = phi i512 [ %t58, %block_0_40017f ]
  %t82 = phi i512 [ %t59, %block_0_40017f ]
  %t83 = phi i512 [ %t60, %block_0_40017f ]
  %t84 = phi i512 [ %t61, %block_0_40017f ]
  %t85 = phi i512 [ %t62, %block_0_40017f ]
  %t86 = phi i512 [ %t63, %block_0_40017f ]
  %t87 = phi i512 [ %t64, %block_0_40017f ]
  ; r83 := (bv_add r67 (0x1 : bv 64))
  %t88 = add i64 %t72, 1
  br label %block_0_400191
block_0_400191:
  %t89 = phi i64 [ %t70, %block_0_40018d ], [ %t115, %block_0_400191 ]
  %t90 = phi i64 [ %t71, %block_0_40018d ], [ %t90, %block_0_400191 ]
  %t91 = phi i64 [ %t88, %block_0_40018d ], [ %t116, %block_0_400191 ]
  %t92 = phi i64 [ %t73, %block_0_40018d ], [ %t92, %block_0_400191 ]
  %t93 = phi i64 [ %t74, %block_0_40018d ], [ %t93, %block_0_400191 ]
  %t94 = phi i64 [ %t75, %block_0_40018d ], [ %t94, %block_0_400191 ]
  %t95 = phi i64 [ %t76, %block_0_40018d ], [ %t95, %block_0_400191 ]
  %t96 = phi i64 [ %t77, %block_0_40018d ], [ %t96, %block_0_400191 ]
  %t97 = phi i64 [ %t78, %block_0_40018d ], [ %t97, %block_0_400191 ]
  %t98 = phi i64 [ %t79, %block_0_40018d ], [ %t98, %block_0_400191 ]
  %t99 = phi i512 [ %t80, %block_0_40018d ], [ %t99, %block_0_400191 ]
  %t100 = phi i512 [ %t81, %block_0_40018d ], [ %t100, %block_0_400191 ]
  %t101 = phi i512 [ %t82, %block_0_40018d ], [ %t101, %block_0_400191 ]
  %t102 = phi i512 [ %t83, %block_0_40018d ], [ %t102, %block_0_400191 ]
  %t103 = phi i512 [ %t84, %block_0_40018d ], [ %t103, %block_0_400191 ]
  %t104 = phi i512 [ %t85, %block_0_40018d ], [ %t104, %block_0_400191 ]
  %t105 = phi i512 [ %t86, %block_0_40018d ], [ %t105, %block_0_400191 ]
  %t106 = phi i512 [ %t87, %block_0_40018d ], [ %t106, %block_0_400191 ]
  ; r102 := (trunc r84 8)
  %t107 = trunc i64 %t89 to i8
  ; r103 := (eq r102 (0x2f : bv 8))
  %t108 = icmp eq i8 %t107, 47
  ; r104 := (read (0x630040 : bv 64) (bv 64))
  %t109 = inttoptr i64 6488128 to i64*
  %t110 = load i64, i64* %t109
  ; r105 := (mux r103 r86 r104)
  %t111 = select i1 %t108, i64 %t91, i64 %t110
  ; write (0x630040 : bv 64) r105
  %t112 = inttoptr i64 6488128 to i64*
  store i64 %t111, i64* %t112
  ; r106 := (read r86 (bv 8))
  %t113 = inttoptr i64 %t91 to i8*
  %t114 = load i8, i8* %t113
  ; r107 := (uext r106 64)
  %t115 = zext i8 %t114 to i64
  ; r108 := (bv_add r86 (0x1 : bv 64))
  %t116 = add i64 %t91, 1
  ; r109 := (eq r106 (0x0 : bv 8))
  %t117 = icmp eq i8 %t114, 0
  br i1 %t117, label %block_0_4001b0, label %block_0_400191
block_0_4001b0:
  %t118 = phi i64 [ %arg3, %block_0_400150 ], [ %t28, %block_0_400176 ], [ %t48, %block_0_40017f ], [ %t90, %block_0_400191 ]
  %t119 = phi i64 [ %arg2, %block_0_400150 ], [ %t46, %block_0_400176 ], [ %t49, %block_0_40017f ], [ %t116, %block_0_400191 ]
  %t120 = phi i64 [ %t3, %block_0_400150 ], [ %t29, %block_0_400176 ], [ %t50, %block_0_40017f ], [ %t92, %block_0_400191 ]
  %t121 = phi i64 [ %arg1, %block_0_400150 ], [ %t30, %block_0_400176 ], [ %t51, %block_0_40017f ], [ %t93, %block_0_400191 ]
  %t122 = phi i64 [ %arg0, %block_0_400150 ], [ %t31, %block_0_400176 ], [ %t52, %block_0_40017f ], [ %t94, %block_0_400191 ]
  %t123 = phi i64 [ %arg4, %block_0_400150 ], [ %t32, %block_0_400176 ], [ %t53, %block_0_40017f ], [ %t95, %block_0_400191 ]
  %t124 = phi i64 [ %arg5, %block_0_400150 ], [ %t33, %block_0_400176 ], [ %t54, %block_0_40017f ], [ %t96, %block_0_400191 ]
  %t125 = phi i64 [ %t9, %block_0_400150 ], [ %t34, %block_0_400176 ], [ %t55, %block_0_40017f ], [ %t97, %block_0_400191 ]
  %t126 = phi i64 [ %t0, %block_0_400150 ], [ %t35, %block_0_400176 ], [ %t56, %block_0_40017f ], [ %t98, %block_0_400191 ]
  %t127 = phi i512 [ %t12, %block_0_400150 ], [ %t36, %block_0_400176 ], [ %t57, %block_0_40017f ], [ %t99, %block_0_400191 ]
  %t128 = phi i512 [ %t13, %block_0_400150 ], [ %t37, %block_0_400176 ], [ %t58, %block_0_40017f ], [ %t100, %block_0_400191 ]
  %t129 = phi i512 [ %t14, %block_0_400150 ], [ %t38, %block_0_400176 ], [ %t59, %block_0_40017f ], [ %t101, %block_0_400191 ]
  %t130 = phi i512 [ %t15, %block_0_400150 ], [ %t39, %block_0_400176 ], [ %t60, %block_0_40017f ], [ %t102, %block_0_400191 ]
  %t131 = phi i512 [ %t16, %block_0_400150 ], [ %t40, %block_0_400176 ], [ %t61, %block_0_40017f ], [ %t103, %block_0_400191 ]
  %t132 = phi i512 [ %t17, %block_0_400150 ], [ %t41, %block_0_400176 ], [ %t62, %block_0_40017f ], [ %t104, %block_0_400191 ]
  %t133 = phi i512 [ %t18, %block_0_400150 ], [ %t42, %block_0_400176 ], [ %t63, %block_0_40017f ], [ %t105, %block_0_400191 ]
  %t134 = phi i512 [ %t19, %block_0_400150 ], [ %t43, %block_0_400176 ], [ %t64, %block_0_40017f ], [ %t106, %block_0_400191 ]
  br label %block_0_4001e5
block_0_4001c2:
  %t135 = phi i64 [ %t279, %block_0_4001ea ]
  %t136 = phi i64 [ %t280, %block_0_4001ea ]
  %t137 = phi i64 [ %t281, %block_0_4001ea ]
  %t138 = phi i64 [ %t282, %block_0_4001ea ]
  %t139 = phi i64 [ %t283, %block_0_4001ea ]
  %t140 = phi i64 [ %t284, %block_0_4001ea ]
  %t141 = phi i64 [ %t285, %block_0_4001ea ]
  %t142 = phi i64 [ %t286, %block_0_4001ea ]
  %t143 = phi i64 [ %t287, %block_0_4001ea ]
  %t144 = phi i512 [ %t288, %block_0_4001ea ]
  %t145 = phi i512 [ %t289, %block_0_4001ea ]
  %t146 = phi i512 [ %t290, %block_0_4001ea ]
  %t147 = phi i512 [ %t291, %block_0_4001ea ]
  %t148 = phi i512 [ %t292, %block_0_4001ea ]
  %t149 = phi i512 [ %t293, %block_0_4001ea ]
  %t150 = phi i512 [ %t294, %block_0_4001ea ]
  %t151 = phi i512 [ %t295, %block_0_4001ea ]
  ; r144 := (bitcast r136 (vec 8 double))
  %t152 = bitcast i512 %t144 to <8 x double>
  ; r145 := (bitcast r137 (vec 8 double))
  %t153 = bitcast i512 %t145 to <8 x double>
  ; r146 := (bitcast r138 (vec 8 double))
  %t154 = bitcast i512 %t146 to <8 x double>
  ; r147 := (bitcast r139 (vec 8 double))
  %t155 = bitcast i512 %t147 to <8 x double>
  ; r148 := (bitcast r140 (vec 8 double))
  %t156 = bitcast i512 %t148 to <8 x double>
  ; r149 := (bitcast r141 (vec 8 double))
  %t157 = bitcast i512 %t149 to <8 x double>
  ; r150 := (bitcast r142 (vec 8 double))
  %t158 = bitcast i512 %t150 to <8 x double>
  ; r151 := (bitcast r143 (vec 8 double))
  %t159 = bitcast i512 %t151 to <8 x double>
  ; r152 := call atexit((0x426194 : bv 64), r130, r128, r127, r132, r133, r144, r145, r146, r147, r148, r149, r150, r151)
  %t160 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @atexit(i64 4350356, i64 %t138, i64 %t136, i64 %t135, i64 %t140, i64 %t141, <8 x double> %t152, <8 x double> %t153, <8 x double> %t154, <8 x double> %t155, <8 x double> %t156, <8 x double> %t157, <8 x double> %t158, <8 x double> %t159)
  ; r153 := (tuple_field r152 0)
  %t161 = extractvalue { i64, i64, <8 x double> } %t160, 0
  ; r154 := (tuple_field r152 1)
  %t162 = extractvalue { i64, i64, <8 x double> } %t160, 1
  ; r155 := (tuple_field r152 2)
  %t163 = extractvalue { i64, i64, <8 x double> } %t160, 2
  ; r156 := (bitcast r155 (bv 512))
  %t164 = bitcast <8 x double> %t163 to i512
  br label %block_0_4001cc
block_0_4001cc:
  %t165 = phi i64 [ %t135, %block_0_4001c2 ]
  %t166 = phi i64 [ %t162, %block_0_4001c2 ]
  %t167 = phi i64 [ %t137, %block_0_4001c2 ]
  %t168 = phi i64 [ %t138, %block_0_4001c2 ]
  %t169 = phi i64 [ %t139, %block_0_4001c2 ]
  %t170 = phi i64 [ %t140, %block_0_4001c2 ]
  %t171 = phi i64 [ %t141, %block_0_4001c2 ]
  %t172 = phi i64 [ %t142, %block_0_4001c2 ]
  %t173 = phi i64 [ %t143, %block_0_4001c2 ]
  %t174 = phi i512 [ %t164, %block_0_4001c2 ]
  %t175 = phi i512 [ %t145, %block_0_4001c2 ]
  %t176 = phi i512 [ %t146, %block_0_4001c2 ]
  %t177 = phi i512 [ %t147, %block_0_4001c2 ]
  %t178 = phi i512 [ %t148, %block_0_4001c2 ]
  %t179 = phi i512 [ %t149, %block_0_4001c2 ]
  %t180 = phi i512 [ %t150, %block_0_4001c2 ]
  %t181 = phi i512 [ %t151, %block_0_4001c2 ]
  ; r174 := (bitcast r166 (vec 8 double))
  %t182 = bitcast i512 %t174 to <8 x double>
  ; r175 := call _init(r161, r160, r158, r174)
  %t183 = call <8 x double> (i64, i64, i64, <8 x double>) @_init(i64 %t169, i64 %t168, i64 %t166, <8 x double> %t182)
  ; r176 := (bitcast r175 (bv 512))
  %t184 = bitcast <8 x double> %t183 to i512
  br label %block_0_4001d1
block_0_4001d1:
  %t185 = phi i64 [ %t165, %block_0_4001cc ]
  %t186 = phi i64 [ %t167, %block_0_4001cc ]
  %t187 = phi i64 [ %t168, %block_0_4001cc ]
  %t188 = phi i64 [ %t169, %block_0_4001cc ]
  %t189 = phi i64 [ %t170, %block_0_4001cc ]
  %t190 = phi i64 [ %t171, %block_0_4001cc ]
  %t191 = phi i64 [ %t172, %block_0_4001cc ]
  %t192 = phi i64 [ %t173, %block_0_4001cc ]
  %t193 = phi i512 [ %t184, %block_0_4001cc ]
  %t194 = phi i512 [ %t175, %block_0_4001cc ]
  %t195 = phi i512 [ %t176, %block_0_4001cc ]
  %t196 = phi i512 [ %t177, %block_0_4001cc ]
  %t197 = phi i512 [ %t178, %block_0_4001cc ]
  %t198 = phi i512 [ %t179, %block_0_4001cc ]
  %t199 = phi i512 [ %t180, %block_0_4001cc ]
  %t200 = phi i512 [ %t181, %block_0_4001cc ]
  ; r193 := (trunc r178 32)
  %t201 = trunc i64 %t186 to i32
  ; r194 := (uext r193 64)
  %t202 = zext i32 %t201 to i64
  ; r195 := (bitcast r185 (vec 8 double))
  %t203 = bitcast i512 %t193 to <8 x double>
  ; r196 := (bitcast r186 (vec 8 double))
  %t204 = bitcast i512 %t194 to <8 x double>
  ; r197 := (bitcast r187 (vec 8 double))
  %t205 = bitcast i512 %t195 to <8 x double>
  ; r198 := (bitcast r188 (vec 8 double))
  %t206 = bitcast i512 %t196 to <8 x double>
  ; r199 := (bitcast r189 (vec 8 double))
  %t207 = bitcast i512 %t197 to <8 x double>
  ; r200 := (bitcast r190 (vec 8 double))
  %t208 = bitcast i512 %t198 to <8 x double>
  ; r201 := (bitcast r191 (vec 8 double))
  %t209 = bitcast i512 %t199 to <8 x double>
  ; r202 := (bitcast r192 (vec 8 double))
  %t210 = bitcast i512 %t200 to <8 x double>
  ; r203 := call main(r194, r184, r183, r177, r181, r182, r195, r196, r197, r198, r199, r200, r201, r202)
  %t211 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @main(i64 %t202, i64 %t192, i64 %t191, i64 %t185, i64 %t189, i64 %t190, <8 x double> %t203, <8 x double> %t204, <8 x double> %t205, <8 x double> %t206, <8 x double> %t207, <8 x double> %t208, <8 x double> %t209, <8 x double> %t210)
  ; r204 := (tuple_field r203 0)
  %t212 = extractvalue { i64, i64, <8 x double> } %t211, 0
  ; r205 := (tuple_field r203 1)
  %t213 = extractvalue { i64, i64, <8 x double> } %t211, 1
  ; r206 := (tuple_field r203 2)
  %t214 = extractvalue { i64, i64, <8 x double> } %t211, 2
  ; r207 := (bitcast r206 (bv 512))
  %t215 = bitcast <8 x double> %t214 to i512
  br label %block_0_4001de
block_0_4001de:
  %t216 = phi i64 [ %t212, %block_0_4001d1 ]
  %t217 = phi i64 [ %t185, %block_0_4001d1 ]
  %t218 = phi i64 [ %t213, %block_0_4001d1 ]
  %t219 = phi i64 [ %t186, %block_0_4001d1 ]
  %t220 = phi i64 [ %t187, %block_0_4001d1 ]
  %t221 = phi i64 [ %t188, %block_0_4001d1 ]
  %t222 = phi i64 [ %t189, %block_0_4001d1 ]
  %t223 = phi i64 [ %t190, %block_0_4001d1 ]
  %t224 = phi i64 [ %t191, %block_0_4001d1 ]
  %t225 = phi i64 [ %t192, %block_0_4001d1 ]
  %t226 = phi i512 [ %t215, %block_0_4001d1 ]
  %t227 = phi i512 [ %t194, %block_0_4001d1 ]
  %t228 = phi i512 [ %t195, %block_0_4001d1 ]
  %t229 = phi i512 [ %t196, %block_0_4001d1 ]
  %t230 = phi i512 [ %t197, %block_0_4001d1 ]
  %t231 = phi i512 [ %t198, %block_0_4001d1 ]
  %t232 = phi i512 [ %t199, %block_0_4001d1 ]
  %t233 = phi i512 [ %t200, %block_0_4001d1 ]
  ; r226 := (trunc r208 32)
  %t234 = trunc i64 %t216 to i32
  ; r227 := (uext r226 64)
  %t235 = zext i32 %t234 to i64
  ; r228 := (bitcast r218 (vec 8 double))
  %t236 = bitcast i512 %t226 to <8 x double>
  ; r229 := (bitcast r219 (vec 8 double))
  %t237 = bitcast i512 %t227 to <8 x double>
  ; r230 := (bitcast r220 (vec 8 double))
  %t238 = bitcast i512 %t228 to <8 x double>
  ; r231 := (bitcast r221 (vec 8 double))
  %t239 = bitcast i512 %t229 to <8 x double>
  ; r232 := (bitcast r222 (vec 8 double))
  %t240 = bitcast i512 %t230 to <8 x double>
  ; r233 := (bitcast r223 (vec 8 double))
  %t241 = bitcast i512 %t231 to <8 x double>
  ; r234 := (bitcast r224 (vec 8 double))
  %t242 = bitcast i512 %t232 to <8 x double>
  ; r235 := (bitcast r225 (vec 8 double))
  %t243 = bitcast i512 %t233 to <8 x double>
  ; r236 := call exit(r227, r212, r210, r209, r214, r215, r228, r229, r230, r231, r232, r233, r234, r235)
  %t244 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @exit(i64 %t235, i64 %t220, i64 %t218, i64 %t217, i64 %t222, i64 %t223, <8 x double> %t236, <8 x double> %t237, <8 x double> %t238, <8 x double> %t239, <8 x double> %t240, <8 x double> %t241, <8 x double> %t242, <8 x double> %t243)
  ; r237 := (tuple_field r236 0)
  %t245 = extractvalue { i64, i64, <8 x double> } %t244, 0
  ; r238 := (tuple_field r236 1)
  %t246 = extractvalue { i64, i64, <8 x double> } %t244, 1
  ; r239 := (tuple_field r236 2)
  %t247 = extractvalue { i64, i64, <8 x double> } %t244, 2
  ; r240 := (bitcast r239 (bv 512))
  %t248 = bitcast <8 x double> %t247 to i512
  br label %block_0_4001e5
block_0_4001e5:
  %t249 = phi i64 [ %t118, %block_0_4001b0 ], [ %t217, %block_0_4001de ]
  %t250 = phi i64 [ %t119, %block_0_4001b0 ], [ %t246, %block_0_4001de ]
  %t251 = phi i64 [ %t120, %block_0_4001b0 ], [ %t219, %block_0_4001de ]
  %t252 = phi i64 [ %t121, %block_0_4001b0 ], [ %t220, %block_0_4001de ]
  %t253 = phi i64 [ %t122, %block_0_4001b0 ], [ %t221, %block_0_4001de ]
  %t254 = phi i64 [ %t123, %block_0_4001b0 ], [ %t222, %block_0_4001de ]
  %t255 = phi i64 [ %t124, %block_0_4001b0 ], [ %t223, %block_0_4001de ]
  %t256 = phi i64 [ %t125, %block_0_4001b0 ], [ %t224, %block_0_4001de ]
  %t257 = phi i64 [ %t126, %block_0_4001b0 ], [ %t225, %block_0_4001de ]
  %t258 = phi i512 [ %t127, %block_0_4001b0 ], [ %t248, %block_0_4001de ]
  %t259 = phi i512 [ %t128, %block_0_4001b0 ], [ %t227, %block_0_4001de ]
  %t260 = phi i512 [ %t129, %block_0_4001b0 ], [ %t228, %block_0_4001de ]
  %t261 = phi i512 [ %t130, %block_0_4001b0 ], [ %t229, %block_0_4001de ]
  %t262 = phi i512 [ %t131, %block_0_4001b0 ], [ %t230, %block_0_4001de ]
  %t263 = phi i512 [ %t132, %block_0_4001b0 ], [ %t231, %block_0_4001de ]
  %t264 = phi i512 [ %t133, %block_0_4001b0 ], [ %t232, %block_0_4001de ]
  %t265 = phi i512 [ %t134, %block_0_4001b0 ], [ %t233, %block_0_4001de ]
  ; r258 := (bitcast r250 (vec 8 double))
  %t266 = bitcast i512 %t258 to <8 x double>
  ; r259 := (bitcast r251 (vec 8 double))
  %t267 = bitcast i512 %t259 to <8 x double>
  ; r260 := (bitcast r252 (vec 8 double))
  %t268 = bitcast i512 %t260 to <8 x double>
  ; r261 := (bitcast r253 (vec 8 double))
  %t269 = bitcast i512 %t261 to <8 x double>
  ; r262 := (bitcast r254 (vec 8 double))
  %t270 = bitcast i512 %t262 to <8 x double>
  ; r263 := (bitcast r255 (vec 8 double))
  %t271 = bitcast i512 %t263 to <8 x double>
  ; r264 := (bitcast r256 (vec 8 double))
  %t272 = bitcast i512 %t264 to <8 x double>
  ; r265 := (bitcast r257 (vec 8 double))
  %t273 = bitcast i512 %t265 to <8 x double>
  ; r266 := call _init_tls(r245, r244, r242, r241, r246, r247, r258, r259, r260, r261, r262, r263, r264, r265)
  %t274 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_init_tls(i64 %t253, i64 %t252, i64 %t250, i64 %t249, i64 %t254, i64 %t255, <8 x double> %t266, <8 x double> %t267, <8 x double> %t268, <8 x double> %t269, <8 x double> %t270, <8 x double> %t271, <8 x double> %t272, <8 x double> %t273)
  ; r267 := (tuple_field r266 0)
  %t275 = extractvalue { i64, i64, <8 x double> } %t274, 0
  ; r268 := (tuple_field r266 1)
  %t276 = extractvalue { i64, i64, <8 x double> } %t274, 1
  ; r269 := (tuple_field r266 2)
  %t277 = extractvalue { i64, i64, <8 x double> } %t274, 2
  ; r270 := (bitcast r269 (bv 512))
  %t278 = bitcast <8 x double> %t277 to i512
  br label %block_0_4001ea
block_0_4001ea:
  %t279 = phi i64 [ %t249, %block_0_4001e5 ]
  %t280 = phi i64 [ %t276, %block_0_4001e5 ]
  %t281 = phi i64 [ %t251, %block_0_4001e5 ]
  %t282 = phi i64 [ %t252, %block_0_4001e5 ]
  %t283 = phi i64 [ %t253, %block_0_4001e5 ]
  %t284 = phi i64 [ %t254, %block_0_4001e5 ]
  %t285 = phi i64 [ %t255, %block_0_4001e5 ]
  %t286 = phi i64 [ %t256, %block_0_4001e5 ]
  %t287 = phi i64 [ %t257, %block_0_4001e5 ]
  %t288 = phi i512 [ %t278, %block_0_4001e5 ]
  %t289 = phi i512 [ %t259, %block_0_4001e5 ]
  %t290 = phi i512 [ %t260, %block_0_4001e5 ]
  %t291 = phi i512 [ %t261, %block_0_4001e5 ]
  %t292 = phi i512 [ %t262, %block_0_4001e5 ]
  %t293 = phi i512 [ %t263, %block_0_4001e5 ]
  %t294 = phi i512 [ %t264, %block_0_4001e5 ]
  %t295 = phi i512 [ %t265, %block_0_4001e5 ]
  br label %block_0_4001c2
}
define { i64, i64, <8 x double> } @frame_dummy(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_400240:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  br label %block_0_40025d
block_0_40025d:
  %t1 = phi i64 [ 0, %block_0_400240 ]
  %t2 = phi i64 [ %arg2, %block_0_400240 ]
  %t3 = phi i512 [ %t0, %block_0_400240 ]
  ; r4 := (read (0x630030 : bv 64) (bv 64))
  %t4 = inttoptr i64 6488112 to i64*
  %t5 = load i64, i64* %t4
  ; r5 := (eq r4 (0x0 : bv 64))
  %t6 = icmp eq i64 %t5, 0
  br i1 %t6, label %block_0_400280, label %block_0_400267
block_0_400267:
  %t7 = phi i64 [ %t2, %block_0_40025d ]
  %t8 = phi i512 [ %t3, %block_0_40025d ]
  br label %block_0_400280
block_0_400280:
  %t9 = phi i64 [ %t1, %block_0_40025d ], [ 0, %block_0_400267 ]
  %t10 = phi i64 [ %t2, %block_0_40025d ], [ %t7, %block_0_400267 ]
  %t11 = phi i512 [ %t3, %block_0_40025d ], [ %t8, %block_0_400267 ]
  ; r11 := (bitcast r10 (vec 8 double))
  %t12 = bitcast i512 %t11 to <8 x double>
  ; r12 := (tuple r8 r9 r11)
  %t13 = insertvalue { i64, i64, <8 x double> } undef, i64 %t9, 0
  %t14 = insertvalue { i64, i64, <8 x double> } %t13, i64 %t10, 1
  %t15 = insertvalue { i64, i64, <8 x double> } %t14, <8 x double> %t12, 2
  ret { i64, i64, <8 x double> } %t15
}
define i64 @__bswap16_var(i64 %arg0) {
block_0_400c40:
  ; r0 := (trunc arg0 16)
  %t0 = trunc i64 %arg0 to i16
  ; r1 := (uext r0 32)
  %t1 = zext i16 %t0 to i32
  ; r2 := (bv_shl r1 (0x8 : bv 32))
  %t2 = shl i32 %t1, 8
  ; r3 := (bv_shr r0 (0x8 : bv 16))
  %t3 = lshr i16 %t0, 8
  ; r4 := (trunc r2 16)
  %t4 = trunc i32 %t2 to i16
  ; r5 := (bv_or r3 r4)
  %t5 = or i16 %t3, %t4
  ; r6 := (uext r5 64)
  %t6 = zext i16 %t5 to i64
  ret i64 %t6
}
define void @__tls_get_addr() {
block_0_400c60:
  ret void
}
define { i64, i64, <8 x double> } @_init_tls(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_400c70:
  ; r0 := (read (0x641e20 : bv 64) (bv 64))
  %t0 = inttoptr i64 6561312 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (bitcast arg6 (bv 512))
  %t2 = bitcast <8 x double> %arg6 to i512
  ; r2 := (bitcast arg7 (bv 512))
  %t3 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r4 := (bitcast arg9 (bv 512))
  %t5 = bitcast <8 x double> %arg9 to i512
  ; r5 := (bitcast arg10 (bv 512))
  %t6 = bitcast <8 x double> %arg10 to i512
  ; r6 := (bitcast arg11 (bv 512))
  %t7 = bitcast <8 x double> %arg11 to i512
  ; r7 := (bitcast arg12 (bv 512))
  %t8 = bitcast <8 x double> %arg12 to i512
  ; r8 := (bitcast arg13 (bv 512))
  %t9 = bitcast <8 x double> %arg13 to i512
  br label %block_0_400c80
block_0_400c80:
  %t10 = phi i64 [ %t1, %block_0_400c70 ], [ %t22, %block_0_400c80 ]
  %t11 = phi i64 [ %arg5, %block_0_400c70 ], [ %t11, %block_0_400c80 ]
  %t12 = phi i512 [ %t2, %block_0_400c70 ], [ %t12, %block_0_400c80 ]
  %t13 = phi i512 [ %t3, %block_0_400c70 ], [ %t13, %block_0_400c80 ]
  %t14 = phi i512 [ %t4, %block_0_400c70 ], [ %t14, %block_0_400c80 ]
  %t15 = phi i512 [ %t5, %block_0_400c70 ], [ %t15, %block_0_400c80 ]
  %t16 = phi i512 [ %t6, %block_0_400c70 ], [ %t16, %block_0_400c80 ]
  %t17 = phi i512 [ %t7, %block_0_400c70 ], [ %t17, %block_0_400c80 ]
  %t18 = phi i512 [ %t8, %block_0_400c70 ], [ %t18, %block_0_400c80 ]
  %t19 = phi i512 [ %t9, %block_0_400c70 ], [ %t19, %block_0_400c80 ]
  ; r19 := (read r9 (bv 64))
  %t20 = inttoptr i64 %t10 to i64*
  %t21 = load i64, i64* %t20
  ; r20 := (bv_add r9 (0x8 : bv 64))
  %t22 = add i64 %t10, 8
  ; r21 := (eq r19 (0x0 : bv 64))
  %t23 = icmp eq i64 %t21, 0
  br i1 %t23, label %block_0_400c8c, label %block_0_400c80
block_0_400c8c:
  %t24 = phi i64 [ %t21, %block_0_400c80 ]
  %t25 = phi i64 [ %t22, %block_0_400c80 ]
  %t26 = phi i64 [ %t11, %block_0_400c80 ]
  %t27 = phi i512 [ %t12, %block_0_400c80 ]
  %t28 = phi i512 [ %t13, %block_0_400c80 ]
  %t29 = phi i512 [ %t14, %block_0_400c80 ]
  %t30 = phi i512 [ %t15, %block_0_400c80 ]
  %t31 = phi i512 [ %t16, %block_0_400c80 ]
  %t32 = phi i512 [ %t17, %block_0_400c80 ]
  %t33 = phi i512 [ %t18, %block_0_400c80 ]
  %t34 = phi i512 [ %t19, %block_0_400c80 ]
  ; r33 := (read r23 (bv 64))
  %t35 = inttoptr i64 %t25 to i64*
  %t36 = load i64, i64* %t35
  ; r34 := (eq r33 (0x0 : bv 64))
  %t37 = icmp eq i64 %t36, 0
  br i1 %t37, label %block_0_400cdd, label %block_0_400c94
block_0_400c94:
  %t38 = phi i64 [ %t36, %block_0_400c8c ]
  %t39 = phi i64 [ %t25, %block_0_400c8c ]
  %t40 = phi i64 [ %t26, %block_0_400c8c ]
  %t41 = phi i512 [ %t27, %block_0_400c8c ]
  %t42 = phi i512 [ %t28, %block_0_400c8c ]
  %t43 = phi i512 [ %t29, %block_0_400c8c ]
  %t44 = phi i512 [ %t30, %block_0_400c8c ]
  %t45 = phi i512 [ %t31, %block_0_400c8c ]
  %t46 = phi i512 [ %t32, %block_0_400c8c ]
  %t47 = phi i512 [ %t33, %block_0_400c8c ]
  %t48 = phi i512 [ %t34, %block_0_400c8c ]
  ; r46 := (bv_add r36 (0x10 : bv 64))
  %t49 = add i64 %t39, 16
  br label %block_0_400cbc
block_0_400ca0:
  %t50 = phi i64 [ %t112, %block_0_400cbc ]
  %t51 = phi i64 [ %t113, %block_0_400cbc ]
  %t52 = phi i64 [ %t114, %block_0_400cbc ]
  %t53 = phi i64 [ %t115, %block_0_400cbc ]
  %t54 = phi i64 [ %t116, %block_0_400cbc ]
  %t55 = phi i64 [ %t117, %block_0_400cbc ]
  %t56 = phi i512 [ %t118, %block_0_400cbc ]
  %t57 = phi i512 [ %t119, %block_0_400cbc ]
  %t58 = phi i512 [ %t120, %block_0_400cbc ]
  %t59 = phi i512 [ %t121, %block_0_400cbc ]
  %t60 = phi i512 [ %t122, %block_0_400cbc ]
  %t61 = phi i512 [ %t123, %block_0_400cbc ]
  %t62 = phi i512 [ %t124, %block_0_400cbc ]
  %t63 = phi i512 [ %t125, %block_0_400cbc ]
  ; r61 := (eq r48 (0x5 : bv 64))
  %t64 = icmp eq i64 %t51, 5
  br i1 %t64, label %block_0_400ce2, label %block_0_400ca6
block_0_400ca6:
  %t65 = phi i64 [ %t50, %block_0_400ca0 ]
  %t66 = phi i64 [ %t51, %block_0_400ca0 ]
  %t67 = phi i64 [ %t52, %block_0_400ca0 ]
  %t68 = phi i64 [ %t53, %block_0_400ca0 ]
  %t69 = phi i64 [ %t54, %block_0_400ca0 ]
  %t70 = phi i64 [ %t55, %block_0_400ca0 ]
  %t71 = phi i512 [ %t56, %block_0_400ca0 ]
  %t72 = phi i512 [ %t57, %block_0_400ca0 ]
  %t73 = phi i512 [ %t58, %block_0_400ca0 ]
  %t74 = phi i512 [ %t59, %block_0_400ca0 ]
  %t75 = phi i512 [ %t60, %block_0_400ca0 ]
  %t76 = phi i512 [ %t61, %block_0_400ca0 ]
  %t77 = phi i512 [ %t62, %block_0_400ca0 ]
  %t78 = phi i512 [ %t63, %block_0_400ca0 ]
  ; r76 := (eq r63 (0x3 : bv 64))
  %t79 = icmp eq i64 %t66, 3
  br i1 %t79, label %block_0_400cac, label %block_0_400cb0
block_0_400cac:
  %t80 = phi i64 [ %t65, %block_0_400ca6 ]
  %t81 = phi i64 [ %t67, %block_0_400ca6 ]
  %t82 = phi i64 [ %t69, %block_0_400ca6 ]
  %t83 = phi i64 [ %t70, %block_0_400ca6 ]
  %t84 = phi i512 [ %t71, %block_0_400ca6 ]
  %t85 = phi i512 [ %t72, %block_0_400ca6 ]
  %t86 = phi i512 [ %t73, %block_0_400ca6 ]
  %t87 = phi i512 [ %t74, %block_0_400ca6 ]
  %t88 = phi i512 [ %t75, %block_0_400ca6 ]
  %t89 = phi i512 [ %t76, %block_0_400ca6 ]
  %t90 = phi i512 [ %t77, %block_0_400ca6 ]
  %t91 = phi i512 [ %t78, %block_0_400ca6 ]
  ; r89 := (bv_add r77 (0xfffffffffffffff8 : bv 64))
  %t92 = add i64 %t80, 18446744073709551608
  ; r90 := (read r89 (bv 64))
  %t93 = inttoptr i64 %t92 to i64*
  %t94 = load i64, i64* %t93
  br label %block_0_400cb0
block_0_400cb0:
  %t95 = phi i64 [ %t65, %block_0_400ca6 ], [ %t80, %block_0_400cac ], [ %t181, %block_0_400ce2 ]
  %t96 = phi i64 [ %t67, %block_0_400ca6 ], [ %t81, %block_0_400cac ], [ %t182, %block_0_400ce2 ]
  %t97 = phi i64 [ %t68, %block_0_400ca6 ], [ %t94, %block_0_400cac ], [ %t183, %block_0_400ce2 ]
  %t98 = phi i64 [ %t69, %block_0_400ca6 ], [ %t82, %block_0_400cac ], [ %t195, %block_0_400ce2 ]
  %t99 = phi i64 [ %t70, %block_0_400ca6 ], [ %t83, %block_0_400cac ], [ %t184, %block_0_400ce2 ]
  %t100 = phi i512 [ %t71, %block_0_400ca6 ], [ %t84, %block_0_400cac ], [ %t185, %block_0_400ce2 ]
  %t101 = phi i512 [ %t72, %block_0_400ca6 ], [ %t85, %block_0_400cac ], [ %t186, %block_0_400ce2 ]
  %t102 = phi i512 [ %t73, %block_0_400ca6 ], [ %t86, %block_0_400cac ], [ %t187, %block_0_400ce2 ]
  %t103 = phi i512 [ %t74, %block_0_400ca6 ], [ %t87, %block_0_400cac ], [ %t188, %block_0_400ce2 ]
  %t104 = phi i512 [ %t75, %block_0_400ca6 ], [ %t88, %block_0_400cac ], [ %t189, %block_0_400ce2 ]
  %t105 = phi i512 [ %t76, %block_0_400ca6 ], [ %t89, %block_0_400cac ], [ %t190, %block_0_400ce2 ]
  %t106 = phi i512 [ %t77, %block_0_400ca6 ], [ %t90, %block_0_400cac ], [ %t191, %block_0_400ce2 ]
  %t107 = phi i512 [ %t78, %block_0_400ca6 ], [ %t91, %block_0_400cac ], [ %t192, %block_0_400ce2 ]
  ; r104 := (read r91 (bv 64))
  %t108 = inttoptr i64 %t95 to i64*
  %t109 = load i64, i64* %t108
  ; r105 := (bv_add r91 (0x10 : bv 64))
  %t110 = add i64 %t95, 16
  ; r106 := (eq r104 (0x0 : bv 64))
  %t111 = icmp eq i64 %t109, 0
  br i1 %t111, label %block_0_400cd2, label %block_0_400cbc
block_0_400cbc:
  %t112 = phi i64 [ %t49, %block_0_400c94 ], [ %t110, %block_0_400cb0 ], [ %t144, %block_0_400cc2 ]
  %t113 = phi i64 [ %t38, %block_0_400c94 ], [ %t109, %block_0_400cb0 ], [ %t140, %block_0_400cc2 ]
  %t114 = phi i64 [ 0, %block_0_400c94 ], [ %t96, %block_0_400cb0 ], [ %t143, %block_0_400cc2 ]
  %t115 = phi i64 [ 0, %block_0_400c94 ], [ %t97, %block_0_400cb0 ], [ %t128, %block_0_400cc2 ]
  %t116 = phi i64 [ 0, %block_0_400c94 ], [ %t98, %block_0_400cb0 ], [ %t129, %block_0_400cc2 ]
  %t117 = phi i64 [ %t40, %block_0_400c94 ], [ %t99, %block_0_400cb0 ], [ %t130, %block_0_400cc2 ]
  %t118 = phi i512 [ %t41, %block_0_400c94 ], [ %t100, %block_0_400cb0 ], [ %t131, %block_0_400cc2 ]
  %t119 = phi i512 [ %t42, %block_0_400c94 ], [ %t101, %block_0_400cb0 ], [ %t132, %block_0_400cc2 ]
  %t120 = phi i512 [ %t43, %block_0_400c94 ], [ %t102, %block_0_400cb0 ], [ %t133, %block_0_400cc2 ]
  %t121 = phi i512 [ %t44, %block_0_400c94 ], [ %t103, %block_0_400cb0 ], [ %t134, %block_0_400cc2 ]
  %t122 = phi i512 [ %t45, %block_0_400c94 ], [ %t104, %block_0_400cb0 ], [ %t135, %block_0_400cc2 ]
  %t123 = phi i512 [ %t46, %block_0_400c94 ], [ %t105, %block_0_400cb0 ], [ %t136, %block_0_400cc2 ]
  %t124 = phi i512 [ %t47, %block_0_400c94 ], [ %t106, %block_0_400cb0 ], [ %t137, %block_0_400cc2 ]
  %t125 = phi i512 [ %t48, %block_0_400c94 ], [ %t107, %block_0_400cb0 ], [ %t138, %block_0_400cc2 ]
  ; r121 := (eq r108 (0x4 : bv 64))
  %t126 = icmp eq i64 %t113, 4
  br i1 %t126, label %block_0_400cc2, label %block_0_400ca0
block_0_400cc2:
  %t127 = phi i64 [ %t112, %block_0_400cbc ]
  %t128 = phi i64 [ %t115, %block_0_400cbc ]
  %t129 = phi i64 [ %t116, %block_0_400cbc ]
  %t130 = phi i64 [ %t117, %block_0_400cbc ]
  %t131 = phi i512 [ %t118, %block_0_400cbc ]
  %t132 = phi i512 [ %t119, %block_0_400cbc ]
  %t133 = phi i512 [ %t120, %block_0_400cbc ]
  %t134 = phi i512 [ %t121, %block_0_400cbc ]
  %t135 = phi i512 [ %t122, %block_0_400cbc ]
  %t136 = phi i512 [ %t123, %block_0_400cbc ]
  %t137 = phi i512 [ %t124, %block_0_400cbc ]
  %t138 = phi i512 [ %t125, %block_0_400cbc ]
  ; r134 := (read r122 (bv 64))
  %t139 = inttoptr i64 %t127 to i64*
  %t140 = load i64, i64* %t139
  ; r135 := (bv_add r122 (0xfffffffffffffff8 : bv 64))
  %t141 = add i64 %t127, 18446744073709551608
  ; r136 := (read r135 (bv 64))
  %t142 = inttoptr i64 %t141 to i64*
  %t143 = load i64, i64* %t142
  ; r137 := (bv_add r122 (0x10 : bv 64))
  %t144 = add i64 %t127, 16
  ; r138 := (eq r134 (0x0 : bv 64))
  %t145 = icmp eq i64 %t140, 0
  br i1 %t145, label %block_0_400cd2, label %block_0_400cbc
block_0_400cd2:
  %t146 = phi i64 [ %t110, %block_0_400cb0 ], [ %t144, %block_0_400cc2 ]
  %t147 = phi i64 [ %t96, %block_0_400cb0 ], [ %t143, %block_0_400cc2 ]
  %t148 = phi i64 [ %t97, %block_0_400cb0 ], [ %t128, %block_0_400cc2 ]
  %t149 = phi i64 [ %t98, %block_0_400cb0 ], [ %t129, %block_0_400cc2 ]
  %t150 = phi i64 [ %t99, %block_0_400cb0 ], [ %t130, %block_0_400cc2 ]
  %t151 = phi i512 [ %t100, %block_0_400cb0 ], [ %t131, %block_0_400cc2 ]
  %t152 = phi i512 [ %t101, %block_0_400cb0 ], [ %t132, %block_0_400cc2 ]
  %t153 = phi i512 [ %t102, %block_0_400cb0 ], [ %t133, %block_0_400cc2 ]
  %t154 = phi i512 [ %t103, %block_0_400cb0 ], [ %t134, %block_0_400cc2 ]
  %t155 = phi i512 [ %t104, %block_0_400cb0 ], [ %t135, %block_0_400cc2 ]
  %t156 = phi i512 [ %t105, %block_0_400cb0 ], [ %t136, %block_0_400cc2 ]
  %t157 = phi i512 [ %t106, %block_0_400cb0 ], [ %t137, %block_0_400cc2 ]
  %t158 = phi i512 [ %t107, %block_0_400cb0 ], [ %t138, %block_0_400cc2 ]
  ; r152 := (eq r141 (0x0 : bv 64))
  %t159 = icmp eq i64 %t148, 0
  br i1 %t159, label %block_0_400cdd, label %block_0_400cd7
block_0_400cd7:
  %t160 = phi i64 [ %t146, %block_0_400cd2 ]
  %t161 = phi i64 [ %t147, %block_0_400cd2 ]
  %t162 = phi i64 [ %t148, %block_0_400cd2 ]
  %t163 = phi i64 [ %t149, %block_0_400cd2 ]
  %t164 = phi i64 [ %t150, %block_0_400cd2 ]
  %t165 = phi i512 [ %t151, %block_0_400cd2 ]
  %t166 = phi i512 [ %t152, %block_0_400cd2 ]
  %t167 = phi i512 [ %t153, %block_0_400cd2 ]
  %t168 = phi i512 [ %t154, %block_0_400cd2 ]
  %t169 = phi i512 [ %t155, %block_0_400cd2 ]
  %t170 = phi i512 [ %t156, %block_0_400cd2 ]
  %t171 = phi i512 [ %t157, %block_0_400cd2 ]
  %t172 = phi i512 [ %t158, %block_0_400cd2 ]
  ; r166 := (eq r154 (0x38 : bv 64))
  %t173 = icmp eq i64 %t161, 56
  br i1 %t173, label %block_0_400ce8, label %block_0_400cdd
block_0_400cdd:
  %t174 = phi i64 [ %t24, %block_0_400c8c ], [ %t146, %block_0_400cd2 ], [ %t160, %block_0_400cd7 ], [ %t196, %block_0_400ce8 ]
  %t175 = phi i64 [ %t25, %block_0_400c8c ], [ %t147, %block_0_400cd2 ], [ %t161, %block_0_400cd7 ], [ %t197, %block_0_400ce8 ]
  %t176 = phi i512 [ %t27, %block_0_400c8c ], [ %t151, %block_0_400cd2 ], [ %t165, %block_0_400cd7 ], [ %t201, %block_0_400ce8 ]
  ; r170 := (bitcast r169 (vec 8 double))
  %t177 = bitcast i512 %t176 to <8 x double>
  ; r171 := (tuple r167 r168 r170)
  %t178 = insertvalue { i64, i64, <8 x double> } undef, i64 %t174, 0
  %t179 = insertvalue { i64, i64, <8 x double> } %t178, i64 %t175, 1
  %t180 = insertvalue { i64, i64, <8 x double> } %t179, <8 x double> %t177, 2
  ret { i64, i64, <8 x double> } %t180
block_0_400ce2:
  %t181 = phi i64 [ %t50, %block_0_400ca0 ]
  %t182 = phi i64 [ %t52, %block_0_400ca0 ]
  %t183 = phi i64 [ %t53, %block_0_400ca0 ]
  %t184 = phi i64 [ %t55, %block_0_400ca0 ]
  %t185 = phi i512 [ %t56, %block_0_400ca0 ]
  %t186 = phi i512 [ %t57, %block_0_400ca0 ]
  %t187 = phi i512 [ %t58, %block_0_400ca0 ]
  %t188 = phi i512 [ %t59, %block_0_400ca0 ]
  %t189 = phi i512 [ %t60, %block_0_400ca0 ]
  %t190 = phi i512 [ %t61, %block_0_400ca0 ]
  %t191 = phi i512 [ %t62, %block_0_400ca0 ]
  %t192 = phi i512 [ %t63, %block_0_400ca0 ]
  ; r184 := (bv_add r172 (0xfffffffffffffff8 : bv 64))
  %t193 = add i64 %t181, 18446744073709551608
  ; r185 := (read r184 (bv 64))
  %t194 = inttoptr i64 %t193 to i64*
  %t195 = load i64, i64* %t194
  br label %block_0_400cb0
block_0_400ce8:
  %t196 = phi i64 [ %t160, %block_0_400cd7 ]
  %t197 = phi i64 [ %t161, %block_0_400cd7 ]
  %t198 = phi i64 [ %t162, %block_0_400cd7 ]
  %t199 = phi i64 [ %t163, %block_0_400cd7 ]
  %t200 = phi i64 [ %t164, %block_0_400cd7 ]
  %t201 = phi i512 [ %t165, %block_0_400cd7 ]
  %t202 = phi i512 [ %t166, %block_0_400cd7 ]
  %t203 = phi i512 [ %t167, %block_0_400cd7 ]
  %t204 = phi i512 [ %t168, %block_0_400cd7 ]
  %t205 = phi i512 [ %t169, %block_0_400cd7 ]
  %t206 = phi i512 [ %t170, %block_0_400cd7 ]
  %t207 = phi i512 [ %t171, %block_0_400cd7 ]
  %t208 = phi i512 [ %t172, %block_0_400cd7 ]
  ; r199 := (eq r189 (0x0 : bv 64))
  %t209 = icmp eq i64 %t199, 0
  br i1 %t209, label %block_0_400cdd, label %block_0_400cf2
block_0_400cf2:
  %t210 = phi i64 [ %t198, %block_0_400ce8 ]
  %t211 = phi i64 [ %t199, %block_0_400ce8 ]
  %t212 = phi i64 [ %t200, %block_0_400ce8 ]
  %t213 = phi i512 [ %t201, %block_0_400ce8 ]
  %t214 = phi i512 [ %t202, %block_0_400ce8 ]
  %t215 = phi i512 [ %t203, %block_0_400ce8 ]
  %t216 = phi i512 [ %t204, %block_0_400ce8 ]
  %t217 = phi i512 [ %t205, %block_0_400ce8 ]
  %t218 = phi i512 [ %t206, %block_0_400ce8 ]
  %t219 = phi i512 [ %t207, %block_0_400ce8 ]
  %t220 = phi i512 [ %t208, %block_0_400ce8 ]
  ; r211 := (read (0x635440 : bv 64) (bv 64))
  %t221 = inttoptr i64 6509632 to i64*
  %t222 = load i64, i64* %t221
  ; r212 := (read (0x635438 : bv 64) (bv 64))
  %t223 = inttoptr i64 6509624 to i64*
  %t224 = load i64, i64* %t223
  ; r213 := (read (0x635430 : bv 64) (bv 64))
  %t225 = inttoptr i64 6509616 to i64*
  %t226 = load i64, i64* %t225
  br label %block_0_400d1d
block_0_400d10:
  %t227 = phi i64 [ %t245, %block_0_400d1d ]
  %t228 = phi i64 [ %t246, %block_0_400d1d ]
  %t229 = phi i64 [ %t247, %block_0_400d1d ]
  %t230 = phi i64 [ %t248, %block_0_400d1d ]
  %t231 = phi i64 [ %t249, %block_0_400d1d ]
  %t232 = phi i64 [ %t250, %block_0_400d1d ]
  %t233 = phi i64 [ %t251, %block_0_400d1d ]
  %t234 = phi i512 [ %t252, %block_0_400d1d ]
  %t235 = phi i512 [ %t253, %block_0_400d1d ]
  %t236 = phi i512 [ %t254, %block_0_400d1d ]
  %t237 = phi i512 [ %t255, %block_0_400d1d ]
  %t238 = phi i512 [ %t256, %block_0_400d1d ]
  %t239 = phi i512 [ %t257, %block_0_400d1d ]
  %t240 = phi i512 [ %t258, %block_0_400d1d ]
  %t241 = phi i512 [ %t259, %block_0_400d1d ]
  ; r229 := (bv_add r217 (0x1 : bv 64))
  %t242 = add i64 %t230, 1
  ; r230 := (bv_add r215 (0x38 : bv 64))
  %t243 = add i64 %t228, 56
  ; r231 := (eq r229 r218)
  %t244 = icmp eq i64 %t242, %t231
  br i1 %t244, label %block_0_400d4c, label %block_0_400d1d
block_0_400d1d:
  %t245 = phi i64 [ %t222, %block_0_400cf2 ], [ %t227, %block_0_400d10 ], [ %t291, %block_0_400d22 ]
  %t246 = phi i64 [ %t210, %block_0_400cf2 ], [ %t243, %block_0_400d10 ], [ %t292, %block_0_400d22 ]
  %t247 = phi i64 [ %t226, %block_0_400cf2 ], [ %t229, %block_0_400d10 ], [ %t288, %block_0_400d22 ]
  %t248 = phi i64 [ 0, %block_0_400cf2 ], [ %t242, %block_0_400d10 ], [ %t278, %block_0_400d22 ]
  %t249 = phi i64 [ %t211, %block_0_400cf2 ], [ %t231, %block_0_400d10 ], [ %t265, %block_0_400d22 ]
  %t250 = phi i64 [ %t224, %block_0_400cf2 ], [ %t232, %block_0_400d10 ], [ %t281, %block_0_400d22 ]
  %t251 = phi i64 [ %t212, %block_0_400cf2 ], [ %t233, %block_0_400d10 ], [ %t266, %block_0_400d22 ]
  %t252 = phi i512 [ %t213, %block_0_400cf2 ], [ %t234, %block_0_400d10 ], [ %t267, %block_0_400d22 ]
  %t253 = phi i512 [ %t214, %block_0_400cf2 ], [ %t235, %block_0_400d10 ], [ %t268, %block_0_400d22 ]
  %t254 = phi i512 [ %t215, %block_0_400cf2 ], [ %t236, %block_0_400d10 ], [ %t269, %block_0_400d22 ]
  %t255 = phi i512 [ %t216, %block_0_400cf2 ], [ %t237, %block_0_400d10 ], [ %t270, %block_0_400d22 ]
  %t256 = phi i512 [ %t217, %block_0_400cf2 ], [ %t238, %block_0_400d10 ], [ %t271, %block_0_400d22 ]
  %t257 = phi i512 [ %t218, %block_0_400cf2 ], [ %t239, %block_0_400d10 ], [ %t272, %block_0_400d22 ]
  %t258 = phi i512 [ %t219, %block_0_400cf2 ], [ %t240, %block_0_400d10 ], [ %t273, %block_0_400d22 ]
  %t259 = phi i512 [ %t220, %block_0_400cf2 ], [ %t241, %block_0_400d10 ], [ %t274, %block_0_400d22 ]
  ; r247 := (read r233 (bv 32))
  %t260 = inttoptr i64 %t246 to i32*
  %t261 = load i32, i32* %t260
  ; r248 := (eq r247 (0x7 : bv 32))
  %t262 = icmp eq i32 %t261, 7
  br i1 %t262, label %block_0_400d22, label %block_0_400d10
block_0_400d22:
  %t263 = phi i64 [ %t246, %block_0_400d1d ]
  %t264 = phi i64 [ %t248, %block_0_400d1d ]
  %t265 = phi i64 [ %t249, %block_0_400d1d ]
  %t266 = phi i64 [ %t251, %block_0_400d1d ]
  %t267 = phi i512 [ %t252, %block_0_400d1d ]
  %t268 = phi i512 [ %t253, %block_0_400d1d ]
  %t269 = phi i512 [ %t254, %block_0_400d1d ]
  %t270 = phi i512 [ %t255, %block_0_400d1d ]
  %t271 = phi i512 [ %t256, %block_0_400d1d ]
  %t272 = phi i512 [ %t257, %block_0_400d1d ]
  %t273 = phi i512 [ %t258, %block_0_400d1d ]
  %t274 = phi i512 [ %t259, %block_0_400d1d ]
  ; r261 := (bv_add r249 (0x30 : bv 64))
  %t275 = add i64 %t263, 48
  ; r262 := (read r261 (bv 64))
  %t276 = inttoptr i64 %t275 to i64*
  %t277 = load i64, i64* %t276
  ; r263 := (bv_add r250 (0x1 : bv 64))
  %t278 = add i64 %t264, 1
  ; r264 := (bv_add r249 (0x20 : bv 64))
  %t279 = add i64 %t263, 32
  ; r265 := (read r264 (bv 64))
  %t280 = inttoptr i64 %t279 to i64*
  %t281 = load i64, i64* %t280
  ; r266 := (bv_add r249 (0x28 : bv 64))
  %t282 = add i64 %t263, 40
  ; r267 := (read r266 (bv 64))
  %t283 = inttoptr i64 %t282 to i64*
  %t284 = load i64, i64* %t283
  ; r268 := (bv_add r262 r267)
  %t285 = add i64 %t277, %t284
  ; r269 := (bv_sub (0x0 : bv 64) r262)
  %t286 = sub i64 0, %t277
  ; r270 := (bv_add r268 (0xffffffffffffffff : bv 64))
  %t287 = add i64 %t285, 18446744073709551615
  ; r271 := (bv_and r270 r269)
  %t288 = and i64 %t287, %t286
  ; r272 := (bv_add r249 (0x10 : bv 64))
  %t289 = add i64 %t263, 16
  ; r273 := (read r272 (bv 64))
  %t290 = inttoptr i64 %t289 to i64*
  %t291 = load i64, i64* %t290
  ; r274 := (bv_add r249 (0x38 : bv 64))
  %t292 = add i64 %t263, 56
  ; r275 := (eq r263 r251)
  %t293 = icmp eq i64 %t278, %t265
  br i1 %t293, label %block_0_400d4c, label %block_0_400d1d
block_0_400d4c:
  %t294 = phi i64 [ %t227, %block_0_400d10 ], [ %t291, %block_0_400d22 ]
  %t295 = phi i64 [ %t243, %block_0_400d10 ], [ %t292, %block_0_400d22 ]
  %t296 = phi i64 [ %t229, %block_0_400d10 ], [ %t288, %block_0_400d22 ]
  %t297 = phi i64 [ %t232, %block_0_400d10 ], [ %t281, %block_0_400d22 ]
  %t298 = phi i64 [ %t233, %block_0_400d10 ], [ %t266, %block_0_400d22 ]
  %t299 = phi i512 [ %t234, %block_0_400d10 ], [ %t267, %block_0_400d22 ]
  %t300 = phi i512 [ %t235, %block_0_400d10 ], [ %t268, %block_0_400d22 ]
  %t301 = phi i512 [ %t236, %block_0_400d10 ], [ %t269, %block_0_400d22 ]
  %t302 = phi i512 [ %t237, %block_0_400d10 ], [ %t270, %block_0_400d22 ]
  %t303 = phi i512 [ %t238, %block_0_400d10 ], [ %t271, %block_0_400d22 ]
  %t304 = phi i512 [ %t239, %block_0_400d10 ], [ %t272, %block_0_400d22 ]
  %t305 = phi i512 [ %t240, %block_0_400d10 ], [ %t273, %block_0_400d22 ]
  %t306 = phi i512 [ %t241, %block_0_400d10 ], [ %t274, %block_0_400d22 ]
  ; write (0x635430 : bv 64) r278
  %t307 = inttoptr i64 6509616 to i64*
  store i64 %t296, i64* %t307
  ; write (0x635440 : bv 64) r276
  %t308 = inttoptr i64 6509632 to i64*
  store i64 %t294, i64* %t308
  ; write (0x635438 : bv 64) r279
  %t309 = inttoptr i64 6509624 to i64*
  store i64 %t297, i64* %t309
  ; r289 := (bitcast r281 (vec 8 double))
  %t310 = bitcast i512 %t299 to <8 x double>
  ; r290 := (bitcast r282 (vec 8 double))
  %t311 = bitcast i512 %t300 to <8 x double>
  ; r291 := (bitcast r283 (vec 8 double))
  %t312 = bitcast i512 %t301 to <8 x double>
  ; r292 := (bitcast r284 (vec 8 double))
  %t313 = bitcast i512 %t302 to <8 x double>
  ; r293 := (bitcast r285 (vec 8 double))
  %t314 = bitcast i512 %t303 to <8 x double>
  ; r294 := (bitcast r286 (vec 8 double))
  %t315 = bitcast i512 %t304 to <8 x double>
  ; r295 := (bitcast r287 (vec 8 double))
  %t316 = bitcast i512 %t305 to <8 x double>
  ; r296 := (bitcast r288 (vec 8 double))
  %t317 = bitcast i512 %t306 to <8 x double>
  ; r297 := call _rtld_allocate_tls((0x0 : bv 64), (0x18 : bv 64), (0x10 : bv 64), r277, r279, r280, r289, r290, r291, r292, r293, r294, r295, r296)
  %t318 = call i64 (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_rtld_allocate_tls(i64 0, i64 24, i64 16, i64 %t295, i64 %t297, i64 %t298, <8 x double> %t310, <8 x double> %t311, <8 x double> %t312, <8 x double> %t313, <8 x double> %t314, <8 x double> %t315, <8 x double> %t316, <8 x double> %t317)
  br label %block_0_400d72
block_0_400d72:
  %t319 = phi i64 [ %t318, %block_0_400d4c ]
  %t320 = call { i64, i64, <8 x double> } (i64) @_set_tp(i64 %t319)
  ret { i64, i64, <8 x double> } %t320
}
define void @_rtld_free_tls(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_400e60:
  ; r0 := (read (0x635430 : bv 64) (bv 64))
  %t0 = inttoptr i64 6509616 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (bv_sub (0x0 : bv 64) arg2)
  %t2 = sub i64 0, %arg2
  ; r2 := (bv_add arg0 (0x8 : bv 64))
  %t3 = add i64 %arg0, 8
  ; r3 := (read r2 (bv 64))
  %t4 = inttoptr i64 %t3 to i64*
  %t5 = load i64, i64* %t4
  ; r4 := (bv_add r0 (0xffffffffffffffff : bv 64))
  %t6 = add i64 %t1, 18446744073709551615
  ; r5 := (bv_add r4 arg2)
  %t7 = add i64 %t6, %arg2
  ; r6 := (bv_and r1 r5)
  %t8 = and i64 %t2, %t7
  ; r7 := (bv_sub arg0 r6)
  %t9 = sub i64 %arg0, %t8
  ; r8 := (bitcast arg6 (bv 512))
  %t10 = bitcast <8 x double> %arg6 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r10 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r12 := (bitcast arg8 (bv 512))
  %t14 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r14 := (bitcast arg9 (bv 512))
  %t16 = bitcast <8 x double> %arg9 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t17 = bitcast i512 %t16 to <8 x double>
  ; r16 := (bitcast arg10 (bv 512))
  %t18 = bitcast <8 x double> %arg10 to i512
  ; r17 := (bitcast r16 (vec 8 double))
  %t19 = bitcast i512 %t18 to <8 x double>
  ; r18 := (bitcast arg11 (bv 512))
  %t20 = bitcast <8 x double> %arg11 to i512
  ; r19 := (bitcast r18 (vec 8 double))
  %t21 = bitcast i512 %t20 to <8 x double>
  ; r20 := (bitcast arg12 (bv 512))
  %t22 = bitcast <8 x double> %arg12 to i512
  ; r21 := (bitcast r20 (vec 8 double))
  %t23 = bitcast i512 %t22 to <8 x double>
  ; r22 := (bitcast arg13 (bv 512))
  %t24 = bitcast <8 x double> %arg13 to i512
  ; r23 := (bitcast r22 (vec 8 double))
  %t25 = bitcast i512 %t24 to <8 x double>
  ; r24 := call free(r7, arg1, arg2, r6, arg4, arg5, r9, r11, r13, r15, r17, r19, r21, r23)
  %t26 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t9, i64 %arg1, i64 %arg2, i64 %t8, i64 %arg4, i64 %arg5, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15, <8 x double> %t17, <8 x double> %t19, <8 x double> %t21, <8 x double> %t23, <8 x double> %t25)
  ; r25 := (tuple_field r24 0)
  %t27 = extractvalue { i64, i64, <8 x double> } %t26, 0
  ; r26 := (tuple_field r24 1)
  %t28 = extractvalue { i64, i64, <8 x double> } %t26, 1
  ; r27 := (tuple_field r24 2)
  %t29 = extractvalue { i64, i64, <8 x double> } %t26, 2
  ; r28 := (bitcast r27 (bv 512))
  %t30 = bitcast <8 x double> %t29 to i512
  ; r29 := (bitcast arg7 (bv 512))
  %t31 = bitcast <8 x double> %arg7 to i512
  ; r30 := (bitcast arg8 (bv 512))
  %t32 = bitcast <8 x double> %arg8 to i512
  ; r31 := (bitcast arg9 (bv 512))
  %t33 = bitcast <8 x double> %arg9 to i512
  ; r32 := (bitcast arg10 (bv 512))
  %t34 = bitcast <8 x double> %arg10 to i512
  ; r33 := (bitcast arg11 (bv 512))
  %t35 = bitcast <8 x double> %arg11 to i512
  ; r34 := (bitcast arg12 (bv 512))
  %t36 = bitcast <8 x double> %arg12 to i512
  ; r35 := (bitcast arg13 (bv 512))
  %t37 = bitcast <8 x double> %arg13 to i512
  br label %block_0_400e84
block_0_400e84:
  %t38 = phi i64 [ %arg3, %block_0_400e60 ]
  %t39 = phi i64 [ %t28, %block_0_400e60 ]
  %t40 = phi i64 [ %t5, %block_0_400e60 ]
  %t41 = phi i64 [ %arg1, %block_0_400e60 ]
  %t42 = phi i64 [ %arg4, %block_0_400e60 ]
  %t43 = phi i64 [ %arg5, %block_0_400e60 ]
  %t44 = phi i512 [ %t30, %block_0_400e60 ]
  %t45 = phi i512 [ %t31, %block_0_400e60 ]
  %t46 = phi i512 [ %t32, %block_0_400e60 ]
  %t47 = phi i512 [ %t33, %block_0_400e60 ]
  %t48 = phi i512 [ %t34, %block_0_400e60 ]
  %t49 = phi i512 [ %t35, %block_0_400e60 ]
  %t50 = phi i512 [ %t36, %block_0_400e60 ]
  %t51 = phi i512 [ %t37, %block_0_400e60 ]
  ; r50 := (bitcast r42 (vec 8 double))
  %t52 = bitcast i512 %t44 to <8 x double>
  ; r51 := (bitcast r43 (vec 8 double))
  %t53 = bitcast i512 %t45 to <8 x double>
  ; r52 := (bitcast r44 (vec 8 double))
  %t54 = bitcast i512 %t46 to <8 x double>
  ; r53 := (bitcast r45 (vec 8 double))
  %t55 = bitcast i512 %t47 to <8 x double>
  ; r54 := (bitcast r46 (vec 8 double))
  %t56 = bitcast i512 %t48 to <8 x double>
  ; r55 := (bitcast r47 (vec 8 double))
  %t57 = bitcast i512 %t49 to <8 x double>
  ; r56 := (bitcast r48 (vec 8 double))
  %t58 = bitcast i512 %t50 to <8 x double>
  ; r57 := (bitcast r49 (vec 8 double))
  %t59 = bitcast i512 %t51 to <8 x double>
  ; r58 := call free(r38, r39, r37, r36, r40, r41, r50, r51, r52, r53, r54, r55, r56, r57)
  %t60 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t40, i64 %t41, i64 %t39, i64 %t38, i64 %t42, i64 %t43, <8 x double> %t52, <8 x double> %t53, <8 x double> %t54, <8 x double> %t55, <8 x double> %t56, <8 x double> %t57, <8 x double> %t58, <8 x double> %t59)
  ret void
}
define void @setpgrp(i64 %arg0, i64 %arg1) {
block_0_400f00:
  call void (i64, i64) @__sys_setpgid(i64 %arg0, i64 %arg1)
  ret void
}
define { i64, i64, <8 x double> } @_set_tp(i64 %arg0) {
block_0_400f50:
  %t0 = call { i64, i64, <8 x double> } (i64) @amd64_set_fsbase(i64 %arg0)
  ret { i64, i64, <8 x double> } %t0
}
define { i64, <8 x double> } @umax2s(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_400fc0:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (eq r0 (0xa : bv 32))
  %t1 = icmp eq i32 %t0, 10
  ; r2 := (bv_add arg2 (0x40 : bv 64))
  %t2 = add i64 %arg2, 64
  ; write r2 (0x0 : bv 8)
  %t3 = inttoptr i64 %t2 to i8*
  store i8 0, i8* %t3
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r4 := (bitcast arg3 (bv 512))
  %t5 = bitcast <8 x double> %arg3 to i512
  br i1 %t1, label %block_0_401006, label %block_0_400fcf
block_0_400fcf:
  %t6 = phi i64 [ %arg0, %block_0_400fc0 ]
  %t7 = phi i64 [ %arg2, %block_0_400fc0 ]
  %t8 = phi i64 [ %arg1, %block_0_400fc0 ]
  %t9 = phi i512 [ %t5, %block_0_400fc0 ]
  ; r9 := (trunc r7 32)
  %t10 = trunc i64 %t8 to i32
  ; r10 := (eq r9 (0x10 : bv 32))
  %t11 = icmp eq i32 %t10, 16
  ; r11 := (uext r9 64)
  %t12 = zext i32 %t10 to i64
  br i1 %t11, label %block_0_401047, label %block_0_400fdc
block_0_400fdc:
  %t13 = phi i64 [ %t6, %block_0_400fcf ]
  %t14 = phi i64 [ %t7, %block_0_400fcf ]
  %t15 = phi i64 [ 64, %block_0_400fcf ]
  %t16 = phi i64 [ %t12, %block_0_400fcf ]
  %t17 = phi i512 [ %t9, %block_0_400fcf ]
  br label %block_0_400fe0
block_0_400fe0:
  %t18 = phi i64 [ %t13, %block_0_400fdc ], [ %t28, %block_0_400fe0 ]
  %t19 = phi i64 [ %t15, %block_0_400fdc ], [ %t25, %block_0_400fe0 ]
  %t20 = phi i64 [ %t16, %block_0_400fdc ], [ %t20, %block_0_400fe0 ]
  %t21 = phi i64 [ %t14, %block_0_400fdc ], [ %t21, %block_0_400fe0 ]
  %t22 = phi i512 [ %t17, %block_0_400fdc ], [ %t22, %block_0_400fe0 ]
  ; r22 := (trunc r18 32)
  %t23 = trunc i64 %t19 to i32
  ; r23 := (bv_add r22 (0xffffffff : bv 32))
  %t24 = add i32 %t23, 4294967295
  ; r24 := (uext r23 64)
  %t25 = zext i32 %t24 to i64
  ; r25 := (bv_add r24 r20)
  %t26 = add i64 %t25, %t21
  ; r26 := (div 64 (0x0 : bv 64) r17 r19)
  %t27 = call { i64, i64 } (i64, i64, i64) asm sideeffect "div $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i64 0, i64 %t18, i64 %t20)
  ; r27 := (tuple_field r26 0)
  %t28 = extractvalue { i64, i64 } %t27, 0
  ; r28 := (tuple_field r26 1)
  %t29 = extractvalue { i64, i64 } %t27, 1
  ; r29 := (bv_add r28 (0x4268e8 : bv 64))
  %t30 = add i64 %t29, 4352232
  ; r30 := (read r29 (bv 8))
  %t31 = inttoptr i64 %t30 to i8*
  %t32 = load i8, i8* %t31
  ; r31 := (eq r27 (0x0 : bv 64))
  %t33 = icmp eq i64 %t28, 0
  ; write r25 r30
  %t34 = inttoptr i64 %t26 to i8*
  store i8 %t32, i8* %t34
  br i1 %t33, label %block_0_401002, label %block_0_400fe0
block_0_401002:
  %t35 = phi i64 [ %t26, %block_0_400fe0 ]
  %t36 = phi i512 [ %t22, %block_0_400fe0 ]
  ; r34 := (bitcast r33 (vec 8 double))
  %t37 = bitcast i512 %t36 to <8 x double>
  ; r35 := (tuple r32 r34)
  %t38 = insertvalue { i64, <8 x double> } undef, i64 %t35, 0
  %t39 = insertvalue { i64, <8 x double> } %t38, <8 x double> %t37, 1
  ret { i64, <8 x double> } %t39
block_0_401006:
  %t40 = phi i64 [ %arg0, %block_0_400fc0 ]
  %t41 = phi i64 [ %arg2, %block_0_400fc0 ]
  %t42 = phi i512 [ %t4, %block_0_400fc0 ]
  br label %block_0_401015
block_0_401015:
  %t43 = phi i64 [ %t40, %block_0_401006 ], [ %t57, %block_0_401015 ]
  %t44 = phi i64 [ 64, %block_0_401006 ], [ %t50, %block_0_401015 ]
  %t45 = phi i64 [ 14757395258967641293, %block_0_401006 ], [ %t45, %block_0_401015 ]
  %t46 = phi i64 [ %t41, %block_0_401006 ], [ %t46, %block_0_401015 ]
  %t47 = phi i512 [ %t42, %block_0_401006 ], [ %t47, %block_0_401015 ]
  ; r44 := (trunc r40 32)
  %t48 = trunc i64 %t44 to i32
  ; r45 := (bv_add r44 (0xffffffff : bv 32))
  %t49 = add i32 %t48, 4294967295
  ; r46 := (uext r45 64)
  %t50 = zext i32 %t49 to i64
  ; r47 := (bv_add r46 r42)
  %t51 = add i64 %t50, %t46
  ; r48 := (uext r39 128)
  %t52 = zext i64 %t43 to i128
  ; r49 := (uext r41 128)
  %t53 = zext i64 %t45 to i128
  ; r50 := (bv_mul r48 r49)
  %t54 = mul i128 %t52, %t53
  ; r51 := (bv_shr r50 (0x40 : bv 128))
  %t55 = lshr i128 %t54, 64
  ; r52 := (trunc r51 64)
  %t56 = trunc i128 %t55 to i64
  ; r53 := (bv_shr r52 (0x3 : bv 64))
  %t57 = lshr i64 %t56, 3
  ; r54 := (eq r53 (0x0 : bv 64))
  %t58 = icmp eq i64 %t57, 0
  ; r55 := (bv_mul (0x4 : bv 64) r53)
  %t59 = mul i64 4, %t57
  ; r56 := (bv_add r53 r55)
  %t60 = add i64 %t57, %t59
  ; r57 := (bv_add r56 r56)
  %t61 = add i64 %t60, %t60
  ; r58 := (bv_sub r39 r57)
  %t62 = sub i64 %t43, %t61
  ; r59 := (bv_add r58 (0x426bce : bv 64))
  %t63 = add i64 %t62, 4352974
  ; r60 := (read r59 (bv 8))
  %t64 = inttoptr i64 %t63 to i8*
  %t65 = load i8, i8* %t64
  ; write r47 r60
  %t66 = inttoptr i64 %t51 to i8*
  store i8 %t65, i8* %t66
  br i1 %t58, label %block_0_401043, label %block_0_401015
block_0_401043:
  %t67 = phi i64 [ %t51, %block_0_401015 ]
  %t68 = phi i512 [ %t47, %block_0_401015 ]
  ; r63 := (bitcast r62 (vec 8 double))
  %t69 = bitcast i512 %t68 to <8 x double>
  ; r64 := (tuple r61 r63)
  %t70 = insertvalue { i64, <8 x double> } undef, i64 %t67, 0
  %t71 = insertvalue { i64, <8 x double> } %t70, <8 x double> %t69, 1
  ret { i64, <8 x double> } %t71
block_0_401047:
  %t72 = phi i64 [ %t6, %block_0_400fcf ]
  %t73 = phi i64 [ %t7, %block_0_400fcf ]
  %t74 = phi i512 [ %t9, %block_0_400fcf ]
  br label %block_0_401050
block_0_401050:
  %t75 = phi i64 [ %t72, %block_0_401047 ], [ %t83, %block_0_401050 ]
  %t76 = phi i64 [ 64, %block_0_401047 ], [ %t81, %block_0_401050 ]
  %t77 = phi i64 [ %t73, %block_0_401047 ], [ %t77, %block_0_401050 ]
  %t78 = phi i512 [ %t74, %block_0_401047 ], [ %t78, %block_0_401050 ]
  ; r72 := (trunc r69 32)
  %t79 = trunc i64 %t76 to i32
  ; r73 := (bv_add r72 (0xffffffff : bv 32))
  %t80 = add i32 %t79, 4294967295
  ; r74 := (uext r73 64)
  %t81 = zext i32 %t80 to i64
  ; r75 := (bv_add r74 r70)
  %t82 = add i64 %t81, %t77
  ; r76 := (bv_shr r68 (0x4 : bv 64))
  %t83 = lshr i64 %t75, 4
  ; r77 := (eq r76 (0x0 : bv 64))
  %t84 = icmp eq i64 %t83, 0
  ; r78 := (trunc r68 32)
  %t85 = trunc i64 %t75 to i32
  ; r79 := (bv_and r78 (0xf : bv 32))
  %t86 = and i32 %t85, 15
  ; r80 := (uext r79 64)
  %t87 = zext i32 %t86 to i64
  ; r81 := (bv_add r80 (0x426bd9 : bv 64))
  %t88 = add i64 %t87, 4352985
  ; r82 := (read r81 (bv 8))
  %t89 = inttoptr i64 %t88 to i8*
  %t90 = load i8, i8* %t89
  ; write r75 r82
  %t91 = inttoptr i64 %t82 to i8*
  store i8 %t90, i8* %t91
  br i1 %t84, label %block_0_401071, label %block_0_401050
block_0_401071:
  %t92 = phi i64 [ %t82, %block_0_401050 ]
  %t93 = phi i512 [ %t78, %block_0_401050 ]
  ; r85 := (bitcast r84 (vec 8 double))
  %t94 = bitcast i512 %t93 to <8 x double>
  ; r86 := (tuple r83 r85)
  %t95 = insertvalue { i64, <8 x double> } undef, i64 %t92, 0
  %t96 = insertvalue { i64, <8 x double> } %t95, <8 x double> %t94, 1
  ret { i64, <8 x double> } %t96
}
define { i64, i64, <8 x double> } @malloc_mutex_init(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_401080:
  ; r0 := (read (0x427fc0 : bv 64) (bv 64))
  %t0 = inttoptr i64 4358080 to i64*
  %t1 = load i64, i64* %t0
  ; write arg0 r0
  %t2 = inttoptr i64 %arg0 to i64*
  store i64 %t1, i64* %t2
  ; r1 := (read (0x427fc8 : bv 64) (bv 64))
  %t3 = inttoptr i64 4358088 to i64*
  %t4 = load i64, i64* %t3
  ; r2 := (bv_add arg0 (0x8 : bv 64))
  %t5 = add i64 %arg0, 8
  ; write r2 r1
  %t6 = inttoptr i64 %t5 to i64*
  store i64 %t4, i64* %t6
  ; r3 := (read (0x427fd0 : bv 64) (bv 64))
  %t7 = inttoptr i64 4358096 to i64*
  %t8 = load i64, i64* %t7
  ; r4 := (bv_add arg0 (0x10 : bv 64))
  %t9 = add i64 %arg0, 16
  ; write r4 r3
  %t10 = inttoptr i64 %t9 to i64*
  store i64 %t8, i64* %t10
  ; r5 := (read (0x427fd8 : bv 64) (bv 64))
  %t11 = inttoptr i64 4358104 to i64*
  %t12 = load i64, i64* %t11
  ; r6 := (bv_add arg0 (0x18 : bv 64))
  %t13 = add i64 %arg0, 24
  ; write r6 r5
  %t14 = inttoptr i64 %t13 to i64*
  store i64 %t12, i64* %t14
  ; r7 := (bitcast arg3 (bv 512))
  %t15 = bitcast <8 x double> %arg3 to i512
  ; r8 := (bitcast r7 (vec 8 double))
  %t16 = bitcast i512 %t15 to <8 x double>
  ; r9 := (tuple r5 arg2 r8)
  %t17 = insertvalue { i64, i64, <8 x double> } undef, i64 %t12, 0
  %t18 = insertvalue { i64, i64, <8 x double> } %t17, i64 %arg2, 1
  %t19 = insertvalue { i64, i64, <8 x double> } %t18, <8 x double> %t16, 2
  ret { i64, i64, <8 x double> } %t19
}
define { i64, i64, <8 x double> } @_pthread_mutex_init_calloc_cb_stub(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_4010b0:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (tuple (0x0 : bv 64) arg2 r1)
  %t2 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t3 = insertvalue { i64, i64, <8 x double> } %t2, i64 %arg2, 1
  %t4 = insertvalue { i64, i64, <8 x double> } %t3, <8 x double> %t1, 2
  ret { i64, i64, <8 x double> } %t4
}
define { i64, <8 x double> } @pow2_ceil(i64 %arg0, <8 x double> %arg1) {
block_0_4010c0:
  ; r0 := (bv_add arg0 (0xffffffffffffffff : bv 64))
  %t0 = add i64 %arg0, 18446744073709551615
  ; r1 := (bv_shr r0 (0x1 : bv 64))
  %t1 = lshr i64 %t0, 1
  ; r2 := (bv_or r1 r0)
  %t2 = or i64 %t1, %t0
  ; r3 := (bv_shr r2 (0x2 : bv 64))
  %t3 = lshr i64 %t2, 2
  ; r4 := (bv_or r3 r2)
  %t4 = or i64 %t3, %t2
  ; r5 := (bv_shr r4 (0x4 : bv 64))
  %t5 = lshr i64 %t4, 4
  ; r6 := (bv_or r5 r4)
  %t6 = or i64 %t5, %t4
  ; r7 := (bv_shr r6 (0x8 : bv 64))
  %t7 = lshr i64 %t6, 8
  ; r8 := (bv_or r7 r6)
  %t8 = or i64 %t7, %t6
  ; r9 := (bv_shr r8 (0x10 : bv 64))
  %t9 = lshr i64 %t8, 16
  ; r10 := (bv_or r9 r8)
  %t10 = or i64 %t9, %t8
  ; r11 := (bv_shr r10 (0x20 : bv 64))
  %t11 = lshr i64 %t10, 32
  ; r12 := (bv_or r11 r10)
  %t12 = or i64 %t11, %t10
  ; r13 := (bv_add r12 (0x1 : bv 64))
  %t13 = add i64 %t12, 1
  ; r14 := (bitcast arg1 (bv 512))
  %t14 = bitcast <8 x double> %arg1 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := (tuple r13 r15)
  %t16 = insertvalue { i64, <8 x double> } undef, i64 %t13, 0
  %t17 = insertvalue { i64, <8 x double> } %t16, <8 x double> %t15, 1
  ret { i64, <8 x double> } %t17
}
define { i64, i64, <8 x double> } @extent_tree_ad_new(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_401830:
  ; r0 := (bv_add arg0 (0x8 : bv 64))
  %t0 = add i64 %arg0, 8
  ; write arg0 r0
  %t1 = inttoptr i64 %arg0 to i64*
  store i64 %t0, i64* %t1
  ; r1 := (bv_add arg0 (0x18 : bv 64))
  %t2 = add i64 %arg0, 24
  ; write r1 r0
  %t3 = inttoptr i64 %t2 to i64*
  store i64 %t0, i64* %t3
  ; r2 := (bv_and r0 (0xfffffffffffffffe : bv 64))
  %t4 = and i64 %t0, 18446744073709551614
  ; r3 := (bv_add arg0 (0x20 : bv 64))
  %t5 = add i64 %arg0, 32
  ; write r3 r2
  %t6 = inttoptr i64 %t5 to i64*
  store i64 %t4, i64* %t6
  ; r4 := (bitcast arg3 (bv 512))
  %t7 = bitcast <8 x double> %arg3 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t8 = bitcast i512 %t7 to <8 x double>
  ; r6 := (tuple r2 arg2 r5)
  %t9 = insertvalue { i64, i64, <8 x double> } undef, i64 %t4, 0
  %t10 = insertvalue { i64, i64, <8 x double> } %t9, i64 %arg2, 1
  %t11 = insertvalue { i64, i64, <8 x double> } %t10, <8 x double> %t8, 2
  ret { i64, i64, <8 x double> } %t11
}
define <8 x double> @arena_run_tree_new(i64 %arg0, <8 x double> %arg1) {
block_0_402610:
  ; r0 := (bv_add arg0 (0x8 : bv 64))
  %t0 = add i64 %arg0, 8
  ; write arg0 r0
  %t1 = inttoptr i64 %arg0 to i64*
  store i64 %t0, i64* %t1
  ; write r0 r0
  %t2 = inttoptr i64 %t0 to i64*
  store i64 %t0, i64* %t2
  ; r1 := (bv_and r0 (0xfffffffffffffffe : bv 64))
  %t3 = and i64 %t0, 18446744073709551614
  ; r2 := (bv_add arg0 (0x10 : bv 64))
  %t4 = add i64 %arg0, 16
  ; write r2 r1
  %t5 = inttoptr i64 %t4 to i64*
  store i64 %t3, i64* %t5
  ; r3 := (bitcast arg1 (bv 512))
  %t6 = bitcast <8 x double> %arg1 to i512
  ; r4 := (bitcast r3 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ret <8 x double> %t7
}
define { i64, <8 x double> } @arena_bin_run_size_calc(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_403400:
  ; r0 := (bv_add arg1 (0xffffffffffffffe8 : bv 64))
  %t0 = add i64 %arg1, 18446744073709551592
  ; r1 := (trunc arg1 32)
  %t1 = trunc i64 %arg1 to i32
  ; r2 := (uext r1 64)
  %t2 = zext i32 %t1 to i64
  ; r3 := (bv_add arg0 (0x28 : bv 64))
  %t3 = add i64 %arg0, 40
  ; r4 := (read r3 (bv 64))
  %t4 = inttoptr i64 %t3 to i64*
  %t5 = load i64, i64* %t4
  ; r5 := (div 64 (0x0 : bv 64) r0 r4)
  %t6 = call { i64, i64 } (i64, i64, i64) asm sideeffect "div $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i64 0, i64 %t0, i64 %t5)
  ; r6 := (tuple_field r5 0)
  %t7 = extractvalue { i64, i64 } %t6, 0
  ; r7 := (bv_add r6 (0x1 : bv 64))
  %t8 = add i64 %t7, 1
  ; r8 := (trunc r7 32)
  %t9 = trunc i64 %t8 to i32
  ; r9 := (uext r8 64)
  %t10 = zext i32 %t9 to i64
  ; r10 := (bitcast arg2 (bv 512))
  %t11 = bitcast <8 x double> %arg2 to i512
  br label %block_0_403425
block_0_403425:
  %t12 = phi i64 [ %t2, %block_0_403400 ], [ %t12, %block_0_403425 ]
  %t13 = phi i64 [ %t10, %block_0_403400 ], [ %t21, %block_0_403425 ]
  %t14 = phi i64 [ %arg1, %block_0_403400 ], [ %t14, %block_0_403425 ]
  %t15 = phi i64 [ %t5, %block_0_403400 ], [ %t15, %block_0_403425 ]
  %t16 = phi i512 [ %t11, %block_0_403400 ], [ %t16, %block_0_403425 ]
  %t17 = phi i64 [ %arg0, %block_0_403400 ], [ %t17, %block_0_403425 ]
  ; r17 := (trunc r12 32)
  %t18 = trunc i64 %t13 to i32
  ; r18 := (bv_add r17 (0xffffffff : bv 32))
  %t19 = add i32 %t18, 4294967295
  ; r19 := (trunc r18 8)
  %t20 = trunc i32 %t19 to i8
  ; r20 := (uext r18 64)
  %t21 = zext i32 %t19 to i64
  ; r21 := (trunc r11 32)
  %t22 = trunc i64 %t12 to i32
  ; r22 := (bv_and r19 (0x1f : bv 8))
  %t23 = and i8 %t20, 31
  ; r23 := (eq r22 (0x0 : bv 8))
  %t24 = icmp eq i8 %t23, 0
  ; r24 := (mux r23 (0x0 : bv 8) (0x1 : bv 8))
  %t25 = select i1 %t24, i8 0, i8 1
  ; r25 := (uext r24 64)
  %t26 = zext i8 %t25 to i64
  ; r26 := (bv_shr r18 (0x5 : bv 32))
  %t27 = lshr i32 %t19, 5
  ; r27 := (uext r26 64)
  %t28 = zext i32 %t27 to i64
  ; r28 := (bv_add r25 r27)
  %t29 = add i64 %t26, %t28
  ; r29 := (trunc r28 32)
  %t30 = trunc i64 %t29 to i32
  ; r30 := (uext r29 64)
  %t31 = zext i32 %t30 to i64
  ; r31 := (trunc r14 32)
  %t32 = trunc i64 %t15 to i32
  ; r32 := (sext r31 64)
  %t33 = sext i32 %t32 to i64
  ; r33 := (sext r18 64)
  %t34 = sext i32 %t19 to i64
  ; r34 := (bv_mul r32 r33)
  %t35 = mul i64 %t33, %t34
  ; r35 := (trunc r34 32)
  %t36 = trunc i64 %t35 to i32
  ; r36 := (bv_sub r21 r35)
  %t37 = sub i32 %t22, %t36
  ; r37 := (uext r36 64)
  %t38 = zext i32 %t37 to i64
  ; r38 := (bv_add r30 (0xffffffffffffffff : bv 64))
  %t39 = add i64 %t31, 18446744073709551615
  ; r39 := (trunc r38 32)
  %t40 = trunc i64 %t39 to i32
  ; r40 := (uext r39 64)
  %t41 = zext i32 %t40 to i64
  ; r41 := (bv_mul (0x4 : bv 64) r40)
  %t42 = mul i64 4, %t41
  ; r42 := (bv_add r41 (0x18 : bv 64))
  %t43 = add i64 %t42, 24
  ; r43 := (eq r42 r37)
  %t44 = icmp eq i64 %t43, %t38
  ; r44 := (bv_ule r37 r42)
  %t45 = icmp ule i64 %t38, %t43
  ; r45 := (not r43)
  %t46 = icmp eq i1 %t44, 0
  ; r46 := (and r44 r45)
  %t47 = and i1 %t45, %t46
  br i1 %t47, label %block_0_403425, label %block_0_403458
block_0_403458:
  %t48 = phi i64 [ %t31, %block_0_403425 ]
  %t49 = phi i64 [ %t21, %block_0_403425 ]
  %t50 = phi i64 [ %t14, %block_0_403425 ]
  %t51 = phi i64 [ %t15, %block_0_403425 ]
  %t52 = phi i64 [ %t38, %block_0_403425 ]
  %t53 = phi i512 [ %t16, %block_0_403425 ]
  %t54 = phi i64 [ %t17, %block_0_403425 ]
  ; r54 := (read (0x635530 : bv 64) (bv 64))
  %t55 = inttoptr i64 6509872 to i64*
  %t56 = load i64, i64* %t55
  ; r55 := (bv_ult r54 (0x1000000 : bv 64))
  %t57 = icmp ult i64 %t56, 16777216
  ; r56 := (eq r54 (0x1000000 : bv 64))
  %t58 = icmp eq i64 %t56, 16777216
  ; r57 := (or r55 r56)
  %t59 = or i1 %t57, %t58
  ; r58 := (mux r57 r54 (0x1000000 : bv 64))
  %t60 = select i1 %t59, i64 %t56, i64 16777216
  ; r59 := (sext r50 128)
  %t61 = sext i64 %t51 to i128
  ; r60 := (bv_mul (0x1e8 : bv 128) r59)
  %t62 = mul i128 488, %t61
  ; r61 := (trunc r60 64)
  %t63 = trunc i128 %t62 to i64
  ; r62 := (bv_shl r49 (0x4 : bv 64))
  %t64 = shl i64 %t50, 4
  ; r63 := (bv_sub r62 r49)
  %t65 = sub i64 %t64, %t50
  ; r64 := (bv_mul (0x4 : bv 64) r63)
  %t66 = mul i64 4, %t65
  ; r65 := (bv_add r49 r64)
  %t67 = add i64 %t50, %t66
  ; r66 := (bv_add r65 (0x3d000 : bv 64))
  %t68 = add i64 %t67, 249856
  br label %block_0_403491
block_0_403491:
  %t69 = phi i64 [ %t50, %block_0_403458 ], [ %t237, %block_0_403513 ]
  %t70 = phi i64 [ %t48, %block_0_403458 ], [ %t251, %block_0_403513 ]
  %t71 = phi i64 [ %t49, %block_0_403458 ], [ %t249, %block_0_403513 ]
  %t72 = phi i64 [ %t51, %block_0_403458 ], [ %t239, %block_0_403513 ]
  %t73 = phi i64 [ %t52, %block_0_403458 ], [ %t247, %block_0_403513 ]
  %t74 = phi i64 [ %t68, %block_0_403458 ], [ %t240, %block_0_403513 ]
  %t75 = phi i64 [ %t56, %block_0_403458 ], [ %t241, %block_0_403513 ]
  %t76 = phi i64 [ %t60, %block_0_403458 ], [ %t242, %block_0_403513 ]
  %t77 = phi i512 [ %t53, %block_0_403458 ], [ %t243, %block_0_403513 ]
  %t78 = phi i64 [ %t54, %block_0_403458 ], [ %t244, %block_0_403513 ]
  %t79 = phi i64 [ %t63, %block_0_403458 ], [ %t245, %block_0_403513 ]
  ; r78 := (bv_add r67 (0xfe8 : bv 64))
  %t80 = add i64 %t69, 4072
  ; r79 := (bv_add r67 (0x1000 : bv 64))
  %t81 = add i64 %t69, 4096
  ; r80 := (div 64 (0x0 : bv 64) r78 r70)
  %t82 = call { i64, i64 } (i64, i64, i64) asm sideeffect "div $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i64 0, i64 %t80, i64 %t72)
  ; r81 := (tuple_field r80 0)
  %t83 = extractvalue { i64, i64 } %t82, 0
  ; r82 := (trunc r79 32)
  %t84 = trunc i64 %t81 to i32
  ; r83 := (uext r82 64)
  %t85 = zext i32 %t84 to i64
  ; r84 := (bv_add r81 (0x1 : bv 64))
  %t86 = add i64 %t83, 1
  ; r85 := (trunc r84 32)
  %t87 = trunc i64 %t86 to i32
  ; r86 := (uext r85 64)
  %t88 = zext i32 %t87 to i64
  br label %block_0_4034b0
block_0_4034b0:
  %t89 = phi i64 [ %t88, %block_0_403491 ], [ %t106, %block_0_4034b0 ]
  %t90 = phi i64 [ %t69, %block_0_403491 ], [ %t90, %block_0_4034b0 ]
  %t91 = phi i64 [ %t70, %block_0_403491 ], [ %t91, %block_0_4034b0 ]
  %t92 = phi i64 [ %t71, %block_0_403491 ], [ %t92, %block_0_4034b0 ]
  %t93 = phi i64 [ %t81, %block_0_403491 ], [ %t93, %block_0_4034b0 ]
  %t94 = phi i64 [ %t85, %block_0_403491 ], [ %t94, %block_0_4034b0 ]
  %t95 = phi i64 [ %t72, %block_0_403491 ], [ %t95, %block_0_4034b0 ]
  %t96 = phi i64 [ %t73, %block_0_403491 ], [ %t96, %block_0_4034b0 ]
  %t97 = phi i64 [ %t74, %block_0_403491 ], [ %t97, %block_0_4034b0 ]
  %t98 = phi i64 [ %t75, %block_0_403491 ], [ %t98, %block_0_4034b0 ]
  %t99 = phi i64 [ %t76, %block_0_403491 ], [ %t99, %block_0_4034b0 ]
  %t100 = phi i512 [ %t77, %block_0_403491 ], [ %t100, %block_0_4034b0 ]
  %t101 = phi i64 [ %t78, %block_0_403491 ], [ %t101, %block_0_4034b0 ]
  %t102 = phi i64 [ %t79, %block_0_403491 ], [ %t102, %block_0_4034b0 ]
  ; r101 := (trunc r87 32)
  %t103 = trunc i64 %t89 to i32
  ; r102 := (bv_add r101 (0xffffffff : bv 32))
  %t104 = add i32 %t103, 4294967295
  ; r103 := (trunc r102 8)
  %t105 = trunc i32 %t104 to i8
  ; r104 := (uext r102 64)
  %t106 = zext i32 %t104 to i64
  ; r105 := (bv_and r103 (0x1f : bv 8))
  %t107 = and i8 %t105, 31
  ; r106 := (eq r105 (0x0 : bv 8))
  %t108 = icmp eq i8 %t107, 0
  ; r107 := (mux r106 (0x0 : bv 8) (0x1 : bv 8))
  %t109 = select i1 %t108, i8 0, i8 1
  ; r108 := (uext r107 64)
  %t110 = zext i8 %t109 to i64
  ; r109 := (bv_shr r102 (0x5 : bv 32))
  %t111 = lshr i32 %t104, 5
  ; r110 := (uext r109 64)
  %t112 = zext i32 %t111 to i64
  ; r111 := (bv_add r108 r110)
  %t113 = add i64 %t110, %t112
  ; r112 := (trunc r111 32)
  %t114 = trunc i64 %t113 to i32
  ; r113 := (uext r112 64)
  %t115 = zext i32 %t114 to i64
  ; r114 := (trunc r92 32)
  %t116 = trunc i64 %t94 to i32
  ; r115 := (trunc r93 32)
  %t117 = trunc i64 %t95 to i32
  ; r116 := (sext r115 64)
  %t118 = sext i32 %t117 to i64
  ; r117 := (sext r102 64)
  %t119 = sext i32 %t104 to i64
  ; r118 := (bv_mul r116 r117)
  %t120 = mul i64 %t118, %t119
  ; r119 := (trunc r118 32)
  %t121 = trunc i64 %t120 to i32
  ; r120 := (bv_sub r114 r119)
  %t122 = sub i32 %t116, %t121
  ; r121 := (uext r120 64)
  %t123 = zext i32 %t122 to i64
  ; r122 := (bv_add r113 (0xffffffffffffffff : bv 64))
  %t124 = add i64 %t115, 18446744073709551615
  ; r123 := (trunc r122 32)
  %t125 = trunc i64 %t124 to i32
  ; r124 := (uext r123 64)
  %t126 = zext i32 %t125 to i64
  ; r125 := (bv_mul (0x4 : bv 64) r124)
  %t127 = mul i64 4, %t126
  ; r126 := (bv_add r125 (0x18 : bv 64))
  %t128 = add i64 %t127, 24
  ; r127 := (eq r126 r121)
  %t129 = icmp eq i64 %t128, %t123
  ; r128 := (bv_ule r121 r126)
  %t130 = icmp ule i64 %t123, %t128
  ; r129 := (not r127)
  %t131 = icmp eq i1 %t129, 0
  ; r130 := (and r128 r129)
  %t132 = and i1 %t130, %t131
  br i1 %t132, label %block_0_4034b0, label %block_0_4034e2
block_0_4034e2:
  %t133 = phi i64 [ %t106, %block_0_4034b0 ]
  %t134 = phi i64 [ %t123, %block_0_4034b0 ]
  %t135 = phi i64 [ %t90, %block_0_4034b0 ]
  %t136 = phi i64 [ %t91, %block_0_4034b0 ]
  %t137 = phi i64 [ %t92, %block_0_4034b0 ]
  %t138 = phi i64 [ %t93, %block_0_4034b0 ]
  %t139 = phi i64 [ %t128, %block_0_4034b0 ]
  %t140 = phi i64 [ %t115, %block_0_4034b0 ]
  %t141 = phi i64 [ %t95, %block_0_4034b0 ]
  %t142 = phi i64 [ %t96, %block_0_4034b0 ]
  %t143 = phi i64 [ %t97, %block_0_4034b0 ]
  %t144 = phi i64 [ %t98, %block_0_4034b0 ]
  %t145 = phi i64 [ %t99, %block_0_4034b0 ]
  %t146 = phi i512 [ %t100, %block_0_4034b0 ]
  %t147 = phi i64 [ %t101, %block_0_4034b0 ]
  %t148 = phi i64 [ %t102, %block_0_4034b0 ]
  ; r147 := (eq r136 r142)
  %t149 = icmp eq i64 %t138, %t144
  ; r148 := (bv_ule r142 r136)
  %t150 = icmp ule i64 %t144, %t138
  ; r149 := (not r147)
  %t151 = icmp eq i1 %t149, 0
  ; r150 := (and r148 r149)
  %t152 = and i1 %t150, %t151
  br i1 %t152, label %block_0_403523, label %block_0_4034e7
block_0_4034e7:
  %t153 = phi i64 [ %t133, %block_0_4034e2 ]
  %t154 = phi i64 [ %t134, %block_0_4034e2 ]
  %t155 = phi i64 [ %t135, %block_0_4034e2 ]
  %t156 = phi i64 [ %t136, %block_0_4034e2 ]
  %t157 = phi i64 [ %t137, %block_0_4034e2 ]
  %t158 = phi i64 [ %t138, %block_0_4034e2 ]
  %t159 = phi i64 [ %t139, %block_0_4034e2 ]
  %t160 = phi i64 [ %t140, %block_0_4034e2 ]
  %t161 = phi i64 [ %t141, %block_0_4034e2 ]
  %t162 = phi i64 [ %t142, %block_0_4034e2 ]
  %t163 = phi i64 [ %t143, %block_0_4034e2 ]
  %t164 = phi i64 [ %t144, %block_0_4034e2 ]
  %t165 = phi i64 [ %t145, %block_0_4034e2 ]
  %t166 = phi i512 [ %t146, %block_0_4034e2 ]
  %t167 = phi i64 [ %t147, %block_0_4034e2 ]
  %t168 = phi i64 [ %t148, %block_0_4034e2 ]
  ; r167 := (eq r156 r163)
  %t169 = icmp eq i64 %t158, %t165
  ; r168 := (bv_ule r163 r156)
  %t170 = icmp ule i64 %t165, %t158
  ; r169 := (not r167)
  %t171 = icmp eq i1 %t169, 0
  ; r170 := (and r168 r169)
  %t172 = and i1 %t170, %t171
  br i1 %t172, label %block_0_403523, label %block_0_4034ec
block_0_4034ec:
  %t173 = phi i64 [ %t153, %block_0_4034e7 ]
  %t174 = phi i64 [ %t154, %block_0_4034e7 ]
  %t175 = phi i64 [ %t155, %block_0_4034e7 ]
  %t176 = phi i64 [ %t156, %block_0_4034e7 ]
  %t177 = phi i64 [ %t157, %block_0_4034e7 ]
  %t178 = phi i64 [ %t158, %block_0_4034e7 ]
  %t179 = phi i64 [ %t159, %block_0_4034e7 ]
  %t180 = phi i64 [ %t160, %block_0_4034e7 ]
  %t181 = phi i64 [ %t161, %block_0_4034e7 ]
  %t182 = phi i64 [ %t162, %block_0_4034e7 ]
  %t183 = phi i64 [ %t163, %block_0_4034e7 ]
  %t184 = phi i64 [ %t164, %block_0_4034e7 ]
  %t185 = phi i64 [ %t165, %block_0_4034e7 ]
  %t186 = phi i512 [ %t166, %block_0_4034e7 ]
  %t187 = phi i64 [ %t167, %block_0_4034e7 ]
  %t188 = phi i64 [ %t168, %block_0_4034e7 ]
  ; r187 := (bv_ult r186 (0x1800 : bv 64))
  %t189 = icmp ult i64 %t188, 6144
  ; r188 := (eq r186 (0x1800 : bv 64))
  %t190 = icmp eq i64 %t188, 6144
  ; r189 := (or r187 r188)
  %t191 = or i1 %t189, %t190
  br i1 %t191, label %block_0_403523, label %block_0_4034f7
block_0_4034f7:
  %t192 = phi i64 [ %t173, %block_0_4034ec ]
  %t193 = phi i64 [ %t174, %block_0_4034ec ]
  %t194 = phi i64 [ %t175, %block_0_4034ec ]
  %t195 = phi i64 [ %t176, %block_0_4034ec ]
  %t196 = phi i64 [ %t177, %block_0_4034ec ]
  %t197 = phi i64 [ %t178, %block_0_4034ec ]
  %t198 = phi i64 [ %t179, %block_0_4034ec ]
  %t199 = phi i64 [ %t180, %block_0_4034ec ]
  %t200 = phi i64 [ %t181, %block_0_4034ec ]
  %t201 = phi i64 [ %t182, %block_0_4034ec ]
  %t202 = phi i64 [ %t183, %block_0_4034ec ]
  %t203 = phi i64 [ %t184, %block_0_4034ec ]
  %t204 = phi i64 [ %t185, %block_0_4034ec ]
  %t205 = phi i512 [ %t186, %block_0_4034ec ]
  %t206 = phi i64 [ %t187, %block_0_4034ec ]
  %t207 = phi i64 [ %t188, %block_0_4034ec ]
  ; r206 := (trunc r191 32)
  %t208 = trunc i64 %t193 to i32
  ; r207 := (bv_shl r206 (0xc : bv 32))
  %t209 = shl i32 %t208, 12
  ; r208 := (uext r207 64)
  %t210 = zext i32 %t209 to i64
  ; r209 := (bv_ult r208 r200)
  %t211 = icmp ult i64 %t210, %t202
  ; r210 := (eq r208 r200)
  %t212 = icmp eq i64 %t210, %t202
  ; r211 := (or r209 r210)
  %t213 = or i1 %t211, %t212
  br i1 %t213, label %block_0_403523, label %block_0_403503
block_0_403503:
  %t214 = phi i64 [ %t192, %block_0_4034f7 ]
  %t215 = phi i64 [ %t193, %block_0_4034f7 ]
  %t216 = phi i64 [ %t194, %block_0_4034f7 ]
  %t217 = phi i64 [ %t195, %block_0_4034f7 ]
  %t218 = phi i64 [ %t196, %block_0_4034f7 ]
  %t219 = phi i64 [ %t197, %block_0_4034f7 ]
  %t220 = phi i64 [ %t198, %block_0_4034f7 ]
  %t221 = phi i64 [ %t199, %block_0_4034f7 ]
  %t222 = phi i64 [ %t200, %block_0_4034f7 ]
  %t223 = phi i64 [ %t201, %block_0_4034f7 ]
  %t224 = phi i64 [ %t202, %block_0_4034f7 ]
  %t225 = phi i64 [ %t203, %block_0_4034f7 ]
  %t226 = phi i64 [ %t204, %block_0_4034f7 ]
  %t227 = phi i512 [ %t205, %block_0_4034f7 ]
  %t228 = phi i64 [ %t206, %block_0_4034f7 ]
  %t229 = phi i64 [ %t207, %block_0_4034f7 ]
  ; r228 := (bv_add r222 (0x3d000 : bv 64))
  %t230 = add i64 %t224, 249856
  ; r229 := (eq r218 (0xfff : bv 64))
  %t231 = icmp eq i64 %t220, 4095
  ; r230 := (bv_ule (0xfff : bv 64) r218)
  %t232 = icmp ule i64 4095, %t220
  ; r231 := (not r229)
  %t233 = icmp eq i1 %t231, 0
  ; r232 := (and r230 r231)
  %t234 = and i1 %t232, %t233
  br i1 %t234, label %block_0_403523, label %block_0_403513
block_0_403513:
  %t235 = phi i64 [ %t214, %block_0_403503 ]
  %t236 = phi i64 [ %t215, %block_0_403503 ]
  %t237 = phi i64 [ %t219, %block_0_403503 ]
  %t238 = phi i64 [ %t221, %block_0_403503 ]
  %t239 = phi i64 [ %t222, %block_0_403503 ]
  %t240 = phi i64 [ %t230, %block_0_403503 ]
  %t241 = phi i64 [ %t225, %block_0_403503 ]
  %t242 = phi i64 [ %t226, %block_0_403503 ]
  %t243 = phi i512 [ %t227, %block_0_403503 ]
  %t244 = phi i64 [ %t228, %block_0_403503 ]
  %t245 = phi i64 [ %t229, %block_0_403503 ]
  ; r244 := (trunc r234 32)
  %t246 = trunc i64 %t236 to i32
  ; r245 := (uext r244 64)
  %t247 = zext i32 %t246 to i64
  ; r246 := (trunc r233 32)
  %t248 = trunc i64 %t235 to i32
  ; r247 := (uext r246 64)
  %t249 = zext i32 %t248 to i64
  ; r248 := (trunc r236 32)
  %t250 = trunc i64 %t238 to i32
  ; r249 := (uext r248 64)
  %t251 = zext i32 %t250 to i64
  br label %block_0_403491
block_0_403523:
  %t252 = phi i64 [ %t135, %block_0_4034e2 ], [ %t155, %block_0_4034e7 ], [ %t175, %block_0_4034ec ], [ %t194, %block_0_4034f7 ], [ %t216, %block_0_403503 ]
  %t253 = phi i64 [ %t136, %block_0_4034e2 ], [ %t156, %block_0_4034e7 ], [ %t176, %block_0_4034ec ], [ %t195, %block_0_4034f7 ], [ %t217, %block_0_403503 ]
  %t254 = phi i64 [ %t137, %block_0_4034e2 ], [ %t157, %block_0_4034e7 ], [ %t177, %block_0_4034ec ], [ %t196, %block_0_4034f7 ], [ %t218, %block_0_403503 ]
  %t255 = phi i64 [ %t142, %block_0_4034e2 ], [ %t162, %block_0_4034e7 ], [ %t182, %block_0_4034ec ], [ %t201, %block_0_4034f7 ], [ %t223, %block_0_403503 ]
  %t256 = phi i512 [ %t146, %block_0_4034e2 ], [ %t166, %block_0_4034e7 ], [ %t186, %block_0_4034ec ], [ %t205, %block_0_4034f7 ], [ %t227, %block_0_403503 ]
  %t257 = phi i64 [ %t147, %block_0_4034e2 ], [ %t167, %block_0_4034e7 ], [ %t187, %block_0_4034ec ], [ %t206, %block_0_4034f7 ], [ %t228, %block_0_403503 ]
  ; r256 := (bv_add r255 (0x30 : bv 64))
  %t258 = add i64 %t257, 48
  ; write r256 r250
  %t259 = inttoptr i64 %t258 to i64*
  store i64 %t252, i64* %t259
  ; r257 := (trunc r252 32)
  %t260 = trunc i64 %t254 to i32
  ; r258 := (bv_add r255 (0x38 : bv 64))
  %t261 = add i64 %t257, 56
  ; write r258 r257
  %t262 = inttoptr i64 %t261 to i32*
  store i32 %t260, i32* %t262
  ; r259 := (trunc r251 32)
  %t263 = trunc i64 %t253 to i32
  ; r260 := (bv_add r255 (0x3c : bv 64))
  %t264 = add i64 %t257, 60
  ; write r260 r259
  %t265 = inttoptr i64 %t264 to i32*
  store i32 %t263, i32* %t265
  ; r261 := (trunc r253 32)
  %t266 = trunc i64 %t255 to i32
  ; r262 := (bv_add r255 (0x40 : bv 64))
  %t267 = add i64 %t257, 64
  ; write r262 r261
  %t268 = inttoptr i64 %t267 to i32*
  store i32 %t266, i32* %t268
  ; r263 := (bitcast r254 (vec 8 double))
  %t269 = bitcast i512 %t256 to <8 x double>
  ; r264 := (tuple r250 r263)
  %t270 = insertvalue { i64, <8 x double> } undef, i64 %t252, 0
  %t271 = insertvalue { i64, <8 x double> } %t270, <8 x double> %t269, 1
  ret { i64, <8 x double> } %t271
}
define { i64, i64, <8 x double> } @arena_salloc(i64 %arg0, <8 x double> %arg1) {
block_0_403550:
  ; r0 := (read (0x635518 : bv 64) (bv 64))
  %t0 = inttoptr i64 6509848 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (bv_complement r0)
  %t2 = xor i64 %t1, -1
  ; r2 := (bv_and arg0 r1)
  %t3 = and i64 %arg0, %t2
  ; r3 := (bv_sub arg0 r2)
  %t4 = sub i64 %arg0, %t3
  ; r4 := (bv_shr r3 (0xc : bv 64))
  %t5 = lshr i64 %t4, 12
  ; r5 := (bv_mul (0x2 : bv 64) r4)
  %t6 = mul i64 2, %t5
  ; r6 := (bv_add r4 r5)
  %t7 = add i64 %t5, %t6
  ; r7 := (bv_mul (0x8 : bv 64) r6)
  %t8 = mul i64 8, %t7
  ; r8 := (bv_add r2 r7)
  %t9 = add i64 %t3, %t8
  ; r9 := (bv_add r8 (0x38 : bv 64))
  %t10 = add i64 %t9, 56
  ; r10 := (read r9 (bv 64))
  %t11 = inttoptr i64 %t10 to i64*
  %t12 = load i64, i64* %t11
  ; r11 := (trunc r10 8)
  %t13 = trunc i64 %t12 to i8
  ; r12 := (bv_and r11 (0x2 : bv 8))
  %t14 = and i8 %t13, 2
  ; r13 := (eq r12 (0x0 : bv 8))
  %t15 = icmp eq i8 %t14, 0
  ; r14 := (bitcast arg1 (bv 512))
  %t16 = bitcast <8 x double> %arg1 to i512
  ; r15 := (bitcast arg1 (bv 512))
  %t17 = bitcast <8 x double> %arg1 to i512
  br i1 %t15, label %block_0_403577, label %block_0_403590
block_0_403577:
  %t18 = phi i64 [ %t12, %block_0_403550 ]
  %t19 = phi i64 [ %t3, %block_0_403550 ]
  %t20 = phi i64 [ %t5, %block_0_403550 ]
  %t21 = phi i512 [ %t16, %block_0_403550 ]
  ; r20 := (trunc r16 32)
  %t22 = trunc i64 %t18 to i32
  ; r21 := (bv_and r20 (0xfff00000 : bv 32))
  %t23 = and i32 %t22, 4293918720
  ; r22 := (uext r21 64)
  %t24 = zext i32 %t23 to i64
  ; r23 := (bv_shr r22 (0x14 : bv 64))
  %t25 = lshr i64 %t24, 20
  ; r24 := (bv_sub r18 r23)
  %t26 = sub i64 %t20, %t25
  ; r25 := (bv_shl r24 (0xc : bv 64))
  %t27 = shl i64 %t26, 12
  ; r26 := (bv_add r25 r17)
  %t28 = add i64 %t27, %t19
  ; r27 := (read r26 (bv 64))
  %t29 = inttoptr i64 %t28 to i64*
  %t30 = load i64, i64* %t29
  ; r28 := (bv_add r27 (0x28 : bv 64))
  %t31 = add i64 %t30, 40
  ; r29 := (read r28 (bv 64))
  %t32 = inttoptr i64 %t31 to i64*
  %t33 = load i64, i64* %t32
  ; r30 := (bitcast r19 (vec 8 double))
  %t34 = bitcast i512 %t21 to <8 x double>
  ; r31 := (tuple r29 r25 r30)
  %t35 = insertvalue { i64, i64, <8 x double> } undef, i64 %t33, 0
  %t36 = insertvalue { i64, i64, <8 x double> } %t35, i64 %t27, 1
  %t37 = insertvalue { i64, i64, <8 x double> } %t36, <8 x double> %t34, 2
  ret { i64, i64, <8 x double> } %t37
block_0_403590:
  %t38 = phi i64 [ %t12, %block_0_403550 ]
  %t39 = phi i64 [ %t5, %block_0_403550 ]
  %t40 = phi i512 [ %t17, %block_0_403550 ]
  ; r35 := (bv_and r32 (0xfffffffffffff000 : bv 64))
  %t41 = and i64 %t38, 18446744073709547520
  ; r36 := (bitcast r34 (vec 8 double))
  %t42 = bitcast i512 %t40 to <8 x double>
  ; r37 := (tuple r35 r33 r36)
  %t43 = insertvalue { i64, i64, <8 x double> } undef, i64 %t41, 0
  %t44 = insertvalue { i64, i64, <8 x double> } %t43, i64 %t39, 1
  %t45 = insertvalue { i64, i64, <8 x double> } %t44, <8 x double> %t42, 2
  ret { i64, i64, <8 x double> } %t45
}
define void @_malloc_thread_cleanup() {
block_0_403b40:
  ret void
}
define void @wrtmessage(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_403b50:
  ; r0 := (bitcast arg4 (bv 512))
  %t0 = bitcast <8 x double> %arg4 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call strlen(arg0, r1)
  %t2 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %arg0, <8 x double> %t1)
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, i64, <8 x double> } %t2, 1
  ; r5 := (tuple_field r2 2)
  %t5 = extractvalue { i64, i64, <8 x double> } %t2, 2
  ; r6 := (bitcast r5 (bv 512))
  %t6 = bitcast <8 x double> %t5 to i512
  br label %block_0_403b79
block_0_403b79:
  %t7 = phi i64 [ %t3, %block_0_403b50 ]
  %t8 = phi i64 [ %arg0, %block_0_403b50 ]
  %t9 = phi i64 [ %arg1, %block_0_403b50 ]
  %t10 = phi i64 [ %arg2, %block_0_403b50 ]
  %t11 = phi i64 [ %arg3, %block_0_403b50 ]
  ; r12 := call __sys_write((0x2 : bv 64), r8, r7)
  %t12 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 %t8, i64 %t7)
  ; r13 := (tuple_field r12 0)
  %t13 = extractvalue { i64, i64, <8 x double> } %t12, 0
  ; r14 := (tuple_field r12 1)
  %t14 = extractvalue { i64, i64, <8 x double> } %t12, 1
  ; r15 := (tuple_field r12 2)
  %t15 = extractvalue { i64, i64, <8 x double> } %t12, 2
  ; r16 := (bitcast r15 (bv 512))
  %t16 = bitcast <8 x double> %t15 to i512
  br label %block_0_403b89
block_0_403b89:
  %t17 = phi i64 [ %t13, %block_0_403b79 ]
  %t18 = phi i64 [ %t9, %block_0_403b79 ]
  %t19 = phi i64 [ %t10, %block_0_403b79 ]
  %t20 = phi i64 [ %t11, %block_0_403b79 ]
  %t21 = phi i512 [ %t16, %block_0_403b79 ]
  ; r22 := (bv_slt r17 (0x0 : bv 64))
  %t22 = icmp slt i64 %t17, 0
  br i1 %t22, label %block_0_403bf8, label %block_0_403b8e
block_0_403b8e:
  %t23 = phi i64 [ %t18, %block_0_403b89 ]
  %t24 = phi i64 [ %t19, %block_0_403b89 ]
  %t25 = phi i64 [ %t20, %block_0_403b89 ]
  %t26 = phi i512 [ %t21, %block_0_403b89 ]
  ; r27 := (bitcast r26 (vec 8 double))
  %t27 = bitcast i512 %t26 to <8 x double>
  ; r28 := call strlen(r23, r27)
  %t28 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t23, <8 x double> %t27)
  ; r29 := (tuple_field r28 0)
  %t29 = extractvalue { i64, i64, <8 x double> } %t28, 0
  ; r30 := (tuple_field r28 1)
  %t30 = extractvalue { i64, i64, <8 x double> } %t28, 1
  ; r31 := (tuple_field r28 2)
  %t31 = extractvalue { i64, i64, <8 x double> } %t28, 2
  ; r32 := (bitcast r31 (bv 512))
  %t32 = bitcast <8 x double> %t31 to i512
  br label %block_0_403b96
block_0_403b96:
  %t33 = phi i64 [ %t29, %block_0_403b8e ]
  %t34 = phi i64 [ %t23, %block_0_403b8e ]
  %t35 = phi i64 [ %t24, %block_0_403b8e ]
  %t36 = phi i64 [ %t25, %block_0_403b8e ]
  ; r37 := call __sys_write((0x2 : bv 64), r34, r33)
  %t37 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 %t34, i64 %t33)
  ; r38 := (tuple_field r37 0)
  %t38 = extractvalue { i64, i64, <8 x double> } %t37, 0
  ; r39 := (tuple_field r37 1)
  %t39 = extractvalue { i64, i64, <8 x double> } %t37, 1
  ; r40 := (tuple_field r37 2)
  %t40 = extractvalue { i64, i64, <8 x double> } %t37, 2
  ; r41 := (bitcast r40 (bv 512))
  %t41 = bitcast <8 x double> %t40 to i512
  br label %block_0_403ba6
block_0_403ba6:
  %t42 = phi i64 [ %t38, %block_0_403b96 ]
  %t43 = phi i64 [ %t35, %block_0_403b96 ]
  %t44 = phi i64 [ %t36, %block_0_403b96 ]
  %t45 = phi i512 [ %t41, %block_0_403b96 ]
  ; r46 := (bv_slt r42 (0x0 : bv 64))
  %t46 = icmp slt i64 %t42, 0
  br i1 %t46, label %block_0_403bf8, label %block_0_403bab
block_0_403bab:
  %t47 = phi i64 [ %t43, %block_0_403ba6 ]
  %t48 = phi i64 [ %t44, %block_0_403ba6 ]
  %t49 = phi i512 [ %t45, %block_0_403ba6 ]
  ; r50 := (bitcast r49 (vec 8 double))
  %t50 = bitcast i512 %t49 to <8 x double>
  ; r51 := call strlen(r47, r50)
  %t51 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t47, <8 x double> %t50)
  ; r52 := (tuple_field r51 0)
  %t52 = extractvalue { i64, i64, <8 x double> } %t51, 0
  ; r53 := (tuple_field r51 1)
  %t53 = extractvalue { i64, i64, <8 x double> } %t51, 1
  ; r54 := (tuple_field r51 2)
  %t54 = extractvalue { i64, i64, <8 x double> } %t51, 2
  ; r55 := (bitcast r54 (bv 512))
  %t55 = bitcast <8 x double> %t54 to i512
  br label %block_0_403bb3
block_0_403bb3:
  %t56 = phi i64 [ %t52, %block_0_403bab ]
  %t57 = phi i64 [ %t47, %block_0_403bab ]
  %t58 = phi i64 [ %t48, %block_0_403bab ]
  ; r59 := call __sys_write((0x2 : bv 64), r57, r56)
  %t59 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 %t57, i64 %t56)
  ; r60 := (tuple_field r59 0)
  %t60 = extractvalue { i64, i64, <8 x double> } %t59, 0
  ; r61 := (tuple_field r59 1)
  %t61 = extractvalue { i64, i64, <8 x double> } %t59, 1
  ; r62 := (tuple_field r59 2)
  %t62 = extractvalue { i64, i64, <8 x double> } %t59, 2
  ; r63 := (bitcast r62 (bv 512))
  %t63 = bitcast <8 x double> %t62 to i512
  br label %block_0_403bc3
block_0_403bc3:
  %t64 = phi i64 [ %t60, %block_0_403bb3 ]
  %t65 = phi i64 [ %t58, %block_0_403bb3 ]
  %t66 = phi i512 [ %t63, %block_0_403bb3 ]
  ; r67 := (bv_slt r64 (0x0 : bv 64))
  %t67 = icmp slt i64 %t64, 0
  br i1 %t67, label %block_0_403bf8, label %block_0_403bc8
block_0_403bc8:
  %t68 = phi i64 [ %t65, %block_0_403bc3 ]
  %t69 = phi i512 [ %t66, %block_0_403bc3 ]
  ; r70 := (bitcast r69 (vec 8 double))
  %t70 = bitcast i512 %t69 to <8 x double>
  ; r71 := call strlen(r68, r70)
  %t71 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t68, <8 x double> %t70)
  ; r72 := (tuple_field r71 0)
  %t72 = extractvalue { i64, i64, <8 x double> } %t71, 0
  ; r73 := (tuple_field r71 1)
  %t73 = extractvalue { i64, i64, <8 x double> } %t71, 1
  ; r74 := (tuple_field r71 2)
  %t74 = extractvalue { i64, i64, <8 x double> } %t71, 2
  ; r75 := (bitcast r74 (bv 512))
  %t75 = bitcast <8 x double> %t74 to i512
  br label %block_0_403bd0
block_0_403bd0:
  %t76 = phi i64 [ %t72, %block_0_403bc8 ]
  %t77 = phi i64 [ %t68, %block_0_403bc8 ]
  ; r78 := call __sys_write((0x2 : bv 64), r77, r76)
  %t78 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 %t77, i64 %t76)
  ret void
block_0_403bf8:
  ret void
}
define { i64, i64, <8 x double> } @arena_run_split(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, <8 x double> %arg5) {
block_0_403c20:
  ; r0 := (bv_shr arg2 (0xc : bv 64))
  %t0 = lshr i64 %arg2, 12
  ; r1 := (read (0x635518 : bv 64) (bv 64))
  %t1 = inttoptr i64 6509848 to i64*
  %t2 = load i64, i64* %t1
  ; r2 := (bv_add arg0 (0x68 : bv 64))
  %t3 = add i64 %arg0, 104
  ; r3 := (trunc arg3 8)
  %t4 = trunc i64 %arg3 to i8
  ; r4 := (trunc arg4 8)
  %t5 = trunc i64 %arg4 to i8
  ; r5 := (bv_complement r1)
  %t6 = xor i64 %t2, -1
  ; r6 := (bv_and arg1 r5)
  %t7 = and i64 %arg1, %t6
  ; r7 := (bv_sub arg1 r6)
  %t8 = sub i64 %arg1, %t7
  ; r8 := (bv_shr r7 (0xc : bv 64))
  %t9 = lshr i64 %t8, 12
  ; r9 := (trunc r8 32)
  %t10 = trunc i64 %t9 to i32
  ; r10 := (uext r9 64)
  %t11 = zext i32 %t10 to i64
  ; r11 := (bv_mul (0x2 : bv 64) r10)
  %t12 = mul i64 2, %t11
  ; r12 := (bv_add r10 r11)
  %t13 = add i64 %t11, %t12
  ; r13 := (bv_shl r12 (0x3 : bv 64))
  %t14 = shl i64 %t13, 3
  ; r14 := (bv_add r6 r13)
  %t15 = add i64 %t7, %t14
  ; r15 := (bv_add r14 (0x38 : bv 64))
  %t16 = add i64 %t15, 56
  ; r16 := (read r15 (bv 64))
  %t17 = inttoptr i64 %t16 to i64*
  %t18 = load i64, i64* %t17
  ; r17 := (bv_add r14 (0x28 : bv 64))
  %t19 = add i64 %t15, 40
  ; r18 := (bv_and r16 (0xfffffffffffff000 : bv 64))
  %t20 = and i64 %t18, 18446744073709547520
  ; r19 := (bv_shr r18 (0xc : bv 64))
  %t21 = lshr i64 %t20, 12
  ; r20 := (bv_sub r19 r0)
  %t22 = sub i64 %t21, %t0
  ; r21 := (bitcast arg5 (bv 512))
  %t23 = bitcast <8 x double> %arg5 to i512
  ; r22 := (bitcast r21 (vec 8 double))
  %t24 = bitcast i512 %t23 to <8 x double>
  ; r23 := call arena_avail_tree_remove(r2, r17, r2, r22)
  %t25 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @arena_avail_tree_remove(i64 %t3, i64 %t19, i64 %t3, <8 x double> %t24)
  ; r24 := (tuple_field r23 0)
  %t26 = extractvalue { i64, i64, <8 x double> } %t25, 0
  ; r25 := (tuple_field r23 1)
  %t27 = extractvalue { i64, i64, <8 x double> } %t25, 1
  ; r26 := (tuple_field r23 2)
  %t28 = extractvalue { i64, i64, <8 x double> } %t25, 2
  ; r27 := (bitcast r26 (bv 512))
  %t29 = bitcast <8 x double> %t28 to i512
  br label %block_0_403c9b
block_0_403c9b:
  %t30 = phi i64 [ %t21, %block_0_403c20 ]
  %t31 = phi i64 [ %t22, %block_0_403c20 ]
  %t32 = phi i64 [ %t7, %block_0_403c20 ]
  %t33 = phi i64 [ %t19, %block_0_403c20 ]
  %t34 = phi i64 [ %t0, %block_0_403c20 ]
  %t35 = phi i64 [ %arg0, %block_0_403c20 ]
  %t36 = phi i512 [ %t29, %block_0_403c20 ]
  %t37 = phi i8 [ %t5, %block_0_403c20 ]
  %t38 = phi i8 [ %t4, %block_0_403c20 ]
  %t39 = phi i64 [ %arg2, %block_0_403c20 ]
  %t40 = phi i64 [ %t3, %block_0_403c20 ]
  %t41 = phi i64 [ %t11, %block_0_403c20 ]
  ; r40 := (bv_add r33 (0x58 : bv 64))
  %t42 = add i64 %t35, 88
  ; r41 := (read r40 (bv 64))
  %t43 = inttoptr i64 %t42 to i64*
  %t44 = load i64, i64* %t43
  ; r42 := (bv_add r41 r32)
  %t45 = add i64 %t44, %t34
  ; write r40 r42
  %t46 = inttoptr i64 %t42 to i64*
  store i64 %t45, i64* %t46
  ; r43 := (eq r29 (0x0 : bv 64))
  %t47 = icmp eq i64 %t31, 0
  br i1 %t47, label %block_0_403ca8, label %block_0_403d89
block_0_403ca8:
  %t48 = phi i64 [ %t32, %block_0_403c9b ], [ %t333, %block_0_403de1 ]
  %t49 = phi i64 [ %t33, %block_0_403c9b ], [ %t334, %block_0_403de1 ]
  %t50 = phi i64 [ %t34, %block_0_403c9b ], [ %t335, %block_0_403de1 ]
  %t51 = phi i64 [ %t35, %block_0_403c9b ], [ %t336, %block_0_403de1 ]
  %t52 = phi i512 [ %t36, %block_0_403c9b ], [ %t337, %block_0_403de1 ]
  %t53 = phi i8 [ %t37, %block_0_403c9b ], [ %t338, %block_0_403de1 ]
  %t54 = phi i8 [ %t38, %block_0_403c9b ], [ %t339, %block_0_403de1 ]
  %t55 = phi i64 [ %t39, %block_0_403c9b ], [ %t340, %block_0_403de1 ]
  %t56 = phi i64 [ %t41, %block_0_403c9b ], [ %t341, %block_0_403de1 ]
  ; r53 := (eq r46 (0x0 : bv 64))
  %t57 = icmp eq i64 %t50, 0
  br i1 %t57, label %block_0_403d42, label %block_0_403cb1
block_0_403cb1:
  %t58 = phi i64 [ %t48, %block_0_403ca8 ]
  %t59 = phi i64 [ %t49, %block_0_403ca8 ]
  %t60 = phi i64 [ %t50, %block_0_403ca8 ]
  %t61 = phi i64 [ %t51, %block_0_403ca8 ]
  %t62 = phi i512 [ %t52, %block_0_403ca8 ]
  %t63 = phi i8 [ %t53, %block_0_403ca8 ]
  %t64 = phi i8 [ %t54, %block_0_403ca8 ]
  %t65 = phi i64 [ %t55, %block_0_403ca8 ]
  %t66 = phi i64 [ %t56, %block_0_403ca8 ]
  br label %block_0_403cfc
block_0_403cc0:
  %t67 = phi i64 [ %t168, %block_0_403cfc ]
  %t68 = phi i64 [ %t169, %block_0_403cfc ]
  %t69 = phi i64 [ %t170, %block_0_403cfc ]
  %t70 = phi i64 [ %t171, %block_0_403cfc ]
  %t71 = phi i64 [ %t172, %block_0_403cfc ]
  %t72 = phi i64 [ %t173, %block_0_403cfc ]
  %t73 = phi i512 [ %t174, %block_0_403cfc ]
  %t74 = phi i8 [ %t175, %block_0_403cfc ]
  %t75 = phi i8 [ %t176, %block_0_403cfc ]
  %t76 = phi i64 [ %t177, %block_0_403cfc ]
  %t77 = phi i64 [ %t178, %block_0_403cfc ]
  ; r74 := (bv_add r64 (0x10 : bv 64))
  %t78 = add i64 %t68, 16
  ; r75 := (read r74 (bv 64))
  %t79 = inttoptr i64 %t78 to i64*
  %t80 = load i64, i64* %t79
  ; r76 := (trunc r75 8)
  %t81 = trunc i64 %t80 to i8
  ; r77 := (bv_and r76 (0x4 : bv 8))
  %t82 = and i8 %t81, 4
  ; r78 := (eq r77 (0x0 : bv 8))
  %t83 = icmp eq i8 %t82, 0
  br i1 %t83, label %block_0_403d26, label %block_0_403cc8
block_0_403cc8:
  %t84 = phi i64 [ %t80, %block_0_403cc0 ], [ %t193, %block_0_403d03 ], [ %t245, %block_0_403d3c ]
  %t85 = phi i64 [ %t67, %block_0_403cc0 ], [ %t180, %block_0_403d03 ], [ %t232, %block_0_403d3c ]
  %t86 = phi i64 [ %t68, %block_0_403cc0 ], [ %t181, %block_0_403d03 ], [ %t233, %block_0_403d3c ]
  %t87 = phi i64 [ %t69, %block_0_403cc0 ], [ %t182, %block_0_403d03 ], [ %t234, %block_0_403d3c ]
  %t88 = phi i64 [ %t70, %block_0_403cc0 ], [ %t183, %block_0_403d03 ], [ %t235, %block_0_403d3c ]
  %t89 = phi i64 [ %t71, %block_0_403cc0 ], [ %t184, %block_0_403d03 ], [ %t236, %block_0_403d3c ]
  %t90 = phi i64 [ %t72, %block_0_403cc0 ], [ %t185, %block_0_403d03 ], [ %t237, %block_0_403d3c ]
  %t91 = phi i512 [ %t73, %block_0_403cc0 ], [ %t186, %block_0_403d03 ], [ %t238, %block_0_403d3c ]
  %t92 = phi i8 [ %t74, %block_0_403cc0 ], [ %t187, %block_0_403d03 ], [ %t239, %block_0_403d3c ]
  %t93 = phi i8 [ %t75, %block_0_403cc0 ], [ %t188, %block_0_403d03 ], [ %t240, %block_0_403d3c ]
  %t94 = phi i64 [ %t76, %block_0_403cc0 ], [ %t189, %block_0_403d03 ], [ %t241, %block_0_403d3c ]
  %t95 = phi i64 [ %t77, %block_0_403cc0 ], [ %t190, %block_0_403d03 ], [ %t242, %block_0_403d3c ]
  ; r91 := (trunc r79 8)
  %t96 = trunc i64 %t84 to i8
  ; r92 := (bv_and r91 (0x8 : bv 8))
  %t97 = and i8 %t96, 8
  ; r93 := (eq r92 (0x0 : bv 8))
  %t98 = icmp eq i8 %t97, 0
  br i1 %t98, label %block_0_403cd7, label %block_0_403ccc
block_0_403ccc:
  %t99 = phi i64 [ %t85, %block_0_403cc8 ]
  %t100 = phi i64 [ %t86, %block_0_403cc8 ]
  %t101 = phi i64 [ %t87, %block_0_403cc8 ]
  %t102 = phi i64 [ %t88, %block_0_403cc8 ]
  %t103 = phi i64 [ %t89, %block_0_403cc8 ]
  %t104 = phi i64 [ %t90, %block_0_403cc8 ]
  %t105 = phi i512 [ %t91, %block_0_403cc8 ]
  %t106 = phi i8 [ %t92, %block_0_403cc8 ]
  %t107 = phi i8 [ %t93, %block_0_403cc8 ]
  %t108 = phi i64 [ %t94, %block_0_403cc8 ]
  %t109 = phi i64 [ %t95, %block_0_403cc8 ]
  ; r105 := (bv_add r96 (0x20 : bv 64))
  %t110 = add i64 %t101, 32
  ; r106 := (read r105 (bv 64))
  %t111 = inttoptr i64 %t110 to i64*
  %t112 = load i64, i64* %t111
  ; r107 := (read r105 (bv 64))
  %t113 = inttoptr i64 %t110 to i64*
  %t114 = load i64, i64* %t113
  ; r108 := (bv_add r106 (0xffffffffffffffff : bv 64))
  %t115 = add i64 %t112, 18446744073709551615
  ; write r105 r108
  %t116 = inttoptr i64 %t110 to i64*
  store i64 %t115, i64* %t116
  ; r109 := (bv_add r99 (0x60 : bv 64))
  %t117 = add i64 %t104, 96
  ; r110 := (read r109 (bv 64))
  %t118 = inttoptr i64 %t117 to i64*
  %t119 = load i64, i64* %t118
  ; r111 := (read r109 (bv 64))
  %t120 = inttoptr i64 %t117 to i64*
  %t121 = load i64, i64* %t120
  ; r112 := (bv_add r110 (0xffffffffffffffff : bv 64))
  %t122 = add i64 %t119, 18446744073709551615
  ; write r109 r112
  %t123 = inttoptr i64 %t117 to i64*
  store i64 %t122, i64* %t123
  br label %block_0_403cd7
block_0_403cd7:
  %t124 = phi i64 [ %t85, %block_0_403cc8 ], [ %t99, %block_0_403ccc ]
  %t125 = phi i64 [ %t86, %block_0_403cc8 ], [ %t100, %block_0_403ccc ]
  %t126 = phi i64 [ %t87, %block_0_403cc8 ], [ %t101, %block_0_403ccc ]
  %t127 = phi i64 [ %t88, %block_0_403cc8 ], [ %t102, %block_0_403ccc ]
  %t128 = phi i64 [ %t89, %block_0_403cc8 ], [ %t103, %block_0_403ccc ]
  %t129 = phi i64 [ %t90, %block_0_403cc8 ], [ %t104, %block_0_403ccc ]
  %t130 = phi i512 [ %t91, %block_0_403cc8 ], [ %t105, %block_0_403ccc ]
  %t131 = phi i8 [ %t92, %block_0_403cc8 ], [ %t106, %block_0_403ccc ]
  %t132 = phi i8 [ %t93, %block_0_403cc8 ], [ %t107, %block_0_403ccc ]
  %t133 = phi i64 [ %t94, %block_0_403cc8 ], [ %t108, %block_0_403ccc ]
  %t134 = phi i64 [ %t95, %block_0_403cc8 ], [ %t109, %block_0_403ccc ]
  ; r124 := (eq r121 (0x0 : bv 8))
  %t135 = icmp eq i8 %t132, 0
  br i1 %t135, label %block_0_403d10, label %block_0_403cde
block_0_403cde:
  %t136 = phi i64 [ %t124, %block_0_403cd7 ]
  %t137 = phi i64 [ %t125, %block_0_403cd7 ]
  %t138 = phi i64 [ %t126, %block_0_403cd7 ]
  %t139 = phi i64 [ %t127, %block_0_403cd7 ]
  %t140 = phi i64 [ %t128, %block_0_403cd7 ]
  %t141 = phi i64 [ %t129, %block_0_403cd7 ]
  %t142 = phi i512 [ %t130, %block_0_403cd7 ]
  %t143 = phi i8 [ %t131, %block_0_403cd7 ]
  %t144 = phi i8 [ %t132, %block_0_403cd7 ]
  %t145 = phi i64 [ %t133, %block_0_403cd7 ]
  %t146 = phi i64 [ %t134, %block_0_403cd7 ]
  ; r136 := (bv_mul (0x2 : bv 64) r125)
  %t147 = mul i64 2, %t136
  ; r137 := (bv_add r125 r136)
  %t148 = add i64 %t136, %t147
  ; r138 := (bv_mul (0x8 : bv 64) r137)
  %t149 = mul i64 8, %t148
  ; r139 := (bv_add r127 r138)
  %t150 = add i64 %t138, %t149
  ; r140 := (bv_add r139 (0x38 : bv 64))
  %t151 = add i64 %t150, 56
  ; write r140 (0x3 : bv 64)
  %t152 = inttoptr i64 %t151 to i64*
  store i64 3, i64* %t152
  br label %block_0_403ceb
block_0_403ceb:
  %t153 = phi i64 [ %t136, %block_0_403cde ], [ %t194, %block_0_403d10 ]
  %t154 = phi i64 [ %t137, %block_0_403cde ], [ %t195, %block_0_403d10 ]
  %t155 = phi i64 [ %t138, %block_0_403cde ], [ %t196, %block_0_403d10 ]
  %t156 = phi i64 [ %t139, %block_0_403cde ], [ %t197, %block_0_403d10 ]
  %t157 = phi i64 [ %t140, %block_0_403cde ], [ %t198, %block_0_403d10 ]
  %t158 = phi i64 [ %t141, %block_0_403cde ], [ %t199, %block_0_403d10 ]
  %t159 = phi i512 [ %t142, %block_0_403cde ], [ %t200, %block_0_403d10 ]
  %t160 = phi i8 [ %t143, %block_0_403cde ], [ %t201, %block_0_403d10 ]
  %t161 = phi i8 [ %t144, %block_0_403cde ], [ %t202, %block_0_403d10 ]
  %t162 = phi i64 [ %t145, %block_0_403cde ], [ %t203, %block_0_403d10 ]
  %t163 = phi i64 [ %t146, %block_0_403cde ], [ %t204, %block_0_403d10 ]
  ; r152 := (bv_add r144 (0x1 : bv 64))
  %t164 = add i64 %t156, 1
  ; r153 := (bv_add r141 (0x1 : bv 64))
  %t165 = add i64 %t153, 1
  ; r154 := (bv_add r142 (0x18 : bv 64))
  %t166 = add i64 %t154, 24
  ; r155 := (eq r152 r145)
  %t167 = icmp eq i64 %t164, %t157
  br i1 %t167, label %block_0_403d42, label %block_0_403cfc
block_0_403cfc:
  %t168 = phi i64 [ %t66, %block_0_403cb1 ], [ %t165, %block_0_403ceb ]
  %t169 = phi i64 [ %t59, %block_0_403cb1 ], [ %t166, %block_0_403ceb ]
  %t170 = phi i64 [ %t58, %block_0_403cb1 ], [ %t155, %block_0_403ceb ]
  %t171 = phi i64 [ 0, %block_0_403cb1 ], [ %t164, %block_0_403ceb ]
  %t172 = phi i64 [ %t60, %block_0_403cb1 ], [ %t157, %block_0_403ceb ]
  %t173 = phi i64 [ %t61, %block_0_403cb1 ], [ %t158, %block_0_403ceb ]
  %t174 = phi i512 [ %t62, %block_0_403cb1 ], [ %t159, %block_0_403ceb ]
  %t175 = phi i8 [ %t63, %block_0_403cb1 ], [ %t160, %block_0_403ceb ]
  %t176 = phi i8 [ %t64, %block_0_403cb1 ], [ %t161, %block_0_403ceb ]
  %t177 = phi i64 [ %t65, %block_0_403cb1 ], [ %t162, %block_0_403ceb ]
  %t178 = phi i64 [ %t66, %block_0_403cb1 ], [ %t163, %block_0_403ceb ]
  ; r167 := (eq r163 (0x0 : bv 8))
  %t179 = icmp eq i8 %t175, 0
  br i1 %t179, label %block_0_403d03, label %block_0_403cc0
block_0_403d03:
  %t180 = phi i64 [ %t168, %block_0_403cfc ]
  %t181 = phi i64 [ %t169, %block_0_403cfc ]
  %t182 = phi i64 [ %t170, %block_0_403cfc ]
  %t183 = phi i64 [ %t171, %block_0_403cfc ]
  %t184 = phi i64 [ %t172, %block_0_403cfc ]
  %t185 = phi i64 [ %t173, %block_0_403cfc ]
  %t186 = phi i512 [ %t174, %block_0_403cfc ]
  %t187 = phi i8 [ %t175, %block_0_403cfc ]
  %t188 = phi i8 [ %t176, %block_0_403cfc ]
  %t189 = phi i64 [ %t177, %block_0_403cfc ]
  %t190 = phi i64 [ %t178, %block_0_403cfc ]
  ; r179 := (bv_add r169 (0x10 : bv 64))
  %t191 = add i64 %t181, 16
  ; r180 := (read r179 (bv 64))
  %t192 = inttoptr i64 %t191 to i64*
  %t193 = load i64, i64* %t192
  br label %block_0_403cc8
block_0_403d10:
  %t194 = phi i64 [ %t124, %block_0_403cd7 ]
  %t195 = phi i64 [ %t125, %block_0_403cd7 ]
  %t196 = phi i64 [ %t126, %block_0_403cd7 ]
  %t197 = phi i64 [ %t127, %block_0_403cd7 ]
  %t198 = phi i64 [ %t128, %block_0_403cd7 ]
  %t199 = phi i64 [ %t129, %block_0_403cd7 ]
  %t200 = phi i512 [ %t130, %block_0_403cd7 ]
  %t201 = phi i8 [ %t131, %block_0_403cd7 ]
  %t202 = phi i8 [ %t132, %block_0_403cd7 ]
  %t203 = phi i64 [ %t133, %block_0_403cd7 ]
  %t204 = phi i64 [ %t134, %block_0_403cd7 ]
  ; r192 := (bv_mul (0x2 : bv 64) r181)
  %t205 = mul i64 2, %t194
  ; r193 := (bv_add r181 r192)
  %t206 = add i64 %t194, %t205
  ; r194 := (bv_shl r184 (0x14 : bv 64))
  %t207 = shl i64 %t197, 20
  ; r195 := (bv_or r194 (0x1 : bv 64))
  %t208 = or i64 %t207, 1
  ; r196 := (bv_mul (0x8 : bv 64) r193)
  %t209 = mul i64 8, %t206
  ; r197 := (bv_add r183 r196)
  %t210 = add i64 %t196, %t209
  ; r198 := (bv_add r197 (0x38 : bv 64))
  %t211 = add i64 %t210, 56
  ; write r198 r195
  %t212 = inttoptr i64 %t211 to i64*
  store i64 %t208, i64* %t212
  br label %block_0_403ceb
block_0_403d26:
  %t213 = phi i64 [ %t67, %block_0_403cc0 ]
  %t214 = phi i64 [ %t68, %block_0_403cc0 ]
  %t215 = phi i64 [ %t69, %block_0_403cc0 ]
  %t216 = phi i64 [ %t70, %block_0_403cc0 ]
  %t217 = phi i64 [ %t71, %block_0_403cc0 ]
  %t218 = phi i64 [ %t72, %block_0_403cc0 ]
  %t219 = phi i512 [ %t73, %block_0_403cc0 ]
  %t220 = phi i8 [ %t74, %block_0_403cc0 ]
  %t221 = phi i8 [ %t75, %block_0_403cc0 ]
  %t222 = phi i64 [ %t76, %block_0_403cc0 ]
  %t223 = phi i64 [ %t77, %block_0_403cc0 ]
  ; r210 := (bv_shl r199 (0xc : bv 64))
  %t224 = shl i64 %t213, 12
  ; r211 := (bv_add r210 r201)
  %t225 = add i64 %t224, %t215
  ; r212 := (bitcast r205 (vec 8 double))
  %t226 = bitcast i512 %t219 to <8 x double>
  ; r213 := call memset(r211, (0x0 : bv 64), (0x1000 : bv 64), r212)
  %t227 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t225, i64 0, i64 4096, <8 x double> %t226)
  ; r214 := (tuple_field r213 0)
  %t228 = extractvalue { i64, i64, <8 x double> } %t227, 0
  ; r215 := (tuple_field r213 1)
  %t229 = extractvalue { i64, i64, <8 x double> } %t227, 1
  ; r216 := (tuple_field r213 2)
  %t230 = extractvalue { i64, i64, <8 x double> } %t227, 2
  ; r217 := (bitcast r216 (bv 512))
  %t231 = bitcast <8 x double> %t230 to i512
  br label %block_0_403d3c
block_0_403d3c:
  %t232 = phi i64 [ %t213, %block_0_403d26 ]
  %t233 = phi i64 [ %t214, %block_0_403d26 ]
  %t234 = phi i64 [ %t215, %block_0_403d26 ]
  %t235 = phi i64 [ %t216, %block_0_403d26 ]
  %t236 = phi i64 [ %t217, %block_0_403d26 ]
  %t237 = phi i64 [ %t218, %block_0_403d26 ]
  %t238 = phi i512 [ %t231, %block_0_403d26 ]
  %t239 = phi i8 [ %t220, %block_0_403d26 ]
  %t240 = phi i8 [ %t221, %block_0_403d26 ]
  %t241 = phi i64 [ %t222, %block_0_403d26 ]
  %t242 = phi i64 [ %t223, %block_0_403d26 ]
  ; r229 := (bv_add r219 (0x10 : bv 64))
  %t243 = add i64 %t233, 16
  ; r230 := (read r229 (bv 64))
  %t244 = inttoptr i64 %t243 to i64*
  %t245 = load i64, i64* %t244
  br label %block_0_403cc8
block_0_403d42:
  %t246 = phi i64 [ %t48, %block_0_403ca8 ], [ %t155, %block_0_403ceb ]
  %t247 = phi i512 [ %t52, %block_0_403ca8 ], [ %t159, %block_0_403ceb ]
  %t248 = phi i8 [ %t54, %block_0_403ca8 ], [ %t161, %block_0_403ceb ]
  %t249 = phi i64 [ %t55, %block_0_403ca8 ], [ %t162, %block_0_403ceb ]
  %t250 = phi i64 [ %t56, %block_0_403ca8 ], [ %t163, %block_0_403ceb ]
  ; r236 := (eq r233 (0x0 : bv 8))
  %t251 = icmp eq i8 %t248, 0
  br i1 %t251, label %block_0_403d6b, label %block_0_403d49
block_0_403d49:
  %t252 = phi i64 [ %t246, %block_0_403d42 ]
  %t253 = phi i512 [ %t247, %block_0_403d42 ]
  %t254 = phi i64 [ %t249, %block_0_403d42 ]
  %t255 = phi i64 [ %t250, %block_0_403d42 ]
  ; r241 := (bv_mul (0x2 : bv 64) r240)
  %t256 = mul i64 2, %t255
  ; r242 := (bv_add r240 r241)
  %t257 = add i64 %t255, %t256
  ; r243 := (bv_mul (0x8 : bv 64) r242)
  %t258 = mul i64 8, %t257
  ; r244 := (bv_add r237 r243)
  %t259 = add i64 %t252, %t258
  ; r245 := (bv_add r244 (0x38 : bv 64))
  %t260 = add i64 %t259, 56
  ; r246 := (read r245 (bv 64))
  %t261 = inttoptr i64 %t260 to i64*
  %t262 = load i64, i64* %t261
  ; r247 := (bv_or r246 r239)
  %t263 = or i64 %t262, %t254
  ; write r245 r247
  %t264 = inttoptr i64 %t260 to i64*
  store i64 %t263, i64* %t264
  ; r248 := (bitcast r238 (vec 8 double))
  %t265 = bitcast i512 %t253 to <8 x double>
  ; r249 := (tuple r242 r239 r248)
  %t266 = insertvalue { i64, i64, <8 x double> } undef, i64 %t257, 0
  %t267 = insertvalue { i64, i64, <8 x double> } %t266, i64 %t254, 1
  %t268 = insertvalue { i64, i64, <8 x double> } %t267, <8 x double> %t265, 2
  ret { i64, i64, <8 x double> } %t268
block_0_403d6b:
  %t269 = phi i64 [ %t246, %block_0_403d42 ]
  %t270 = phi i512 [ %t247, %block_0_403d42 ]
  %t271 = phi i64 [ %t250, %block_0_403d42 ]
  ; r253 := (bv_mul (0x2 : bv 64) r252)
  %t272 = mul i64 2, %t271
  ; r254 := (bv_add r252 r253)
  %t273 = add i64 %t271, %t272
  ; r255 := (bv_mul (0x8 : bv 64) r254)
  %t274 = mul i64 8, %t273
  ; r256 := (bv_add r250 r255)
  %t275 = add i64 %t269, %t274
  ; r257 := (bv_add r256 (0x38 : bv 64))
  %t276 = add i64 %t275, 56
  ; r258 := (read r257 (bv 64))
  %t277 = inttoptr i64 %t276 to i64*
  %t278 = load i64, i64* %t277
  ; r259 := (bv_add r258 (0x10 : bv 64))
  %t279 = add i64 %t278, 16
  ; write r257 r259
  %t280 = inttoptr i64 %t276 to i64*
  store i64 %t279, i64* %t280
  ; r260 := (bitcast r251 (vec 8 double))
  %t281 = bitcast i512 %t270 to <8 x double>
  ; r261 := (tuple r254 r252 r260)
  %t282 = insertvalue { i64, i64, <8 x double> } undef, i64 %t273, 0
  %t283 = insertvalue { i64, i64, <8 x double> } %t282, i64 %t271, 1
  %t284 = insertvalue { i64, i64, <8 x double> } %t283, <8 x double> %t281, 2
  ret { i64, i64, <8 x double> } %t284
block_0_403d89:
  %t285 = phi i64 [ %t30, %block_0_403c9b ]
  %t286 = phi i64 [ %t31, %block_0_403c9b ]
  %t287 = phi i64 [ %t32, %block_0_403c9b ]
  %t288 = phi i64 [ %t33, %block_0_403c9b ]
  %t289 = phi i64 [ %t34, %block_0_403c9b ]
  %t290 = phi i64 [ %t35, %block_0_403c9b ]
  %t291 = phi i512 [ %t36, %block_0_403c9b ]
  %t292 = phi i8 [ %t37, %block_0_403c9b ]
  %t293 = phi i8 [ %t38, %block_0_403c9b ]
  %t294 = phi i64 [ %t39, %block_0_403c9b ]
  %t295 = phi i64 [ %t40, %block_0_403c9b ]
  %t296 = phi i64 [ %t41, %block_0_403c9b ]
  ; r274 := (bv_shl r263 (0xc : bv 64))
  %t297 = shl i64 %t286, 12
  ; r275 := (bv_add r273 r266)
  %t298 = add i64 %t296, %t289
  ; r276 := (bv_mul (0x2 : bv 64) r275)
  %t299 = mul i64 2, %t298
  ; r277 := (bv_add r275 r276)
  %t300 = add i64 %t298, %t299
  ; r278 := (bv_shl r277 (0x3 : bv 64))
  %t301 = shl i64 %t300, 3
  ; r279 := (bv_add r278 r264)
  %t302 = add i64 %t301, %t287
  ; r280 := (bv_add r279 (0x38 : bv 64))
  %t303 = add i64 %t302, 56
  ; r281 := (read r280 (bv 64))
  %t304 = inttoptr i64 %t303 to i64*
  %t305 = load i64, i64* %t304
  ; r282 := (trunc r281 32)
  %t306 = trunc i64 %t305 to i32
  ; r283 := (bv_and r282 (0xf : bv 32))
  %t307 = and i32 %t306, 15
  ; r284 := (uext r283 64)
  %t308 = zext i32 %t307 to i64
  ; r285 := (bv_or r284 r274)
  %t309 = or i64 %t308, %t297
  ; write r280 r285
  %t310 = inttoptr i64 %t303 to i64*
  store i64 %t309, i64* %t310
  ; r286 := (bv_add r262 r273)
  %t311 = add i64 %t285, %t296
  ; r287 := (bv_add r286 (0xffffffffffffffff : bv 64))
  %t312 = add i64 %t311, 18446744073709551615
  ; r288 := (bv_mul (0x2 : bv 64) r287)
  %t313 = mul i64 2, %t312
  ; r289 := (bv_add r287 r288)
  %t314 = add i64 %t312, %t313
  ; r290 := (bv_mul (0x8 : bv 64) r289)
  %t315 = mul i64 8, %t314
  ; r291 := (bv_add r264 r290)
  %t316 = add i64 %t287, %t315
  ; r292 := (bv_add r291 (0x38 : bv 64))
  %t317 = add i64 %t316, 56
  ; r293 := (read r292 (bv 64))
  %t318 = inttoptr i64 %t317 to i64*
  %t319 = load i64, i64* %t318
  ; r294 := (trunc r293 32)
  %t320 = trunc i64 %t319 to i32
  ; r295 := (bv_and r294 (0xf : bv 32))
  %t321 = and i32 %t320, 15
  ; r296 := (uext r295 64)
  %t322 = zext i32 %t321 to i64
  ; r297 := (bv_or r274 r296)
  %t323 = or i64 %t297, %t322
  ; write r292 r297
  %t324 = inttoptr i64 %t317 to i64*
  store i64 %t323, i64* %t324
  ; r298 := (bv_add r264 r278)
  %t325 = add i64 %t287, %t301
  ; r299 := (bv_add r298 (0x28 : bv 64))
  %t326 = add i64 %t325, 40
  ; r300 := (bitcast r268 (vec 8 double))
  %t327 = bitcast i512 %t291 to <8 x double>
  ; r301 := call arena_avail_tree_insert(r272, r299, r300)
  %t328 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @arena_avail_tree_insert(i64 %t295, i64 %t326, <8 x double> %t327)
  ; r302 := (tuple_field r301 0)
  %t329 = extractvalue { i64, i64, <8 x double> } %t328, 0
  ; r303 := (tuple_field r301 1)
  %t330 = extractvalue { i64, i64, <8 x double> } %t328, 1
  ; r304 := (tuple_field r301 2)
  %t331 = extractvalue { i64, i64, <8 x double> } %t328, 2
  ; r305 := (bitcast r304 (bv 512))
  %t332 = bitcast <8 x double> %t331 to i512
  br label %block_0_403de1
block_0_403de1:
  %t333 = phi i64 [ %t287, %block_0_403d89 ]
  %t334 = phi i64 [ %t288, %block_0_403d89 ]
  %t335 = phi i64 [ %t289, %block_0_403d89 ]
  %t336 = phi i64 [ %t290, %block_0_403d89 ]
  %t337 = phi i512 [ %t332, %block_0_403d89 ]
  %t338 = phi i8 [ %t292, %block_0_403d89 ]
  %t339 = phi i8 [ %t293, %block_0_403d89 ]
  %t340 = phi i64 [ %t294, %block_0_403d89 ]
  %t341 = phi i64 [ %t296, %block_0_403d89 ]
  br label %block_0_403ca8
}
define { i64, i64, <8 x double> } @chunk_alloc_mmap_slow(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3, <8 x double> %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10) {
block_0_4040e0:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (read (0x635510 : bv 64) (bv 64))
  %t2 = inttoptr i64 6509840 to i64*
  %t3 = load i64, i64* %t2
  ; r3 := (bv_add arg0 r2)
  %t4 = add i64 %arg0, %t3
  ; r4 := (bv_ult arg0 r3)
  %t5 = icmp ult i64 %arg0, %t4
  ; r5 := (bitcast arg3 (bv 512))
  %t6 = bitcast <8 x double> %arg3 to i512
  ; r6 := (bitcast arg4 (bv 512))
  %t7 = bitcast <8 x double> %arg4 to i512
  ; r7 := (bitcast arg5 (bv 512))
  %t8 = bitcast <8 x double> %arg5 to i512
  ; r8 := (bitcast arg6 (bv 512))
  %t9 = bitcast <8 x double> %arg6 to i512
  ; r9 := (bitcast arg7 (bv 512))
  %t10 = bitcast <8 x double> %arg7 to i512
  ; r10 := (bitcast arg8 (bv 512))
  %t11 = bitcast <8 x double> %arg8 to i512
  ; r11 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r12 := (bitcast arg10 (bv 512))
  %t13 = bitcast <8 x double> %arg10 to i512
  ; r13 := (bitcast arg3 (bv 512))
  %t14 = bitcast <8 x double> %arg3 to i512
  br i1 %t5, label %block_0_40412b, label %block_0_40410f
block_0_40410f:
  %t15 = phi i64 [ %arg2, %block_0_4040e0 ], [ %t47, %block_0_404132 ], [ %t83, %block_0_40416f ], [ %t103, %block_0_404181 ]
  %t16 = phi i64 [ 0, %block_0_4040e0 ], [ %t46, %block_0_404132 ], [ %t84, %block_0_40416f ], [ %t97, %block_0_404181 ]
  %t17 = phi i512 [ %t14, %block_0_4040e0 ], [ %t50, %block_0_404132 ], [ %t85, %block_0_40416f ], [ %t99, %block_0_404181 ]
  ; r17 := (bitcast r16 (vec 8 double))
  %t18 = bitcast i512 %t17 to <8 x double>
  ; r18 := (tuple r15 r14 r17)
  %t19 = insertvalue { i64, i64, <8 x double> } undef, i64 %t16, 0
  %t20 = insertvalue { i64, i64, <8 x double> } %t19, i64 %t15, 1
  %t21 = insertvalue { i64, i64, <8 x double> } %t20, <8 x double> %t18, 2
  ret { i64, i64, <8 x double> } %t21
block_0_40412b:
  %t22 = phi i64 [ %arg0, %block_0_4040e0 ]
  %t23 = phi i64 [ %t4, %block_0_4040e0 ]
  %t24 = phi i64 [ %t1, %block_0_4040e0 ]
  %t25 = phi i512 [ %t6, %block_0_4040e0 ]
  %t26 = phi i512 [ %t7, %block_0_4040e0 ]
  %t27 = phi i512 [ %t8, %block_0_4040e0 ]
  %t28 = phi i512 [ %t9, %block_0_4040e0 ]
  %t29 = phi i512 [ %t10, %block_0_4040e0 ]
  %t30 = phi i512 [ %t11, %block_0_4040e0 ]
  %t31 = phi i512 [ %t12, %block_0_4040e0 ]
  %t32 = phi i512 [ %t13, %block_0_4040e0 ]
  ; r30 := (bitcast r22 (vec 8 double))
  %t33 = bitcast i512 %t25 to <8 x double>
  ; r31 := (bitcast r23 (vec 8 double))
  %t34 = bitcast i512 %t26 to <8 x double>
  ; r32 := (bitcast r24 (vec 8 double))
  %t35 = bitcast i512 %t27 to <8 x double>
  ; r33 := (bitcast r25 (vec 8 double))
  %t36 = bitcast i512 %t28 to <8 x double>
  ; r34 := (bitcast r26 (vec 8 double))
  %t37 = bitcast i512 %t29 to <8 x double>
  ; r35 := (bitcast r27 (vec 8 double))
  %t38 = bitcast i512 %t30 to <8 x double>
  ; r36 := (bitcast r28 (vec 8 double))
  %t39 = bitcast i512 %t31 to <8 x double>
  ; r37 := (bitcast r29 (vec 8 double))
  %t40 = bitcast i512 %t32 to <8 x double>
  ; r38 := call pages_map((0x0 : bv 64), r20, r30, r31, r32, r33, r34, r35, r36, r37)
  %t41 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pages_map(i64 0, i64 %t23, <8 x double> %t33, <8 x double> %t34, <8 x double> %t35, <8 x double> %t36, <8 x double> %t37, <8 x double> %t38, <8 x double> %t39, <8 x double> %t40)
  ; r39 := (tuple_field r38 0)
  %t42 = extractvalue { i64, i64, <8 x double> } %t41, 0
  ; r40 := (tuple_field r38 1)
  %t43 = extractvalue { i64, i64, <8 x double> } %t41, 1
  ; r41 := (tuple_field r38 2)
  %t44 = extractvalue { i64, i64, <8 x double> } %t41, 2
  ; r42 := (bitcast r41 (bv 512))
  %t45 = bitcast <8 x double> %t44 to i512
  br label %block_0_404132
block_0_404132:
  %t46 = phi i64 [ %t42, %block_0_40412b ]
  %t47 = phi i64 [ %t43, %block_0_40412b ]
  %t48 = phi i64 [ %t22, %block_0_40412b ]
  %t49 = phi i64 [ %t24, %block_0_40412b ]
  %t50 = phi i512 [ %t45, %block_0_40412b ]
  ; r48 := (eq r43 (0x0 : bv 64))
  %t51 = icmp eq i64 %t46, 0
  br i1 %t51, label %block_0_40410f, label %block_0_40413a
block_0_40413a:
  %t52 = phi i64 [ %t46, %block_0_404132 ]
  %t53 = phi i64 [ %t48, %block_0_404132 ]
  %t54 = phi i64 [ %t49, %block_0_404132 ]
  ; r52 := (read (0x635518 : bv 64) (bv 64))
  %t55 = inttoptr i64 6509848 to i64*
  %t56 = load i64, i64* %t55
  ; r53 := (bv_and r49 r52)
  %t57 = and i64 %t52, %t56
  ; r54 := (eq r53 (0x0 : bv 64))
  %t58 = icmp eq i64 %t57, 0
  br i1 %t58, label %block_0_404171, label %block_0_404146
block_0_404146:
  %t59 = phi i64 [ %t52, %block_0_40413a ]
  %t60 = phi i64 [ %t53, %block_0_40413a ]
  %t61 = phi i64 [ %t57, %block_0_40413a ]
  ; r58 := (read (0x635510 : bv 64) (bv 64))
  %t62 = inttoptr i64 6509840 to i64*
  %t63 = load i64, i64* %t62
  ; r59 := (bv_sub r58 r57)
  %t64 = sub i64 %t63, %t61
  ; r60 := call pages_unmap(r55, r59)
  %t65 = call { i64, i64, <8 x double> } (i64, i64) @pages_unmap(i64 %t59, i64 %t64)
  ; r61 := (tuple_field r60 0)
  %t66 = extractvalue { i64, i64, <8 x double> } %t65, 0
  ; r62 := (tuple_field r60 1)
  %t67 = extractvalue { i64, i64, <8 x double> } %t65, 1
  ; r63 := (tuple_field r60 2)
  %t68 = extractvalue { i64, i64, <8 x double> } %t65, 2
  ; r64 := (bitcast r63 (bv 512))
  %t69 = bitcast <8 x double> %t68 to i512
  br label %block_0_404158
block_0_404158:
  %t70 = phi i64 [ %t60, %block_0_404146 ]
  %t71 = phi i64 [ %t59, %block_0_404146 ]
  %t72 = phi i64 [ %t61, %block_0_404146 ]
  ; r68 := (read (0x635510 : bv 64) (bv 64))
  %t73 = inttoptr i64 6509840 to i64*
  %t74 = load i64, i64* %t73
  ; r69 := (bv_add r66 r68)
  %t75 = add i64 %t71, %t74
  ; r70 := (bv_sub r69 r67)
  %t76 = sub i64 %t75, %t72
  ; r71 := (bv_add r70 r65)
  %t77 = add i64 %t76, %t70
  ; r72 := call pages_unmap(r71, r67)
  %t78 = call { i64, i64, <8 x double> } (i64, i64) @pages_unmap(i64 %t77, i64 %t72)
  ; r73 := (tuple_field r72 0)
  %t79 = extractvalue { i64, i64, <8 x double> } %t78, 0
  ; r74 := (tuple_field r72 1)
  %t80 = extractvalue { i64, i64, <8 x double> } %t78, 1
  ; r75 := (tuple_field r72 2)
  %t81 = extractvalue { i64, i64, <8 x double> } %t78, 2
  ; r76 := (bitcast r75 (bv 512))
  %t82 = bitcast <8 x double> %t81 to i512
  br label %block_0_40416f
block_0_40416f:
  %t83 = phi i64 [ %t80, %block_0_404158 ]
  %t84 = phi i64 [ %t76, %block_0_404158 ]
  %t85 = phi i512 [ %t82, %block_0_404158 ]
  br label %block_0_40410f
block_0_404171:
  %t86 = phi i64 [ %t52, %block_0_40413a ]
  %t87 = phi i64 [ %t53, %block_0_40413a ]
  %t88 = phi i64 [ %t54, %block_0_40413a ]
  ; r83 := (read (0x635510 : bv 64) (bv 64))
  %t89 = inttoptr i64 6509840 to i64*
  %t90 = load i64, i64* %t89
  ; r84 := (bv_add r80 r81)
  %t91 = add i64 %t86, %t87
  ; r85 := call pages_unmap(r84, r83)
  %t92 = call { i64, i64, <8 x double> } (i64, i64) @pages_unmap(i64 %t91, i64 %t90)
  ; r86 := (tuple_field r85 0)
  %t93 = extractvalue { i64, i64, <8 x double> } %t92, 0
  ; r87 := (tuple_field r85 1)
  %t94 = extractvalue { i64, i64, <8 x double> } %t92, 1
  ; r88 := (tuple_field r85 2)
  %t95 = extractvalue { i64, i64, <8 x double> } %t92, 2
  ; r89 := (bitcast r88 (bv 512))
  %t96 = bitcast <8 x double> %t95 to i512
  br label %block_0_404181
block_0_404181:
  %t97 = phi i64 [ %t86, %block_0_404171 ]
  %t98 = phi i64 [ %t88, %block_0_404171 ]
  %t99 = phi i512 [ %t96, %block_0_404171 ]
  ; r93 := (read (0x6356b8 : bv 64) (bv 8))
  %t100 = inttoptr i64 6510264 to i8*
  %t101 = load i8, i8* %t100
  ; r94 := (uext r93 32)
  %t102 = zext i8 %t101 to i32
  ; r95 := (uext r93 64)
  %t103 = zext i8 %t101 to i64
  ; r96 := (trunc r91 8)
  %t104 = trunc i64 %t98 to i8
  ; r97 := (eq r96 (0x0 : bv 8))
  %t105 = icmp eq i8 %t104, 0
  ; r98 := (mux r97 (0x0 : bv 32) r94)
  %t106 = select i1 %t105, i32 0, i32 %t102
  ; r99 := (trunc r98 8)
  %t107 = trunc i32 %t106 to i8
  ; write (0x6356b8 : bv 64) r99
  %t108 = inttoptr i64 6510264 to i8*
  store i8 %t107, i8* %t108
  br label %block_0_40410f
}
define { i64, i64, <8 x double> } @malloc_spin_init(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_4041a0:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call _pthread_mutex_init_calloc_cb_stub(arg0, (0x4065c0 : bv 64), arg2, r1)
  %t2 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_pthread_mutex_init_calloc_cb_stub(i64 %arg0, i64 4220352, i64 %arg2, <8 x double> %t1)
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, i64, <8 x double> } %t2, 1
  ; r5 := (tuple_field r2 2)
  %t5 = extractvalue { i64, i64, <8 x double> } %t2, 2
  ; r6 := (bitcast r5 (bv 512))
  %t6 = bitcast <8 x double> %t5 to i512
  br label %block_0_4041ae
block_0_4041ae:
  %t7 = phi i64 [ %t3, %block_0_4041a0 ]
  %t8 = phi i64 [ %t4, %block_0_4041a0 ]
  %t9 = phi i512 [ %t6, %block_0_4041a0 ]
  ; r10 := (trunc r7 32)
  %t10 = trunc i64 %t7 to i32
  ; r11 := (eq r10 (0x0 : bv 32))
  %t11 = icmp eq i32 %t10, 0
  ; r12 := (mux r11 (0x0 : bv 8) (0x1 : bv 8))
  %t12 = select i1 %t11, i8 0, i8 1
  ; r13 := (uext r12 64)
  %t13 = zext i8 %t12 to i64
  ; r14 := (bitcast r9 (vec 8 double))
  %t14 = bitcast i512 %t9 to <8 x double>
  ; r15 := (tuple r13 r8 r14)
  %t15 = insertvalue { i64, i64, <8 x double> } undef, i64 %t13, 0
  %t16 = insertvalue { i64, i64, <8 x double> } %t15, i64 %t8, 1
  %t17 = insertvalue { i64, i64, <8 x double> } %t16, <8 x double> %t14, 2
  ret { i64, i64, <8 x double> } %t17
}
define void @_malloc_postfork(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_4041c0:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  ; r11 := (bitcast arg6 (bv 512))
  %t12 = bitcast <8 x double> %arg6 to i512
  ; r12 := (bitcast arg7 (bv 512))
  %t13 = bitcast <8 x double> %arg7 to i512
  ; r13 := (bitcast arg8 (bv 512))
  %t14 = bitcast <8 x double> %arg8 to i512
  ; r14 := (bitcast arg9 (bv 512))
  %t15 = bitcast <8 x double> %arg9 to i512
  ; r15 := (bitcast arg10 (bv 512))
  %t16 = bitcast <8 x double> %arg10 to i512
  ; r16 := (bitcast arg11 (bv 512))
  %t17 = bitcast <8 x double> %arg11 to i512
  ; r17 := (bitcast arg12 (bv 512))
  %t18 = bitcast <8 x double> %arg12 to i512
  ; r18 := (bitcast arg13 (bv 512))
  %t19 = bitcast <8 x double> %arg13 to i512
  br i1 %t3, label %block_0_4041cb, label %block_0_40422e
block_0_4041cb:
  %t20 = phi i64 [ %arg3, %block_0_4041c0 ], [ %t232, %block_0_404238 ], [ %t253, %block_0_40424c ], [ %t288, %block_0_404264 ]
  %t21 = phi i64 [ %arg2, %block_0_4041c0 ], [ %t218, %block_0_404238 ], [ %t267, %block_0_40424c ], [ %t289, %block_0_404264 ]
  %t22 = phi i64 [ %t2, %block_0_4041c0 ], [ %t219, %block_0_404238 ], [ %t254, %block_0_40424c ], [ %t290, %block_0_404264 ]
  %t23 = phi i64 [ %arg4, %block_0_4041c0 ], [ %t220, %block_0_404238 ], [ %t255, %block_0_40424c ], [ %t291, %block_0_404264 ]
  %t24 = phi i64 [ %arg5, %block_0_4041c0 ], [ %t221, %block_0_404238 ], [ %t256, %block_0_40424c ], [ %t292, %block_0_404264 ]
  %t25 = phi i512 [ %t4, %block_0_4041c0 ], [ %t222, %block_0_404238 ], [ %t257, %block_0_40424c ], [ %t293, %block_0_404264 ]
  %t26 = phi i512 [ %t5, %block_0_4041c0 ], [ %t223, %block_0_404238 ], [ %t258, %block_0_40424c ], [ %t294, %block_0_404264 ]
  %t27 = phi i512 [ %t6, %block_0_4041c0 ], [ %t224, %block_0_404238 ], [ %t259, %block_0_40424c ], [ %t295, %block_0_404264 ]
  %t28 = phi i512 [ %t7, %block_0_4041c0 ], [ %t225, %block_0_404238 ], [ %t260, %block_0_40424c ], [ %t296, %block_0_404264 ]
  %t29 = phi i512 [ %t8, %block_0_4041c0 ], [ %t226, %block_0_404238 ], [ %t261, %block_0_40424c ], [ %t297, %block_0_404264 ]
  %t30 = phi i512 [ %t9, %block_0_4041c0 ], [ %t227, %block_0_404238 ], [ %t262, %block_0_40424c ], [ %t298, %block_0_404264 ]
  %t31 = phi i512 [ %t10, %block_0_4041c0 ], [ %t228, %block_0_404238 ], [ %t263, %block_0_40424c ], [ %t299, %block_0_404264 ]
  %t32 = phi i512 [ %t11, %block_0_4041c0 ], [ %t229, %block_0_404238 ], [ %t264, %block_0_40424c ], [ %t300, %block_0_404264 ]
  ; r32 := (read (0x6356a8 : bv 64) (bv 32))
  %t33 = inttoptr i64 6510248 to i32*
  %t34 = load i32, i32* %t33
  ; r33 := (eq r32 (0x0 : bv 32))
  %t35 = icmp eq i32 %t34, 0
  br i1 %t35, label %block_0_4041d7, label %block_0_4041eb
block_0_4041d7:
  %t36 = phi i64 [ %t20, %block_0_4041cb ]
  %t37 = phi i64 [ %t21, %block_0_4041cb ]
  %t38 = phi i64 [ %t22, %block_0_4041cb ]
  %t39 = phi i64 [ %t23, %block_0_4041cb ]
  %t40 = phi i64 [ %t24, %block_0_4041cb ]
  %t41 = phi i512 [ %t25, %block_0_4041cb ]
  %t42 = phi i512 [ %t26, %block_0_4041cb ]
  %t43 = phi i512 [ %t27, %block_0_4041cb ]
  %t44 = phi i512 [ %t28, %block_0_4041cb ]
  %t45 = phi i512 [ %t29, %block_0_4041cb ]
  %t46 = phi i512 [ %t30, %block_0_4041cb ]
  %t47 = phi i512 [ %t31, %block_0_4041cb ]
  %t48 = phi i512 [ %t32, %block_0_4041cb ]
  br label %block_0_404217
block_0_4041e0:
  %t49 = phi i64 [ %t71, %block_0_4041eb ], [ %t93, %block_0_4041fd ]
  %t50 = phi i64 [ %t87, %block_0_4041eb ], [ %t94, %block_0_4041fd ]
  %t51 = phi i64 [ %t72, %block_0_4041eb ], [ %t95, %block_0_4041fd ]
  %t52 = phi i64 [ %t73, %block_0_4041eb ], [ %t96, %block_0_4041fd ]
  %t53 = phi i64 [ %t74, %block_0_4041eb ], [ %t98, %block_0_4041fd ]
  %t54 = phi i64 [ %t75, %block_0_4041eb ], [ %t99, %block_0_4041fd ]
  %t55 = phi i512 [ %t76, %block_0_4041eb ], [ %t100, %block_0_4041fd ]
  %t56 = phi i512 [ %t77, %block_0_4041eb ], [ %t101, %block_0_4041fd ]
  %t57 = phi i512 [ %t78, %block_0_4041eb ], [ %t102, %block_0_4041fd ]
  %t58 = phi i512 [ %t79, %block_0_4041eb ], [ %t103, %block_0_4041fd ]
  %t59 = phi i512 [ %t80, %block_0_4041eb ], [ %t104, %block_0_4041fd ]
  %t60 = phi i512 [ %t81, %block_0_4041eb ], [ %t105, %block_0_4041fd ]
  %t61 = phi i512 [ %t82, %block_0_4041eb ], [ %t106, %block_0_4041fd ]
  %t62 = phi i512 [ %t83, %block_0_4041eb ], [ %t107, %block_0_4041fd ]
  ; r61 := (trunc r49 32)
  %t63 = trunc i64 %t51 to i32
  ; r62 := (bv_add r61 (0x1 : bv 32))
  %t64 = add i32 %t63, 1
  ; r63 := (uext r62 64)
  %t65 = zext i32 %t64 to i64
  ; r64 := (read (0x6356a8 : bv 64) (bv 32))
  %t66 = inttoptr i64 6510248 to i32*
  %t67 = load i32, i32* %t66
  ; r65 := (bv_ult r64 r62)
  %t68 = icmp ult i32 %t67, %t64
  ; r66 := (eq r64 r62)
  %t69 = icmp eq i32 %t67, %t64
  ; r67 := (or r65 r66)
  %t70 = or i1 %t68, %t69
  br i1 %t70, label %block_0_404217, label %block_0_4041eb
block_0_4041eb:
  %t71 = phi i64 [ %t20, %block_0_4041cb ], [ %t49, %block_0_4041e0 ], [ %t139, %block_0_40420c ]
  %t72 = phi i64 [ 0, %block_0_4041cb ], [ %t65, %block_0_4041e0 ], [ %t155, %block_0_40420c ]
  %t73 = phi i64 [ %t22, %block_0_4041cb ], [ %t52, %block_0_4041e0 ], [ %t142, %block_0_40420c ]
  %t74 = phi i64 [ %t23, %block_0_4041cb ], [ %t53, %block_0_4041e0 ], [ %t143, %block_0_40420c ]
  %t75 = phi i64 [ %t24, %block_0_4041cb ], [ %t54, %block_0_4041e0 ], [ %t144, %block_0_40420c ]
  %t76 = phi i512 [ %t25, %block_0_4041cb ], [ %t55, %block_0_4041e0 ], [ %t145, %block_0_40420c ]
  %t77 = phi i512 [ %t26, %block_0_4041cb ], [ %t56, %block_0_4041e0 ], [ %t146, %block_0_40420c ]
  %t78 = phi i512 [ %t27, %block_0_4041cb ], [ %t57, %block_0_4041e0 ], [ %t147, %block_0_40420c ]
  %t79 = phi i512 [ %t28, %block_0_4041cb ], [ %t58, %block_0_4041e0 ], [ %t148, %block_0_40420c ]
  %t80 = phi i512 [ %t29, %block_0_4041cb ], [ %t59, %block_0_4041e0 ], [ %t149, %block_0_40420c ]
  %t81 = phi i512 [ %t30, %block_0_4041cb ], [ %t60, %block_0_4041e0 ], [ %t150, %block_0_40420c ]
  %t82 = phi i512 [ %t31, %block_0_4041cb ], [ %t61, %block_0_4041e0 ], [ %t151, %block_0_40420c ]
  %t83 = phi i512 [ %t32, %block_0_4041cb ], [ %t62, %block_0_4041e0 ], [ %t152, %block_0_40420c ]
  ; r81 := (read (0x6356a0 : bv 64) (bv 64))
  %t84 = inttoptr i64 6510240 to i64*
  %t85 = load i64, i64* %t84
  ; r82 := (trunc r69 32)
  %t86 = trunc i64 %t72 to i32
  ; r83 := (uext r82 64)
  %t87 = zext i32 %t86 to i64
  ; r84 := (bv_mul (0x8 : bv 64) r83)
  %t88 = mul i64 8, %t87
  ; r85 := (bv_add r81 r84)
  %t89 = add i64 %t85, %t88
  ; r86 := (read r85 (bv 64))
  %t90 = inttoptr i64 %t89 to i64*
  %t91 = load i64, i64* %t90
  ; r87 := (eq r86 (0x0 : bv 64))
  %t92 = icmp eq i64 %t91, 0
  br i1 %t92, label %block_0_4041e0, label %block_0_4041fd
block_0_4041fd:
  %t93 = phi i64 [ %t71, %block_0_4041eb ]
  %t94 = phi i64 [ %t87, %block_0_4041eb ]
  %t95 = phi i64 [ %t72, %block_0_4041eb ]
  %t96 = phi i64 [ %t73, %block_0_4041eb ]
  %t97 = phi i64 [ %t91, %block_0_4041eb ]
  %t98 = phi i64 [ %t74, %block_0_4041eb ]
  %t99 = phi i64 [ %t75, %block_0_4041eb ]
  %t100 = phi i512 [ %t76, %block_0_4041eb ]
  %t101 = phi i512 [ %t77, %block_0_4041eb ]
  %t102 = phi i512 [ %t78, %block_0_4041eb ]
  %t103 = phi i512 [ %t79, %block_0_4041eb ]
  %t104 = phi i512 [ %t80, %block_0_4041eb ]
  %t105 = phi i512 [ %t81, %block_0_4041eb ]
  %t106 = phi i512 [ %t82, %block_0_4041eb ]
  %t107 = phi i512 [ %t83, %block_0_4041eb ]
  ; r103 := (read (0x6356e8 : bv 64) (bv 32))
  %t108 = inttoptr i64 6510312 to i32*
  %t109 = load i32, i32* %t108
  ; r104 := (eq r103 (0x0 : bv 32))
  %t110 = icmp eq i32 %t109, 0
  br i1 %t110, label %block_0_4041e0, label %block_0_404207
block_0_404207:
  %t111 = phi i64 [ %t93, %block_0_4041fd ]
  %t112 = phi i64 [ %t94, %block_0_4041fd ]
  %t113 = phi i64 [ %t95, %block_0_4041fd ]
  %t114 = phi i64 [ %t96, %block_0_4041fd ]
  %t115 = phi i64 [ %t97, %block_0_4041fd ]
  %t116 = phi i64 [ %t98, %block_0_4041fd ]
  %t117 = phi i64 [ %t99, %block_0_4041fd ]
  %t118 = phi i512 [ %t100, %block_0_4041fd ]
  %t119 = phi i512 [ %t101, %block_0_4041fd ]
  %t120 = phi i512 [ %t102, %block_0_4041fd ]
  %t121 = phi i512 [ %t103, %block_0_4041fd ]
  %t122 = phi i512 [ %t104, %block_0_4041fd ]
  %t123 = phi i512 [ %t105, %block_0_4041fd ]
  %t124 = phi i512 [ %t106, %block_0_4041fd ]
  %t125 = phi i512 [ %t107, %block_0_4041fd ]
  ; r120 := (bitcast r112 (vec 8 double))
  %t126 = bitcast i512 %t118 to <8 x double>
  ; r121 := (bitcast r113 (vec 8 double))
  %t127 = bitcast i512 %t119 to <8 x double>
  ; r122 := (bitcast r114 (vec 8 double))
  %t128 = bitcast i512 %t120 to <8 x double>
  ; r123 := (bitcast r115 (vec 8 double))
  %t129 = bitcast i512 %t121 to <8 x double>
  ; r124 := (bitcast r116 (vec 8 double))
  %t130 = bitcast i512 %t122 to <8 x double>
  ; r125 := (bitcast r117 (vec 8 double))
  %t131 = bitcast i512 %t123 to <8 x double>
  ; r126 := (bitcast r118 (vec 8 double))
  %t132 = bitcast i512 %t124 to <8 x double>
  ; r127 := (bitcast r119 (vec 8 double))
  %t133 = bitcast i512 %t125 to <8 x double>
  ; r128 := call pthread_mutex_unlock_int(r109, r108, r106, r105, r110, r111, r120, r121, r122, r123, r124, r125, r126, r127)
  %t134 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t115, i64 %t114, i64 %t112, i64 %t111, i64 %t116, i64 %t117, <8 x double> %t126, <8 x double> %t127, <8 x double> %t128, <8 x double> %t129, <8 x double> %t130, <8 x double> %t131, <8 x double> %t132, <8 x double> %t133)
  ; r129 := (tuple_field r128 0)
  %t135 = extractvalue { i64, i64, <8 x double> } %t134, 0
  ; r130 := (tuple_field r128 1)
  %t136 = extractvalue { i64, i64, <8 x double> } %t134, 1
  ; r131 := (tuple_field r128 2)
  %t137 = extractvalue { i64, i64, <8 x double> } %t134, 2
  ; r132 := (bitcast r131 (bv 512))
  %t138 = bitcast <8 x double> %t137 to i512
  br label %block_0_40420c
block_0_40420c:
  %t139 = phi i64 [ %t111, %block_0_404207 ]
  %t140 = phi i64 [ %t136, %block_0_404207 ]
  %t141 = phi i64 [ %t113, %block_0_404207 ]
  %t142 = phi i64 [ %t114, %block_0_404207 ]
  %t143 = phi i64 [ %t116, %block_0_404207 ]
  %t144 = phi i64 [ %t117, %block_0_404207 ]
  %t145 = phi i512 [ %t138, %block_0_404207 ]
  %t146 = phi i512 [ %t119, %block_0_404207 ]
  %t147 = phi i512 [ %t120, %block_0_404207 ]
  %t148 = phi i512 [ %t121, %block_0_404207 ]
  %t149 = phi i512 [ %t122, %block_0_404207 ]
  %t150 = phi i512 [ %t123, %block_0_404207 ]
  %t151 = phi i512 [ %t124, %block_0_404207 ]
  %t152 = phi i512 [ %t125, %block_0_404207 ]
  ; r147 := (trunc r135 32)
  %t153 = trunc i64 %t141 to i32
  ; r148 := (bv_add r147 (0x1 : bv 32))
  %t154 = add i32 %t153, 1
  ; r149 := (uext r148 64)
  %t155 = zext i32 %t154 to i64
  ; r150 := (read (0x6356a8 : bv 64) (bv 32))
  %t156 = inttoptr i64 6510248 to i32*
  %t157 = load i32, i32* %t156
  ; r151 := (eq r150 r148)
  %t158 = icmp eq i32 %t157, %t154
  ; r152 := (bv_ule r148 r150)
  %t159 = icmp ule i32 %t154, %t157
  ; r153 := (not r151)
  %t160 = icmp eq i1 %t158, 0
  ; r154 := (and r152 r153)
  %t161 = and i1 %t159, %t160
  br i1 %t161, label %block_0_4041eb, label %block_0_404217
block_0_404217:
  %t162 = phi i64 [ %t36, %block_0_4041d7 ], [ %t49, %block_0_4041e0 ], [ %t139, %block_0_40420c ]
  %t163 = phi i64 [ %t37, %block_0_4041d7 ], [ %t50, %block_0_4041e0 ], [ %t140, %block_0_40420c ]
  %t164 = phi i64 [ %t38, %block_0_4041d7 ], [ %t52, %block_0_4041e0 ], [ %t142, %block_0_40420c ]
  %t165 = phi i64 [ %t39, %block_0_4041d7 ], [ %t53, %block_0_4041e0 ], [ %t143, %block_0_40420c ]
  %t166 = phi i64 [ %t40, %block_0_4041d7 ], [ %t54, %block_0_4041e0 ], [ %t144, %block_0_40420c ]
  %t167 = phi i512 [ %t41, %block_0_4041d7 ], [ %t55, %block_0_4041e0 ], [ %t145, %block_0_40420c ]
  %t168 = phi i512 [ %t42, %block_0_4041d7 ], [ %t56, %block_0_4041e0 ], [ %t146, %block_0_40420c ]
  %t169 = phi i512 [ %t43, %block_0_4041d7 ], [ %t57, %block_0_4041e0 ], [ %t147, %block_0_40420c ]
  %t170 = phi i512 [ %t44, %block_0_4041d7 ], [ %t58, %block_0_4041e0 ], [ %t148, %block_0_40420c ]
  %t171 = phi i512 [ %t45, %block_0_4041d7 ], [ %t59, %block_0_4041e0 ], [ %t149, %block_0_40420c ]
  %t172 = phi i512 [ %t46, %block_0_4041d7 ], [ %t60, %block_0_4041e0 ], [ %t150, %block_0_40420c ]
  %t173 = phi i512 [ %t47, %block_0_4041d7 ], [ %t61, %block_0_4041e0 ], [ %t151, %block_0_40420c ]
  %t174 = phi i512 [ %t48, %block_0_4041d7 ], [ %t62, %block_0_4041e0 ], [ %t152, %block_0_40420c ]
  ; r168 := (read (0x6356e8 : bv 64) (bv 32))
  %t175 = inttoptr i64 6510312 to i32*
  %t176 = load i32, i32* %t175
  ; r169 := (eq r168 (0x0 : bv 32))
  %t177 = icmp eq i32 %t176, 0
  br i1 %t177, label %block_0_404221, label %block_0_404223
block_0_404221:
  ret void
block_0_404223:
  %t178 = phi i64 [ %t162, %block_0_404217 ]
  %t179 = phi i64 [ %t163, %block_0_404217 ]
  %t180 = phi i64 [ %t164, %block_0_404217 ]
  %t181 = phi i64 [ %t165, %block_0_404217 ]
  %t182 = phi i64 [ %t166, %block_0_404217 ]
  %t183 = phi i512 [ %t167, %block_0_404217 ]
  %t184 = phi i512 [ %t168, %block_0_404217 ]
  %t185 = phi i512 [ %t169, %block_0_404217 ]
  %t186 = phi i512 [ %t170, %block_0_404217 ]
  %t187 = phi i512 [ %t171, %block_0_404217 ]
  %t188 = phi i512 [ %t172, %block_0_404217 ]
  %t189 = phi i512 [ %t173, %block_0_404217 ]
  %t190 = phi i512 [ %t174, %block_0_404217 ]
  ; r183 := (bitcast r175 (vec 8 double))
  %t191 = bitcast i512 %t183 to <8 x double>
  ; r184 := (bitcast r176 (vec 8 double))
  %t192 = bitcast i512 %t184 to <8 x double>
  ; r185 := (bitcast r177 (vec 8 double))
  %t193 = bitcast i512 %t185 to <8 x double>
  ; r186 := (bitcast r178 (vec 8 double))
  %t194 = bitcast i512 %t186 to <8 x double>
  ; r187 := (bitcast r179 (vec 8 double))
  %t195 = bitcast i512 %t187 to <8 x double>
  ; r188 := (bitcast r180 (vec 8 double))
  %t196 = bitcast i512 %t188 to <8 x double>
  ; r189 := (bitcast r181 (vec 8 double))
  %t197 = bitcast i512 %t189 to <8 x double>
  ; r190 := (bitcast r182 (vec 8 double))
  %t198 = bitcast i512 %t190 to <8 x double>
  ; r191 := call pthread_mutex_unlock_int((0x6356b0 : bv 64), r172, r171, r170, r173, r174, r183, r184, r185, r186, r187, r188, r189, r190)
  %t199 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510256, i64 %t180, i64 %t179, i64 %t178, i64 %t181, i64 %t182, <8 x double> %t191, <8 x double> %t192, <8 x double> %t193, <8 x double> %t194, <8 x double> %t195, <8 x double> %t196, <8 x double> %t197, <8 x double> %t198)
  ret void
block_0_40422e:
  %t200 = phi i64 [ %arg2, %block_0_4041c0 ]
  %t201 = phi i64 [ %t2, %block_0_4041c0 ]
  %t202 = phi i64 [ %arg4, %block_0_4041c0 ]
  %t203 = phi i64 [ %arg5, %block_0_4041c0 ]
  %t204 = phi i512 [ %t12, %block_0_4041c0 ]
  %t205 = phi i512 [ %t13, %block_0_4041c0 ]
  %t206 = phi i512 [ %t14, %block_0_4041c0 ]
  %t207 = phi i512 [ %t15, %block_0_4041c0 ]
  %t208 = phi i512 [ %t16, %block_0_4041c0 ]
  %t209 = phi i512 [ %t17, %block_0_4041c0 ]
  %t210 = phi i512 [ %t18, %block_0_4041c0 ]
  %t211 = phi i512 [ %t19, %block_0_4041c0 ]
  ; r204 := (bitcast r196 (vec 8 double))
  %t212 = bitcast i512 %t204 to <8 x double>
  ; r205 := call _spinunlock_stub((0x6355a0 : bv 64), r193, r192, r204)
  %t213 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6509984, i64 %t201, i64 %t200, <8 x double> %t212)
  ; r206 := (tuple_field r205 0)
  %t214 = extractvalue { i64, i64, <8 x double> } %t213, 0
  ; r207 := (tuple_field r205 1)
  %t215 = extractvalue { i64, i64, <8 x double> } %t213, 1
  ; r208 := (tuple_field r205 2)
  %t216 = extractvalue { i64, i64, <8 x double> } %t213, 2
  ; r209 := (bitcast r208 (bv 512))
  %t217 = bitcast <8 x double> %t216 to i512
  br label %block_0_404238
block_0_404238:
  %t218 = phi i64 [ %t215, %block_0_40422e ]
  %t219 = phi i64 [ %t201, %block_0_40422e ]
  %t220 = phi i64 [ %t202, %block_0_40422e ]
  %t221 = phi i64 [ %t203, %block_0_40422e ]
  %t222 = phi i512 [ %t217, %block_0_40422e ]
  %t223 = phi i512 [ %t205, %block_0_40422e ]
  %t224 = phi i512 [ %t206, %block_0_40422e ]
  %t225 = phi i512 [ %t207, %block_0_40422e ]
  %t226 = phi i512 [ %t208, %block_0_40422e ]
  %t227 = phi i512 [ %t209, %block_0_40422e ]
  %t228 = phi i512 [ %t210, %block_0_40422e ]
  %t229 = phi i512 [ %t211, %block_0_40422e ]
  ; r222 := (read (0x6356e8 : bv 64) (bv 32))
  %t230 = inttoptr i64 6510312 to i32*
  %t231 = load i32, i32* %t230
  ; r223 := (uext r222 64)
  %t232 = zext i32 %t231 to i64
  ; r224 := (eq r222 (0x0 : bv 32))
  %t233 = icmp eq i32 %t231, 0
  br i1 %t233, label %block_0_4041cb, label %block_0_404242
block_0_404242:
  %t234 = phi i64 [ %t232, %block_0_404238 ]
  %t235 = phi i64 [ %t218, %block_0_404238 ]
  %t236 = phi i64 [ %t219, %block_0_404238 ]
  %t237 = phi i64 [ %t220, %block_0_404238 ]
  %t238 = phi i64 [ %t221, %block_0_404238 ]
  %t239 = phi i512 [ %t222, %block_0_404238 ]
  %t240 = phi i512 [ %t223, %block_0_404238 ]
  %t241 = phi i512 [ %t224, %block_0_404238 ]
  %t242 = phi i512 [ %t225, %block_0_404238 ]
  %t243 = phi i512 [ %t226, %block_0_404238 ]
  %t244 = phi i512 [ %t227, %block_0_404238 ]
  %t245 = phi i512 [ %t228, %block_0_404238 ]
  %t246 = phi i512 [ %t229, %block_0_404238 ]
  ; r238 := (bitcast r230 (vec 8 double))
  %t247 = bitcast i512 %t239 to <8 x double>
  ; r239 := call _spinunlock_stub((0x635540 : bv 64), r227, r226, r238)
  %t248 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6509888, i64 %t236, i64 %t235, <8 x double> %t247)
  ; r240 := (tuple_field r239 0)
  %t249 = extractvalue { i64, i64, <8 x double> } %t248, 0
  ; r241 := (tuple_field r239 1)
  %t250 = extractvalue { i64, i64, <8 x double> } %t248, 1
  ; r242 := (tuple_field r239 2)
  %t251 = extractvalue { i64, i64, <8 x double> } %t248, 2
  ; r243 := (bitcast r242 (bv 512))
  %t252 = bitcast <8 x double> %t251 to i512
  br label %block_0_40424c
block_0_40424c:
  %t253 = phi i64 [ %t234, %block_0_404242 ]
  %t254 = phi i64 [ %t236, %block_0_404242 ]
  %t255 = phi i64 [ %t237, %block_0_404242 ]
  %t256 = phi i64 [ %t238, %block_0_404242 ]
  %t257 = phi i512 [ %t252, %block_0_404242 ]
  %t258 = phi i512 [ %t240, %block_0_404242 ]
  %t259 = phi i512 [ %t241, %block_0_404242 ]
  %t260 = phi i512 [ %t242, %block_0_404242 ]
  %t261 = phi i512 [ %t243, %block_0_404242 ]
  %t262 = phi i512 [ %t244, %block_0_404242 ]
  %t263 = phi i512 [ %t245, %block_0_404242 ]
  %t264 = phi i512 [ %t246, %block_0_404242 ]
  ; r256 := (read (0x6356e8 : bv 64) (bv 32))
  %t265 = inttoptr i64 6510312 to i32*
  %t266 = load i32, i32* %t265
  ; r257 := (uext r256 64)
  %t267 = zext i32 %t266 to i64
  ; r258 := (eq r256 (0x0 : bv 32))
  %t268 = icmp eq i32 %t266, 0
  br i1 %t268, label %block_0_4041cb, label %block_0_40425a
block_0_40425a:
  %t269 = phi i64 [ %t253, %block_0_40424c ]
  %t270 = phi i64 [ %t267, %block_0_40424c ]
  %t271 = phi i64 [ %t254, %block_0_40424c ]
  %t272 = phi i64 [ %t255, %block_0_40424c ]
  %t273 = phi i64 [ %t256, %block_0_40424c ]
  %t274 = phi i512 [ %t257, %block_0_40424c ]
  %t275 = phi i512 [ %t258, %block_0_40424c ]
  %t276 = phi i512 [ %t259, %block_0_40424c ]
  %t277 = phi i512 [ %t260, %block_0_40424c ]
  %t278 = phi i512 [ %t261, %block_0_40424c ]
  %t279 = phi i512 [ %t262, %block_0_40424c ]
  %t280 = phi i512 [ %t263, %block_0_40424c ]
  %t281 = phi i512 [ %t264, %block_0_40424c ]
  ; r272 := (bitcast r264 (vec 8 double))
  %t282 = bitcast i512 %t274 to <8 x double>
  ; r273 := call _spinunlock_stub((0x635680 : bv 64), r261, r260, r272)
  %t283 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6510208, i64 %t271, i64 %t270, <8 x double> %t282)
  ; r274 := (tuple_field r273 0)
  %t284 = extractvalue { i64, i64, <8 x double> } %t283, 0
  ; r275 := (tuple_field r273 1)
  %t285 = extractvalue { i64, i64, <8 x double> } %t283, 1
  ; r276 := (tuple_field r273 2)
  %t286 = extractvalue { i64, i64, <8 x double> } %t283, 2
  ; r277 := (bitcast r276 (bv 512))
  %t287 = bitcast <8 x double> %t286 to i512
  br label %block_0_404264
block_0_404264:
  %t288 = phi i64 [ %t269, %block_0_40425a ]
  %t289 = phi i64 [ %t285, %block_0_40425a ]
  %t290 = phi i64 [ %t271, %block_0_40425a ]
  %t291 = phi i64 [ %t272, %block_0_40425a ]
  %t292 = phi i64 [ %t273, %block_0_40425a ]
  %t293 = phi i512 [ %t287, %block_0_40425a ]
  %t294 = phi i512 [ %t275, %block_0_40425a ]
  %t295 = phi i512 [ %t276, %block_0_40425a ]
  %t296 = phi i512 [ %t277, %block_0_40425a ]
  %t297 = phi i512 [ %t278, %block_0_40425a ]
  %t298 = phi i512 [ %t279, %block_0_40425a ]
  %t299 = phi i512 [ %t280, %block_0_40425a ]
  %t300 = phi i512 [ %t281, %block_0_40425a ]
  br label %block_0_4041cb
}
define { i64, i64, <8 x double> } @base_node_dealloc(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_404270:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  br i1 %t2, label %block_0_404280, label %block_0_404293
block_0_404280:
  %t5 = phi i64 [ %arg2, %block_0_404270 ]
  %t6 = phi i64 [ %arg0, %block_0_404270 ]
  %t7 = phi i512 [ %t3, %block_0_404270 ]
  ; r7 := (read (0x635670 : bv 64) (bv 64))
  %t8 = inttoptr i64 6510192 to i64*
  %t9 = load i64, i64* %t8
  ; write r5 r7
  %t10 = inttoptr i64 %t6 to i64*
  store i64 %t9, i64* %t10
  ; write (0x635670 : bv 64) r5
  %t11 = inttoptr i64 6510192 to i64*
  store i64 %t6, i64* %t11
  br label %block_0_404291
block_0_404291:
  %t12 = phi i64 [ %t9, %block_0_404280 ], [ %t36, %block_0_40429d ]
  %t13 = phi i64 [ %t5, %block_0_404280 ], [ %t29, %block_0_40429d ]
  %t14 = phi i512 [ %t7, %block_0_404280 ], [ %t32, %block_0_40429d ]
  ; r11 := (bitcast r10 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r12 := (tuple r8 r9 r11)
  %t16 = insertvalue { i64, i64, <8 x double> } undef, i64 %t12, 0
  %t17 = insertvalue { i64, i64, <8 x double> } %t16, i64 %t13, 1
  %t18 = insertvalue { i64, i64, <8 x double> } %t17, <8 x double> %t15, 2
  ret { i64, i64, <8 x double> } %t18
block_0_404293:
  %t19 = phi i64 [ %arg2, %block_0_404270 ]
  %t20 = phi i64 [ %arg0, %block_0_404270 ]
  %t21 = phi i64 [ %arg1, %block_0_404270 ]
  %t22 = phi i512 [ %t4, %block_0_404270 ]
  ; r17 := (bitcast r16 (vec 8 double))
  %t23 = bitcast i512 %t22 to <8 x double>
  ; r18 := call _spinlock_stub((0x635680 : bv 64), r15, r13, r17)
  %t24 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6510208, i64 %t21, i64 %t19, <8 x double> %t23)
  ; r19 := (tuple_field r18 0)
  %t25 = extractvalue { i64, i64, <8 x double> } %t24, 0
  ; r20 := (tuple_field r18 1)
  %t26 = extractvalue { i64, i64, <8 x double> } %t24, 1
  ; r21 := (tuple_field r18 2)
  %t27 = extractvalue { i64, i64, <8 x double> } %t24, 2
  ; r22 := (bitcast r21 (bv 512))
  %t28 = bitcast <8 x double> %t27 to i512
  br label %block_0_40429d
block_0_40429d:
  %t29 = phi i64 [ %t26, %block_0_404293 ]
  %t30 = phi i64 [ %t20, %block_0_404293 ]
  %t31 = phi i64 [ %t21, %block_0_404293 ]
  %t32 = phi i512 [ %t28, %block_0_404293 ]
  ; r27 := (read (0x6356e8 : bv 64) (bv 32))
  %t33 = inttoptr i64 6510312 to i32*
  %t34 = load i32, i32* %t33
  ; r28 := (read (0x635670 : bv 64) (bv 64))
  %t35 = inttoptr i64 6510192 to i64*
  %t36 = load i64, i64* %t35
  ; r29 := (eq r27 (0x0 : bv 32))
  %t37 = icmp eq i32 %t34, 0
  ; write r24 r28
  %t38 = inttoptr i64 %t30 to i64*
  store i64 %t36, i64* %t38
  ; write (0x635670 : bv 64) r24
  %t39 = inttoptr i64 6510192 to i64*
  store i64 %t30, i64* %t39
  br i1 %t37, label %block_0_404291, label %block_0_4042b8
block_0_4042b8:
  %t40 = phi i64 [ %t29, %block_0_40429d ]
  %t41 = phi i64 [ %t31, %block_0_40429d ]
  %t42 = phi i512 [ %t32, %block_0_40429d ]
  ; r33 := (bitcast r32 (vec 8 double))
  %t43 = bitcast i512 %t42 to <8 x double>
  %t44 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6510208, i64 %t41, i64 %t40, <8 x double> %t43)
  ret { i64, i64, <8 x double> } %t44
}
define { i64, i64, <8 x double> } @chunk_alloc(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3, <8 x double> %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10) {
block_0_4042d0:
  ; r0 := (read (0x630121 : bv 64) (bv 8))
  %t0 = inttoptr i64 6488353 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (eq r0 (0x0 : bv 8))
  %t2 = icmp eq i8 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r4 := (bitcast arg4 (bv 512))
  %t5 = bitcast <8 x double> %arg4 to i512
  ; r5 := (bitcast arg5 (bv 512))
  %t6 = bitcast <8 x double> %arg5 to i512
  ; r6 := (bitcast arg6 (bv 512))
  %t7 = bitcast <8 x double> %arg6 to i512
  ; r7 := (bitcast arg7 (bv 512))
  %t8 = bitcast <8 x double> %arg7 to i512
  ; r8 := (bitcast arg8 (bv 512))
  %t9 = bitcast <8 x double> %arg8 to i512
  ; r9 := (bitcast arg9 (bv 512))
  %t10 = bitcast <8 x double> %arg9 to i512
  ; r10 := (bitcast arg10 (bv 512))
  %t11 = bitcast <8 x double> %arg10 to i512
  br i1 %t2, label %block_0_40430f, label %block_0_4042e9
block_0_4042e9:
  %t12 = phi i64 [ %arg2, %block_0_4042d0 ]
  %t13 = phi i64 [ %arg0, %block_0_4042d0 ]
  %t14 = phi i64 [ %arg1, %block_0_4042d0 ]
  %t15 = phi i512 [ %t4, %block_0_4042d0 ]
  %t16 = phi i512 [ %t5, %block_0_4042d0 ]
  %t17 = phi i512 [ %t6, %block_0_4042d0 ]
  %t18 = phi i512 [ %t7, %block_0_4042d0 ]
  %t19 = phi i512 [ %t8, %block_0_4042d0 ]
  %t20 = phi i512 [ %t9, %block_0_4042d0 ]
  %t21 = phi i512 [ %t10, %block_0_4042d0 ]
  %t22 = phi i512 [ %t11, %block_0_4042d0 ]
  ; r22 := (read (0x6356b8 : bv 64) (bv 8))
  %t23 = inttoptr i64 6510264 to i8*
  %t24 = load i8, i8* %t23
  ; r23 := (eq r22 (0x0 : bv 8))
  %t25 = icmp eq i8 %t24, 0
  br i1 %t25, label %block_0_4043fe, label %block_0_4042f6
block_0_4042f6:
  %t26 = phi i64 [ %t12, %block_0_4042e9 ]
  %t27 = phi i64 [ %t13, %block_0_4042e9 ]
  %t28 = phi i64 [ %t14, %block_0_4042e9 ]
  %t29 = phi i512 [ %t15, %block_0_4042e9 ]
  %t30 = phi i512 [ %t16, %block_0_4042e9 ]
  %t31 = phi i512 [ %t17, %block_0_4042e9 ]
  %t32 = phi i512 [ %t18, %block_0_4042e9 ]
  %t33 = phi i512 [ %t19, %block_0_4042e9 ]
  %t34 = phi i512 [ %t20, %block_0_4042e9 ]
  %t35 = phi i512 [ %t21, %block_0_4042e9 ]
  %t36 = phi i512 [ %t22, %block_0_4042e9 ]
  ; r35 := (bitcast r27 (vec 8 double))
  %t37 = bitcast i512 %t29 to <8 x double>
  ; r36 := (bitcast r28 (vec 8 double))
  %t38 = bitcast i512 %t30 to <8 x double>
  ; r37 := (bitcast r29 (vec 8 double))
  %t39 = bitcast i512 %t31 to <8 x double>
  ; r38 := (bitcast r30 (vec 8 double))
  %t40 = bitcast i512 %t32 to <8 x double>
  ; r39 := (bitcast r31 (vec 8 double))
  %t41 = bitcast i512 %t33 to <8 x double>
  ; r40 := (bitcast r32 (vec 8 double))
  %t42 = bitcast i512 %t34 to <8 x double>
  ; r41 := (bitcast r33 (vec 8 double))
  %t43 = bitcast i512 %t35 to <8 x double>
  ; r42 := (bitcast r34 (vec 8 double))
  %t44 = bitcast i512 %t36 to <8 x double>
  ; r43 := call chunk_alloc_mmap_slow(r25, (0x0 : bv 64), r24, r35, r36, r37, r38, r39, r40, r41, r42)
  %t45 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @chunk_alloc_mmap_slow(i64 %t27, i64 0, i64 %t26, <8 x double> %t37, <8 x double> %t38, <8 x double> %t39, <8 x double> %t40, <8 x double> %t41, <8 x double> %t42, <8 x double> %t43, <8 x double> %t44)
  ; r44 := (tuple_field r43 0)
  %t46 = extractvalue { i64, i64, <8 x double> } %t45, 0
  ; r45 := (tuple_field r43 1)
  %t47 = extractvalue { i64, i64, <8 x double> } %t45, 1
  ; r46 := (tuple_field r43 2)
  %t48 = extractvalue { i64, i64, <8 x double> } %t45, 2
  ; r47 := (bitcast r46 (bv 512))
  %t49 = bitcast <8 x double> %t48 to i512
  br label %block_0_4042fd
block_0_4042fd:
  %t50 = phi i64 [ %t46, %block_0_4042f6 ]
  %t51 = phi i64 [ %t47, %block_0_4042f6 ]
  %t52 = phi i64 [ %t27, %block_0_4042f6 ]
  %t53 = phi i64 [ %t28, %block_0_4042f6 ]
  %t54 = phi i64 [ %t28, %block_0_4042f6 ]
  %t55 = phi i512 [ %t49, %block_0_4042f6 ]
  br label %block_0_404300
block_0_404300:
  %t56 = phi i64 [ %t51, %block_0_4042fd ], [ %t398, %block_0_404459 ], [ %t707, %block_0_4045ac ]
  %t57 = phi i64 [ %t52, %block_0_4042fd ], [ %t400, %block_0_404459 ], [ %t708, %block_0_4045ac ]
  %t58 = phi i64 [ %t53, %block_0_4042fd ], [ %t401, %block_0_404459 ], [ %t709, %block_0_4045ac ]
  %t59 = phi i64 [ %t50, %block_0_4042fd ], [ %t408, %block_0_404459 ], [ %t706, %block_0_4045ac ]
  %t60 = phi i64 [ %t54, %block_0_4042fd ], [ %t403, %block_0_404459 ], [ %t710, %block_0_4045ac ]
  %t61 = phi i512 [ %t55, %block_0_4042fd ], [ %t404, %block_0_404459 ], [ %t711, %block_0_4045ac ]
  ; r60 := (eq r57 (0x0 : bv 64))
  %t62 = icmp eq i64 %t59, 0
  br i1 %t62, label %block_0_40430f, label %block_0_404305
block_0_404305:
  %t63 = phi i64 [ %t56, %block_0_404300 ], [ %t324, %block_0_404414 ], [ %t639, %block_0_40456b ], [ %t661, %block_0_40458f ]
  %t64 = phi i64 [ %t59, %block_0_404300 ], [ %t323, %block_0_404414 ], [ %t642, %block_0_40456b ], [ %t662, %block_0_40458f ]
  %t65 = phi i64 [ %t60, %block_0_404300 ], [ %t327, %block_0_404414 ], [ %t643, %block_0_40456b ], [ %t663, %block_0_40458f ]
  %t66 = phi i512 [ %t61, %block_0_404300 ], [ %t328, %block_0_404414 ], [ %t644, %block_0_40456b ], [ %t664, %block_0_40458f ]
  ; write r63 (0x1 : bv 8)
  %t67 = inttoptr i64 %t65 to i8*
  store i8 1, i8* %t67
  br label %block_0_4043f0
block_0_40430f:
  %t68 = phi i64 [ %arg2, %block_0_4042d0 ], [ %t56, %block_0_404300 ], [ %t310, %block_0_404408 ]
  %t69 = phi i64 [ %arg0, %block_0_4042d0 ], [ %t57, %block_0_404300 ], [ %t311, %block_0_404408 ]
  %t70 = phi i64 [ %arg1, %block_0_4042d0 ], [ %t58, %block_0_404300 ], [ %t312, %block_0_404408 ]
  %t71 = phi i64 [ %arg1, %block_0_4042d0 ], [ %t60, %block_0_404300 ], [ %t313, %block_0_404408 ]
  %t72 = phi i512 [ %t3, %block_0_4042d0 ], [ %t61, %block_0_404300 ], [ %t314, %block_0_404408 ]
  ; r70 := (read (0x630120 : bv 64) (bv 8))
  %t73 = inttoptr i64 6488352 to i8*
  %t74 = load i8, i8* %t73
  ; r71 := (eq r70 (0x0 : bv 8))
  %t75 = icmp eq i8 %t74, 0
  br i1 %t75, label %block_0_4044e9, label %block_0_40431c
block_0_40431c:
  %t76 = phi i64 [ %t68, %block_0_40430f ]
  %t77 = phi i64 [ %t69, %block_0_40430f ]
  %t78 = phi i64 [ %t70, %block_0_40430f ]
  %t79 = phi i64 [ %t71, %block_0_40430f ]
  %t80 = phi i512 [ %t72, %block_0_40430f ]
  ; r77 := (read (0x6356e8 : bv 64) (bv 32))
  %t81 = inttoptr i64 6510312 to i32*
  %t82 = load i32, i32* %t81
  ; r78 := (eq r77 (0x0 : bv 32))
  %t83 = icmp eq i32 %t82, 0
  br i1 %t83, label %block_0_40432a, label %block_0_4044f1
block_0_40432a:
  %t84 = phi i64 [ %t76, %block_0_40431c ], [ %t522, %block_0_4044fb ]
  %t85 = phi i64 [ %t77, %block_0_40431c ], [ %t523, %block_0_4044fb ]
  %t86 = phi i64 [ %t78, %block_0_40431c ], [ %t524, %block_0_4044fb ]
  %t87 = phi i64 [ %t79, %block_0_40431c ], [ %t525, %block_0_4044fb ]
  %t88 = phi i512 [ %t80, %block_0_40431c ], [ %t526, %block_0_4044fb ]
  ; r84 := (read (0x6355e0 : bv 64) (bv 64))
  %t89 = inttoptr i64 6510048 to i64*
  %t90 = load i64, i64* %t89
  br label %block_0_404345
block_0_404338:
  %t91 = phi i64 [ %t164, %block_0_404375 ]
  %t92 = phi i64 [ %t165, %block_0_404375 ]
  %t93 = phi i64 [ %t166, %block_0_404375 ]
  %t94 = phi i64 [ %t167, %block_0_404375 ]
  %t95 = phi i64 [ %t168, %block_0_404375 ]
  %t96 = phi i64 [ %t169, %block_0_404375 ]
  %t97 = phi i1 [ 0, %block_0_404375 ]
  %t98 = phi i1 [ %t173, %block_0_404375 ]
  %t99 = phi i1 [ %t172, %block_0_404375 ]
  %t100 = phi i512 [ %t170, %block_0_404375 ]
  ; r95 := (xor r93 r91)
  %t101 = xor i1 %t99, %t97
  ; r96 := (or r92 r95)
  %t102 = or i1 %t98, %t101
  br i1 %t102, label %block_0_404392, label %block_0_40433a
block_0_40433a:
  %t103 = phi i64 [ %t91, %block_0_404338 ]
  %t104 = phi i64 [ %t92, %block_0_404338 ]
  %t105 = phi i64 [ %t93, %block_0_404338 ]
  %t106 = phi i64 [ %t94, %block_0_404338 ]
  %t107 = phi i64 [ %t96, %block_0_404338 ]
  %t108 = phi i512 [ %t100, %block_0_404338 ]
  ; r103 := (bv_add r99 (0x8 : bv 64))
  %t109 = add i64 %t105, 8
  ; r104 := (read r103 (bv 64))
  %t110 = inttoptr i64 %t109 to i64*
  %t111 = load i64, i64* %t110
  ; r105 := (bv_and r104 (0xfffffffffffffffe : bv 64))
  %t112 = and i64 %t111, 18446744073709551614
  br label %block_0_404342
block_0_404342:
  %t113 = phi i64 [ %t103, %block_0_40433a ], [ %t175, %block_0_40437a ]
  %t114 = phi i64 [ %t104, %block_0_40433a ], [ %t174, %block_0_40437a ]
  %t115 = phi i64 [ %t106, %block_0_40433a ], [ %t176, %block_0_40437a ]
  %t116 = phi i64 [ %t112, %block_0_40433a ], [ %t180, %block_0_40437a ]
  %t117 = phi i64 [ %t107, %block_0_40433a ], [ %t177, %block_0_40437a ]
  %t118 = phi i512 [ %t108, %block_0_40433a ], [ %t178, %block_0_40437a ]
  br label %block_0_404345
block_0_404345:
  %t119 = phi i64 [ 6510056, %block_0_40432a ], [ %t113, %block_0_404342 ]
  %t120 = phi i64 [ %t84, %block_0_40432a ], [ %t114, %block_0_404342 ]
  %t121 = phi i64 [ %t90, %block_0_40432a ], [ %t116, %block_0_404342 ]
  %t122 = phi i64 [ %t85, %block_0_40432a ], [ %t115, %block_0_404342 ]
  %t123 = phi i64 [ %t86, %block_0_40432a ], [ %t116, %block_0_404342 ]
  %t124 = phi i64 [ %t87, %block_0_40432a ], [ %t117, %block_0_404342 ]
  %t125 = phi i512 [ %t88, %block_0_40432a ], [ %t118, %block_0_404342 ]
  ; r119 := (eq r114 (0x6355e8 : bv 64))
  %t126 = icmp eq i64 %t121, 6510056
  br i1 %t126, label %block_0_404382, label %block_0_40434e
block_0_40434e:
  %t127 = phi i64 [ %t119, %block_0_404345 ]
  %t128 = phi i64 [ %t121, %block_0_404345 ]
  %t129 = phi i64 [ %t122, %block_0_404345 ]
  %t130 = phi i64 [ %t123, %block_0_404345 ]
  %t131 = phi i64 [ %t124, %block_0_404345 ]
  %t132 = phi i512 [ %t125, %block_0_404345 ]
  ; r126 := (bv_add r121 (0x28 : bv 64))
  %t133 = add i64 %t128, 40
  ; r127 := (read r126 (bv 64))
  %t134 = inttoptr i64 %t133 to i64*
  %t135 = load i64, i64* %t134
  ; r128 := (bv_ult r122 r127)
  %t136 = icmp ult i64 %t129, %t135
  ; r129 := (eq r122 r127)
  %t137 = icmp eq i64 %t129, %t135
  ; r130 := (bv_ule r127 r122)
  %t138 = icmp ule i64 %t135, %t129
  ; r131 := (not r129)
  %t139 = icmp eq i1 %t137, 0
  ; r132 := (and r130 r131)
  %t140 = and i1 %t138, %t139
  ; r133 := (mux r132 (0x1 : bv 8) (0x0 : bv 8))
  %t141 = select i1 %t140, i8 1, i8 0
  ; r134 := (mux r128 (0x1 : bv 8) (0x0 : bv 8))
  %t142 = select i1 %t136, i8 1, i8 0
  ; r135 := (uext r134 32)
  %t143 = zext i8 %t142 to i32
  ; r136 := (uext r133 32)
  %t144 = zext i8 %t141 to i32
  ; r137 := (bv_sub r136 r135)
  %t145 = sub i32 %t144, %t143
  ; r138 := (eq r136 r135)
  %t146 = icmp eq i32 %t144, %t143
  ; r139 := (uext r137 64)
  %t147 = zext i32 %t145 to i64
  br i1 %t146, label %block_0_404369, label %block_0_404375
block_0_404369:
  %t148 = phi i64 [ %t147, %block_0_40434e ]
  %t149 = phi i64 [ %t127, %block_0_40434e ]
  %t150 = phi i64 [ %t128, %block_0_40434e ]
  %t151 = phi i64 [ %t129, %block_0_40434e ]
  %t152 = phi i64 [ %t130, %block_0_40434e ]
  %t153 = phi i64 [ %t131, %block_0_40434e ]
  %t154 = phi i512 [ %t132, %block_0_40434e ]
  ; r147 := (bv_add r142 (0x20 : bv 64))
  %t155 = add i64 %t150, 32
  ; r148 := (read r147 (bv 64))
  %t156 = inttoptr i64 %t155 to i64*
  %t157 = load i64, i64* %t156
  ; r149 := (eq r148 (0x0 : bv 64))
  %t158 = icmp eq i64 %t157, 0
  ; r150 := (mux r149 (0x0 : bv 8) (0x1 : bv 8))
  %t159 = select i1 %t158, i8 0, i8 1
  ; r151 := (uext r150 32)
  %t160 = zext i8 %t159 to i32
  ; r152 := (bv_sub (0x0 : bv 32) r151)
  %t161 = sub i32 0, %t160
  ; r153 := (uext r152 64)
  %t162 = zext i32 %t161 to i64
  br label %block_0_404375
block_0_404375:
  %t163 = phi i64 [ %t147, %block_0_40434e ], [ %t162, %block_0_404369 ]
  %t164 = phi i64 [ %t127, %block_0_40434e ], [ %t149, %block_0_404369 ]
  %t165 = phi i64 [ %t147, %block_0_40434e ], [ %t148, %block_0_404369 ]
  %t166 = phi i64 [ %t128, %block_0_40434e ], [ %t150, %block_0_404369 ]
  %t167 = phi i64 [ %t129, %block_0_40434e ], [ %t151, %block_0_404369 ]
  %t168 = phi i64 [ %t130, %block_0_40434e ], [ %t152, %block_0_404369 ]
  %t169 = phi i64 [ %t131, %block_0_40434e ], [ %t153, %block_0_404369 ]
  %t170 = phi i512 [ %t132, %block_0_40434e ], [ %t154, %block_0_404369 ]
  ; r162 := (trunc r154 32)
  %t171 = trunc i64 %t163 to i32
  ; r163 := (bv_slt r162 (0x0 : bv 32))
  %t172 = icmp slt i32 %t171, 0
  ; r164 := (eq r162 (0x0 : bv 32))
  %t173 = icmp eq i32 %t171, 0
  br i1 %t172, label %block_0_40437a, label %block_0_404338
block_0_40437a:
  %t174 = phi i64 [ %t165, %block_0_404375 ]
  %t175 = phi i64 [ %t166, %block_0_404375 ]
  %t176 = phi i64 [ %t167, %block_0_404375 ]
  %t177 = phi i64 [ %t169, %block_0_404375 ]
  %t178 = phi i512 [ %t170, %block_0_404375 ]
  ; r170 := (read r166 (bv 64))
  %t179 = inttoptr i64 %t175 to i64*
  %t180 = load i64, i64* %t179
  br label %block_0_404342
block_0_404382:
  %t181 = phi i64 [ %t119, %block_0_404345 ]
  %t182 = phi i64 [ %t120, %block_0_404345 ]
  %t183 = phi i64 [ %t122, %block_0_404345 ]
  %t184 = phi i64 [ %t123, %block_0_404345 ]
  %t185 = phi i64 [ %t124, %block_0_404345 ]
  %t186 = phi i512 [ %t125, %block_0_404345 ]
  ; r177 := (eq r171 (0x6355e8 : bv 64))
  %t187 = icmp eq i64 %t181, 6510056
  br i1 %t187, label %block_0_404468, label %block_0_40438f
block_0_40438f:
  %t188 = phi i64 [ %t181, %block_0_404382 ]
  %t189 = phi i64 [ %t182, %block_0_404382 ]
  %t190 = phi i64 [ %t183, %block_0_404382 ]
  %t191 = phi i64 [ %t184, %block_0_404382 ]
  %t192 = phi i64 [ %t185, %block_0_404382 ]
  %t193 = phi i512 [ %t186, %block_0_404382 ]
  br label %block_0_404392
block_0_404392:
  %t194 = phi i64 [ %t92, %block_0_404338 ], [ %t189, %block_0_40438f ]
  %t195 = phi i64 [ %t93, %block_0_404338 ], [ %t188, %block_0_40438f ]
  %t196 = phi i64 [ %t94, %block_0_404338 ], [ %t190, %block_0_40438f ]
  %t197 = phi i64 [ %t95, %block_0_404338 ], [ %t191, %block_0_40438f ]
  %t198 = phi i64 [ %t96, %block_0_404338 ], [ %t192, %block_0_40438f ]
  %t199 = phi i512 [ %t100, %block_0_404338 ], [ %t193, %block_0_40438f ]
  ; r190 := (eq r185 (0x0 : bv 64))
  %t200 = icmp eq i64 %t195, 0
  br i1 %t200, label %block_0_404468, label %block_0_40439b
block_0_40439b:
  %t201 = phi i64 [ %t194, %block_0_404392 ]
  %t202 = phi i64 [ %t195, %block_0_404392 ]
  %t203 = phi i64 [ %t196, %block_0_404392 ]
  %t204 = phi i64 [ %t197, %block_0_404392 ]
  %t205 = phi i64 [ %t198, %block_0_404392 ]
  %t206 = phi i512 [ %t199, %block_0_404392 ]
  ; r197 := (bv_add r192 (0x20 : bv 64))
  %t207 = add i64 %t202, 32
  ; r198 := (read r197 (bv 64))
  %t208 = inttoptr i64 %t207 to i64*
  %t209 = load i64, i64* %t208
  ; r199 := (bitcast r196 (vec 8 double))
  %t210 = bitcast i512 %t206 to <8 x double>
  ; r200 := call extent_tree_szad_remove((0x6355e0 : bv 64), r192, r191, r199)
  %t211 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @extent_tree_szad_remove(i64 6510048, i64 %t202, i64 %t201, <8 x double> %t210)
  ; r201 := (tuple_field r200 0)
  %t212 = extractvalue { i64, i64, <8 x double> } %t211, 0
  ; r202 := (tuple_field r200 1)
  %t213 = extractvalue { i64, i64, <8 x double> } %t211, 1
  ; r203 := (tuple_field r200 2)
  %t214 = extractvalue { i64, i64, <8 x double> } %t211, 2
  ; r204 := (bitcast r203 (bv 512))
  %t215 = bitcast <8 x double> %t214 to i512
  br label %block_0_4043ac
block_0_4043ac:
  %t216 = phi i64 [ %t213, %block_0_40439b ]
  %t217 = phi i64 [ %t202, %block_0_40439b ]
  %t218 = phi i64 [ %t203, %block_0_40439b ]
  %t219 = phi i64 [ %t204, %block_0_40439b ]
  %t220 = phi i64 [ %t209, %block_0_40439b ]
  %t221 = phi i64 [ %t205, %block_0_40439b ]
  %t222 = phi i512 [ %t215, %block_0_40439b ]
  ; r212 := (bv_add r206 (0x28 : bv 64))
  %t223 = add i64 %t217, 40
  ; r213 := (read r212 (bv 64))
  %t224 = inttoptr i64 %t223 to i64*
  %t225 = load i64, i64* %t224
  ; r214 := (eq r207 r213)
  %t226 = icmp eq i64 %t218, %t225
  br i1 %t226, label %block_0_404551, label %block_0_4043b6
block_0_4043b6:
  %t227 = phi i64 [ %t217, %block_0_4043ac ]
  %t228 = phi i64 [ %t218, %block_0_4043ac ]
  %t229 = phi i64 [ %t219, %block_0_4043ac ]
  %t230 = phi i64 [ %t220, %block_0_4043ac ]
  %t231 = phi i64 [ %t221, %block_0_4043ac ]
  %t232 = phi i512 [ %t222, %block_0_4043ac ]
  ; r221 := (bv_add r215 (0x20 : bv 64))
  %t233 = add i64 %t227, 32
  ; r222 := (read r221 (bv 64))
  %t234 = inttoptr i64 %t233 to i64*
  %t235 = load i64, i64* %t234
  ; r223 := (bv_add r222 r216)
  %t236 = add i64 %t235, %t228
  ; write r221 r223
  %t237 = inttoptr i64 %t233 to i64*
  store i64 %t236, i64* %t237
  ; r224 := (bv_add r215 (0x28 : bv 64))
  %t238 = add i64 %t227, 40
  ; r225 := (read r224 (bv 64))
  %t239 = inttoptr i64 %t238 to i64*
  %t240 = load i64, i64* %t239
  ; r226 := (read r224 (bv 64))
  %t241 = inttoptr i64 %t238 to i64*
  %t242 = load i64, i64* %t241
  ; r227 := (bv_sub r225 r216)
  %t243 = sub i64 %t240, %t228
  ; write r224 r227
  %t244 = inttoptr i64 %t238 to i64*
  store i64 %t243, i64* %t244
  ; r228 := (bitcast r220 (vec 8 double))
  %t245 = bitcast i512 %t232 to <8 x double>
  ; r229 := call extent_tree_szad_insert((0x6355e0 : bv 64), r215, r228)
  %t246 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @extent_tree_szad_insert(i64 6510048, i64 %t227, <8 x double> %t245)
  ; r230 := (tuple_field r229 0)
  %t247 = extractvalue { i64, i64, <8 x double> } %t246, 0
  ; r231 := (tuple_field r229 1)
  %t248 = extractvalue { i64, i64, <8 x double> } %t246, 1
  ; r232 := (tuple_field r229 2)
  %t249 = extractvalue { i64, i64, <8 x double> } %t246, 2
  ; r233 := (bitcast r232 (bv 512))
  %t250 = bitcast <8 x double> %t249 to i512
  br label %block_0_4043cb
block_0_4043cb:
  %t251 = phi i64 [ %t248, %block_0_4043b6 ], [ %t632, %block_0_404566 ]
  %t252 = phi i64 [ %t228, %block_0_4043b6 ], [ %t633, %block_0_404566 ]
  %t253 = phi i64 [ %t229, %block_0_4043b6 ], [ %t634, %block_0_404566 ]
  %t254 = phi i64 [ %t230, %block_0_4043b6 ], [ %t635, %block_0_404566 ]
  %t255 = phi i64 [ %t231, %block_0_4043b6 ], [ %t636, %block_0_404566 ]
  %t256 = phi i512 [ %t250, %block_0_4043b6 ], [ %t637, %block_0_404566 ]
  ; r240 := (read (0x6356e8 : bv 64) (bv 32))
  %t257 = inttoptr i64 6510312 to i32*
  %t258 = load i32, i32* %t257
  ; r241 := (eq r240 (0x0 : bv 32))
  %t259 = icmp eq i32 %t258, 0
  br i1 %t259, label %block_0_4043d9, label %block_0_404542
block_0_4043d9:
  %t260 = phi i64 [ %t251, %block_0_4043cb ], [ %t600, %block_0_40454c ]
  %t261 = phi i64 [ %t252, %block_0_4043cb ], [ %t601, %block_0_40454c ]
  %t262 = phi i64 [ %t253, %block_0_4043cb ], [ %t602, %block_0_40454c ]
  %t263 = phi i64 [ %t254, %block_0_4043cb ], [ %t603, %block_0_40454c ]
  %t264 = phi i64 [ %t255, %block_0_4043cb ], [ %t604, %block_0_40454c ]
  %t265 = phi i512 [ %t256, %block_0_4043cb ], [ %t605, %block_0_40454c ]
  ; r248 := (read r246 (bv 8))
  %t266 = inttoptr i64 %t264 to i8*
  %t267 = load i8, i8* %t266
  ; r249 := (eq r248 (0x0 : bv 8))
  %t268 = icmp eq i8 %t267, 0
  br i1 %t268, label %block_0_4043e4, label %block_0_404530
block_0_4043e4:
  %t269 = phi i64 [ %t260, %block_0_4043d9 ], [ %t582, %block_0_40453d ]
  %t270 = phi i64 [ %t261, %block_0_4043d9 ], [ %t583, %block_0_40453d ]
  %t271 = phi i64 [ %t262, %block_0_4043d9 ], [ %t584, %block_0_40453d ]
  %t272 = phi i64 [ %t263, %block_0_4043d9 ], [ %t585, %block_0_40453d ]
  %t273 = phi i64 [ %t264, %block_0_4043d9 ], [ %t586, %block_0_40453d ]
  %t274 = phi i512 [ %t265, %block_0_4043d9 ], [ %t587, %block_0_40453d ]
  ; r256 := (eq r253 (0x0 : bv 64))
  %t275 = icmp eq i64 %t272, 0
  br i1 %t275, label %block_0_404476, label %block_0_4043ed
block_0_4043ed:
  %t276 = phi i64 [ %t269, %block_0_4043e4 ]
  %t277 = phi i64 [ %t272, %block_0_4043e4 ]
  %t278 = phi i512 [ %t274, %block_0_4043e4 ]
  br label %block_0_4043f0
block_0_4043f0:
  %t279 = phi i64 [ %t63, %block_0_404305 ], [ %t276, %block_0_4043ed ], [ %t509, %block_0_4044e9 ], [ %t568, %block_0_40452b ]
  %t280 = phi i64 [ %t64, %block_0_404305 ], [ %t277, %block_0_4043ed ], [ 0, %block_0_4044e9 ], [ %t569, %block_0_40452b ]
  %t281 = phi i512 [ %t66, %block_0_404305 ], [ %t278, %block_0_4043ed ], [ %t510, %block_0_4044e9 ], [ %t570, %block_0_40452b ]
  ; r263 := (bitcast r262 (vec 8 double))
  %t282 = bitcast i512 %t281 to <8 x double>
  ; r264 := (tuple r261 r260 r263)
  %t283 = insertvalue { i64, i64, <8 x double> } undef, i64 %t280, 0
  %t284 = insertvalue { i64, i64, <8 x double> } %t283, i64 %t279, 1
  %t285 = insertvalue { i64, i64, <8 x double> } %t284, <8 x double> %t282, 2
  ret { i64, i64, <8 x double> } %t285
block_0_4043fe:
  %t286 = phi i64 [ %t13, %block_0_4042e9 ]
  %t287 = phi i64 [ %t14, %block_0_4042e9 ]
  %t288 = phi i512 [ %t15, %block_0_4042e9 ]
  %t289 = phi i512 [ %t16, %block_0_4042e9 ]
  %t290 = phi i512 [ %t17, %block_0_4042e9 ]
  %t291 = phi i512 [ %t18, %block_0_4042e9 ]
  %t292 = phi i512 [ %t19, %block_0_4042e9 ]
  %t293 = phi i512 [ %t20, %block_0_4042e9 ]
  %t294 = phi i512 [ %t21, %block_0_4042e9 ]
  %t295 = phi i512 [ %t22, %block_0_4042e9 ]
  ; r275 := (bitcast r267 (vec 8 double))
  %t296 = bitcast i512 %t288 to <8 x double>
  ; r276 := (bitcast r268 (vec 8 double))
  %t297 = bitcast i512 %t289 to <8 x double>
  ; r277 := (bitcast r269 (vec 8 double))
  %t298 = bitcast i512 %t290 to <8 x double>
  ; r278 := (bitcast r270 (vec 8 double))
  %t299 = bitcast i512 %t291 to <8 x double>
  ; r279 := (bitcast r271 (vec 8 double))
  %t300 = bitcast i512 %t292 to <8 x double>
  ; r280 := (bitcast r272 (vec 8 double))
  %t301 = bitcast i512 %t293 to <8 x double>
  ; r281 := (bitcast r273 (vec 8 double))
  %t302 = bitcast i512 %t294 to <8 x double>
  ; r282 := (bitcast r274 (vec 8 double))
  %t303 = bitcast i512 %t295 to <8 x double>
  ; r283 := call pages_map((0x0 : bv 64), r265, r275, r276, r277, r278, r279, r280, r281, r282)
  %t304 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pages_map(i64 0, i64 %t286, <8 x double> %t296, <8 x double> %t297, <8 x double> %t298, <8 x double> %t299, <8 x double> %t300, <8 x double> %t301, <8 x double> %t302, <8 x double> %t303)
  ; r284 := (tuple_field r283 0)
  %t305 = extractvalue { i64, i64, <8 x double> } %t304, 0
  ; r285 := (tuple_field r283 1)
  %t306 = extractvalue { i64, i64, <8 x double> } %t304, 1
  ; r286 := (tuple_field r283 2)
  %t307 = extractvalue { i64, i64, <8 x double> } %t304, 2
  ; r287 := (bitcast r286 (bv 512))
  %t308 = bitcast <8 x double> %t307 to i512
  br label %block_0_404408
block_0_404408:
  %t309 = phi i64 [ %t305, %block_0_4043fe ]
  %t310 = phi i64 [ %t306, %block_0_4043fe ]
  %t311 = phi i64 [ %t286, %block_0_4043fe ]
  %t312 = phi i64 [ %t287, %block_0_4043fe ]
  %t313 = phi i64 [ %t287, %block_0_4043fe ]
  %t314 = phi i512 [ %t308, %block_0_4043fe ]
  %t315 = phi i512 [ %t289, %block_0_4043fe ]
  %t316 = phi i512 [ %t290, %block_0_4043fe ]
  %t317 = phi i512 [ %t291, %block_0_4043fe ]
  %t318 = phi i512 [ %t292, %block_0_4043fe ]
  %t319 = phi i512 [ %t293, %block_0_4043fe ]
  %t320 = phi i512 [ %t294, %block_0_4043fe ]
  %t321 = phi i512 [ %t295, %block_0_4043fe ]
  ; r301 := (eq r288 (0x0 : bv 64))
  %t322 = icmp eq i64 %t309, 0
  br i1 %t322, label %block_0_40430f, label %block_0_404414
block_0_404414:
  %t323 = phi i64 [ %t309, %block_0_404408 ]
  %t324 = phi i64 [ %t310, %block_0_404408 ]
  %t325 = phi i64 [ %t311, %block_0_404408 ]
  %t326 = phi i64 [ %t312, %block_0_404408 ]
  %t327 = phi i64 [ %t313, %block_0_404408 ]
  %t328 = phi i512 [ %t314, %block_0_404408 ]
  %t329 = phi i512 [ %t315, %block_0_404408 ]
  %t330 = phi i512 [ %t316, %block_0_404408 ]
  %t331 = phi i512 [ %t317, %block_0_404408 ]
  %t332 = phi i512 [ %t318, %block_0_404408 ]
  %t333 = phi i512 [ %t319, %block_0_404408 ]
  %t334 = phi i512 [ %t320, %block_0_404408 ]
  %t335 = phi i512 [ %t321, %block_0_404408 ]
  ; r315 := (read (0x635518 : bv 64) (bv 64))
  %t336 = inttoptr i64 6509848 to i64*
  %t337 = load i64, i64* %t336
  ; r316 := (bv_and r302 r315)
  %t338 = and i64 %t323, %t337
  ; r317 := (eq r316 (0x0 : bv 64))
  %t339 = icmp eq i64 %t338, 0
  br i1 %t339, label %block_0_404305, label %block_0_404424
block_0_404424:
  %t340 = phi i64 [ %t323, %block_0_404414 ]
  %t341 = phi i64 [ %t338, %block_0_404414 ]
  %t342 = phi i64 [ %t325, %block_0_404414 ]
  %t343 = phi i64 [ %t326, %block_0_404414 ]
  %t344 = phi i64 [ %t327, %block_0_404414 ]
  %t345 = phi i512 [ %t328, %block_0_404414 ]
  %t346 = phi i512 [ %t329, %block_0_404414 ]
  %t347 = phi i512 [ %t330, %block_0_404414 ]
  %t348 = phi i512 [ %t331, %block_0_404414 ]
  %t349 = phi i512 [ %t332, %block_0_404414 ]
  %t350 = phi i512 [ %t333, %block_0_404414 ]
  %t351 = phi i512 [ %t334, %block_0_404414 ]
  %t352 = phi i512 [ %t335, %block_0_404414 ]
  ; r331 := (read (0x635510 : bv 64) (bv 64))
  %t353 = inttoptr i64 6509840 to i64*
  %t354 = load i64, i64* %t353
  ; r332 := (bv_add r318 r320)
  %t355 = add i64 %t340, %t342
  ; write (0x6356b8 : bv 64) (0x1 : bv 8)
  %t356 = inttoptr i64 6510264 to i8*
  store i8 1, i8* %t356
  ; r333 := (bv_sub r331 r319)
  %t357 = sub i64 %t354, %t341
  ; r334 := (bitcast r323 (vec 8 double))
  %t358 = bitcast i512 %t345 to <8 x double>
  ; r335 := (bitcast r324 (vec 8 double))
  %t359 = bitcast i512 %t346 to <8 x double>
  ; r336 := (bitcast r325 (vec 8 double))
  %t360 = bitcast i512 %t347 to <8 x double>
  ; r337 := (bitcast r326 (vec 8 double))
  %t361 = bitcast i512 %t348 to <8 x double>
  ; r338 := (bitcast r327 (vec 8 double))
  %t362 = bitcast i512 %t349 to <8 x double>
  ; r339 := (bitcast r328 (vec 8 double))
  %t363 = bitcast i512 %t350 to <8 x double>
  ; r340 := (bitcast r329 (vec 8 double))
  %t364 = bitcast i512 %t351 to <8 x double>
  ; r341 := (bitcast r330 (vec 8 double))
  %t365 = bitcast i512 %t352 to <8 x double>
  ; r342 := call pages_map(r332, r333, r334, r335, r336, r337, r338, r339, r340, r341)
  %t366 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pages_map(i64 %t355, i64 %t357, <8 x double> %t358, <8 x double> %t359, <8 x double> %t360, <8 x double> %t361, <8 x double> %t362, <8 x double> %t363, <8 x double> %t364, <8 x double> %t365)
  ; r343 := (tuple_field r342 0)
  %t367 = extractvalue { i64, i64, <8 x double> } %t366, 0
  ; r344 := (tuple_field r342 1)
  %t368 = extractvalue { i64, i64, <8 x double> } %t366, 1
  ; r345 := (tuple_field r342 2)
  %t369 = extractvalue { i64, i64, <8 x double> } %t366, 2
  ; r346 := (bitcast r345 (bv 512))
  %t370 = bitcast <8 x double> %t369 to i512
  br label %block_0_40443e
block_0_40443e:
  %t371 = phi i64 [ %t367, %block_0_404424 ]
  %t372 = phi i64 [ %t341, %block_0_404424 ]
  %t373 = phi i64 [ %t342, %block_0_404424 ]
  %t374 = phi i64 [ %t343, %block_0_404424 ]
  %t375 = phi i64 [ %t340, %block_0_404424 ]
  %t376 = phi i64 [ %t344, %block_0_404424 ]
  %t377 = phi i512 [ %t346, %block_0_404424 ]
  %t378 = phi i512 [ %t347, %block_0_404424 ]
  %t379 = phi i512 [ %t348, %block_0_404424 ]
  %t380 = phi i512 [ %t349, %block_0_404424 ]
  %t381 = phi i512 [ %t350, %block_0_404424 ]
  %t382 = phi i512 [ %t351, %block_0_404424 ]
  %t383 = phi i512 [ %t352, %block_0_404424 ]
  ; r360 := (eq r347 (0x0 : bv 64))
  %t384 = icmp eq i64 %t371, 0
  br i1 %t384, label %block_0_404594, label %block_0_404447
block_0_404447:
  %t385 = phi i64 [ %t372, %block_0_40443e ]
  %t386 = phi i64 [ %t373, %block_0_40443e ]
  %t387 = phi i64 [ %t374, %block_0_40443e ]
  %t388 = phi i64 [ %t375, %block_0_40443e ]
  %t389 = phi i64 [ %t376, %block_0_40443e ]
  ; r366 := (read (0x635510 : bv 64) (bv 64))
  %t390 = inttoptr i64 6509840 to i64*
  %t391 = load i64, i64* %t390
  ; r367 := (bv_sub r366 r361)
  %t392 = sub i64 %t391, %t385
  ; r368 := call pages_unmap(r364, r367)
  %t393 = call { i64, i64, <8 x double> } (i64, i64) @pages_unmap(i64 %t388, i64 %t392)
  ; r369 := (tuple_field r368 0)
  %t394 = extractvalue { i64, i64, <8 x double> } %t393, 0
  ; r370 := (tuple_field r368 1)
  %t395 = extractvalue { i64, i64, <8 x double> } %t393, 1
  ; r371 := (tuple_field r368 2)
  %t396 = extractvalue { i64, i64, <8 x double> } %t393, 2
  ; r372 := (bitcast r371 (bv 512))
  %t397 = bitcast <8 x double> %t396 to i512
  br label %block_0_404459
block_0_404459:
  %t398 = phi i64 [ %t395, %block_0_404447 ]
  %t399 = phi i64 [ %t385, %block_0_404447 ]
  %t400 = phi i64 [ %t386, %block_0_404447 ]
  %t401 = phi i64 [ %t387, %block_0_404447 ]
  %t402 = phi i64 [ %t388, %block_0_404447 ]
  %t403 = phi i64 [ %t389, %block_0_404447 ]
  %t404 = phi i512 [ %t397, %block_0_404447 ]
  ; r380 := (read (0x635510 : bv 64) (bv 64))
  %t405 = inttoptr i64 6509840 to i64*
  %t406 = load i64, i64* %t405
  ; r381 := (bv_add r377 r380)
  %t407 = add i64 %t402, %t406
  ; r382 := (bv_sub r381 r374)
  %t408 = sub i64 %t407, %t399
  br label %block_0_404300
block_0_404468:
  %t409 = phi i64 [ %t182, %block_0_404382 ], [ %t194, %block_0_404392 ]
  %t410 = phi i64 [ %t183, %block_0_404382 ], [ %t196, %block_0_404392 ]
  %t411 = phi i64 [ %t184, %block_0_404382 ], [ %t197, %block_0_404392 ]
  %t412 = phi i64 [ %t185, %block_0_404382 ], [ %t198, %block_0_404392 ]
  %t413 = phi i512 [ %t186, %block_0_404382 ], [ %t199, %block_0_404392 ]
  ; r388 := (read (0x6356e8 : bv 64) (bv 32))
  %t414 = inttoptr i64 6510312 to i32*
  %t415 = load i32, i32* %t414
  ; r389 := (eq r388 (0x0 : bv 32))
  %t416 = icmp eq i32 %t415, 0
  br i1 %t416, label %block_0_404476, label %block_0_40450f
block_0_404476:
  %t417 = phi i64 [ %t269, %block_0_4043e4 ], [ %t409, %block_0_404468 ], [ %t554, %block_0_404519 ]
  %t418 = phi i64 [ %t270, %block_0_4043e4 ], [ %t410, %block_0_404468 ], [ %t555, %block_0_404519 ]
  %t419 = phi i64 [ %t271, %block_0_4043e4 ], [ %t411, %block_0_404468 ], [ %t556, %block_0_404519 ]
  %t420 = phi i64 [ %t273, %block_0_4043e4 ], [ %t412, %block_0_404468 ], [ %t557, %block_0_404519 ]
  %t421 = phi i512 [ %t274, %block_0_4043e4 ], [ %t413, %block_0_404468 ], [ %t558, %block_0_404519 ]
  ; r395 := (bv_slt r391 (0x0 : bv 64))
  %t422 = icmp slt i64 %t418, 0
  br i1 %t422, label %block_0_4044e9, label %block_0_40447b
block_0_40447b:
  %t423 = phi i64 [ %t417, %block_0_404476 ]
  %t424 = phi i64 [ %t418, %block_0_404476 ]
  %t425 = phi i64 [ %t419, %block_0_404476 ]
  %t426 = phi i64 [ %t420, %block_0_404476 ]
  %t427 = phi i512 [ %t421, %block_0_404476 ]
  ; r401 := (read (0x6356e8 : bv 64) (bv 32))
  %t428 = inttoptr i64 6510312 to i32*
  %t429 = load i32, i32* %t428
  ; r402 := (eq r401 (0x0 : bv 32))
  %t430 = icmp eq i32 %t429, 0
  br i1 %t430, label %block_0_404487, label %block_0_404500
block_0_404487:
  %t431 = phi i64 [ %t423, %block_0_40447b ], [ %t538, %block_0_40450a ]
  %t432 = phi i64 [ %t424, %block_0_40447b ], [ %t539, %block_0_40450a ]
  %t433 = phi i64 [ %t425, %block_0_40447b ], [ %t540, %block_0_40450a ]
  %t434 = phi i64 [ %t426, %block_0_40447b ], [ %t541, %block_0_40450a ]
  %t435 = phi i512 [ %t427, %block_0_40447b ], [ %t542, %block_0_40450a ]
  ; r408 := (read (0x6355c8 : bv 64) (bv 64))
  %t436 = inttoptr i64 6510024 to i64*
  %t437 = load i64, i64* %t436
  ; r409 := (eq r408 (0xffffffffffffffff : bv 64))
  %t438 = icmp eq i64 %t437, 18446744073709551615
  br i1 %t438, label %block_0_4044dd, label %block_0_404491
block_0_404491:
  %t439 = phi i64 [ %t431, %block_0_404487 ], [ %t497, %block_0_4044d7 ]
  %t440 = phi i64 [ %t432, %block_0_404487 ], [ %t498, %block_0_4044d7 ]
  %t441 = phi i64 [ %t433, %block_0_404487 ], [ %t499, %block_0_4044d7 ]
  %t442 = phi i64 [ %t434, %block_0_404487 ], [ %t500, %block_0_4044d7 ]
  %t443 = phi i512 [ %t435, %block_0_404487 ], [ %t501, %block_0_4044d7 ]
  ; r415 := (bitcast r414 (vec 8 double))
  %t444 = bitcast i512 %t443 to <8 x double>
  ; r416 := call sbrk((0x0 : bv 64), r412, r410, r415)
  %t445 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @sbrk(i64 0, i64 %t441, i64 %t439, <8 x double> %t444)
  ; r417 := (tuple_field r416 0)
  %t446 = extractvalue { i64, i64, <8 x double> } %t445, 0
  ; r418 := (tuple_field r416 1)
  %t447 = extractvalue { i64, i64, <8 x double> } %t445, 1
  ; r419 := (tuple_field r416 2)
  %t448 = extractvalue { i64, i64, <8 x double> } %t445, 2
  ; r420 := (bitcast r419 (bv 512))
  %t449 = bitcast <8 x double> %t448 to i512
  br label %block_0_40449b
block_0_40449b:
  %t450 = phi i64 [ %t446, %block_0_404491 ]
  %t451 = phi i64 [ %t447, %block_0_404491 ]
  %t452 = phi i64 [ %t440, %block_0_404491 ]
  %t453 = phi i64 [ %t441, %block_0_404491 ]
  %t454 = phi i64 [ %t442, %block_0_404491 ]
  %t455 = phi i512 [ %t449, %block_0_404491 ]
  ; write (0x6355d0 : bv 64) r421
  %t456 = inttoptr i64 6510032 to i64*
  store i64 %t450, i64* %t456
  ; r427 := (read (0x635518 : bv 64) (bv 64))
  %t457 = inttoptr i64 6509848 to i64*
  %t458 = load i64, i64* %t457
  ; r428 := (bv_and r421 r427)
  %t459 = and i64 %t450, %t458
  ; r429 := (bv_sub r423 r428)
  %t460 = sub i64 %t452, %t459
  ; r430 := (eq r423 r429)
  %t461 = icmp eq i64 %t452, %t460
  br i1 %t461, label %block_0_4044bb, label %block_0_4044b4
block_0_4044b4:
  %t462 = phi i64 [ %t451, %block_0_40449b ]
  %t463 = phi i64 [ %t460, %block_0_40449b ]
  %t464 = phi i64 [ %t452, %block_0_40449b ]
  %t465 = phi i64 [ %t453, %block_0_40449b ]
  %t466 = phi i64 [ %t450, %block_0_40449b ]
  %t467 = phi i64 [ %t454, %block_0_40449b ]
  %t468 = phi i512 [ %t455, %block_0_40449b ]
  ; r438 := (bv_add r432 r435)
  %t469 = add i64 %t463, %t466
  ; r439 := (bv_add r432 r433)
  %t470 = add i64 %t463, %t464
  br label %block_0_4044bb
block_0_4044bb:
  %t471 = phi i64 [ %t451, %block_0_40449b ], [ %t462, %block_0_4044b4 ]
  %t472 = phi i64 [ %t460, %block_0_40449b ], [ %t470, %block_0_4044b4 ]
  %t473 = phi i64 [ %t452, %block_0_40449b ], [ %t464, %block_0_4044b4 ]
  %t474 = phi i64 [ %t453, %block_0_40449b ], [ %t465, %block_0_4044b4 ]
  %t475 = phi i64 [ %t450, %block_0_40449b ], [ %t469, %block_0_4044b4 ]
  %t476 = phi i64 [ %t454, %block_0_40449b ], [ %t467, %block_0_4044b4 ]
  %t477 = phi i512 [ %t455, %block_0_40449b ], [ %t468, %block_0_4044b4 ]
  ; r447 := (bitcast r446 (vec 8 double))
  %t478 = bitcast i512 %t477 to <8 x double>
  ; r448 := call sbrk(r441, r443, r440, r447)
  %t479 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @sbrk(i64 %t472, i64 %t474, i64 %t471, <8 x double> %t478)
  ; r449 := (tuple_field r448 0)
  %t480 = extractvalue { i64, i64, <8 x double> } %t479, 0
  ; r450 := (tuple_field r448 1)
  %t481 = extractvalue { i64, i64, <8 x double> } %t479, 1
  ; r451 := (tuple_field r448 2)
  %t482 = extractvalue { i64, i64, <8 x double> } %t479, 2
  ; r452 := (bitcast r451 (bv 512))
  %t483 = bitcast <8 x double> %t482 to i512
  br label %block_0_4044c3
block_0_4044c3:
  %t484 = phi i64 [ %t480, %block_0_4044bb ]
  %t485 = phi i64 [ %t481, %block_0_4044bb ]
  %t486 = phi i64 [ %t472, %block_0_4044bb ]
  %t487 = phi i64 [ %t473, %block_0_4044bb ]
  %t488 = phi i64 [ %t474, %block_0_4044bb ]
  %t489 = phi i64 [ %t475, %block_0_4044bb ]
  %t490 = phi i64 [ %t476, %block_0_4044bb ]
  %t491 = phi i512 [ %t483, %block_0_4044bb ]
  ; r461 := (read (0x6355d0 : bv 64) (bv 64))
  %t492 = inttoptr i64 6510032 to i64*
  %t493 = load i64, i64* %t492
  ; r462 := (eq r453 r461)
  %t494 = icmp eq i64 %t484, %t493
  ; write (0x6355c8 : bv 64) r453
  %t495 = inttoptr i64 6510024 to i64*
  store i64 %t484, i64* %t495
  br i1 %t494, label %block_0_40456b, label %block_0_4044d7
block_0_4044d7:
  %t496 = phi i64 [ %t484, %block_0_4044c3 ]
  %t497 = phi i64 [ %t485, %block_0_4044c3 ]
  %t498 = phi i64 [ %t487, %block_0_4044c3 ]
  %t499 = phi i64 [ %t488, %block_0_4044c3 ]
  %t500 = phi i64 [ %t490, %block_0_4044c3 ]
  %t501 = phi i512 [ %t491, %block_0_4044c3 ]
  ; r469 := (eq r463 (0xffffffffffffffff : bv 64))
  %t502 = icmp eq i64 %t496, 18446744073709551615
  br i1 %t502, label %block_0_4044dd, label %block_0_404491
block_0_4044dd:
  %t503 = phi i64 [ %t431, %block_0_404487 ], [ %t497, %block_0_4044d7 ]
  %t504 = phi i64 [ %t433, %block_0_404487 ], [ %t499, %block_0_4044d7 ]
  %t505 = phi i512 [ %t435, %block_0_404487 ], [ %t501, %block_0_4044d7 ]
  ; r473 := (read (0x6356e8 : bv 64) (bv 32))
  %t506 = inttoptr i64 6510312 to i32*
  %t507 = load i32, i32* %t506
  ; r474 := (eq r473 (0x0 : bv 32))
  %t508 = icmp eq i32 %t507, 0
  br i1 %t508, label %block_0_4044e9, label %block_0_40451e
block_0_4044e9:
  %t509 = phi i64 [ %t68, %block_0_40430f ], [ %t417, %block_0_404476 ], [ %t503, %block_0_4044dd ]
  %t510 = phi i512 [ %t72, %block_0_40430f ], [ %t421, %block_0_404476 ], [ %t505, %block_0_4044dd ]
  br label %block_0_4043f0
block_0_4044f1:
  %t511 = phi i64 [ %t76, %block_0_40431c ]
  %t512 = phi i64 [ %t77, %block_0_40431c ]
  %t513 = phi i64 [ %t78, %block_0_40431c ]
  %t514 = phi i64 [ %t79, %block_0_40431c ]
  %t515 = phi i512 [ %t80, %block_0_40431c ]
  ; r482 := (bitcast r481 (vec 8 double))
  %t516 = bitcast i512 %t515 to <8 x double>
  ; r483 := call _spinlock_stub((0x6355a0 : bv 64), r479, r477, r482)
  %t517 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6509984, i64 %t513, i64 %t511, <8 x double> %t516)
  ; r484 := (tuple_field r483 0)
  %t518 = extractvalue { i64, i64, <8 x double> } %t517, 0
  ; r485 := (tuple_field r483 1)
  %t519 = extractvalue { i64, i64, <8 x double> } %t517, 1
  ; r486 := (tuple_field r483 2)
  %t520 = extractvalue { i64, i64, <8 x double> } %t517, 2
  ; r487 := (bitcast r486 (bv 512))
  %t521 = bitcast <8 x double> %t520 to i512
  br label %block_0_4044fb
block_0_4044fb:
  %t522 = phi i64 [ %t519, %block_0_4044f1 ]
  %t523 = phi i64 [ %t512, %block_0_4044f1 ]
  %t524 = phi i64 [ %t513, %block_0_4044f1 ]
  %t525 = phi i64 [ %t514, %block_0_4044f1 ]
  %t526 = phi i512 [ %t521, %block_0_4044f1 ]
  br label %block_0_40432a
block_0_404500:
  %t527 = phi i64 [ %t423, %block_0_40447b ]
  %t528 = phi i64 [ %t424, %block_0_40447b ]
  %t529 = phi i64 [ %t425, %block_0_40447b ]
  %t530 = phi i64 [ %t426, %block_0_40447b ]
  %t531 = phi i512 [ %t427, %block_0_40447b ]
  ; r498 := (bitcast r497 (vec 8 double))
  %t532 = bitcast i512 %t531 to <8 x double>
  ; r499 := call _spinlock_stub((0x6355a0 : bv 64), r495, r493, r498)
  %t533 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6509984, i64 %t529, i64 %t527, <8 x double> %t532)
  ; r500 := (tuple_field r499 0)
  %t534 = extractvalue { i64, i64, <8 x double> } %t533, 0
  ; r501 := (tuple_field r499 1)
  %t535 = extractvalue { i64, i64, <8 x double> } %t533, 1
  ; r502 := (tuple_field r499 2)
  %t536 = extractvalue { i64, i64, <8 x double> } %t533, 2
  ; r503 := (bitcast r502 (bv 512))
  %t537 = bitcast <8 x double> %t536 to i512
  br label %block_0_40450a
block_0_40450a:
  %t538 = phi i64 [ %t535, %block_0_404500 ]
  %t539 = phi i64 [ %t528, %block_0_404500 ]
  %t540 = phi i64 [ %t529, %block_0_404500 ]
  %t541 = phi i64 [ %t530, %block_0_404500 ]
  %t542 = phi i512 [ %t537, %block_0_404500 ]
  br label %block_0_404487
block_0_40450f:
  %t543 = phi i64 [ %t409, %block_0_404468 ]
  %t544 = phi i64 [ %t410, %block_0_404468 ]
  %t545 = phi i64 [ %t411, %block_0_404468 ]
  %t546 = phi i64 [ %t412, %block_0_404468 ]
  %t547 = phi i512 [ %t413, %block_0_404468 ]
  ; r514 := (bitcast r513 (vec 8 double))
  %t548 = bitcast i512 %t547 to <8 x double>
  ; r515 := call _spinunlock_stub((0x6355a0 : bv 64), r511, r509, r514)
  %t549 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6509984, i64 %t545, i64 %t543, <8 x double> %t548)
  ; r516 := (tuple_field r515 0)
  %t550 = extractvalue { i64, i64, <8 x double> } %t549, 0
  ; r517 := (tuple_field r515 1)
  %t551 = extractvalue { i64, i64, <8 x double> } %t549, 1
  ; r518 := (tuple_field r515 2)
  %t552 = extractvalue { i64, i64, <8 x double> } %t549, 2
  ; r519 := (bitcast r518 (bv 512))
  %t553 = bitcast <8 x double> %t552 to i512
  br label %block_0_404519
block_0_404519:
  %t554 = phi i64 [ %t551, %block_0_40450f ]
  %t555 = phi i64 [ %t544, %block_0_40450f ]
  %t556 = phi i64 [ %t545, %block_0_40450f ]
  %t557 = phi i64 [ %t546, %block_0_40450f ]
  %t558 = phi i512 [ %t553, %block_0_40450f ]
  br label %block_0_404476
block_0_40451e:
  %t559 = phi i64 [ %t503, %block_0_4044dd ]
  %t560 = phi i64 [ %t504, %block_0_4044dd ]
  %t561 = phi i512 [ %t505, %block_0_4044dd ]
  ; r528 := (bitcast r527 (vec 8 double))
  %t562 = bitcast i512 %t561 to <8 x double>
  ; r529 := call _spinunlock_stub((0x6355a0 : bv 64), r526, r525, r528)
  %t563 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6509984, i64 %t560, i64 %t559, <8 x double> %t562)
  ; r530 := (tuple_field r529 0)
  %t564 = extractvalue { i64, i64, <8 x double> } %t563, 0
  ; r531 := (tuple_field r529 1)
  %t565 = extractvalue { i64, i64, <8 x double> } %t563, 1
  ; r532 := (tuple_field r529 2)
  %t566 = extractvalue { i64, i64, <8 x double> } %t563, 2
  ; r533 := (bitcast r532 (bv 512))
  %t567 = bitcast <8 x double> %t566 to i512
  br label %block_0_40452b
block_0_40452b:
  %t568 = phi i64 [ %t565, %block_0_40451e ]
  %t569 = phi i64 [ 0, %block_0_40451e ]
  %t570 = phi i512 [ %t567, %block_0_40451e ]
  br label %block_0_4043f0
block_0_404530:
  %t571 = phi i64 [ %t261, %block_0_4043d9 ]
  %t572 = phi i64 [ %t262, %block_0_4043d9 ]
  %t573 = phi i64 [ %t263, %block_0_4043d9 ]
  %t574 = phi i64 [ %t264, %block_0_4043d9 ]
  %t575 = phi i512 [ %t265, %block_0_4043d9 ]
  ; r542 := (bitcast r541 (vec 8 double))
  %t576 = bitcast i512 %t575 to <8 x double>
  ; r543 := call memset(r539, (0x0 : bv 64), r537, r542)
  %t577 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t573, i64 0, i64 %t571, <8 x double> %t576)
  ; r544 := (tuple_field r543 0)
  %t578 = extractvalue { i64, i64, <8 x double> } %t577, 0
  ; r545 := (tuple_field r543 1)
  %t579 = extractvalue { i64, i64, <8 x double> } %t577, 1
  ; r546 := (tuple_field r543 2)
  %t580 = extractvalue { i64, i64, <8 x double> } %t577, 2
  ; r547 := (bitcast r546 (bv 512))
  %t581 = bitcast <8 x double> %t580 to i512
  br label %block_0_40453d
block_0_40453d:
  %t582 = phi i64 [ %t579, %block_0_404530 ]
  %t583 = phi i64 [ %t571, %block_0_404530 ]
  %t584 = phi i64 [ %t572, %block_0_404530 ]
  %t585 = phi i64 [ %t573, %block_0_404530 ]
  %t586 = phi i64 [ %t574, %block_0_404530 ]
  %t587 = phi i512 [ %t581, %block_0_404530 ]
  br label %block_0_4043e4
block_0_404542:
  %t588 = phi i64 [ %t251, %block_0_4043cb ]
  %t589 = phi i64 [ %t252, %block_0_4043cb ]
  %t590 = phi i64 [ %t253, %block_0_4043cb ]
  %t591 = phi i64 [ %t254, %block_0_4043cb ]
  %t592 = phi i64 [ %t255, %block_0_4043cb ]
  %t593 = phi i512 [ %t256, %block_0_4043cb ]
  ; r560 := (bitcast r559 (vec 8 double))
  %t594 = bitcast i512 %t593 to <8 x double>
  ; r561 := call _spinunlock_stub((0x6355a0 : bv 64), r556, r554, r560)
  %t595 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6509984, i64 %t590, i64 %t588, <8 x double> %t594)
  ; r562 := (tuple_field r561 0)
  %t596 = extractvalue { i64, i64, <8 x double> } %t595, 0
  ; r563 := (tuple_field r561 1)
  %t597 = extractvalue { i64, i64, <8 x double> } %t595, 1
  ; r564 := (tuple_field r561 2)
  %t598 = extractvalue { i64, i64, <8 x double> } %t595, 2
  ; r565 := (bitcast r564 (bv 512))
  %t599 = bitcast <8 x double> %t598 to i512
  br label %block_0_40454c
block_0_40454c:
  %t600 = phi i64 [ %t597, %block_0_404542 ]
  %t601 = phi i64 [ %t589, %block_0_404542 ]
  %t602 = phi i64 [ %t590, %block_0_404542 ]
  %t603 = phi i64 [ %t591, %block_0_404542 ]
  %t604 = phi i64 [ %t592, %block_0_404542 ]
  %t605 = phi i512 [ %t599, %block_0_404542 ]
  br label %block_0_4043d9
block_0_404551:
  %t606 = phi i64 [ %t216, %block_0_4043ac ]
  %t607 = phi i64 [ %t217, %block_0_4043ac ]
  %t608 = phi i64 [ %t218, %block_0_4043ac ]
  %t609 = phi i64 [ %t219, %block_0_4043ac ]
  %t610 = phi i64 [ %t220, %block_0_4043ac ]
  %t611 = phi i64 [ %t221, %block_0_4043ac ]
  %t612 = phi i512 [ %t222, %block_0_4043ac ]
  ; r579 := (bitcast r578 (vec 8 double))
  %t613 = bitcast i512 %t612 to <8 x double>
  ; r580 := call extent_tree_ad_remove((0x635620 : bv 64), r573, r572, r579)
  %t614 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @extent_tree_ad_remove(i64 6510112, i64 %t607, i64 %t606, <8 x double> %t613)
  ; r581 := (tuple_field r580 0)
  %t615 = extractvalue { i64, i64, <8 x double> } %t614, 0
  ; r582 := (tuple_field r580 1)
  %t616 = extractvalue { i64, i64, <8 x double> } %t614, 1
  ; r583 := (tuple_field r580 2)
  %t617 = extractvalue { i64, i64, <8 x double> } %t614, 2
  ; r584 := (bitcast r583 (bv 512))
  %t618 = bitcast <8 x double> %t617 to i512
  br label %block_0_40455e
block_0_40455e:
  %t619 = phi i64 [ %t616, %block_0_404551 ]
  %t620 = phi i64 [ %t607, %block_0_404551 ]
  %t621 = phi i64 [ %t608, %block_0_404551 ]
  %t622 = phi i64 [ %t609, %block_0_404551 ]
  %t623 = phi i64 [ %t610, %block_0_404551 ]
  %t624 = phi i64 [ %t611, %block_0_404551 ]
  %t625 = phi i512 [ %t618, %block_0_404551 ]
  ; r592 := (bitcast r591 (vec 8 double))
  %t626 = bitcast i512 %t625 to <8 x double>
  ; r593 := call base_node_dealloc(r586, r588, r585, r592)
  %t627 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @base_node_dealloc(i64 %t620, i64 %t622, i64 %t619, <8 x double> %t626)
  ; r594 := (tuple_field r593 0)
  %t628 = extractvalue { i64, i64, <8 x double> } %t627, 0
  ; r595 := (tuple_field r593 1)
  %t629 = extractvalue { i64, i64, <8 x double> } %t627, 1
  ; r596 := (tuple_field r593 2)
  %t630 = extractvalue { i64, i64, <8 x double> } %t627, 2
  ; r597 := (bitcast r596 (bv 512))
  %t631 = bitcast <8 x double> %t630 to i512
  br label %block_0_404566
block_0_404566:
  %t632 = phi i64 [ %t629, %block_0_40455e ]
  %t633 = phi i64 [ %t621, %block_0_40455e ]
  %t634 = phi i64 [ %t622, %block_0_40455e ]
  %t635 = phi i64 [ %t623, %block_0_40455e ]
  %t636 = phi i64 [ %t624, %block_0_40455e ]
  %t637 = phi i512 [ %t631, %block_0_40455e ]
  br label %block_0_4043cb
block_0_40456b:
  %t638 = phi i64 [ %t484, %block_0_4044c3 ]
  %t639 = phi i64 [ %t485, %block_0_4044c3 ]
  %t640 = phi i64 [ %t486, %block_0_4044c3 ]
  %t641 = phi i64 [ %t488, %block_0_4044c3 ]
  %t642 = phi i64 [ %t489, %block_0_4044c3 ]
  %t643 = phi i64 [ %t490, %block_0_4044c3 ]
  %t644 = phi i512 [ %t491, %block_0_4044c3 ]
  ; r611 := (read (0x6356e8 : bv 64) (bv 32))
  %t645 = inttoptr i64 6510312 to i32*
  %t646 = load i32, i32* %t645
  ; r612 := (bv_add r604 r606)
  %t647 = add i64 %t638, %t640
  ; write (0x6355d0 : bv 64) r612
  %t648 = inttoptr i64 6510032 to i64*
  store i64 %t647, i64* %t648
  ; r613 := (eq r611 (0x0 : bv 32))
  %t649 = icmp eq i32 %t646, 0
  br i1 %t649, label %block_0_404305, label %block_0_404585
block_0_404585:
  %t650 = phi i64 [ %t639, %block_0_40456b ]
  %t651 = phi i64 [ %t641, %block_0_40456b ]
  %t652 = phi i64 [ %t642, %block_0_40456b ]
  %t653 = phi i64 [ %t643, %block_0_40456b ]
  %t654 = phi i512 [ %t644, %block_0_40456b ]
  ; r619 := (bitcast r618 (vec 8 double))
  %t655 = bitcast i512 %t654 to <8 x double>
  ; r620 := call _spinunlock_stub((0x6355a0 : bv 64), r615, r614, r619)
  %t656 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6509984, i64 %t651, i64 %t650, <8 x double> %t655)
  ; r621 := (tuple_field r620 0)
  %t657 = extractvalue { i64, i64, <8 x double> } %t656, 0
  ; r622 := (tuple_field r620 1)
  %t658 = extractvalue { i64, i64, <8 x double> } %t656, 1
  ; r623 := (tuple_field r620 2)
  %t659 = extractvalue { i64, i64, <8 x double> } %t656, 2
  ; r624 := (bitcast r623 (bv 512))
  %t660 = bitcast <8 x double> %t659 to i512
  br label %block_0_40458f
block_0_40458f:
  %t661 = phi i64 [ %t658, %block_0_404585 ]
  %t662 = phi i64 [ %t652, %block_0_404585 ]
  %t663 = phi i64 [ %t653, %block_0_404585 ]
  %t664 = phi i512 [ %t660, %block_0_404585 ]
  br label %block_0_404305
block_0_404594:
  %t665 = phi i64 [ %t373, %block_0_40443e ]
  %t666 = phi i64 [ %t374, %block_0_40443e ]
  %t667 = phi i64 [ %t375, %block_0_40443e ]
  %t668 = phi i64 [ %t376, %block_0_40443e ]
  %t669 = phi i512 [ %t377, %block_0_40443e ]
  %t670 = phi i512 [ %t378, %block_0_40443e ]
  %t671 = phi i512 [ %t379, %block_0_40443e ]
  %t672 = phi i512 [ %t380, %block_0_40443e ]
  %t673 = phi i512 [ %t381, %block_0_40443e ]
  %t674 = phi i512 [ %t382, %block_0_40443e ]
  %t675 = phi i512 [ %t383, %block_0_40443e ]
  ; r640 := call pages_unmap(r631, r629)
  %t676 = call { i64, i64, <8 x double> } (i64, i64) @pages_unmap(i64 %t667, i64 %t665)
  ; r641 := (tuple_field r640 0)
  %t677 = extractvalue { i64, i64, <8 x double> } %t676, 0
  ; r642 := (tuple_field r640 1)
  %t678 = extractvalue { i64, i64, <8 x double> } %t676, 1
  ; r643 := (tuple_field r640 2)
  %t679 = extractvalue { i64, i64, <8 x double> } %t676, 2
  ; r644 := (bitcast r643 (bv 512))
  %t680 = bitcast <8 x double> %t679 to i512
  br label %block_0_40459f
block_0_40459f:
  %t681 = phi i64 [ %t678, %block_0_404594 ]
  %t682 = phi i64 [ %t665, %block_0_404594 ]
  %t683 = phi i64 [ %t666, %block_0_404594 ]
  %t684 = phi i64 [ %t668, %block_0_404594 ]
  %t685 = phi i512 [ %t680, %block_0_404594 ]
  %t686 = phi i512 [ %t669, %block_0_404594 ]
  %t687 = phi i512 [ %t670, %block_0_404594 ]
  %t688 = phi i512 [ %t671, %block_0_404594 ]
  %t689 = phi i512 [ %t672, %block_0_404594 ]
  %t690 = phi i512 [ %t673, %block_0_404594 ]
  %t691 = phi i512 [ %t674, %block_0_404594 ]
  %t692 = phi i512 [ %t675, %block_0_404594 ]
  ; r657 := (bitcast r649 (vec 8 double))
  %t693 = bitcast i512 %t685 to <8 x double>
  ; r658 := (bitcast r650 (vec 8 double))
  %t694 = bitcast i512 %t686 to <8 x double>
  ; r659 := (bitcast r651 (vec 8 double))
  %t695 = bitcast i512 %t687 to <8 x double>
  ; r660 := (bitcast r652 (vec 8 double))
  %t696 = bitcast i512 %t688 to <8 x double>
  ; r661 := (bitcast r653 (vec 8 double))
  %t697 = bitcast i512 %t689 to <8 x double>
  ; r662 := (bitcast r654 (vec 8 double))
  %t698 = bitcast i512 %t690 to <8 x double>
  ; r663 := (bitcast r655 (vec 8 double))
  %t699 = bitcast i512 %t691 to <8 x double>
  ; r664 := (bitcast r656 (vec 8 double))
  %t700 = bitcast i512 %t692 to <8 x double>
  ; r665 := call chunk_alloc_mmap_slow(r646, (0x1 : bv 64), r645, r657, r658, r659, r660, r661, r662, r663, r664)
  %t701 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @chunk_alloc_mmap_slow(i64 %t682, i64 1, i64 %t681, <8 x double> %t693, <8 x double> %t694, <8 x double> %t695, <8 x double> %t696, <8 x double> %t697, <8 x double> %t698, <8 x double> %t699, <8 x double> %t700)
  ; r666 := (tuple_field r665 0)
  %t702 = extractvalue { i64, i64, <8 x double> } %t701, 0
  ; r667 := (tuple_field r665 1)
  %t703 = extractvalue { i64, i64, <8 x double> } %t701, 1
  ; r668 := (tuple_field r665 2)
  %t704 = extractvalue { i64, i64, <8 x double> } %t701, 2
  ; r669 := (bitcast r668 (bv 512))
  %t705 = bitcast <8 x double> %t704 to i512
  br label %block_0_4045ac
block_0_4045ac:
  %t706 = phi i64 [ %t702, %block_0_40459f ]
  %t707 = phi i64 [ %t703, %block_0_40459f ]
  %t708 = phi i64 [ %t682, %block_0_40459f ]
  %t709 = phi i64 [ %t683, %block_0_40459f ]
  %t710 = phi i64 [ %t684, %block_0_40459f ]
  %t711 = phi i512 [ %t705, %block_0_40459f ]
  br label %block_0_404300
}
define { i64, i64, <8 x double> } @arena_bin_malloc_hard(i64 %arg0, i64 %arg1, <8 x double> %arg2, <8 x double> %arg3, <8 x double> %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9) {
block_0_4047e0:
  ; r0 := (bv_add arg1 (0x10 : bv 64))
  %t0 = add i64 %arg1, 16
  ; r1 := (bv_add arg1 (0x8 : bv 64))
  %t1 = add i64 %arg1, 8
  ; r2 := (read r1 (bv 64))
  %t2 = inttoptr i64 %t1 to i64*
  %t3 = load i64, i64* %t2
  ; r3 := (eq r0 r2)
  %t4 = icmp eq i64 %t0, %t3
  ; r4 := (bitcast arg2 (bv 512))
  %t5 = bitcast <8 x double> %arg2 to i512
  ; r5 := (bitcast arg3 (bv 512))
  %t6 = bitcast <8 x double> %arg3 to i512
  ; r6 := (bitcast arg4 (bv 512))
  %t7 = bitcast <8 x double> %arg4 to i512
  ; r7 := (bitcast arg5 (bv 512))
  %t8 = bitcast <8 x double> %arg5 to i512
  ; r8 := (bitcast arg6 (bv 512))
  %t9 = bitcast <8 x double> %arg6 to i512
  ; r9 := (bitcast arg7 (bv 512))
  %t10 = bitcast <8 x double> %arg7 to i512
  ; r10 := (bitcast arg8 (bv 512))
  %t11 = bitcast <8 x double> %arg8 to i512
  ; r11 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r12 := (bitcast arg2 (bv 512))
  %t13 = bitcast <8 x double> %arg2 to i512
  ; r13 := (bitcast arg3 (bv 512))
  %t14 = bitcast <8 x double> %arg3 to i512
  ; r14 := (bitcast arg4 (bv 512))
  %t15 = bitcast <8 x double> %arg4 to i512
  ; r15 := (bitcast arg5 (bv 512))
  %t16 = bitcast <8 x double> %arg5 to i512
  ; r16 := (bitcast arg6 (bv 512))
  %t17 = bitcast <8 x double> %arg6 to i512
  ; r17 := (bitcast arg7 (bv 512))
  %t18 = bitcast <8 x double> %arg7 to i512
  ; r18 := (bitcast arg8 (bv 512))
  %t19 = bitcast <8 x double> %arg8 to i512
  ; r19 := (bitcast arg9 (bv 512))
  %t20 = bitcast <8 x double> %arg9 to i512
  br i1 %t4, label %block_0_4047f6, label %block_0_404803
block_0_4047f6:
  %t21 = phi i64 [ %arg1, %block_0_4047e0 ]
  %t22 = phi i64 [ %arg0, %block_0_4047e0 ]
  %t23 = phi i512 [ %t5, %block_0_4047e0 ]
  %t24 = phi i512 [ %t6, %block_0_4047e0 ]
  %t25 = phi i512 [ %t7, %block_0_4047e0 ]
  %t26 = phi i512 [ %t8, %block_0_4047e0 ]
  %t27 = phi i512 [ %t9, %block_0_4047e0 ]
  %t28 = phi i512 [ %t10, %block_0_4047e0 ]
  %t29 = phi i512 [ %t11, %block_0_4047e0 ]
  %t30 = phi i512 [ %t12, %block_0_4047e0 ]
  br label %block_0_40496f
block_0_404800:
  %t31 = phi i64 [ %t56, %block_0_404803 ]
  %t32 = phi i64 [ %t43, %block_0_404803 ]
  %t33 = phi i64 [ %t45, %block_0_404803 ]
  %t34 = phi i64 [ %t46, %block_0_404803 ]
  %t35 = phi i512 [ %t47, %block_0_404803 ]
  %t36 = phi i512 [ %t48, %block_0_404803 ]
  %t37 = phi i512 [ %t49, %block_0_404803 ]
  %t38 = phi i512 [ %t50, %block_0_404803 ]
  %t39 = phi i512 [ %t51, %block_0_404803 ]
  %t40 = phi i512 [ %t52, %block_0_404803 ]
  %t41 = phi i512 [ %t53, %block_0_404803 ]
  %t42 = phi i512 [ %t54, %block_0_404803 ]
  br label %block_0_404803
block_0_404803:
  %t43 = phi i64 [ %t0, %block_0_4047e0 ], [ %t32, %block_0_404800 ]
  %t44 = phi i64 [ %t3, %block_0_4047e0 ], [ %t31, %block_0_404800 ]
  %t45 = phi i64 [ %arg1, %block_0_4047e0 ], [ %t33, %block_0_404800 ]
  %t46 = phi i64 [ %arg0, %block_0_4047e0 ], [ %t34, %block_0_404800 ]
  %t47 = phi i512 [ %t13, %block_0_4047e0 ], [ %t35, %block_0_404800 ]
  %t48 = phi i512 [ %t14, %block_0_4047e0 ], [ %t36, %block_0_404800 ]
  %t49 = phi i512 [ %t15, %block_0_4047e0 ], [ %t37, %block_0_404800 ]
  %t50 = phi i512 [ %t16, %block_0_4047e0 ], [ %t38, %block_0_404800 ]
  %t51 = phi i512 [ %t17, %block_0_4047e0 ], [ %t39, %block_0_404800 ]
  %t52 = phi i512 [ %t18, %block_0_4047e0 ], [ %t40, %block_0_404800 ]
  %t53 = phi i512 [ %t19, %block_0_4047e0 ], [ %t41, %block_0_404800 ]
  %t54 = phi i512 [ %t20, %block_0_4047e0 ], [ %t42, %block_0_404800 ]
  ; r54 := (read r43 (bv 64))
  %t55 = inttoptr i64 %t44 to i64*
  %t56 = load i64, i64* %t55
  ; r55 := (eq r42 r54)
  %t57 = icmp eq i64 %t43, %t56
  br i1 %t57, label %block_0_40480b, label %block_0_404800
block_0_40480b:
  %t58 = phi i64 [ %t43, %block_0_404803 ]
  %t59 = phi i64 [ %t44, %block_0_404803 ]
  %t60 = phi i64 [ %t45, %block_0_404803 ]
  %t61 = phi i64 [ %t46, %block_0_404803 ]
  %t62 = phi i512 [ %t47, %block_0_404803 ]
  %t63 = phi i512 [ %t48, %block_0_404803 ]
  %t64 = phi i512 [ %t49, %block_0_404803 ]
  %t65 = phi i512 [ %t50, %block_0_404803 ]
  %t66 = phi i512 [ %t51, %block_0_404803 ]
  %t67 = phi i512 [ %t52, %block_0_404803 ]
  %t68 = phi i512 [ %t53, %block_0_404803 ]
  %t69 = phi i512 [ %t54, %block_0_404803 ]
  ; r68 := (eq r57 r56)
  %t70 = icmp eq i64 %t59, %t58
  br i1 %t70, label %block_0_40496f, label %block_0_404816
block_0_404816:
  %t71 = phi i64 [ %t59, %block_0_40480b ]
  %t72 = phi i64 [ %t60, %block_0_40480b ]
  %t73 = phi i64 [ %t61, %block_0_40480b ]
  %t74 = phi i512 [ %t62, %block_0_40480b ]
  %t75 = phi i512 [ %t63, %block_0_40480b ]
  %t76 = phi i512 [ %t64, %block_0_40480b ]
  %t77 = phi i512 [ %t65, %block_0_40480b ]
  %t78 = phi i512 [ %t66, %block_0_40480b ]
  %t79 = phi i512 [ %t67, %block_0_40480b ]
  %t80 = phi i512 [ %t68, %block_0_40480b ]
  %t81 = phi i512 [ %t69, %block_0_40480b ]
  ; r80 := (eq r69 (0x0 : bv 64))
  %t82 = icmp eq i64 %t71, 0
  br i1 %t82, label %block_0_40496f, label %block_0_40481f
block_0_40481f:
  %t83 = phi i64 [ %t71, %block_0_404816 ]
  %t84 = phi i64 [ %t72, %block_0_404816 ]
  %t85 = phi i512 [ %t74, %block_0_404816 ]
  ; r84 := (bv_add r82 (0x8 : bv 64))
  %t86 = add i64 %t84, 8
  ; r85 := (bitcast r83 (vec 8 double))
  %t87 = bitcast i512 %t85 to <8 x double>
  ; r86 := call arena_run_tree_remove(r84, r81, r85)
  %t88 = call <8 x double> (i64, i64, <8 x double>) @arena_run_tree_remove(i64 %t86, i64 %t83, <8 x double> %t87)
  ; r87 := (bitcast r86 (bv 512))
  %t89 = bitcast <8 x double> %t88 to i512
  br label %block_0_40482b
block_0_40482b:
  %t90 = phi i64 [ %t83, %block_0_40481f ]
  %t91 = phi i64 [ %t84, %block_0_40481f ]
  %t92 = phi i512 [ %t89, %block_0_40481f ]
  ; r91 := (read (0x635518 : bv 64) (bv 64))
  %t93 = inttoptr i64 6509848 to i64*
  %t94 = load i64, i64* %t93
  ; r92 := (bv_complement r91)
  %t95 = xor i64 %t94, -1
  ; r93 := (bv_and r92 r88)
  %t96 = and i64 %t95, %t90
  ; r94 := (bv_add r93 (0x28 : bv 64))
  %t97 = add i64 %t96, 40
  ; r95 := (bv_sub r88 r94)
  %t98 = sub i64 %t90, %t97
  ; r96 := (uext r95 128)
  %t99 = zext i64 %t98 to i128
  ; r97 := (bv_mul (0xaaaaaaaaaaaaaaab : bv 128) r96)
  %t100 = mul i128 12297829382473034411, %t99
  ; r98 := (bv_shr r97 (0x40 : bv 128))
  %t101 = lshr i128 %t100, 64
  ; r99 := (trunc r98 64)
  %t102 = trunc i128 %t101 to i64
  ; r100 := (bv_add r88 (0x10 : bv 64))
  %t103 = add i64 %t90, 16
  ; r101 := (read r100 (bv 64))
  %t104 = inttoptr i64 %t103 to i64*
  %t105 = load i64, i64* %t104
  ; r102 := (trunc r101 32)
  %t106 = trunc i64 %t105 to i32
  ; r103 := (bv_and r102 (0xfff00000 : bv 32))
  %t107 = and i32 %t106, 4293918720
  ; r104 := (uext r103 64)
  %t108 = zext i32 %t107 to i64
  ; r105 := (bv_shr r99 (0x4 : bv 64))
  %t109 = lshr i64 %t102, 4
  ; r106 := (bv_shr r104 (0x14 : bv 64))
  %t110 = lshr i64 %t108, 20
  ; r107 := (bv_sub r105 r106)
  %t111 = sub i64 %t109, %t110
  ; r108 := (bv_shl r107 (0xc : bv 64))
  %t112 = shl i64 %t111, 12
  ; r109 := (bv_add r93 r108)
  %t113 = add i64 %t96, %t112
  ; r110 := (eq r109 (0x0 : bv 64))
  %t114 = icmp eq i64 %t113, 0
  ; write r89 r109
  %t115 = inttoptr i64 %t91 to i64*
  store i64 %t113, i64* %t115
  br i1 %t114, label %block_0_404965, label %block_0_40487a
block_0_40487a:
  %t116 = phi i64 [ %t112, %block_0_40482b ], [ %t409, %block_0_4049cf ]
  %t117 = phi i64 [ %t91, %block_0_40482b ], [ %t410, %block_0_4049cf ]
  %t118 = phi i64 [ %t113, %block_0_40482b ], [ %t412, %block_0_4049cf ]
  %t119 = phi i512 [ %t92, %block_0_40482b ], [ %t413, %block_0_4049cf ]
  ; r115 := (bv_add r113 (0x8 : bv 64))
  %t120 = add i64 %t118, 8
  ; r116 := (read r115 (bv 32))
  %t121 = inttoptr i64 %t120 to i32*
  %t122 = load i32, i32* %t121
  ; r117 := (uext r116 64)
  %t123 = zext i32 %t122 to i64
  ; r118 := (bv_mul (0x4 : bv 64) r117)
  %t124 = mul i64 4, %t123
  ; r119 := (bv_add r113 r118)
  %t125 = add i64 %t118, %t124
  ; r120 := (bv_add r119 (0x10 : bv 64))
  %t126 = add i64 %t125, 16
  ; r121 := (read r120 (bv 32))
  %t127 = inttoptr i64 %t126 to i32*
  %t128 = load i32, i32* %t127
  ; r122 := (uext r121 64)
  %t129 = zext i32 %t128 to i64
  ; r123 := (eq r121 (0x0 : bv 32))
  %t130 = icmp eq i32 %t128, 0
  br i1 %t130, label %block_0_40488e, label %block_0_4049eb
block_0_40488e:
  %t131 = phi i64 [ %t123, %block_0_40487a ]
  %t132 = phi i64 [ %t116, %block_0_40487a ]
  %t133 = phi i64 [ %t117, %block_0_40487a ]
  %t134 = phi i64 [ %t118, %block_0_40487a ]
  %t135 = phi i512 [ %t119, %block_0_40487a ]
  ; r129 := (bv_add r124 (0x1 : bv 64))
  %t136 = add i64 %t131, 1
  ; r130 := (trunc r129 32)
  %t137 = trunc i64 %t136 to i32
  ; r131 := (uext r130 64)
  %t138 = zext i32 %t137 to i64
  ; r132 := (bv_add r126 (0x3c : bv 64))
  %t139 = add i64 %t133, 60
  ; r133 := (read r132 (bv 32))
  %t140 = inttoptr i64 %t139 to i32*
  %t141 = load i32, i32* %t140
  ; r134 := (uext r133 64)
  %t142 = zext i32 %t141 to i64
  ; r135 := (eq r133 r130)
  %t143 = icmp eq i32 %t141, %t137
  ; r136 := (bv_ule r130 r133)
  %t144 = icmp ule i32 %t137, %t141
  ; r137 := (not r135)
  %t145 = icmp eq i1 %t143, 0
  ; r138 := (and r136 r137)
  %t146 = and i1 %t144, %t145
  br i1 %t146, label %block_0_4048ad, label %block_0_40489a
block_0_40489a:
  %t147 = phi i64 [ %t132, %block_0_40488e ]
  %t148 = phi i64 [ %t134, %block_0_40488e ]
  %t149 = phi i512 [ %t135, %block_0_40488e ]
  br label %block_0_4049e4
block_0_4048a0:
  %t150 = phi i64 [ %t163, %block_0_4048ad ]
  %t151 = phi i64 [ %t164, %block_0_4048ad ]
  %t152 = phi i64 [ %t165, %block_0_4048ad ]
  %t153 = phi i64 [ %t166, %block_0_4048ad ]
  %t154 = phi i64 [ %t167, %block_0_4048ad ]
  %t155 = phi i512 [ %t168, %block_0_4048ad ]
  ; r148 := (trunc r145 32)
  %t156 = trunc i64 %t153 to i32
  ; r149 := (bv_add r148 (0x1 : bv 32))
  %t157 = add i32 %t156, 1
  ; r150 := (uext r149 64)
  %t158 = zext i32 %t157 to i64
  ; r151 := (trunc r142 32)
  %t159 = trunc i64 %t150 to i32
  ; r152 := (bv_ult r151 r149)
  %t160 = icmp ult i32 %t159, %t157
  ; r153 := (eq r151 r149)
  %t161 = icmp eq i32 %t159, %t157
  ; r154 := (or r152 r153)
  %t162 = or i1 %t160, %t161
  br i1 %t162, label %block_0_4049e4, label %block_0_4048ad
block_0_4048ad:
  %t163 = phi i64 [ %t142, %block_0_40488e ], [ %t150, %block_0_4048a0 ]
  %t164 = phi i64 [ %t132, %block_0_40488e ], [ %t151, %block_0_4048a0 ]
  %t165 = phi i64 [ %t133, %block_0_40488e ], [ %t152, %block_0_4048a0 ]
  %t166 = phi i64 [ %t138, %block_0_40488e ], [ %t158, %block_0_4048a0 ]
  %t167 = phi i64 [ %t134, %block_0_40488e ], [ %t154, %block_0_4048a0 ]
  %t168 = phi i512 [ %t135, %block_0_40488e ], [ %t155, %block_0_4048a0 ]
  ; r161 := (trunc r158 32)
  %t169 = trunc i64 %t166 to i32
  ; r162 := (uext r161 64)
  %t170 = zext i32 %t169 to i64
  ; r163 := (bv_mul (0x4 : bv 64) r162)
  %t171 = mul i64 4, %t170
  ; r164 := (bv_add r159 r163)
  %t172 = add i64 %t167, %t171
  ; r165 := (bv_add r164 (0x10 : bv 64))
  %t173 = add i64 %t172, 16
  ; r166 := (read r165 (bv 32))
  %t174 = inttoptr i64 %t173 to i32*
  %t175 = load i32, i32* %t174
  ; r167 := (uext r166 64)
  %t176 = zext i32 %t175 to i64
  ; r168 := (eq r166 (0x0 : bv 32))
  %t177 = icmp eq i32 %t175, 0
  br i1 %t177, label %block_0_4048a0, label %block_0_4048ba
block_0_4048ba:
  %t178 = phi i64 [ %t165, %block_0_4048ad ]
  %t179 = phi i64 [ %t166, %block_0_4048ad ]
  %t180 = phi i64 [ %t176, %block_0_4048ad ]
  %t181 = phi i64 [ %t170, %block_0_4048ad ]
  %t182 = phi i64 [ %t167, %block_0_4048ad ]
  %t183 = phi i512 [ %t168, %block_0_4048ad ]
  ; r175 := (trunc r171 32)
  %t184 = trunc i64 %t180 to i32
  ; r176 := (eq r175 (0x0 : bv 32))
  %t185 = icmp eq i32 %t184, 0
  ; r177 := (bsf r175)
  %t186 = call i32 (i32, i1) @llvm.cttz.i32(i32 %t184, i1 1)
  ; r178 := (bv_add r169 (0x28 : bv 64))
  %t187 = add i64 %t178, 40
  ; r179 := (read r178 (bv 64))
  %t188 = inttoptr i64 %t187 to i64*
  %t189 = load i64, i64* %t188
  ; r180 := (bv_add r169 (0x40 : bv 64))
  %t190 = add i64 %t178, 64
  ; r181 := (read r180 (bv 32))
  %t191 = inttoptr i64 %t190 to i32*
  %t192 = load i32, i32* %t191
  ; r182 := (uext r181 64)
  %t193 = zext i32 %t192 to i64
  ; r183 := (trunc r170 32)
  %t194 = trunc i64 %t179 to i32
  ; r184 := (bv_add r173 (0x8 : bv 64))
  %t195 = add i64 %t182, 8
  ; write r184 r183
  %t196 = inttoptr i64 %t195 to i32*
  store i32 %t194, i32* %t196
  ; r185 := (bv_shl r183 (0x5 : bv 32))
  %t197 = shl i32 %t194, 5
  ; r186 := (mux r176 (0xffffffff : bv 32) r177)
  %t198 = select i1 %t185, i32 4294967295, i32 %t186
  ; r187 := (trunc r186 8)
  %t199 = trunc i32 %t198 to i8
  ; r188 := (bv_add r185 r186)
  %t200 = add i32 %t197, %t198
  ; r189 := (uext r188 64)
  %t201 = zext i32 %t200 to i64
  ; r190 := (bv_add r173 r182)
  %t202 = add i64 %t182, %t193
  ; r191 := (sext r179 128)
  %t203 = sext i64 %t189 to i128
  ; r192 := (sext r189 128)
  %t204 = sext i64 %t201 to i128
  ; r193 := (bv_mul r191 r192)
  %t205 = mul i128 %t203, %t204
  ; r194 := (trunc r193 64)
  %t206 = trunc i128 %t205 to i64
  ; r195 := (bv_add r190 r194)
  %t207 = add i64 %t202, %t206
  ; r196 := (bv_and r187 (0x1f : bv 8))
  %t208 = and i8 %t199, 31
  ; r197 := (eq r196 (0x0 : bv 8))
  %t209 = icmp eq i8 %t208, 0
  ; r198 := (uext r196 32)
  %t210 = zext i8 %t208 to i32
  ; r199 := (bv_shl (0x1 : bv 32) r198)
  %t211 = shl i32 1, %t210
  ; r200 := (mux r197 (0x1 : bv 32) r199)
  %t212 = select i1 %t209, i32 1, i32 %t211
  ; r201 := (bv_xor r175 r200)
  %t213 = xor i32 %t184, %t212
  ; r202 := (read (0x635518 : bv 64) (bv 64))
  %t214 = inttoptr i64 6509848 to i64*
  %t215 = load i64, i64* %t214
  ; r203 := (bv_add r179 r195)
  %t216 = add i64 %t189, %t207
  ; r204 := (bv_add r203 (0xffffffffffffffff : bv 64))
  %t217 = add i64 %t216, 18446744073709551615
  ; r205 := (bv_mul (0x4 : bv 64) r172)
  %t218 = mul i64 4, %t181
  ; r206 := (bv_add r173 r205)
  %t219 = add i64 %t182, %t218
  ; r207 := (bv_add r206 (0x10 : bv 64))
  %t220 = add i64 %t219, 16
  ; write r207 r201
  %t221 = inttoptr i64 %t220 to i32*
  store i32 %t213, i32* %t221
  ; r208 := (bv_complement r202)
  %t222 = xor i64 %t215, -1
  ; r209 := (bv_and r195 r208)
  %t223 = and i64 %t207, %t222
  ; r210 := (bv_sub r195 r209)
  %t224 = sub i64 %t207, %t223
  ; r211 := (bv_sub r204 r209)
  %t225 = sub i64 %t217, %t223
  ; r212 := (read r209 (bv 64))
  %t226 = inttoptr i64 %t223 to i64*
  %t227 = load i64, i64* %t226
  ; r213 := (bv_shr r210 (0xc : bv 64))
  %t228 = lshr i64 %t224, 12
  ; r214 := (bv_shr r211 (0xc : bv 64))
  %t229 = lshr i64 %t225, 12
  ; r215 := (eq r213 r214)
  %t230 = icmp eq i64 %t228, %t229
  ; r216 := (bv_ule r214 r213)
  %t231 = icmp ule i64 %t229, %t228
  ; r217 := (not r215)
  %t232 = icmp eq i1 %t230, 0
  ; r218 := (and r216 r217)
  %t233 = and i1 %t231, %t232
  br i1 %t233, label %block_0_404960, label %block_0_404928
block_0_404928:
  %t234 = phi i64 [ %t228, %block_0_4048ba ]
  %t235 = phi i64 [ %t207, %block_0_4048ba ]
  %t236 = phi i64 [ %t229, %block_0_4048ba ]
  %t237 = phi i64 [ %t223, %block_0_4048ba ]
  %t238 = phi i64 [ %t227, %block_0_4048ba ]
  %t239 = phi i64 [ %t182, %block_0_4048ba ]
  %t240 = phi i512 [ %t183, %block_0_4048ba ]
  ; r226 := (bv_mul (0x2 : bv 64) r219)
  %t241 = mul i64 2, %t234
  ; r227 := (bv_add r219 r226)
  %t242 = add i64 %t234, %t241
  ; r228 := (bv_mul (0x8 : bv 64) r227)
  %t243 = mul i64 8, %t242
  ; r229 := (bv_add r222 r228)
  %t244 = add i64 %t237, %t243
  ; r230 := (bv_add r229 (0x28 : bv 64))
  %t245 = add i64 %t244, 40
  br label %block_0_404931
block_0_404931:
  %t246 = phi i64 [ %t234, %block_0_404928 ], [ %t294, %block_0_404947 ]
  %t247 = phi i64 [ %t245, %block_0_404928 ], [ %t297, %block_0_404947 ]
  %t248 = phi i64 [ %t235, %block_0_404928 ], [ %t287, %block_0_404947 ]
  %t249 = phi i64 [ %t236, %block_0_404928 ], [ %t288, %block_0_404947 ]
  %t250 = phi i64 [ %t237, %block_0_404928 ], [ %t289, %block_0_404947 ]
  %t251 = phi i64 [ %t238, %block_0_404928 ], [ %t290, %block_0_404947 ]
  %t252 = phi i64 [ %t239, %block_0_404928 ], [ %t291, %block_0_404947 ]
  %t253 = phi i512 [ %t240, %block_0_404928 ], [ %t292, %block_0_404947 ]
  ; r239 := (bv_add r232 (0x10 : bv 64))
  %t254 = add i64 %t247, 16
  ; r240 := (read r239 (bv 64))
  %t255 = inttoptr i64 %t254 to i64*
  %t256 = load i64, i64* %t255
  ; r241 := (trunc r240 8)
  %t257 = trunc i64 %t256 to i8
  ; r242 := (bv_and r241 (0x8 : bv 8))
  %t258 = and i8 %t257, 8
  ; r243 := (eq r242 (0x0 : bv 8))
  %t259 = icmp eq i8 %t258, 0
  br i1 %t259, label %block_0_404947, label %block_0_404939
block_0_404939:
  %t260 = phi i64 [ %t256, %block_0_404931 ]
  %t261 = phi i64 [ %t246, %block_0_404931 ]
  %t262 = phi i64 [ %t247, %block_0_404931 ]
  %t263 = phi i64 [ %t248, %block_0_404931 ]
  %t264 = phi i64 [ %t249, %block_0_404931 ]
  %t265 = phi i64 [ %t250, %block_0_404931 ]
  %t266 = phi i64 [ %t251, %block_0_404931 ]
  %t267 = phi i64 [ %t252, %block_0_404931 ]
  %t268 = phi i512 [ %t253, %block_0_404931 ]
  ; r253 := (bv_add r249 (0x20 : bv 64))
  %t269 = add i64 %t265, 32
  ; r254 := (read r253 (bv 64))
  %t270 = inttoptr i64 %t269 to i64*
  %t271 = load i64, i64* %t270
  ; r255 := (read r253 (bv 64))
  %t272 = inttoptr i64 %t269 to i64*
  %t273 = load i64, i64* %t272
  ; r256 := (bv_add r254 (0xffffffffffffffff : bv 64))
  %t274 = add i64 %t271, 18446744073709551615
  ; write r253 r256
  %t275 = inttoptr i64 %t269 to i64*
  store i64 %t274, i64* %t275
  ; r257 := (bv_xor r244 (0x8 : bv 64))
  %t276 = xor i64 %t260, 8
  ; r258 := (bv_add r250 (0x60 : bv 64))
  %t277 = add i64 %t266, 96
  ; r259 := (read r258 (bv 64))
  %t278 = inttoptr i64 %t277 to i64*
  %t279 = load i64, i64* %t278
  ; r260 := (read r258 (bv 64))
  %t280 = inttoptr i64 %t277 to i64*
  %t281 = load i64, i64* %t280
  ; r261 := (bv_add r259 (0xffffffffffffffff : bv 64))
  %t282 = add i64 %t279, 18446744073709551615
  ; write r258 r261
  %t283 = inttoptr i64 %t277 to i64*
  store i64 %t282, i64* %t283
  br label %block_0_404947
block_0_404947:
  %t284 = phi i64 [ %t256, %block_0_404931 ], [ %t276, %block_0_404939 ]
  %t285 = phi i64 [ %t246, %block_0_404931 ], [ %t261, %block_0_404939 ]
  %t286 = phi i64 [ %t247, %block_0_404931 ], [ %t262, %block_0_404939 ]
  %t287 = phi i64 [ %t248, %block_0_404931 ], [ %t263, %block_0_404939 ]
  %t288 = phi i64 [ %t249, %block_0_404931 ], [ %t264, %block_0_404939 ]
  %t289 = phi i64 [ %t250, %block_0_404931 ], [ %t265, %block_0_404939 ]
  %t290 = phi i64 [ %t251, %block_0_404931 ], [ %t266, %block_0_404939 ]
  %t291 = phi i64 [ %t252, %block_0_404931 ], [ %t267, %block_0_404939 ]
  %t292 = phi i512 [ %t253, %block_0_404931 ], [ %t268, %block_0_404939 ]
  ; r271 := (bv_add r262 (0x10 : bv 64))
  %t293 = add i64 %t284, 16
  ; r272 := (bv_add r263 (0x1 : bv 64))
  %t294 = add i64 %t285, 1
  ; r273 := (bv_add r264 (0x10 : bv 64))
  %t295 = add i64 %t286, 16
  ; write r273 r271
  %t296 = inttoptr i64 %t295 to i64*
  store i64 %t293, i64* %t296
  ; r274 := (bv_add r264 (0x18 : bv 64))
  %t297 = add i64 %t286, 24
  ; r275 := (bv_ult r266 r272)
  %t298 = icmp ult i64 %t288, %t294
  br i1 %t298, label %block_0_40495c, label %block_0_404931
block_0_40495c:
  %t299 = phi i64 [ %t297, %block_0_404947 ]
  %t300 = phi i64 [ %t287, %block_0_404947 ]
  %t301 = phi i64 [ %t291, %block_0_404947 ]
  %t302 = phi i512 [ %t292, %block_0_404947 ]
  br label %block_0_404960
block_0_404960:
  %t303 = phi i64 [ %t202, %block_0_4048ba ], [ %t299, %block_0_40495c ], [ %t420, %block_0_4049e4 ], [ %t441, %block_0_4049eb ], [ %t545, %block_0_404a8b ]
  %t304 = phi i64 [ %t207, %block_0_4048ba ], [ %t300, %block_0_40495c ], [ 0, %block_0_4049e4 ], [ %t453, %block_0_4049eb ], [ %t546, %block_0_404a8b ]
  %t305 = phi i64 [ %t182, %block_0_4048ba ], [ %t301, %block_0_40495c ], [ %t421, %block_0_4049e4 ], [ %t427, %block_0_4049eb ], [ %t547, %block_0_404a8b ]
  %t306 = phi i512 [ %t183, %block_0_4048ba ], [ %t302, %block_0_40495c ], [ %t422, %block_0_4049e4 ], [ %t428, %block_0_4049eb ], [ %t548, %block_0_404a8b ]
  ; r284 := (bv_add r282 (0xc : bv 64))
  %t307 = add i64 %t305, 12
  ; r285 := (read r284 (bv 32))
  %t308 = inttoptr i64 %t307 to i32*
  %t309 = load i32, i32* %t308
  ; r286 := (read r284 (bv 32))
  %t310 = inttoptr i64 %t307 to i32*
  %t311 = load i32, i32* %t310
  ; r287 := (bv_add r285 (0xffffffff : bv 32))
  %t312 = add i32 %t309, 4294967295
  ; write r284 r287
  %t313 = inttoptr i64 %t307 to i32*
  store i32 %t312, i32* %t313
  br label %block_0_404965
block_0_404965:
  %t314 = phi i64 [ %t112, %block_0_40482b ], [ %t303, %block_0_404960 ]
  %t315 = phi i64 [ 0, %block_0_40482b ], [ %t304, %block_0_404960 ]
  %t316 = phi i512 [ %t92, %block_0_40482b ], [ %t306, %block_0_404960 ]
  ; r291 := (bitcast r290 (vec 8 double))
  %t317 = bitcast i512 %t316 to <8 x double>
  ; r292 := (tuple r289 r288 r291)
  %t318 = insertvalue { i64, i64, <8 x double> } undef, i64 %t315, 0
  %t319 = insertvalue { i64, i64, <8 x double> } %t318, i64 %t314, 1
  %t320 = insertvalue { i64, i64, <8 x double> } %t319, <8 x double> %t317, 2
  ret { i64, i64, <8 x double> } %t320
block_0_40496f:
  %t321 = phi i64 [ %t21, %block_0_4047f6 ], [ %t60, %block_0_40480b ], [ %t72, %block_0_404816 ]
  %t322 = phi i64 [ %t22, %block_0_4047f6 ], [ %t61, %block_0_40480b ], [ %t73, %block_0_404816 ]
  %t323 = phi i512 [ %t23, %block_0_4047f6 ], [ %t62, %block_0_40480b ], [ %t74, %block_0_404816 ]
  %t324 = phi i512 [ %t24, %block_0_4047f6 ], [ %t63, %block_0_40480b ], [ %t75, %block_0_404816 ]
  %t325 = phi i512 [ %t25, %block_0_4047f6 ], [ %t64, %block_0_40480b ], [ %t76, %block_0_404816 ]
  %t326 = phi i512 [ %t26, %block_0_4047f6 ], [ %t65, %block_0_40480b ], [ %t77, %block_0_404816 ]
  %t327 = phi i512 [ %t27, %block_0_4047f6 ], [ %t66, %block_0_40480b ], [ %t78, %block_0_404816 ]
  %t328 = phi i512 [ %t28, %block_0_4047f6 ], [ %t67, %block_0_40480b ], [ %t79, %block_0_404816 ]
  %t329 = phi i512 [ %t29, %block_0_4047f6 ], [ %t68, %block_0_40480b ], [ %t80, %block_0_404816 ]
  %t330 = phi i512 [ %t30, %block_0_4047f6 ], [ %t69, %block_0_40480b ], [ %t81, %block_0_404816 ]
  ; r303 := (bv_add r293 (0x30 : bv 64))
  %t331 = add i64 %t321, 48
  ; r304 := (read r303 (bv 64))
  %t332 = inttoptr i64 %t331 to i64*
  %t333 = load i64, i64* %t332
  ; r305 := (bitcast r295 (vec 8 double))
  %t334 = bitcast i512 %t323 to <8 x double>
  ; r306 := (bitcast r296 (vec 8 double))
  %t335 = bitcast i512 %t324 to <8 x double>
  ; r307 := (bitcast r297 (vec 8 double))
  %t336 = bitcast i512 %t325 to <8 x double>
  ; r308 := (bitcast r298 (vec 8 double))
  %t337 = bitcast i512 %t326 to <8 x double>
  ; r309 := (bitcast r299 (vec 8 double))
  %t338 = bitcast i512 %t327 to <8 x double>
  ; r310 := (bitcast r300 (vec 8 double))
  %t339 = bitcast i512 %t328 to <8 x double>
  ; r311 := (bitcast r301 (vec 8 double))
  %t340 = bitcast i512 %t329 to <8 x double>
  ; r312 := (bitcast r302 (vec 8 double))
  %t341 = bitcast i512 %t330 to <8 x double>
  ; r313 := call arena_run_alloc(r294, r304, (0x0 : bv 64), (0x0 : bv 64), r305, r306, r307, r308, r309, r310, r311, r312)
  %t342 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @arena_run_alloc(i64 %t322, i64 %t333, i64 0, i64 0, <8 x double> %t334, <8 x double> %t335, <8 x double> %t336, <8 x double> %t337, <8 x double> %t338, <8 x double> %t339, <8 x double> %t340, <8 x double> %t341)
  ; r314 := (tuple_field r313 0)
  %t343 = extractvalue { i64, i64, <8 x double> } %t342, 0
  ; r315 := (tuple_field r313 1)
  %t344 = extractvalue { i64, i64, <8 x double> } %t342, 1
  ; r316 := (tuple_field r313 2)
  %t345 = extractvalue { i64, i64, <8 x double> } %t342, 2
  ; r317 := (bitcast r316 (bv 512))
  %t346 = bitcast <8 x double> %t345 to i512
  br label %block_0_40497c
block_0_40497c:
  %t347 = phi i64 [ %t343, %block_0_40496f ]
  %t348 = phi i64 [ %t344, %block_0_40496f ]
  %t349 = phi i64 [ %t321, %block_0_40496f ]
  %t350 = phi i512 [ %t346, %block_0_40496f ]
  ; r322 := (eq r318 (0x0 : bv 64))
  %t351 = icmp eq i64 %t347, 0
  br i1 %t351, label %block_0_404aaa, label %block_0_404988
block_0_404988:
  %t352 = phi i64 [ %t347, %block_0_40497c ]
  %t353 = phi i64 [ %t349, %block_0_40497c ]
  %t354 = phi i512 [ %t350, %block_0_40497c ]
  ; r326 := (bv_add r324 (0x3c : bv 64))
  %t355 = add i64 %t353, 60
  ; r327 := (read r326 (bv 32))
  %t356 = inttoptr i64 %t355 to i32*
  %t357 = load i32, i32* %t356
  ; r328 := (uext r327 64)
  %t358 = zext i32 %t357 to i64
  ; write r323 r324
  %t359 = inttoptr i64 %t352 to i64*
  store i64 %t353, i64* %t359
  ; r329 := (bv_add r327 (0xffffffff : bv 32))
  %t360 = add i32 %t357, 4294967295
  ; r330 := (eq r327 (0x1 : bv 32))
  %t361 = icmp eq i32 %t357, 1
  ; r331 := (uext r329 64)
  %t362 = zext i32 %t360 to i64
  br i1 %t361, label %block_0_4049b6, label %block_0_404995
block_0_404995:
  %t363 = phi i64 [ %t352, %block_0_404988 ]
  %t364 = phi i64 [ %t362, %block_0_404988 ]
  %t365 = phi i64 [ %t353, %block_0_404988 ]
  %t366 = phi i64 [ %t358, %block_0_404988 ]
  %t367 = phi i512 [ %t354, %block_0_404988 ]
  br label %block_0_4049a0
block_0_4049a0:
  %t368 = phi i64 [ 1, %block_0_404995 ], [ %t377, %block_0_4049a0 ]
  %t369 = phi i64 [ %t364, %block_0_404995 ], [ %t369, %block_0_4049a0 ]
  %t370 = phi i64 [ %t365, %block_0_404995 ], [ %t370, %block_0_4049a0 ]
  %t371 = phi i64 [ 0, %block_0_404995 ], [ %t380, %block_0_4049a0 ]
  %t372 = phi i64 [ %t366, %block_0_404995 ], [ %t372, %block_0_4049a0 ]
  %t373 = phi i64 [ %t363, %block_0_404995 ], [ %t373, %block_0_4049a0 ]
  %t374 = phi i512 [ %t367, %block_0_404995 ], [ %t374, %block_0_4049a0 ]
  ; r344 := (trunc r337 32)
  %t375 = trunc i64 %t368 to i32
  ; r345 := (bv_add r344 (0x1 : bv 32))
  %t376 = add i32 %t375, 1
  ; r346 := (uext r345 64)
  %t377 = zext i32 %t376 to i64
  ; r347 := (trunc r340 32)
  %t378 = trunc i64 %t371 to i32
  ; r348 := (uext r347 64)
  %t379 = zext i32 %t378 to i64
  ; r349 := (bv_add r340 (0x1 : bv 64))
  %t380 = add i64 %t371, 1
  ; r350 := (trunc r341 32)
  %t381 = trunc i64 %t372 to i32
  ; r351 := (eq r345 r350)
  %t382 = icmp eq i32 %t376, %t381
  ; r352 := (bv_mul (0x4 : bv 64) r348)
  %t383 = mul i64 4, %t379
  ; r353 := (bv_add r342 r352)
  %t384 = add i64 %t373, %t383
  ; r354 := (bv_add r353 (0x10 : bv 64))
  %t385 = add i64 %t384, 16
  ; write r354 (0xffffffff : bv 32)
  %t386 = inttoptr i64 %t385 to i32*
  store i32 4294967295, i32* %t386
  br i1 %t382, label %block_0_4049b6, label %block_0_4049a0
block_0_4049b6:
  %t387 = phi i64 [ %t362, %block_0_404988 ], [ %t369, %block_0_4049a0 ]
  %t388 = phi i64 [ %t353, %block_0_404988 ], [ %t370, %block_0_4049a0 ]
  %t389 = phi i64 [ %t352, %block_0_404988 ], [ %t373, %block_0_4049a0 ]
  %t390 = phi i512 [ %t354, %block_0_404988 ], [ %t374, %block_0_4049a0 ]
  ; r359 := (bv_add r356 (0x38 : bv 64))
  %t391 = add i64 %t388, 56
  ; r360 := (read r359 (bv 32))
  %t392 = inttoptr i64 %t391 to i32*
  %t393 = load i32, i32* %t392
  ; r361 := (uext r360 64)
  %t394 = zext i32 %t393 to i64
  ; r362 := (bv_and r360 (0x1f : bv 32))
  %t395 = and i32 %t393, 31
  ; r363 := (eq r362 (0x0 : bv 32))
  %t396 = icmp eq i32 %t395, 0
  ; r364 := (uext r362 64)
  %t397 = zext i32 %t395 to i64
  br i1 %t396, label %block_0_4049c4, label %block_0_404a90
block_0_4049c4:
  %t398 = phi i64 [ %t387, %block_0_4049b6 ]
  %t399 = phi i64 [ %t388, %block_0_4049b6 ]
  %t400 = phi i64 [ %t394, %block_0_4049b6 ]
  %t401 = phi i64 [ %t389, %block_0_4049b6 ]
  %t402 = phi i512 [ %t390, %block_0_4049b6 ]
  ; r370 := (trunc r365 32)
  %t403 = trunc i64 %t398 to i32
  ; r371 := (uext r370 64)
  %t404 = zext i32 %t403 to i64
  ; r372 := (bv_mul (0x4 : bv 64) r371)
  %t405 = mul i64 4, %t404
  ; r373 := (bv_add r368 r372)
  %t406 = add i64 %t401, %t405
  ; r374 := (bv_add r373 (0x10 : bv 64))
  %t407 = add i64 %t406, 16
  ; write r374 (0xffffffff : bv 32)
  %t408 = inttoptr i64 %t407 to i32*
  store i32 4294967295, i32* %t408
  br label %block_0_4049cf
block_0_4049cf:
  %t409 = phi i64 [ %t398, %block_0_4049c4 ], [ %t556, %block_0_404a90 ]
  %t410 = phi i64 [ %t399, %block_0_4049c4 ], [ %t551, %block_0_404a90 ]
  %t411 = phi i64 [ %t400, %block_0_4049c4 ], [ %t552, %block_0_404a90 ]
  %t412 = phi i64 [ %t401, %block_0_4049c4 ], [ %t553, %block_0_404a90 ]
  %t413 = phi i512 [ %t402, %block_0_4049c4 ], [ %t554, %block_0_404a90 ]
  ; r380 := (bv_add r378 (0x8 : bv 64))
  %t414 = add i64 %t412, 8
  ; write r380 (0x0 : bv 32)
  %t415 = inttoptr i64 %t414 to i32*
  store i32 0, i32* %t415
  ; r381 := (trunc r377 32)
  %t416 = trunc i64 %t411 to i32
  ; r382 := (bv_add r378 (0xc : bv 64))
  %t417 = add i64 %t412, 12
  ; write r382 r381
  %t418 = inttoptr i64 %t417 to i32*
  store i32 %t416, i32* %t418
  ; write r376 r378
  %t419 = inttoptr i64 %t410 to i64*
  store i64 %t412, i64* %t419
  br label %block_0_40487a
block_0_4049e4:
  %t420 = phi i64 [ %t147, %block_0_40489a ], [ %t151, %block_0_4048a0 ]
  %t421 = phi i64 [ %t148, %block_0_40489a ], [ %t154, %block_0_4048a0 ]
  %t422 = phi i512 [ %t149, %block_0_40489a ], [ %t155, %block_0_4048a0 ]
  br label %block_0_404960
block_0_4049eb:
  %t423 = phi i64 [ %t123, %block_0_40487a ]
  %t424 = phi i64 [ %t117, %block_0_40487a ]
  %t425 = phi i64 [ %t123, %block_0_40487a ]
  %t426 = phi i64 [ %t129, %block_0_40487a ]
  %t427 = phi i64 [ %t118, %block_0_40487a ]
  %t428 = phi i512 [ %t119, %block_0_40487a ]
  ; r392 := (trunc r389 32)
  %t429 = trunc i64 %t426 to i32
  ; r393 := (eq r392 (0x0 : bv 32))
  %t430 = icmp eq i32 %t429, 0
  ; r394 := (bsf r392)
  %t431 = call i32 (i32, i1) @llvm.cttz.i32(i32 %t429, i1 1)
  ; r395 := (bv_add r387 (0x28 : bv 64))
  %t432 = add i64 %t424, 40
  ; r396 := (read r395 (bv 64))
  %t433 = inttoptr i64 %t432 to i64*
  %t434 = load i64, i64* %t433
  ; r397 := (trunc r386 32)
  %t435 = trunc i64 %t423 to i32
  ; r398 := (bv_shl r397 (0x5 : bv 32))
  %t436 = shl i32 %t435, 5
  ; r399 := (uext r398 64)
  %t437 = zext i32 %t436 to i64
  ; r400 := (bv_add r387 (0x40 : bv 64))
  %t438 = add i64 %t424, 64
  ; r401 := (read r400 (bv 32))
  %t439 = inttoptr i64 %t438 to i32*
  %t440 = load i32, i32* %t439
  ; r402 := (uext r401 64)
  %t441 = zext i32 %t440 to i64
  ; r403 := (mux r393 (0xffffffff : bv 32) r394)
  %t442 = select i1 %t430, i32 4294967295, i32 %t431
  ; r404 := (trunc r403 8)
  %t443 = trunc i32 %t442 to i8
  ; r405 := (uext r403 64)
  %t444 = zext i32 %t442 to i64
  ; r406 := (bv_add r405 r399)
  %t445 = add i64 %t444, %t437
  ; r407 := (trunc r406 32)
  %t446 = trunc i64 %t445 to i32
  ; r408 := (uext r407 64)
  %t447 = zext i32 %t446 to i64
  ; r409 := (sext r396 128)
  %t448 = sext i64 %t434 to i128
  ; r410 := (sext r408 128)
  %t449 = sext i64 %t447 to i128
  ; r411 := (bv_mul r409 r410)
  %t450 = mul i128 %t448, %t449
  ; r412 := (trunc r411 64)
  %t451 = trunc i128 %t450 to i64
  ; r413 := (bv_add r412 r402)
  %t452 = add i64 %t451, %t441
  ; r414 := (bv_add r413 r390)
  %t453 = add i64 %t452, %t427
  ; r415 := (bv_and r404 (0x1f : bv 8))
  %t454 = and i8 %t443, 31
  ; r416 := (eq r415 (0x0 : bv 8))
  %t455 = icmp eq i8 %t454, 0
  ; r417 := (uext r415 32)
  %t456 = zext i8 %t454 to i32
  ; r418 := (bv_shl (0x1 : bv 32) r417)
  %t457 = shl i32 1, %t456
  ; r419 := (mux r416 (0x1 : bv 32) r418)
  %t458 = select i1 %t455, i32 1, i32 %t457
  ; r420 := (bv_xor r419 r392)
  %t459 = xor i32 %t458, %t429
  ; r421 := (bv_add r396 r414)
  %t460 = add i64 %t434, %t453
  ; r422 := (bv_add r421 (0xffffffffffffffff : bv 64))
  %t461 = add i64 %t460, 18446744073709551615
  ; r423 := (bv_mul (0x4 : bv 64) r388)
  %t462 = mul i64 4, %t425
  ; r424 := (bv_add r390 r423)
  %t463 = add i64 %t427, %t462
  ; r425 := (bv_add r424 (0x10 : bv 64))
  %t464 = add i64 %t463, 16
  ; write r425 r420
  %t465 = inttoptr i64 %t464 to i32*
  store i32 %t459, i32* %t465
  ; r426 := (read (0x635518 : bv 64) (bv 64))
  %t466 = inttoptr i64 6509848 to i64*
  %t467 = load i64, i64* %t466
  ; r427 := (bv_complement r426)
  %t468 = xor i64 %t467, -1
  ; r428 := (bv_and r414 r427)
  %t469 = and i64 %t453, %t468
  ; r429 := (bv_sub r414 r428)
  %t470 = sub i64 %t453, %t469
  ; r430 := (bv_sub r422 r428)
  %t471 = sub i64 %t461, %t469
  ; r431 := (read r428 (bv 64))
  %t472 = inttoptr i64 %t469 to i64*
  %t473 = load i64, i64* %t472
  ; r432 := (bv_shr r429 (0xc : bv 64))
  %t474 = lshr i64 %t470, 12
  ; r433 := (bv_shr r430 (0xc : bv 64))
  %t475 = lshr i64 %t471, 12
  ; r434 := (eq r432 r433)
  %t476 = icmp eq i64 %t474, %t475
  ; r435 := (bv_ule r433 r432)
  %t477 = icmp ule i64 %t475, %t474
  ; r436 := (not r434)
  %t478 = icmp eq i1 %t476, 0
  ; r437 := (and r435 r436)
  %t479 = and i1 %t477, %t478
  br i1 %t479, label %block_0_404960, label %block_0_404a56
block_0_404a56:
  %t480 = phi i64 [ %t474, %block_0_4049eb ]
  %t481 = phi i64 [ %t453, %block_0_4049eb ]
  %t482 = phi i64 [ %t475, %block_0_4049eb ]
  %t483 = phi i64 [ %t469, %block_0_4049eb ]
  %t484 = phi i64 [ %t473, %block_0_4049eb ]
  %t485 = phi i64 [ %t427, %block_0_4049eb ]
  %t486 = phi i512 [ %t428, %block_0_4049eb ]
  ; r445 := (bv_mul (0x2 : bv 64) r438)
  %t487 = mul i64 2, %t480
  ; r446 := (bv_add r438 r445)
  %t488 = add i64 %t480, %t487
  ; r447 := (bv_mul (0x8 : bv 64) r446)
  %t489 = mul i64 8, %t488
  ; r448 := (bv_add r441 r447)
  %t490 = add i64 %t483, %t489
  ; r449 := (bv_add r448 (0x28 : bv 64))
  %t491 = add i64 %t490, 40
  br label %block_0_404a60
block_0_404a60:
  %t492 = phi i64 [ %t480, %block_0_404a56 ], [ %t540, %block_0_404a76 ]
  %t493 = phi i64 [ %t491, %block_0_404a56 ], [ %t543, %block_0_404a76 ]
  %t494 = phi i64 [ %t481, %block_0_404a56 ], [ %t533, %block_0_404a76 ]
  %t495 = phi i64 [ %t482, %block_0_404a56 ], [ %t534, %block_0_404a76 ]
  %t496 = phi i64 [ %t483, %block_0_404a56 ], [ %t535, %block_0_404a76 ]
  %t497 = phi i64 [ %t484, %block_0_404a56 ], [ %t536, %block_0_404a76 ]
  %t498 = phi i64 [ %t485, %block_0_404a56 ], [ %t537, %block_0_404a76 ]
  %t499 = phi i512 [ %t486, %block_0_404a56 ], [ %t538, %block_0_404a76 ]
  ; r458 := (bv_add r451 (0x10 : bv 64))
  %t500 = add i64 %t493, 16
  ; r459 := (read r458 (bv 64))
  %t501 = inttoptr i64 %t500 to i64*
  %t502 = load i64, i64* %t501
  ; r460 := (trunc r459 8)
  %t503 = trunc i64 %t502 to i8
  ; r461 := (bv_and r460 (0x8 : bv 8))
  %t504 = and i8 %t503, 8
  ; r462 := (eq r461 (0x0 : bv 8))
  %t505 = icmp eq i8 %t504, 0
  br i1 %t505, label %block_0_404a76, label %block_0_404a68
block_0_404a68:
  %t506 = phi i64 [ %t502, %block_0_404a60 ]
  %t507 = phi i64 [ %t492, %block_0_404a60 ]
  %t508 = phi i64 [ %t493, %block_0_404a60 ]
  %t509 = phi i64 [ %t494, %block_0_404a60 ]
  %t510 = phi i64 [ %t495, %block_0_404a60 ]
  %t511 = phi i64 [ %t496, %block_0_404a60 ]
  %t512 = phi i64 [ %t497, %block_0_404a60 ]
  %t513 = phi i64 [ %t498, %block_0_404a60 ]
  %t514 = phi i512 [ %t499, %block_0_404a60 ]
  ; r472 := (bv_add r468 (0x20 : bv 64))
  %t515 = add i64 %t511, 32
  ; r473 := (read r472 (bv 64))
  %t516 = inttoptr i64 %t515 to i64*
  %t517 = load i64, i64* %t516
  ; r474 := (read r472 (bv 64))
  %t518 = inttoptr i64 %t515 to i64*
  %t519 = load i64, i64* %t518
  ; r475 := (bv_add r473 (0xffffffffffffffff : bv 64))
  %t520 = add i64 %t517, 18446744073709551615
  ; write r472 r475
  %t521 = inttoptr i64 %t515 to i64*
  store i64 %t520, i64* %t521
  ; r476 := (bv_xor r463 (0x8 : bv 64))
  %t522 = xor i64 %t506, 8
  ; r477 := (bv_add r469 (0x60 : bv 64))
  %t523 = add i64 %t512, 96
  ; r478 := (read r477 (bv 64))
  %t524 = inttoptr i64 %t523 to i64*
  %t525 = load i64, i64* %t524
  ; r479 := (read r477 (bv 64))
  %t526 = inttoptr i64 %t523 to i64*
  %t527 = load i64, i64* %t526
  ; r480 := (bv_add r478 (0xffffffffffffffff : bv 64))
  %t528 = add i64 %t525, 18446744073709551615
  ; write r477 r480
  %t529 = inttoptr i64 %t523 to i64*
  store i64 %t528, i64* %t529
  br label %block_0_404a76
block_0_404a76:
  %t530 = phi i64 [ %t502, %block_0_404a60 ], [ %t522, %block_0_404a68 ]
  %t531 = phi i64 [ %t492, %block_0_404a60 ], [ %t507, %block_0_404a68 ]
  %t532 = phi i64 [ %t493, %block_0_404a60 ], [ %t508, %block_0_404a68 ]
  %t533 = phi i64 [ %t494, %block_0_404a60 ], [ %t509, %block_0_404a68 ]
  %t534 = phi i64 [ %t495, %block_0_404a60 ], [ %t510, %block_0_404a68 ]
  %t535 = phi i64 [ %t496, %block_0_404a60 ], [ %t511, %block_0_404a68 ]
  %t536 = phi i64 [ %t497, %block_0_404a60 ], [ %t512, %block_0_404a68 ]
  %t537 = phi i64 [ %t498, %block_0_404a60 ], [ %t513, %block_0_404a68 ]
  %t538 = phi i512 [ %t499, %block_0_404a60 ], [ %t514, %block_0_404a68 ]
  ; r490 := (bv_add r481 (0x10 : bv 64))
  %t539 = add i64 %t530, 16
  ; r491 := (bv_add r482 (0x1 : bv 64))
  %t540 = add i64 %t531, 1
  ; r492 := (bv_add r483 (0x10 : bv 64))
  %t541 = add i64 %t532, 16
  ; write r492 r490
  %t542 = inttoptr i64 %t541 to i64*
  store i64 %t539, i64* %t542
  ; r493 := (bv_add r483 (0x18 : bv 64))
  %t543 = add i64 %t532, 24
  ; r494 := (bv_ult r485 r491)
  %t544 = icmp ult i64 %t534, %t540
  br i1 %t544, label %block_0_404a8b, label %block_0_404a60
block_0_404a8b:
  %t545 = phi i64 [ %t543, %block_0_404a76 ]
  %t546 = phi i64 [ %t533, %block_0_404a76 ]
  %t547 = phi i64 [ %t537, %block_0_404a76 ]
  %t548 = phi i512 [ %t538, %block_0_404a76 ]
  br label %block_0_404960
block_0_404a90:
  %t549 = phi i64 [ %t397, %block_0_4049b6 ]
  %t550 = phi i64 [ %t387, %block_0_4049b6 ]
  %t551 = phi i64 [ %t388, %block_0_4049b6 ]
  %t552 = phi i64 [ %t394, %block_0_4049b6 ]
  %t553 = phi i64 [ %t389, %block_0_4049b6 ]
  %t554 = phi i512 [ %t390, %block_0_4049b6 ]
  ; r505 := (trunc r500 32)
  %t555 = trunc i64 %t550 to i32
  ; r506 := (uext r505 64)
  %t556 = zext i32 %t555 to i64
  ; r507 := (trunc r499 32)
  %t557 = trunc i64 %t549 to i32
  ; r508 := (bv_sub (0x20 : bv 32) r507)
  %t558 = sub i32 32, %t557
  ; r509 := (trunc r508 8)
  %t559 = trunc i32 %t558 to i8
  ; r510 := (bv_and r509 (0x1f : bv 8))
  %t560 = and i8 %t559, 31
  ; r511 := (eq r510 (0x0 : bv 8))
  %t561 = icmp eq i8 %t560, 0
  ; r512 := (uext r510 32)
  %t562 = zext i8 %t560 to i32
  ; r513 := (bv_shr (0xffffffff : bv 32) r512)
  %t563 = lshr i32 4294967295, %t562
  ; r514 := (mux r511 (0xffffffff : bv 32) r513)
  %t564 = select i1 %t561, i32 4294967295, i32 %t563
  ; r515 := (bv_mul (0x4 : bv 64) r506)
  %t565 = mul i64 4, %t556
  ; r516 := (bv_add r503 r515)
  %t566 = add i64 %t553, %t565
  ; r517 := (bv_add r516 (0x10 : bv 64))
  %t567 = add i64 %t566, 16
  ; write r517 r514
  %t568 = inttoptr i64 %t567 to i32*
  store i32 %t564, i32* %t568
  br label %block_0_4049cf
block_0_404aaa:
  %t569 = phi i64 [ %t348, %block_0_40497c ]
  %t570 = phi i64 [ %t349, %block_0_40497c ]
  %t571 = phi i512 [ %t350, %block_0_40497c ]
  ; write r519 (0x0 : bv 64)
  %t572 = inttoptr i64 %t570 to i64*
  store i64 0, i64* %t572
  ; r521 := (bitcast r520 (vec 8 double))
  %t573 = bitcast i512 %t571 to <8 x double>
  ; r522 := (tuple (0x0 : bv 64) r518 r521)
  %t574 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t575 = insertvalue { i64, i64, <8 x double> } %t574, i64 %t569, 1
  %t576 = insertvalue { i64, i64, <8 x double> } %t575, <8 x double> %t573, 2
  ret { i64, i64, <8 x double> } %t576
}
define { i64, i64, <8 x double> } @base_pages_alloc(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3, <8 x double> %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10) {
block_0_404ac0:
  ; r0 := (read (0x630121 : bv 64) (bv 8))
  %t0 = inttoptr i64 6488353 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (eq r0 (0x0 : bv 8))
  %t2 = icmp eq i8 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r4 := (bitcast arg4 (bv 512))
  %t5 = bitcast <8 x double> %arg4 to i512
  ; r5 := (bitcast arg5 (bv 512))
  %t6 = bitcast <8 x double> %arg5 to i512
  ; r6 := (bitcast arg6 (bv 512))
  %t7 = bitcast <8 x double> %arg6 to i512
  ; r7 := (bitcast arg7 (bv 512))
  %t8 = bitcast <8 x double> %arg7 to i512
  ; r8 := (bitcast arg8 (bv 512))
  %t9 = bitcast <8 x double> %arg8 to i512
  ; r9 := (bitcast arg9 (bv 512))
  %t10 = bitcast <8 x double> %arg9 to i512
  ; r10 := (bitcast arg10 (bv 512))
  %t11 = bitcast <8 x double> %arg10 to i512
  br i1 %t2, label %block_0_404ad9, label %block_0_404ad0
block_0_404ad0:
  %t12 = phi i64 [ %arg2, %block_0_404ac0 ]
  %t13 = phi i64 [ %arg1, %block_0_404ac0 ]
  %t14 = phi i64 [ %arg0, %block_0_404ac0 ]
  %t15 = phi i512 [ %t4, %block_0_404ac0 ]
  %t16 = phi i512 [ %t5, %block_0_404ac0 ]
  %t17 = phi i512 [ %t6, %block_0_404ac0 ]
  %t18 = phi i512 [ %t7, %block_0_404ac0 ]
  %t19 = phi i512 [ %t8, %block_0_404ac0 ]
  %t20 = phi i512 [ %t9, %block_0_404ac0 ]
  %t21 = phi i512 [ %t10, %block_0_404ac0 ]
  %t22 = phi i512 [ %t11, %block_0_404ac0 ]
  ; r22 := (eq r13 (0x0 : bv 64))
  %t23 = icmp eq i64 %t14, 0
  br i1 %t23, label %block_0_404ad9, label %block_0_404ba4
block_0_404ad9:
  %t24 = phi i64 [ %arg2, %block_0_404ac0 ], [ %t12, %block_0_404ad0 ], [ %t183, %block_0_404bbc ]
  %t25 = phi i64 [ %arg1, %block_0_404ac0 ], [ %t13, %block_0_404ad0 ], [ %t185, %block_0_404bbc ]
  %t26 = phi i64 [ %arg0, %block_0_404ac0 ], [ %t14, %block_0_404ad0 ], [ %t186, %block_0_404bbc ]
  %t27 = phi i512 [ %t3, %block_0_404ac0 ], [ %t15, %block_0_404ad0 ], [ %t187, %block_0_404bbc ]
  ; r27 := (read (0x630120 : bv 64) (bv 8))
  %t28 = inttoptr i64 6488352 to i8*
  %t29 = load i8, i8* %t28
  ; r28 := (eq r27 (0x0 : bv 8))
  %t30 = icmp eq i8 %t29, 0
  br i1 %t30, label %block_0_404b80, label %block_0_404ae6
block_0_404ae6:
  %t31 = phi i64 [ %t24, %block_0_404ad9 ]
  %t32 = phi i64 [ %t25, %block_0_404ad9 ]
  %t33 = phi i64 [ %t26, %block_0_404ad9 ]
  %t34 = phi i512 [ %t27, %block_0_404ad9 ]
  ; r33 := (read (0x6356e8 : bv 64) (bv 32))
  %t35 = inttoptr i64 6510312 to i32*
  %t36 = load i32, i32* %t35
  ; r34 := (eq r33 (0x0 : bv 32))
  %t37 = icmp eq i32 %t36, 0
  br i1 %t37, label %block_0_404af4, label %block_0_404b8a
block_0_404af4:
  %t38 = phi i64 [ %t31, %block_0_404ae6 ]
  %t39 = phi i64 [ %t32, %block_0_404ae6 ]
  %t40 = phi i64 [ %t33, %block_0_404ae6 ]
  %t41 = phi i512 [ %t34, %block_0_404ae6 ]
  ; r39 := (read (0x6355c8 : bv 64) (bv 64))
  %t42 = inttoptr i64 6510024 to i64*
  %t43 = load i64, i64* %t42
  ; r40 := (eq r39 (0xffffffffffffffff : bv 64))
  %t44 = icmp eq i64 %t43, 18446744073709551615
  br i1 %t44, label %block_0_404b5f, label %block_0_404afe
block_0_404afe:
  %t45 = phi i64 [ %t38, %block_0_404af4 ], [ %t147, %block_0_404b94 ]
  %t46 = phi i64 [ %t39, %block_0_404af4 ], [ %t148, %block_0_404b94 ]
  %t47 = phi i64 [ %t40, %block_0_404af4 ], [ %t149, %block_0_404b94 ]
  %t48 = phi i512 [ %t41, %block_0_404af4 ], [ %t150, %block_0_404b94 ]
  ; r45 := (read (0x635518 : bv 64) (bv 64))
  %t49 = inttoptr i64 6509848 to i64*
  %t50 = load i64, i64* %t49
  ; r46 := (bv_add r43 r45)
  %t51 = add i64 %t47, %t50
  ; r47 := (bv_complement r45)
  %t52 = xor i64 %t50, -1
  ; r48 := (bv_and r46 r47)
  %t53 = and i64 %t51, %t52
  br label %block_0_404b10
block_0_404b10:
  %t54 = phi i64 [ %t45, %block_0_404afe ], [ %t105, %block_0_404b59 ]
  %t55 = phi i64 [ %t53, %block_0_404afe ], [ %t101, %block_0_404b59 ]
  %t56 = phi i64 [ %t46, %block_0_404afe ], [ %t102, %block_0_404b59 ]
  %t57 = phi i64 [ %t47, %block_0_404afe ], [ %t103, %block_0_404b59 ]
  %t58 = phi i512 [ %t48, %block_0_404afe ], [ %t104, %block_0_404b59 ]
  ; r54 := (bitcast r53 (vec 8 double))
  %t59 = bitcast i512 %t58 to <8 x double>
  ; r55 := call sbrk((0x0 : bv 64), r51, r49, r54)
  %t60 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @sbrk(i64 0, i64 %t56, i64 %t54, <8 x double> %t59)
  ; r56 := (tuple_field r55 0)
  %t61 = extractvalue { i64, i64, <8 x double> } %t60, 0
  ; r57 := (tuple_field r55 1)
  %t62 = extractvalue { i64, i64, <8 x double> } %t60, 1
  ; r58 := (tuple_field r55 2)
  %t63 = extractvalue { i64, i64, <8 x double> } %t60, 2
  ; r59 := (bitcast r58 (bv 512))
  %t64 = bitcast <8 x double> %t63 to i512
  br label %block_0_404b17
block_0_404b17:
  %t65 = phi i64 [ %t61, %block_0_404b10 ]
  %t66 = phi i64 [ %t62, %block_0_404b10 ]
  %t67 = phi i64 [ %t55, %block_0_404b10 ]
  %t68 = phi i64 [ %t56, %block_0_404b10 ]
  %t69 = phi i64 [ %t57, %block_0_404b10 ]
  %t70 = phi i512 [ %t64, %block_0_404b10 ]
  ; write (0x6355d0 : bv 64) r60
  %t71 = inttoptr i64 6510032 to i64*
  store i64 %t65, i64* %t71
  ; r66 := (read (0x635518 : bv 64) (bv 64))
  %t72 = inttoptr i64 6509848 to i64*
  %t73 = load i64, i64* %t72
  ; r67 := (bv_and r60 r66)
  %t74 = and i64 %t65, %t73
  ; r68 := (read (0x635510 : bv 64) (bv 64))
  %t75 = inttoptr i64 6509840 to i64*
  %t76 = load i64, i64* %t75
  ; r69 := (bv_sub r68 r67)
  %t77 = sub i64 %t76, %t74
  ; r70 := (bv_add r69 r62)
  %t78 = add i64 %t77, %t67
  ; r71 := (eq r64 r69)
  %t79 = icmp eq i64 %t69, %t77
  ; r72 := (bv_ule r69 r64)
  %t80 = icmp ule i64 %t77, %t69
  ; r73 := (not r71)
  %t81 = icmp eq i1 %t79, 0
  ; r74 := (and r72 r73)
  %t82 = and i1 %t80, %t81
  ; r75 := (mux r74 r70 r69)
  %t83 = select i1 %t82, i64 %t78, i64 %t77
  ; r76 := (bitcast r65 (vec 8 double))
  %t84 = bitcast i512 %t70 to <8 x double>
  ; r77 := call sbrk(r75, r63, r61, r76)
  %t85 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @sbrk(i64 %t83, i64 %t68, i64 %t66, <8 x double> %t84)
  ; r78 := (tuple_field r77 0)
  %t86 = extractvalue { i64, i64, <8 x double> } %t85, 0
  ; r79 := (tuple_field r77 1)
  %t87 = extractvalue { i64, i64, <8 x double> } %t85, 1
  ; r80 := (tuple_field r77 2)
  %t88 = extractvalue { i64, i64, <8 x double> } %t85, 2
  ; r81 := (bitcast r80 (bv 512))
  %t89 = bitcast <8 x double> %t88 to i512
  br label %block_0_404b42
block_0_404b42:
  %t90 = phi i64 [ %t86, %block_0_404b17 ]
  %t91 = phi i64 [ %t83, %block_0_404b17 ]
  %t92 = phi i64 [ %t67, %block_0_404b17 ]
  %t93 = phi i64 [ %t68, %block_0_404b17 ]
  %t94 = phi i64 [ %t69, %block_0_404b17 ]
  %t95 = phi i512 [ %t89, %block_0_404b17 ]
  ; r88 := (read (0x6355d0 : bv 64) (bv 64))
  %t96 = inttoptr i64 6510032 to i64*
  %t97 = load i64, i64* %t96
  ; r89 := (eq r82 r88)
  %t98 = icmp eq i64 %t90, %t97
  ; write (0x6355c8 : bv 64) r82
  %t99 = inttoptr i64 6510024 to i64*
  store i64 %t90, i64* %t99
  br i1 %t98, label %block_0_404be4, label %block_0_404b59
block_0_404b59:
  %t100 = phi i64 [ %t90, %block_0_404b42 ]
  %t101 = phi i64 [ %t92, %block_0_404b42 ]
  %t102 = phi i64 [ %t93, %block_0_404b42 ]
  %t103 = phi i64 [ %t94, %block_0_404b42 ]
  %t104 = phi i512 [ %t95, %block_0_404b42 ]
  ; r95 := (bv_add r90 (0x1 : bv 64))
  %t105 = add i64 %t100, 1
  ; r96 := (eq r90 (0xffffffffffffffff : bv 64))
  %t106 = icmp eq i64 %t100, 18446744073709551615
  br i1 %t106, label %block_0_404b5f, label %block_0_404b10
block_0_404b5f:
  %t107 = phi i64 [ %t38, %block_0_404af4 ], [ %t105, %block_0_404b59 ], [ %t154, %block_0_404ba2 ]
  %t108 = phi i64 [ %t39, %block_0_404af4 ], [ %t102, %block_0_404b59 ], [ %t155, %block_0_404ba2 ]
  %t109 = phi i512 [ %t41, %block_0_404af4 ], [ %t104, %block_0_404b59 ], [ %t156, %block_0_404ba2 ]
  ; r100 := (read (0x6356e8 : bv 64) (bv 32))
  %t110 = inttoptr i64 6510312 to i32*
  %t111 = load i32, i32* %t110
  ; r101 := (eq r100 (0x0 : bv 32))
  %t112 = icmp eq i32 %t111, 0
  br i1 %t112, label %block_0_404b80, label %block_0_404b69
block_0_404b69:
  %t113 = phi i64 [ %t107, %block_0_404b5f ]
  %t114 = phi i64 [ %t108, %block_0_404b5f ]
  %t115 = phi i512 [ %t109, %block_0_404b5f ]
  ; r105 := (bitcast r104 (vec 8 double))
  %t116 = bitcast i512 %t115 to <8 x double>
  ; r106 := call _spinunlock_stub((0x6355a0 : bv 64), r103, r102, r105)
  %t117 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6509984, i64 %t114, i64 %t113, <8 x double> %t116)
  ; r107 := (tuple_field r106 0)
  %t118 = extractvalue { i64, i64, <8 x double> } %t117, 0
  ; r108 := (tuple_field r106 1)
  %t119 = extractvalue { i64, i64, <8 x double> } %t117, 1
  ; r109 := (tuple_field r106 2)
  %t120 = extractvalue { i64, i64, <8 x double> } %t117, 2
  ; r110 := (bitcast r109 (bv 512))
  %t121 = bitcast <8 x double> %t120 to i512
  br label %block_0_404b73
block_0_404b73:
  %t122 = phi i64 [ %t119, %block_0_404b69 ]
  %t123 = phi i512 [ %t121, %block_0_404b69 ]
  ; r113 := (bitcast r112 (vec 8 double))
  %t124 = bitcast i512 %t123 to <8 x double>
  ; r114 := (tuple (0x1 : bv 64) r111 r113)
  %t125 = insertvalue { i64, i64, <8 x double> } undef, i64 1, 0
  %t126 = insertvalue { i64, i64, <8 x double> } %t125, i64 %t122, 1
  %t127 = insertvalue { i64, i64, <8 x double> } %t126, <8 x double> %t124, 2
  ret { i64, i64, <8 x double> } %t127
block_0_404b80:
  %t128 = phi i64 [ %t24, %block_0_404ad9 ], [ %t107, %block_0_404b5f ]
  %t129 = phi i512 [ %t27, %block_0_404ad9 ], [ %t109, %block_0_404b5f ]
  br label %block_0_404b85
block_0_404b85:
  %t130 = phi i64 [ 1, %block_0_404b80 ], [ 0, %block_0_404be4 ], [ 0, %block_0_404c1e ]
  %t131 = phi i64 [ %t128, %block_0_404b80 ], [ %t210, %block_0_404be4 ], [ %t223, %block_0_404c1e ]
  %t132 = phi i512 [ %t129, %block_0_404b80 ], [ %t204, %block_0_404be4 ], [ %t224, %block_0_404c1e ]
  ; r120 := (bitcast r119 (vec 8 double))
  %t133 = bitcast i512 %t132 to <8 x double>
  ; r121 := (tuple r117 r118 r120)
  %t134 = insertvalue { i64, i64, <8 x double> } undef, i64 %t130, 0
  %t135 = insertvalue { i64, i64, <8 x double> } %t134, i64 %t131, 1
  %t136 = insertvalue { i64, i64, <8 x double> } %t135, <8 x double> %t133, 2
  ret { i64, i64, <8 x double> } %t136
block_0_404b8a:
  %t137 = phi i64 [ %t31, %block_0_404ae6 ]
  %t138 = phi i64 [ %t32, %block_0_404ae6 ]
  %t139 = phi i64 [ %t33, %block_0_404ae6 ]
  %t140 = phi i512 [ %t34, %block_0_404ae6 ]
  ; r126 := (bitcast r125 (vec 8 double))
  %t141 = bitcast i512 %t140 to <8 x double>
  ; r127 := call _spinlock_stub((0x6355a0 : bv 64), r123, r122, r126)
  %t142 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6509984, i64 %t138, i64 %t137, <8 x double> %t141)
  ; r128 := (tuple_field r127 0)
  %t143 = extractvalue { i64, i64, <8 x double> } %t142, 0
  ; r129 := (tuple_field r127 1)
  %t144 = extractvalue { i64, i64, <8 x double> } %t142, 1
  ; r130 := (tuple_field r127 2)
  %t145 = extractvalue { i64, i64, <8 x double> } %t142, 2
  ; r131 := (bitcast r130 (bv 512))
  %t146 = bitcast <8 x double> %t145 to i512
  br label %block_0_404b94
block_0_404b94:
  %t147 = phi i64 [ %t144, %block_0_404b8a ]
  %t148 = phi i64 [ %t138, %block_0_404b8a ]
  %t149 = phi i64 [ %t139, %block_0_404b8a ]
  %t150 = phi i512 [ %t146, %block_0_404b8a ]
  ; r136 := (read (0x6355c8 : bv 64) (bv 64))
  %t151 = inttoptr i64 6510024 to i64*
  %t152 = load i64, i64* %t151
  ; r137 := (eq r136 (0xffffffffffffffff : bv 64))
  %t153 = icmp eq i64 %t152, 18446744073709551615
  br i1 %t153, label %block_0_404ba2, label %block_0_404afe
block_0_404ba2:
  %t154 = phi i64 [ %t147, %block_0_404b94 ]
  %t155 = phi i64 [ %t148, %block_0_404b94 ]
  %t156 = phi i512 [ %t150, %block_0_404b94 ]
  br label %block_0_404b5f
block_0_404ba4:
  %t157 = phi i64 [ %t13, %block_0_404ad0 ]
  %t158 = phi i64 [ %t14, %block_0_404ad0 ]
  %t159 = phi i512 [ %t15, %block_0_404ad0 ]
  %t160 = phi i512 [ %t16, %block_0_404ad0 ]
  %t161 = phi i512 [ %t17, %block_0_404ad0 ]
  %t162 = phi i512 [ %t18, %block_0_404ad0 ]
  %t163 = phi i512 [ %t19, %block_0_404ad0 ]
  %t164 = phi i512 [ %t20, %block_0_404ad0 ]
  %t165 = phi i512 [ %t21, %block_0_404ad0 ]
  %t166 = phi i512 [ %t22, %block_0_404ad0 ]
  ; r151 := (bv_add r142 (0xfff : bv 64))
  %t167 = add i64 %t158, 4095
  ; r152 := (bv_and r151 (0xfffffffffffff000 : bv 64))
  %t168 = and i64 %t167, 18446744073709547520
  ; r153 := (bitcast r143 (vec 8 double))
  %t169 = bitcast i512 %t159 to <8 x double>
  ; r154 := (bitcast r144 (vec 8 double))
  %t170 = bitcast i512 %t160 to <8 x double>
  ; r155 := (bitcast r145 (vec 8 double))
  %t171 = bitcast i512 %t161 to <8 x double>
  ; r156 := (bitcast r146 (vec 8 double))
  %t172 = bitcast i512 %t162 to <8 x double>
  ; r157 := (bitcast r147 (vec 8 double))
  %t173 = bitcast i512 %t163 to <8 x double>
  ; r158 := (bitcast r148 (vec 8 double))
  %t174 = bitcast i512 %t164 to <8 x double>
  ; r159 := (bitcast r149 (vec 8 double))
  %t175 = bitcast i512 %t165 to <8 x double>
  ; r160 := (bitcast r150 (vec 8 double))
  %t176 = bitcast i512 %t166 to <8 x double>
  ; r161 := call pages_map((0x0 : bv 64), r152, r153, r154, r155, r156, r157, r158, r159, r160)
  %t177 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pages_map(i64 0, i64 %t168, <8 x double> %t169, <8 x double> %t170, <8 x double> %t171, <8 x double> %t172, <8 x double> %t173, <8 x double> %t174, <8 x double> %t175, <8 x double> %t176)
  ; r162 := (tuple_field r161 0)
  %t178 = extractvalue { i64, i64, <8 x double> } %t177, 0
  ; r163 := (tuple_field r161 1)
  %t179 = extractvalue { i64, i64, <8 x double> } %t177, 1
  ; r164 := (tuple_field r161 2)
  %t180 = extractvalue { i64, i64, <8 x double> } %t177, 2
  ; r165 := (bitcast r164 (bv 512))
  %t181 = bitcast <8 x double> %t180 to i512
  br label %block_0_404bbc
block_0_404bbc:
  %t182 = phi i64 [ %t178, %block_0_404ba4 ]
  %t183 = phi i64 [ %t179, %block_0_404ba4 ]
  %t184 = phi i64 [ %t168, %block_0_404ba4 ]
  %t185 = phi i64 [ %t157, %block_0_404ba4 ]
  %t186 = phi i64 [ %t158, %block_0_404ba4 ]
  %t187 = phi i512 [ %t181, %block_0_404ba4 ]
  ; r172 := (eq r166 (0x0 : bv 64))
  %t188 = icmp eq i64 %t182, 0
  ; write (0x635658 : bv 64) r166
  %t189 = inttoptr i64 6510168 to i64*
  store i64 %t182, i64* %t189
  br i1 %t188, label %block_0_404ad9, label %block_0_404bcc
block_0_404bcc:
  %t190 = phi i64 [ %t182, %block_0_404bbc ]
  %t191 = phi i64 [ %t183, %block_0_404bbc ]
  %t192 = phi i64 [ %t184, %block_0_404bbc ]
  %t193 = phi i512 [ %t187, %block_0_404bbc ]
  ; write (0x635660 : bv 64) r173
  %t194 = inttoptr i64 6510176 to i64*
  store i64 %t190, i64* %t194
  ; r177 := (bv_add r173 r175)
  %t195 = add i64 %t190, %t192
  ; write (0x635668 : bv 64) r177
  %t196 = inttoptr i64 6510184 to i64*
  store i64 %t195, i64* %t196
  ; r178 := (bitcast r176 (vec 8 double))
  %t197 = bitcast i512 %t193 to <8 x double>
  ; r179 := (tuple (0x0 : bv 64) r174 r178)
  %t198 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t199 = insertvalue { i64, i64, <8 x double> } %t198, i64 %t191, 1
  %t200 = insertvalue { i64, i64, <8 x double> } %t199, <8 x double> %t197, 2
  ret { i64, i64, <8 x double> } %t200
block_0_404be4:
  %t201 = phi i64 [ %t90, %block_0_404b42 ]
  %t202 = phi i64 [ %t91, %block_0_404b42 ]
  %t203 = phi i64 [ %t93, %block_0_404b42 ]
  %t204 = phi i512 [ %t95, %block_0_404b42 ]
  ; write (0x635658 : bv 64) r180
  %t205 = inttoptr i64 6510168 to i64*
  store i64 %t201, i64* %t205
  ; write (0x635660 : bv 64) r180
  %t206 = inttoptr i64 6510176 to i64*
  store i64 %t201, i64* %t206
  ; r184 := (bv_add r180 r181)
  %t207 = add i64 %t201, %t202
  ; r185 := (read (0x6356e8 : bv 64) (bv 32))
  %t208 = inttoptr i64 6510312 to i32*
  %t209 = load i32, i32* %t208
  ; r186 := (uext r185 64)
  %t210 = zext i32 %t209 to i64
  ; write (0x6355d0 : bv 64) r184
  %t211 = inttoptr i64 6510032 to i64*
  store i64 %t207, i64* %t211
  ; write (0x635668 : bv 64) r184
  %t212 = inttoptr i64 6510184 to i64*
  store i64 %t207, i64* %t212
  ; r187 := (eq r185 (0x0 : bv 32))
  %t213 = icmp eq i32 %t209, 0
  br i1 %t213, label %block_0_404b85, label %block_0_404c14
block_0_404c14:
  %t214 = phi i64 [ %t210, %block_0_404be4 ]
  %t215 = phi i64 [ %t203, %block_0_404be4 ]
  %t216 = phi i512 [ %t204, %block_0_404be4 ]
  ; r191 := (bitcast r190 (vec 8 double))
  %t217 = bitcast i512 %t216 to <8 x double>
  ; r192 := call _spinunlock_stub((0x6355a0 : bv 64), r189, r188, r191)
  %t218 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6509984, i64 %t215, i64 %t214, <8 x double> %t217)
  ; r193 := (tuple_field r192 0)
  %t219 = extractvalue { i64, i64, <8 x double> } %t218, 0
  ; r194 := (tuple_field r192 1)
  %t220 = extractvalue { i64, i64, <8 x double> } %t218, 1
  ; r195 := (tuple_field r192 2)
  %t221 = extractvalue { i64, i64, <8 x double> } %t218, 2
  ; r196 := (bitcast r195 (bv 512))
  %t222 = bitcast <8 x double> %t221 to i512
  br label %block_0_404c1e
block_0_404c1e:
  %t223 = phi i64 [ %t220, %block_0_404c14 ]
  %t224 = phi i512 [ %t222, %block_0_404c14 ]
  br label %block_0_404b85
}
define { i64, i64, <8 x double> } @base_alloc(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3, <8 x double> %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10) {
block_0_404c30:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (bv_add arg0 (0x3f : bv 64))
  %t2 = add i64 %arg0, 63
  ; r2 := (bv_and r1 (0xffffffffffffffc0 : bv 64))
  %t3 = and i64 %t2, 18446744073709551552
  ; r3 := (eq r0 (0x0 : bv 32))
  %t4 = icmp eq i32 %t1, 0
  ; r4 := (bitcast arg3 (bv 512))
  %t5 = bitcast <8 x double> %arg3 to i512
  ; r5 := (bitcast arg4 (bv 512))
  %t6 = bitcast <8 x double> %arg4 to i512
  ; r6 := (bitcast arg5 (bv 512))
  %t7 = bitcast <8 x double> %arg5 to i512
  ; r7 := (bitcast arg6 (bv 512))
  %t8 = bitcast <8 x double> %arg6 to i512
  ; r8 := (bitcast arg7 (bv 512))
  %t9 = bitcast <8 x double> %arg7 to i512
  ; r9 := (bitcast arg8 (bv 512))
  %t10 = bitcast <8 x double> %arg8 to i512
  ; r10 := (bitcast arg9 (bv 512))
  %t11 = bitcast <8 x double> %arg9 to i512
  ; r11 := (bitcast arg10 (bv 512))
  %t12 = bitcast <8 x double> %arg10 to i512
  ; r12 := (bitcast arg3 (bv 512))
  %t13 = bitcast <8 x double> %arg3 to i512
  ; r13 := (bitcast arg4 (bv 512))
  %t14 = bitcast <8 x double> %arg4 to i512
  ; r14 := (bitcast arg5 (bv 512))
  %t15 = bitcast <8 x double> %arg5 to i512
  ; r15 := (bitcast arg6 (bv 512))
  %t16 = bitcast <8 x double> %arg6 to i512
  ; r16 := (bitcast arg7 (bv 512))
  %t17 = bitcast <8 x double> %arg7 to i512
  ; r17 := (bitcast arg8 (bv 512))
  %t18 = bitcast <8 x double> %arg8 to i512
  ; r18 := (bitcast arg9 (bv 512))
  %t19 = bitcast <8 x double> %arg9 to i512
  ; r19 := (bitcast arg10 (bv 512))
  %t20 = bitcast <8 x double> %arg10 to i512
  br i1 %t4, label %block_0_404c52, label %block_0_404cc0
block_0_404c52:
  %t21 = phi i64 [ %arg2, %block_0_404c30 ], [ %t130, %block_0_404cca ]
  %t22 = phi i64 [ %t3, %block_0_404c30 ], [ %t131, %block_0_404cca ]
  %t23 = phi i64 [ %arg1, %block_0_404c30 ], [ %t132, %block_0_404cca ]
  %t24 = phi i512 [ %t5, %block_0_404c30 ], [ %t133, %block_0_404cca ]
  %t25 = phi i512 [ %t6, %block_0_404c30 ], [ %t134, %block_0_404cca ]
  %t26 = phi i512 [ %t7, %block_0_404c30 ], [ %t135, %block_0_404cca ]
  %t27 = phi i512 [ %t8, %block_0_404c30 ], [ %t136, %block_0_404cca ]
  %t28 = phi i512 [ %t9, %block_0_404c30 ], [ %t137, %block_0_404cca ]
  %t29 = phi i512 [ %t10, %block_0_404c30 ], [ %t138, %block_0_404cca ]
  %t30 = phi i512 [ %t11, %block_0_404c30 ], [ %t139, %block_0_404cca ]
  %t31 = phi i512 [ %t12, %block_0_404c30 ], [ %t140, %block_0_404cca ]
  ; r31 := (read (0x635660 : bv 64) (bv 64))
  %t32 = inttoptr i64 6510176 to i64*
  %t33 = load i64, i64* %t32
  ; r32 := (bv_add r21 r31)
  %t34 = add i64 %t22, %t33
  ; r33 := (read (0x635668 : bv 64) (bv 64))
  %t35 = inttoptr i64 6510184 to i64*
  %t36 = load i64, i64* %t35
  ; r34 := (eq r32 r33)
  %t37 = icmp eq i64 %t34, %t36
  ; r35 := (bv_ule r33 r32)
  %t38 = icmp ule i64 %t36, %t34
  ; r36 := (not r34)
  %t39 = icmp eq i1 %t37, 0
  ; r37 := (and r35 r36)
  %t40 = and i1 %t38, %t39
  br i1 %t40, label %block_0_404c93, label %block_0_404c65
block_0_404c65:
  %t41 = phi i64 [ %t21, %block_0_404c52 ], [ %t84, %block_0_404c9b ]
  %t42 = phi i64 [ %t22, %block_0_404c52 ], [ %t85, %block_0_404c9b ]
  %t43 = phi i512 [ %t24, %block_0_404c52 ], [ %t87, %block_0_404c9b ]
  ; r41 := (read (0x635660 : bv 64) (bv 64))
  %t44 = inttoptr i64 6510176 to i64*
  %t45 = load i64, i64* %t44
  ; r42 := (read (0x6356e8 : bv 64) (bv 32))
  %t46 = inttoptr i64 6510312 to i32*
  %t47 = load i32, i32* %t46
  ; r43 := (uext r42 64)
  %t48 = zext i32 %t47 to i64
  ; r44 := (bv_add r39 r41)
  %t49 = add i64 %t42, %t45
  ; r45 := (eq r42 (0x0 : bv 32))
  %t50 = icmp eq i32 %t47, 0
  ; write (0x635660 : bv 64) r44
  %t51 = inttoptr i64 6510176 to i64*
  store i64 %t49, i64* %t51
  br i1 %t50, label %block_0_404c81, label %block_0_404cb0
block_0_404c81:
  %t52 = phi i64 [ %t41, %block_0_404c65 ], [ %t90, %block_0_404c9f ], [ %t110, %block_0_404cba ]
  %t53 = phi i64 [ %t45, %block_0_404c65 ], [ 0, %block_0_404c9f ], [ %t111, %block_0_404cba ]
  %t54 = phi i512 [ %t43, %block_0_404c65 ], [ %t92, %block_0_404c9f ], [ %t112, %block_0_404cba ]
  ; r49 := (bitcast r48 (vec 8 double))
  %t55 = bitcast i512 %t54 to <8 x double>
  ; r50 := (tuple r47 r46 r49)
  %t56 = insertvalue { i64, i64, <8 x double> } undef, i64 %t53, 0
  %t57 = insertvalue { i64, i64, <8 x double> } %t56, i64 %t52, 1
  %t58 = insertvalue { i64, i64, <8 x double> } %t57, <8 x double> %t55, 2
  ret { i64, i64, <8 x double> } %t58
block_0_404c93:
  %t59 = phi i64 [ %t21, %block_0_404c52 ]
  %t60 = phi i64 [ %t22, %block_0_404c52 ]
  %t61 = phi i64 [ %t23, %block_0_404c52 ]
  %t62 = phi i512 [ %t24, %block_0_404c52 ]
  %t63 = phi i512 [ %t25, %block_0_404c52 ]
  %t64 = phi i512 [ %t26, %block_0_404c52 ]
  %t65 = phi i512 [ %t27, %block_0_404c52 ]
  %t66 = phi i512 [ %t28, %block_0_404c52 ]
  %t67 = phi i512 [ %t29, %block_0_404c52 ]
  %t68 = phi i512 [ %t30, %block_0_404c52 ]
  %t69 = phi i512 [ %t31, %block_0_404c52 ]
  ; r62 := (bitcast r54 (vec 8 double))
  %t70 = bitcast i512 %t62 to <8 x double>
  ; r63 := (bitcast r55 (vec 8 double))
  %t71 = bitcast i512 %t63 to <8 x double>
  ; r64 := (bitcast r56 (vec 8 double))
  %t72 = bitcast i512 %t64 to <8 x double>
  ; r65 := (bitcast r57 (vec 8 double))
  %t73 = bitcast i512 %t65 to <8 x double>
  ; r66 := (bitcast r58 (vec 8 double))
  %t74 = bitcast i512 %t66 to <8 x double>
  ; r67 := (bitcast r59 (vec 8 double))
  %t75 = bitcast i512 %t67 to <8 x double>
  ; r68 := (bitcast r60 (vec 8 double))
  %t76 = bitcast i512 %t68 to <8 x double>
  ; r69 := (bitcast r61 (vec 8 double))
  %t77 = bitcast i512 %t69 to <8 x double>
  ; r70 := call base_pages_alloc(r52, r53, r51, r62, r63, r64, r65, r66, r67, r68, r69)
  %t78 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @base_pages_alloc(i64 %t60, i64 %t61, i64 %t59, <8 x double> %t70, <8 x double> %t71, <8 x double> %t72, <8 x double> %t73, <8 x double> %t74, <8 x double> %t75, <8 x double> %t76, <8 x double> %t77)
  ; r71 := (tuple_field r70 0)
  %t79 = extractvalue { i64, i64, <8 x double> } %t78, 0
  ; r72 := (tuple_field r70 1)
  %t80 = extractvalue { i64, i64, <8 x double> } %t78, 1
  ; r73 := (tuple_field r70 2)
  %t81 = extractvalue { i64, i64, <8 x double> } %t78, 2
  ; r74 := (bitcast r73 (bv 512))
  %t82 = bitcast <8 x double> %t81 to i512
  br label %block_0_404c9b
block_0_404c9b:
  %t83 = phi i64 [ %t79, %block_0_404c93 ]
  %t84 = phi i64 [ %t80, %block_0_404c93 ]
  %t85 = phi i64 [ %t60, %block_0_404c93 ]
  %t86 = phi i64 [ %t61, %block_0_404c93 ]
  %t87 = phi i512 [ %t82, %block_0_404c93 ]
  ; r80 := (trunc r75 8)
  %t88 = trunc i64 %t83 to i8
  ; r81 := (eq r80 (0x0 : bv 8))
  %t89 = icmp eq i8 %t88, 0
  br i1 %t89, label %block_0_404c65, label %block_0_404c9f
block_0_404c9f:
  %t90 = phi i64 [ %t84, %block_0_404c9b ]
  %t91 = phi i64 [ %t86, %block_0_404c9b ]
  %t92 = phi i512 [ %t87, %block_0_404c9b ]
  ; r85 := (read (0x6356e8 : bv 64) (bv 32))
  %t93 = inttoptr i64 6510312 to i32*
  %t94 = load i32, i32* %t93
  ; r86 := (eq r85 (0x0 : bv 32))
  %t95 = icmp eq i32 %t94, 0
  br i1 %t95, label %block_0_404c81, label %block_0_404cab
block_0_404cab:
  %t96 = phi i64 [ %t90, %block_0_404c9f ]
  %t97 = phi i64 [ 0, %block_0_404c9f ]
  %t98 = phi i64 [ %t91, %block_0_404c9f ]
  %t99 = phi i512 [ %t92, %block_0_404c9f ]
  br label %block_0_404cb0
block_0_404cb0:
  %t100 = phi i64 [ %t41, %block_0_404c65 ], [ %t96, %block_0_404cab ]
  %t101 = phi i64 [ %t45, %block_0_404c65 ], [ %t97, %block_0_404cab ]
  %t102 = phi i64 [ %t48, %block_0_404c65 ], [ %t98, %block_0_404cab ]
  %t103 = phi i512 [ %t43, %block_0_404c65 ], [ %t99, %block_0_404cab ]
  ; r95 := (bitcast r94 (vec 8 double))
  %t104 = bitcast i512 %t103 to <8 x double>
  ; r96 := call _spinunlock_stub((0x635680 : bv 64), r93, r91, r95)
  %t105 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6510208, i64 %t102, i64 %t100, <8 x double> %t104)
  ; r97 := (tuple_field r96 0)
  %t106 = extractvalue { i64, i64, <8 x double> } %t105, 0
  ; r98 := (tuple_field r96 1)
  %t107 = extractvalue { i64, i64, <8 x double> } %t105, 1
  ; r99 := (tuple_field r96 2)
  %t108 = extractvalue { i64, i64, <8 x double> } %t105, 2
  ; r100 := (bitcast r99 (bv 512))
  %t109 = bitcast <8 x double> %t108 to i512
  br label %block_0_404cba
block_0_404cba:
  %t110 = phi i64 [ %t107, %block_0_404cb0 ]
  %t111 = phi i64 [ %t101, %block_0_404cb0 ]
  %t112 = phi i512 [ %t109, %block_0_404cb0 ]
  br label %block_0_404c81
block_0_404cc0:
  %t113 = phi i64 [ %arg2, %block_0_404c30 ]
  %t114 = phi i64 [ %t3, %block_0_404c30 ]
  %t115 = phi i64 [ %arg1, %block_0_404c30 ]
  %t116 = phi i512 [ %t13, %block_0_404c30 ]
  %t117 = phi i512 [ %t14, %block_0_404c30 ]
  %t118 = phi i512 [ %t15, %block_0_404c30 ]
  %t119 = phi i512 [ %t16, %block_0_404c30 ]
  %t120 = phi i512 [ %t17, %block_0_404c30 ]
  %t121 = phi i512 [ %t18, %block_0_404c30 ]
  %t122 = phi i512 [ %t19, %block_0_404c30 ]
  %t123 = phi i512 [ %t20, %block_0_404c30 ]
  ; r115 := (bitcast r107 (vec 8 double))
  %t124 = bitcast i512 %t116 to <8 x double>
  ; r116 := call _spinlock_stub((0x635680 : bv 64), r106, r104, r115)
  %t125 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6510208, i64 %t115, i64 %t113, <8 x double> %t124)
  ; r117 := (tuple_field r116 0)
  %t126 = extractvalue { i64, i64, <8 x double> } %t125, 0
  ; r118 := (tuple_field r116 1)
  %t127 = extractvalue { i64, i64, <8 x double> } %t125, 1
  ; r119 := (tuple_field r116 2)
  %t128 = extractvalue { i64, i64, <8 x double> } %t125, 2
  ; r120 := (bitcast r119 (bv 512))
  %t129 = bitcast <8 x double> %t128 to i512
  br label %block_0_404cca
block_0_404cca:
  %t130 = phi i64 [ %t127, %block_0_404cc0 ]
  %t131 = phi i64 [ %t114, %block_0_404cc0 ]
  %t132 = phi i64 [ %t115, %block_0_404cc0 ]
  %t133 = phi i512 [ %t129, %block_0_404cc0 ]
  %t134 = phi i512 [ %t117, %block_0_404cc0 ]
  %t135 = phi i512 [ %t118, %block_0_404cc0 ]
  %t136 = phi i512 [ %t119, %block_0_404cc0 ]
  %t137 = phi i512 [ %t120, %block_0_404cc0 ]
  %t138 = phi i512 [ %t121, %block_0_404cc0 ]
  %t139 = phi i512 [ %t122, %block_0_404cc0 ]
  %t140 = phi i512 [ %t123, %block_0_404cc0 ]
  br label %block_0_404c52
}
define { i64, i64, <8 x double> } @base_node_alloc(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3, <8 x double> %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10) {
block_0_405b90:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  ; r3 := (bitcast arg4 (bv 512))
  %t4 = bitcast <8 x double> %arg4 to i512
  ; r4 := (bitcast arg5 (bv 512))
  %t5 = bitcast <8 x double> %arg5 to i512
  ; r5 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t9 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg3 (bv 512))
  %t11 = bitcast <8 x double> %arg3 to i512
  ; r11 := (bitcast arg4 (bv 512))
  %t12 = bitcast <8 x double> %arg4 to i512
  ; r12 := (bitcast arg5 (bv 512))
  %t13 = bitcast <8 x double> %arg5 to i512
  ; r13 := (bitcast arg6 (bv 512))
  %t14 = bitcast <8 x double> %arg6 to i512
  ; r14 := (bitcast arg7 (bv 512))
  %t15 = bitcast <8 x double> %arg7 to i512
  ; r15 := (bitcast arg8 (bv 512))
  %t16 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast arg9 (bv 512))
  %t17 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast arg10 (bv 512))
  %t18 = bitcast <8 x double> %arg10 to i512
  br i1 %t2, label %block_0_405b9b, label %block_0_405bd0
block_0_405b9b:
  %t19 = phi i64 [ %arg2, %block_0_405b90 ]
  %t20 = phi i64 [ %arg1, %block_0_405b90 ]
  %t21 = phi i512 [ %t3, %block_0_405b90 ]
  %t22 = phi i512 [ %t4, %block_0_405b90 ]
  %t23 = phi i512 [ %t5, %block_0_405b90 ]
  %t24 = phi i512 [ %t6, %block_0_405b90 ]
  %t25 = phi i512 [ %t7, %block_0_405b90 ]
  %t26 = phi i512 [ %t8, %block_0_405b90 ]
  %t27 = phi i512 [ %t9, %block_0_405b90 ]
  %t28 = phi i512 [ %t10, %block_0_405b90 ]
  ; r28 := (read (0x635670 : bv 64) (bv 64))
  %t29 = inttoptr i64 6510192 to i64*
  %t30 = load i64, i64* %t29
  ; r29 := (eq r28 (0x0 : bv 64))
  %t31 = icmp eq i64 %t30, 0
  br i1 %t31, label %block_0_405be6, label %block_0_405ba7
block_0_405ba7:
  %t32 = phi i64 [ %t19, %block_0_405b9b ], [ %t82, %block_0_405bda ]
  %t33 = phi i64 [ %t30, %block_0_405b9b ], [ %t93, %block_0_405bda ]
  %t34 = phi i64 [ %t20, %block_0_405b9b ], [ %t83, %block_0_405bda ]
  %t35 = phi i512 [ %t21, %block_0_405b9b ], [ %t84, %block_0_405bda ]
  ; r34 := (read r31 (bv 64))
  %t36 = inttoptr i64 %t33 to i64*
  %t37 = load i64, i64* %t36
  ; write (0x635670 : bv 64) r34
  %t38 = inttoptr i64 6510192 to i64*
  store i64 %t37, i64* %t38
  ; r35 := (read (0x6356e8 : bv 64) (bv 32))
  %t39 = inttoptr i64 6510312 to i32*
  %t40 = load i32, i32* %t39
  ; r36 := (eq r35 (0x0 : bv 32))
  %t41 = icmp eq i32 %t40, 0
  br i1 %t41, label %block_0_405bbb, label %block_0_405bc0
block_0_405bbb:
  %t42 = phi i64 [ %t32, %block_0_405ba7 ]
  %t43 = phi i64 [ %t33, %block_0_405ba7 ]
  %t44 = phi i512 [ %t35, %block_0_405ba7 ]
  ; r40 := (bitcast r39 (vec 8 double))
  %t45 = bitcast i512 %t44 to <8 x double>
  ; r41 := (tuple r38 r37 r40)
  %t46 = insertvalue { i64, i64, <8 x double> } undef, i64 %t43, 0
  %t47 = insertvalue { i64, i64, <8 x double> } %t46, i64 %t42, 1
  %t48 = insertvalue { i64, i64, <8 x double> } %t47, <8 x double> %t45, 2
  ret { i64, i64, <8 x double> } %t48
block_0_405bc0:
  %t49 = phi i64 [ %t32, %block_0_405ba7 ]
  %t50 = phi i64 [ %t33, %block_0_405ba7 ]
  %t51 = phi i64 [ %t34, %block_0_405ba7 ]
  %t52 = phi i512 [ %t35, %block_0_405ba7 ]
  ; r46 := (bitcast r45 (vec 8 double))
  %t53 = bitcast i512 %t52 to <8 x double>
  ; r47 := call _spinunlock_stub((0x635680 : bv 64), r44, r42, r46)
  %t54 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6510208, i64 %t51, i64 %t49, <8 x double> %t53)
  ; r48 := (tuple_field r47 0)
  %t55 = extractvalue { i64, i64, <8 x double> } %t54, 0
  ; r49 := (tuple_field r47 1)
  %t56 = extractvalue { i64, i64, <8 x double> } %t54, 1
  ; r50 := (tuple_field r47 2)
  %t57 = extractvalue { i64, i64, <8 x double> } %t54, 2
  ; r51 := (bitcast r50 (bv 512))
  %t58 = bitcast <8 x double> %t57 to i512
  br label %block_0_405bca
block_0_405bca:
  %t59 = phi i64 [ %t56, %block_0_405bc0 ]
  %t60 = phi i64 [ %t50, %block_0_405bc0 ]
  %t61 = phi i512 [ %t58, %block_0_405bc0 ]
  ; r55 := (bitcast r54 (vec 8 double))
  %t62 = bitcast i512 %t61 to <8 x double>
  ; r56 := (tuple r53 r52 r55)
  %t63 = insertvalue { i64, i64, <8 x double> } undef, i64 %t60, 0
  %t64 = insertvalue { i64, i64, <8 x double> } %t63, i64 %t59, 1
  %t65 = insertvalue { i64, i64, <8 x double> } %t64, <8 x double> %t62, 2
  ret { i64, i64, <8 x double> } %t65
block_0_405bd0:
  %t66 = phi i64 [ %arg2, %block_0_405b90 ]
  %t67 = phi i64 [ %arg1, %block_0_405b90 ]
  %t68 = phi i512 [ %t11, %block_0_405b90 ]
  %t69 = phi i512 [ %t12, %block_0_405b90 ]
  %t70 = phi i512 [ %t13, %block_0_405b90 ]
  %t71 = phi i512 [ %t14, %block_0_405b90 ]
  %t72 = phi i512 [ %t15, %block_0_405b90 ]
  %t73 = phi i512 [ %t16, %block_0_405b90 ]
  %t74 = phi i512 [ %t17, %block_0_405b90 ]
  %t75 = phi i512 [ %t18, %block_0_405b90 ]
  ; r67 := (bitcast r59 (vec 8 double))
  %t76 = bitcast i512 %t68 to <8 x double>
  ; r68 := call _spinlock_stub((0x635680 : bv 64), r58, r57, r67)
  %t77 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6510208, i64 %t67, i64 %t66, <8 x double> %t76)
  ; r69 := (tuple_field r68 0)
  %t78 = extractvalue { i64, i64, <8 x double> } %t77, 0
  ; r70 := (tuple_field r68 1)
  %t79 = extractvalue { i64, i64, <8 x double> } %t77, 1
  ; r71 := (tuple_field r68 2)
  %t80 = extractvalue { i64, i64, <8 x double> } %t77, 2
  ; r72 := (bitcast r71 (bv 512))
  %t81 = bitcast <8 x double> %t80 to i512
  br label %block_0_405bda
block_0_405bda:
  %t82 = phi i64 [ %t79, %block_0_405bd0 ]
  %t83 = phi i64 [ %t67, %block_0_405bd0 ]
  %t84 = phi i512 [ %t81, %block_0_405bd0 ]
  %t85 = phi i512 [ %t69, %block_0_405bd0 ]
  %t86 = phi i512 [ %t70, %block_0_405bd0 ]
  %t87 = phi i512 [ %t71, %block_0_405bd0 ]
  %t88 = phi i512 [ %t72, %block_0_405bd0 ]
  %t89 = phi i512 [ %t73, %block_0_405bd0 ]
  %t90 = phi i512 [ %t74, %block_0_405bd0 ]
  %t91 = phi i512 [ %t75, %block_0_405bd0 ]
  ; r83 := (read (0x635670 : bv 64) (bv 64))
  %t92 = inttoptr i64 6510192 to i64*
  %t93 = load i64, i64* %t92
  ; r84 := (eq r83 (0x0 : bv 64))
  %t94 = icmp eq i64 %t93, 0
  br i1 %t94, label %block_0_405be6, label %block_0_405ba7
block_0_405be6:
  %t95 = phi i64 [ %t19, %block_0_405b9b ], [ %t82, %block_0_405bda ]
  %t96 = phi i64 [ %t20, %block_0_405b9b ], [ %t83, %block_0_405bda ]
  %t97 = phi i512 [ %t21, %block_0_405b9b ], [ %t84, %block_0_405bda ]
  %t98 = phi i512 [ %t22, %block_0_405b9b ], [ %t85, %block_0_405bda ]
  %t99 = phi i512 [ %t23, %block_0_405b9b ], [ %t86, %block_0_405bda ]
  %t100 = phi i512 [ %t24, %block_0_405b9b ], [ %t87, %block_0_405bda ]
  %t101 = phi i512 [ %t25, %block_0_405b9b ], [ %t88, %block_0_405bda ]
  %t102 = phi i512 [ %t26, %block_0_405b9b ], [ %t89, %block_0_405bda ]
  %t103 = phi i512 [ %t27, %block_0_405b9b ], [ %t90, %block_0_405bda ]
  %t104 = phi i512 [ %t28, %block_0_405b9b ], [ %t91, %block_0_405bda ]
  ; r95 := (read (0x6356e8 : bv 64) (bv 32))
  %t105 = inttoptr i64 6510312 to i32*
  %t106 = load i32, i32* %t105
  ; r96 := (eq r95 (0x0 : bv 32))
  %t107 = icmp eq i32 %t106, 0
  br i1 %t107, label %block_0_405bf0, label %block_0_405bfb
block_0_405bf0:
  %t108 = phi i64 [ %t95, %block_0_405be6 ], [ %t143, %block_0_405c05 ]
  %t109 = phi i64 [ %t96, %block_0_405be6 ], [ %t144, %block_0_405c05 ]
  %t110 = phi i512 [ %t97, %block_0_405be6 ], [ %t145, %block_0_405c05 ]
  %t111 = phi i512 [ %t98, %block_0_405be6 ], [ %t146, %block_0_405c05 ]
  %t112 = phi i512 [ %t99, %block_0_405be6 ], [ %t147, %block_0_405c05 ]
  %t113 = phi i512 [ %t100, %block_0_405be6 ], [ %t148, %block_0_405c05 ]
  %t114 = phi i512 [ %t101, %block_0_405be6 ], [ %t149, %block_0_405c05 ]
  %t115 = phi i512 [ %t102, %block_0_405be6 ], [ %t150, %block_0_405c05 ]
  %t116 = phi i512 [ %t103, %block_0_405be6 ], [ %t151, %block_0_405c05 ]
  %t117 = phi i512 [ %t104, %block_0_405be6 ], [ %t152, %block_0_405c05 ]
  ; r107 := (bitcast r99 (vec 8 double))
  %t118 = bitcast i512 %t110 to <8 x double>
  ; r108 := (bitcast r100 (vec 8 double))
  %t119 = bitcast i512 %t111 to <8 x double>
  ; r109 := (bitcast r101 (vec 8 double))
  %t120 = bitcast i512 %t112 to <8 x double>
  ; r110 := (bitcast r102 (vec 8 double))
  %t121 = bitcast i512 %t113 to <8 x double>
  ; r111 := (bitcast r103 (vec 8 double))
  %t122 = bitcast i512 %t114 to <8 x double>
  ; r112 := (bitcast r104 (vec 8 double))
  %t123 = bitcast i512 %t115 to <8 x double>
  ; r113 := (bitcast r105 (vec 8 double))
  %t124 = bitcast i512 %t116 to <8 x double>
  ; r114 := (bitcast r106 (vec 8 double))
  %t125 = bitcast i512 %t117 to <8 x double>
  %t126 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @base_alloc(i64 48, i64 %t109, i64 %t108, <8 x double> %t118, <8 x double> %t119, <8 x double> %t120, <8 x double> %t121, <8 x double> %t122, <8 x double> %t123, <8 x double> %t124, <8 x double> %t125)
  ret { i64, i64, <8 x double> } %t126
block_0_405bfb:
  %t127 = phi i64 [ %t95, %block_0_405be6 ]
  %t128 = phi i64 [ %t96, %block_0_405be6 ]
  %t129 = phi i512 [ %t97, %block_0_405be6 ]
  %t130 = phi i512 [ %t98, %block_0_405be6 ]
  %t131 = phi i512 [ %t99, %block_0_405be6 ]
  %t132 = phi i512 [ %t100, %block_0_405be6 ]
  %t133 = phi i512 [ %t101, %block_0_405be6 ]
  %t134 = phi i512 [ %t102, %block_0_405be6 ]
  %t135 = phi i512 [ %t103, %block_0_405be6 ]
  %t136 = phi i512 [ %t104, %block_0_405be6 ]
  ; r125 := (bitcast r117 (vec 8 double))
  %t137 = bitcast i512 %t129 to <8 x double>
  ; r126 := call _spinunlock_stub((0x635680 : bv 64), r116, r115, r125)
  %t138 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6510208, i64 %t128, i64 %t127, <8 x double> %t137)
  ; r127 := (tuple_field r126 0)
  %t139 = extractvalue { i64, i64, <8 x double> } %t138, 0
  ; r128 := (tuple_field r126 1)
  %t140 = extractvalue { i64, i64, <8 x double> } %t138, 1
  ; r129 := (tuple_field r126 2)
  %t141 = extractvalue { i64, i64, <8 x double> } %t138, 2
  ; r130 := (bitcast r129 (bv 512))
  %t142 = bitcast <8 x double> %t141 to i512
  br label %block_0_405c05
block_0_405c05:
  %t143 = phi i64 [ %t140, %block_0_405bfb ]
  %t144 = phi i64 [ %t128, %block_0_405bfb ]
  %t145 = phi i512 [ %t142, %block_0_405bfb ]
  %t146 = phi i512 [ %t130, %block_0_405bfb ]
  %t147 = phi i512 [ %t131, %block_0_405bfb ]
  %t148 = phi i512 [ %t132, %block_0_405bfb ]
  %t149 = phi i512 [ %t133, %block_0_405bfb ]
  %t150 = phi i512 [ %t134, %block_0_405bfb ]
  %t151 = phi i512 [ %t135, %block_0_405bfb ]
  %t152 = phi i512 [ %t136, %block_0_405bfb ]
  br label %block_0_405bf0
}
define { i64, i64, <8 x double> } @arena_dalloc_bin_run(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_406470:
  ; r0 := (read arg3 (bv 64))
  %t0 = inttoptr i64 %arg3 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (eq r0 arg2)
  %t2 = icmp eq i64 %t1, %arg2
  ; r2 := (bitcast arg4 (bv 512))
  %t3 = bitcast <8 x double> %arg4 to i512
  ; r3 := (bitcast arg4 (bv 512))
  %t4 = bitcast <8 x double> %arg4 to i512
  br i1 %t2, label %block_0_406557, label %block_0_40649a
block_0_40649a:
  %t5 = phi i64 [ %arg3, %block_0_406470 ]
  %t6 = phi i64 [ %arg2, %block_0_406470 ]
  %t7 = phi i64 [ %arg1, %block_0_406470 ]
  %t8 = phi i64 [ %arg0, %block_0_406470 ]
  %t9 = phi i512 [ %t4, %block_0_406470 ]
  ; r9 := (bv_add r4 (0x38 : bv 64))
  %t10 = add i64 %t5, 56
  ; r10 := (read r9 (bv 32))
  %t11 = inttoptr i64 %t10 to i32*
  %t12 = load i32, i32* %t11
  ; r11 := (eq r10 (0x1 : bv 32))
  %t13 = icmp eq i32 %t12, 1
  br i1 %t13, label %block_0_406518, label %block_0_4064a0
block_0_4064a0:
  %t14 = phi i64 [ %t5, %block_0_40649a ]
  %t15 = phi i64 [ %t6, %block_0_40649a ]
  %t16 = phi i64 [ %t7, %block_0_40649a ]
  %t17 = phi i64 [ %t8, %block_0_40649a ]
  %t18 = phi i512 [ %t9, %block_0_40649a ]
  ; r17 := (bv_add r12 (0x8 : bv 64))
  %t19 = add i64 %t14, 8
  ; r18 := (bv_sub r13 r14)
  %t20 = sub i64 %t15, %t16
  ; r19 := (bv_shr r18 (0xc : bv 64))
  %t21 = lshr i64 %t20, 12
  ; r20 := (bv_mul (0x2 : bv 64) r19)
  %t22 = mul i64 2, %t21
  ; r21 := (bv_add r19 r20)
  %t23 = add i64 %t21, %t22
  ; r22 := (bv_mul (0x8 : bv 64) r21)
  %t24 = mul i64 8, %t23
  ; r23 := (bv_add r14 r22)
  %t25 = add i64 %t16, %t24
  ; r24 := (bv_add r23 (0x28 : bv 64))
  %t26 = add i64 %t25, 40
  ; r25 := (bitcast r16 (vec 8 double))
  %t27 = bitcast i512 %t18 to <8 x double>
  ; r26 := call arena_run_tree_remove(r17, r24, r25)
  %t28 = call <8 x double> (i64, i64, <8 x double>) @arena_run_tree_remove(i64 %t19, i64 %t26, <8 x double> %t27)
  ; r27 := (bitcast r26 (bv 512))
  %t29 = bitcast <8 x double> %t28 to i512
  br label %block_0_4064bc
block_0_4064bc:
  %t30 = phi i64 [ %t21, %block_0_4064a0 ], [ %t105, %block_0_406518 ], [ %t134, %block_0_406557 ]
  %t31 = phi i64 [ %t16, %block_0_4064a0 ], [ %t101, %block_0_406518 ], [ %t129, %block_0_406557 ]
  %t32 = phi i64 [ %t17, %block_0_4064a0 ], [ %t102, %block_0_406518 ], [ %t130, %block_0_406557 ]
  %t33 = phi i64 [ %t15, %block_0_4064a0 ], [ %t100, %block_0_406518 ], [ %t128, %block_0_406557 ]
  %t34 = phi i512 [ %t29, %block_0_4064a0 ], [ %t103, %block_0_406518 ], [ %t131, %block_0_406557 ]
  ; r33 := (bv_mul (0x2 : bv 64) r28)
  %t35 = mul i64 2, %t30
  ; r34 := (bv_add r28 r33)
  %t36 = add i64 %t30, %t35
  ; r35 := (bv_mul (0x8 : bv 64) r34)
  %t37 = mul i64 8, %t36
  ; r36 := (bv_add r29 r35)
  %t38 = add i64 %t31, %t37
  ; r37 := (bv_add r36 (0x38 : bv 64))
  %t39 = add i64 %t38, 56
  ; r38 := (read r37 (bv 64))
  %t40 = inttoptr i64 %t39 to i64*
  %t41 = load i64, i64* %t40
  ; r39 := (bv_or r38 (0x8 : bv 64))
  %t42 = or i64 %t41, 8
  ; write r37 r39
  %t43 = inttoptr i64 %t39 to i64*
  store i64 %t42, i64* %t43
  ; r40 := (bv_add r29 (0x20 : bv 64))
  %t44 = add i64 %t31, 32
  ; r41 := (read r40 (bv 64))
  %t45 = inttoptr i64 %t44 to i64*
  %t46 = load i64, i64* %t45
  ; r42 := (bv_add r41 (0x1 : bv 64))
  %t47 = add i64 %t46, 1
  ; write r40 r42
  %t48 = inttoptr i64 %t44 to i64*
  store i64 %t47, i64* %t48
  ; r43 := (bv_add r30 (0x60 : bv 64))
  %t49 = add i64 %t32, 96
  ; r44 := (read r43 (bv 64))
  %t50 = inttoptr i64 %t49 to i64*
  %t51 = load i64, i64* %t50
  ; r45 := (bv_add r44 (0x1 : bv 64))
  %t52 = add i64 %t51, 1
  ; write r43 r45
  %t53 = inttoptr i64 %t49 to i64*
  store i64 %t52, i64* %t53
  ; r46 := (bitcast r32 (vec 8 double))
  %t54 = bitcast i512 %t34 to <8 x double>
  ; r47 := call arena_run_dalloc(r30, r31, (0x0 : bv 64), r46)
  %t55 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @arena_run_dalloc(i64 %t32, i64 %t33, i64 0, <8 x double> %t54)
  ; r48 := (tuple_field r47 0)
  %t56 = extractvalue { i64, i64, <8 x double> } %t55, 0
  ; r49 := (tuple_field r47 1)
  %t57 = extractvalue { i64, i64, <8 x double> } %t55, 1
  ; r50 := (tuple_field r47 2)
  %t58 = extractvalue { i64, i64, <8 x double> } %t55, 2
  ; r51 := (bitcast r50 (bv 512))
  %t59 = bitcast <8 x double> %t58 to i512
  br label %block_0_4064de
block_0_4064de:
  %t60 = phi i64 [ %t56, %block_0_4064bc ]
  %t61 = phi i64 [ %t57, %block_0_4064bc ]
  %t62 = phi i64 [ %t31, %block_0_4064bc ]
  %t63 = phi i64 [ %t32, %block_0_4064bc ]
  %t64 = phi i512 [ %t59, %block_0_4064bc ]
  ; r57 := (bv_add r54 (0x18 : bv 64))
  %t65 = add i64 %t62, 24
  ; r58 := (read r57 (bv 8))
  %t66 = inttoptr i64 %t65 to i8*
  %t67 = load i8, i8* %t66
  ; r59 := (eq r58 (0x0 : bv 8))
  %t68 = icmp eq i8 %t67, 0
  br i1 %t68, label %block_0_406544, label %block_0_4064e4
block_0_4064e4:
  %t69 = phi i64 [ %t60, %block_0_4064de ], [ %t120, %block_0_406551 ]
  %t70 = phi i64 [ %t61, %block_0_4064de ], [ %t121, %block_0_406551 ]
  %t71 = phi i64 [ %t63, %block_0_4064de ], [ %t123, %block_0_406551 ]
  %t72 = phi i512 [ %t64, %block_0_4064de ], [ %t124, %block_0_406551 ]
  ; r64 := (read (0x630118 : bv 64) (bv 64))
  %t73 = inttoptr i64 6488344 to i64*
  %t74 = load i64, i64* %t73
  ; r65 := (bv_slt r64 (0x0 : bv 64))
  %t75 = icmp slt i64 %t74, 0
  br i1 %t75, label %block_0_4064ff, label %block_0_4064f0
block_0_4064f0:
  %t76 = phi i64 [ %t74, %block_0_4064e4 ]
  %t77 = phi i64 [ %t70, %block_0_4064e4 ]
  %t78 = phi i64 [ %t71, %block_0_4064e4 ]
  %t79 = phi i512 [ %t72, %block_0_4064e4 ]
  ; r70 := (bv_add r68 (0x58 : bv 64))
  %t80 = add i64 %t78, 88
  ; r71 := (read r70 (bv 64))
  %t81 = inttoptr i64 %t80 to i64*
  %t82 = load i64, i64* %t81
  ; r72 := (trunc r66 8)
  %t83 = trunc i64 %t76 to i8
  ; r73 := (bv_and r72 (0x3f : bv 8))
  %t84 = and i8 %t83, 63
  ; r74 := (eq r73 (0x0 : bv 8))
  %t85 = icmp eq i8 %t84, 0
  ; r75 := (uext r73 64)
  %t86 = zext i8 %t84 to i64
  ; r76 := (bv_shr r71 r75)
  %t87 = lshr i64 %t82, %t86
  ; r77 := (mux r74 r71 r76)
  %t88 = select i1 %t85, i64 %t82, i64 %t87
  ; r78 := (bv_add r68 (0x60 : bv 64))
  %t89 = add i64 %t78, 96
  ; r79 := (read r78 (bv 64))
  %t90 = inttoptr i64 %t89 to i64*
  %t91 = load i64, i64* %t90
  ; r80 := (bv_ult r77 r79)
  %t92 = icmp ult i64 %t88, %t91
  br i1 %t92, label %block_0_406524, label %block_0_4064ff
block_0_4064ff:
  %t93 = phi i64 [ %t69, %block_0_4064e4 ], [ %t88, %block_0_4064f0 ]
  %t94 = phi i64 [ %t70, %block_0_4064e4 ], [ %t77, %block_0_4064f0 ]
  %t95 = phi i512 [ %t72, %block_0_4064e4 ], [ %t79, %block_0_4064f0 ]
  ; r84 := (bitcast r83 (vec 8 double))
  %t96 = bitcast i512 %t95 to <8 x double>
  ; r85 := (tuple r81 r82 r84)
  %t97 = insertvalue { i64, i64, <8 x double> } undef, i64 %t93, 0
  %t98 = insertvalue { i64, i64, <8 x double> } %t97, i64 %t94, 1
  %t99 = insertvalue { i64, i64, <8 x double> } %t98, <8 x double> %t96, 2
  ret { i64, i64, <8 x double> } %t99
block_0_406518:
  %t100 = phi i64 [ %t6, %block_0_40649a ]
  %t101 = phi i64 [ %t7, %block_0_40649a ]
  %t102 = phi i64 [ %t8, %block_0_40649a ]
  %t103 = phi i512 [ %t9, %block_0_40649a ]
  ; r90 := (bv_sub r86 r87)
  %t104 = sub i64 %t100, %t101
  ; r91 := (bv_shr r90 (0xc : bv 64))
  %t105 = lshr i64 %t104, 12
  br label %block_0_4064bc
block_0_406524:
  %t106 = phi i64 [ %t78, %block_0_4064f0 ]
  %t107 = phi i512 [ %t79, %block_0_4064f0 ]
  ; r94 := (bitcast r93 (vec 8 double))
  %t108 = bitcast i512 %t107 to <8 x double>
  %t109 = call { i64, i64, <8 x double> } (i64, <8 x double>) @arena_purge(i64 %t106, <8 x double> %t108)
  ret { i64, i64, <8 x double> } %t109
block_0_406544:
  %t110 = phi i64 [ %t62, %block_0_4064de ]
  %t111 = phi i64 [ %t63, %block_0_4064de ]
  %t112 = phi i512 [ %t64, %block_0_4064de ]
  ; r98 := (bv_add r96 (0x8 : bv 64))
  %t113 = add i64 %t111, 8
  ; r99 := (bitcast r97 (vec 8 double))
  %t114 = bitcast i512 %t112 to <8 x double>
  ; r100 := call arena_chunk_tree_dirty_insert(r98, r95, r99)
  %t115 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @arena_chunk_tree_dirty_insert(i64 %t113, i64 %t110, <8 x double> %t114)
  ; r101 := (tuple_field r100 0)
  %t116 = extractvalue { i64, i64, <8 x double> } %t115, 0
  ; r102 := (tuple_field r100 1)
  %t117 = extractvalue { i64, i64, <8 x double> } %t115, 1
  ; r103 := (tuple_field r100 2)
  %t118 = extractvalue { i64, i64, <8 x double> } %t115, 2
  ; r104 := (bitcast r103 (bv 512))
  %t119 = bitcast <8 x double> %t118 to i512
  br label %block_0_406551
block_0_406551:
  %t120 = phi i64 [ %t116, %block_0_406544 ]
  %t121 = phi i64 [ %t117, %block_0_406544 ]
  %t122 = phi i64 [ %t110, %block_0_406544 ]
  %t123 = phi i64 [ %t111, %block_0_406544 ]
  %t124 = phi i512 [ %t119, %block_0_406544 ]
  ; r110 := (bv_add r107 (0x18 : bv 64))
  %t125 = add i64 %t122, 24
  ; write r110 (0x1 : bv 8)
  %t126 = inttoptr i64 %t125 to i8*
  store i8 1, i8* %t126
  br label %block_0_4064e4
block_0_406557:
  %t127 = phi i64 [ %arg3, %block_0_406470 ]
  %t128 = phi i64 [ %arg2, %block_0_406470 ]
  %t129 = phi i64 [ %arg1, %block_0_406470 ]
  %t130 = phi i64 [ %arg0, %block_0_406470 ]
  %t131 = phi i512 [ %t3, %block_0_406470 ]
  ; write r111 (0x0 : bv 64)
  %t132 = inttoptr i64 %t127 to i64*
  store i64 0, i64* %t132
  ; r116 := (bv_sub r112 r113)
  %t133 = sub i64 %t128, %t129
  ; r117 := (bv_shr r116 (0xc : bv 64))
  %t134 = lshr i64 %t133, 12
  br label %block_0_4064bc
}
define { i64, i64, <8 x double> } @arena_run_trim_tail(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6) {
block_0_406570:
  ; r0 := (bv_or arg4 (0x3 : bv 64))
  %t0 = or i64 %arg4, 3
  ; r1 := (bv_sub arg2 arg1)
  %t1 = sub i64 %arg2, %arg1
  ; r2 := (bv_sub arg3 arg4)
  %t2 = sub i64 %arg3, %arg4
  ; r3 := (bv_shr r1 (0xc : bv 64))
  %t3 = lshr i64 %t1, 12
  ; r4 := (bv_or r2 (0x3 : bv 64))
  %t4 = or i64 %t2, 3
  ; r5 := (bv_mul (0x2 : bv 64) r3)
  %t5 = mul i64 2, %t3
  ; r6 := (bv_add r3 r5)
  %t6 = add i64 %t3, %t5
  ; r7 := (bv_mul (0x8 : bv 64) r6)
  %t7 = mul i64 8, %t6
  ; r8 := (bv_add arg1 r7)
  %t8 = add i64 %arg1, %t7
  ; r9 := (bv_add r8 (0x38 : bv 64))
  %t9 = add i64 %t8, 56
  ; write r9 r0
  %t10 = inttoptr i64 %t9 to i64*
  store i64 %t0, i64* %t10
  ; r10 := (bv_shr arg4 (0xc : bv 64))
  %t11 = lshr i64 %arg4, 12
  ; r11 := (bv_add r3 r10)
  %t12 = add i64 %t3, %t11
  ; r12 := (bv_mul (0x2 : bv 64) r11)
  %t13 = mul i64 2, %t12
  ; r13 := (bv_add r11 r12)
  %t14 = add i64 %t12, %t13
  ; r14 := (bv_mul (0x8 : bv 64) r13)
  %t15 = mul i64 8, %t14
  ; r15 := (bv_add arg1 r14)
  %t16 = add i64 %arg1, %t15
  ; r16 := (bv_add r15 (0x38 : bv 64))
  %t17 = add i64 %t16, 56
  ; write r16 r4
  %t18 = inttoptr i64 %t17 to i64*
  store i64 %t4, i64* %t18
  ; r17 := (trunc arg5 8)
  %t19 = trunc i64 %arg5 to i8
  ; r18 := (uext r17 64)
  %t20 = zext i8 %t19 to i64
  ; r19 := (bv_add arg4 arg2)
  %t21 = add i64 %arg4, %arg2
  ; r20 := (bitcast arg6 (bv 512))
  %t22 = bitcast <8 x double> %arg6 to i512
  ; r21 := (bitcast r20 (vec 8 double))
  %t23 = bitcast i512 %t22 to <8 x double>
  %t24 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @arena_run_dalloc(i64 %arg0, i64 %t21, i64 %t20, <8 x double> %t23)
  ret { i64, i64, <8 x double> } %t24
}
define void @base_calloc(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3, <8 x double> %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10) {
block_0_4065c0:
  ; r0 := (sext arg0 128)
  %t0 = sext i64 %arg0 to i128
  ; r1 := (sext arg1 128)
  %t1 = sext i64 %arg1 to i128
  ; r2 := (bv_mul r0 r1)
  %t2 = mul i128 %t0, %t1
  ; r3 := (trunc r2 64)
  %t3 = trunc i128 %t2 to i64
  ; r4 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg4 (bv 512))
  %t6 = bitcast <8 x double> %arg4 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg5 (bv 512))
  %t8 = bitcast <8 x double> %arg5 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg6 (bv 512))
  %t10 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg8 (bv 512))
  %t14 = bitcast <8 x double> %arg8 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := (bitcast arg9 (bv 512))
  %t16 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast r16 (vec 8 double))
  %t17 = bitcast i512 %t16 to <8 x double>
  ; r18 := (bitcast arg10 (bv 512))
  %t18 = bitcast <8 x double> %arg10 to i512
  ; r19 := (bitcast r18 (vec 8 double))
  %t19 = bitcast i512 %t18 to <8 x double>
  ; r20 := call base_alloc(r3, arg1, arg2, r5, r7, r9, r11, r13, r15, r17, r19)
  %t20 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @base_alloc(i64 %t3, i64 %arg1, i64 %arg2, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15, <8 x double> %t17, <8 x double> %t19)
  ; r21 := (tuple_field r20 0)
  %t21 = extractvalue { i64, i64, <8 x double> } %t20, 0
  ; r22 := (tuple_field r20 1)
  %t22 = extractvalue { i64, i64, <8 x double> } %t20, 1
  ; r23 := (tuple_field r20 2)
  %t23 = extractvalue { i64, i64, <8 x double> } %t20, 2
  ; r24 := (bitcast r23 (bv 512))
  %t24 = bitcast <8 x double> %t23 to i512
  br label %block_0_4065dd
block_0_4065dd:
  %t25 = phi i64 [ %t21, %block_0_4065c0 ]
  %t26 = phi i64 [ %t3, %block_0_4065c0 ]
  %t27 = phi i512 [ %t24, %block_0_4065c0 ]
  ; r28 := (eq r25 (0x0 : bv 64))
  %t28 = icmp eq i64 %t25, 0
  br i1 %t28, label %block_0_4065f2, label %block_0_4065e5
block_0_4065e5:
  %t29 = phi i64 [ %t25, %block_0_4065dd ]
  %t30 = phi i64 [ %t26, %block_0_4065dd ]
  %t31 = phi i512 [ %t27, %block_0_4065dd ]
  ; r32 := (bitcast r31 (vec 8 double))
  %t32 = bitcast i512 %t31 to <8 x double>
  ; r33 := call memset(r29, (0x0 : bv 64), r30, r32)
  %t33 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t29, i64 0, i64 %t30, <8 x double> %t32)
  ; r34 := (tuple_field r33 0)
  %t34 = extractvalue { i64, i64, <8 x double> } %t33, 0
  ; r35 := (tuple_field r33 1)
  %t35 = extractvalue { i64, i64, <8 x double> } %t33, 1
  ; r36 := (tuple_field r33 2)
  %t36 = extractvalue { i64, i64, <8 x double> } %t33, 2
  ; r37 := (bitcast r36 (bv 512))
  %t37 = bitcast <8 x double> %t36 to i512
  br label %block_0_4065f2
block_0_4065f2:
  ret void
}
define void @_malloc_prefork(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_406690:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t5 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t7 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t8 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t9 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t10 = bitcast <8 x double> %arg13 to i512
  ; r10 := (bitcast arg6 (bv 512))
  %t11 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t13 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t14 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t15 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t16 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t17 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t18 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_4066a6, label %block_0_40677e
block_0_4066a6:
  %t19 = phi i64 [ %arg3, %block_0_406690 ], [ %t387, %block_0_406788 ], [ %t499, %block_0_4067d6 ], [ %t559, %block_0_4067f0 ]
  %t20 = phi i64 [ %arg2, %block_0_406690 ], [ %t388, %block_0_406788 ], [ %t500, %block_0_4067d6 ], [ %t560, %block_0_4067f0 ]
  %t21 = phi i64 [ %arg1, %block_0_406690 ], [ %t389, %block_0_406788 ], [ %t502, %block_0_4067d6 ], [ %t561, %block_0_4067f0 ]
  %t22 = phi i64 [ %arg4, %block_0_406690 ], [ %t390, %block_0_406788 ], [ %t503, %block_0_4067d6 ], [ %t562, %block_0_4067f0 ]
  %t23 = phi i64 [ %arg5, %block_0_406690 ], [ %t391, %block_0_406788 ], [ %t504, %block_0_4067d6 ], [ %t563, %block_0_4067f0 ]
  %t24 = phi i512 [ %t3, %block_0_406690 ], [ %t392, %block_0_406788 ], [ %t505, %block_0_4067d6 ], [ %t564, %block_0_4067f0 ]
  %t25 = phi i512 [ %t4, %block_0_406690 ], [ %t393, %block_0_406788 ], [ %t506, %block_0_4067d6 ], [ %t565, %block_0_4067f0 ]
  %t26 = phi i512 [ %t5, %block_0_406690 ], [ %t394, %block_0_406788 ], [ %t507, %block_0_4067d6 ], [ %t566, %block_0_4067f0 ]
  %t27 = phi i512 [ %t6, %block_0_406690 ], [ %t395, %block_0_406788 ], [ %t508, %block_0_4067d6 ], [ %t567, %block_0_4067f0 ]
  %t28 = phi i512 [ %t7, %block_0_406690 ], [ %t396, %block_0_406788 ], [ %t509, %block_0_4067d6 ], [ %t568, %block_0_4067f0 ]
  %t29 = phi i512 [ %t8, %block_0_406690 ], [ %t397, %block_0_406788 ], [ %t510, %block_0_4067d6 ], [ %t569, %block_0_4067f0 ]
  %t30 = phi i512 [ %t9, %block_0_406690 ], [ %t398, %block_0_406788 ], [ %t511, %block_0_4067d6 ], [ %t570, %block_0_4067f0 ]
  %t31 = phi i512 [ %t10, %block_0_406690 ], [ %t399, %block_0_406788 ], [ %t512, %block_0_4067d6 ], [ %t571, %block_0_4067f0 ]
  ; r31 := (read (0x6356a8 : bv 64) (bv 32))
  %t32 = inttoptr i64 6510248 to i32*
  %t33 = load i32, i32* %t32
  ; r32 := (eq r31 (0x0 : bv 32))
  %t34 = icmp eq i32 %t33, 0
  br i1 %t34, label %block_0_406767, label %block_0_4066b4
block_0_4066b4:
  %t35 = phi i64 [ %t19, %block_0_4066a6 ]
  %t36 = phi i64 [ %t21, %block_0_4066a6 ]
  %t37 = phi i64 [ %t22, %block_0_4066a6 ]
  %t38 = phi i64 [ %t23, %block_0_4066a6 ]
  %t39 = phi i512 [ %t24, %block_0_4066a6 ]
  %t40 = phi i512 [ %t25, %block_0_4066a6 ]
  %t41 = phi i512 [ %t26, %block_0_4066a6 ]
  %t42 = phi i512 [ %t27, %block_0_4066a6 ]
  %t43 = phi i512 [ %t28, %block_0_4066a6 ]
  %t44 = phi i512 [ %t29, %block_0_4066a6 ]
  %t45 = phi i512 [ %t30, %block_0_4066a6 ]
  %t46 = phi i512 [ %t31, %block_0_4066a6 ]
  br label %block_0_4066d1
block_0_4066c0:
  %t47 = phi i64 [ %t69, %block_0_4066d1 ], [ %t91, %block_0_4066e4 ], [ %t138, %block_0_4066f6 ], [ %t264, %block_0_40673e ]
  %t48 = phi i64 [ %t85, %block_0_4066d1 ], [ %t92, %block_0_4066e4 ], [ %t139, %block_0_4066f6 ], [ %t265, %block_0_40673e ]
  %t49 = phi i64 [ %t70, %block_0_4066d1 ], [ %t94, %block_0_4066e4 ], [ %t141, %block_0_4066f6 ], [ %t268, %block_0_40673e ]
  %t50 = phi i64 [ %t71, %block_0_4066d1 ], [ %t95, %block_0_4066e4 ], [ %t142, %block_0_4066f6 ], [ %t269, %block_0_40673e ]
  %t51 = phi i64 [ %t72, %block_0_4066d1 ], [ %t96, %block_0_4066e4 ], [ %t143, %block_0_4066f6 ], [ %t270, %block_0_40673e ]
  %t52 = phi i64 [ %t73, %block_0_4066d1 ], [ %t97, %block_0_4066e4 ], [ %t144, %block_0_4066f6 ], [ %t271, %block_0_40673e ]
  %t53 = phi i512 [ %t74, %block_0_4066d1 ], [ %t98, %block_0_4066e4 ], [ %t145, %block_0_4066f6 ], [ %t272, %block_0_40673e ]
  %t54 = phi i512 [ %t75, %block_0_4066d1 ], [ %t99, %block_0_4066e4 ], [ %t146, %block_0_4066f6 ], [ %t273, %block_0_40673e ]
  %t55 = phi i512 [ %t76, %block_0_4066d1 ], [ %t100, %block_0_4066e4 ], [ %t147, %block_0_4066f6 ], [ %t274, %block_0_40673e ]
  %t56 = phi i512 [ %t77, %block_0_4066d1 ], [ %t101, %block_0_4066e4 ], [ %t148, %block_0_4066f6 ], [ %t275, %block_0_40673e ]
  %t57 = phi i512 [ %t78, %block_0_4066d1 ], [ %t102, %block_0_4066e4 ], [ %t149, %block_0_4066f6 ], [ %t276, %block_0_40673e ]
  %t58 = phi i512 [ %t79, %block_0_4066d1 ], [ %t103, %block_0_4066e4 ], [ %t150, %block_0_4066f6 ], [ %t277, %block_0_40673e ]
  %t59 = phi i512 [ %t80, %block_0_4066d1 ], [ %t104, %block_0_4066e4 ], [ %t151, %block_0_4066f6 ], [ %t278, %block_0_40673e ]
  %t60 = phi i512 [ %t81, %block_0_4066d1 ], [ %t105, %block_0_4066e4 ], [ %t152, %block_0_4066f6 ], [ %t279, %block_0_40673e ]
  ; r59 := (trunc r50 32)
  %t61 = trunc i64 %t52 to i32
  ; r60 := (bv_add r59 (0x1 : bv 32))
  %t62 = add i32 %t61, 1
  ; r61 := (uext r60 64)
  %t63 = zext i32 %t62 to i64
  ; r62 := (read (0x6356a8 : bv 64) (bv 32))
  %t64 = inttoptr i64 6510248 to i32*
  %t65 = load i32, i32* %t64
  ; r63 := (bv_ult r62 r60)
  %t66 = icmp ult i32 %t65, %t62
  ; r64 := (eq r62 r60)
  %t67 = icmp eq i32 %t65, %t62
  ; r65 := (or r63 r64)
  %t68 = or i1 %t66, %t67
  br i1 %t68, label %block_0_406767, label %block_0_4066d1
block_0_4066d1:
  %t69 = phi i64 [ %t35, %block_0_4066b4 ], [ %t47, %block_0_4066c0 ], [ %t333, %block_0_40675a ]
  %t70 = phi i64 [ %t36, %block_0_4066b4 ], [ %t49, %block_0_4066c0 ], [ %t335, %block_0_40675a ]
  %t71 = phi i64 [ %t37, %block_0_4066b4 ], [ %t50, %block_0_4066c0 ], [ %t336, %block_0_40675a ]
  %t72 = phi i64 [ %t38, %block_0_4066b4 ], [ %t51, %block_0_4066c0 ], [ %t337, %block_0_40675a ]
  %t73 = phi i64 [ 0, %block_0_4066b4 ], [ %t63, %block_0_4066c0 ], [ %t338, %block_0_40675a ]
  %t74 = phi i512 [ %t39, %block_0_4066b4 ], [ %t53, %block_0_4066c0 ], [ %t339, %block_0_40675a ]
  %t75 = phi i512 [ %t40, %block_0_4066b4 ], [ %t54, %block_0_4066c0 ], [ %t340, %block_0_40675a ]
  %t76 = phi i512 [ %t41, %block_0_4066b4 ], [ %t55, %block_0_4066c0 ], [ %t341, %block_0_40675a ]
  %t77 = phi i512 [ %t42, %block_0_4066b4 ], [ %t56, %block_0_4066c0 ], [ %t342, %block_0_40675a ]
  %t78 = phi i512 [ %t43, %block_0_4066b4 ], [ %t57, %block_0_4066c0 ], [ %t343, %block_0_40675a ]
  %t79 = phi i512 [ %t44, %block_0_4066b4 ], [ %t58, %block_0_4066c0 ], [ %t344, %block_0_40675a ]
  %t80 = phi i512 [ %t45, %block_0_4066b4 ], [ %t59, %block_0_4066c0 ], [ %t345, %block_0_40675a ]
  %t81 = phi i512 [ %t46, %block_0_4066b4 ], [ %t60, %block_0_4066c0 ], [ %t346, %block_0_40675a ]
  ; r79 := (read (0x6356a0 : bv 64) (bv 64))
  %t82 = inttoptr i64 6510240 to i64*
  %t83 = load i64, i64* %t82
  ; r80 := (trunc r70 32)
  %t84 = trunc i64 %t73 to i32
  ; r81 := (uext r80 64)
  %t85 = zext i32 %t84 to i64
  ; r82 := (bv_mul (0x8 : bv 64) r81)
  %t86 = mul i64 8, %t85
  ; r83 := (bv_add r79 r82)
  %t87 = add i64 %t83, %t86
  ; r84 := (read r83 (bv 64))
  %t88 = inttoptr i64 %t87 to i64*
  %t89 = load i64, i64* %t88
  ; r85 := (eq r84 (0x0 : bv 64))
  %t90 = icmp eq i64 %t89, 0
  br i1 %t90, label %block_0_4066c0, label %block_0_4066e4
block_0_4066e4:
  %t91 = phi i64 [ %t69, %block_0_4066d1 ]
  %t92 = phi i64 [ %t85, %block_0_4066d1 ]
  %t93 = phi i64 [ %t89, %block_0_4066d1 ]
  %t94 = phi i64 [ %t70, %block_0_4066d1 ]
  %t95 = phi i64 [ %t71, %block_0_4066d1 ]
  %t96 = phi i64 [ %t72, %block_0_4066d1 ]
  %t97 = phi i64 [ %t73, %block_0_4066d1 ]
  %t98 = phi i512 [ %t74, %block_0_4066d1 ]
  %t99 = phi i512 [ %t75, %block_0_4066d1 ]
  %t100 = phi i512 [ %t76, %block_0_4066d1 ]
  %t101 = phi i512 [ %t77, %block_0_4066d1 ]
  %t102 = phi i512 [ %t78, %block_0_4066d1 ]
  %t103 = phi i512 [ %t79, %block_0_4066d1 ]
  %t104 = phi i512 [ %t80, %block_0_4066d1 ]
  %t105 = phi i512 [ %t81, %block_0_4066d1 ]
  ; r101 := (read (0x6356e8 : bv 64) (bv 32))
  %t106 = inttoptr i64 6510312 to i32*
  %t107 = load i32, i32* %t106
  ; r102 := (eq r101 (0x0 : bv 32))
  %t108 = icmp eq i32 %t107, 0
  br i1 %t108, label %block_0_4066c0, label %block_0_4066ee
block_0_4066ee:
  %t109 = phi i64 [ %t91, %block_0_4066e4 ]
  %t110 = phi i64 [ %t92, %block_0_4066e4 ]
  %t111 = phi i64 [ %t93, %block_0_4066e4 ]
  %t112 = phi i64 [ %t94, %block_0_4066e4 ]
  %t113 = phi i64 [ %t95, %block_0_4066e4 ]
  %t114 = phi i64 [ %t96, %block_0_4066e4 ]
  %t115 = phi i64 [ %t97, %block_0_4066e4 ]
  %t116 = phi i512 [ %t98, %block_0_4066e4 ]
  %t117 = phi i512 [ %t99, %block_0_4066e4 ]
  %t118 = phi i512 [ %t100, %block_0_4066e4 ]
  %t119 = phi i512 [ %t101, %block_0_4066e4 ]
  %t120 = phi i512 [ %t102, %block_0_4066e4 ]
  %t121 = phi i512 [ %t103, %block_0_4066e4 ]
  %t122 = phi i512 [ %t104, %block_0_4066e4 ]
  %t123 = phi i512 [ %t105, %block_0_4066e4 ]
  ; r118 := (bitcast r110 (vec 8 double))
  %t124 = bitcast i512 %t116 to <8 x double>
  ; r119 := (bitcast r111 (vec 8 double))
  %t125 = bitcast i512 %t117 to <8 x double>
  ; r120 := (bitcast r112 (vec 8 double))
  %t126 = bitcast i512 %t118 to <8 x double>
  ; r121 := (bitcast r113 (vec 8 double))
  %t127 = bitcast i512 %t119 to <8 x double>
  ; r122 := (bitcast r114 (vec 8 double))
  %t128 = bitcast i512 %t120 to <8 x double>
  ; r123 := (bitcast r115 (vec 8 double))
  %t129 = bitcast i512 %t121 to <8 x double>
  ; r124 := (bitcast r116 (vec 8 double))
  %t130 = bitcast i512 %t122 to <8 x double>
  ; r125 := (bitcast r117 (vec 8 double))
  %t131 = bitcast i512 %t123 to <8 x double>
  ; r126 := call pthread_mutex_trylock_int(r105, r106, r104, r103, r107, r108, r118, r119, r120, r121, r122, r123, r124, r125)
  %t132 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t111, i64 %t112, i64 %t110, i64 %t109, i64 %t113, i64 %t114, <8 x double> %t124, <8 x double> %t125, <8 x double> %t126, <8 x double> %t127, <8 x double> %t128, <8 x double> %t129, <8 x double> %t130, <8 x double> %t131)
  ; r127 := (tuple_field r126 0)
  %t133 = extractvalue { i64, i64, <8 x double> } %t132, 0
  ; r128 := (tuple_field r126 1)
  %t134 = extractvalue { i64, i64, <8 x double> } %t132, 1
  ; r129 := (tuple_field r126 2)
  %t135 = extractvalue { i64, i64, <8 x double> } %t132, 2
  ; r130 := (bitcast r129 (bv 512))
  %t136 = bitcast <8 x double> %t135 to i512
  br label %block_0_4066f6
block_0_4066f6:
  %t137 = phi i64 [ %t133, %block_0_4066ee ]
  %t138 = phi i64 [ %t109, %block_0_4066ee ]
  %t139 = phi i64 [ %t134, %block_0_4066ee ]
  %t140 = phi i64 [ %t111, %block_0_4066ee ]
  %t141 = phi i64 [ %t112, %block_0_4066ee ]
  %t142 = phi i64 [ %t113, %block_0_4066ee ]
  %t143 = phi i64 [ %t114, %block_0_4066ee ]
  %t144 = phi i64 [ %t115, %block_0_4066ee ]
  %t145 = phi i512 [ %t136, %block_0_4066ee ]
  %t146 = phi i512 [ %t117, %block_0_4066ee ]
  %t147 = phi i512 [ %t118, %block_0_4066ee ]
  %t148 = phi i512 [ %t119, %block_0_4066ee ]
  %t149 = phi i512 [ %t120, %block_0_4066ee ]
  %t150 = phi i512 [ %t121, %block_0_4066ee ]
  %t151 = phi i512 [ %t122, %block_0_4066ee ]
  %t152 = phi i512 [ %t123, %block_0_4066ee ]
  ; r147 := (trunc r131 32)
  %t153 = trunc i64 %t137 to i32
  ; r148 := (eq r147 (0x0 : bv 32))
  %t154 = icmp eq i32 %t153, 0
  br i1 %t154, label %block_0_4066c0, label %block_0_4066fa
block_0_4066fa:
  %t155 = phi i64 [ %t138, %block_0_4066f6 ]
  %t156 = phi i64 [ %t139, %block_0_4066f6 ]
  %t157 = phi i64 [ %t140, %block_0_4066f6 ]
  %t158 = phi i64 [ %t141, %block_0_4066f6 ]
  %t159 = phi i64 [ %t142, %block_0_4066f6 ]
  %t160 = phi i64 [ %t143, %block_0_4066f6 ]
  %t161 = phi i64 [ %t144, %block_0_4066f6 ]
  %t162 = phi i512 [ %t145, %block_0_4066f6 ]
  %t163 = phi i512 [ %t146, %block_0_4066f6 ]
  %t164 = phi i512 [ %t147, %block_0_4066f6 ]
  %t165 = phi i512 [ %t148, %block_0_4066f6 ]
  %t166 = phi i512 [ %t149, %block_0_4066f6 ]
  %t167 = phi i512 [ %t150, %block_0_4066f6 ]
  %t168 = phi i512 [ %t151, %block_0_4066f6 ]
  %t169 = phi i512 [ %t152, %block_0_4066f6 ]
  ; r164 := (read (0x6354a8 : bv 64) (bv 32))
  %t170 = inttoptr i64 6509736 to i32*
  %t171 = load i32, i32* %t170
  ; r165 := (bv_ult r164 (0x1 : bv 32))
  %t172 = icmp ult i32 %t171, 1
  ; r166 := (eq r164 (0x1 : bv 32))
  %t173 = icmp eq i32 %t171, 1
  ; r167 := (or r165 r166)
  %t174 = or i1 %t172, %t173
  br i1 %t174, label %block_0_40674e, label %block_0_406703
block_0_406703:
  %t175 = phi i64 [ %t157, %block_0_4066fa ]
  %t176 = phi i64 [ %t158, %block_0_4066fa ]
  %t177 = phi i64 [ %t159, %block_0_4066fa ]
  %t178 = phi i64 [ %t160, %block_0_4066fa ]
  %t179 = phi i64 [ %t161, %block_0_4066fa ]
  %t180 = phi i512 [ %t162, %block_0_4066fa ]
  %t181 = phi i512 [ %t163, %block_0_4066fa ]
  %t182 = phi i512 [ %t164, %block_0_4066fa ]
  %t183 = phi i512 [ %t165, %block_0_4066fa ]
  %t184 = phi i512 [ %t166, %block_0_4066fa ]
  %t185 = phi i512 [ %t167, %block_0_4066fa ]
  %t186 = phi i512 [ %t168, %block_0_4066fa ]
  %t187 = phi i512 [ %t169, %block_0_4066fa ]
  br label %block_0_406708
block_0_406708:
  %t188 = phi i64 [ %t175, %block_0_406703 ], [ %t284, %block_0_406746 ]
  %t189 = phi i64 [ 1, %block_0_406703 ], [ %t300, %block_0_406746 ]
  %t190 = phi i64 [ %t176, %block_0_406703 ], [ %t286, %block_0_406746 ]
  %t191 = phi i64 [ %t177, %block_0_406703 ], [ %t287, %block_0_406746 ]
  %t192 = phi i64 [ %t178, %block_0_406703 ], [ %t288, %block_0_406746 ]
  %t193 = phi i64 [ %t179, %block_0_406703 ], [ %t289, %block_0_406746 ]
  %t194 = phi i512 [ %t180, %block_0_406703 ], [ %t290, %block_0_406746 ]
  %t195 = phi i512 [ %t181, %block_0_406703 ], [ %t291, %block_0_406746 ]
  %t196 = phi i512 [ %t182, %block_0_406703 ], [ %t292, %block_0_406746 ]
  %t197 = phi i512 [ %t183, %block_0_406703 ], [ %t293, %block_0_406746 ]
  %t198 = phi i512 [ %t184, %block_0_406703 ], [ %t294, %block_0_406746 ]
  %t199 = phi i512 [ %t185, %block_0_406703 ], [ %t295, %block_0_406746 ]
  %t200 = phi i512 [ %t186, %block_0_406703 ], [ %t296, %block_0_406746 ]
  %t201 = phi i512 [ %t187, %block_0_406703 ], [ %t297, %block_0_406746 ]
  ; r195 := (trunc r182 32)
  %t202 = trunc i64 %t189 to i32
  ; r196 := (uext r195 64)
  %t203 = zext i32 %t202 to i64
  ; r197 := (trunc r182 8)
  %t204 = trunc i64 %t189 to i8
  ; r198 := (bv_and r197 (0x1f : bv 8))
  %t205 = and i8 %t204, 31
  ; r199 := (eq r198 (0x0 : bv 8))
  %t206 = icmp eq i8 %t205, 0
  ; r200 := (uext r198 32)
  %t207 = zext i8 %t205 to i32
  ; r201 := (bv_shl (0x1 : bv 32) r200)
  %t208 = shl i32 1, %t207
  ; r202 := (mux r199 (0x1 : bv 32) r201)
  %t209 = select i1 %t206, i32 1, i32 %t208
  ; r203 := (uext r202 64)
  %t210 = zext i32 %t209 to i64
  ; r204 := (bv_ult r202 (0x0 : bv 32))
  %t211 = icmp ult i32 %t209, 0
  ; r205 := (eq r202 (0x0 : bv 32))
  %t212 = icmp eq i32 %t209, 0
  ; r206 := (or r204 r205)
  %t213 = or i1 %t211, %t212
  br i1 %t213, label %block_0_406736, label %block_0_406721
block_0_406721:
  %t214 = phi i64 [ %t203, %block_0_406708 ], [ %t214, %block_0_406721 ]
  %t215 = phi i64 [ %t210, %block_0_406708 ], [ %t215, %block_0_406721 ]
  %t216 = phi i64 [ %t188, %block_0_406708 ], [ %t216, %block_0_406721 ]
  %t217 = phi i64 [ %t189, %block_0_406708 ], [ %t217, %block_0_406721 ]
  %t218 = phi i64 [ %t190, %block_0_406708 ], [ %t218, %block_0_406721 ]
  %t219 = phi i64 [ %t191, %block_0_406708 ], [ %t219, %block_0_406721 ]
  %t220 = phi i64 [ %t192, %block_0_406708 ], [ %t220, %block_0_406721 ]
  %t221 = phi i64 [ %t193, %block_0_406708 ], [ %t221, %block_0_406721 ]
  %t222 = phi i512 [ %t194, %block_0_406708 ], [ %t222, %block_0_406721 ]
  %t223 = phi i512 [ %t195, %block_0_406708 ], [ %t223, %block_0_406721 ]
  %t224 = phi i512 [ %t196, %block_0_406708 ], [ %t224, %block_0_406721 ]
  %t225 = phi i512 [ %t197, %block_0_406708 ], [ %t225, %block_0_406721 ]
  %t226 = phi i512 [ %t198, %block_0_406708 ], [ %t226, %block_0_406721 ]
  %t227 = phi i512 [ %t199, %block_0_406708 ], [ %t227, %block_0_406721 ]
  %t228 = phi i512 [ %t200, %block_0_406708 ], [ %t228, %block_0_406721 ]
  %t229 = phi i512 [ %t201, %block_0_406708 ], [ %t229, %block_0_406721 ]
  %t230 = phi i32 [ 0, %block_0_406708 ], [ %t231, %block_0_406721 ]
  ; r224 := (bv_add r223 (0x1 : bv 32))
  %t231 = add i32 %t230, 1
  ; r225 := (trunc r208 32)
  %t232 = trunc i64 %t215 to i32
  ; r226 := (bv_ult r224 r225)
  %t233 = icmp ult i32 %t231, %t232
  br i1 %t233, label %block_0_406721, label %block_0_406736
block_0_406736:
  %t234 = phi i64 [ %t203, %block_0_406708 ], [ %t214, %block_0_406721 ]
  %t235 = phi i64 [ %t210, %block_0_406708 ], [ %t215, %block_0_406721 ]
  %t236 = phi i64 [ %t188, %block_0_406708 ], [ %t216, %block_0_406721 ]
  %t237 = phi i64 [ %t189, %block_0_406708 ], [ %t217, %block_0_406721 ]
  %t238 = phi i64 [ %t190, %block_0_406708 ], [ %t218, %block_0_406721 ]
  %t239 = phi i64 [ %t191, %block_0_406708 ], [ %t219, %block_0_406721 ]
  %t240 = phi i64 [ %t192, %block_0_406708 ], [ %t220, %block_0_406721 ]
  %t241 = phi i64 [ %t193, %block_0_406708 ], [ %t221, %block_0_406721 ]
  %t242 = phi i512 [ %t194, %block_0_406708 ], [ %t222, %block_0_406721 ]
  %t243 = phi i512 [ %t195, %block_0_406708 ], [ %t223, %block_0_406721 ]
  %t244 = phi i512 [ %t196, %block_0_406708 ], [ %t224, %block_0_406721 ]
  %t245 = phi i512 [ %t197, %block_0_406708 ], [ %t225, %block_0_406721 ]
  %t246 = phi i512 [ %t198, %block_0_406708 ], [ %t226, %block_0_406721 ]
  %t247 = phi i512 [ %t199, %block_0_406708 ], [ %t227, %block_0_406721 ]
  %t248 = phi i512 [ %t200, %block_0_406708 ], [ %t228, %block_0_406721 ]
  %t249 = phi i512 [ %t201, %block_0_406708 ], [ %t229, %block_0_406721 ]
  ; r243 := (bitcast r235 (vec 8 double))
  %t250 = bitcast i512 %t242 to <8 x double>
  ; r244 := (bitcast r236 (vec 8 double))
  %t251 = bitcast i512 %t243 to <8 x double>
  ; r245 := (bitcast r237 (vec 8 double))
  %t252 = bitcast i512 %t244 to <8 x double>
  ; r246 := (bitcast r238 (vec 8 double))
  %t253 = bitcast i512 %t245 to <8 x double>
  ; r247 := (bitcast r239 (vec 8 double))
  %t254 = bitcast i512 %t246 to <8 x double>
  ; r248 := (bitcast r240 (vec 8 double))
  %t255 = bitcast i512 %t247 to <8 x double>
  ; r249 := (bitcast r241 (vec 8 double))
  %t256 = bitcast i512 %t248 to <8 x double>
  ; r250 := (bitcast r242 (vec 8 double))
  %t257 = bitcast i512 %t249 to <8 x double>
  ; r251 := call pthread_mutex_trylock_int(r229, r231, r228, r227, r232, r233, r243, r244, r245, r246, r247, r248, r249, r250)
  %t258 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t236, i64 %t238, i64 %t235, i64 %t234, i64 %t239, i64 %t240, <8 x double> %t250, <8 x double> %t251, <8 x double> %t252, <8 x double> %t253, <8 x double> %t254, <8 x double> %t255, <8 x double> %t256, <8 x double> %t257)
  ; r252 := (tuple_field r251 0)
  %t259 = extractvalue { i64, i64, <8 x double> } %t258, 0
  ; r253 := (tuple_field r251 1)
  %t260 = extractvalue { i64, i64, <8 x double> } %t258, 1
  ; r254 := (tuple_field r251 2)
  %t261 = extractvalue { i64, i64, <8 x double> } %t258, 2
  ; r255 := (bitcast r254 (bv 512))
  %t262 = bitcast <8 x double> %t261 to i512
  br label %block_0_40673e
block_0_40673e:
  %t263 = phi i64 [ %t259, %block_0_406736 ]
  %t264 = phi i64 [ %t234, %block_0_406736 ]
  %t265 = phi i64 [ %t260, %block_0_406736 ]
  %t266 = phi i64 [ %t236, %block_0_406736 ]
  %t267 = phi i64 [ %t237, %block_0_406736 ]
  %t268 = phi i64 [ %t238, %block_0_406736 ]
  %t269 = phi i64 [ %t239, %block_0_406736 ]
  %t270 = phi i64 [ %t240, %block_0_406736 ]
  %t271 = phi i64 [ %t241, %block_0_406736 ]
  %t272 = phi i512 [ %t262, %block_0_406736 ]
  %t273 = phi i512 [ %t243, %block_0_406736 ]
  %t274 = phi i512 [ %t244, %block_0_406736 ]
  %t275 = phi i512 [ %t245, %block_0_406736 ]
  %t276 = phi i512 [ %t246, %block_0_406736 ]
  %t277 = phi i512 [ %t247, %block_0_406736 ]
  %t278 = phi i512 [ %t248, %block_0_406736 ]
  %t279 = phi i512 [ %t249, %block_0_406736 ]
  ; r273 := (trunc r256 32)
  %t280 = trunc i64 %t263 to i32
  ; r274 := (eq r273 (0x0 : bv 32))
  %t281 = icmp eq i32 %t280, 0
  br i1 %t281, label %block_0_4066c0, label %block_0_406746
block_0_406746:
  %t282 = phi i64 [ %t264, %block_0_40673e ]
  %t283 = phi i64 [ %t265, %block_0_40673e ]
  %t284 = phi i64 [ %t266, %block_0_40673e ]
  %t285 = phi i64 [ %t267, %block_0_40673e ]
  %t286 = phi i64 [ %t268, %block_0_40673e ]
  %t287 = phi i64 [ %t269, %block_0_40673e ]
  %t288 = phi i64 [ %t270, %block_0_40673e ]
  %t289 = phi i64 [ %t271, %block_0_40673e ]
  %t290 = phi i512 [ %t272, %block_0_40673e ]
  %t291 = phi i512 [ %t273, %block_0_40673e ]
  %t292 = phi i512 [ %t274, %block_0_40673e ]
  %t293 = phi i512 [ %t275, %block_0_40673e ]
  %t294 = phi i512 [ %t276, %block_0_40673e ]
  %t295 = phi i512 [ %t277, %block_0_40673e ]
  %t296 = phi i512 [ %t278, %block_0_40673e ]
  %t297 = phi i512 [ %t279, %block_0_40673e ]
  ; r291 := (trunc r278 32)
  %t298 = trunc i64 %t285 to i32
  ; r292 := (bv_add r291 (0x1 : bv 32))
  %t299 = add i32 %t298, 1
  ; r293 := (uext r292 64)
  %t300 = zext i32 %t299 to i64
  ; r294 := (eq r291 (0xb : bv 32))
  %t301 = icmp eq i32 %t298, 11
  br i1 %t301, label %block_0_40674e, label %block_0_406708
block_0_40674e:
  %t302 = phi i64 [ %t155, %block_0_4066fa ], [ %t282, %block_0_406746 ]
  %t303 = phi i64 [ %t156, %block_0_4066fa ], [ %t283, %block_0_406746 ]
  %t304 = phi i64 [ %t157, %block_0_4066fa ], [ %t284, %block_0_406746 ]
  %t305 = phi i64 [ %t158, %block_0_4066fa ], [ %t286, %block_0_406746 ]
  %t306 = phi i64 [ %t159, %block_0_4066fa ], [ %t287, %block_0_406746 ]
  %t307 = phi i64 [ %t160, %block_0_4066fa ], [ %t288, %block_0_406746 ]
  %t308 = phi i64 [ %t161, %block_0_4066fa ], [ %t289, %block_0_406746 ]
  %t309 = phi i512 [ %t162, %block_0_4066fa ], [ %t290, %block_0_406746 ]
  %t310 = phi i512 [ %t163, %block_0_4066fa ], [ %t291, %block_0_406746 ]
  %t311 = phi i512 [ %t164, %block_0_4066fa ], [ %t292, %block_0_406746 ]
  %t312 = phi i512 [ %t165, %block_0_4066fa ], [ %t293, %block_0_406746 ]
  %t313 = phi i512 [ %t166, %block_0_4066fa ], [ %t294, %block_0_406746 ]
  %t314 = phi i512 [ %t167, %block_0_4066fa ], [ %t295, %block_0_406746 ]
  %t315 = phi i512 [ %t168, %block_0_4066fa ], [ %t296, %block_0_406746 ]
  %t316 = phi i512 [ %t169, %block_0_4066fa ], [ %t297, %block_0_406746 ]
  ; r310 := (trunc r301 32)
  %t317 = trunc i64 %t308 to i32
  ; r311 := (bv_add r310 (0x1 : bv 32))
  %t318 = add i32 %t317, 1
  ; r312 := (uext r311 64)
  %t319 = zext i32 %t318 to i64
  ; r313 := (bitcast r302 (vec 8 double))
  %t320 = bitcast i512 %t309 to <8 x double>
  ; r314 := (bitcast r303 (vec 8 double))
  %t321 = bitcast i512 %t310 to <8 x double>
  ; r315 := (bitcast r304 (vec 8 double))
  %t322 = bitcast i512 %t311 to <8 x double>
  ; r316 := (bitcast r305 (vec 8 double))
  %t323 = bitcast i512 %t312 to <8 x double>
  ; r317 := (bitcast r306 (vec 8 double))
  %t324 = bitcast i512 %t313 to <8 x double>
  ; r318 := (bitcast r307 (vec 8 double))
  %t325 = bitcast i512 %t314 to <8 x double>
  ; r319 := (bitcast r308 (vec 8 double))
  %t326 = bitcast i512 %t315 to <8 x double>
  ; r320 := (bitcast r309 (vec 8 double))
  %t327 = bitcast i512 %t316 to <8 x double>
  ; r321 := call pthread_mutex_lock_int(r297, r298, r296, r295, r299, r300, r313, r314, r315, r316, r317, r318, r319, r320)
  %t328 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 %t304, i64 %t305, i64 %t303, i64 %t302, i64 %t306, i64 %t307, <8 x double> %t320, <8 x double> %t321, <8 x double> %t322, <8 x double> %t323, <8 x double> %t324, <8 x double> %t325, <8 x double> %t326, <8 x double> %t327)
  ; r322 := (tuple_field r321 0)
  %t329 = extractvalue { i64, i64, <8 x double> } %t328, 0
  ; r323 := (tuple_field r321 1)
  %t330 = extractvalue { i64, i64, <8 x double> } %t328, 1
  ; r324 := (tuple_field r321 2)
  %t331 = extractvalue { i64, i64, <8 x double> } %t328, 2
  ; r325 := (bitcast r324 (bv 512))
  %t332 = bitcast <8 x double> %t331 to i512
  br label %block_0_40675a
block_0_40675a:
  %t333 = phi i64 [ %t302, %block_0_40674e ]
  %t334 = phi i64 [ %t330, %block_0_40674e ]
  %t335 = phi i64 [ %t305, %block_0_40674e ]
  %t336 = phi i64 [ %t306, %block_0_40674e ]
  %t337 = phi i64 [ %t307, %block_0_40674e ]
  %t338 = phi i64 [ %t319, %block_0_40674e ]
  %t339 = phi i512 [ %t332, %block_0_40674e ]
  %t340 = phi i512 [ %t310, %block_0_40674e ]
  %t341 = phi i512 [ %t311, %block_0_40674e ]
  %t342 = phi i512 [ %t312, %block_0_40674e ]
  %t343 = phi i512 [ %t313, %block_0_40674e ]
  %t344 = phi i512 [ %t314, %block_0_40674e ]
  %t345 = phi i512 [ %t315, %block_0_40674e ]
  %t346 = phi i512 [ %t316, %block_0_40674e ]
  ; r340 := (read (0x6356a8 : bv 64) (bv 32))
  %t347 = inttoptr i64 6510248 to i32*
  %t348 = load i32, i32* %t347
  ; r341 := (trunc r331 32)
  %t349 = trunc i64 %t338 to i32
  ; r342 := (eq r340 r341)
  %t350 = icmp eq i32 %t348, %t349
  ; r343 := (bv_ule r341 r340)
  %t351 = icmp ule i32 %t349, %t348
  ; r344 := (not r342)
  %t352 = icmp eq i1 %t350, 0
  ; r345 := (and r343 r344)
  %t353 = and i1 %t351, %t352
  br i1 %t353, label %block_0_4066d1, label %block_0_406767
block_0_406767:
  %t354 = phi i64 [ %t20, %block_0_4066a6 ], [ %t48, %block_0_4066c0 ], [ %t334, %block_0_40675a ]
  %t355 = phi i64 [ %t21, %block_0_4066a6 ], [ %t49, %block_0_4066c0 ], [ %t335, %block_0_40675a ]
  %t356 = phi i512 [ %t24, %block_0_4066a6 ], [ %t53, %block_0_4066c0 ], [ %t339, %block_0_40675a ]
  ; r349 := (read (0x6356e8 : bv 64) (bv 32))
  %t357 = inttoptr i64 6510312 to i32*
  %t358 = load i32, i32* %t357
  ; r350 := (eq r349 (0x0 : bv 32))
  %t359 = icmp eq i32 %t358, 0
  br i1 %t359, label %block_0_406775, label %block_0_4067f5
block_0_406775:
  ret void
block_0_40677e:
  %t360 = phi i64 [ %arg3, %block_0_406690 ]
  %t361 = phi i64 [ %arg2, %block_0_406690 ]
  %t362 = phi i64 [ %arg1, %block_0_406690 ]
  %t363 = phi i64 [ %arg4, %block_0_406690 ]
  %t364 = phi i64 [ %arg5, %block_0_406690 ]
  %t365 = phi i512 [ %t11, %block_0_406690 ]
  %t366 = phi i512 [ %t12, %block_0_406690 ]
  %t367 = phi i512 [ %t13, %block_0_406690 ]
  %t368 = phi i512 [ %t14, %block_0_406690 ]
  %t369 = phi i512 [ %t15, %block_0_406690 ]
  %t370 = phi i512 [ %t16, %block_0_406690 ]
  %t371 = phi i512 [ %t17, %block_0_406690 ]
  %t372 = phi i512 [ %t18, %block_0_406690 ]
  ; r364 := (bitcast r356 (vec 8 double))
  %t373 = bitcast i512 %t365 to <8 x double>
  ; r365 := (bitcast r357 (vec 8 double))
  %t374 = bitcast i512 %t366 to <8 x double>
  ; r366 := (bitcast r358 (vec 8 double))
  %t375 = bitcast i512 %t367 to <8 x double>
  ; r367 := (bitcast r359 (vec 8 double))
  %t376 = bitcast i512 %t368 to <8 x double>
  ; r368 := (bitcast r360 (vec 8 double))
  %t377 = bitcast i512 %t369 to <8 x double>
  ; r369 := (bitcast r361 (vec 8 double))
  %t378 = bitcast i512 %t370 to <8 x double>
  ; r370 := (bitcast r362 (vec 8 double))
  %t379 = bitcast i512 %t371 to <8 x double>
  ; r371 := (bitcast r363 (vec 8 double))
  %t380 = bitcast i512 %t372 to <8 x double>
  ; r372 := call pthread_mutex_trylock_int((0x6356b0 : bv 64), r353, r352, r351, r354, r355, r364, r365, r366, r367, r368, r369, r370, r371)
  %t381 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 6510256, i64 %t362, i64 %t361, i64 %t360, i64 %t363, i64 %t364, <8 x double> %t373, <8 x double> %t374, <8 x double> %t375, <8 x double> %t376, <8 x double> %t377, <8 x double> %t378, <8 x double> %t379, <8 x double> %t380)
  ; r373 := (tuple_field r372 0)
  %t382 = extractvalue { i64, i64, <8 x double> } %t381, 0
  ; r374 := (tuple_field r372 1)
  %t383 = extractvalue { i64, i64, <8 x double> } %t381, 1
  ; r375 := (tuple_field r372 2)
  %t384 = extractvalue { i64, i64, <8 x double> } %t381, 2
  ; r376 := (bitcast r375 (bv 512))
  %t385 = bitcast <8 x double> %t384 to i512
  br label %block_0_406788
block_0_406788:
  %t386 = phi i64 [ %t382, %block_0_40677e ]
  %t387 = phi i64 [ %t360, %block_0_40677e ]
  %t388 = phi i64 [ %t383, %block_0_40677e ]
  %t389 = phi i64 [ %t362, %block_0_40677e ]
  %t390 = phi i64 [ %t363, %block_0_40677e ]
  %t391 = phi i64 [ %t364, %block_0_40677e ]
  %t392 = phi i512 [ %t385, %block_0_40677e ]
  %t393 = phi i512 [ %t366, %block_0_40677e ]
  %t394 = phi i512 [ %t367, %block_0_40677e ]
  %t395 = phi i512 [ %t368, %block_0_40677e ]
  %t396 = phi i512 [ %t369, %block_0_40677e ]
  %t397 = phi i512 [ %t370, %block_0_40677e ]
  %t398 = phi i512 [ %t371, %block_0_40677e ]
  %t399 = phi i512 [ %t372, %block_0_40677e ]
  ; r391 := (trunc r377 32)
  %t400 = trunc i64 %t386 to i32
  ; r392 := (eq r391 (0x0 : bv 32))
  %t401 = icmp eq i32 %t400, 0
  br i1 %t401, label %block_0_4066a6, label %block_0_406790
block_0_406790:
  %t402 = phi i64 [ %t387, %block_0_406788 ]
  %t403 = phi i64 [ %t388, %block_0_406788 ]
  %t404 = phi i64 [ %t389, %block_0_406788 ]
  %t405 = phi i64 [ %t390, %block_0_406788 ]
  %t406 = phi i64 [ %t391, %block_0_406788 ]
  %t407 = phi i512 [ %t392, %block_0_406788 ]
  %t408 = phi i512 [ %t393, %block_0_406788 ]
  %t409 = phi i512 [ %t394, %block_0_406788 ]
  %t410 = phi i512 [ %t395, %block_0_406788 ]
  %t411 = phi i512 [ %t396, %block_0_406788 ]
  %t412 = phi i512 [ %t397, %block_0_406788 ]
  %t413 = phi i512 [ %t398, %block_0_406788 ]
  %t414 = phi i512 [ %t399, %block_0_406788 ]
  ; r406 := (read (0x6354a8 : bv 64) (bv 32))
  %t415 = inttoptr i64 6509736 to i32*
  %t416 = load i32, i32* %t415
  ; r407 := (bv_ult r406 (0x1 : bv 32))
  %t417 = icmp ult i32 %t416, 1
  ; r408 := (eq r406 (0x1 : bv 32))
  %t418 = icmp eq i32 %t416, 1
  ; r409 := (or r407 r408)
  %t419 = or i1 %t417, %t418
  br i1 %t419, label %block_0_4067e6, label %block_0_406799
block_0_406799:
  %t420 = phi i64 [ %t404, %block_0_406790 ]
  %t421 = phi i64 [ %t405, %block_0_406790 ]
  %t422 = phi i64 [ %t406, %block_0_406790 ]
  %t423 = phi i512 [ %t407, %block_0_406790 ]
  %t424 = phi i512 [ %t408, %block_0_406790 ]
  %t425 = phi i512 [ %t409, %block_0_406790 ]
  %t426 = phi i512 [ %t410, %block_0_406790 ]
  %t427 = phi i512 [ %t411, %block_0_406790 ]
  %t428 = phi i512 [ %t412, %block_0_406790 ]
  %t429 = phi i512 [ %t413, %block_0_406790 ]
  %t430 = phi i512 [ %t414, %block_0_406790 ]
  br label %block_0_40679e
block_0_40679e:
  %t431 = phi i64 [ 1, %block_0_406799 ], [ %t531, %block_0_4067de ]
  %t432 = phi i64 [ %t420, %block_0_406799 ], [ %t518, %block_0_4067de ]
  %t433 = phi i64 [ %t421, %block_0_406799 ], [ %t519, %block_0_4067de ]
  %t434 = phi i64 [ %t422, %block_0_406799 ], [ %t520, %block_0_4067de ]
  %t435 = phi i512 [ %t423, %block_0_406799 ], [ %t521, %block_0_4067de ]
  %t436 = phi i512 [ %t424, %block_0_406799 ], [ %t522, %block_0_4067de ]
  %t437 = phi i512 [ %t425, %block_0_406799 ], [ %t523, %block_0_4067de ]
  %t438 = phi i512 [ %t426, %block_0_406799 ], [ %t524, %block_0_4067de ]
  %t439 = phi i512 [ %t427, %block_0_406799 ], [ %t525, %block_0_4067de ]
  %t440 = phi i512 [ %t428, %block_0_406799 ], [ %t526, %block_0_4067de ]
  %t441 = phi i512 [ %t429, %block_0_406799 ], [ %t527, %block_0_4067de ]
  %t442 = phi i512 [ %t430, %block_0_406799 ], [ %t528, %block_0_4067de ]
  ; r433 := (trunc r421 32)
  %t443 = trunc i64 %t431 to i32
  ; r434 := (uext r433 64)
  %t444 = zext i32 %t443 to i64
  ; r435 := (trunc r421 8)
  %t445 = trunc i64 %t431 to i8
  ; r436 := (bv_and r435 (0x1f : bv 8))
  %t446 = and i8 %t445, 31
  ; r437 := (eq r436 (0x0 : bv 8))
  %t447 = icmp eq i8 %t446, 0
  ; r438 := (uext r436 32)
  %t448 = zext i8 %t446 to i32
  ; r439 := (bv_shl (0x1 : bv 32) r438)
  %t449 = shl i32 1, %t448
  ; r440 := (mux r437 (0x1 : bv 32) r439)
  %t450 = select i1 %t447, i32 1, i32 %t449
  ; r441 := (uext r440 64)
  %t451 = zext i32 %t450 to i64
  ; r442 := (bv_ult (0x0 : bv 32) r440)
  %t452 = icmp ult i32 0, %t450
  br i1 %t452, label %block_0_4067b7, label %block_0_4067cc
block_0_4067b7:
  %t453 = phi i64 [ %t444, %block_0_40679e ], [ %t453, %block_0_4067b7 ]
  %t454 = phi i64 [ %t451, %block_0_40679e ], [ %t454, %block_0_4067b7 ]
  %t455 = phi i64 [ %t431, %block_0_40679e ], [ %t455, %block_0_4067b7 ]
  %t456 = phi i64 [ %t432, %block_0_40679e ], [ %t456, %block_0_4067b7 ]
  %t457 = phi i64 [ %t433, %block_0_40679e ], [ %t457, %block_0_4067b7 ]
  %t458 = phi i64 [ %t434, %block_0_40679e ], [ %t458, %block_0_4067b7 ]
  %t459 = phi i512 [ %t435, %block_0_40679e ], [ %t459, %block_0_4067b7 ]
  %t460 = phi i512 [ %t436, %block_0_40679e ], [ %t460, %block_0_4067b7 ]
  %t461 = phi i512 [ %t437, %block_0_40679e ], [ %t461, %block_0_4067b7 ]
  %t462 = phi i512 [ %t438, %block_0_40679e ], [ %t462, %block_0_4067b7 ]
  %t463 = phi i512 [ %t439, %block_0_40679e ], [ %t463, %block_0_4067b7 ]
  %t464 = phi i512 [ %t440, %block_0_40679e ], [ %t464, %block_0_4067b7 ]
  %t465 = phi i512 [ %t441, %block_0_40679e ], [ %t465, %block_0_4067b7 ]
  %t466 = phi i512 [ %t442, %block_0_40679e ], [ %t466, %block_0_4067b7 ]
  %t467 = phi i32 [ 0, %block_0_40679e ], [ %t468, %block_0_4067b7 ]
  ; r458 := (bv_add r457 (0x1 : bv 32))
  %t468 = add i32 %t467, 1
  ; r459 := (trunc r444 32)
  %t469 = trunc i64 %t454 to i32
  ; r460 := (bv_ult r458 r459)
  %t470 = icmp ult i32 %t468, %t469
  br i1 %t470, label %block_0_4067b7, label %block_0_4067cc
block_0_4067cc:
  %t471 = phi i64 [ %t444, %block_0_40679e ], [ %t453, %block_0_4067b7 ]
  %t472 = phi i64 [ %t451, %block_0_40679e ], [ %t454, %block_0_4067b7 ]
  %t473 = phi i64 [ %t431, %block_0_40679e ], [ %t455, %block_0_4067b7 ]
  %t474 = phi i64 [ %t432, %block_0_40679e ], [ %t456, %block_0_4067b7 ]
  %t475 = phi i64 [ %t433, %block_0_40679e ], [ %t457, %block_0_4067b7 ]
  %t476 = phi i64 [ %t434, %block_0_40679e ], [ %t458, %block_0_4067b7 ]
  %t477 = phi i512 [ %t435, %block_0_40679e ], [ %t459, %block_0_4067b7 ]
  %t478 = phi i512 [ %t436, %block_0_40679e ], [ %t460, %block_0_4067b7 ]
  %t479 = phi i512 [ %t437, %block_0_40679e ], [ %t461, %block_0_4067b7 ]
  %t480 = phi i512 [ %t438, %block_0_40679e ], [ %t462, %block_0_4067b7 ]
  %t481 = phi i512 [ %t439, %block_0_40679e ], [ %t463, %block_0_4067b7 ]
  %t482 = phi i512 [ %t440, %block_0_40679e ], [ %t464, %block_0_4067b7 ]
  %t483 = phi i512 [ %t441, %block_0_40679e ], [ %t465, %block_0_4067b7 ]
  %t484 = phi i512 [ %t442, %block_0_40679e ], [ %t466, %block_0_4067b7 ]
  ; r475 := (bitcast r467 (vec 8 double))
  %t485 = bitcast i512 %t477 to <8 x double>
  ; r476 := (bitcast r468 (vec 8 double))
  %t486 = bitcast i512 %t478 to <8 x double>
  ; r477 := (bitcast r469 (vec 8 double))
  %t487 = bitcast i512 %t479 to <8 x double>
  ; r478 := (bitcast r470 (vec 8 double))
  %t488 = bitcast i512 %t480 to <8 x double>
  ; r479 := (bitcast r471 (vec 8 double))
  %t489 = bitcast i512 %t481 to <8 x double>
  ; r480 := (bitcast r472 (vec 8 double))
  %t490 = bitcast i512 %t482 to <8 x double>
  ; r481 := (bitcast r473 (vec 8 double))
  %t491 = bitcast i512 %t483 to <8 x double>
  ; r482 := (bitcast r474 (vec 8 double))
  %t492 = bitcast i512 %t484 to <8 x double>
  ; r483 := call pthread_mutex_trylock_int((0x6356b0 : bv 64), r464, r462, r461, r465, r466, r475, r476, r477, r478, r479, r480, r481, r482)
  %t493 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 6510256, i64 %t474, i64 %t472, i64 %t471, i64 %t475, i64 %t476, <8 x double> %t485, <8 x double> %t486, <8 x double> %t487, <8 x double> %t488, <8 x double> %t489, <8 x double> %t490, <8 x double> %t491, <8 x double> %t492)
  ; r484 := (tuple_field r483 0)
  %t494 = extractvalue { i64, i64, <8 x double> } %t493, 0
  ; r485 := (tuple_field r483 1)
  %t495 = extractvalue { i64, i64, <8 x double> } %t493, 1
  ; r486 := (tuple_field r483 2)
  %t496 = extractvalue { i64, i64, <8 x double> } %t493, 2
  ; r487 := (bitcast r486 (bv 512))
  %t497 = bitcast <8 x double> %t496 to i512
  br label %block_0_4067d6
block_0_4067d6:
  %t498 = phi i64 [ %t494, %block_0_4067cc ]
  %t499 = phi i64 [ %t471, %block_0_4067cc ]
  %t500 = phi i64 [ %t495, %block_0_4067cc ]
  %t501 = phi i64 [ %t473, %block_0_4067cc ]
  %t502 = phi i64 [ %t474, %block_0_4067cc ]
  %t503 = phi i64 [ %t475, %block_0_4067cc ]
  %t504 = phi i64 [ %t476, %block_0_4067cc ]
  %t505 = phi i512 [ %t497, %block_0_4067cc ]
  %t506 = phi i512 [ %t478, %block_0_4067cc ]
  %t507 = phi i512 [ %t479, %block_0_4067cc ]
  %t508 = phi i512 [ %t480, %block_0_4067cc ]
  %t509 = phi i512 [ %t481, %block_0_4067cc ]
  %t510 = phi i512 [ %t482, %block_0_4067cc ]
  %t511 = phi i512 [ %t483, %block_0_4067cc ]
  %t512 = phi i512 [ %t484, %block_0_4067cc ]
  ; r503 := (trunc r488 32)
  %t513 = trunc i64 %t498 to i32
  ; r504 := (eq r503 (0x0 : bv 32))
  %t514 = icmp eq i32 %t513, 0
  br i1 %t514, label %block_0_4066a6, label %block_0_4067de
block_0_4067de:
  %t515 = phi i64 [ %t499, %block_0_4067d6 ]
  %t516 = phi i64 [ %t500, %block_0_4067d6 ]
  %t517 = phi i64 [ %t501, %block_0_4067d6 ]
  %t518 = phi i64 [ %t502, %block_0_4067d6 ]
  %t519 = phi i64 [ %t503, %block_0_4067d6 ]
  %t520 = phi i64 [ %t504, %block_0_4067d6 ]
  %t521 = phi i512 [ %t505, %block_0_4067d6 ]
  %t522 = phi i512 [ %t506, %block_0_4067d6 ]
  %t523 = phi i512 [ %t507, %block_0_4067d6 ]
  %t524 = phi i512 [ %t508, %block_0_4067d6 ]
  %t525 = phi i512 [ %t509, %block_0_4067d6 ]
  %t526 = phi i512 [ %t510, %block_0_4067d6 ]
  %t527 = phi i512 [ %t511, %block_0_4067d6 ]
  %t528 = phi i512 [ %t512, %block_0_4067d6 ]
  ; r519 := (trunc r507 32)
  %t529 = trunc i64 %t517 to i32
  ; r520 := (bv_add r519 (0x1 : bv 32))
  %t530 = add i32 %t529, 1
  ; r521 := (uext r520 64)
  %t531 = zext i32 %t530 to i64
  ; r522 := (eq r519 (0xb : bv 32))
  %t532 = icmp eq i32 %t529, 11
  br i1 %t532, label %block_0_4067e6, label %block_0_40679e
block_0_4067e6:
  %t533 = phi i64 [ %t402, %block_0_406790 ], [ %t515, %block_0_4067de ]
  %t534 = phi i64 [ %t403, %block_0_406790 ], [ %t516, %block_0_4067de ]
  %t535 = phi i64 [ %t404, %block_0_406790 ], [ %t518, %block_0_4067de ]
  %t536 = phi i64 [ %t405, %block_0_406790 ], [ %t519, %block_0_4067de ]
  %t537 = phi i64 [ %t406, %block_0_406790 ], [ %t520, %block_0_4067de ]
  %t538 = phi i512 [ %t407, %block_0_406790 ], [ %t521, %block_0_4067de ]
  %t539 = phi i512 [ %t408, %block_0_406790 ], [ %t522, %block_0_4067de ]
  %t540 = phi i512 [ %t409, %block_0_406790 ], [ %t523, %block_0_4067de ]
  %t541 = phi i512 [ %t410, %block_0_406790 ], [ %t524, %block_0_4067de ]
  %t542 = phi i512 [ %t411, %block_0_406790 ], [ %t525, %block_0_4067de ]
  %t543 = phi i512 [ %t412, %block_0_406790 ], [ %t526, %block_0_4067de ]
  %t544 = phi i512 [ %t413, %block_0_406790 ], [ %t527, %block_0_4067de ]
  %t545 = phi i512 [ %t414, %block_0_406790 ], [ %t528, %block_0_4067de ]
  ; r536 := (bitcast r528 (vec 8 double))
  %t546 = bitcast i512 %t538 to <8 x double>
  ; r537 := (bitcast r529 (vec 8 double))
  %t547 = bitcast i512 %t539 to <8 x double>
  ; r538 := (bitcast r530 (vec 8 double))
  %t548 = bitcast i512 %t540 to <8 x double>
  ; r539 := (bitcast r531 (vec 8 double))
  %t549 = bitcast i512 %t541 to <8 x double>
  ; r540 := (bitcast r532 (vec 8 double))
  %t550 = bitcast i512 %t542 to <8 x double>
  ; r541 := (bitcast r533 (vec 8 double))
  %t551 = bitcast i512 %t543 to <8 x double>
  ; r542 := (bitcast r534 (vec 8 double))
  %t552 = bitcast i512 %t544 to <8 x double>
  ; r543 := (bitcast r535 (vec 8 double))
  %t553 = bitcast i512 %t545 to <8 x double>
  ; r544 := call pthread_mutex_lock_int((0x6356b0 : bv 64), r525, r524, r523, r526, r527, r536, r537, r538, r539, r540, r541, r542, r543)
  %t554 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510256, i64 %t535, i64 %t534, i64 %t533, i64 %t536, i64 %t537, <8 x double> %t546, <8 x double> %t547, <8 x double> %t548, <8 x double> %t549, <8 x double> %t550, <8 x double> %t551, <8 x double> %t552, <8 x double> %t553)
  ; r545 := (tuple_field r544 0)
  %t555 = extractvalue { i64, i64, <8 x double> } %t554, 0
  ; r546 := (tuple_field r544 1)
  %t556 = extractvalue { i64, i64, <8 x double> } %t554, 1
  ; r547 := (tuple_field r544 2)
  %t557 = extractvalue { i64, i64, <8 x double> } %t554, 2
  ; r548 := (bitcast r547 (bv 512))
  %t558 = bitcast <8 x double> %t557 to i512
  br label %block_0_4067f0
block_0_4067f0:
  %t559 = phi i64 [ %t533, %block_0_4067e6 ]
  %t560 = phi i64 [ %t556, %block_0_4067e6 ]
  %t561 = phi i64 [ %t535, %block_0_4067e6 ]
  %t562 = phi i64 [ %t536, %block_0_4067e6 ]
  %t563 = phi i64 [ %t537, %block_0_4067e6 ]
  %t564 = phi i512 [ %t558, %block_0_4067e6 ]
  %t565 = phi i512 [ %t539, %block_0_4067e6 ]
  %t566 = phi i512 [ %t540, %block_0_4067e6 ]
  %t567 = phi i512 [ %t541, %block_0_4067e6 ]
  %t568 = phi i512 [ %t542, %block_0_4067e6 ]
  %t569 = phi i512 [ %t543, %block_0_4067e6 ]
  %t570 = phi i512 [ %t544, %block_0_4067e6 ]
  %t571 = phi i512 [ %t545, %block_0_4067e6 ]
  br label %block_0_4066a6
block_0_4067f5:
  %t572 = phi i64 [ %t354, %block_0_406767 ]
  %t573 = phi i64 [ %t355, %block_0_406767 ]
  %t574 = phi i512 [ %t356, %block_0_406767 ]
  ; r565 := (bitcast r564 (vec 8 double))
  %t575 = bitcast i512 %t574 to <8 x double>
  ; r566 := call _spinlock_stub((0x635680 : bv 64), r563, r562, r565)
  %t576 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6510208, i64 %t573, i64 %t572, <8 x double> %t575)
  ; r567 := (tuple_field r566 0)
  %t577 = extractvalue { i64, i64, <8 x double> } %t576, 0
  ; r568 := (tuple_field r566 1)
  %t578 = extractvalue { i64, i64, <8 x double> } %t576, 1
  ; r569 := (tuple_field r566 2)
  %t579 = extractvalue { i64, i64, <8 x double> } %t576, 2
  ; r570 := (bitcast r569 (bv 512))
  %t580 = bitcast <8 x double> %t579 to i512
  br label %block_0_4067ff
block_0_4067ff:
  %t581 = phi i64 [ %t578, %block_0_4067f5 ]
  %t582 = phi i64 [ %t573, %block_0_4067f5 ]
  %t583 = phi i512 [ %t580, %block_0_4067f5 ]
  ; r574 := (read (0x6356e8 : bv 64) (bv 32))
  %t584 = inttoptr i64 6510312 to i32*
  %t585 = load i32, i32* %t584
  ; r575 := (eq r574 (0x0 : bv 32))
  %t586 = icmp eq i32 %t585, 0
  br i1 %t586, label %block_0_406775, label %block_0_40680d
block_0_40680d:
  %t587 = phi i64 [ %t581, %block_0_4067ff ]
  %t588 = phi i64 [ %t582, %block_0_4067ff ]
  %t589 = phi i512 [ %t583, %block_0_4067ff ]
  ; r579 := (bitcast r578 (vec 8 double))
  %t590 = bitcast i512 %t589 to <8 x double>
  ; r580 := call _spinlock_stub((0x635540 : bv 64), r577, r576, r579)
  %t591 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6509888, i64 %t588, i64 %t587, <8 x double> %t590)
  ; r581 := (tuple_field r580 0)
  %t592 = extractvalue { i64, i64, <8 x double> } %t591, 0
  ; r582 := (tuple_field r580 1)
  %t593 = extractvalue { i64, i64, <8 x double> } %t591, 1
  ; r583 := (tuple_field r580 2)
  %t594 = extractvalue { i64, i64, <8 x double> } %t591, 2
  ; r584 := (bitcast r583 (bv 512))
  %t595 = bitcast <8 x double> %t594 to i512
  br label %block_0_406817
block_0_406817:
  %t596 = phi i64 [ %t593, %block_0_40680d ]
  %t597 = phi i64 [ %t588, %block_0_40680d ]
  %t598 = phi i512 [ %t595, %block_0_40680d ]
  ; r588 := (read (0x6356e8 : bv 64) (bv 32))
  %t599 = inttoptr i64 6510312 to i32*
  %t600 = load i32, i32* %t599
  ; r589 := (eq r588 (0x0 : bv 32))
  %t601 = icmp eq i32 %t600, 0
  br i1 %t601, label %block_0_406775, label %block_0_406827
block_0_406827:
  %t602 = phi i64 [ %t596, %block_0_406817 ]
  %t603 = phi i64 [ %t597, %block_0_406817 ]
  %t604 = phi i512 [ %t598, %block_0_406817 ]
  ; r593 := (bitcast r592 (vec 8 double))
  %t605 = bitcast i512 %t604 to <8 x double>
  ; r594 := call _spinlock_stub((0x6355a0 : bv 64), r591, r590, r593)
  %t606 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6509984, i64 %t603, i64 %t602, <8 x double> %t605)
  ret void
}
define { i64, i64, <8 x double> } @arena_ralloc_large(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_406840:
  ; r0 := (bv_add arg1 (0xfff : bv 64))
  %t0 = add i64 %arg1, 4095
  ; r1 := (bv_and r0 (0xfffffffffffff000 : bv 64))
  %t1 = and i64 %t0, 18446744073709547520
  ; r2 := (eq r1 arg2)
  %t2 = icmp eq i64 %t1, %arg2
  ; r3 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r5 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r6 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r7 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r10 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r11 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_40698f, label %block_0_406884
block_0_406884:
  %t12 = phi i64 [ %arg3, %block_0_406840 ]
  %t13 = phi i64 [ %arg2, %block_0_406840 ]
  %t14 = phi i64 [ %t1, %block_0_406840 ]
  %t15 = phi i64 [ %arg1, %block_0_406840 ]
  %t16 = phi i64 [ %arg0, %block_0_406840 ]
  %t17 = phi i64 [ %arg4, %block_0_406840 ]
  %t18 = phi i64 [ %arg5, %block_0_406840 ]
  %t19 = phi i512 [ %t4, %block_0_406840 ]
  %t20 = phi i512 [ %t5, %block_0_406840 ]
  %t21 = phi i512 [ %t6, %block_0_406840 ]
  %t22 = phi i512 [ %t7, %block_0_406840 ]
  %t23 = phi i512 [ %t8, %block_0_406840 ]
  %t24 = phi i512 [ %t9, %block_0_406840 ]
  %t25 = phi i512 [ %t10, %block_0_406840 ]
  %t26 = phi i512 [ %t11, %block_0_406840 ]
  ; r27 := (read (0x635518 : bv 64) (bv 64))
  %t27 = inttoptr i64 6509848 to i64*
  %t28 = load i64, i64* %t27
  ; r28 := (bv_complement r27)
  %t29 = xor i64 %t28, -1
  ; r29 := (bv_and r28 r16)
  %t30 = and i64 %t29, %t16
  ; r30 := (bv_ult r14 r13)
  %t31 = icmp ult i64 %t14, %t13
  ; r31 := (read r29 (bv 64))
  %t32 = inttoptr i64 %t30 to i64*
  %t33 = load i64, i64* %t32
  br i1 %t31, label %block_0_4068a0, label %block_0_406910
block_0_4068a0:
  %t34 = phi i64 [ %t30, %block_0_406884 ]
  %t35 = phi i64 [ %t12, %block_0_406884 ]
  %t36 = phi i64 [ %t13, %block_0_406884 ]
  %t37 = phi i64 [ %t14, %block_0_406884 ]
  %t38 = phi i64 [ %t15, %block_0_406884 ]
  %t39 = phi i64 [ %t16, %block_0_406884 ]
  %t40 = phi i64 [ %t18, %block_0_406884 ]
  %t41 = phi i64 [ %t33, %block_0_406884 ]
  %t42 = phi i512 [ %t19, %block_0_406884 ]
  %t43 = phi i512 [ %t20, %block_0_406884 ]
  %t44 = phi i512 [ %t21, %block_0_406884 ]
  %t45 = phi i512 [ %t22, %block_0_406884 ]
  %t46 = phi i512 [ %t23, %block_0_406884 ]
  %t47 = phi i512 [ %t24, %block_0_406884 ]
  %t48 = phi i512 [ %t25, %block_0_406884 ]
  %t49 = phi i512 [ %t26, %block_0_406884 ]
  ; r48 := (read (0x635461 : bv 64) (bv 8))
  %t50 = inttoptr i64 6509665 to i8*
  %t51 = load i8, i8* %t50
  ; r49 := (eq r48 (0x0 : bv 8))
  %t52 = icmp eq i8 %t51, 0
  br i1 %t52, label %block_0_4068ad, label %block_0_406abc
block_0_4068ad:
  %t53 = phi i64 [ %t35, %block_0_4068a0 ], [ %t921, %block_0_406ad1 ]
  %t54 = phi i64 [ %t36, %block_0_4068a0 ], [ %t922, %block_0_406ad1 ]
  %t55 = phi i64 [ %t37, %block_0_4068a0 ], [ %t923, %block_0_406ad1 ]
  %t56 = phi i64 [ %t36, %block_0_4068a0 ], [ %t924, %block_0_406ad1 ]
  %t57 = phi i64 [ %t38, %block_0_4068a0 ], [ %t925, %block_0_406ad1 ]
  %t58 = phi i64 [ %t40, %block_0_4068a0 ], [ %t926, %block_0_406ad1 ]
  %t59 = phi i64 [ %t41, %block_0_4068a0 ], [ %t927, %block_0_406ad1 ]
  %t60 = phi i512 [ %t42, %block_0_4068a0 ], [ %t928, %block_0_406ad1 ]
  %t61 = phi i512 [ %t43, %block_0_4068a0 ], [ %t929, %block_0_406ad1 ]
  %t62 = phi i512 [ %t44, %block_0_4068a0 ], [ %t930, %block_0_406ad1 ]
  %t63 = phi i512 [ %t45, %block_0_4068a0 ], [ %t931, %block_0_406ad1 ]
  %t64 = phi i512 [ %t46, %block_0_4068a0 ], [ %t932, %block_0_406ad1 ]
  %t65 = phi i512 [ %t47, %block_0_4068a0 ], [ %t933, %block_0_406ad1 ]
  %t66 = phi i512 [ %t48, %block_0_4068a0 ], [ %t934, %block_0_406ad1 ]
  %t67 = phi i512 [ %t49, %block_0_4068a0 ], [ %t935, %block_0_406ad1 ]
  %t68 = phi i64 [ %t39, %block_0_4068a0 ], [ %t936, %block_0_406ad1 ]
  %t69 = phi i64 [ %t34, %block_0_4068a0 ], [ %t937, %block_0_406ad1 ]
  ; r67 := (read (0x6356e8 : bv 64) (bv 32))
  %t70 = inttoptr i64 6510312 to i32*
  %t71 = load i32, i32* %t70
  ; r68 := (uext r67 64)
  %t72 = zext i32 %t71 to i64
  ; r69 := (eq r67 (0x0 : bv 32))
  %t73 = icmp eq i32 %t71, 0
  br i1 %t73, label %block_0_4068bd, label %block_0_406a45
block_0_4068bd:
  %t74 = phi i64 [ %t53, %block_0_4068ad ], [ %t641, %block_0_406a4d ], [ %t805, %block_0_406a9d ], [ %t880, %block_0_406ab7 ]
  %t75 = phi i64 [ %t55, %block_0_4068ad ], [ %t643, %block_0_406a4d ], [ %t807, %block_0_406a9d ], [ %t881, %block_0_406ab7 ]
  %t76 = phi i64 [ %t56, %block_0_4068ad ], [ %t644, %block_0_406a4d ], [ %t808, %block_0_406a9d ], [ %t882, %block_0_406ab7 ]
  %t77 = phi i64 [ %t57, %block_0_4068ad ], [ %t645, %block_0_406a4d ], [ %t809, %block_0_406a9d ], [ %t883, %block_0_406ab7 ]
  %t78 = phi i64 [ %t72, %block_0_4068ad ], [ %t646, %block_0_406a4d ], [ %t810, %block_0_406a9d ], [ %t884, %block_0_406ab7 ]
  %t79 = phi i64 [ %t58, %block_0_4068ad ], [ %t647, %block_0_406a4d ], [ %t811, %block_0_406a9d ], [ %t885, %block_0_406ab7 ]
  %t80 = phi i64 [ %t59, %block_0_4068ad ], [ %t648, %block_0_406a4d ], [ %t813, %block_0_406a9d ], [ %t886, %block_0_406ab7 ]
  %t81 = phi i512 [ %t60, %block_0_4068ad ], [ %t649, %block_0_406a4d ], [ %t814, %block_0_406a9d ], [ %t887, %block_0_406ab7 ]
  %t82 = phi i512 [ %t61, %block_0_4068ad ], [ %t650, %block_0_406a4d ], [ %t815, %block_0_406a9d ], [ %t888, %block_0_406ab7 ]
  %t83 = phi i512 [ %t62, %block_0_4068ad ], [ %t651, %block_0_406a4d ], [ %t816, %block_0_406a9d ], [ %t889, %block_0_406ab7 ]
  %t84 = phi i512 [ %t63, %block_0_4068ad ], [ %t652, %block_0_406a4d ], [ %t817, %block_0_406a9d ], [ %t890, %block_0_406ab7 ]
  %t85 = phi i512 [ %t64, %block_0_4068ad ], [ %t653, %block_0_406a4d ], [ %t818, %block_0_406a9d ], [ %t891, %block_0_406ab7 ]
  %t86 = phi i512 [ %t65, %block_0_4068ad ], [ %t654, %block_0_406a4d ], [ %t819, %block_0_406a9d ], [ %t892, %block_0_406ab7 ]
  %t87 = phi i512 [ %t66, %block_0_4068ad ], [ %t655, %block_0_406a4d ], [ %t820, %block_0_406a9d ], [ %t893, %block_0_406ab7 ]
  %t88 = phi i512 [ %t67, %block_0_4068ad ], [ %t656, %block_0_406a4d ], [ %t821, %block_0_406a9d ], [ %t894, %block_0_406ab7 ]
  %t89 = phi i64 [ %t68, %block_0_4068ad ], [ %t657, %block_0_406a4d ], [ %t822, %block_0_406a9d ], [ %t895, %block_0_406ab7 ]
  %t90 = phi i64 [ %t69, %block_0_4068ad ], [ %t658, %block_0_406a4d ], [ %t823, %block_0_406a9d ], [ %t896, %block_0_406ab7 ]
  ; r87 := (bitcast r77 (vec 8 double))
  %t91 = bitcast i512 %t81 to <8 x double>
  ; r88 := call arena_run_trim_tail(r76, r86, r85, r72, r71, (0x1 : bv 64), r87)
  %t92 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>) @arena_run_trim_tail(i64 %t80, i64 %t90, i64 %t89, i64 %t76, i64 %t75, i64 1, <8 x double> %t91)
  ; r89 := (tuple_field r88 0)
  %t93 = extractvalue { i64, i64, <8 x double> } %t92, 0
  ; r90 := (tuple_field r88 1)
  %t94 = extractvalue { i64, i64, <8 x double> } %t92, 1
  ; r91 := (tuple_field r88 2)
  %t95 = extractvalue { i64, i64, <8 x double> } %t92, 2
  ; r92 := (bitcast r91 (bv 512))
  %t96 = bitcast <8 x double> %t95 to i512
  br label %block_0_4068db
block_0_4068db:
  %t97 = phi i64 [ %t74, %block_0_4068bd ]
  %t98 = phi i64 [ %t94, %block_0_4068bd ]
  %t99 = phi i64 [ %t77, %block_0_4068bd ]
  %t100 = phi i64 [ %t78, %block_0_4068bd ]
  %t101 = phi i64 [ %t79, %block_0_4068bd ]
  %t102 = phi i64 [ %t80, %block_0_4068bd ]
  %t103 = phi i512 [ %t96, %block_0_4068bd ]
  %t104 = phi i512 [ %t82, %block_0_4068bd ]
  %t105 = phi i512 [ %t83, %block_0_4068bd ]
  %t106 = phi i512 [ %t84, %block_0_4068bd ]
  %t107 = phi i512 [ %t85, %block_0_4068bd ]
  %t108 = phi i512 [ %t86, %block_0_4068bd ]
  %t109 = phi i512 [ %t87, %block_0_4068bd ]
  %t110 = phi i512 [ %t88, %block_0_4068bd ]
  ; r107 := (read (0x6356e8 : bv 64) (bv 32))
  %t111 = inttoptr i64 6510312 to i32*
  %t112 = load i32, i32* %t111
  ; r108 := (eq r107 (0x0 : bv 32))
  %t113 = icmp eq i32 %t112, 0
  br i1 %t113, label %block_0_4068e9, label %block_0_4069c0
block_0_4068e9:
  %t114 = phi i64 [ %t98, %block_0_4068db ], [ %t268, %block_0_40698f ], [ %t275, %block_0_40699c ]
  %t115 = phi i512 [ %t103, %block_0_4068db ], [ %t271, %block_0_40698f ], [ %t278, %block_0_40699c ]
  br label %block_0_4068eb
block_0_4068eb:
  %t116 = phi i64 [ 0, %block_0_4068e9 ], [ 1, %block_0_40696a ], [ 1, %block_0_406985 ], [ 0, %block_0_4069b9 ], [ 0, %block_0_4069c8 ], [ 0, %block_0_406b17 ], [ 0, %block_0_406b3b ]
  %t117 = phi i64 [ %t114, %block_0_4068e9 ], [ %t237, %block_0_40696a ], [ %t266, %block_0_406985 ], [ %t292, %block_0_4069b9 ], [ %t321, %block_0_4069c8 ], [ %t999, %block_0_406b17 ], [ %t1019, %block_0_406b3b ]
  %t118 = phi i512 [ %t115, %block_0_4068e9 ], [ %t227, %block_0_40696a ], [ %t267, %block_0_406985 ], [ %t293, %block_0_4069b9 ], [ %t322, %block_0_4069c8 ], [ %t1002, %block_0_406b17 ], [ %t1020, %block_0_406b3b ]
  ; r114 := (bitcast r113 (vec 8 double))
  %t119 = bitcast i512 %t118 to <8 x double>
  ; r115 := (tuple r111 r112 r114)
  %t120 = insertvalue { i64, i64, <8 x double> } undef, i64 %t116, 0
  %t121 = insertvalue { i64, i64, <8 x double> } %t120, i64 %t117, 1
  %t122 = insertvalue { i64, i64, <8 x double> } %t121, <8 x double> %t119, 2
  ret { i64, i64, <8 x double> } %t122
block_0_406910:
  %t123 = phi i64 [ %t30, %block_0_406884 ]
  %t124 = phi i64 [ %t12, %block_0_406884 ]
  %t125 = phi i64 [ %t13, %block_0_406884 ]
  %t126 = phi i64 [ %t14, %block_0_406884 ]
  %t127 = phi i64 [ %t15, %block_0_406884 ]
  %t128 = phi i64 [ %t16, %block_0_406884 ]
  %t129 = phi i64 [ %t17, %block_0_406884 ]
  %t130 = phi i64 [ %t18, %block_0_406884 ]
  %t131 = phi i64 [ %t33, %block_0_406884 ]
  %t132 = phi i512 [ %t19, %block_0_406884 ]
  %t133 = phi i512 [ %t20, %block_0_406884 ]
  %t134 = phi i512 [ %t21, %block_0_406884 ]
  %t135 = phi i512 [ %t22, %block_0_406884 ]
  %t136 = phi i512 [ %t23, %block_0_406884 ]
  %t137 = phi i512 [ %t24, %block_0_406884 ]
  %t138 = phi i512 [ %t25, %block_0_406884 ]
  %t139 = phi i512 [ %t26, %block_0_406884 ]
  ; r133 := (bv_sub r121 r116)
  %t140 = sub i64 %t128, %t123
  ; r134 := (read (0x6356e8 : bv 64) (bv 32))
  %t141 = inttoptr i64 6510312 to i32*
  %t142 = load i32, i32* %t141
  ; r135 := (uext r134 64)
  %t143 = zext i32 %t142 to i64
  ; r136 := (bv_shr r133 (0xc : bv 64))
  %t144 = lshr i64 %t140, 12
  ; r137 := (eq r134 (0x0 : bv 32))
  %t145 = icmp eq i32 %t142, 0
  br i1 %t145, label %block_0_40692c, label %block_0_4069cf
block_0_40692c:
  %t146 = phi i64 [ %t126, %block_0_406910 ], [ %t358, %block_0_4069d7 ], [ %t512, %block_0_406a25 ], [ %t591, %block_0_406a3f ]
  %t147 = phi i64 [ %t125, %block_0_406910 ], [ %t359, %block_0_4069d7 ], [ %t513, %block_0_406a25 ], [ %t592, %block_0_406a3f ]
  %t148 = phi i64 [ %t143, %block_0_406910 ], [ %t360, %block_0_4069d7 ], [ %t514, %block_0_406a25 ], [ %t593, %block_0_406a3f ]
  %t149 = phi i64 [ %t129, %block_0_406910 ], [ %t361, %block_0_4069d7 ], [ %t515, %block_0_406a25 ], [ %t594, %block_0_406a3f ]
  %t150 = phi i64 [ %t130, %block_0_406910 ], [ %t362, %block_0_4069d7 ], [ %t516, %block_0_406a25 ], [ %t595, %block_0_406a3f ]
  %t151 = phi i64 [ %t127, %block_0_406910 ], [ %t363, %block_0_4069d7 ], [ %t517, %block_0_406a25 ], [ %t596, %block_0_406a3f ]
  %t152 = phi i64 [ %t131, %block_0_406910 ], [ %t364, %block_0_4069d7 ], [ %t519, %block_0_406a25 ], [ %t597, %block_0_406a3f ]
  %t153 = phi i64 [ %t144, %block_0_406910 ], [ %t365, %block_0_4069d7 ], [ %t520, %block_0_406a25 ], [ %t598, %block_0_406a3f ]
  %t154 = phi i512 [ %t132, %block_0_406910 ], [ %t366, %block_0_4069d7 ], [ %t521, %block_0_406a25 ], [ %t599, %block_0_406a3f ]
  %t155 = phi i512 [ %t133, %block_0_406910 ], [ %t367, %block_0_4069d7 ], [ %t522, %block_0_406a25 ], [ %t600, %block_0_406a3f ]
  %t156 = phi i512 [ %t134, %block_0_406910 ], [ %t368, %block_0_4069d7 ], [ %t523, %block_0_406a25 ], [ %t601, %block_0_406a3f ]
  %t157 = phi i512 [ %t135, %block_0_406910 ], [ %t369, %block_0_4069d7 ], [ %t524, %block_0_406a25 ], [ %t602, %block_0_406a3f ]
  %t158 = phi i512 [ %t136, %block_0_406910 ], [ %t370, %block_0_4069d7 ], [ %t525, %block_0_406a25 ], [ %t603, %block_0_406a3f ]
  %t159 = phi i512 [ %t137, %block_0_406910 ], [ %t371, %block_0_4069d7 ], [ %t526, %block_0_406a25 ], [ %t604, %block_0_406a3f ]
  %t160 = phi i512 [ %t138, %block_0_406910 ], [ %t372, %block_0_4069d7 ], [ %t527, %block_0_406a25 ], [ %t605, %block_0_406a3f ]
  %t161 = phi i512 [ %t139, %block_0_406910 ], [ %t373, %block_0_4069d7 ], [ %t528, %block_0_406a25 ], [ %t606, %block_0_406a3f ]
  %t162 = phi i64 [ %t128, %block_0_406910 ], [ %t374, %block_0_4069d7 ], [ %t529, %block_0_406a25 ], [ %t607, %block_0_406a3f ]
  %t163 = phi i64 [ %t123, %block_0_406910 ], [ %t375, %block_0_4069d7 ], [ %t530, %block_0_406a25 ], [ %t608, %block_0_406a3f ]
  ; r156 := (bv_shr r139 (0xc : bv 64))
  %t164 = lshr i64 %t147, 12
  ; r157 := (bv_add r145 r156)
  %t165 = add i64 %t153, %t164
  ; r158 := (read (0x635520 : bv 64) (bv 64))
  %t166 = inttoptr i64 6509856 to i64*
  %t167 = load i64, i64* %t166
  ; r159 := (bv_ult r157 r158)
  %t168 = icmp ult i64 %t165, %t167
  br i1 %t168, label %block_0_406940, label %block_0_40696a
block_0_406940:
  %t169 = phi i64 [ %t165, %block_0_40692c ]
  %t170 = phi i64 [ %t146, %block_0_40692c ]
  %t171 = phi i64 [ %t147, %block_0_40692c ]
  %t172 = phi i64 [ %t148, %block_0_40692c ]
  %t173 = phi i64 [ %t149, %block_0_40692c ]
  %t174 = phi i64 [ %t150, %block_0_40692c ]
  %t175 = phi i64 [ %t151, %block_0_40692c ]
  %t176 = phi i64 [ %t152, %block_0_40692c ]
  %t177 = phi i64 [ %t153, %block_0_40692c ]
  %t178 = phi i512 [ %t154, %block_0_40692c ]
  %t179 = phi i512 [ %t155, %block_0_40692c ]
  %t180 = phi i512 [ %t156, %block_0_40692c ]
  %t181 = phi i512 [ %t157, %block_0_40692c ]
  %t182 = phi i512 [ %t158, %block_0_40692c ]
  %t183 = phi i512 [ %t159, %block_0_40692c ]
  %t184 = phi i512 [ %t160, %block_0_40692c ]
  %t185 = phi i512 [ %t161, %block_0_40692c ]
  %t186 = phi i64 [ %t162, %block_0_40692c ]
  %t187 = phi i64 [ %t163, %block_0_40692c ]
  ; r179 := (bv_mul (0x2 : bv 64) r160)
  %t188 = mul i64 2, %t169
  ; r180 := (bv_add r160 r179)
  %t189 = add i64 %t169, %t188
  ; r181 := (bv_mul (0x8 : bv 64) r180)
  %t190 = mul i64 8, %t189
  ; r182 := (bv_add r178 r181)
  %t191 = add i64 %t187, %t190
  ; r183 := (bv_add r182 (0x38 : bv 64))
  %t192 = add i64 %t191, 56
  ; r184 := (read r183 (bv 64))
  %t193 = inttoptr i64 %t192 to i64*
  %t194 = load i64, i64* %t193
  ; r185 := (trunc r184 8)
  %t195 = trunc i64 %t194 to i8
  ; r186 := (bv_and r185 (0x1 : bv 8))
  %t196 = and i8 %t195, 1
  ; r187 := (eq r186 (0x0 : bv 8))
  %t197 = icmp eq i8 %t196, 0
  br i1 %t197, label %block_0_406955, label %block_0_40696a
block_0_406955:
  %t198 = phi i64 [ %t194, %block_0_406940 ]
  %t199 = phi i64 [ %t169, %block_0_406940 ]
  %t200 = phi i64 [ %t170, %block_0_406940 ]
  %t201 = phi i64 [ %t171, %block_0_406940 ]
  %t202 = phi i64 [ %t172, %block_0_406940 ]
  %t203 = phi i64 [ %t173, %block_0_406940 ]
  %t204 = phi i64 [ %t174, %block_0_406940 ]
  %t205 = phi i64 [ %t175, %block_0_406940 ]
  %t206 = phi i64 [ %t191, %block_0_406940 ]
  %t207 = phi i64 [ %t176, %block_0_406940 ]
  %t208 = phi i64 [ %t177, %block_0_406940 ]
  %t209 = phi i512 [ %t178, %block_0_406940 ]
  %t210 = phi i512 [ %t179, %block_0_406940 ]
  %t211 = phi i512 [ %t180, %block_0_406940 ]
  %t212 = phi i512 [ %t181, %block_0_406940 ]
  %t213 = phi i512 [ %t182, %block_0_406940 ]
  %t214 = phi i512 [ %t183, %block_0_406940 ]
  %t215 = phi i512 [ %t184, %block_0_406940 ]
  %t216 = phi i512 [ %t185, %block_0_406940 ]
  %t217 = phi i64 [ %t186, %block_0_406940 ]
  %t218 = phi i64 [ %t187, %block_0_406940 ]
  ; r209 := (bv_and r188 (0xfffffffffffff000 : bv 64))
  %t219 = and i64 %t198, 18446744073709547520
  ; r210 := (bv_sub r190 r191)
  %t220 = sub i64 %t200, %t201
  ; r211 := (bv_ult r209 r210)
  %t221 = icmp ult i64 %t219, %t220
  br i1 %t221, label %block_0_40696a, label %block_0_406ad6
block_0_40696a:
  %t222 = phi i64 [ %t165, %block_0_40692c ], [ %t169, %block_0_406940 ], [ %t199, %block_0_406955 ]
  %t223 = phi i64 [ %t148, %block_0_40692c ], [ %t172, %block_0_406940 ], [ %t202, %block_0_406955 ]
  %t224 = phi i64 [ %t149, %block_0_40692c ], [ %t173, %block_0_406940 ], [ %t203, %block_0_406955 ]
  %t225 = phi i64 [ %t150, %block_0_40692c ], [ %t174, %block_0_406940 ], [ %t204, %block_0_406955 ]
  %t226 = phi i64 [ %t152, %block_0_40692c ], [ %t176, %block_0_406940 ], [ %t207, %block_0_406955 ]
  %t227 = phi i512 [ %t154, %block_0_40692c ], [ %t178, %block_0_406940 ], [ %t209, %block_0_406955 ]
  %t228 = phi i512 [ %t155, %block_0_40692c ], [ %t179, %block_0_406940 ], [ %t210, %block_0_406955 ]
  %t229 = phi i512 [ %t156, %block_0_40692c ], [ %t180, %block_0_406940 ], [ %t211, %block_0_406955 ]
  %t230 = phi i512 [ %t157, %block_0_40692c ], [ %t181, %block_0_406940 ], [ %t212, %block_0_406955 ]
  %t231 = phi i512 [ %t158, %block_0_40692c ], [ %t182, %block_0_406940 ], [ %t213, %block_0_406955 ]
  %t232 = phi i512 [ %t159, %block_0_40692c ], [ %t183, %block_0_406940 ], [ %t214, %block_0_406955 ]
  %t233 = phi i512 [ %t160, %block_0_40692c ], [ %t184, %block_0_406940 ], [ %t215, %block_0_406955 ]
  %t234 = phi i512 [ %t161, %block_0_40692c ], [ %t185, %block_0_406940 ], [ %t216, %block_0_406955 ]
  ; r225 := (read (0x6356e8 : bv 64) (bv 32))
  %t235 = inttoptr i64 6510312 to i32*
  %t236 = load i32, i32* %t235
  ; r226 := (uext r225 64)
  %t237 = zext i32 %t236 to i64
  ; r227 := (eq r225 (0x0 : bv 32))
  %t238 = icmp eq i32 %t236, 0
  br i1 %t238, label %block_0_4068eb, label %block_0_40697d
block_0_40697d:
  %t239 = phi i64 [ %t222, %block_0_40696a ]
  %t240 = phi i64 [ %t237, %block_0_40696a ]
  %t241 = phi i64 [ %t223, %block_0_40696a ]
  %t242 = phi i64 [ %t224, %block_0_40696a ]
  %t243 = phi i64 [ %t225, %block_0_40696a ]
  %t244 = phi i64 [ %t226, %block_0_40696a ]
  %t245 = phi i512 [ %t227, %block_0_40696a ]
  %t246 = phi i512 [ %t228, %block_0_40696a ]
  %t247 = phi i512 [ %t229, %block_0_40696a ]
  %t248 = phi i512 [ %t230, %block_0_40696a ]
  %t249 = phi i512 [ %t231, %block_0_40696a ]
  %t250 = phi i512 [ %t232, %block_0_40696a ]
  %t251 = phi i512 [ %t233, %block_0_40696a ]
  %t252 = phi i512 [ %t234, %block_0_40696a ]
  ; r242 := (bitcast r234 (vec 8 double))
  %t253 = bitcast i512 %t245 to <8 x double>
  ; r243 := (bitcast r235 (vec 8 double))
  %t254 = bitcast i512 %t246 to <8 x double>
  ; r244 := (bitcast r236 (vec 8 double))
  %t255 = bitcast i512 %t247 to <8 x double>
  ; r245 := (bitcast r237 (vec 8 double))
  %t256 = bitcast i512 %t248 to <8 x double>
  ; r246 := (bitcast r238 (vec 8 double))
  %t257 = bitcast i512 %t249 to <8 x double>
  ; r247 := (bitcast r239 (vec 8 double))
  %t258 = bitcast i512 %t250 to <8 x double>
  ; r248 := (bitcast r240 (vec 8 double))
  %t259 = bitcast i512 %t251 to <8 x double>
  ; r249 := (bitcast r241 (vec 8 double))
  %t260 = bitcast i512 %t252 to <8 x double>
  ; r250 := call pthread_mutex_unlock_int(r233, r230, r229, r228, r231, r232, r242, r243, r244, r245, r246, r247, r248, r249)
  %t261 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t244, i64 %t241, i64 %t240, i64 %t239, i64 %t242, i64 %t243, <8 x double> %t253, <8 x double> %t254, <8 x double> %t255, <8 x double> %t256, <8 x double> %t257, <8 x double> %t258, <8 x double> %t259, <8 x double> %t260)
  ; r251 := (tuple_field r250 0)
  %t262 = extractvalue { i64, i64, <8 x double> } %t261, 0
  ; r252 := (tuple_field r250 1)
  %t263 = extractvalue { i64, i64, <8 x double> } %t261, 1
  ; r253 := (tuple_field r250 2)
  %t264 = extractvalue { i64, i64, <8 x double> } %t261, 2
  ; r254 := (bitcast r253 (bv 512))
  %t265 = bitcast <8 x double> %t264 to i512
  br label %block_0_406985
block_0_406985:
  %t266 = phi i64 [ %t263, %block_0_40697d ]
  %t267 = phi i512 [ %t265, %block_0_40697d ]
  br label %block_0_4068eb
block_0_40698f:
  %t268 = phi i64 [ %arg2, %block_0_406840 ]
  %t269 = phi i64 [ %arg1, %block_0_406840 ]
  %t270 = phi i64 [ %arg0, %block_0_406840 ]
  %t271 = phi i512 [ %t3, %block_0_406840 ]
  ; r261 := (read (0x635461 : bv 64) (bv 8))
  %t272 = inttoptr i64 6509665 to i8*
  %t273 = load i8, i8* %t272
  ; r262 := (eq r261 (0x0 : bv 8))
  %t274 = icmp eq i8 %t273, 0
  br i1 %t274, label %block_0_4068e9, label %block_0_40699c
block_0_40699c:
  %t275 = phi i64 [ %t268, %block_0_40698f ]
  %t276 = phi i64 [ %t269, %block_0_40698f ]
  %t277 = phi i64 [ %t270, %block_0_40698f ]
  %t278 = phi i512 [ %t271, %block_0_40698f ]
  ; r267 := (bv_ult r264 r263)
  %t279 = icmp ult i64 %t276, %t275
  br i1 %t279, label %block_0_4069a6, label %block_0_4068e9
block_0_4069a6:
  %t280 = phi i64 [ %t275, %block_0_40699c ]
  %t281 = phi i64 [ %t276, %block_0_40699c ]
  %t282 = phi i64 [ %t277, %block_0_40699c ]
  %t283 = phi i512 [ %t278, %block_0_40699c ]
  ; r272 := (bv_sub r268 r269)
  %t284 = sub i64 %t280, %t281
  ; r273 := (bv_add r270 r269)
  %t285 = add i64 %t282, %t281
  ; r274 := (bitcast r271 (vec 8 double))
  %t286 = bitcast i512 %t283 to <8 x double>
  ; r275 := call memset(r273, (0x5a : bv 64), r272, r274)
  %t287 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t285, i64 90, i64 %t284, <8 x double> %t286)
  ; r276 := (tuple_field r275 0)
  %t288 = extractvalue { i64, i64, <8 x double> } %t287, 0
  ; r277 := (tuple_field r275 1)
  %t289 = extractvalue { i64, i64, <8 x double> } %t287, 1
  ; r278 := (tuple_field r275 2)
  %t290 = extractvalue { i64, i64, <8 x double> } %t287, 2
  ; r279 := (bitcast r278 (bv 512))
  %t291 = bitcast <8 x double> %t290 to i512
  br label %block_0_4069b9
block_0_4069b9:
  %t292 = phi i64 [ %t289, %block_0_4069a6 ]
  %t293 = phi i512 [ %t291, %block_0_4069a6 ]
  br label %block_0_4068eb
block_0_4069c0:
  %t294 = phi i64 [ %t97, %block_0_4068db ]
  %t295 = phi i64 [ %t98, %block_0_4068db ]
  %t296 = phi i64 [ %t99, %block_0_4068db ]
  %t297 = phi i64 [ %t100, %block_0_4068db ]
  %t298 = phi i64 [ %t101, %block_0_4068db ]
  %t299 = phi i64 [ %t102, %block_0_4068db ]
  %t300 = phi i512 [ %t103, %block_0_4068db ]
  %t301 = phi i512 [ %t104, %block_0_4068db ]
  %t302 = phi i512 [ %t105, %block_0_4068db ]
  %t303 = phi i512 [ %t106, %block_0_4068db ]
  %t304 = phi i512 [ %t107, %block_0_4068db ]
  %t305 = phi i512 [ %t108, %block_0_4068db ]
  %t306 = phi i512 [ %t109, %block_0_4068db ]
  %t307 = phi i512 [ %t110, %block_0_4068db ]
  ; r296 := (bitcast r288 (vec 8 double))
  %t308 = bitcast i512 %t300 to <8 x double>
  ; r297 := (bitcast r289 (vec 8 double))
  %t309 = bitcast i512 %t301 to <8 x double>
  ; r298 := (bitcast r290 (vec 8 double))
  %t310 = bitcast i512 %t302 to <8 x double>
  ; r299 := (bitcast r291 (vec 8 double))
  %t311 = bitcast i512 %t303 to <8 x double>
  ; r300 := (bitcast r292 (vec 8 double))
  %t312 = bitcast i512 %t304 to <8 x double>
  ; r301 := (bitcast r293 (vec 8 double))
  %t313 = bitcast i512 %t305 to <8 x double>
  ; r302 := (bitcast r294 (vec 8 double))
  %t314 = bitcast i512 %t306 to <8 x double>
  ; r303 := (bitcast r295 (vec 8 double))
  %t315 = bitcast i512 %t307 to <8 x double>
  ; r304 := call pthread_mutex_unlock_int(r287, r284, r283, r282, r285, r286, r296, r297, r298, r299, r300, r301, r302, r303)
  %t316 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t299, i64 %t296, i64 %t295, i64 %t294, i64 %t297, i64 %t298, <8 x double> %t308, <8 x double> %t309, <8 x double> %t310, <8 x double> %t311, <8 x double> %t312, <8 x double> %t313, <8 x double> %t314, <8 x double> %t315)
  ; r305 := (tuple_field r304 0)
  %t317 = extractvalue { i64, i64, <8 x double> } %t316, 0
  ; r306 := (tuple_field r304 1)
  %t318 = extractvalue { i64, i64, <8 x double> } %t316, 1
  ; r307 := (tuple_field r304 2)
  %t319 = extractvalue { i64, i64, <8 x double> } %t316, 2
  ; r308 := (bitcast r307 (bv 512))
  %t320 = bitcast <8 x double> %t319 to i512
  br label %block_0_4069c8
block_0_4069c8:
  %t321 = phi i64 [ %t318, %block_0_4069c0 ]
  %t322 = phi i512 [ %t320, %block_0_4069c0 ]
  br label %block_0_4068eb
block_0_4069cf:
  %t323 = phi i64 [ %t123, %block_0_406910 ]
  %t324 = phi i64 [ %t124, %block_0_406910 ]
  %t325 = phi i64 [ %t125, %block_0_406910 ]
  %t326 = phi i64 [ %t126, %block_0_406910 ]
  %t327 = phi i64 [ %t143, %block_0_406910 ]
  %t328 = phi i64 [ %t128, %block_0_406910 ]
  %t329 = phi i64 [ %t129, %block_0_406910 ]
  %t330 = phi i64 [ %t130, %block_0_406910 ]
  %t331 = phi i64 [ %t127, %block_0_406910 ]
  %t332 = phi i64 [ %t131, %block_0_406910 ]
  %t333 = phi i64 [ %t144, %block_0_406910 ]
  %t334 = phi i512 [ %t132, %block_0_406910 ]
  %t335 = phi i512 [ %t133, %block_0_406910 ]
  %t336 = phi i512 [ %t134, %block_0_406910 ]
  %t337 = phi i512 [ %t135, %block_0_406910 ]
  %t338 = phi i512 [ %t136, %block_0_406910 ]
  %t339 = phi i512 [ %t137, %block_0_406910 ]
  %t340 = phi i512 [ %t138, %block_0_406910 ]
  %t341 = phi i512 [ %t139, %block_0_406910 ]
  ; r330 := (bitcast r322 (vec 8 double))
  %t342 = bitcast i512 %t334 to <8 x double>
  ; r331 := (bitcast r323 (vec 8 double))
  %t343 = bitcast i512 %t335 to <8 x double>
  ; r332 := (bitcast r324 (vec 8 double))
  %t344 = bitcast i512 %t336 to <8 x double>
  ; r333 := (bitcast r325 (vec 8 double))
  %t345 = bitcast i512 %t337 to <8 x double>
  ; r334 := (bitcast r326 (vec 8 double))
  %t346 = bitcast i512 %t338 to <8 x double>
  ; r335 := (bitcast r327 (vec 8 double))
  %t347 = bitcast i512 %t339 to <8 x double>
  ; r336 := (bitcast r328 (vec 8 double))
  %t348 = bitcast i512 %t340 to <8 x double>
  ; r337 := (bitcast r329 (vec 8 double))
  %t349 = bitcast i512 %t341 to <8 x double>
  ; r338 := call pthread_mutex_trylock_int(r320, r315, r313, r312, r317, r318, r330, r331, r332, r333, r334, r335, r336, r337)
  %t350 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t332, i64 %t327, i64 %t325, i64 %t324, i64 %t329, i64 %t330, <8 x double> %t342, <8 x double> %t343, <8 x double> %t344, <8 x double> %t345, <8 x double> %t346, <8 x double> %t347, <8 x double> %t348, <8 x double> %t349)
  ; r339 := (tuple_field r338 0)
  %t351 = extractvalue { i64, i64, <8 x double> } %t350, 0
  ; r340 := (tuple_field r338 1)
  %t352 = extractvalue { i64, i64, <8 x double> } %t350, 1
  ; r341 := (tuple_field r338 2)
  %t353 = extractvalue { i64, i64, <8 x double> } %t350, 2
  ; r342 := (bitcast r341 (bv 512))
  %t354 = bitcast <8 x double> %t353 to i512
  br label %block_0_4069d7
block_0_4069d7:
  %t355 = phi i64 [ %t351, %block_0_4069cf ]
  %t356 = phi i64 [ %t324, %block_0_4069cf ]
  %t357 = phi i64 [ %t352, %block_0_4069cf ]
  %t358 = phi i64 [ %t326, %block_0_4069cf ]
  %t359 = phi i64 [ %t325, %block_0_4069cf ]
  %t360 = phi i64 [ %t327, %block_0_4069cf ]
  %t361 = phi i64 [ %t329, %block_0_4069cf ]
  %t362 = phi i64 [ %t330, %block_0_4069cf ]
  %t363 = phi i64 [ %t331, %block_0_4069cf ]
  %t364 = phi i64 [ %t332, %block_0_4069cf ]
  %t365 = phi i64 [ %t333, %block_0_4069cf ]
  %t366 = phi i512 [ %t354, %block_0_4069cf ]
  %t367 = phi i512 [ %t335, %block_0_4069cf ]
  %t368 = phi i512 [ %t336, %block_0_4069cf ]
  %t369 = phi i512 [ %t337, %block_0_4069cf ]
  %t370 = phi i512 [ %t338, %block_0_4069cf ]
  %t371 = phi i512 [ %t339, %block_0_4069cf ]
  %t372 = phi i512 [ %t340, %block_0_4069cf ]
  %t373 = phi i512 [ %t341, %block_0_4069cf ]
  %t374 = phi i64 [ %t328, %block_0_4069cf ]
  %t375 = phi i64 [ %t323, %block_0_4069cf ]
  ; r364 := (trunc r343 32)
  %t376 = trunc i64 %t355 to i32
  ; r365 := (eq r364 (0x0 : bv 32))
  %t377 = icmp eq i32 %t376, 0
  br i1 %t377, label %block_0_40692c, label %block_0_4069df
block_0_4069df:
  %t378 = phi i64 [ %t356, %block_0_4069d7 ]
  %t379 = phi i64 [ %t357, %block_0_4069d7 ]
  %t380 = phi i64 [ %t358, %block_0_4069d7 ]
  %t381 = phi i64 [ %t359, %block_0_4069d7 ]
  %t382 = phi i64 [ %t360, %block_0_4069d7 ]
  %t383 = phi i64 [ %t361, %block_0_4069d7 ]
  %t384 = phi i64 [ %t362, %block_0_4069d7 ]
  %t385 = phi i64 [ %t363, %block_0_4069d7 ]
  %t386 = phi i64 [ %t364, %block_0_4069d7 ]
  %t387 = phi i64 [ %t365, %block_0_4069d7 ]
  %t388 = phi i512 [ %t366, %block_0_4069d7 ]
  %t389 = phi i512 [ %t367, %block_0_4069d7 ]
  %t390 = phi i512 [ %t368, %block_0_4069d7 ]
  %t391 = phi i512 [ %t369, %block_0_4069d7 ]
  %t392 = phi i512 [ %t370, %block_0_4069d7 ]
  %t393 = phi i512 [ %t371, %block_0_4069d7 ]
  %t394 = phi i512 [ %t372, %block_0_4069d7 ]
  %t395 = phi i512 [ %t373, %block_0_4069d7 ]
  %t396 = phi i64 [ %t374, %block_0_4069d7 ]
  %t397 = phi i64 [ %t375, %block_0_4069d7 ]
  ; r386 := (read (0x6354a8 : bv 64) (bv 32))
  %t398 = inttoptr i64 6509736 to i32*
  %t399 = load i32, i32* %t398
  ; r387 := (bv_ult r386 (0x1 : bv 32))
  %t400 = icmp ult i32 %t399, 1
  ; r388 := (eq r386 (0x1 : bv 32))
  %t401 = icmp eq i32 %t399, 1
  ; r389 := (or r387 r388)
  %t402 = or i1 %t400, %t401
  br i1 %t402, label %block_0_406a37, label %block_0_4069e8
block_0_4069e8:
  %t403 = phi i64 [ %t380, %block_0_4069df ]
  %t404 = phi i64 [ %t381, %block_0_4069df ]
  %t405 = phi i64 [ %t382, %block_0_4069df ]
  %t406 = phi i64 [ %t383, %block_0_4069df ]
  %t407 = phi i64 [ %t384, %block_0_4069df ]
  %t408 = phi i64 [ %t385, %block_0_4069df ]
  %t409 = phi i64 [ %t386, %block_0_4069df ]
  %t410 = phi i64 [ %t387, %block_0_4069df ]
  %t411 = phi i512 [ %t388, %block_0_4069df ]
  %t412 = phi i512 [ %t389, %block_0_4069df ]
  %t413 = phi i512 [ %t390, %block_0_4069df ]
  %t414 = phi i512 [ %t391, %block_0_4069df ]
  %t415 = phi i512 [ %t392, %block_0_4069df ]
  %t416 = phi i512 [ %t393, %block_0_4069df ]
  %t417 = phi i512 [ %t394, %block_0_4069df ]
  %t418 = phi i512 [ %t395, %block_0_4069df ]
  %t419 = phi i64 [ %t396, %block_0_4069df ]
  %t420 = phi i64 [ %t397, %block_0_4069df ]
  br label %block_0_4069ee
block_0_4069ee:
  %t421 = phi i64 [ %t403, %block_0_4069e8 ], [ %t535, %block_0_406a2d ]
  %t422 = phi i64 [ %t404, %block_0_4069e8 ], [ %t536, %block_0_406a2d ]
  %t423 = phi i64 [ %t405, %block_0_4069e8 ], [ %t537, %block_0_406a2d ]
  %t424 = phi i64 [ %t406, %block_0_4069e8 ], [ %t538, %block_0_406a2d ]
  %t425 = phi i64 [ %t407, %block_0_4069e8 ], [ %t539, %block_0_406a2d ]
  %t426 = phi i64 [ %t408, %block_0_4069e8 ], [ %t540, %block_0_406a2d ]
  %t427 = phi i64 [ 1, %block_0_4069e8 ], [ %t556, %block_0_406a2d ]
  %t428 = phi i64 [ %t409, %block_0_4069e8 ], [ %t542, %block_0_406a2d ]
  %t429 = phi i64 [ %t410, %block_0_4069e8 ], [ %t543, %block_0_406a2d ]
  %t430 = phi i512 [ %t411, %block_0_4069e8 ], [ %t544, %block_0_406a2d ]
  %t431 = phi i512 [ %t412, %block_0_4069e8 ], [ %t545, %block_0_406a2d ]
  %t432 = phi i512 [ %t413, %block_0_4069e8 ], [ %t546, %block_0_406a2d ]
  %t433 = phi i512 [ %t414, %block_0_4069e8 ], [ %t547, %block_0_406a2d ]
  %t434 = phi i512 [ %t415, %block_0_4069e8 ], [ %t548, %block_0_406a2d ]
  %t435 = phi i512 [ %t416, %block_0_4069e8 ], [ %t549, %block_0_406a2d ]
  %t436 = phi i512 [ %t417, %block_0_4069e8 ], [ %t550, %block_0_406a2d ]
  %t437 = phi i512 [ %t418, %block_0_4069e8 ], [ %t551, %block_0_406a2d ]
  %t438 = phi i64 [ %t419, %block_0_4069e8 ], [ %t552, %block_0_406a2d ]
  %t439 = phi i64 [ %t420, %block_0_4069e8 ], [ %t553, %block_0_406a2d ]
  ; r427 := (trunc r414 32)
  %t440 = trunc i64 %t427 to i32
  ; r428 := (uext r427 64)
  %t441 = zext i32 %t440 to i64
  ; r429 := (trunc r414 8)
  %t442 = trunc i64 %t427 to i8
  ; r430 := (bv_and r429 (0x1f : bv 8))
  %t443 = and i8 %t442, 31
  ; r431 := (eq r430 (0x0 : bv 8))
  %t444 = icmp eq i8 %t443, 0
  ; r432 := (uext r430 32)
  %t445 = zext i8 %t443 to i32
  ; r433 := (bv_shl (0x1 : bv 32) r432)
  %t446 = shl i32 1, %t445
  ; r434 := (mux r431 (0x1 : bv 32) r433)
  %t447 = select i1 %t444, i32 1, i32 %t446
  ; r435 := (uext r434 64)
  %t448 = zext i32 %t447 to i64
  ; r436 := (bv_ult (0x0 : bv 32) r434)
  %t449 = icmp ult i32 0, %t447
  br i1 %t449, label %block_0_406a08, label %block_0_406a1d
block_0_406a08:
  %t450 = phi i64 [ %t441, %block_0_4069ee ], [ %t450, %block_0_406a08 ]
  %t451 = phi i64 [ %t448, %block_0_4069ee ], [ %t451, %block_0_406a08 ]
  %t452 = phi i64 [ %t421, %block_0_4069ee ], [ %t452, %block_0_406a08 ]
  %t453 = phi i64 [ %t422, %block_0_4069ee ], [ %t453, %block_0_406a08 ]
  %t454 = phi i64 [ %t423, %block_0_4069ee ], [ %t454, %block_0_406a08 ]
  %t455 = phi i64 [ %t424, %block_0_4069ee ], [ %t455, %block_0_406a08 ]
  %t456 = phi i64 [ %t425, %block_0_4069ee ], [ %t456, %block_0_406a08 ]
  %t457 = phi i64 [ %t426, %block_0_4069ee ], [ %t457, %block_0_406a08 ]
  %t458 = phi i64 [ %t427, %block_0_4069ee ], [ %t458, %block_0_406a08 ]
  %t459 = phi i64 [ %t428, %block_0_4069ee ], [ %t459, %block_0_406a08 ]
  %t460 = phi i64 [ %t429, %block_0_4069ee ], [ %t460, %block_0_406a08 ]
  %t461 = phi i512 [ %t430, %block_0_4069ee ], [ %t461, %block_0_406a08 ]
  %t462 = phi i512 [ %t431, %block_0_4069ee ], [ %t462, %block_0_406a08 ]
  %t463 = phi i512 [ %t432, %block_0_4069ee ], [ %t463, %block_0_406a08 ]
  %t464 = phi i512 [ %t433, %block_0_4069ee ], [ %t464, %block_0_406a08 ]
  %t465 = phi i512 [ %t434, %block_0_4069ee ], [ %t465, %block_0_406a08 ]
  %t466 = phi i512 [ %t435, %block_0_4069ee ], [ %t466, %block_0_406a08 ]
  %t467 = phi i512 [ %t436, %block_0_4069ee ], [ %t467, %block_0_406a08 ]
  %t468 = phi i512 [ %t437, %block_0_4069ee ], [ %t468, %block_0_406a08 ]
  %t469 = phi i64 [ %t438, %block_0_4069ee ], [ %t469, %block_0_406a08 ]
  %t470 = phi i64 [ %t439, %block_0_4069ee ], [ %t470, %block_0_406a08 ]
  %t471 = phi i32 [ 0, %block_0_4069ee ], [ %t472, %block_0_406a08 ]
  ; r459 := (bv_add r458 (0x1 : bv 32))
  %t472 = add i32 %t471, 1
  ; r460 := (trunc r438 32)
  %t473 = trunc i64 %t451 to i32
  ; r461 := (bv_ult r459 r460)
  %t474 = icmp ult i32 %t472, %t473
  br i1 %t474, label %block_0_406a08, label %block_0_406a1d
block_0_406a1d:
  %t475 = phi i64 [ %t441, %block_0_4069ee ], [ %t450, %block_0_406a08 ]
  %t476 = phi i64 [ %t448, %block_0_4069ee ], [ %t451, %block_0_406a08 ]
  %t477 = phi i64 [ %t421, %block_0_4069ee ], [ %t452, %block_0_406a08 ]
  %t478 = phi i64 [ %t422, %block_0_4069ee ], [ %t453, %block_0_406a08 ]
  %t479 = phi i64 [ %t423, %block_0_4069ee ], [ %t454, %block_0_406a08 ]
  %t480 = phi i64 [ %t424, %block_0_4069ee ], [ %t455, %block_0_406a08 ]
  %t481 = phi i64 [ %t425, %block_0_4069ee ], [ %t456, %block_0_406a08 ]
  %t482 = phi i64 [ %t426, %block_0_4069ee ], [ %t457, %block_0_406a08 ]
  %t483 = phi i64 [ %t427, %block_0_4069ee ], [ %t458, %block_0_406a08 ]
  %t484 = phi i64 [ %t428, %block_0_4069ee ], [ %t459, %block_0_406a08 ]
  %t485 = phi i64 [ %t429, %block_0_4069ee ], [ %t460, %block_0_406a08 ]
  %t486 = phi i512 [ %t430, %block_0_4069ee ], [ %t461, %block_0_406a08 ]
  %t487 = phi i512 [ %t431, %block_0_4069ee ], [ %t462, %block_0_406a08 ]
  %t488 = phi i512 [ %t432, %block_0_4069ee ], [ %t463, %block_0_406a08 ]
  %t489 = phi i512 [ %t433, %block_0_4069ee ], [ %t464, %block_0_406a08 ]
  %t490 = phi i512 [ %t434, %block_0_4069ee ], [ %t465, %block_0_406a08 ]
  %t491 = phi i512 [ %t435, %block_0_4069ee ], [ %t466, %block_0_406a08 ]
  %t492 = phi i512 [ %t436, %block_0_4069ee ], [ %t467, %block_0_406a08 ]
  %t493 = phi i512 [ %t437, %block_0_4069ee ], [ %t468, %block_0_406a08 ]
  %t494 = phi i64 [ %t438, %block_0_4069ee ], [ %t469, %block_0_406a08 ]
  %t495 = phi i64 [ %t439, %block_0_4069ee ], [ %t470, %block_0_406a08 ]
  ; r483 := (bitcast r473 (vec 8 double))
  %t496 = bitcast i512 %t486 to <8 x double>
  ; r484 := (bitcast r474 (vec 8 double))
  %t497 = bitcast i512 %t487 to <8 x double>
  ; r485 := (bitcast r475 (vec 8 double))
  %t498 = bitcast i512 %t488 to <8 x double>
  ; r486 := (bitcast r476 (vec 8 double))
  %t499 = bitcast i512 %t489 to <8 x double>
  ; r487 := (bitcast r477 (vec 8 double))
  %t500 = bitcast i512 %t490 to <8 x double>
  ; r488 := (bitcast r478 (vec 8 double))
  %t501 = bitcast i512 %t491 to <8 x double>
  ; r489 := (bitcast r479 (vec 8 double))
  %t502 = bitcast i512 %t492 to <8 x double>
  ; r490 := (bitcast r480 (vec 8 double))
  %t503 = bitcast i512 %t493 to <8 x double>
  ; r491 := call pthread_mutex_trylock_int(r471, r466, r463, r462, r467, r468, r483, r484, r485, r486, r487, r488, r489, r490)
  %t504 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t484, i64 %t479, i64 %t476, i64 %t475, i64 %t480, i64 %t481, <8 x double> %t496, <8 x double> %t497, <8 x double> %t498, <8 x double> %t499, <8 x double> %t500, <8 x double> %t501, <8 x double> %t502, <8 x double> %t503)
  ; r492 := (tuple_field r491 0)
  %t505 = extractvalue { i64, i64, <8 x double> } %t504, 0
  ; r493 := (tuple_field r491 1)
  %t506 = extractvalue { i64, i64, <8 x double> } %t504, 1
  ; r494 := (tuple_field r491 2)
  %t507 = extractvalue { i64, i64, <8 x double> } %t504, 2
  ; r495 := (bitcast r494 (bv 512))
  %t508 = bitcast <8 x double> %t507 to i512
  br label %block_0_406a25
block_0_406a25:
  %t509 = phi i64 [ %t505, %block_0_406a1d ]
  %t510 = phi i64 [ %t475, %block_0_406a1d ]
  %t511 = phi i64 [ %t506, %block_0_406a1d ]
  %t512 = phi i64 [ %t477, %block_0_406a1d ]
  %t513 = phi i64 [ %t478, %block_0_406a1d ]
  %t514 = phi i64 [ %t479, %block_0_406a1d ]
  %t515 = phi i64 [ %t480, %block_0_406a1d ]
  %t516 = phi i64 [ %t481, %block_0_406a1d ]
  %t517 = phi i64 [ %t482, %block_0_406a1d ]
  %t518 = phi i64 [ %t483, %block_0_406a1d ]
  %t519 = phi i64 [ %t484, %block_0_406a1d ]
  %t520 = phi i64 [ %t485, %block_0_406a1d ]
  %t521 = phi i512 [ %t508, %block_0_406a1d ]
  %t522 = phi i512 [ %t487, %block_0_406a1d ]
  %t523 = phi i512 [ %t488, %block_0_406a1d ]
  %t524 = phi i512 [ %t489, %block_0_406a1d ]
  %t525 = phi i512 [ %t490, %block_0_406a1d ]
  %t526 = phi i512 [ %t491, %block_0_406a1d ]
  %t527 = phi i512 [ %t492, %block_0_406a1d ]
  %t528 = phi i512 [ %t493, %block_0_406a1d ]
  %t529 = phi i64 [ %t494, %block_0_406a1d ]
  %t530 = phi i64 [ %t495, %block_0_406a1d ]
  ; r518 := (trunc r496 32)
  %t531 = trunc i64 %t509 to i32
  ; r519 := (eq r518 (0x0 : bv 32))
  %t532 = icmp eq i32 %t531, 0
  br i1 %t532, label %block_0_40692c, label %block_0_406a2d
block_0_406a2d:
  %t533 = phi i64 [ %t510, %block_0_406a25 ]
  %t534 = phi i64 [ %t511, %block_0_406a25 ]
  %t535 = phi i64 [ %t512, %block_0_406a25 ]
  %t536 = phi i64 [ %t513, %block_0_406a25 ]
  %t537 = phi i64 [ %t514, %block_0_406a25 ]
  %t538 = phi i64 [ %t515, %block_0_406a25 ]
  %t539 = phi i64 [ %t516, %block_0_406a25 ]
  %t540 = phi i64 [ %t517, %block_0_406a25 ]
  %t541 = phi i64 [ %t518, %block_0_406a25 ]
  %t542 = phi i64 [ %t519, %block_0_406a25 ]
  %t543 = phi i64 [ %t520, %block_0_406a25 ]
  %t544 = phi i512 [ %t521, %block_0_406a25 ]
  %t545 = phi i512 [ %t522, %block_0_406a25 ]
  %t546 = phi i512 [ %t523, %block_0_406a25 ]
  %t547 = phi i512 [ %t524, %block_0_406a25 ]
  %t548 = phi i512 [ %t525, %block_0_406a25 ]
  %t549 = phi i512 [ %t526, %block_0_406a25 ]
  %t550 = phi i512 [ %t527, %block_0_406a25 ]
  %t551 = phi i512 [ %t528, %block_0_406a25 ]
  %t552 = phi i64 [ %t529, %block_0_406a25 ]
  %t553 = phi i64 [ %t530, %block_0_406a25 ]
  ; r541 := (trunc r528 32)
  %t554 = trunc i64 %t541 to i32
  ; r542 := (bv_add r541 (0x1 : bv 32))
  %t555 = add i32 %t554, 1
  ; r543 := (uext r542 64)
  %t556 = zext i32 %t555 to i64
  ; r544 := (eq r541 (0xb : bv 32))
  %t557 = icmp eq i32 %t554, 11
  br i1 %t557, label %block_0_406a37, label %block_0_4069ee
block_0_406a37:
  %t558 = phi i64 [ %t378, %block_0_4069df ], [ %t533, %block_0_406a2d ]
  %t559 = phi i64 [ %t379, %block_0_4069df ], [ %t534, %block_0_406a2d ]
  %t560 = phi i64 [ %t380, %block_0_4069df ], [ %t535, %block_0_406a2d ]
  %t561 = phi i64 [ %t381, %block_0_4069df ], [ %t536, %block_0_406a2d ]
  %t562 = phi i64 [ %t382, %block_0_4069df ], [ %t537, %block_0_406a2d ]
  %t563 = phi i64 [ %t383, %block_0_4069df ], [ %t538, %block_0_406a2d ]
  %t564 = phi i64 [ %t384, %block_0_4069df ], [ %t539, %block_0_406a2d ]
  %t565 = phi i64 [ %t385, %block_0_4069df ], [ %t540, %block_0_406a2d ]
  %t566 = phi i64 [ %t386, %block_0_4069df ], [ %t542, %block_0_406a2d ]
  %t567 = phi i64 [ %t387, %block_0_4069df ], [ %t543, %block_0_406a2d ]
  %t568 = phi i512 [ %t388, %block_0_4069df ], [ %t544, %block_0_406a2d ]
  %t569 = phi i512 [ %t389, %block_0_4069df ], [ %t545, %block_0_406a2d ]
  %t570 = phi i512 [ %t390, %block_0_4069df ], [ %t546, %block_0_406a2d ]
  %t571 = phi i512 [ %t391, %block_0_4069df ], [ %t547, %block_0_406a2d ]
  %t572 = phi i512 [ %t392, %block_0_4069df ], [ %t548, %block_0_406a2d ]
  %t573 = phi i512 [ %t393, %block_0_4069df ], [ %t549, %block_0_406a2d ]
  %t574 = phi i512 [ %t394, %block_0_4069df ], [ %t550, %block_0_406a2d ]
  %t575 = phi i512 [ %t395, %block_0_4069df ], [ %t551, %block_0_406a2d ]
  %t576 = phi i64 [ %t396, %block_0_4069df ], [ %t552, %block_0_406a2d ]
  %t577 = phi i64 [ %t397, %block_0_4069df ], [ %t553, %block_0_406a2d ]
  ; r565 := (bitcast r555 (vec 8 double))
  %t578 = bitcast i512 %t568 to <8 x double>
  ; r566 := (bitcast r556 (vec 8 double))
  %t579 = bitcast i512 %t569 to <8 x double>
  ; r567 := (bitcast r557 (vec 8 double))
  %t580 = bitcast i512 %t570 to <8 x double>
  ; r568 := (bitcast r558 (vec 8 double))
  %t581 = bitcast i512 %t571 to <8 x double>
  ; r569 := (bitcast r559 (vec 8 double))
  %t582 = bitcast i512 %t572 to <8 x double>
  ; r570 := (bitcast r560 (vec 8 double))
  %t583 = bitcast i512 %t573 to <8 x double>
  ; r571 := (bitcast r561 (vec 8 double))
  %t584 = bitcast i512 %t574 to <8 x double>
  ; r572 := (bitcast r562 (vec 8 double))
  %t585 = bitcast i512 %t575 to <8 x double>
  ; r573 := call pthread_mutex_lock_int(r553, r549, r546, r545, r550, r551, r565, r566, r567, r568, r569, r570, r571, r572)
  %t586 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 %t566, i64 %t562, i64 %t559, i64 %t558, i64 %t563, i64 %t564, <8 x double> %t578, <8 x double> %t579, <8 x double> %t580, <8 x double> %t581, <8 x double> %t582, <8 x double> %t583, <8 x double> %t584, <8 x double> %t585)
  ; r574 := (tuple_field r573 0)
  %t587 = extractvalue { i64, i64, <8 x double> } %t586, 0
  ; r575 := (tuple_field r573 1)
  %t588 = extractvalue { i64, i64, <8 x double> } %t586, 1
  ; r576 := (tuple_field r573 2)
  %t589 = extractvalue { i64, i64, <8 x double> } %t586, 2
  ; r577 := (bitcast r576 (bv 512))
  %t590 = bitcast <8 x double> %t589 to i512
  br label %block_0_406a3f
block_0_406a3f:
  %t591 = phi i64 [ %t560, %block_0_406a37 ]
  %t592 = phi i64 [ %t561, %block_0_406a37 ]
  %t593 = phi i64 [ %t562, %block_0_406a37 ]
  %t594 = phi i64 [ %t563, %block_0_406a37 ]
  %t595 = phi i64 [ %t564, %block_0_406a37 ]
  %t596 = phi i64 [ %t565, %block_0_406a37 ]
  %t597 = phi i64 [ %t566, %block_0_406a37 ]
  %t598 = phi i64 [ %t567, %block_0_406a37 ]
  %t599 = phi i512 [ %t590, %block_0_406a37 ]
  %t600 = phi i512 [ %t569, %block_0_406a37 ]
  %t601 = phi i512 [ %t570, %block_0_406a37 ]
  %t602 = phi i512 [ %t571, %block_0_406a37 ]
  %t603 = phi i512 [ %t572, %block_0_406a37 ]
  %t604 = phi i512 [ %t573, %block_0_406a37 ]
  %t605 = phi i512 [ %t574, %block_0_406a37 ]
  %t606 = phi i512 [ %t575, %block_0_406a37 ]
  %t607 = phi i64 [ %t576, %block_0_406a37 ]
  %t608 = phi i64 [ %t577, %block_0_406a37 ]
  br label %block_0_40692c
block_0_406a45:
  %t609 = phi i64 [ %t53, %block_0_4068ad ]
  %t610 = phi i64 [ %t54, %block_0_4068ad ]
  %t611 = phi i64 [ %t55, %block_0_4068ad ]
  %t612 = phi i64 [ %t56, %block_0_4068ad ]
  %t613 = phi i64 [ %t57, %block_0_4068ad ]
  %t614 = phi i64 [ %t72, %block_0_4068ad ]
  %t615 = phi i64 [ %t58, %block_0_4068ad ]
  %t616 = phi i64 [ %t59, %block_0_4068ad ]
  %t617 = phi i512 [ %t60, %block_0_4068ad ]
  %t618 = phi i512 [ %t61, %block_0_4068ad ]
  %t619 = phi i512 [ %t62, %block_0_4068ad ]
  %t620 = phi i512 [ %t63, %block_0_4068ad ]
  %t621 = phi i512 [ %t64, %block_0_4068ad ]
  %t622 = phi i512 [ %t65, %block_0_4068ad ]
  %t623 = phi i512 [ %t66, %block_0_4068ad ]
  %t624 = phi i512 [ %t67, %block_0_4068ad ]
  %t625 = phi i64 [ %t68, %block_0_4068ad ]
  %t626 = phi i64 [ %t69, %block_0_4068ad ]
  ; r614 := (bitcast r604 (vec 8 double))
  %t627 = bitcast i512 %t617 to <8 x double>
  ; r615 := (bitcast r605 (vec 8 double))
  %t628 = bitcast i512 %t618 to <8 x double>
  ; r616 := (bitcast r606 (vec 8 double))
  %t629 = bitcast i512 %t619 to <8 x double>
  ; r617 := (bitcast r607 (vec 8 double))
  %t630 = bitcast i512 %t620 to <8 x double>
  ; r618 := (bitcast r608 (vec 8 double))
  %t631 = bitcast i512 %t621 to <8 x double>
  ; r619 := (bitcast r609 (vec 8 double))
  %t632 = bitcast i512 %t622 to <8 x double>
  ; r620 := (bitcast r610 (vec 8 double))
  %t633 = bitcast i512 %t623 to <8 x double>
  ; r621 := (bitcast r611 (vec 8 double))
  %t634 = bitcast i512 %t624 to <8 x double>
  ; r622 := call pthread_mutex_trylock_int(r603, r600, r597, r596, r601, r602, r614, r615, r616, r617, r618, r619, r620, r621)
  %t635 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t616, i64 %t613, i64 %t610, i64 %t609, i64 %t614, i64 %t615, <8 x double> %t627, <8 x double> %t628, <8 x double> %t629, <8 x double> %t630, <8 x double> %t631, <8 x double> %t632, <8 x double> %t633, <8 x double> %t634)
  ; r623 := (tuple_field r622 0)
  %t636 = extractvalue { i64, i64, <8 x double> } %t635, 0
  ; r624 := (tuple_field r622 1)
  %t637 = extractvalue { i64, i64, <8 x double> } %t635, 1
  ; r625 := (tuple_field r622 2)
  %t638 = extractvalue { i64, i64, <8 x double> } %t635, 2
  ; r626 := (bitcast r625 (bv 512))
  %t639 = bitcast <8 x double> %t638 to i512
  br label %block_0_406a4d
block_0_406a4d:
  %t640 = phi i64 [ %t636, %block_0_406a45 ]
  %t641 = phi i64 [ %t609, %block_0_406a45 ]
  %t642 = phi i64 [ %t637, %block_0_406a45 ]
  %t643 = phi i64 [ %t611, %block_0_406a45 ]
  %t644 = phi i64 [ %t612, %block_0_406a45 ]
  %t645 = phi i64 [ %t613, %block_0_406a45 ]
  %t646 = phi i64 [ %t614, %block_0_406a45 ]
  %t647 = phi i64 [ %t615, %block_0_406a45 ]
  %t648 = phi i64 [ %t616, %block_0_406a45 ]
  %t649 = phi i512 [ %t639, %block_0_406a45 ]
  %t650 = phi i512 [ %t618, %block_0_406a45 ]
  %t651 = phi i512 [ %t619, %block_0_406a45 ]
  %t652 = phi i512 [ %t620, %block_0_406a45 ]
  %t653 = phi i512 [ %t621, %block_0_406a45 ]
  %t654 = phi i512 [ %t622, %block_0_406a45 ]
  %t655 = phi i512 [ %t623, %block_0_406a45 ]
  %t656 = phi i512 [ %t624, %block_0_406a45 ]
  %t657 = phi i64 [ %t625, %block_0_406a45 ]
  %t658 = phi i64 [ %t626, %block_0_406a45 ]
  ; r646 := (trunc r627 32)
  %t659 = trunc i64 %t640 to i32
  ; r647 := (eq r646 (0x0 : bv 32))
  %t660 = icmp eq i32 %t659, 0
  br i1 %t660, label %block_0_4068bd, label %block_0_406a56
block_0_406a56:
  %t661 = phi i64 [ %t641, %block_0_406a4d ]
  %t662 = phi i64 [ %t642, %block_0_406a4d ]
  %t663 = phi i64 [ %t643, %block_0_406a4d ]
  %t664 = phi i64 [ %t644, %block_0_406a4d ]
  %t665 = phi i64 [ %t645, %block_0_406a4d ]
  %t666 = phi i64 [ %t646, %block_0_406a4d ]
  %t667 = phi i64 [ %t647, %block_0_406a4d ]
  %t668 = phi i64 [ %t648, %block_0_406a4d ]
  %t669 = phi i512 [ %t649, %block_0_406a4d ]
  %t670 = phi i512 [ %t650, %block_0_406a4d ]
  %t671 = phi i512 [ %t651, %block_0_406a4d ]
  %t672 = phi i512 [ %t652, %block_0_406a4d ]
  %t673 = phi i512 [ %t653, %block_0_406a4d ]
  %t674 = phi i512 [ %t654, %block_0_406a4d ]
  %t675 = phi i512 [ %t655, %block_0_406a4d ]
  %t676 = phi i512 [ %t656, %block_0_406a4d ]
  %t677 = phi i64 [ %t657, %block_0_406a4d ]
  %t678 = phi i64 [ %t658, %block_0_406a4d ]
  ; r666 := (read (0x6354a8 : bv 64) (bv 32))
  %t679 = inttoptr i64 6509736 to i32*
  %t680 = load i32, i32* %t679
  ; r667 := (bv_ult r666 (0x1 : bv 32))
  %t681 = icmp ult i32 %t680, 1
  ; r668 := (eq r666 (0x1 : bv 32))
  %t682 = icmp eq i32 %t680, 1
  ; r669 := (or r667 r668)
  %t683 = or i1 %t681, %t682
  br i1 %t683, label %block_0_406aaf, label %block_0_406a5f
block_0_406a5f:
  %t684 = phi i64 [ %t663, %block_0_406a56 ]
  %t685 = phi i64 [ %t664, %block_0_406a56 ]
  %t686 = phi i64 [ %t665, %block_0_406a56 ]
  %t687 = phi i64 [ %t666, %block_0_406a56 ]
  %t688 = phi i64 [ %t667, %block_0_406a56 ]
  %t689 = phi i64 [ %t668, %block_0_406a56 ]
  %t690 = phi i512 [ %t669, %block_0_406a56 ]
  %t691 = phi i512 [ %t670, %block_0_406a56 ]
  %t692 = phi i512 [ %t671, %block_0_406a56 ]
  %t693 = phi i512 [ %t672, %block_0_406a56 ]
  %t694 = phi i512 [ %t673, %block_0_406a56 ]
  %t695 = phi i512 [ %t674, %block_0_406a56 ]
  %t696 = phi i512 [ %t675, %block_0_406a56 ]
  %t697 = phi i512 [ %t676, %block_0_406a56 ]
  %t698 = phi i64 [ %t677, %block_0_406a56 ]
  %t699 = phi i64 [ %t678, %block_0_406a56 ]
  br label %block_0_406a65
block_0_406a65:
  %t700 = phi i64 [ %t684, %block_0_406a5f ], [ %t828, %block_0_406aa5 ]
  %t701 = phi i64 [ %t685, %block_0_406a5f ], [ %t829, %block_0_406aa5 ]
  %t702 = phi i64 [ %t686, %block_0_406a5f ], [ %t830, %block_0_406aa5 ]
  %t703 = phi i64 [ %t687, %block_0_406a5f ], [ %t831, %block_0_406aa5 ]
  %t704 = phi i64 [ %t688, %block_0_406a5f ], [ %t832, %block_0_406aa5 ]
  %t705 = phi i64 [ 1, %block_0_406a5f ], [ %t847, %block_0_406aa5 ]
  %t706 = phi i64 [ %t689, %block_0_406a5f ], [ %t834, %block_0_406aa5 ]
  %t707 = phi i512 [ %t690, %block_0_406a5f ], [ %t835, %block_0_406aa5 ]
  %t708 = phi i512 [ %t691, %block_0_406a5f ], [ %t836, %block_0_406aa5 ]
  %t709 = phi i512 [ %t692, %block_0_406a5f ], [ %t837, %block_0_406aa5 ]
  %t710 = phi i512 [ %t693, %block_0_406a5f ], [ %t838, %block_0_406aa5 ]
  %t711 = phi i512 [ %t694, %block_0_406a5f ], [ %t839, %block_0_406aa5 ]
  %t712 = phi i512 [ %t695, %block_0_406a5f ], [ %t840, %block_0_406aa5 ]
  %t713 = phi i512 [ %t696, %block_0_406a5f ], [ %t841, %block_0_406aa5 ]
  %t714 = phi i512 [ %t697, %block_0_406a5f ], [ %t842, %block_0_406aa5 ]
  %t715 = phi i64 [ %t698, %block_0_406a5f ], [ %t843, %block_0_406aa5 ]
  %t716 = phi i64 [ %t699, %block_0_406a5f ], [ %t844, %block_0_406aa5 ]
  ; r703 := (trunc r691 32)
  %t717 = trunc i64 %t705 to i32
  ; r704 := (uext r703 64)
  %t718 = zext i32 %t717 to i64
  ; r705 := (trunc r691 8)
  %t719 = trunc i64 %t705 to i8
  ; r706 := (bv_and r705 (0x1f : bv 8))
  %t720 = and i8 %t719, 31
  ; r707 := (eq r706 (0x0 : bv 8))
  %t721 = icmp eq i8 %t720, 0
  ; r708 := (uext r706 32)
  %t722 = zext i8 %t720 to i32
  ; r709 := (bv_shl (0x1 : bv 32) r708)
  %t723 = shl i32 1, %t722
  ; r710 := (mux r707 (0x1 : bv 32) r709)
  %t724 = select i1 %t721, i32 1, i32 %t723
  ; r711 := (uext r710 64)
  %t725 = zext i32 %t724 to i64
  ; r712 := (bv_ult r710 (0x0 : bv 32))
  %t726 = icmp ult i32 %t724, 0
  ; r713 := (eq r710 (0x0 : bv 32))
  %t727 = icmp eq i32 %t724, 0
  ; r714 := (or r712 r713)
  %t728 = or i1 %t726, %t727
  br i1 %t728, label %block_0_406a95, label %block_0_406a7f
block_0_406a7f:
  %t729 = phi i64 [ %t718, %block_0_406a65 ]
  %t730 = phi i64 [ %t725, %block_0_406a65 ]
  %t731 = phi i64 [ %t700, %block_0_406a65 ]
  %t732 = phi i64 [ %t701, %block_0_406a65 ]
  %t733 = phi i64 [ %t702, %block_0_406a65 ]
  %t734 = phi i64 [ %t703, %block_0_406a65 ]
  %t735 = phi i64 [ %t704, %block_0_406a65 ]
  %t736 = phi i64 [ %t705, %block_0_406a65 ]
  %t737 = phi i64 [ %t706, %block_0_406a65 ]
  %t738 = phi i512 [ %t707, %block_0_406a65 ]
  %t739 = phi i512 [ %t708, %block_0_406a65 ]
  %t740 = phi i512 [ %t709, %block_0_406a65 ]
  %t741 = phi i512 [ %t710, %block_0_406a65 ]
  %t742 = phi i512 [ %t711, %block_0_406a65 ]
  %t743 = phi i512 [ %t712, %block_0_406a65 ]
  %t744 = phi i512 [ %t713, %block_0_406a65 ]
  %t745 = phi i512 [ %t714, %block_0_406a65 ]
  %t746 = phi i64 [ %t715, %block_0_406a65 ]
  %t747 = phi i64 [ %t716, %block_0_406a65 ]
  %t748 = phi i32 [ 0, %block_0_406a65 ]
  br label %block_0_406a80
block_0_406a80:
  %t749 = phi i64 [ %t729, %block_0_406a7f ], [ %t749, %block_0_406a80 ]
  %t750 = phi i64 [ %t730, %block_0_406a7f ], [ %t750, %block_0_406a80 ]
  %t751 = phi i64 [ %t731, %block_0_406a7f ], [ %t751, %block_0_406a80 ]
  %t752 = phi i64 [ %t732, %block_0_406a7f ], [ %t752, %block_0_406a80 ]
  %t753 = phi i64 [ %t733, %block_0_406a7f ], [ %t753, %block_0_406a80 ]
  %t754 = phi i64 [ %t734, %block_0_406a7f ], [ %t754, %block_0_406a80 ]
  %t755 = phi i64 [ %t735, %block_0_406a7f ], [ %t755, %block_0_406a80 ]
  %t756 = phi i64 [ %t736, %block_0_406a7f ], [ %t756, %block_0_406a80 ]
  %t757 = phi i64 [ %t737, %block_0_406a7f ], [ %t757, %block_0_406a80 ]
  %t758 = phi i512 [ %t738, %block_0_406a7f ], [ %t758, %block_0_406a80 ]
  %t759 = phi i512 [ %t739, %block_0_406a7f ], [ %t759, %block_0_406a80 ]
  %t760 = phi i512 [ %t740, %block_0_406a7f ], [ %t760, %block_0_406a80 ]
  %t761 = phi i512 [ %t741, %block_0_406a7f ], [ %t761, %block_0_406a80 ]
  %t762 = phi i512 [ %t742, %block_0_406a7f ], [ %t762, %block_0_406a80 ]
  %t763 = phi i512 [ %t743, %block_0_406a7f ], [ %t763, %block_0_406a80 ]
  %t764 = phi i512 [ %t744, %block_0_406a7f ], [ %t764, %block_0_406a80 ]
  %t765 = phi i512 [ %t745, %block_0_406a7f ], [ %t765, %block_0_406a80 ]
  %t766 = phi i64 [ %t746, %block_0_406a7f ], [ %t766, %block_0_406a80 ]
  %t767 = phi i64 [ %t747, %block_0_406a7f ], [ %t767, %block_0_406a80 ]
  %t768 = phi i32 [ %t748, %block_0_406a7f ], [ %t769, %block_0_406a80 ]
  ; r755 := (bv_add r754 (0x1 : bv 32))
  %t769 = add i32 %t768, 1
  ; r756 := (trunc r736 32)
  %t770 = trunc i64 %t750 to i32
  ; r757 := (bv_ult r755 r756)
  %t771 = icmp ult i32 %t769, %t770
  br i1 %t771, label %block_0_406a80, label %block_0_406a95
block_0_406a95:
  %t772 = phi i64 [ %t718, %block_0_406a65 ], [ %t749, %block_0_406a80 ]
  %t773 = phi i64 [ %t725, %block_0_406a65 ], [ %t750, %block_0_406a80 ]
  %t774 = phi i64 [ %t700, %block_0_406a65 ], [ %t751, %block_0_406a80 ]
  %t775 = phi i64 [ %t701, %block_0_406a65 ], [ %t752, %block_0_406a80 ]
  %t776 = phi i64 [ %t702, %block_0_406a65 ], [ %t753, %block_0_406a80 ]
  %t777 = phi i64 [ %t703, %block_0_406a65 ], [ %t754, %block_0_406a80 ]
  %t778 = phi i64 [ %t704, %block_0_406a65 ], [ %t755, %block_0_406a80 ]
  %t779 = phi i64 [ %t705, %block_0_406a65 ], [ %t756, %block_0_406a80 ]
  %t780 = phi i64 [ %t706, %block_0_406a65 ], [ %t757, %block_0_406a80 ]
  %t781 = phi i512 [ %t707, %block_0_406a65 ], [ %t758, %block_0_406a80 ]
  %t782 = phi i512 [ %t708, %block_0_406a65 ], [ %t759, %block_0_406a80 ]
  %t783 = phi i512 [ %t709, %block_0_406a65 ], [ %t760, %block_0_406a80 ]
  %t784 = phi i512 [ %t710, %block_0_406a65 ], [ %t761, %block_0_406a80 ]
  %t785 = phi i512 [ %t711, %block_0_406a65 ], [ %t762, %block_0_406a80 ]
  %t786 = phi i512 [ %t712, %block_0_406a65 ], [ %t763, %block_0_406a80 ]
  %t787 = phi i512 [ %t713, %block_0_406a65 ], [ %t764, %block_0_406a80 ]
  %t788 = phi i512 [ %t714, %block_0_406a65 ], [ %t765, %block_0_406a80 ]
  %t789 = phi i64 [ %t715, %block_0_406a65 ], [ %t766, %block_0_406a80 ]
  %t790 = phi i64 [ %t716, %block_0_406a65 ], [ %t767, %block_0_406a80 ]
  ; r777 := (bitcast r767 (vec 8 double))
  %t791 = bitcast i512 %t781 to <8 x double>
  ; r778 := (bitcast r768 (vec 8 double))
  %t792 = bitcast i512 %t782 to <8 x double>
  ; r779 := (bitcast r769 (vec 8 double))
  %t793 = bitcast i512 %t783 to <8 x double>
  ; r780 := (bitcast r770 (vec 8 double))
  %t794 = bitcast i512 %t784 to <8 x double>
  ; r781 := (bitcast r771 (vec 8 double))
  %t795 = bitcast i512 %t785 to <8 x double>
  ; r782 := (bitcast r772 (vec 8 double))
  %t796 = bitcast i512 %t786 to <8 x double>
  ; r783 := (bitcast r773 (vec 8 double))
  %t797 = bitcast i512 %t787 to <8 x double>
  ; r784 := (bitcast r774 (vec 8 double))
  %t798 = bitcast i512 %t788 to <8 x double>
  ; r785 := call pthread_mutex_trylock_int(r766, r762, r759, r758, r763, r764, r777, r778, r779, r780, r781, r782, r783, r784)
  %t799 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t780, i64 %t776, i64 %t773, i64 %t772, i64 %t777, i64 %t778, <8 x double> %t791, <8 x double> %t792, <8 x double> %t793, <8 x double> %t794, <8 x double> %t795, <8 x double> %t796, <8 x double> %t797, <8 x double> %t798)
  ; r786 := (tuple_field r785 0)
  %t800 = extractvalue { i64, i64, <8 x double> } %t799, 0
  ; r787 := (tuple_field r785 1)
  %t801 = extractvalue { i64, i64, <8 x double> } %t799, 1
  ; r788 := (tuple_field r785 2)
  %t802 = extractvalue { i64, i64, <8 x double> } %t799, 2
  ; r789 := (bitcast r788 (bv 512))
  %t803 = bitcast <8 x double> %t802 to i512
  br label %block_0_406a9d
block_0_406a9d:
  %t804 = phi i64 [ %t800, %block_0_406a95 ]
  %t805 = phi i64 [ %t772, %block_0_406a95 ]
  %t806 = phi i64 [ %t801, %block_0_406a95 ]
  %t807 = phi i64 [ %t774, %block_0_406a95 ]
  %t808 = phi i64 [ %t775, %block_0_406a95 ]
  %t809 = phi i64 [ %t776, %block_0_406a95 ]
  %t810 = phi i64 [ %t777, %block_0_406a95 ]
  %t811 = phi i64 [ %t778, %block_0_406a95 ]
  %t812 = phi i64 [ %t779, %block_0_406a95 ]
  %t813 = phi i64 [ %t780, %block_0_406a95 ]
  %t814 = phi i512 [ %t803, %block_0_406a95 ]
  %t815 = phi i512 [ %t782, %block_0_406a95 ]
  %t816 = phi i512 [ %t783, %block_0_406a95 ]
  %t817 = phi i512 [ %t784, %block_0_406a95 ]
  %t818 = phi i512 [ %t785, %block_0_406a95 ]
  %t819 = phi i512 [ %t786, %block_0_406a95 ]
  %t820 = phi i512 [ %t787, %block_0_406a95 ]
  %t821 = phi i512 [ %t788, %block_0_406a95 ]
  %t822 = phi i64 [ %t789, %block_0_406a95 ]
  %t823 = phi i64 [ %t790, %block_0_406a95 ]
  ; r810 := (trunc r790 32)
  %t824 = trunc i64 %t804 to i32
  ; r811 := (eq r810 (0x0 : bv 32))
  %t825 = icmp eq i32 %t824, 0
  br i1 %t825, label %block_0_4068bd, label %block_0_406aa5
block_0_406aa5:
  %t826 = phi i64 [ %t805, %block_0_406a9d ]
  %t827 = phi i64 [ %t806, %block_0_406a9d ]
  %t828 = phi i64 [ %t807, %block_0_406a9d ]
  %t829 = phi i64 [ %t808, %block_0_406a9d ]
  %t830 = phi i64 [ %t809, %block_0_406a9d ]
  %t831 = phi i64 [ %t810, %block_0_406a9d ]
  %t832 = phi i64 [ %t811, %block_0_406a9d ]
  %t833 = phi i64 [ %t812, %block_0_406a9d ]
  %t834 = phi i64 [ %t813, %block_0_406a9d ]
  %t835 = phi i512 [ %t814, %block_0_406a9d ]
  %t836 = phi i512 [ %t815, %block_0_406a9d ]
  %t837 = phi i512 [ %t816, %block_0_406a9d ]
  %t838 = phi i512 [ %t817, %block_0_406a9d ]
  %t839 = phi i512 [ %t818, %block_0_406a9d ]
  %t840 = phi i512 [ %t819, %block_0_406a9d ]
  %t841 = phi i512 [ %t820, %block_0_406a9d ]
  %t842 = phi i512 [ %t821, %block_0_406a9d ]
  %t843 = phi i64 [ %t822, %block_0_406a9d ]
  %t844 = phi i64 [ %t823, %block_0_406a9d ]
  ; r831 := (trunc r819 32)
  %t845 = trunc i64 %t833 to i32
  ; r832 := (bv_add r831 (0x1 : bv 32))
  %t846 = add i32 %t845, 1
  ; r833 := (uext r832 64)
  %t847 = zext i32 %t846 to i64
  ; r834 := (eq r831 (0xb : bv 32))
  %t848 = icmp eq i32 %t845, 11
  br i1 %t848, label %block_0_406aaf, label %block_0_406a65
block_0_406aaf:
  %t849 = phi i64 [ %t661, %block_0_406a56 ], [ %t826, %block_0_406aa5 ]
  %t850 = phi i64 [ %t662, %block_0_406a56 ], [ %t827, %block_0_406aa5 ]
  %t851 = phi i64 [ %t663, %block_0_406a56 ], [ %t828, %block_0_406aa5 ]
  %t852 = phi i64 [ %t664, %block_0_406a56 ], [ %t829, %block_0_406aa5 ]
  %t853 = phi i64 [ %t665, %block_0_406a56 ], [ %t830, %block_0_406aa5 ]
  %t854 = phi i64 [ %t666, %block_0_406a56 ], [ %t831, %block_0_406aa5 ]
  %t855 = phi i64 [ %t667, %block_0_406a56 ], [ %t832, %block_0_406aa5 ]
  %t856 = phi i64 [ %t668, %block_0_406a56 ], [ %t834, %block_0_406aa5 ]
  %t857 = phi i512 [ %t669, %block_0_406a56 ], [ %t835, %block_0_406aa5 ]
  %t858 = phi i512 [ %t670, %block_0_406a56 ], [ %t836, %block_0_406aa5 ]
  %t859 = phi i512 [ %t671, %block_0_406a56 ], [ %t837, %block_0_406aa5 ]
  %t860 = phi i512 [ %t672, %block_0_406a56 ], [ %t838, %block_0_406aa5 ]
  %t861 = phi i512 [ %t673, %block_0_406a56 ], [ %t839, %block_0_406aa5 ]
  %t862 = phi i512 [ %t674, %block_0_406a56 ], [ %t840, %block_0_406aa5 ]
  %t863 = phi i512 [ %t675, %block_0_406a56 ], [ %t841, %block_0_406aa5 ]
  %t864 = phi i512 [ %t676, %block_0_406a56 ], [ %t842, %block_0_406aa5 ]
  %t865 = phi i64 [ %t677, %block_0_406a56 ], [ %t843, %block_0_406aa5 ]
  %t866 = phi i64 [ %t678, %block_0_406a56 ], [ %t844, %block_0_406aa5 ]
  ; r853 := (bitcast r843 (vec 8 double))
  %t867 = bitcast i512 %t857 to <8 x double>
  ; r854 := (bitcast r844 (vec 8 double))
  %t868 = bitcast i512 %t858 to <8 x double>
  ; r855 := (bitcast r845 (vec 8 double))
  %t869 = bitcast i512 %t859 to <8 x double>
  ; r856 := (bitcast r846 (vec 8 double))
  %t870 = bitcast i512 %t860 to <8 x double>
  ; r857 := (bitcast r847 (vec 8 double))
  %t871 = bitcast i512 %t861 to <8 x double>
  ; r858 := (bitcast r848 (vec 8 double))
  %t872 = bitcast i512 %t862 to <8 x double>
  ; r859 := (bitcast r849 (vec 8 double))
  %t873 = bitcast i512 %t863 to <8 x double>
  ; r860 := (bitcast r850 (vec 8 double))
  %t874 = bitcast i512 %t864 to <8 x double>
  ; r861 := call pthread_mutex_lock_int(r842, r839, r836, r835, r840, r841, r853, r854, r855, r856, r857, r858, r859, r860)
  %t875 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 %t856, i64 %t853, i64 %t850, i64 %t849, i64 %t854, i64 %t855, <8 x double> %t867, <8 x double> %t868, <8 x double> %t869, <8 x double> %t870, <8 x double> %t871, <8 x double> %t872, <8 x double> %t873, <8 x double> %t874)
  ; r862 := (tuple_field r861 0)
  %t876 = extractvalue { i64, i64, <8 x double> } %t875, 0
  ; r863 := (tuple_field r861 1)
  %t877 = extractvalue { i64, i64, <8 x double> } %t875, 1
  ; r864 := (tuple_field r861 2)
  %t878 = extractvalue { i64, i64, <8 x double> } %t875, 2
  ; r865 := (bitcast r864 (bv 512))
  %t879 = bitcast <8 x double> %t878 to i512
  br label %block_0_406ab7
block_0_406ab7:
  %t880 = phi i64 [ %t849, %block_0_406aaf ]
  %t881 = phi i64 [ %t851, %block_0_406aaf ]
  %t882 = phi i64 [ %t852, %block_0_406aaf ]
  %t883 = phi i64 [ %t853, %block_0_406aaf ]
  %t884 = phi i64 [ %t854, %block_0_406aaf ]
  %t885 = phi i64 [ %t855, %block_0_406aaf ]
  %t886 = phi i64 [ %t856, %block_0_406aaf ]
  %t887 = phi i512 [ %t879, %block_0_406aaf ]
  %t888 = phi i512 [ %t858, %block_0_406aaf ]
  %t889 = phi i512 [ %t859, %block_0_406aaf ]
  %t890 = phi i512 [ %t860, %block_0_406aaf ]
  %t891 = phi i512 [ %t861, %block_0_406aaf ]
  %t892 = phi i512 [ %t862, %block_0_406aaf ]
  %t893 = phi i512 [ %t863, %block_0_406aaf ]
  %t894 = phi i512 [ %t864, %block_0_406aaf ]
  %t895 = phi i64 [ %t865, %block_0_406aaf ]
  %t896 = phi i64 [ %t866, %block_0_406aaf ]
  br label %block_0_4068bd
block_0_406abc:
  %t897 = phi i64 [ %t34, %block_0_4068a0 ]
  %t898 = phi i64 [ %t35, %block_0_4068a0 ]
  %t899 = phi i64 [ %t36, %block_0_4068a0 ]
  %t900 = phi i64 [ %t37, %block_0_4068a0 ]
  %t901 = phi i64 [ %t38, %block_0_4068a0 ]
  %t902 = phi i64 [ %t39, %block_0_4068a0 ]
  %t903 = phi i64 [ %t40, %block_0_4068a0 ]
  %t904 = phi i64 [ %t41, %block_0_4068a0 ]
  %t905 = phi i512 [ %t42, %block_0_4068a0 ]
  %t906 = phi i512 [ %t43, %block_0_4068a0 ]
  %t907 = phi i512 [ %t44, %block_0_4068a0 ]
  %t908 = phi i512 [ %t45, %block_0_4068a0 ]
  %t909 = phi i512 [ %t46, %block_0_4068a0 ]
  %t910 = phi i512 [ %t47, %block_0_4068a0 ]
  %t911 = phi i512 [ %t48, %block_0_4068a0 ]
  %t912 = phi i512 [ %t49, %block_0_4068a0 ]
  ; r899 := (bv_sub r885 r887)
  %t913 = sub i64 %t899, %t901
  ; r900 := (bv_add r888 r887)
  %t914 = add i64 %t902, %t901
  ; r901 := (bitcast r891 (vec 8 double))
  %t915 = bitcast i512 %t905 to <8 x double>
  ; r902 := call memset(r900, (0x5a : bv 64), r899, r901)
  %t916 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t914, i64 90, i64 %t913, <8 x double> %t915)
  ; r903 := (tuple_field r902 0)
  %t917 = extractvalue { i64, i64, <8 x double> } %t916, 0
  ; r904 := (tuple_field r902 1)
  %t918 = extractvalue { i64, i64, <8 x double> } %t916, 1
  ; r905 := (tuple_field r902 2)
  %t919 = extractvalue { i64, i64, <8 x double> } %t916, 2
  ; r906 := (bitcast r905 (bv 512))
  %t920 = bitcast <8 x double> %t919 to i512
  br label %block_0_406ad1
block_0_406ad1:
  %t921 = phi i64 [ %t898, %block_0_406abc ]
  %t922 = phi i64 [ %t918, %block_0_406abc ]
  %t923 = phi i64 [ %t900, %block_0_406abc ]
  %t924 = phi i64 [ %t899, %block_0_406abc ]
  %t925 = phi i64 [ %t901, %block_0_406abc ]
  %t926 = phi i64 [ %t903, %block_0_406abc ]
  %t927 = phi i64 [ %t904, %block_0_406abc ]
  %t928 = phi i512 [ %t920, %block_0_406abc ]
  %t929 = phi i512 [ %t906, %block_0_406abc ]
  %t930 = phi i512 [ %t907, %block_0_406abc ]
  %t931 = phi i512 [ %t908, %block_0_406abc ]
  %t932 = phi i512 [ %t909, %block_0_406abc ]
  %t933 = phi i512 [ %t910, %block_0_406abc ]
  %t934 = phi i512 [ %t911, %block_0_406abc ]
  %t935 = phi i512 [ %t912, %block_0_406abc ]
  %t936 = phi i64 [ %t902, %block_0_406abc ]
  %t937 = phi i64 [ %t897, %block_0_406abc ]
  br label %block_0_4068ad
block_0_406ad6:
  %t938 = phi i64 [ %t199, %block_0_406955 ]
  %t939 = phi i64 [ %t220, %block_0_406955 ]
  %t940 = phi i64 [ %t200, %block_0_406955 ]
  %t941 = phi i64 [ %t201, %block_0_406955 ]
  %t942 = phi i64 [ %t202, %block_0_406955 ]
  %t943 = phi i64 [ %t203, %block_0_406955 ]
  %t944 = phi i64 [ %t204, %block_0_406955 ]
  %t945 = phi i64 [ %t205, %block_0_406955 ]
  %t946 = phi i64 [ %t206, %block_0_406955 ]
  %t947 = phi i64 [ %t207, %block_0_406955 ]
  %t948 = phi i64 [ %t208, %block_0_406955 ]
  %t949 = phi i512 [ %t209, %block_0_406955 ]
  %t950 = phi i512 [ %t210, %block_0_406955 ]
  %t951 = phi i512 [ %t211, %block_0_406955 ]
  %t952 = phi i512 [ %t212, %block_0_406955 ]
  %t953 = phi i512 [ %t213, %block_0_406955 ]
  %t954 = phi i512 [ %t214, %block_0_406955 ]
  %t955 = phi i512 [ %t215, %block_0_406955 ]
  %t956 = phi i512 [ %t216, %block_0_406955 ]
  %t957 = phi i64 [ %t217, %block_0_406955 ]
  %t958 = phi i64 [ %t218, %block_0_406955 ]
  ; r945 := (bv_shl r924 (0xc : bv 64))
  %t959 = shl i64 %t938, 12
  ; r946 := (bv_or r926 (0x3 : bv 64))
  %t960 = or i64 %t940, 3
  ; r947 := (bv_add r945 r944)
  %t961 = add i64 %t959, %t958
  ; r948 := (bitcast r935 (vec 8 double))
  %t962 = bitcast i512 %t949 to <8 x double>
  ; r949 := call arena_run_split(r933, r947, r925, (0x1 : bv 64), (0x0 : bv 64), r948)
  %t963 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, <8 x double>) @arena_run_split(i64 %t947, i64 %t961, i64 %t939, i64 1, i64 0, <8 x double> %t962)
  ; r950 := (tuple_field r949 0)
  %t964 = extractvalue { i64, i64, <8 x double> } %t963, 0
  ; r951 := (tuple_field r949 1)
  %t965 = extractvalue { i64, i64, <8 x double> } %t963, 1
  ; r952 := (tuple_field r949 2)
  %t966 = extractvalue { i64, i64, <8 x double> } %t963, 2
  ; r953 := (bitcast r952 (bv 512))
  %t967 = bitcast <8 x double> %t966 to i512
  br label %block_0_406af7
block_0_406af7:
  %t968 = phi i64 [ %t960, %block_0_406ad6 ]
  %t969 = phi i64 [ %t941, %block_0_406ad6 ]
  %t970 = phi i64 [ %t942, %block_0_406ad6 ]
  %t971 = phi i64 [ %t943, %block_0_406ad6 ]
  %t972 = phi i64 [ %t944, %block_0_406ad6 ]
  %t973 = phi i64 [ %t945, %block_0_406ad6 ]
  %t974 = phi i64 [ %t946, %block_0_406ad6 ]
  %t975 = phi i64 [ %t947, %block_0_406ad6 ]
  %t976 = phi i64 [ %t948, %block_0_406ad6 ]
  %t977 = phi i512 [ %t967, %block_0_406ad6 ]
  %t978 = phi i512 [ %t950, %block_0_406ad6 ]
  %t979 = phi i512 [ %t951, %block_0_406ad6 ]
  %t980 = phi i512 [ %t952, %block_0_406ad6 ]
  %t981 = phi i512 [ %t953, %block_0_406ad6 ]
  %t982 = phi i512 [ %t954, %block_0_406ad6 ]
  %t983 = phi i512 [ %t955, %block_0_406ad6 ]
  %t984 = phi i512 [ %t956, %block_0_406ad6 ]
  %t985 = phi i64 [ %t957, %block_0_406ad6 ]
  %t986 = phi i64 [ %t958, %block_0_406ad6 ]
  ; r973 := (read (0x6356e8 : bv 64) (bv 32))
  %t987 = inttoptr i64 6510312 to i32*
  %t988 = load i32, i32* %t987
  ; r974 := (uext r973 64)
  %t989 = zext i32 %t988 to i64
  ; r975 := (bv_mul (0x2 : bv 64) r962)
  %t990 = mul i64 2, %t976
  ; r976 := (bv_add r962 r975)
  %t991 = add i64 %t976, %t990
  ; r977 := (eq r973 (0x0 : bv 32))
  %t992 = icmp eq i32 %t988, 0
  ; r978 := (bv_mul (0x8 : bv 64) r976)
  %t993 = mul i64 8, %t991
  ; r979 := (bv_add r972 r978)
  %t994 = add i64 %t986, %t993
  ; r980 := (bv_add r979 (0x38 : bv 64))
  %t995 = add i64 %t994, 56
  ; write r980 r954
  %t996 = inttoptr i64 %t995 to i64*
  store i64 %t968, i64* %t996
  ; r981 := (bv_add r960 (0x38 : bv 64))
  %t997 = add i64 %t974, 56
  ; write r981 (0x3 : bv 64)
  %t998 = inttoptr i64 %t997 to i64*
  store i64 3, i64* %t998
  br i1 %t992, label %block_0_406b17, label %block_0_406b42
block_0_406b17:
  %t999 = phi i64 [ %t986, %block_0_406af7 ], [ %t1051, %block_0_406b4a ]
  %t1000 = phi i64 [ %t969, %block_0_406af7 ], [ %t1052, %block_0_406b4a ]
  %t1001 = phi i64 [ %t973, %block_0_406af7 ], [ %t1053, %block_0_406b4a ]
  %t1002 = phi i512 [ %t977, %block_0_406af7 ], [ %t1054, %block_0_406b4a ]
  %t1003 = phi i64 [ %t985, %block_0_406af7 ], [ %t1055, %block_0_406b4a ]
  ; r987 := (read (0x635465 : bv 64) (bv 8))
  %t1004 = inttoptr i64 6509669 to i8*
  %t1005 = load i8, i8* %t1004
  ; r988 := (eq r987 (0x0 : bv 8))
  %t1006 = icmp eq i8 %t1005, 0
  br i1 %t1006, label %block_0_4068eb, label %block_0_406b26
block_0_406b26:
  %t1007 = phi i64 [ %t1000, %block_0_406b17 ]
  %t1008 = phi i64 [ %t1001, %block_0_406b17 ]
  %t1009 = phi i512 [ %t1002, %block_0_406b17 ]
  %t1010 = phi i64 [ %t1003, %block_0_406b17 ]
  ; r993 := (bv_sub r990 r989)
  %t1011 = sub i64 %t1008, %t1007
  ; r994 := (bv_add r992 r989)
  %t1012 = add i64 %t1010, %t1007
  ; r995 := (bitcast r991 (vec 8 double))
  %t1013 = bitcast i512 %t1009 to <8 x double>
  ; r996 := call memset(r994, (0x0 : bv 64), r993, r995)
  %t1014 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t1012, i64 0, i64 %t1011, <8 x double> %t1013)
  ; r997 := (tuple_field r996 0)
  %t1015 = extractvalue { i64, i64, <8 x double> } %t1014, 0
  ; r998 := (tuple_field r996 1)
  %t1016 = extractvalue { i64, i64, <8 x double> } %t1014, 1
  ; r999 := (tuple_field r996 2)
  %t1017 = extractvalue { i64, i64, <8 x double> } %t1014, 2
  ; r1000 := (bitcast r999 (bv 512))
  %t1018 = bitcast <8 x double> %t1017 to i512
  br label %block_0_406b3b
block_0_406b3b:
  %t1019 = phi i64 [ %t1016, %block_0_406b26 ]
  %t1020 = phi i512 [ %t1018, %block_0_406b26 ]
  br label %block_0_4068eb
block_0_406b42:
  %t1021 = phi i64 [ %t989, %block_0_406af7 ]
  %t1022 = phi i64 [ %t986, %block_0_406af7 ]
  %t1023 = phi i64 [ %t969, %block_0_406af7 ]
  %t1024 = phi i64 [ %t970, %block_0_406af7 ]
  %t1025 = phi i64 [ %t971, %block_0_406af7 ]
  %t1026 = phi i64 [ %t972, %block_0_406af7 ]
  %t1027 = phi i64 [ %t973, %block_0_406af7 ]
  %t1028 = phi i64 [ %t975, %block_0_406af7 ]
  %t1029 = phi i512 [ %t977, %block_0_406af7 ]
  %t1030 = phi i512 [ %t978, %block_0_406af7 ]
  %t1031 = phi i512 [ %t979, %block_0_406af7 ]
  %t1032 = phi i512 [ %t980, %block_0_406af7 ]
  %t1033 = phi i512 [ %t981, %block_0_406af7 ]
  %t1034 = phi i512 [ %t982, %block_0_406af7 ]
  %t1035 = phi i512 [ %t983, %block_0_406af7 ]
  %t1036 = phi i512 [ %t984, %block_0_406af7 ]
  %t1037 = phi i64 [ %t985, %block_0_406af7 ]
  ; r1020 := (bitcast r1011 (vec 8 double))
  %t1038 = bitcast i512 %t1029 to <8 x double>
  ; r1021 := (bitcast r1012 (vec 8 double))
  %t1039 = bitcast i512 %t1030 to <8 x double>
  ; r1022 := (bitcast r1013 (vec 8 double))
  %t1040 = bitcast i512 %t1031 to <8 x double>
  ; r1023 := (bitcast r1014 (vec 8 double))
  %t1041 = bitcast i512 %t1032 to <8 x double>
  ; r1024 := (bitcast r1015 (vec 8 double))
  %t1042 = bitcast i512 %t1033 to <8 x double>
  ; r1025 := (bitcast r1016 (vec 8 double))
  %t1043 = bitcast i512 %t1034 to <8 x double>
  ; r1026 := (bitcast r1017 (vec 8 double))
  %t1044 = bitcast i512 %t1035 to <8 x double>
  ; r1027 := (bitcast r1018 (vec 8 double))
  %t1045 = bitcast i512 %t1036 to <8 x double>
  ; r1028 := call pthread_mutex_unlock_int(r1010, r1006, r1004, r1003, r1007, r1008, r1020, r1021, r1022, r1023, r1024, r1025, r1026, r1027)
  %t1046 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t1028, i64 %t1024, i64 %t1022, i64 %t1021, i64 %t1025, i64 %t1026, <8 x double> %t1038, <8 x double> %t1039, <8 x double> %t1040, <8 x double> %t1041, <8 x double> %t1042, <8 x double> %t1043, <8 x double> %t1044, <8 x double> %t1045)
  ; r1029 := (tuple_field r1028 0)
  %t1047 = extractvalue { i64, i64, <8 x double> } %t1046, 0
  ; r1030 := (tuple_field r1028 1)
  %t1048 = extractvalue { i64, i64, <8 x double> } %t1046, 1
  ; r1031 := (tuple_field r1028 2)
  %t1049 = extractvalue { i64, i64, <8 x double> } %t1046, 2
  ; r1032 := (bitcast r1031 (bv 512))
  %t1050 = bitcast <8 x double> %t1049 to i512
  br label %block_0_406b4a
block_0_406b4a:
  %t1051 = phi i64 [ %t1048, %block_0_406b42 ]
  %t1052 = phi i64 [ %t1023, %block_0_406b42 ]
  %t1053 = phi i64 [ %t1027, %block_0_406b42 ]
  %t1054 = phi i512 [ %t1050, %block_0_406b42 ]
  %t1055 = phi i64 [ %t1037, %block_0_406b42 ]
  br label %block_0_406b17
}
define { i64, i64, <8 x double> } @arena_dalloc_large(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_406b50:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t5 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t7 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t8 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t9 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t10 = bitcast <8 x double> %arg13 to i512
  ; r10 := (bitcast arg6 (bv 512))
  %t11 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t13 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t14 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t15 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t16 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t17 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t18 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_406b6f, label %block_0_406bda
block_0_406b6f:
  %t19 = phi i64 [ %arg3, %block_0_406b50 ], [ %t174, %block_0_406bdf ], [ %t324, %block_0_406c2d ], [ %t393, %block_0_406c45 ]
  %t20 = phi i64 [ %arg0, %block_0_406b50 ], [ %t176, %block_0_406bdf ], [ %t327, %block_0_406c2d ], [ %t394, %block_0_406c45 ]
  %t21 = phi i64 [ %arg1, %block_0_406b50 ], [ %t177, %block_0_406bdf ], [ %t328, %block_0_406c2d ], [ %t395, %block_0_406c45 ]
  %t22 = phi i64 [ %arg4, %block_0_406b50 ], [ %t178, %block_0_406bdf ], [ %t329, %block_0_406c2d ], [ %t396, %block_0_406c45 ]
  %t23 = phi i64 [ %arg2, %block_0_406b50 ], [ %t180, %block_0_406bdf ], [ %t331, %block_0_406c2d ], [ %t397, %block_0_406c45 ]
  %t24 = phi i64 [ %arg1, %block_0_406b50 ], [ %t181, %block_0_406bdf ], [ %t332, %block_0_406c2d ], [ %t398, %block_0_406c45 ]
  %t25 = phi i512 [ %t3, %block_0_406b50 ], [ %t182, %block_0_406bdf ], [ %t333, %block_0_406c2d ], [ %t399, %block_0_406c45 ]
  %t26 = phi i512 [ %t4, %block_0_406b50 ], [ %t183, %block_0_406bdf ], [ %t334, %block_0_406c2d ], [ %t400, %block_0_406c45 ]
  %t27 = phi i512 [ %t5, %block_0_406b50 ], [ %t184, %block_0_406bdf ], [ %t335, %block_0_406c2d ], [ %t401, %block_0_406c45 ]
  %t28 = phi i512 [ %t6, %block_0_406b50 ], [ %t185, %block_0_406bdf ], [ %t336, %block_0_406c2d ], [ %t402, %block_0_406c45 ]
  %t29 = phi i512 [ %t7, %block_0_406b50 ], [ %t186, %block_0_406bdf ], [ %t337, %block_0_406c2d ], [ %t403, %block_0_406c45 ]
  %t30 = phi i512 [ %t8, %block_0_406b50 ], [ %t187, %block_0_406bdf ], [ %t338, %block_0_406c2d ], [ %t404, %block_0_406c45 ]
  %t31 = phi i512 [ %t9, %block_0_406b50 ], [ %t188, %block_0_406bdf ], [ %t339, %block_0_406c2d ], [ %t405, %block_0_406c45 ]
  %t32 = phi i512 [ %t10, %block_0_406b50 ], [ %t189, %block_0_406bdf ], [ %t340, %block_0_406c2d ], [ %t406, %block_0_406c45 ]
  ; r32 := (read (0x635461 : bv 64) (bv 8))
  %t33 = inttoptr i64 6509665 to i8*
  %t34 = load i8, i8* %t33
  ; r33 := (eq r32 (0x0 : bv 8))
  %t35 = icmp eq i8 %t34, 0
  br i1 %t35, label %block_0_406b78, label %block_0_406bb1
block_0_406b78:
  %t36 = phi i64 [ %t19, %block_0_406b6f ], [ %t133, %block_0_406bd8 ]
  %t37 = phi i64 [ %t20, %block_0_406b6f ], [ %t134, %block_0_406bd8 ]
  %t38 = phi i64 [ %t21, %block_0_406b6f ], [ %t135, %block_0_406bd8 ]
  %t39 = phi i64 [ %t22, %block_0_406b6f ], [ %t136, %block_0_406bd8 ]
  %t40 = phi i64 [ %t23, %block_0_406b6f ], [ %t137, %block_0_406bd8 ]
  %t41 = phi i512 [ %t25, %block_0_406b6f ], [ %t138, %block_0_406bd8 ]
  %t42 = phi i512 [ %t26, %block_0_406b6f ], [ %t139, %block_0_406bd8 ]
  %t43 = phi i512 [ %t27, %block_0_406b6f ], [ %t140, %block_0_406bd8 ]
  %t44 = phi i512 [ %t28, %block_0_406b6f ], [ %t141, %block_0_406bd8 ]
  %t45 = phi i512 [ %t29, %block_0_406b6f ], [ %t142, %block_0_406bd8 ]
  %t46 = phi i512 [ %t30, %block_0_406b6f ], [ %t143, %block_0_406bd8 ]
  %t47 = phi i512 [ %t31, %block_0_406b6f ], [ %t144, %block_0_406bd8 ]
  %t48 = phi i512 [ %t32, %block_0_406b6f ], [ %t145, %block_0_406bd8 ]
  ; r47 := (bitcast r39 (vec 8 double))
  %t49 = bitcast i512 %t41 to <8 x double>
  ; r48 := call arena_run_dalloc(r35, r38, (0x1 : bv 64), r47)
  %t50 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @arena_run_dalloc(i64 %t37, i64 %t40, i64 1, <8 x double> %t49)
  ; r49 := (tuple_field r48 0)
  %t51 = extractvalue { i64, i64, <8 x double> } %t50, 0
  ; r50 := (tuple_field r48 1)
  %t52 = extractvalue { i64, i64, <8 x double> } %t50, 1
  ; r51 := (tuple_field r48 2)
  %t53 = extractvalue { i64, i64, <8 x double> } %t50, 2
  ; r52 := (bitcast r51 (bv 512))
  %t54 = bitcast <8 x double> %t53 to i512
  br label %block_0_406b88
block_0_406b88:
  %t55 = phi i64 [ %t51, %block_0_406b78 ]
  %t56 = phi i64 [ %t36, %block_0_406b78 ]
  %t57 = phi i64 [ %t52, %block_0_406b78 ]
  %t58 = phi i64 [ %t37, %block_0_406b78 ]
  %t59 = phi i64 [ %t38, %block_0_406b78 ]
  %t60 = phi i64 [ %t39, %block_0_406b78 ]
  %t61 = phi i512 [ %t54, %block_0_406b78 ]
  %t62 = phi i512 [ %t42, %block_0_406b78 ]
  %t63 = phi i512 [ %t43, %block_0_406b78 ]
  %t64 = phi i512 [ %t44, %block_0_406b78 ]
  %t65 = phi i512 [ %t45, %block_0_406b78 ]
  %t66 = phi i512 [ %t46, %block_0_406b78 ]
  %t67 = phi i512 [ %t47, %block_0_406b78 ]
  %t68 = phi i512 [ %t48, %block_0_406b78 ]
  ; r67 := (read (0x6356e8 : bv 64) (bv 32))
  %t69 = inttoptr i64 6510312 to i32*
  %t70 = load i32, i32* %t69
  ; r68 := (uext r67 64)
  %t71 = zext i32 %t70 to i64
  ; r69 := (eq r67 (0x0 : bv 32))
  %t72 = icmp eq i32 %t70, 0
  br i1 %t72, label %block_0_406b94, label %block_0_406b9f
block_0_406b94:
  %t73 = phi i64 [ %t55, %block_0_406b88 ]
  %t74 = phi i64 [ %t57, %block_0_406b88 ]
  %t75 = phi i512 [ %t61, %block_0_406b88 ]
  ; r73 := (bitcast r72 (vec 8 double))
  %t76 = bitcast i512 %t75 to <8 x double>
  ; r74 := (tuple r70 r71 r73)
  %t77 = insertvalue { i64, i64, <8 x double> } undef, i64 %t73, 0
  %t78 = insertvalue { i64, i64, <8 x double> } %t77, i64 %t74, 1
  %t79 = insertvalue { i64, i64, <8 x double> } %t78, <8 x double> %t76, 2
  ret { i64, i64, <8 x double> } %t79
block_0_406b9f:
  %t80 = phi i64 [ %t56, %block_0_406b88 ]
  %t81 = phi i64 [ %t57, %block_0_406b88 ]
  %t82 = phi i64 [ %t58, %block_0_406b88 ]
  %t83 = phi i64 [ %t59, %block_0_406b88 ]
  %t84 = phi i64 [ %t60, %block_0_406b88 ]
  %t85 = phi i64 [ %t71, %block_0_406b88 ]
  %t86 = phi i512 [ %t61, %block_0_406b88 ]
  %t87 = phi i512 [ %t62, %block_0_406b88 ]
  %t88 = phi i512 [ %t63, %block_0_406b88 ]
  %t89 = phi i512 [ %t64, %block_0_406b88 ]
  %t90 = phi i512 [ %t65, %block_0_406b88 ]
  %t91 = phi i512 [ %t66, %block_0_406b88 ]
  %t92 = phi i512 [ %t67, %block_0_406b88 ]
  %t93 = phi i512 [ %t68, %block_0_406b88 ]
  ; r89 := (bitcast r81 (vec 8 double))
  %t94 = bitcast i512 %t86 to <8 x double>
  ; r90 := (bitcast r82 (vec 8 double))
  %t95 = bitcast i512 %t87 to <8 x double>
  ; r91 := (bitcast r83 (vec 8 double))
  %t96 = bitcast i512 %t88 to <8 x double>
  ; r92 := (bitcast r84 (vec 8 double))
  %t97 = bitcast i512 %t89 to <8 x double>
  ; r93 := (bitcast r85 (vec 8 double))
  %t98 = bitcast i512 %t90 to <8 x double>
  ; r94 := (bitcast r86 (vec 8 double))
  %t99 = bitcast i512 %t91 to <8 x double>
  ; r95 := (bitcast r87 (vec 8 double))
  %t100 = bitcast i512 %t92 to <8 x double>
  ; r96 := (bitcast r88 (vec 8 double))
  %t101 = bitcast i512 %t93 to <8 x double>
  %t102 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t82, i64 %t83, i64 %t81, i64 %t80, i64 %t84, i64 %t85, <8 x double> %t94, <8 x double> %t95, <8 x double> %t96, <8 x double> %t97, <8 x double> %t98, <8 x double> %t99, <8 x double> %t100, <8 x double> %t101)
  ret { i64, i64, <8 x double> } %t102
block_0_406bb1:
  %t103 = phi i64 [ %t19, %block_0_406b6f ]
  %t104 = phi i64 [ %t20, %block_0_406b6f ]
  %t105 = phi i64 [ %t21, %block_0_406b6f ]
  %t106 = phi i64 [ %t22, %block_0_406b6f ]
  %t107 = phi i64 [ %t23, %block_0_406b6f ]
  %t108 = phi i64 [ %t24, %block_0_406b6f ]
  %t109 = phi i512 [ %t25, %block_0_406b6f ]
  %t110 = phi i512 [ %t26, %block_0_406b6f ]
  %t111 = phi i512 [ %t27, %block_0_406b6f ]
  %t112 = phi i512 [ %t28, %block_0_406b6f ]
  %t113 = phi i512 [ %t29, %block_0_406b6f ]
  %t114 = phi i512 [ %t30, %block_0_406b6f ]
  %t115 = phi i512 [ %t31, %block_0_406b6f ]
  %t116 = phi i512 [ %t32, %block_0_406b6f ]
  ; r111 := (bv_sub r101 r102)
  %t117 = sub i64 %t107, %t108
  ; r112 := (bv_shr r111 (0xc : bv 64))
  %t118 = lshr i64 %t117, 12
  ; r113 := (bv_mul (0x2 : bv 64) r112)
  %t119 = mul i64 2, %t118
  ; r114 := (bv_add r112 r113)
  %t120 = add i64 %t118, %t119
  ; r115 := (bv_mul (0x8 : bv 64) r114)
  %t121 = mul i64 8, %t120
  ; r116 := (bv_add r102 r115)
  %t122 = add i64 %t108, %t121
  ; r117 := (bv_add r116 (0x38 : bv 64))
  %t123 = add i64 %t122, 56
  ; r118 := (read r117 (bv 64))
  %t124 = inttoptr i64 %t123 to i64*
  %t125 = load i64, i64* %t124
  ; r119 := (bv_and r118 (0xfffffffffffff000 : bv 64))
  %t126 = and i64 %t125, 18446744073709547520
  ; r120 := (bitcast r103 (vec 8 double))
  %t127 = bitcast i512 %t109 to <8 x double>
  ; r121 := call memset(r101, (0x5a : bv 64), r119, r120)
  %t128 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t107, i64 90, i64 %t126, <8 x double> %t127)
  ; r122 := (tuple_field r121 0)
  %t129 = extractvalue { i64, i64, <8 x double> } %t128, 0
  ; r123 := (tuple_field r121 1)
  %t130 = extractvalue { i64, i64, <8 x double> } %t128, 1
  ; r124 := (tuple_field r121 2)
  %t131 = extractvalue { i64, i64, <8 x double> } %t128, 2
  ; r125 := (bitcast r124 (bv 512))
  %t132 = bitcast <8 x double> %t131 to i512
  br label %block_0_406bd8
block_0_406bd8:
  %t133 = phi i64 [ %t103, %block_0_406bb1 ]
  %t134 = phi i64 [ %t104, %block_0_406bb1 ]
  %t135 = phi i64 [ %t105, %block_0_406bb1 ]
  %t136 = phi i64 [ %t106, %block_0_406bb1 ]
  %t137 = phi i64 [ %t107, %block_0_406bb1 ]
  %t138 = phi i512 [ %t132, %block_0_406bb1 ]
  %t139 = phi i512 [ %t110, %block_0_406bb1 ]
  %t140 = phi i512 [ %t111, %block_0_406bb1 ]
  %t141 = phi i512 [ %t112, %block_0_406bb1 ]
  %t142 = phi i512 [ %t113, %block_0_406bb1 ]
  %t143 = phi i512 [ %t114, %block_0_406bb1 ]
  %t144 = phi i512 [ %t115, %block_0_406bb1 ]
  %t145 = phi i512 [ %t116, %block_0_406bb1 ]
  br label %block_0_406b78
block_0_406bda:
  %t146 = phi i64 [ %arg3, %block_0_406b50 ]
  %t147 = phi i64 [ %arg2, %block_0_406b50 ]
  %t148 = phi i64 [ %arg0, %block_0_406b50 ]
  %t149 = phi i64 [ %arg1, %block_0_406b50 ]
  %t150 = phi i64 [ %arg4, %block_0_406b50 ]
  %t151 = phi i64 [ %arg5, %block_0_406b50 ]
  %t152 = phi i512 [ %t11, %block_0_406b50 ]
  %t153 = phi i512 [ %t12, %block_0_406b50 ]
  %t154 = phi i512 [ %t13, %block_0_406b50 ]
  %t155 = phi i512 [ %t14, %block_0_406b50 ]
  %t156 = phi i512 [ %t15, %block_0_406b50 ]
  %t157 = phi i512 [ %t16, %block_0_406b50 ]
  %t158 = phi i512 [ %t17, %block_0_406b50 ]
  %t159 = phi i512 [ %t18, %block_0_406b50 ]
  ; r153 := (bitcast r145 (vec 8 double))
  %t160 = bitcast i512 %t152 to <8 x double>
  ; r154 := (bitcast r146 (vec 8 double))
  %t161 = bitcast i512 %t153 to <8 x double>
  ; r155 := (bitcast r147 (vec 8 double))
  %t162 = bitcast i512 %t154 to <8 x double>
  ; r156 := (bitcast r148 (vec 8 double))
  %t163 = bitcast i512 %t155 to <8 x double>
  ; r157 := (bitcast r149 (vec 8 double))
  %t164 = bitcast i512 %t156 to <8 x double>
  ; r158 := (bitcast r150 (vec 8 double))
  %t165 = bitcast i512 %t157 to <8 x double>
  ; r159 := (bitcast r151 (vec 8 double))
  %t166 = bitcast i512 %t158 to <8 x double>
  ; r160 := (bitcast r152 (vec 8 double))
  %t167 = bitcast i512 %t159 to <8 x double>
  ; r161 := call pthread_mutex_trylock_int(r141, r142, r140, r139, r143, r144, r153, r154, r155, r156, r157, r158, r159, r160)
  %t168 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t148, i64 %t149, i64 %t147, i64 %t146, i64 %t150, i64 %t151, <8 x double> %t160, <8 x double> %t161, <8 x double> %t162, <8 x double> %t163, <8 x double> %t164, <8 x double> %t165, <8 x double> %t166, <8 x double> %t167)
  ; r162 := (tuple_field r161 0)
  %t169 = extractvalue { i64, i64, <8 x double> } %t168, 0
  ; r163 := (tuple_field r161 1)
  %t170 = extractvalue { i64, i64, <8 x double> } %t168, 1
  ; r164 := (tuple_field r161 2)
  %t171 = extractvalue { i64, i64, <8 x double> } %t168, 2
  ; r165 := (bitcast r164 (bv 512))
  %t172 = bitcast <8 x double> %t171 to i512
  br label %block_0_406bdf
block_0_406bdf:
  %t173 = phi i64 [ %t169, %block_0_406bda ]
  %t174 = phi i64 [ %t146, %block_0_406bda ]
  %t175 = phi i64 [ %t170, %block_0_406bda ]
  %t176 = phi i64 [ %t148, %block_0_406bda ]
  %t177 = phi i64 [ %t149, %block_0_406bda ]
  %t178 = phi i64 [ %t150, %block_0_406bda ]
  %t179 = phi i64 [ %t151, %block_0_406bda ]
  %t180 = phi i64 [ %t147, %block_0_406bda ]
  %t181 = phi i64 [ %t149, %block_0_406bda ]
  %t182 = phi i512 [ %t172, %block_0_406bda ]
  %t183 = phi i512 [ %t153, %block_0_406bda ]
  %t184 = phi i512 [ %t154, %block_0_406bda ]
  %t185 = phi i512 [ %t155, %block_0_406bda ]
  %t186 = phi i512 [ %t156, %block_0_406bda ]
  %t187 = phi i512 [ %t157, %block_0_406bda ]
  %t188 = phi i512 [ %t158, %block_0_406bda ]
  %t189 = phi i512 [ %t159, %block_0_406bda ]
  ; r183 := (trunc r166 32)
  %t190 = trunc i64 %t173 to i32
  ; r184 := (eq r183 (0x0 : bv 32))
  %t191 = icmp eq i32 %t190, 0
  br i1 %t191, label %block_0_406b6f, label %block_0_406be3
block_0_406be3:
  %t192 = phi i64 [ %t174, %block_0_406bdf ]
  %t193 = phi i64 [ %t175, %block_0_406bdf ]
  %t194 = phi i64 [ %t176, %block_0_406bdf ]
  %t195 = phi i64 [ %t177, %block_0_406bdf ]
  %t196 = phi i64 [ %t178, %block_0_406bdf ]
  %t197 = phi i64 [ %t179, %block_0_406bdf ]
  %t198 = phi i64 [ %t180, %block_0_406bdf ]
  %t199 = phi i64 [ %t181, %block_0_406bdf ]
  %t200 = phi i512 [ %t182, %block_0_406bdf ]
  %t201 = phi i512 [ %t183, %block_0_406bdf ]
  %t202 = phi i512 [ %t184, %block_0_406bdf ]
  %t203 = phi i512 [ %t185, %block_0_406bdf ]
  %t204 = phi i512 [ %t186, %block_0_406bdf ]
  %t205 = phi i512 [ %t187, %block_0_406bdf ]
  %t206 = phi i512 [ %t188, %block_0_406bdf ]
  %t207 = phi i512 [ %t189, %block_0_406bdf ]
  ; r201 := (read (0x6354a8 : bv 64) (bv 32))
  %t208 = inttoptr i64 6509736 to i32*
  %t209 = load i32, i32* %t208
  ; r202 := (bv_ult r201 (0x1 : bv 32))
  %t210 = icmp ult i32 %t209, 1
  ; r203 := (eq r201 (0x1 : bv 32))
  %t211 = icmp eq i32 %t209, 1
  ; r204 := (or r202 r203)
  %t212 = or i1 %t210, %t211
  br i1 %t212, label %block_0_406c3d, label %block_0_406bec
block_0_406bec:
  %t213 = phi i64 [ %t194, %block_0_406be3 ]
  %t214 = phi i64 [ %t195, %block_0_406be3 ]
  %t215 = phi i64 [ %t196, %block_0_406be3 ]
  %t216 = phi i64 [ %t197, %block_0_406be3 ]
  %t217 = phi i64 [ %t198, %block_0_406be3 ]
  %t218 = phi i64 [ %t199, %block_0_406be3 ]
  %t219 = phi i512 [ %t200, %block_0_406be3 ]
  %t220 = phi i512 [ %t201, %block_0_406be3 ]
  %t221 = phi i512 [ %t202, %block_0_406be3 ]
  %t222 = phi i512 [ %t203, %block_0_406be3 ]
  %t223 = phi i512 [ %t204, %block_0_406be3 ]
  %t224 = phi i512 [ %t205, %block_0_406be3 ]
  %t225 = phi i512 [ %t206, %block_0_406be3 ]
  %t226 = phi i512 [ %t207, %block_0_406be3 ]
  br label %block_0_406bf1
block_0_406bf1:
  %t227 = phi i64 [ 1, %block_0_406bec ], [ %t362, %block_0_406c35 ]
  %t228 = phi i64 [ %t213, %block_0_406bec ], [ %t346, %block_0_406c35 ]
  %t229 = phi i64 [ %t214, %block_0_406bec ], [ %t347, %block_0_406c35 ]
  %t230 = phi i64 [ %t215, %block_0_406bec ], [ %t348, %block_0_406c35 ]
  %t231 = phi i64 [ %t216, %block_0_406bec ], [ %t349, %block_0_406c35 ]
  %t232 = phi i64 [ %t217, %block_0_406bec ], [ %t350, %block_0_406c35 ]
  %t233 = phi i64 [ %t218, %block_0_406bec ], [ %t351, %block_0_406c35 ]
  %t234 = phi i512 [ %t219, %block_0_406bec ], [ %t352, %block_0_406c35 ]
  %t235 = phi i512 [ %t220, %block_0_406bec ], [ %t353, %block_0_406c35 ]
  %t236 = phi i512 [ %t221, %block_0_406bec ], [ %t354, %block_0_406c35 ]
  %t237 = phi i512 [ %t222, %block_0_406bec ], [ %t355, %block_0_406c35 ]
  %t238 = phi i512 [ %t223, %block_0_406bec ], [ %t356, %block_0_406c35 ]
  %t239 = phi i512 [ %t224, %block_0_406bec ], [ %t357, %block_0_406c35 ]
  %t240 = phi i512 [ %t225, %block_0_406bec ], [ %t358, %block_0_406c35 ]
  %t241 = phi i512 [ %t226, %block_0_406bec ], [ %t359, %block_0_406c35 ]
  ; r234 := (trunc r219 32)
  %t242 = trunc i64 %t227 to i32
  ; r235 := (uext r234 64)
  %t243 = zext i32 %t242 to i64
  ; r236 := (trunc r219 8)
  %t244 = trunc i64 %t227 to i8
  ; r237 := (bv_and r236 (0x1f : bv 8))
  %t245 = and i8 %t244, 31
  ; r238 := (eq r237 (0x0 : bv 8))
  %t246 = icmp eq i8 %t245, 0
  ; r239 := (uext r237 32)
  %t247 = zext i8 %t245 to i32
  ; r240 := (bv_shl (0x1 : bv 32) r239)
  %t248 = shl i32 1, %t247
  ; r241 := (mux r238 (0x1 : bv 32) r240)
  %t249 = select i1 %t246, i32 1, i32 %t248
  ; r242 := (uext r241 64)
  %t250 = zext i32 %t249 to i64
  ; r243 := (bv_ult r241 (0x0 : bv 32))
  %t251 = icmp ult i32 %t249, 0
  ; r244 := (eq r241 (0x0 : bv 32))
  %t252 = icmp eq i32 %t249, 0
  ; r245 := (or r243 r244)
  %t253 = or i1 %t251, %t252
  br i1 %t253, label %block_0_406c25, label %block_0_406c0a
block_0_406c0a:
  %t254 = phi i64 [ %t243, %block_0_406bf1 ]
  %t255 = phi i64 [ %t250, %block_0_406bf1 ]
  %t256 = phi i64 [ %t227, %block_0_406bf1 ]
  %t257 = phi i64 [ %t228, %block_0_406bf1 ]
  %t258 = phi i64 [ %t229, %block_0_406bf1 ]
  %t259 = phi i64 [ %t230, %block_0_406bf1 ]
  %t260 = phi i64 [ %t231, %block_0_406bf1 ]
  %t261 = phi i64 [ %t232, %block_0_406bf1 ]
  %t262 = phi i64 [ %t233, %block_0_406bf1 ]
  %t263 = phi i512 [ %t234, %block_0_406bf1 ]
  %t264 = phi i512 [ %t235, %block_0_406bf1 ]
  %t265 = phi i512 [ %t236, %block_0_406bf1 ]
  %t266 = phi i512 [ %t237, %block_0_406bf1 ]
  %t267 = phi i512 [ %t238, %block_0_406bf1 ]
  %t268 = phi i512 [ %t239, %block_0_406bf1 ]
  %t269 = phi i512 [ %t240, %block_0_406bf1 ]
  %t270 = phi i512 [ %t241, %block_0_406bf1 ]
  %t271 = phi i32 [ 0, %block_0_406bf1 ]
  br label %block_0_406c10
block_0_406c10:
  %t272 = phi i64 [ %t254, %block_0_406c0a ], [ %t272, %block_0_406c10 ]
  %t273 = phi i64 [ %t255, %block_0_406c0a ], [ %t273, %block_0_406c10 ]
  %t274 = phi i64 [ %t256, %block_0_406c0a ], [ %t274, %block_0_406c10 ]
  %t275 = phi i64 [ %t257, %block_0_406c0a ], [ %t275, %block_0_406c10 ]
  %t276 = phi i64 [ %t258, %block_0_406c0a ], [ %t276, %block_0_406c10 ]
  %t277 = phi i64 [ %t259, %block_0_406c0a ], [ %t277, %block_0_406c10 ]
  %t278 = phi i64 [ %t260, %block_0_406c0a ], [ %t278, %block_0_406c10 ]
  %t279 = phi i64 [ %t261, %block_0_406c0a ], [ %t279, %block_0_406c10 ]
  %t280 = phi i64 [ %t262, %block_0_406c0a ], [ %t280, %block_0_406c10 ]
  %t281 = phi i512 [ %t263, %block_0_406c0a ], [ %t281, %block_0_406c10 ]
  %t282 = phi i512 [ %t264, %block_0_406c0a ], [ %t282, %block_0_406c10 ]
  %t283 = phi i512 [ %t265, %block_0_406c0a ], [ %t283, %block_0_406c10 ]
  %t284 = phi i512 [ %t266, %block_0_406c0a ], [ %t284, %block_0_406c10 ]
  %t285 = phi i512 [ %t267, %block_0_406c0a ], [ %t285, %block_0_406c10 ]
  %t286 = phi i512 [ %t268, %block_0_406c0a ], [ %t286, %block_0_406c10 ]
  %t287 = phi i512 [ %t269, %block_0_406c0a ], [ %t287, %block_0_406c10 ]
  %t288 = phi i512 [ %t270, %block_0_406c0a ], [ %t288, %block_0_406c10 ]
  %t289 = phi i32 [ %t271, %block_0_406c0a ], [ %t290, %block_0_406c10 ]
  ; r282 := (bv_add r281 (0x1 : bv 32))
  %t290 = add i32 %t289, 1
  ; r283 := (trunc r265 32)
  %t291 = trunc i64 %t273 to i32
  ; r284 := (bv_ult r282 r283)
  %t292 = icmp ult i32 %t290, %t291
  br i1 %t292, label %block_0_406c10, label %block_0_406c25
block_0_406c25:
  %t293 = phi i64 [ %t243, %block_0_406bf1 ], [ %t272, %block_0_406c10 ]
  %t294 = phi i64 [ %t250, %block_0_406bf1 ], [ %t273, %block_0_406c10 ]
  %t295 = phi i64 [ %t227, %block_0_406bf1 ], [ %t274, %block_0_406c10 ]
  %t296 = phi i64 [ %t228, %block_0_406bf1 ], [ %t275, %block_0_406c10 ]
  %t297 = phi i64 [ %t229, %block_0_406bf1 ], [ %t276, %block_0_406c10 ]
  %t298 = phi i64 [ %t230, %block_0_406bf1 ], [ %t277, %block_0_406c10 ]
  %t299 = phi i64 [ %t231, %block_0_406bf1 ], [ %t278, %block_0_406c10 ]
  %t300 = phi i64 [ %t232, %block_0_406bf1 ], [ %t279, %block_0_406c10 ]
  %t301 = phi i64 [ %t233, %block_0_406bf1 ], [ %t280, %block_0_406c10 ]
  %t302 = phi i512 [ %t234, %block_0_406bf1 ], [ %t281, %block_0_406c10 ]
  %t303 = phi i512 [ %t235, %block_0_406bf1 ], [ %t282, %block_0_406c10 ]
  %t304 = phi i512 [ %t236, %block_0_406bf1 ], [ %t283, %block_0_406c10 ]
  %t305 = phi i512 [ %t237, %block_0_406bf1 ], [ %t284, %block_0_406c10 ]
  %t306 = phi i512 [ %t238, %block_0_406bf1 ], [ %t285, %block_0_406c10 ]
  %t307 = phi i512 [ %t239, %block_0_406bf1 ], [ %t286, %block_0_406c10 ]
  %t308 = phi i512 [ %t240, %block_0_406bf1 ], [ %t287, %block_0_406c10 ]
  %t309 = phi i512 [ %t241, %block_0_406bf1 ], [ %t288, %block_0_406c10 ]
  ; r302 := (bitcast r294 (vec 8 double))
  %t310 = bitcast i512 %t302 to <8 x double>
  ; r303 := (bitcast r295 (vec 8 double))
  %t311 = bitcast i512 %t303 to <8 x double>
  ; r304 := (bitcast r296 (vec 8 double))
  %t312 = bitcast i512 %t304 to <8 x double>
  ; r305 := (bitcast r297 (vec 8 double))
  %t313 = bitcast i512 %t305 to <8 x double>
  ; r306 := (bitcast r298 (vec 8 double))
  %t314 = bitcast i512 %t306 to <8 x double>
  ; r307 := (bitcast r299 (vec 8 double))
  %t315 = bitcast i512 %t307 to <8 x double>
  ; r308 := (bitcast r300 (vec 8 double))
  %t316 = bitcast i512 %t308 to <8 x double>
  ; r309 := (bitcast r301 (vec 8 double))
  %t317 = bitcast i512 %t309 to <8 x double>
  ; r310 := call pthread_mutex_trylock_int(r288, r289, r286, r285, r290, r291, r302, r303, r304, r305, r306, r307, r308, r309)
  %t318 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t296, i64 %t297, i64 %t294, i64 %t293, i64 %t298, i64 %t299, <8 x double> %t310, <8 x double> %t311, <8 x double> %t312, <8 x double> %t313, <8 x double> %t314, <8 x double> %t315, <8 x double> %t316, <8 x double> %t317)
  ; r311 := (tuple_field r310 0)
  %t319 = extractvalue { i64, i64, <8 x double> } %t318, 0
  ; r312 := (tuple_field r310 1)
  %t320 = extractvalue { i64, i64, <8 x double> } %t318, 1
  ; r313 := (tuple_field r310 2)
  %t321 = extractvalue { i64, i64, <8 x double> } %t318, 2
  ; r314 := (bitcast r313 (bv 512))
  %t322 = bitcast <8 x double> %t321 to i512
  br label %block_0_406c2d
block_0_406c2d:
  %t323 = phi i64 [ %t319, %block_0_406c25 ]
  %t324 = phi i64 [ %t293, %block_0_406c25 ]
  %t325 = phi i64 [ %t320, %block_0_406c25 ]
  %t326 = phi i64 [ %t295, %block_0_406c25 ]
  %t327 = phi i64 [ %t296, %block_0_406c25 ]
  %t328 = phi i64 [ %t297, %block_0_406c25 ]
  %t329 = phi i64 [ %t298, %block_0_406c25 ]
  %t330 = phi i64 [ %t299, %block_0_406c25 ]
  %t331 = phi i64 [ %t300, %block_0_406c25 ]
  %t332 = phi i64 [ %t301, %block_0_406c25 ]
  %t333 = phi i512 [ %t322, %block_0_406c25 ]
  %t334 = phi i512 [ %t303, %block_0_406c25 ]
  %t335 = phi i512 [ %t304, %block_0_406c25 ]
  %t336 = phi i512 [ %t305, %block_0_406c25 ]
  %t337 = phi i512 [ %t306, %block_0_406c25 ]
  %t338 = phi i512 [ %t307, %block_0_406c25 ]
  %t339 = phi i512 [ %t308, %block_0_406c25 ]
  %t340 = phi i512 [ %t309, %block_0_406c25 ]
  ; r333 := (trunc r315 32)
  %t341 = trunc i64 %t323 to i32
  ; r334 := (eq r333 (0x0 : bv 32))
  %t342 = icmp eq i32 %t341, 0
  br i1 %t342, label %block_0_406b6f, label %block_0_406c35
block_0_406c35:
  %t343 = phi i64 [ %t324, %block_0_406c2d ]
  %t344 = phi i64 [ %t325, %block_0_406c2d ]
  %t345 = phi i64 [ %t326, %block_0_406c2d ]
  %t346 = phi i64 [ %t327, %block_0_406c2d ]
  %t347 = phi i64 [ %t328, %block_0_406c2d ]
  %t348 = phi i64 [ %t329, %block_0_406c2d ]
  %t349 = phi i64 [ %t330, %block_0_406c2d ]
  %t350 = phi i64 [ %t331, %block_0_406c2d ]
  %t351 = phi i64 [ %t332, %block_0_406c2d ]
  %t352 = phi i512 [ %t333, %block_0_406c2d ]
  %t353 = phi i512 [ %t334, %block_0_406c2d ]
  %t354 = phi i512 [ %t335, %block_0_406c2d ]
  %t355 = phi i512 [ %t336, %block_0_406c2d ]
  %t356 = phi i512 [ %t337, %block_0_406c2d ]
  %t357 = phi i512 [ %t338, %block_0_406c2d ]
  %t358 = phi i512 [ %t339, %block_0_406c2d ]
  %t359 = phi i512 [ %t340, %block_0_406c2d ]
  ; r352 := (trunc r337 32)
  %t360 = trunc i64 %t345 to i32
  ; r353 := (bv_add r352 (0x1 : bv 32))
  %t361 = add i32 %t360, 1
  ; r354 := (uext r353 64)
  %t362 = zext i32 %t361 to i64
  ; r355 := (eq r352 (0xb : bv 32))
  %t363 = icmp eq i32 %t360, 11
  br i1 %t363, label %block_0_406c3d, label %block_0_406bf1
block_0_406c3d:
  %t364 = phi i64 [ %t192, %block_0_406be3 ], [ %t343, %block_0_406c35 ]
  %t365 = phi i64 [ %t193, %block_0_406be3 ], [ %t344, %block_0_406c35 ]
  %t366 = phi i64 [ %t194, %block_0_406be3 ], [ %t346, %block_0_406c35 ]
  %t367 = phi i64 [ %t195, %block_0_406be3 ], [ %t347, %block_0_406c35 ]
  %t368 = phi i64 [ %t196, %block_0_406be3 ], [ %t348, %block_0_406c35 ]
  %t369 = phi i64 [ %t197, %block_0_406be3 ], [ %t349, %block_0_406c35 ]
  %t370 = phi i64 [ %t198, %block_0_406be3 ], [ %t350, %block_0_406c35 ]
  %t371 = phi i64 [ %t199, %block_0_406be3 ], [ %t351, %block_0_406c35 ]
  %t372 = phi i512 [ %t200, %block_0_406be3 ], [ %t352, %block_0_406c35 ]
  %t373 = phi i512 [ %t201, %block_0_406be3 ], [ %t353, %block_0_406c35 ]
  %t374 = phi i512 [ %t202, %block_0_406be3 ], [ %t354, %block_0_406c35 ]
  %t375 = phi i512 [ %t203, %block_0_406be3 ], [ %t355, %block_0_406c35 ]
  %t376 = phi i512 [ %t204, %block_0_406be3 ], [ %t356, %block_0_406c35 ]
  %t377 = phi i512 [ %t205, %block_0_406be3 ], [ %t357, %block_0_406c35 ]
  %t378 = phi i512 [ %t206, %block_0_406be3 ], [ %t358, %block_0_406c35 ]
  %t379 = phi i512 [ %t207, %block_0_406be3 ], [ %t359, %block_0_406c35 ]
  ; r372 := (bitcast r364 (vec 8 double))
  %t380 = bitcast i512 %t372 to <8 x double>
  ; r373 := (bitcast r365 (vec 8 double))
  %t381 = bitcast i512 %t373 to <8 x double>
  ; r374 := (bitcast r366 (vec 8 double))
  %t382 = bitcast i512 %t374 to <8 x double>
  ; r375 := (bitcast r367 (vec 8 double))
  %t383 = bitcast i512 %t375 to <8 x double>
  ; r376 := (bitcast r368 (vec 8 double))
  %t384 = bitcast i512 %t376 to <8 x double>
  ; r377 := (bitcast r369 (vec 8 double))
  %t385 = bitcast i512 %t377 to <8 x double>
  ; r378 := (bitcast r370 (vec 8 double))
  %t386 = bitcast i512 %t378 to <8 x double>
  ; r379 := (bitcast r371 (vec 8 double))
  %t387 = bitcast i512 %t379 to <8 x double>
  ; r380 := call pthread_mutex_lock_int(r358, r359, r357, r356, r360, r361, r372, r373, r374, r375, r376, r377, r378, r379)
  %t388 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 %t366, i64 %t367, i64 %t365, i64 %t364, i64 %t368, i64 %t369, <8 x double> %t380, <8 x double> %t381, <8 x double> %t382, <8 x double> %t383, <8 x double> %t384, <8 x double> %t385, <8 x double> %t386, <8 x double> %t387)
  ; r381 := (tuple_field r380 0)
  %t389 = extractvalue { i64, i64, <8 x double> } %t388, 0
  ; r382 := (tuple_field r380 1)
  %t390 = extractvalue { i64, i64, <8 x double> } %t388, 1
  ; r383 := (tuple_field r380 2)
  %t391 = extractvalue { i64, i64, <8 x double> } %t388, 2
  ; r384 := (bitcast r383 (bv 512))
  %t392 = bitcast <8 x double> %t391 to i512
  br label %block_0_406c45
block_0_406c45:
  %t393 = phi i64 [ %t364, %block_0_406c3d ]
  %t394 = phi i64 [ %t366, %block_0_406c3d ]
  %t395 = phi i64 [ %t367, %block_0_406c3d ]
  %t396 = phi i64 [ %t368, %block_0_406c3d ]
  %t397 = phi i64 [ %t370, %block_0_406c3d ]
  %t398 = phi i64 [ %t371, %block_0_406c3d ]
  %t399 = phi i512 [ %t392, %block_0_406c3d ]
  %t400 = phi i512 [ %t373, %block_0_406c3d ]
  %t401 = phi i512 [ %t374, %block_0_406c3d ]
  %t402 = phi i512 [ %t375, %block_0_406c3d ]
  %t403 = phi i512 [ %t376, %block_0_406c3d ]
  %t404 = phi i512 [ %t377, %block_0_406c3d ]
  %t405 = phi i512 [ %t378, %block_0_406c3d ]
  %t406 = phi i512 [ %t379, %block_0_406c3d ]
  br label %block_0_406b6f
}
define { i64, i64, <8 x double> } @arena_malloc(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_407060:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (read (0x6354f0 : bv 64) (bv 64))
  %t2 = inttoptr i64 6509808 to i64*
  %t3 = load i64, i64* %t2
  ; r3 := (bv_ult r2 arg0)
  %t4 = icmp ult i64 %t3, %arg0
  ; r4 := (bitcast arg6 (bv 512))
  %t5 = bitcast <8 x double> %arg6 to i512
  ; r5 := (bitcast arg7 (bv 512))
  %t6 = bitcast <8 x double> %arg7 to i512
  ; r6 := (bitcast arg8 (bv 512))
  %t7 = bitcast <8 x double> %arg8 to i512
  ; r7 := (bitcast arg9 (bv 512))
  %t8 = bitcast <8 x double> %arg9 to i512
  ; r8 := (bitcast arg10 (bv 512))
  %t9 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r10 := (bitcast arg12 (bv 512))
  %t11 = bitcast <8 x double> %arg12 to i512
  ; r11 := (bitcast arg13 (bv 512))
  %t12 = bitcast <8 x double> %arg13 to i512
  ; r12 := (bitcast arg6 (bv 512))
  %t13 = bitcast <8 x double> %arg6 to i512
  ; r13 := (bitcast arg7 (bv 512))
  %t14 = bitcast <8 x double> %arg7 to i512
  ; r14 := (bitcast arg8 (bv 512))
  %t15 = bitcast <8 x double> %arg8 to i512
  ; r15 := (bitcast arg9 (bv 512))
  %t16 = bitcast <8 x double> %arg9 to i512
  ; r16 := (bitcast arg10 (bv 512))
  %t17 = bitcast <8 x double> %arg10 to i512
  ; r17 := (bitcast arg11 (bv 512))
  %t18 = bitcast <8 x double> %arg11 to i512
  ; r18 := (bitcast arg12 (bv 512))
  %t19 = bitcast <8 x double> %arg12 to i512
  ; r19 := (bitcast arg13 (bv 512))
  %t20 = bitcast <8 x double> %arg13 to i512
  br i1 %t4, label %block_0_407204, label %block_0_407081
block_0_407081:
  %t21 = phi i64 [ %arg3, %block_0_407060 ]
  %t22 = phi i64 [ %arg2, %block_0_407060 ]
  %t23 = phi i64 [ %arg0, %block_0_407060 ]
  %t24 = phi i64 [ %arg1, %block_0_407060 ]
  %t25 = phi i64 [ %arg4, %block_0_407060 ]
  %t26 = phi i64 [ %arg5, %block_0_407060 ]
  %t27 = phi i64 [ %t1, %block_0_407060 ]
  %t28 = phi i512 [ %t13, %block_0_407060 ]
  %t29 = phi i512 [ %t14, %block_0_407060 ]
  %t30 = phi i512 [ %t15, %block_0_407060 ]
  %t31 = phi i512 [ %t16, %block_0_407060 ]
  %t32 = phi i512 [ %t17, %block_0_407060 ]
  %t33 = phi i512 [ %t18, %block_0_407060 ]
  %t34 = phi i512 [ %t19, %block_0_407060 ]
  %t35 = phi i512 [ %t20, %block_0_407060 ]
  ; r35 := (read (0x6354e8 : bv 64) (bv 64))
  %t36 = inttoptr i64 6509800 to i64*
  %t37 = load i64, i64* %t36
  ; r36 := (eq r22 r35)
  %t38 = icmp eq i64 %t23, %t37
  ; r37 := (bv_ule r35 r22)
  %t39 = icmp ule i64 %t37, %t23
  ; r38 := (not r36)
  %t40 = icmp eq i1 %t38, 0
  ; r39 := (and r37 r38)
  %t41 = and i1 %t39, %t40
  br i1 %t41, label %block_0_4072a4, label %block_0_40708e
block_0_40708e:
  %t42 = phi i64 [ %t21, %block_0_407081 ]
  %t43 = phi i64 [ %t22, %block_0_407081 ]
  %t44 = phi i64 [ %t23, %block_0_407081 ]
  %t45 = phi i64 [ %t24, %block_0_407081 ]
  %t46 = phi i64 [ %t25, %block_0_407081 ]
  %t47 = phi i64 [ %t26, %block_0_407081 ]
  %t48 = phi i64 [ %t27, %block_0_407081 ]
  %t49 = phi i512 [ %t28, %block_0_407081 ]
  %t50 = phi i512 [ %t29, %block_0_407081 ]
  %t51 = phi i512 [ %t30, %block_0_407081 ]
  %t52 = phi i512 [ %t31, %block_0_407081 ]
  %t53 = phi i512 [ %t32, %block_0_407081 ]
  %t54 = phi i512 [ %t33, %block_0_407081 ]
  %t55 = phi i512 [ %t34, %block_0_407081 ]
  %t56 = phi i512 [ %t35, %block_0_407081 ]
  ; r55 := (read (0x6356e8 : bv 64) (bv 32))
  %t57 = inttoptr i64 6510312 to i32*
  %t58 = load i32, i32* %t57
  ; r56 := (eq r55 (0x0 : bv 32))
  %t59 = icmp eq i32 %t58, 0
  br i1 %t59, label %block_0_40709e, label %block_0_407497
block_0_40709e:
  %t60 = phi i64 [ %t42, %block_0_40708e ], [ %t1257, %block_0_407497 ]
  %t61 = phi i64 [ %t43, %block_0_40708e ], [ %t1258, %block_0_407497 ]
  %t62 = phi i64 [ %t44, %block_0_40708e ], [ %t1259, %block_0_407497 ]
  %t63 = phi i64 [ %t45, %block_0_40708e ], [ %t1260, %block_0_407497 ]
  %t64 = phi i64 [ %t46, %block_0_40708e ], [ %t1261, %block_0_407497 ]
  %t65 = phi i64 [ %t47, %block_0_40708e ], [ %t1262, %block_0_407497 ]
  %t66 = phi i64 [ %t48, %block_0_40708e ], [ %t1263, %block_0_407497 ]
  %t67 = phi i512 [ %t49, %block_0_40708e ], [ %t1264, %block_0_407497 ]
  %t68 = phi i512 [ %t50, %block_0_40708e ], [ %t1265, %block_0_407497 ]
  %t69 = phi i512 [ %t51, %block_0_40708e ], [ %t1266, %block_0_407497 ]
  %t70 = phi i512 [ %t52, %block_0_40708e ], [ %t1267, %block_0_407497 ]
  %t71 = phi i512 [ %t53, %block_0_40708e ], [ %t1268, %block_0_407497 ]
  %t72 = phi i512 [ %t54, %block_0_40708e ], [ %t1269, %block_0_407497 ]
  %t73 = phi i512 [ %t55, %block_0_40708e ], [ %t1270, %block_0_407497 ]
  %t74 = phi i512 [ %t56, %block_0_40708e ], [ %t1271, %block_0_407497 ]
  ; r72 := (read (0x6356a0 : bv 64) (bv 64))
  %t75 = inttoptr i64 6510240 to i64*
  %t76 = load i64, i64* %t75
  ; r73 := (read r72 (bv 64))
  %t77 = inttoptr i64 %t76 to i64*
  %t78 = load i64, i64* %t77
  br label %block_0_4070a8
block_0_4070a8:
  %t79 = phi i64 [ %t60, %block_0_40709e ], [ %t1321, %block_0_4074a9 ], [ %t3883, %block_0_407a98 ]
  %t80 = phi i64 [ %t61, %block_0_40709e ], [ %t1323, %block_0_4074a9 ], [ %t3884, %block_0_407a98 ]
  %t81 = phi i64 [ %t62, %block_0_40709e ], [ %t1306, %block_0_4074a9 ], [ %t3885, %block_0_407a98 ]
  %t82 = phi i64 [ %t63, %block_0_40709e ], [ %t1307, %block_0_4074a9 ], [ %t3886, %block_0_407a98 ]
  %t83 = phi i64 [ %t64, %block_0_40709e ], [ %t1308, %block_0_4074a9 ], [ %t3887, %block_0_407a98 ]
  %t84 = phi i64 [ %t65, %block_0_40709e ], [ %t1309, %block_0_4074a9 ], [ %t3888, %block_0_407a98 ]
  %t85 = phi i64 [ %t78, %block_0_40709e ], [ %t1329, %block_0_4074a9 ], [ %t3889, %block_0_407a98 ]
  %t86 = phi i64 [ %t66, %block_0_40709e ], [ %t1310, %block_0_4074a9 ], [ %t3890, %block_0_407a98 ]
  %t87 = phi i512 [ %t67, %block_0_40709e ], [ %t1311, %block_0_4074a9 ], [ %t3891, %block_0_407a98 ]
  %t88 = phi i512 [ %t68, %block_0_40709e ], [ %t1312, %block_0_4074a9 ], [ %t3892, %block_0_407a98 ]
  %t89 = phi i512 [ %t69, %block_0_40709e ], [ %t1313, %block_0_4074a9 ], [ %t3893, %block_0_407a98 ]
  %t90 = phi i512 [ %t70, %block_0_40709e ], [ %t1314, %block_0_4074a9 ], [ %t3894, %block_0_407a98 ]
  %t91 = phi i512 [ %t71, %block_0_40709e ], [ %t1315, %block_0_4074a9 ], [ %t3895, %block_0_407a98 ]
  %t92 = phi i512 [ %t72, %block_0_40709e ], [ %t1316, %block_0_4074a9 ], [ %t3896, %block_0_407a98 ]
  %t93 = phi i512 [ %t73, %block_0_40709e ], [ %t1317, %block_0_4074a9 ], [ %t3897, %block_0_407a98 ]
  %t94 = phi i512 [ %t74, %block_0_40709e ], [ %t1318, %block_0_4074a9 ], [ %t3898, %block_0_407a98 ]
  ; r90 := (read (0x635508 : bv 64) (bv 64))
  %t95 = inttoptr i64 6509832 to i64*
  %t96 = load i64, i64* %t95
  ; r91 := (read (0x6356e8 : bv 64) (bv 32))
  %t97 = inttoptr i64 6510312 to i32*
  %t98 = load i32, i32* %t97
  ; r92 := (bv_add r90 r76)
  %t99 = add i64 %t96, %t81
  ; r93 := (read r92 (bv 8))
  %t100 = inttoptr i64 %t99 to i8*
  %t101 = load i8, i8* %t100
  ; r94 := (uext r93 64)
  %t102 = zext i8 %t101 to i64
  ; r95 := (bv_mul (0x8 : bv 64) r94)
  %t103 = mul i64 8, %t102
  ; r96 := (bv_add r94 r95)
  %t104 = add i64 %t102, %t103
  ; r97 := (bv_shl r96 (0x3 : bv 64))
  %t105 = shl i64 %t104, 3
  ; r98 := (eq r91 (0x0 : bv 32))
  %t106 = icmp eq i32 %t98, 0
  ; r99 := (bv_add r80 r97)
  %t107 = add i64 %t85, %t105
  ; r100 := (bv_add r99 (0x88 : bv 64))
  %t108 = add i64 %t107, 136
  ; r101 := (bv_add r99 (0xb0 : bv 64))
  %t109 = add i64 %t107, 176
  ; r102 := (read r101 (bv 64))
  %t110 = inttoptr i64 %t109 to i64*
  %t111 = load i64, i64* %t110
  br i1 %t106, label %block_0_4070db, label %block_0_40778f
block_0_4070db:
  %t112 = phi i64 [ %t79, %block_0_4070a8 ], [ %t1416, %block_0_4074fb ], [ %t2569, %block_0_407797 ], [ %t2713, %block_0_4077e3 ], [ %t2788, %block_0_4077fb ]
  %t113 = phi i64 [ %t102, %block_0_4070a8 ], [ %t1436, %block_0_4074fb ], [ %t2571, %block_0_407797 ], [ %t2715, %block_0_4077e3 ], [ %t2789, %block_0_4077fb ]
  %t114 = phi i64 [ %t82, %block_0_4070a8 ], [ %t1418, %block_0_4074fb ], [ %t2572, %block_0_407797 ], [ %t2717, %block_0_4077e3 ], [ %t2790, %block_0_4077fb ]
  %t115 = phi i64 [ %t83, %block_0_4070a8 ], [ %t1419, %block_0_4074fb ], [ %t2573, %block_0_407797 ], [ %t2718, %block_0_4077e3 ], [ %t2791, %block_0_4077fb ]
  %t116 = phi i64 [ %t84, %block_0_4070a8 ], [ %t1420, %block_0_4074fb ], [ %t2574, %block_0_407797 ], [ %t2719, %block_0_4077e3 ], [ %t2792, %block_0_4077fb ]
  %t117 = phi i64 [ %t108, %block_0_4070a8 ], [ %t1444, %block_0_4074fb ], [ %t2575, %block_0_407797 ], [ %t2720, %block_0_4077e3 ], [ %t2793, %block_0_4077fb ]
  %t118 = phi i64 [ %t85, %block_0_4070a8 ], [ %t1421, %block_0_4074fb ], [ %t2576, %block_0_407797 ], [ %t2721, %block_0_4077e3 ], [ %t2794, %block_0_4077fb ]
  %t119 = phi i64 [ %t111, %block_0_4070a8 ], [ %t1443, %block_0_4074fb ], [ %t2577, %block_0_407797 ], [ %t2722, %block_0_4077e3 ], [ %t2795, %block_0_4077fb ]
  %t120 = phi i64 [ %t86, %block_0_4070a8 ], [ %t1422, %block_0_4074fb ], [ %t2578, %block_0_407797 ], [ %t2723, %block_0_4077e3 ], [ %t2796, %block_0_4077fb ]
  %t121 = phi i512 [ %t87, %block_0_4070a8 ], [ %t1423, %block_0_4074fb ], [ %t2579, %block_0_407797 ], [ %t2724, %block_0_4077e3 ], [ %t2797, %block_0_4077fb ]
  %t122 = phi i512 [ %t88, %block_0_4070a8 ], [ %t1424, %block_0_4074fb ], [ %t2580, %block_0_407797 ], [ %t2725, %block_0_4077e3 ], [ %t2798, %block_0_4077fb ]
  %t123 = phi i512 [ %t89, %block_0_4070a8 ], [ %t1425, %block_0_4074fb ], [ %t2581, %block_0_407797 ], [ %t2726, %block_0_4077e3 ], [ %t2799, %block_0_4077fb ]
  %t124 = phi i512 [ %t90, %block_0_4070a8 ], [ %t1426, %block_0_4074fb ], [ %t2582, %block_0_407797 ], [ %t2727, %block_0_4077e3 ], [ %t2800, %block_0_4077fb ]
  %t125 = phi i512 [ %t91, %block_0_4070a8 ], [ %t1427, %block_0_4074fb ], [ %t2583, %block_0_407797 ], [ %t2728, %block_0_4077e3 ], [ %t2801, %block_0_4077fb ]
  %t126 = phi i512 [ %t92, %block_0_4070a8 ], [ %t1428, %block_0_4074fb ], [ %t2584, %block_0_407797 ], [ %t2729, %block_0_4077e3 ], [ %t2802, %block_0_4077fb ]
  %t127 = phi i512 [ %t93, %block_0_4070a8 ], [ %t1429, %block_0_4074fb ], [ %t2585, %block_0_407797 ], [ %t2730, %block_0_4077e3 ], [ %t2803, %block_0_4077fb ]
  %t128 = phi i512 [ %t94, %block_0_4070a8 ], [ %t1430, %block_0_4074fb ], [ %t2586, %block_0_407797 ], [ %t2731, %block_0_4077e3 ], [ %t2804, %block_0_4077fb ]
  ; r120 := (bv_mul (0x8 : bv 64) r104)
  %t129 = mul i64 8, %t113
  ; r121 := (bv_add r104 r120)
  %t130 = add i64 %t113, %t129
  ; r122 := (bv_mul (0x8 : bv 64) r121)
  %t131 = mul i64 8, %t130
  ; r123 := (bv_add r109 r122)
  %t132 = add i64 %t118, %t131
  ; r124 := (bv_add r123 (0x88 : bv 64))
  %t133 = add i64 %t132, 136
  ; r125 := (read r124 (bv 64))
  %t134 = inttoptr i64 %t133 to i64*
  %t135 = load i64, i64* %t134
  ; r126 := (eq r125 (0x0 : bv 64))
  %t136 = icmp eq i64 %t135, 0
  br i1 %t136, label %block_0_407642, label %block_0_4070f4
block_0_4070f4:
  %t137 = phi i64 [ %t112, %block_0_4070db ]
  %t138 = phi i64 [ %t132, %block_0_4070db ]
  %t139 = phi i64 [ %t113, %block_0_4070db ]
  %t140 = phi i64 [ %t114, %block_0_4070db ]
  %t141 = phi i64 [ %t115, %block_0_4070db ]
  %t142 = phi i64 [ %t116, %block_0_4070db ]
  %t143 = phi i64 [ %t135, %block_0_4070db ]
  %t144 = phi i64 [ %t117, %block_0_4070db ]
  %t145 = phi i64 [ %t118, %block_0_4070db ]
  %t146 = phi i64 [ %t119, %block_0_4070db ]
  %t147 = phi i64 [ %t120, %block_0_4070db ]
  %t148 = phi i512 [ %t121, %block_0_4070db ]
  %t149 = phi i512 [ %t122, %block_0_4070db ]
  %t150 = phi i512 [ %t123, %block_0_4070db ]
  %t151 = phi i512 [ %t124, %block_0_4070db ]
  %t152 = phi i512 [ %t125, %block_0_4070db ]
  %t153 = phi i512 [ %t126, %block_0_4070db ]
  %t154 = phi i512 [ %t127, %block_0_4070db ]
  %t155 = phi i512 [ %t128, %block_0_4070db ]
  ; r146 := (bv_add r133 (0xc : bv 64))
  %t156 = add i64 %t143, 12
  ; r147 := (read r146 (bv 32))
  %t157 = inttoptr i64 %t156 to i32*
  %t158 = load i32, i32* %t157
  ; r148 := (eq r147 (0x0 : bv 32))
  %t159 = icmp eq i32 %t158, 0
  br i1 %t159, label %block_0_407642, label %block_0_407101
block_0_407101:
  %t160 = phi i64 [ %t137, %block_0_4070f4 ]
  %t161 = phi i64 [ %t138, %block_0_4070f4 ]
  %t162 = phi i64 [ %t139, %block_0_4070f4 ]
  %t163 = phi i64 [ %t140, %block_0_4070f4 ]
  %t164 = phi i64 [ %t143, %block_0_4070f4 ]
  %t165 = phi i64 [ %t145, %block_0_4070f4 ]
  %t166 = phi i64 [ %t146, %block_0_4070f4 ]
  %t167 = phi i64 [ %t147, %block_0_4070f4 ]
  %t168 = phi i512 [ %t148, %block_0_4070f4 ]
  %t169 = phi i512 [ %t149, %block_0_4070f4 ]
  %t170 = phi i512 [ %t150, %block_0_4070f4 ]
  %t171 = phi i512 [ %t151, %block_0_4070f4 ]
  %t172 = phi i512 [ %t152, %block_0_4070f4 ]
  %t173 = phi i512 [ %t153, %block_0_4070f4 ]
  %t174 = phi i512 [ %t154, %block_0_4070f4 ]
  %t175 = phi i512 [ %t155, %block_0_4070f4 ]
  ; r165 := (bv_add r153 (0x8 : bv 64))
  %t176 = add i64 %t164, 8
  ; r166 := (read r165 (bv 32))
  %t177 = inttoptr i64 %t176 to i32*
  %t178 = load i32, i32* %t177
  ; r167 := (uext r166 64)
  %t179 = zext i32 %t178 to i64
  ; r168 := (bv_mul (0x4 : bv 64) r167)
  %t180 = mul i64 4, %t179
  ; r169 := (bv_add r153 r168)
  %t181 = add i64 %t164, %t180
  ; r170 := (bv_add r169 (0x10 : bv 64))
  %t182 = add i64 %t181, 16
  ; r171 := (read r170 (bv 32))
  %t183 = inttoptr i64 %t182 to i32*
  %t184 = load i32, i32* %t183
  ; r172 := (uext r171 64)
  %t185 = zext i32 %t184 to i64
  ; r173 := (eq r171 (0x0 : bv 32))
  %t186 = icmp eq i32 %t184, 0
  br i1 %t186, label %block_0_407116, label %block_0_4078bd
block_0_407116:
  %t187 = phi i64 [ %t179, %block_0_407101 ]
  %t188 = phi i64 [ %t160, %block_0_407101 ]
  %t189 = phi i64 [ %t161, %block_0_407101 ]
  %t190 = phi i64 [ %t162, %block_0_407101 ]
  %t191 = phi i64 [ %t163, %block_0_407101 ]
  %t192 = phi i64 [ %t179, %block_0_407101 ]
  %t193 = phi i64 [ %t164, %block_0_407101 ]
  %t194 = phi i64 [ %t165, %block_0_407101 ]
  %t195 = phi i64 [ %t166, %block_0_407101 ]
  %t196 = phi i64 [ %t167, %block_0_407101 ]
  %t197 = phi i512 [ %t168, %block_0_407101 ]
  %t198 = phi i512 [ %t169, %block_0_407101 ]
  %t199 = phi i512 [ %t170, %block_0_407101 ]
  %t200 = phi i512 [ %t171, %block_0_407101 ]
  %t201 = phi i512 [ %t172, %block_0_407101 ]
  %t202 = phi i512 [ %t173, %block_0_407101 ]
  %t203 = phi i512 [ %t174, %block_0_407101 ]
  %t204 = phi i512 [ %t175, %block_0_407101 ]
  ; r192 := (bv_add r174 (0x1 : bv 64))
  %t205 = add i64 %t187, 1
  ; r193 := (trunc r192 32)
  %t206 = trunc i64 %t205 to i32
  ; r194 := (uext r193 64)
  %t207 = zext i32 %t206 to i64
  ; r195 := (bv_add r176 (0xc4 : bv 64))
  %t208 = add i64 %t189, 196
  ; r196 := (read r195 (bv 32))
  %t209 = inttoptr i64 %t208 to i32*
  %t210 = load i32, i32* %t209
  ; r197 := (uext r196 64)
  %t211 = zext i32 %t210 to i64
  ; r198 := (bv_ult r193 r196)
  %t212 = icmp ult i32 %t206, %t210
  br i1 %t212, label %block_0_40713d, label %block_0_407125
block_0_407125:
  %t213 = phi i64 [ %t188, %block_0_407116 ]
  %t214 = phi i64 [ %t189, %block_0_407116 ]
  %t215 = phi i64 [ %t191, %block_0_407116 ]
  %t216 = phi i64 [ %t207, %block_0_407116 ]
  %t217 = phi i64 [ %t192, %block_0_407116 ]
  %t218 = phi i64 [ %t193, %block_0_407116 ]
  %t219 = phi i64 [ %t194, %block_0_407116 ]
  %t220 = phi i64 [ %t195, %block_0_407116 ]
  %t221 = phi i64 [ %t196, %block_0_407116 ]
  %t222 = phi i512 [ %t197, %block_0_407116 ]
  %t223 = phi i512 [ %t198, %block_0_407116 ]
  %t224 = phi i512 [ %t199, %block_0_407116 ]
  %t225 = phi i512 [ %t200, %block_0_407116 ]
  %t226 = phi i512 [ %t201, %block_0_407116 ]
  %t227 = phi i512 [ %t202, %block_0_407116 ]
  %t228 = phi i512 [ %t203, %block_0_407116 ]
  %t229 = phi i512 [ %t204, %block_0_407116 ]
  br label %block_0_407711
block_0_407130:
  %t230 = phi i64 [ %t254, %block_0_40713d ]
  %t231 = phi i64 [ %t255, %block_0_40713d ]
  %t232 = phi i64 [ %t256, %block_0_40713d ]
  %t233 = phi i64 [ %t257, %block_0_40713d ]
  %t234 = phi i64 [ %t258, %block_0_40713d ]
  %t235 = phi i64 [ %t259, %block_0_40713d ]
  %t236 = phi i64 [ %t279, %block_0_40713d ]
  %t237 = phi i64 [ %t260, %block_0_40713d ]
  %t238 = phi i64 [ %t261, %block_0_40713d ]
  %t239 = phi i64 [ %t262, %block_0_40713d ]
  %t240 = phi i64 [ %t263, %block_0_40713d ]
  %t241 = phi i512 [ %t264, %block_0_40713d ]
  %t242 = phi i512 [ %t265, %block_0_40713d ]
  %t243 = phi i512 [ %t266, %block_0_40713d ]
  %t244 = phi i512 [ %t267, %block_0_40713d ]
  %t245 = phi i512 [ %t268, %block_0_40713d ]
  %t246 = phi i512 [ %t269, %block_0_40713d ]
  %t247 = phi i512 [ %t270, %block_0_40713d ]
  %t248 = phi i512 [ %t271, %block_0_40713d ]
  ; r235 := (trunc r221 32)
  %t249 = trunc i64 %t235 to i32
  ; r236 := (bv_add r235 (0x1 : bv 32))
  %t250 = add i32 %t249, 1
  ; r237 := (uext r236 64)
  %t251 = zext i32 %t250 to i64
  ; r238 := (trunc r216 32)
  %t252 = trunc i64 %t230 to i32
  ; r239 := (bv_ult r236 r238)
  %t253 = icmp ult i32 %t250, %t252
  br i1 %t253, label %block_0_40713d, label %block_0_407711
block_0_40713d:
  %t254 = phi i64 [ %t211, %block_0_407116 ], [ %t230, %block_0_407130 ]
  %t255 = phi i64 [ %t188, %block_0_407116 ], [ %t231, %block_0_407130 ]
  %t256 = phi i64 [ %t189, %block_0_407116 ], [ %t232, %block_0_407130 ]
  %t257 = phi i64 [ %t190, %block_0_407116 ], [ %t233, %block_0_407130 ]
  %t258 = phi i64 [ %t191, %block_0_407116 ], [ %t234, %block_0_407130 ]
  %t259 = phi i64 [ %t207, %block_0_407116 ], [ %t251, %block_0_407130 ]
  %t260 = phi i64 [ %t193, %block_0_407116 ], [ %t237, %block_0_407130 ]
  %t261 = phi i64 [ %t194, %block_0_407116 ], [ %t238, %block_0_407130 ]
  %t262 = phi i64 [ %t195, %block_0_407116 ], [ %t239, %block_0_407130 ]
  %t263 = phi i64 [ %t196, %block_0_407116 ], [ %t240, %block_0_407130 ]
  %t264 = phi i512 [ %t197, %block_0_407116 ], [ %t241, %block_0_407130 ]
  %t265 = phi i512 [ %t198, %block_0_407116 ], [ %t242, %block_0_407130 ]
  %t266 = phi i512 [ %t199, %block_0_407116 ], [ %t243, %block_0_407130 ]
  %t267 = phi i512 [ %t200, %block_0_407116 ], [ %t244, %block_0_407130 ]
  %t268 = phi i512 [ %t201, %block_0_407116 ], [ %t245, %block_0_407130 ]
  %t269 = phi i512 [ %t202, %block_0_407116 ], [ %t246, %block_0_407130 ]
  %t270 = phi i512 [ %t203, %block_0_407116 ], [ %t247, %block_0_407130 ]
  %t271 = phi i512 [ %t204, %block_0_407116 ], [ %t248, %block_0_407130 ]
  ; r258 := (trunc r245 32)
  %t272 = trunc i64 %t259 to i32
  ; r259 := (uext r258 64)
  %t273 = zext i32 %t272 to i64
  ; r260 := (bv_mul (0x4 : bv 64) r259)
  %t274 = mul i64 4, %t273
  ; r261 := (bv_add r246 r260)
  %t275 = add i64 %t260, %t274
  ; r262 := (bv_add r261 (0x10 : bv 64))
  %t276 = add i64 %t275, 16
  ; r263 := (read r262 (bv 32))
  %t277 = inttoptr i64 %t276 to i32*
  %t278 = load i32, i32* %t277
  ; r264 := (uext r263 64)
  %t279 = zext i32 %t278 to i64
  ; r265 := (eq r263 (0x0 : bv 32))
  %t280 = icmp eq i32 %t278, 0
  br i1 %t280, label %block_0_407130, label %block_0_40714a
block_0_40714a:
  %t281 = phi i64 [ %t257, %block_0_40713d ]
  %t282 = phi i64 [ %t259, %block_0_40713d ]
  %t283 = phi i64 [ %t279, %block_0_40713d ]
  %t284 = phi i64 [ %t273, %block_0_40713d ]
  %t285 = phi i64 [ %t260, %block_0_40713d ]
  %t286 = phi i64 [ %t261, %block_0_40713d ]
  %t287 = phi i64 [ %t262, %block_0_40713d ]
  %t288 = phi i64 [ %t263, %block_0_40713d ]
  %t289 = phi i512 [ %t264, %block_0_40713d ]
  %t290 = phi i512 [ %t265, %block_0_40713d ]
  %t291 = phi i512 [ %t266, %block_0_40713d ]
  %t292 = phi i512 [ %t267, %block_0_40713d ]
  %t293 = phi i512 [ %t268, %block_0_40713d ]
  %t294 = phi i512 [ %t269, %block_0_40713d ]
  %t295 = phi i512 [ %t270, %block_0_40713d ]
  %t296 = phi i512 [ %t271, %block_0_40713d ]
  ; r282 := (trunc r268 32)
  %t297 = trunc i64 %t283 to i32
  ; r283 := (eq r282 (0x0 : bv 32))
  %t298 = icmp eq i32 %t297, 0
  ; r284 := (bsf r282)
  %t299 = call i32 (i32, i1) @llvm.cttz.i32(i32 %t297, i1 1)
  ; r285 := (bv_mul (0x8 : bv 64) r266)
  %t300 = mul i64 8, %t281
  ; r286 := (bv_add r266 r285)
  %t301 = add i64 %t281, %t300
  ; r287 := (bv_mul (0x8 : bv 64) r286)
  %t302 = mul i64 8, %t301
  ; r288 := (bv_add r271 r287)
  %t303 = add i64 %t286, %t302
  ; r289 := (mux r283 (0xffffffff : bv 32) r284)
  %t304 = select i1 %t298, i32 4294967295, i32 %t299
  ; r290 := (trunc r289 8)
  %t305 = trunc i32 %t304 to i8
  ; r291 := (bv_add r288 (0xc8 : bv 64))
  %t306 = add i64 %t303, 200
  ; r292 := (read r291 (bv 32))
  %t307 = inttoptr i64 %t306 to i32*
  %t308 = load i32, i32* %t307
  ; r293 := (uext r292 64)
  %t309 = zext i32 %t308 to i64
  ; r294 := (bv_add r288 (0xb0 : bv 64))
  %t310 = add i64 %t303, 176
  ; r295 := (read r294 (bv 64))
  %t311 = inttoptr i64 %t310 to i64*
  %t312 = load i64, i64* %t311
  ; r296 := (trunc r267 32)
  %t313 = trunc i64 %t282 to i32
  ; r297 := (bv_shl r296 (0x5 : bv 32))
  %t314 = shl i32 %t313, 5
  ; r298 := (bv_add r270 (0x8 : bv 64))
  %t315 = add i64 %t285, 8
  ; write r298 r296
  %t316 = inttoptr i64 %t315 to i32*
  store i32 %t313, i32* %t316
  ; r299 := (bv_add r297 r289)
  %t317 = add i32 %t314, %t304
  ; r300 := (uext r299 64)
  %t318 = zext i32 %t317 to i64
  ; r301 := (sext r295 128)
  %t319 = sext i64 %t312 to i128
  ; r302 := (sext r300 128)
  %t320 = sext i64 %t318 to i128
  ; r303 := (bv_mul r301 r302)
  %t321 = mul i128 %t319, %t320
  ; r304 := (trunc r303 64)
  %t322 = trunc i128 %t321 to i64
  ; r305 := (bv_add r270 r293)
  %t323 = add i64 %t285, %t309
  ; r306 := (bv_add r305 r304)
  %t324 = add i64 %t323, %t322
  ; r307 := (bv_and r290 (0x1f : bv 8))
  %t325 = and i8 %t305, 31
  ; r308 := (eq r307 (0x0 : bv 8))
  %t326 = icmp eq i8 %t325, 0
  ; r309 := (uext r307 32)
  %t327 = zext i8 %t325 to i32
  ; r310 := (bv_shl (0x1 : bv 32) r309)
  %t328 = shl i32 1, %t327
  ; r311 := (mux r308 (0x1 : bv 32) r310)
  %t329 = select i1 %t326, i32 1, i32 %t328
  ; r312 := (bv_xor r282 r311)
  %t330 = xor i32 %t297, %t329
  ; r313 := (uext r312 64)
  %t331 = zext i32 %t330 to i64
  ; r314 := (read (0x635518 : bv 64) (bv 64))
  %t332 = inttoptr i64 6509848 to i64*
  %t333 = load i64, i64* %t332
  ; r315 := (bv_add r295 r306)
  %t334 = add i64 %t312, %t324
  ; r316 := (bv_add r315 (0xffffffffffffffff : bv 64))
  %t335 = add i64 %t334, 18446744073709551615
  ; r317 := (bv_mul (0x4 : bv 64) r269)
  %t336 = mul i64 4, %t284
  ; r318 := (bv_add r270 r317)
  %t337 = add i64 %t285, %t336
  ; r319 := (bv_add r318 (0x10 : bv 64))
  %t338 = add i64 %t337, 16
  ; write r319 r312
  %t339 = inttoptr i64 %t338 to i32*
  store i32 %t330, i32* %t339
  ; r320 := (bv_complement r314)
  %t340 = xor i64 %t333, -1
  ; r321 := (bv_and r306 r320)
  %t341 = and i64 %t324, %t340
  ; r322 := (bv_sub r306 r321)
  %t342 = sub i64 %t324, %t341
  ; r323 := (bv_sub r316 r321)
  %t343 = sub i64 %t335, %t341
  ; r324 := (read r321 (bv 64))
  %t344 = inttoptr i64 %t341 to i64*
  %t345 = load i64, i64* %t344
  ; r325 := (bv_shr r322 (0xc : bv 64))
  %t346 = lshr i64 %t342, 12
  ; r326 := (bv_shr r323 (0xc : bv 64))
  %t347 = lshr i64 %t343, 12
  ; r327 := (eq r325 r326)
  %t348 = icmp eq i64 %t346, %t347
  ; r328 := (bv_ule r326 r325)
  %t349 = icmp ule i64 %t347, %t346
  ; r329 := (not r327)
  %t350 = icmp eq i1 %t348, 0
  ; r330 := (and r328 r329)
  %t351 = and i1 %t349, %t350
  br i1 %t351, label %block_0_407714, label %block_0_4071cb
block_0_4071cb:
  %t352 = phi i64 [ %t346, %block_0_40714a ]
  %t353 = phi i64 [ %t347, %block_0_40714a ]
  %t354 = phi i64 [ %t341, %block_0_40714a ]
  %t355 = phi i64 [ %t345, %block_0_40714a ]
  %t356 = phi i64 [ %t331, %block_0_40714a ]
  %t357 = phi i64 [ %t285, %block_0_40714a ]
  %t358 = phi i64 [ %t324, %block_0_40714a ]
  %t359 = phi i64 [ %t286, %block_0_40714a ]
  %t360 = phi i64 [ %t287, %block_0_40714a ]
  %t361 = phi i64 [ %t288, %block_0_40714a ]
  %t362 = phi i512 [ %t289, %block_0_40714a ]
  %t363 = phi i512 [ %t290, %block_0_40714a ]
  %t364 = phi i512 [ %t291, %block_0_40714a ]
  %t365 = phi i512 [ %t292, %block_0_40714a ]
  %t366 = phi i512 [ %t293, %block_0_40714a ]
  %t367 = phi i512 [ %t294, %block_0_40714a ]
  %t368 = phi i512 [ %t295, %block_0_40714a ]
  %t369 = phi i512 [ %t296, %block_0_40714a ]
  ; r349 := (bv_mul (0x2 : bv 64) r331)
  %t370 = mul i64 2, %t352
  ; r350 := (bv_add r331 r349)
  %t371 = add i64 %t352, %t370
  ; r351 := (bv_mul (0x8 : bv 64) r350)
  %t372 = mul i64 8, %t371
  ; r352 := (bv_add r333 r351)
  %t373 = add i64 %t354, %t372
  ; r353 := (bv_add r352 (0x28 : bv 64))
  %t374 = add i64 %t373, 40
  br label %block_0_4071d4
block_0_4071d4:
  %t375 = phi i64 [ %t352, %block_0_4071cb ], [ %t456, %block_0_4071ea ]
  %t376 = phi i64 [ %t374, %block_0_4071cb ], [ %t459, %block_0_4071ea ]
  %t377 = phi i64 [ %t353, %block_0_4071cb ], [ %t438, %block_0_4071ea ]
  %t378 = phi i64 [ %t354, %block_0_4071cb ], [ %t439, %block_0_4071ea ]
  %t379 = phi i64 [ %t355, %block_0_4071cb ], [ %t440, %block_0_4071ea ]
  %t380 = phi i64 [ %t356, %block_0_4071cb ], [ %t441, %block_0_4071ea ]
  %t381 = phi i64 [ %t357, %block_0_4071cb ], [ %t442, %block_0_4071ea ]
  %t382 = phi i64 [ %t358, %block_0_4071cb ], [ %t443, %block_0_4071ea ]
  %t383 = phi i64 [ %t359, %block_0_4071cb ], [ %t444, %block_0_4071ea ]
  %t384 = phi i64 [ %t360, %block_0_4071cb ], [ %t445, %block_0_4071ea ]
  %t385 = phi i64 [ %t361, %block_0_4071cb ], [ %t446, %block_0_4071ea ]
  %t386 = phi i512 [ %t362, %block_0_4071cb ], [ %t447, %block_0_4071ea ]
  %t387 = phi i512 [ %t363, %block_0_4071cb ], [ %t448, %block_0_4071ea ]
  %t388 = phi i512 [ %t364, %block_0_4071cb ], [ %t449, %block_0_4071ea ]
  %t389 = phi i512 [ %t365, %block_0_4071cb ], [ %t450, %block_0_4071ea ]
  %t390 = phi i512 [ %t366, %block_0_4071cb ], [ %t451, %block_0_4071ea ]
  %t391 = phi i512 [ %t367, %block_0_4071cb ], [ %t452, %block_0_4071ea ]
  %t392 = phi i512 [ %t368, %block_0_4071cb ], [ %t453, %block_0_4071ea ]
  %t393 = phi i512 [ %t369, %block_0_4071cb ], [ %t454, %block_0_4071ea ]
  ; r373 := (bv_add r355 (0x10 : bv 64))
  %t394 = add i64 %t376, 16
  ; r374 := (read r373 (bv 64))
  %t395 = inttoptr i64 %t394 to i64*
  %t396 = load i64, i64* %t395
  ; r375 := (trunc r374 8)
  %t397 = trunc i64 %t396 to i8
  ; r376 := (bv_and r375 (0x8 : bv 8))
  %t398 = and i8 %t397, 8
  ; r377 := (eq r376 (0x0 : bv 8))
  %t399 = icmp eq i8 %t398, 0
  br i1 %t399, label %block_0_4071ea, label %block_0_4071dc
block_0_4071dc:
  %t400 = phi i64 [ %t396, %block_0_4071d4 ]
  %t401 = phi i64 [ %t375, %block_0_4071d4 ]
  %t402 = phi i64 [ %t376, %block_0_4071d4 ]
  %t403 = phi i64 [ %t377, %block_0_4071d4 ]
  %t404 = phi i64 [ %t378, %block_0_4071d4 ]
  %t405 = phi i64 [ %t379, %block_0_4071d4 ]
  %t406 = phi i64 [ %t380, %block_0_4071d4 ]
  %t407 = phi i64 [ %t381, %block_0_4071d4 ]
  %t408 = phi i64 [ %t382, %block_0_4071d4 ]
  %t409 = phi i64 [ %t383, %block_0_4071d4 ]
  %t410 = phi i64 [ %t384, %block_0_4071d4 ]
  %t411 = phi i64 [ %t385, %block_0_4071d4 ]
  %t412 = phi i512 [ %t386, %block_0_4071d4 ]
  %t413 = phi i512 [ %t387, %block_0_4071d4 ]
  %t414 = phi i512 [ %t388, %block_0_4071d4 ]
  %t415 = phi i512 [ %t389, %block_0_4071d4 ]
  %t416 = phi i512 [ %t390, %block_0_4071d4 ]
  %t417 = phi i512 [ %t391, %block_0_4071d4 ]
  %t418 = phi i512 [ %t392, %block_0_4071d4 ]
  %t419 = phi i512 [ %t393, %block_0_4071d4 ]
  ; r398 := (bv_add r382 (0x20 : bv 64))
  %t420 = add i64 %t404, 32
  ; r399 := (read r398 (bv 64))
  %t421 = inttoptr i64 %t420 to i64*
  %t422 = load i64, i64* %t421
  ; r400 := (read r398 (bv 64))
  %t423 = inttoptr i64 %t420 to i64*
  %t424 = load i64, i64* %t423
  ; r401 := (bv_add r399 (0xffffffffffffffff : bv 64))
  %t425 = add i64 %t422, 18446744073709551615
  ; write r398 r401
  %t426 = inttoptr i64 %t420 to i64*
  store i64 %t425, i64* %t426
  ; r402 := (bv_xor r378 (0x8 : bv 64))
  %t427 = xor i64 %t400, 8
  ; r403 := (bv_add r383 (0x60 : bv 64))
  %t428 = add i64 %t405, 96
  ; r404 := (read r403 (bv 64))
  %t429 = inttoptr i64 %t428 to i64*
  %t430 = load i64, i64* %t429
  ; r405 := (read r403 (bv 64))
  %t431 = inttoptr i64 %t428 to i64*
  %t432 = load i64, i64* %t431
  ; r406 := (bv_add r404 (0xffffffffffffffff : bv 64))
  %t433 = add i64 %t430, 18446744073709551615
  ; write r403 r406
  %t434 = inttoptr i64 %t428 to i64*
  store i64 %t433, i64* %t434
  br label %block_0_4071ea
block_0_4071ea:
  %t435 = phi i64 [ %t396, %block_0_4071d4 ], [ %t427, %block_0_4071dc ]
  %t436 = phi i64 [ %t375, %block_0_4071d4 ], [ %t401, %block_0_4071dc ]
  %t437 = phi i64 [ %t376, %block_0_4071d4 ], [ %t402, %block_0_4071dc ]
  %t438 = phi i64 [ %t377, %block_0_4071d4 ], [ %t403, %block_0_4071dc ]
  %t439 = phi i64 [ %t378, %block_0_4071d4 ], [ %t404, %block_0_4071dc ]
  %t440 = phi i64 [ %t379, %block_0_4071d4 ], [ %t405, %block_0_4071dc ]
  %t441 = phi i64 [ %t380, %block_0_4071d4 ], [ %t406, %block_0_4071dc ]
  %t442 = phi i64 [ %t381, %block_0_4071d4 ], [ %t407, %block_0_4071dc ]
  %t443 = phi i64 [ %t382, %block_0_4071d4 ], [ %t408, %block_0_4071dc ]
  %t444 = phi i64 [ %t383, %block_0_4071d4 ], [ %t409, %block_0_4071dc ]
  %t445 = phi i64 [ %t384, %block_0_4071d4 ], [ %t410, %block_0_4071dc ]
  %t446 = phi i64 [ %t385, %block_0_4071d4 ], [ %t411, %block_0_4071dc ]
  %t447 = phi i512 [ %t386, %block_0_4071d4 ], [ %t412, %block_0_4071dc ]
  %t448 = phi i512 [ %t387, %block_0_4071d4 ], [ %t413, %block_0_4071dc ]
  %t449 = phi i512 [ %t388, %block_0_4071d4 ], [ %t414, %block_0_4071dc ]
  %t450 = phi i512 [ %t389, %block_0_4071d4 ], [ %t415, %block_0_4071dc ]
  %t451 = phi i512 [ %t390, %block_0_4071d4 ], [ %t416, %block_0_4071dc ]
  %t452 = phi i512 [ %t391, %block_0_4071d4 ], [ %t417, %block_0_4071dc ]
  %t453 = phi i512 [ %t392, %block_0_4071d4 ], [ %t418, %block_0_4071dc ]
  %t454 = phi i512 [ %t393, %block_0_4071d4 ], [ %t419, %block_0_4071dc ]
  ; r427 := (bv_add r407 (0x10 : bv 64))
  %t455 = add i64 %t435, 16
  ; r428 := (bv_add r408 (0x1 : bv 64))
  %t456 = add i64 %t436, 1
  ; r429 := (bv_add r409 (0x10 : bv 64))
  %t457 = add i64 %t437, 16
  ; write r429 r427
  %t458 = inttoptr i64 %t457 to i64*
  store i64 %t455, i64* %t458
  ; r430 := (bv_add r409 (0x18 : bv 64))
  %t459 = add i64 %t437, 24
  ; r431 := (bv_ult r410 r428)
  %t460 = icmp ult i64 %t438, %t456
  br i1 %t460, label %block_0_4071ff, label %block_0_4071d4
block_0_4071ff:
  %t461 = phi i64 [ %t456, %block_0_4071ea ]
  %t462 = phi i64 [ %t459, %block_0_4071ea ]
  %t463 = phi i64 [ %t438, %block_0_4071ea ]
  %t464 = phi i64 [ %t440, %block_0_4071ea ]
  %t465 = phi i64 [ %t441, %block_0_4071ea ]
  %t466 = phi i64 [ %t442, %block_0_4071ea ]
  %t467 = phi i64 [ %t443, %block_0_4071ea ]
  %t468 = phi i64 [ %t444, %block_0_4071ea ]
  %t469 = phi i64 [ %t445, %block_0_4071ea ]
  %t470 = phi i64 [ %t446, %block_0_4071ea ]
  %t471 = phi i512 [ %t447, %block_0_4071ea ]
  %t472 = phi i512 [ %t448, %block_0_4071ea ]
  %t473 = phi i512 [ %t449, %block_0_4071ea ]
  %t474 = phi i512 [ %t450, %block_0_4071ea ]
  %t475 = phi i512 [ %t451, %block_0_4071ea ]
  %t476 = phi i512 [ %t452, %block_0_4071ea ]
  %t477 = phi i512 [ %t453, %block_0_4071ea ]
  %t478 = phi i512 [ %t454, %block_0_4071ea ]
  br label %block_0_407714
block_0_407204:
  %t479 = phi i64 [ %arg3, %block_0_407060 ]
  %t480 = phi i64 [ %arg2, %block_0_407060 ]
  %t481 = phi i64 [ %arg0, %block_0_407060 ]
  %t482 = phi i64 [ %arg1, %block_0_407060 ]
  %t483 = phi i64 [ %arg4, %block_0_407060 ]
  %t484 = phi i64 [ %arg5, %block_0_407060 ]
  %t485 = phi i512 [ %t5, %block_0_407060 ]
  %t486 = phi i512 [ %t6, %block_0_407060 ]
  %t487 = phi i512 [ %t7, %block_0_407060 ]
  %t488 = phi i512 [ %t8, %block_0_407060 ]
  %t489 = phi i512 [ %t9, %block_0_407060 ]
  %t490 = phi i512 [ %t10, %block_0_407060 ]
  %t491 = phi i512 [ %t11, %block_0_407060 ]
  %t492 = phi i512 [ %t12, %block_0_407060 ]
  ; r464 := (read (0x6356e8 : bv 64) (bv 32))
  %t493 = inttoptr i64 6510312 to i32*
  %t494 = load i32, i32* %t493
  ; r465 := (trunc r453 8)
  %t495 = trunc i64 %t482 to i8
  ; r466 := (uext r465 64)
  %t496 = zext i8 %t495 to i64
  ; r467 := (eq r464 (0x0 : bv 32))
  %t497 = icmp eq i32 %t494, 0
  br i1 %t497, label %block_0_407216, label %block_0_40741a
block_0_407216:
  %t498 = phi i64 [ %t479, %block_0_407204 ], [ %t1074, %block_0_40741a ]
  %t499 = phi i64 [ %t480, %block_0_407204 ], [ %t1075, %block_0_40741a ]
  %t500 = phi i64 [ %t481, %block_0_407204 ], [ %t1076, %block_0_40741a ]
  %t501 = phi i64 [ %t482, %block_0_407204 ], [ %t1077, %block_0_40741a ]
  %t502 = phi i64 [ %t483, %block_0_407204 ], [ %t1078, %block_0_40741a ]
  %t503 = phi i64 [ %t484, %block_0_407204 ], [ %t1079, %block_0_40741a ]
  %t504 = phi i64 [ %t496, %block_0_407204 ], [ %t1080, %block_0_40741a ]
  %t505 = phi i512 [ %t485, %block_0_407204 ], [ %t1081, %block_0_40741a ]
  %t506 = phi i512 [ %t486, %block_0_407204 ], [ %t1082, %block_0_40741a ]
  %t507 = phi i512 [ %t487, %block_0_407204 ], [ %t1083, %block_0_40741a ]
  %t508 = phi i512 [ %t488, %block_0_407204 ], [ %t1084, %block_0_40741a ]
  %t509 = phi i512 [ %t489, %block_0_407204 ], [ %t1085, %block_0_40741a ]
  %t510 = phi i512 [ %t490, %block_0_407204 ], [ %t1086, %block_0_40741a ]
  %t511 = phi i512 [ %t491, %block_0_407204 ], [ %t1087, %block_0_40741a ]
  %t512 = phi i512 [ %t492, %block_0_407204 ], [ %t1088, %block_0_40741a ]
  ; r483 := (read (0x6356a0 : bv 64) (bv 64))
  %t513 = inttoptr i64 6510240 to i64*
  %t514 = load i64, i64* %t513
  ; r484 := (read r483 (bv 64))
  %t515 = inttoptr i64 %t514 to i64*
  %t516 = load i64, i64* %t515
  br label %block_0_407220
block_0_407220:
  %t517 = phi i64 [ %t498, %block_0_407216 ], [ %t1138, %block_0_40742c ], [ %t3234, %block_0_407972 ]
  %t518 = phi i64 [ %t499, %block_0_407216 ], [ %t1140, %block_0_40742c ], [ %t3235, %block_0_407972 ]
  %t519 = phi i64 [ %t500, %block_0_407216 ], [ %t1123, %block_0_40742c ], [ %t3236, %block_0_407972 ]
  %t520 = phi i64 [ %t516, %block_0_407216 ], [ %t1146, %block_0_40742c ], [ %t3237, %block_0_407972 ]
  %t521 = phi i64 [ %t501, %block_0_407216 ], [ %t1124, %block_0_40742c ], [ %t3238, %block_0_407972 ]
  %t522 = phi i64 [ %t502, %block_0_407216 ], [ %t1125, %block_0_40742c ], [ %t3239, %block_0_407972 ]
  %t523 = phi i64 [ %t503, %block_0_407216 ], [ %t1126, %block_0_40742c ], [ %t3240, %block_0_407972 ]
  %t524 = phi i64 [ %t504, %block_0_407216 ], [ %t1127, %block_0_40742c ], [ %t3241, %block_0_407972 ]
  %t525 = phi i512 [ %t505, %block_0_407216 ], [ %t1128, %block_0_40742c ], [ %t3242, %block_0_407972 ]
  %t526 = phi i512 [ %t506, %block_0_407216 ], [ %t1129, %block_0_40742c ], [ %t3243, %block_0_407972 ]
  %t527 = phi i512 [ %t507, %block_0_407216 ], [ %t1130, %block_0_40742c ], [ %t3244, %block_0_407972 ]
  %t528 = phi i512 [ %t508, %block_0_407216 ], [ %t1131, %block_0_40742c ], [ %t3245, %block_0_407972 ]
  %t529 = phi i512 [ %t509, %block_0_407216 ], [ %t1132, %block_0_40742c ], [ %t3246, %block_0_407972 ]
  %t530 = phi i512 [ %t510, %block_0_407216 ], [ %t1133, %block_0_40742c ], [ %t3247, %block_0_407972 ]
  %t531 = phi i512 [ %t511, %block_0_407216 ], [ %t1134, %block_0_40742c ], [ %t3248, %block_0_407972 ]
  %t532 = phi i512 [ %t512, %block_0_407216 ], [ %t1135, %block_0_40742c ], [ %t3249, %block_0_407972 ]
  ; r501 := (read (0x6356e8 : bv 64) (bv 32))
  %t533 = inttoptr i64 6510312 to i32*
  %t534 = load i32, i32* %t533
  ; r502 := (trunc r492 32)
  %t535 = trunc i64 %t524 to i32
  ; r503 := (eq r502 (0x0 : bv 32))
  %t536 = icmp eq i32 %t535, 0
  ; r504 := (mux r503 (0x0 : bv 8) (0x1 : bv 8))
  %t537 = select i1 %t536, i8 0, i8 1
  ; r505 := (bv_and r492 (0xffffffffffffff00 : bv 64))
  %t538 = and i64 %t524, 18446744073709551360
  ; r506 := (uext r504 64)
  %t539 = zext i8 %t537 to i64
  ; r507 := (bv_or r505 r506)
  %t540 = or i64 %t538, %t539
  ; r508 := (bv_add r487 (0xfff : bv 64))
  %t541 = add i64 %t519, 4095
  ; r509 := (bv_and r508 (0xfffffffffffff000 : bv 64))
  %t542 = and i64 %t541, 18446744073709547520
  ; r510 := (eq r501 (0x0 : bv 32))
  %t543 = icmp eq i32 %t534, 0
  br i1 %t543, label %block_0_407243, label %block_0_4075cd
block_0_407243:
  %t544 = phi i64 [ %t517, %block_0_407220 ], [ %t1234, %block_0_40747d ], [ %t1678, %block_0_4075d5 ], [ %t1808, %block_0_407623 ], [ %t1877, %block_0_40763d ]
  %t545 = phi i64 [ %t542, %block_0_407220 ], [ %t1256, %block_0_40747d ], [ %t1680, %block_0_4075d5 ], [ %t1810, %block_0_407623 ], [ %t1878, %block_0_40763d ]
  %t546 = phi i64 [ %t520, %block_0_407220 ], [ %t1236, %block_0_40747d ], [ %t1681, %block_0_4075d5 ], [ %t1811, %block_0_407623 ], [ %t1879, %block_0_40763d ]
  %t547 = phi i64 [ %t521, %block_0_407220 ], [ %t1237, %block_0_40747d ], [ %t1682, %block_0_4075d5 ], [ %t1812, %block_0_407623 ], [ %t1880, %block_0_40763d ]
  %t548 = phi i64 [ %t522, %block_0_407220 ], [ %t1238, %block_0_40747d ], [ %t1683, %block_0_4075d5 ], [ %t1813, %block_0_407623 ], [ %t1881, %block_0_40763d ]
  %t549 = phi i64 [ %t523, %block_0_407220 ], [ %t1239, %block_0_40747d ], [ %t1684, %block_0_4075d5 ], [ %t1814, %block_0_407623 ], [ %t1882, %block_0_40763d ]
  %t550 = phi i64 [ %t540, %block_0_407220 ], [ %t1254, %block_0_40747d ], [ %t1685, %block_0_4075d5 ], [ %t1816, %block_0_407623 ], [ %t1883, %block_0_40763d ]
  %t551 = phi i512 [ %t525, %block_0_407220 ], [ %t1241, %block_0_40747d ], [ %t1686, %block_0_4075d5 ], [ %t1817, %block_0_407623 ], [ %t1884, %block_0_40763d ]
  %t552 = phi i512 [ %t526, %block_0_407220 ], [ %t1242, %block_0_40747d ], [ %t1687, %block_0_4075d5 ], [ %t1818, %block_0_407623 ], [ %t1885, %block_0_40763d ]
  %t553 = phi i512 [ %t527, %block_0_407220 ], [ %t1243, %block_0_40747d ], [ %t1688, %block_0_4075d5 ], [ %t1819, %block_0_407623 ], [ %t1886, %block_0_40763d ]
  %t554 = phi i512 [ %t528, %block_0_407220 ], [ %t1244, %block_0_40747d ], [ %t1689, %block_0_4075d5 ], [ %t1820, %block_0_407623 ], [ %t1887, %block_0_40763d ]
  %t555 = phi i512 [ %t529, %block_0_407220 ], [ %t1245, %block_0_40747d ], [ %t1690, %block_0_4075d5 ], [ %t1821, %block_0_407623 ], [ %t1888, %block_0_40763d ]
  %t556 = phi i512 [ %t530, %block_0_407220 ], [ %t1246, %block_0_40747d ], [ %t1691, %block_0_4075d5 ], [ %t1822, %block_0_407623 ], [ %t1889, %block_0_40763d ]
  %t557 = phi i512 [ %t531, %block_0_407220 ], [ %t1247, %block_0_40747d ], [ %t1692, %block_0_4075d5 ], [ %t1823, %block_0_407623 ], [ %t1890, %block_0_40763d ]
  %t558 = phi i512 [ %t532, %block_0_407220 ], [ %t1248, %block_0_40747d ], [ %t1693, %block_0_4075d5 ], [ %t1824, %block_0_407623 ], [ %t1891, %block_0_40763d ]
  ; r526 := (trunc r517 8)
  %t559 = trunc i64 %t550 to i8
  ; r527 := (uext r526 64)
  %t560 = zext i8 %t559 to i64
  ; r528 := (bitcast r518 (vec 8 double))
  %t561 = bitcast i512 %t551 to <8 x double>
  ; r529 := (bitcast r519 (vec 8 double))
  %t562 = bitcast i512 %t552 to <8 x double>
  ; r530 := (bitcast r520 (vec 8 double))
  %t563 = bitcast i512 %t553 to <8 x double>
  ; r531 := (bitcast r521 (vec 8 double))
  %t564 = bitcast i512 %t554 to <8 x double>
  ; r532 := (bitcast r522 (vec 8 double))
  %t565 = bitcast i512 %t555 to <8 x double>
  ; r533 := (bitcast r523 (vec 8 double))
  %t566 = bitcast i512 %t556 to <8 x double>
  ; r534 := (bitcast r524 (vec 8 double))
  %t567 = bitcast i512 %t557 to <8 x double>
  ; r535 := (bitcast r525 (vec 8 double))
  %t568 = bitcast i512 %t558 to <8 x double>
  ; r536 := call arena_run_alloc(r513, r512, (0x1 : bv 64), r527, r528, r529, r530, r531, r532, r533, r534, r535)
  %t569 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @arena_run_alloc(i64 %t546, i64 %t545, i64 1, i64 %t560, <8 x double> %t561, <8 x double> %t562, <8 x double> %t563, <8 x double> %t564, <8 x double> %t565, <8 x double> %t566, <8 x double> %t567, <8 x double> %t568)
  ; r537 := (tuple_field r536 0)
  %t570 = extractvalue { i64, i64, <8 x double> } %t569, 0
  ; r538 := (tuple_field r536 1)
  %t571 = extractvalue { i64, i64, <8 x double> } %t569, 1
  ; r539 := (tuple_field r536 2)
  %t572 = extractvalue { i64, i64, <8 x double> } %t569, 2
  ; r540 := (bitcast r539 (bv 512))
  %t573 = bitcast <8 x double> %t572 to i512
  br label %block_0_407257
block_0_407257:
  %t574 = phi i64 [ %t570, %block_0_407243 ]
  %t575 = phi i64 [ %t544, %block_0_407243 ]
  %t576 = phi i64 [ %t571, %block_0_407243 ]
  %t577 = phi i64 [ %t545, %block_0_407243 ]
  %t578 = phi i64 [ %t546, %block_0_407243 ]
  %t579 = phi i64 [ %t547, %block_0_407243 ]
  %t580 = phi i64 [ %t548, %block_0_407243 ]
  %t581 = phi i64 [ %t549, %block_0_407243 ]
  %t582 = phi i64 [ %t550, %block_0_407243 ]
  %t583 = phi i512 [ %t573, %block_0_407243 ]
  %t584 = phi i512 [ %t552, %block_0_407243 ]
  %t585 = phi i512 [ %t553, %block_0_407243 ]
  %t586 = phi i512 [ %t554, %block_0_407243 ]
  %t587 = phi i512 [ %t555, %block_0_407243 ]
  %t588 = phi i512 [ %t556, %block_0_407243 ]
  %t589 = phi i512 [ %t557, %block_0_407243 ]
  %t590 = phi i512 [ %t558, %block_0_407243 ]
  ; r558 := (eq r541 (0x0 : bv 64))
  %t591 = icmp eq i64 %t574, 0
  br i1 %t591, label %block_0_4076c4, label %block_0_407263
block_0_407263:
  %t592 = phi i64 [ %t575, %block_0_407257 ]
  %t593 = phi i64 [ %t576, %block_0_407257 ]
  %t594 = phi i64 [ %t577, %block_0_407257 ]
  %t595 = phi i64 [ %t578, %block_0_407257 ]
  %t596 = phi i64 [ %t579, %block_0_407257 ]
  %t597 = phi i64 [ %t580, %block_0_407257 ]
  %t598 = phi i64 [ %t581, %block_0_407257 ]
  %t599 = phi i64 [ %t574, %block_0_407257 ]
  %t600 = phi i64 [ %t582, %block_0_407257 ]
  %t601 = phi i512 [ %t583, %block_0_407257 ]
  %t602 = phi i512 [ %t584, %block_0_407257 ]
  %t603 = phi i512 [ %t585, %block_0_407257 ]
  %t604 = phi i512 [ %t586, %block_0_407257 ]
  %t605 = phi i512 [ %t587, %block_0_407257 ]
  %t606 = phi i512 [ %t588, %block_0_407257 ]
  %t607 = phi i512 [ %t589, %block_0_407257 ]
  %t608 = phi i512 [ %t590, %block_0_407257 ]
  ; r576 := (read (0x6356e8 : bv 64) (bv 32))
  %t609 = inttoptr i64 6510312 to i32*
  %t610 = load i32, i32* %t609
  ; r577 := (eq r576 (0x0 : bv 32))
  %t611 = icmp eq i32 %t610, 0
  br i1 %t611, label %block_0_407273, label %block_0_4076ad
block_0_407273:
  %t612 = phi i64 [ %t593, %block_0_407263 ], [ %t2090, %block_0_4076b5 ]
  %t613 = phi i64 [ %t594, %block_0_407263 ], [ %t2091, %block_0_4076b5 ]
  %t614 = phi i64 [ %t599, %block_0_407263 ], [ %t2092, %block_0_4076b5 ]
  %t615 = phi i64 [ %t600, %block_0_407263 ], [ %t2093, %block_0_4076b5 ]
  %t616 = phi i512 [ %t601, %block_0_407263 ], [ %t2094, %block_0_4076b5 ]
  ; r583 := (trunc r581 8)
  %t617 = trunc i64 %t615 to i8
  ; r584 := (eq r583 (0x0 : bv 8))
  %t618 = icmp eq i8 %t617, 0
  br i1 %t618, label %block_0_407278, label %block_0_407292
block_0_407278:
  %t619 = phi i64 [ %t612, %block_0_407273 ]
  %t620 = phi i64 [ %t613, %block_0_407273 ]
  %t621 = phi i64 [ %t614, %block_0_407273 ]
  %t622 = phi i512 [ %t616, %block_0_407273 ]
  ; r589 := (read (0x635461 : bv 64) (bv 8))
  %t623 = inttoptr i64 6509665 to i8*
  %t624 = load i8, i8* %t623
  ; r590 := (eq r589 (0x0 : bv 8))
  %t625 = icmp eq i8 %t624, 0
  br i1 %t625, label %block_0_407285, label %block_0_4075b8
block_0_407285:
  %t626 = phi i64 [ %t619, %block_0_407278 ]
  %t627 = phi i64 [ %t620, %block_0_407278 ]
  %t628 = phi i64 [ %t621, %block_0_407278 ]
  %t629 = phi i512 [ %t622, %block_0_407278 ]
  ; r595 := (read (0x635465 : bv 64) (bv 8))
  %t630 = inttoptr i64 6509669 to i8*
  %t631 = load i8, i8* %t630
  ; r596 := (eq r595 (0x0 : bv 8))
  %t632 = icmp eq i8 %t631, 0
  br i1 %t632, label %block_0_407292, label %block_0_407800
block_0_407292:
  %t633 = phi i64 [ %t612, %block_0_407273 ], [ %t626, %block_0_407285 ], [ %t1645, %block_0_4075c8 ], [ %t1990, %block_0_407675 ], [ %t2006, %block_0_40768f ], [ %t2131, %block_0_4076c4 ], [ %t2176, %block_0_4076dc ], [ %t2180, %block_0_4076e1 ], [ %t2225, %block_0_4076f7 ], [ %t2237, %block_0_40770c ], [ %t2814, %block_0_40780d ]
  %t634 = phi i64 [ %t614, %block_0_407273 ], [ %t628, %block_0_407285 ], [ %t1646, %block_0_4075c8 ], [ %t1991, %block_0_407675 ], [ %t2007, %block_0_40768f ], [ %t2136, %block_0_4076c4 ], [ %t2177, %block_0_4076dc ], [ %t2184, %block_0_4076e1 ], [ %t2226, %block_0_4076f7 ], [ %t2238, %block_0_40770c ], [ %t2815, %block_0_40780d ]
  %t635 = phi i512 [ %t616, %block_0_407273 ], [ %t629, %block_0_407285 ], [ %t1647, %block_0_4075c8 ], [ %t1993, %block_0_407675 ], [ %t2008, %block_0_40768f ], [ %t2137, %block_0_4076c4 ], [ %t2178, %block_0_4076dc ], [ %t2186, %block_0_4076e1 ], [ %t2227, %block_0_4076f7 ], [ %t2239, %block_0_40770c ], [ %t2816, %block_0_40780d ]
  ; r600 := (bitcast r599 (vec 8 double))
  %t636 = bitcast i512 %t635 to <8 x double>
  ; r601 := (tuple r598 r597 r600)
  %t637 = insertvalue { i64, i64, <8 x double> } undef, i64 %t634, 0
  %t638 = insertvalue { i64, i64, <8 x double> } %t637, i64 %t633, 1
  %t639 = insertvalue { i64, i64, <8 x double> } %t638, <8 x double> %t636, 2
  ret { i64, i64, <8 x double> } %t639
block_0_4072a4:
  %t640 = phi i64 [ %t21, %block_0_407081 ]
  %t641 = phi i64 [ %t22, %block_0_407081 ]
  %t642 = phi i64 [ %t23, %block_0_407081 ]
  %t643 = phi i64 [ %t24, %block_0_407081 ]
  %t644 = phi i64 [ %t25, %block_0_407081 ]
  %t645 = phi i64 [ %t27, %block_0_407081 ]
  %t646 = phi i512 [ %t28, %block_0_407081 ]
  %t647 = phi i512 [ %t29, %block_0_407081 ]
  %t648 = phi i512 [ %t30, %block_0_407081 ]
  %t649 = phi i512 [ %t31, %block_0_407081 ]
  %t650 = phi i512 [ %t32, %block_0_407081 ]
  %t651 = phi i512 [ %t33, %block_0_407081 ]
  %t652 = phi i512 [ %t34, %block_0_407081 ]
  %t653 = phi i512 [ %t35, %block_0_407081 ]
  ; r616 := (read (0x6356e8 : bv 64) (bv 32))
  %t654 = inttoptr i64 6510312 to i32*
  %t655 = load i32, i32* %t654
  ; r617 := (uext r616 64)
  %t656 = zext i32 %t655 to i64
  ; r618 := (eq r616 (0x0 : bv 32))
  %t657 = icmp eq i32 %t655, 0
  br i1 %t657, label %block_0_4072b4, label %block_0_407523
block_0_4072b4:
  %t658 = phi i64 [ %t642, %block_0_4072a4 ], [ %t1447, %block_0_407523 ]
  %t659 = phi i64 [ %t644, %block_0_4072a4 ], [ %t1449, %block_0_407523 ]
  %t660 = phi i64 [ %t656, %block_0_4072a4 ], [ %t1450, %block_0_407523 ]
  %t661 = phi i64 [ %t645, %block_0_4072a4 ], [ %t1451, %block_0_407523 ]
  %t662 = phi i512 [ %t646, %block_0_4072a4 ], [ %t1452, %block_0_407523 ]
  %t663 = phi i512 [ %t647, %block_0_4072a4 ], [ %t1453, %block_0_407523 ]
  %t664 = phi i512 [ %t648, %block_0_4072a4 ], [ %t1454, %block_0_407523 ]
  %t665 = phi i512 [ %t649, %block_0_4072a4 ], [ %t1455, %block_0_407523 ]
  %t666 = phi i512 [ %t650, %block_0_4072a4 ], [ %t1456, %block_0_407523 ]
  %t667 = phi i512 [ %t651, %block_0_4072a4 ], [ %t1457, %block_0_407523 ]
  %t668 = phi i512 [ %t652, %block_0_4072a4 ], [ %t1458, %block_0_407523 ]
  %t669 = phi i512 [ %t653, %block_0_4072a4 ], [ %t1459, %block_0_407523 ]
  ; r631 := (read (0x6356a0 : bv 64) (bv 64))
  %t670 = inttoptr i64 6510240 to i64*
  %t671 = load i64, i64* %t670
  ; r632 := (read r631 (bv 64))
  %t672 = inttoptr i64 %t671 to i64*
  %t673 = load i64, i64* %t672
  br label %block_0_4072be
block_0_4072be:
  %t674 = phi i64 [ %t658, %block_0_4072b4 ], [ %t1494, %block_0_407535 ], [ %t3564, %block_0_407a02 ]
  %t675 = phi i64 [ %t659, %block_0_4072b4 ], [ %t1496, %block_0_407535 ], [ %t3565, %block_0_407a02 ]
  %t676 = phi i64 [ %t660, %block_0_4072b4 ], [ %t1497, %block_0_407535 ], [ %t3566, %block_0_407a02 ]
  %t677 = phi i64 [ %t673, %block_0_4072b4 ], [ %t1517, %block_0_407535 ], [ %t3567, %block_0_407a02 ]
  %t678 = phi i64 [ %t661, %block_0_4072b4 ], [ %t1498, %block_0_407535 ], [ %t3568, %block_0_407a02 ]
  %t679 = phi i512 [ %t662, %block_0_4072b4 ], [ %t1499, %block_0_407535 ], [ %t3569, %block_0_407a02 ]
  %t680 = phi i512 [ %t663, %block_0_4072b4 ], [ %t1500, %block_0_407535 ], [ %t3570, %block_0_407a02 ]
  %t681 = phi i512 [ %t664, %block_0_4072b4 ], [ %t1501, %block_0_407535 ], [ %t3571, %block_0_407a02 ]
  %t682 = phi i512 [ %t665, %block_0_4072b4 ], [ %t1502, %block_0_407535 ], [ %t3572, %block_0_407a02 ]
  %t683 = phi i512 [ %t666, %block_0_4072b4 ], [ %t1503, %block_0_407535 ], [ %t3573, %block_0_407a02 ]
  %t684 = phi i512 [ %t667, %block_0_4072b4 ], [ %t1504, %block_0_407535 ], [ %t3574, %block_0_407a02 ]
  %t685 = phi i512 [ %t668, %block_0_4072b4 ], [ %t1505, %block_0_407535 ], [ %t3575, %block_0_407a02 ]
  %t686 = phi i512 [ %t669, %block_0_4072b4 ], [ %t1506, %block_0_407535 ], [ %t3576, %block_0_407a02 ]
  ; r646 := (read (0x635500 : bv 64) (bv 64))
  %t687 = inttoptr i64 6509824 to i64*
  %t688 = load i64, i64* %t687
  ; r647 := (read (0x6354f8 : bv 64) (bv 8))
  %t689 = inttoptr i64 6509816 to i8*
  %t690 = load i8, i8* %t689
  ; r648 := (uext r647 64)
  %t691 = zext i8 %t690 to i64
  ; r649 := (read (0x6354c0 : bv 64) (bv 32))
  %t692 = inttoptr i64 6509760 to i32*
  %t693 = load i32, i32* %t692
  ; r650 := (uext r649 64)
  %t694 = zext i32 %t693 to i64
  ; r651 := (read (0x6356e8 : bv 64) (bv 32))
  %t695 = inttoptr i64 6510312 to i32*
  %t696 = load i32, i32* %t695
  ; r652 := (uext r651 64)
  %t697 = zext i32 %t696 to i64
  ; r653 := (bv_add r633 r646)
  %t698 = add i64 %t674, %t688
  ; r654 := (bv_complement r646)
  %t699 = xor i64 %t688, -1
  ; r655 := (bv_and r653 r654)
  %t700 = and i64 %t698, %t699
  ; r656 := (bv_add r655 (0xfffffffffffff000 : bv 64))
  %t701 = add i64 %t700, 18446744073709547520
  ; r657 := (bv_and r647 (0x3f : bv 8))
  %t702 = and i8 %t690, 63
  ; r658 := (eq r657 (0x0 : bv 8))
  %t703 = icmp eq i8 %t702, 0
  ; r659 := (uext r657 64)
  %t704 = zext i8 %t702 to i64
  ; r660 := (bv_shr r656 r659)
  %t705 = lshr i64 %t701, %t704
  ; r661 := (mux r658 r656 r660)
  %t706 = select i1 %t703, i64 %t701, i64 %t705
  ; r662 := (eq r651 (0x0 : bv 32))
  %t707 = icmp eq i32 %t696, 0
  ; r663 := (bv_add r661 r650)
  %t708 = add i64 %t706, %t694
  br i1 %t707, label %block_0_4072f8, label %block_0_40771e
block_0_4072f8:
  %t709 = phi i64 [ %t691, %block_0_4072be ], [ %t1622, %block_0_407587 ], [ %t2313, %block_0_407726 ], [ %t2449, %block_0_407772 ], [ %t2521, %block_0_40778a ]
  %t710 = phi i64 [ %t708, %block_0_4072be ], [ %t1635, %block_0_407587 ], [ %t2315, %block_0_407726 ], [ %t2451, %block_0_407772 ], [ %t2522, %block_0_40778a ]
  %t711 = phi i64 [ %t697, %block_0_4072be ], [ %t1605, %block_0_407587 ], [ %t2316, %block_0_407726 ], [ %t2453, %block_0_407772 ], [ %t2523, %block_0_40778a ]
  %t712 = phi i64 [ %t675, %block_0_4072be ], [ %t1606, %block_0_407587 ], [ %t2317, %block_0_407726 ], [ %t2454, %block_0_407772 ], [ %t2524, %block_0_40778a ]
  %t713 = phi i64 [ %t676, %block_0_4072be ], [ %t1607, %block_0_407587 ], [ %t2318, %block_0_407726 ], [ %t2455, %block_0_407772 ], [ %t2525, %block_0_40778a ]
  %t714 = phi i64 [ %t677, %block_0_4072be ], [ %t1608, %block_0_407587 ], [ %t2319, %block_0_407726 ], [ %t2456, %block_0_407772 ], [ %t2526, %block_0_40778a ]
  %t715 = phi i64 [ %t700, %block_0_4072be ], [ %t1628, %block_0_407587 ], [ %t2320, %block_0_407726 ], [ %t2457, %block_0_407772 ], [ %t2527, %block_0_40778a ]
  %t716 = phi i64 [ %t678, %block_0_4072be ], [ %t1609, %block_0_407587 ], [ %t2321, %block_0_407726 ], [ %t2458, %block_0_407772 ], [ %t2528, %block_0_40778a ]
  %t717 = phi i512 [ %t679, %block_0_4072be ], [ %t1610, %block_0_407587 ], [ %t2322, %block_0_407726 ], [ %t2459, %block_0_407772 ], [ %t2529, %block_0_40778a ]
  %t718 = phi i512 [ %t680, %block_0_4072be ], [ %t1611, %block_0_407587 ], [ %t2323, %block_0_407726 ], [ %t2460, %block_0_407772 ], [ %t2530, %block_0_40778a ]
  %t719 = phi i512 [ %t681, %block_0_4072be ], [ %t1612, %block_0_407587 ], [ %t2324, %block_0_407726 ], [ %t2461, %block_0_407772 ], [ %t2531, %block_0_40778a ]
  %t720 = phi i512 [ %t682, %block_0_4072be ], [ %t1613, %block_0_407587 ], [ %t2325, %block_0_407726 ], [ %t2462, %block_0_407772 ], [ %t2532, %block_0_40778a ]
  %t721 = phi i512 [ %t683, %block_0_4072be ], [ %t1614, %block_0_407587 ], [ %t2326, %block_0_407726 ], [ %t2463, %block_0_407772 ], [ %t2533, %block_0_40778a ]
  %t722 = phi i512 [ %t684, %block_0_4072be ], [ %t1615, %block_0_407587 ], [ %t2327, %block_0_407726 ], [ %t2464, %block_0_407772 ], [ %t2534, %block_0_40778a ]
  %t723 = phi i512 [ %t685, %block_0_4072be ], [ %t1616, %block_0_407587 ], [ %t2328, %block_0_407726 ], [ %t2465, %block_0_407772 ], [ %t2535, %block_0_40778a ]
  %t724 = phi i512 [ %t686, %block_0_4072be ], [ %t1617, %block_0_407587 ], [ %t2329, %block_0_407726 ], [ %t2466, %block_0_407772 ], [ %t2536, %block_0_40778a ]
  ; r680 := (bv_mul (0x8 : bv 64) r665)
  %t725 = mul i64 8, %t710
  ; r681 := (bv_add r665 r680)
  %t726 = add i64 %t710, %t725
  ; r682 := (bv_mul (0x8 : bv 64) r681)
  %t727 = mul i64 8, %t726
  ; r683 := (bv_add r669 r682)
  %t728 = add i64 %t714, %t727
  ; r684 := (bv_add r683 (0x88 : bv 64))
  %t729 = add i64 %t728, 136
  ; r685 := (read r684 (bv 64))
  %t730 = inttoptr i64 %t729 to i64*
  %t731 = load i64, i64* %t730
  ; r686 := (eq r685 (0x0 : bv 64))
  %t732 = icmp eq i64 %t731, 0
  br i1 %t732, label %block_0_407694, label %block_0_407311
block_0_407311:
  %t733 = phi i64 [ %t728, %block_0_4072f8 ]
  %t734 = phi i64 [ %t710, %block_0_4072f8 ]
  %t735 = phi i64 [ %t711, %block_0_4072f8 ]
  %t736 = phi i64 [ %t712, %block_0_4072f8 ]
  %t737 = phi i64 [ %t713, %block_0_4072f8 ]
  %t738 = phi i64 [ %t731, %block_0_4072f8 ]
  %t739 = phi i64 [ %t714, %block_0_4072f8 ]
  %t740 = phi i64 [ %t715, %block_0_4072f8 ]
  %t741 = phi i64 [ %t716, %block_0_4072f8 ]
  %t742 = phi i512 [ %t717, %block_0_4072f8 ]
  %t743 = phi i512 [ %t718, %block_0_4072f8 ]
  %t744 = phi i512 [ %t719, %block_0_4072f8 ]
  %t745 = phi i512 [ %t720, %block_0_4072f8 ]
  %t746 = phi i512 [ %t721, %block_0_4072f8 ]
  %t747 = phi i512 [ %t722, %block_0_4072f8 ]
  %t748 = phi i512 [ %t723, %block_0_4072f8 ]
  %t749 = phi i512 [ %t724, %block_0_4072f8 ]
  ; r704 := (bv_add r692 (0xc : bv 64))
  %t750 = add i64 %t738, 12
  ; r705 := (read r704 (bv 32))
  %t751 = inttoptr i64 %t750 to i32*
  %t752 = load i32, i32* %t751
  ; r706 := (uext r705 64)
  %t753 = zext i32 %t752 to i64
  ; r707 := (eq r705 (0x0 : bv 32))
  %t754 = icmp eq i32 %t752, 0
  br i1 %t754, label %block_0_407694, label %block_0_40731d
block_0_40731d:
  %t755 = phi i64 [ %t753, %block_0_407311 ]
  %t756 = phi i64 [ %t733, %block_0_407311 ]
  %t757 = phi i64 [ %t734, %block_0_407311 ]
  %t758 = phi i64 [ %t735, %block_0_407311 ]
  %t759 = phi i64 [ %t738, %block_0_407311 ]
  %t760 = phi i64 [ %t739, %block_0_407311 ]
  %t761 = phi i64 [ %t740, %block_0_407311 ]
  %t762 = phi i64 [ %t741, %block_0_407311 ]
  %t763 = phi i512 [ %t742, %block_0_407311 ]
  %t764 = phi i512 [ %t743, %block_0_407311 ]
  %t765 = phi i512 [ %t744, %block_0_407311 ]
  %t766 = phi i512 [ %t745, %block_0_407311 ]
  %t767 = phi i512 [ %t746, %block_0_407311 ]
  %t768 = phi i512 [ %t747, %block_0_407311 ]
  %t769 = phi i512 [ %t748, %block_0_407311 ]
  %t770 = phi i512 [ %t749, %block_0_407311 ]
  ; r724 := (bv_add r712 (0x8 : bv 64))
  %t771 = add i64 %t759, 8
  ; r725 := (read r724 (bv 32))
  %t772 = inttoptr i64 %t771 to i32*
  %t773 = load i32, i32* %t772
  ; r726 := (uext r725 64)
  %t774 = zext i32 %t773 to i64
  ; r727 := (bv_mul (0x4 : bv 64) r726)
  %t775 = mul i64 4, %t774
  ; r728 := (bv_add r712 r727)
  %t776 = add i64 %t759, %t775
  ; r729 := (bv_add r728 (0x10 : bv 64))
  %t777 = add i64 %t776, 16
  ; r730 := (read r729 (bv 32))
  %t778 = inttoptr i64 %t777 to i32*
  %t779 = load i32, i32* %t778
  ; r731 := (uext r730 64)
  %t780 = zext i32 %t779 to i64
  ; r732 := (eq r730 (0x0 : bv 32))
  %t781 = icmp eq i32 %t779, 0
  br i1 %t781, label %block_0_407332, label %block_0_407812
block_0_407332:
  %t782 = phi i64 [ %t774, %block_0_40731d ]
  %t783 = phi i64 [ %t755, %block_0_40731d ]
  %t784 = phi i64 [ %t756, %block_0_40731d ]
  %t785 = phi i64 [ %t757, %block_0_40731d ]
  %t786 = phi i64 [ %t758, %block_0_40731d ]
  %t787 = phi i64 [ %t774, %block_0_40731d ]
  %t788 = phi i64 [ %t759, %block_0_40731d ]
  %t789 = phi i64 [ %t760, %block_0_40731d ]
  %t790 = phi i64 [ %t761, %block_0_40731d ]
  %t791 = phi i64 [ %t762, %block_0_40731d ]
  %t792 = phi i512 [ %t763, %block_0_40731d ]
  %t793 = phi i512 [ %t764, %block_0_40731d ]
  %t794 = phi i512 [ %t765, %block_0_40731d ]
  %t795 = phi i512 [ %t766, %block_0_40731d ]
  %t796 = phi i512 [ %t767, %block_0_40731d ]
  %t797 = phi i512 [ %t768, %block_0_40731d ]
  %t798 = phi i512 [ %t769, %block_0_40731d ]
  %t799 = phi i512 [ %t770, %block_0_40731d ]
  ; r751 := (bv_add r733 (0x1 : bv 64))
  %t800 = add i64 %t782, 1
  ; r752 := (trunc r751 32)
  %t801 = trunc i64 %t800 to i32
  ; r753 := (uext r752 64)
  %t802 = zext i32 %t801 to i64
  ; r754 := (bv_add r735 (0xc4 : bv 64))
  %t803 = add i64 %t784, 196
  ; r755 := (read r754 (bv 32))
  %t804 = inttoptr i64 %t803 to i32*
  %t805 = load i32, i32* %t804
  ; r756 := (uext r755 64)
  %t806 = zext i32 %t805 to i64
  ; r757 := (bv_ult r752 r755)
  %t807 = icmp ult i32 %t801, %t805
  br i1 %t807, label %block_0_407353, label %block_0_407341
block_0_407341:
  %t808 = phi i64 [ %t783, %block_0_407332 ]
  %t809 = phi i64 [ %t784, %block_0_407332 ]
  %t810 = phi i64 [ %t786, %block_0_407332 ]
  %t811 = phi i64 [ %t802, %block_0_407332 ]
  %t812 = phi i64 [ %t787, %block_0_407332 ]
  %t813 = phi i64 [ %t788, %block_0_407332 ]
  %t814 = phi i64 [ %t789, %block_0_407332 ]
  %t815 = phi i64 [ %t790, %block_0_407332 ]
  %t816 = phi i64 [ %t791, %block_0_407332 ]
  %t817 = phi i512 [ %t792, %block_0_407332 ]
  %t818 = phi i512 [ %t793, %block_0_407332 ]
  %t819 = phi i512 [ %t794, %block_0_407332 ]
  %t820 = phi i512 [ %t795, %block_0_407332 ]
  %t821 = phi i512 [ %t796, %block_0_407332 ]
  %t822 = phi i512 [ %t797, %block_0_407332 ]
  %t823 = phi i512 [ %t798, %block_0_407332 ]
  %t824 = phi i512 [ %t799, %block_0_407332 ]
  br label %block_0_407711
block_0_407346:
  %t825 = phi i64 [ %t849, %block_0_407353 ]
  %t826 = phi i64 [ %t850, %block_0_407353 ]
  %t827 = phi i64 [ %t851, %block_0_407353 ]
  %t828 = phi i64 [ %t852, %block_0_407353 ]
  %t829 = phi i64 [ %t853, %block_0_407353 ]
  %t830 = phi i64 [ %t854, %block_0_407353 ]
  %t831 = phi i64 [ %t874, %block_0_407353 ]
  %t832 = phi i64 [ %t855, %block_0_407353 ]
  %t833 = phi i64 [ %t856, %block_0_407353 ]
  %t834 = phi i64 [ %t857, %block_0_407353 ]
  %t835 = phi i64 [ %t858, %block_0_407353 ]
  %t836 = phi i512 [ %t859, %block_0_407353 ]
  %t837 = phi i512 [ %t860, %block_0_407353 ]
  %t838 = phi i512 [ %t861, %block_0_407353 ]
  %t839 = phi i512 [ %t862, %block_0_407353 ]
  %t840 = phi i512 [ %t863, %block_0_407353 ]
  %t841 = phi i512 [ %t864, %block_0_407353 ]
  %t842 = phi i512 [ %t865, %block_0_407353 ]
  %t843 = phi i512 [ %t866, %block_0_407353 ]
  ; r794 := (trunc r780 32)
  %t844 = trunc i64 %t830 to i32
  ; r795 := (bv_add r794 (0x1 : bv 32))
  %t845 = add i32 %t844, 1
  ; r796 := (uext r795 64)
  %t846 = zext i32 %t845 to i64
  ; r797 := (trunc r775 32)
  %t847 = trunc i64 %t825 to i32
  ; r798 := (bv_ult r795 r797)
  %t848 = icmp ult i32 %t845, %t847
  br i1 %t848, label %block_0_407353, label %block_0_407711
block_0_407353:
  %t849 = phi i64 [ %t806, %block_0_407332 ], [ %t825, %block_0_407346 ]
  %t850 = phi i64 [ %t783, %block_0_407332 ], [ %t826, %block_0_407346 ]
  %t851 = phi i64 [ %t784, %block_0_407332 ], [ %t827, %block_0_407346 ]
  %t852 = phi i64 [ %t785, %block_0_407332 ], [ %t828, %block_0_407346 ]
  %t853 = phi i64 [ %t786, %block_0_407332 ], [ %t829, %block_0_407346 ]
  %t854 = phi i64 [ %t802, %block_0_407332 ], [ %t846, %block_0_407346 ]
  %t855 = phi i64 [ %t788, %block_0_407332 ], [ %t832, %block_0_407346 ]
  %t856 = phi i64 [ %t789, %block_0_407332 ], [ %t833, %block_0_407346 ]
  %t857 = phi i64 [ %t790, %block_0_407332 ], [ %t834, %block_0_407346 ]
  %t858 = phi i64 [ %t791, %block_0_407332 ], [ %t835, %block_0_407346 ]
  %t859 = phi i512 [ %t792, %block_0_407332 ], [ %t836, %block_0_407346 ]
  %t860 = phi i512 [ %t793, %block_0_407332 ], [ %t837, %block_0_407346 ]
  %t861 = phi i512 [ %t794, %block_0_407332 ], [ %t838, %block_0_407346 ]
  %t862 = phi i512 [ %t795, %block_0_407332 ], [ %t839, %block_0_407346 ]
  %t863 = phi i512 [ %t796, %block_0_407332 ], [ %t840, %block_0_407346 ]
  %t864 = phi i512 [ %t797, %block_0_407332 ], [ %t841, %block_0_407346 ]
  %t865 = phi i512 [ %t798, %block_0_407332 ], [ %t842, %block_0_407346 ]
  %t866 = phi i512 [ %t799, %block_0_407332 ], [ %t843, %block_0_407346 ]
  ; r817 := (trunc r804 32)
  %t867 = trunc i64 %t854 to i32
  ; r818 := (uext r817 64)
  %t868 = zext i32 %t867 to i64
  ; r819 := (bv_mul (0x4 : bv 64) r818)
  %t869 = mul i64 4, %t868
  ; r820 := (bv_add r805 r819)
  %t870 = add i64 %t855, %t869
  ; r821 := (bv_add r820 (0x10 : bv 64))
  %t871 = add i64 %t870, 16
  ; r822 := (read r821 (bv 32))
  %t872 = inttoptr i64 %t871 to i32*
  %t873 = load i32, i32* %t872
  ; r823 := (uext r822 64)
  %t874 = zext i32 %t873 to i64
  ; r824 := (eq r822 (0x0 : bv 32))
  %t875 = icmp eq i32 %t873, 0
  br i1 %t875, label %block_0_407346, label %block_0_407360
block_0_407360:
  %t876 = phi i64 [ %t852, %block_0_407353 ]
  %t877 = phi i64 [ %t854, %block_0_407353 ]
  %t878 = phi i64 [ %t874, %block_0_407353 ]
  %t879 = phi i64 [ %t868, %block_0_407353 ]
  %t880 = phi i64 [ %t855, %block_0_407353 ]
  %t881 = phi i64 [ %t856, %block_0_407353 ]
  %t882 = phi i64 [ %t857, %block_0_407353 ]
  %t883 = phi i64 [ %t858, %block_0_407353 ]
  %t884 = phi i512 [ %t859, %block_0_407353 ]
  %t885 = phi i512 [ %t860, %block_0_407353 ]
  %t886 = phi i512 [ %t861, %block_0_407353 ]
  %t887 = phi i512 [ %t862, %block_0_407353 ]
  %t888 = phi i512 [ %t863, %block_0_407353 ]
  %t889 = phi i512 [ %t864, %block_0_407353 ]
  %t890 = phi i512 [ %t865, %block_0_407353 ]
  %t891 = phi i512 [ %t866, %block_0_407353 ]
  ; r841 := (trunc r827 32)
  %t892 = trunc i64 %t878 to i32
  ; r842 := (eq r841 (0x0 : bv 32))
  %t893 = icmp eq i32 %t892, 0
  ; r843 := (bsf r841)
  %t894 = call i32 (i32, i1) @llvm.cttz.i32(i32 %t892, i1 1)
  ; r844 := (bv_mul (0x8 : bv 64) r825)
  %t895 = mul i64 8, %t876
  ; r845 := (bv_add r825 r844)
  %t896 = add i64 %t876, %t895
  ; r846 := (bv_mul (0x8 : bv 64) r845)
  %t897 = mul i64 8, %t896
  ; r847 := (bv_add r830 r846)
  %t898 = add i64 %t881, %t897
  ; r848 := (mux r842 (0xffffffff : bv 32) r843)
  %t899 = select i1 %t893, i32 4294967295, i32 %t894
  ; r849 := (trunc r848 8)
  %t900 = trunc i32 %t899 to i8
  ; r850 := (bv_add r847 (0xc8 : bv 64))
  %t901 = add i64 %t898, 200
  ; r851 := (read r850 (bv 32))
  %t902 = inttoptr i64 %t901 to i32*
  %t903 = load i32, i32* %t902
  ; r852 := (uext r851 64)
  %t904 = zext i32 %t903 to i64
  ; r853 := (bv_add r847 (0xb0 : bv 64))
  %t905 = add i64 %t898, 176
  ; r854 := (read r853 (bv 64))
  %t906 = inttoptr i64 %t905 to i64*
  %t907 = load i64, i64* %t906
  ; r855 := (trunc r826 32)
  %t908 = trunc i64 %t877 to i32
  ; r856 := (bv_shl r855 (0x5 : bv 32))
  %t909 = shl i32 %t908, 5
  ; r857 := (bv_add r829 (0x8 : bv 64))
  %t910 = add i64 %t880, 8
  ; write r857 r855
  %t911 = inttoptr i64 %t910 to i32*
  store i32 %t908, i32* %t911
  ; r858 := (bv_add r856 r848)
  %t912 = add i32 %t909, %t899
  ; r859 := (uext r858 64)
  %t913 = zext i32 %t912 to i64
  ; r860 := (sext r854 128)
  %t914 = sext i64 %t907 to i128
  ; r861 := (sext r859 128)
  %t915 = sext i64 %t913 to i128
  ; r862 := (bv_mul r860 r861)
  %t916 = mul i128 %t914, %t915
  ; r863 := (trunc r862 64)
  %t917 = trunc i128 %t916 to i64
  ; r864 := (bv_add r829 r852)
  %t918 = add i64 %t880, %t904
  ; r865 := (bv_add r864 r863)
  %t919 = add i64 %t918, %t917
  ; r866 := (bv_and r849 (0x1f : bv 8))
  %t920 = and i8 %t900, 31
  ; r867 := (eq r866 (0x0 : bv 8))
  %t921 = icmp eq i8 %t920, 0
  ; r868 := (uext r866 32)
  %t922 = zext i8 %t920 to i32
  ; r869 := (bv_shl (0x1 : bv 32) r868)
  %t923 = shl i32 1, %t922
  ; r870 := (mux r867 (0x1 : bv 32) r869)
  %t924 = select i1 %t921, i32 1, i32 %t923
  ; r871 := (bv_xor r841 r870)
  %t925 = xor i32 %t892, %t924
  ; r872 := (uext r871 64)
  %t926 = zext i32 %t925 to i64
  ; r873 := (read (0x635518 : bv 64) (bv 64))
  %t927 = inttoptr i64 6509848 to i64*
  %t928 = load i64, i64* %t927
  ; r874 := (bv_add r854 r865)
  %t929 = add i64 %t907, %t919
  ; r875 := (bv_add r874 (0xffffffffffffffff : bv 64))
  %t930 = add i64 %t929, 18446744073709551615
  ; r876 := (bv_mul (0x4 : bv 64) r828)
  %t931 = mul i64 4, %t879
  ; r877 := (bv_add r829 r876)
  %t932 = add i64 %t880, %t931
  ; r878 := (bv_add r877 (0x10 : bv 64))
  %t933 = add i64 %t932, 16
  ; write r878 r871
  %t934 = inttoptr i64 %t933 to i32*
  store i32 %t925, i32* %t934
  ; r879 := (bv_complement r873)
  %t935 = xor i64 %t928, -1
  ; r880 := (bv_and r865 r879)
  %t936 = and i64 %t919, %t935
  ; r881 := (bv_sub r865 r880)
  %t937 = sub i64 %t919, %t936
  ; r882 := (bv_sub r875 r880)
  %t938 = sub i64 %t930, %t936
  ; r883 := (read r880 (bv 64))
  %t939 = inttoptr i64 %t936 to i64*
  %t940 = load i64, i64* %t939
  ; r884 := (bv_shr r881 (0xc : bv 64))
  %t941 = lshr i64 %t937, 12
  ; r885 := (bv_shr r882 (0xc : bv 64))
  %t942 = lshr i64 %t938, 12
  ; r886 := (eq r884 r885)
  %t943 = icmp eq i64 %t941, %t942
  ; r887 := (bv_ule r885 r884)
  %t944 = icmp ule i64 %t942, %t941
  ; r888 := (not r886)
  %t945 = icmp eq i1 %t943, 0
  ; r889 := (and r887 r888)
  %t946 = and i1 %t944, %t945
  br i1 %t946, label %block_0_407714, label %block_0_4073e1
block_0_4073e1:
  %t947 = phi i64 [ %t941, %block_0_407360 ]
  %t948 = phi i64 [ %t942, %block_0_407360 ]
  %t949 = phi i64 [ %t936, %block_0_407360 ]
  %t950 = phi i64 [ %t940, %block_0_407360 ]
  %t951 = phi i64 [ %t926, %block_0_407360 ]
  %t952 = phi i64 [ %t880, %block_0_407360 ]
  %t953 = phi i64 [ %t919, %block_0_407360 ]
  %t954 = phi i64 [ %t881, %block_0_407360 ]
  %t955 = phi i64 [ %t882, %block_0_407360 ]
  %t956 = phi i64 [ %t883, %block_0_407360 ]
  %t957 = phi i512 [ %t884, %block_0_407360 ]
  %t958 = phi i512 [ %t885, %block_0_407360 ]
  %t959 = phi i512 [ %t886, %block_0_407360 ]
  %t960 = phi i512 [ %t887, %block_0_407360 ]
  %t961 = phi i512 [ %t888, %block_0_407360 ]
  %t962 = phi i512 [ %t889, %block_0_407360 ]
  %t963 = phi i512 [ %t890, %block_0_407360 ]
  %t964 = phi i512 [ %t891, %block_0_407360 ]
  ; r908 := (bv_mul (0x2 : bv 64) r890)
  %t965 = mul i64 2, %t947
  ; r909 := (bv_add r890 r908)
  %t966 = add i64 %t947, %t965
  ; r910 := (bv_mul (0x8 : bv 64) r909)
  %t967 = mul i64 8, %t966
  ; r911 := (bv_add r892 r910)
  %t968 = add i64 %t949, %t967
  ; r912 := (bv_add r911 (0x28 : bv 64))
  %t969 = add i64 %t968, 40
  br label %block_0_4073ea
block_0_4073ea:
  %t970 = phi i64 [ %t947, %block_0_4073e1 ], [ %t1051, %block_0_407400 ]
  %t971 = phi i64 [ %t969, %block_0_4073e1 ], [ %t1054, %block_0_407400 ]
  %t972 = phi i64 [ %t948, %block_0_4073e1 ], [ %t1033, %block_0_407400 ]
  %t973 = phi i64 [ %t949, %block_0_4073e1 ], [ %t1034, %block_0_407400 ]
  %t974 = phi i64 [ %t950, %block_0_4073e1 ], [ %t1035, %block_0_407400 ]
  %t975 = phi i64 [ %t951, %block_0_4073e1 ], [ %t1036, %block_0_407400 ]
  %t976 = phi i64 [ %t952, %block_0_4073e1 ], [ %t1037, %block_0_407400 ]
  %t977 = phi i64 [ %t953, %block_0_4073e1 ], [ %t1038, %block_0_407400 ]
  %t978 = phi i64 [ %t954, %block_0_4073e1 ], [ %t1039, %block_0_407400 ]
  %t979 = phi i64 [ %t955, %block_0_4073e1 ], [ %t1040, %block_0_407400 ]
  %t980 = phi i64 [ %t956, %block_0_4073e1 ], [ %t1041, %block_0_407400 ]
  %t981 = phi i512 [ %t957, %block_0_4073e1 ], [ %t1042, %block_0_407400 ]
  %t982 = phi i512 [ %t958, %block_0_4073e1 ], [ %t1043, %block_0_407400 ]
  %t983 = phi i512 [ %t959, %block_0_4073e1 ], [ %t1044, %block_0_407400 ]
  %t984 = phi i512 [ %t960, %block_0_4073e1 ], [ %t1045, %block_0_407400 ]
  %t985 = phi i512 [ %t961, %block_0_4073e1 ], [ %t1046, %block_0_407400 ]
  %t986 = phi i512 [ %t962, %block_0_4073e1 ], [ %t1047, %block_0_407400 ]
  %t987 = phi i512 [ %t963, %block_0_4073e1 ], [ %t1048, %block_0_407400 ]
  %t988 = phi i512 [ %t964, %block_0_4073e1 ], [ %t1049, %block_0_407400 ]
  ; r932 := (bv_add r914 (0x10 : bv 64))
  %t989 = add i64 %t971, 16
  ; r933 := (read r932 (bv 64))
  %t990 = inttoptr i64 %t989 to i64*
  %t991 = load i64, i64* %t990
  ; r934 := (trunc r933 8)
  %t992 = trunc i64 %t991 to i8
  ; r935 := (bv_and r934 (0x8 : bv 8))
  %t993 = and i8 %t992, 8
  ; r936 := (eq r935 (0x0 : bv 8))
  %t994 = icmp eq i8 %t993, 0
  br i1 %t994, label %block_0_407400, label %block_0_4073f2
block_0_4073f2:
  %t995 = phi i64 [ %t991, %block_0_4073ea ]
  %t996 = phi i64 [ %t970, %block_0_4073ea ]
  %t997 = phi i64 [ %t971, %block_0_4073ea ]
  %t998 = phi i64 [ %t972, %block_0_4073ea ]
  %t999 = phi i64 [ %t973, %block_0_4073ea ]
  %t1000 = phi i64 [ %t974, %block_0_4073ea ]
  %t1001 = phi i64 [ %t975, %block_0_4073ea ]
  %t1002 = phi i64 [ %t976, %block_0_4073ea ]
  %t1003 = phi i64 [ %t977, %block_0_4073ea ]
  %t1004 = phi i64 [ %t978, %block_0_4073ea ]
  %t1005 = phi i64 [ %t979, %block_0_4073ea ]
  %t1006 = phi i64 [ %t980, %block_0_4073ea ]
  %t1007 = phi i512 [ %t981, %block_0_4073ea ]
  %t1008 = phi i512 [ %t982, %block_0_4073ea ]
  %t1009 = phi i512 [ %t983, %block_0_4073ea ]
  %t1010 = phi i512 [ %t984, %block_0_4073ea ]
  %t1011 = phi i512 [ %t985, %block_0_4073ea ]
  %t1012 = phi i512 [ %t986, %block_0_4073ea ]
  %t1013 = phi i512 [ %t987, %block_0_4073ea ]
  %t1014 = phi i512 [ %t988, %block_0_4073ea ]
  ; r957 := (bv_add r941 (0x20 : bv 64))
  %t1015 = add i64 %t999, 32
  ; r958 := (read r957 (bv 64))
  %t1016 = inttoptr i64 %t1015 to i64*
  %t1017 = load i64, i64* %t1016
  ; r959 := (read r957 (bv 64))
  %t1018 = inttoptr i64 %t1015 to i64*
  %t1019 = load i64, i64* %t1018
  ; r960 := (bv_add r958 (0xffffffffffffffff : bv 64))
  %t1020 = add i64 %t1017, 18446744073709551615
  ; write r957 r960
  %t1021 = inttoptr i64 %t1015 to i64*
  store i64 %t1020, i64* %t1021
  ; r961 := (bv_xor r937 (0x8 : bv 64))
  %t1022 = xor i64 %t995, 8
  ; r962 := (bv_add r942 (0x60 : bv 64))
  %t1023 = add i64 %t1000, 96
  ; r963 := (read r962 (bv 64))
  %t1024 = inttoptr i64 %t1023 to i64*
  %t1025 = load i64, i64* %t1024
  ; r964 := (read r962 (bv 64))
  %t1026 = inttoptr i64 %t1023 to i64*
  %t1027 = load i64, i64* %t1026
  ; r965 := (bv_add r963 (0xffffffffffffffff : bv 64))
  %t1028 = add i64 %t1025, 18446744073709551615
  ; write r962 r965
  %t1029 = inttoptr i64 %t1023 to i64*
  store i64 %t1028, i64* %t1029
  br label %block_0_407400
block_0_407400:
  %t1030 = phi i64 [ %t991, %block_0_4073ea ], [ %t1022, %block_0_4073f2 ]
  %t1031 = phi i64 [ %t970, %block_0_4073ea ], [ %t996, %block_0_4073f2 ]
  %t1032 = phi i64 [ %t971, %block_0_4073ea ], [ %t997, %block_0_4073f2 ]
  %t1033 = phi i64 [ %t972, %block_0_4073ea ], [ %t998, %block_0_4073f2 ]
  %t1034 = phi i64 [ %t973, %block_0_4073ea ], [ %t999, %block_0_4073f2 ]
  %t1035 = phi i64 [ %t974, %block_0_4073ea ], [ %t1000, %block_0_4073f2 ]
  %t1036 = phi i64 [ %t975, %block_0_4073ea ], [ %t1001, %block_0_4073f2 ]
  %t1037 = phi i64 [ %t976, %block_0_4073ea ], [ %t1002, %block_0_4073f2 ]
  %t1038 = phi i64 [ %t977, %block_0_4073ea ], [ %t1003, %block_0_4073f2 ]
  %t1039 = phi i64 [ %t978, %block_0_4073ea ], [ %t1004, %block_0_4073f2 ]
  %t1040 = phi i64 [ %t979, %block_0_4073ea ], [ %t1005, %block_0_4073f2 ]
  %t1041 = phi i64 [ %t980, %block_0_4073ea ], [ %t1006, %block_0_4073f2 ]
  %t1042 = phi i512 [ %t981, %block_0_4073ea ], [ %t1007, %block_0_4073f2 ]
  %t1043 = phi i512 [ %t982, %block_0_4073ea ], [ %t1008, %block_0_4073f2 ]
  %t1044 = phi i512 [ %t983, %block_0_4073ea ], [ %t1009, %block_0_4073f2 ]
  %t1045 = phi i512 [ %t984, %block_0_4073ea ], [ %t1010, %block_0_4073f2 ]
  %t1046 = phi i512 [ %t985, %block_0_4073ea ], [ %t1011, %block_0_4073f2 ]
  %t1047 = phi i512 [ %t986, %block_0_4073ea ], [ %t1012, %block_0_4073f2 ]
  %t1048 = phi i512 [ %t987, %block_0_4073ea ], [ %t1013, %block_0_4073f2 ]
  %t1049 = phi i512 [ %t988, %block_0_4073ea ], [ %t1014, %block_0_4073f2 ]
  ; r986 := (bv_add r966 (0x10 : bv 64))
  %t1050 = add i64 %t1030, 16
  ; r987 := (bv_add r967 (0x1 : bv 64))
  %t1051 = add i64 %t1031, 1
  ; r988 := (bv_add r968 (0x10 : bv 64))
  %t1052 = add i64 %t1032, 16
  ; write r988 r986
  %t1053 = inttoptr i64 %t1052 to i64*
  store i64 %t1050, i64* %t1053
  ; r989 := (bv_add r968 (0x18 : bv 64))
  %t1054 = add i64 %t1032, 24
  ; r990 := (bv_ult r969 r987)
  %t1055 = icmp ult i64 %t1033, %t1051
  br i1 %t1055, label %block_0_407415, label %block_0_4073ea
block_0_407415:
  %t1056 = phi i64 [ %t1051, %block_0_407400 ]
  %t1057 = phi i64 [ %t1054, %block_0_407400 ]
  %t1058 = phi i64 [ %t1033, %block_0_407400 ]
  %t1059 = phi i64 [ %t1035, %block_0_407400 ]
  %t1060 = phi i64 [ %t1036, %block_0_407400 ]
  %t1061 = phi i64 [ %t1037, %block_0_407400 ]
  %t1062 = phi i64 [ %t1038, %block_0_407400 ]
  %t1063 = phi i64 [ %t1039, %block_0_407400 ]
  %t1064 = phi i64 [ %t1040, %block_0_407400 ]
  %t1065 = phi i64 [ %t1041, %block_0_407400 ]
  %t1066 = phi i512 [ %t1042, %block_0_407400 ]
  %t1067 = phi i512 [ %t1043, %block_0_407400 ]
  %t1068 = phi i512 [ %t1044, %block_0_407400 ]
  %t1069 = phi i512 [ %t1045, %block_0_407400 ]
  %t1070 = phi i512 [ %t1046, %block_0_407400 ]
  %t1071 = phi i512 [ %t1047, %block_0_407400 ]
  %t1072 = phi i512 [ %t1048, %block_0_407400 ]
  %t1073 = phi i512 [ %t1049, %block_0_407400 ]
  br label %block_0_407714
block_0_40741a:
  %t1074 = phi i64 [ %t479, %block_0_407204 ]
  %t1075 = phi i64 [ %t480, %block_0_407204 ]
  %t1076 = phi i64 [ %t481, %block_0_407204 ]
  %t1077 = phi i64 [ %t482, %block_0_407204 ]
  %t1078 = phi i64 [ %t483, %block_0_407204 ]
  %t1079 = phi i64 [ %t484, %block_0_407204 ]
  %t1080 = phi i64 [ %t496, %block_0_407204 ]
  %t1081 = phi i512 [ %t485, %block_0_407204 ]
  %t1082 = phi i512 [ %t486, %block_0_407204 ]
  %t1083 = phi i512 [ %t487, %block_0_407204 ]
  %t1084 = phi i512 [ %t488, %block_0_407204 ]
  %t1085 = phi i512 [ %t489, %block_0_407204 ]
  %t1086 = phi i512 [ %t490, %block_0_407204 ]
  %t1087 = phi i512 [ %t491, %block_0_407204 ]
  %t1088 = phi i512 [ %t492, %block_0_407204 ]
  ; r1024 := (read (0x6356a8 : bv 64) (bv 32))
  %t1089 = inttoptr i64 6510248 to i32*
  %t1090 = load i32, i32* %t1089
  ; r1025 := (bv_ult r1024 (0x1 : bv 32))
  %t1091 = icmp ult i32 %t1090, 1
  ; r1026 := (eq r1024 (0x1 : bv 32))
  %t1092 = icmp eq i32 %t1090, 1
  ; r1027 := (or r1025 r1026)
  %t1093 = or i1 %t1091, %t1092
  br i1 %t1093, label %block_0_407216, label %block_0_407427
block_0_407427:
  %t1094 = phi i64 [ %t1074, %block_0_40741a ]
  %t1095 = phi i64 [ %t1075, %block_0_40741a ]
  %t1096 = phi i64 [ %t1076, %block_0_40741a ]
  %t1097 = phi i64 [ %t1077, %block_0_40741a ]
  %t1098 = phi i64 [ %t1078, %block_0_40741a ]
  %t1099 = phi i64 [ %t1079, %block_0_40741a ]
  %t1100 = phi i64 [ %t1080, %block_0_40741a ]
  %t1101 = phi i512 [ %t1081, %block_0_40741a ]
  %t1102 = phi i512 [ %t1082, %block_0_40741a ]
  %t1103 = phi i512 [ %t1083, %block_0_40741a ]
  %t1104 = phi i512 [ %t1084, %block_0_40741a ]
  %t1105 = phi i512 [ %t1085, %block_0_40741a ]
  %t1106 = phi i512 [ %t1086, %block_0_40741a ]
  %t1107 = phi i512 [ %t1087, %block_0_40741a ]
  %t1108 = phi i512 [ %t1088, %block_0_40741a ]
  ; r1043 := (bitcast r1035 (vec 8 double))
  %t1109 = bitcast i512 %t1101 to <8 x double>
  ; r1044 := (bitcast r1036 (vec 8 double))
  %t1110 = bitcast i512 %t1102 to <8 x double>
  ; r1045 := (bitcast r1037 (vec 8 double))
  %t1111 = bitcast i512 %t1103 to <8 x double>
  ; r1046 := (bitcast r1038 (vec 8 double))
  %t1112 = bitcast i512 %t1104 to <8 x double>
  ; r1047 := (bitcast r1039 (vec 8 double))
  %t1113 = bitcast i512 %t1105 to <8 x double>
  ; r1048 := (bitcast r1040 (vec 8 double))
  %t1114 = bitcast i512 %t1106 to <8 x double>
  ; r1049 := (bitcast r1041 (vec 8 double))
  %t1115 = bitcast i512 %t1107 to <8 x double>
  ; r1050 := (bitcast r1042 (vec 8 double))
  %t1116 = bitcast i512 %t1108 to <8 x double>
  ; r1051 := call pthread_self_int(r1030, r1031, r1029, r1028, r1032, r1033, r1043, r1044, r1045, r1046, r1047, r1048, r1049, r1050)
  %t1117 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_self_int(i64 %t1096, i64 %t1097, i64 %t1095, i64 %t1094, i64 %t1098, i64 %t1099, <8 x double> %t1109, <8 x double> %t1110, <8 x double> %t1111, <8 x double> %t1112, <8 x double> %t1113, <8 x double> %t1114, <8 x double> %t1115, <8 x double> %t1116)
  ; r1052 := (tuple_field r1051 0)
  %t1118 = extractvalue { i64, i64, <8 x double> } %t1117, 0
  ; r1053 := (tuple_field r1051 1)
  %t1119 = extractvalue { i64, i64, <8 x double> } %t1117, 1
  ; r1054 := (tuple_field r1051 2)
  %t1120 = extractvalue { i64, i64, <8 x double> } %t1117, 2
  ; r1055 := (bitcast r1054 (bv 512))
  %t1121 = bitcast <8 x double> %t1120 to i512
  br label %block_0_40742c
block_0_40742c:
  %t1122 = phi i64 [ %t1118, %block_0_407427 ]
  %t1123 = phi i64 [ %t1096, %block_0_407427 ]
  %t1124 = phi i64 [ %t1097, %block_0_407427 ]
  %t1125 = phi i64 [ %t1098, %block_0_407427 ]
  %t1126 = phi i64 [ %t1099, %block_0_407427 ]
  %t1127 = phi i64 [ %t1100, %block_0_407427 ]
  %t1128 = phi i512 [ %t1121, %block_0_407427 ]
  %t1129 = phi i512 [ %t1102, %block_0_407427 ]
  %t1130 = phi i512 [ %t1103, %block_0_407427 ]
  %t1131 = phi i512 [ %t1104, %block_0_407427 ]
  %t1132 = phi i512 [ %t1105, %block_0_407427 ]
  %t1133 = phi i512 [ %t1106, %block_0_407427 ]
  %t1134 = phi i512 [ %t1107, %block_0_407427 ]
  %t1135 = phi i512 [ %t1108, %block_0_407427 ]
  ; r1070 := (read (0x6356a8 : bv 64) (bv 32))
  %t1136 = inttoptr i64 6510248 to i32*
  %t1137 = load i32, i32* %t1136
  ; r1071 := (uext r1070 64)
  %t1138 = zext i32 %t1137 to i64
  ; r1072 := (div 64 (0x0 : bv 64) r1056 r1071)
  %t1139 = call { i64, i64 } (i64, i64, i64) asm sideeffect "div $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i64 0, i64 %t1122, i64 %t1138)
  ; r1073 := (tuple_field r1072 1)
  %t1140 = extractvalue { i64, i64 } %t1139, 1
  ; r1074 := (read (0x6356a0 : bv 64) (bv 64))
  %t1141 = inttoptr i64 6510240 to i64*
  %t1142 = load i64, i64* %t1141
  ; r1075 := (bv_mul (0x8 : bv 64) r1073)
  %t1143 = mul i64 8, %t1140
  ; r1076 := (bv_add r1074 r1075)
  %t1144 = add i64 %t1142, %t1143
  ; r1077 := (read r1076 (bv 64))
  %t1145 = inttoptr i64 %t1144 to i64*
  %t1146 = load i64, i64* %t1145
  ; r1078 := (eq r1077 (0x0 : bv 64))
  %t1147 = icmp eq i64 %t1146, 0
  br i1 %t1147, label %block_0_407456, label %block_0_407220
block_0_407456:
  %t1148 = phi i64 [ %t1138, %block_0_40742c ]
  %t1149 = phi i64 [ %t1140, %block_0_40742c ]
  %t1150 = phi i64 [ %t1123, %block_0_40742c ]
  %t1151 = phi i64 [ %t1146, %block_0_40742c ]
  %t1152 = phi i64 [ %t1124, %block_0_40742c ]
  %t1153 = phi i64 [ %t1125, %block_0_40742c ]
  %t1154 = phi i64 [ %t1126, %block_0_40742c ]
  %t1155 = phi i64 [ %t1127, %block_0_40742c ]
  %t1156 = phi i64 [ %t1143, %block_0_40742c ]
  %t1157 = phi i512 [ %t1128, %block_0_40742c ]
  %t1158 = phi i512 [ %t1129, %block_0_40742c ]
  %t1159 = phi i512 [ %t1130, %block_0_40742c ]
  %t1160 = phi i512 [ %t1131, %block_0_40742c ]
  %t1161 = phi i512 [ %t1132, %block_0_40742c ]
  %t1162 = phi i512 [ %t1133, %block_0_40742c ]
  %t1163 = phi i512 [ %t1134, %block_0_40742c ]
  %t1164 = phi i512 [ %t1135, %block_0_40742c ]
  ; r1096 := (read (0x6356e8 : bv 64) (bv 32))
  %t1165 = inttoptr i64 6510312 to i32*
  %t1166 = load i32, i32* %t1165
  ; r1097 := (eq r1096 (0x0 : bv 32))
  %t1167 = icmp eq i32 %t1166, 0
  br i1 %t1167, label %block_0_407464, label %block_0_407977
block_0_407464:
  %t1168 = phi i64 [ %t1148, %block_0_407456 ], [ %t3519, %block_0_4079f3 ]
  %t1169 = phi i64 [ %t1149, %block_0_407456 ], [ %t3520, %block_0_4079f3 ]
  %t1170 = phi i64 [ %t1150, %block_0_407456 ], [ %t3521, %block_0_4079f3 ]
  %t1171 = phi i64 [ %t1152, %block_0_407456 ], [ %t3522, %block_0_4079f3 ]
  %t1172 = phi i64 [ %t1153, %block_0_407456 ], [ %t3523, %block_0_4079f3 ]
  %t1173 = phi i64 [ %t1154, %block_0_407456 ], [ %t3524, %block_0_4079f3 ]
  %t1174 = phi i64 [ %t1149, %block_0_407456 ], [ %t3525, %block_0_4079f3 ]
  %t1175 = phi i64 [ %t1155, %block_0_407456 ], [ %t3526, %block_0_4079f3 ]
  %t1176 = phi i512 [ %t1157, %block_0_407456 ], [ %t3527, %block_0_4079f3 ]
  %t1177 = phi i512 [ %t1158, %block_0_407456 ], [ %t3528, %block_0_4079f3 ]
  %t1178 = phi i512 [ %t1159, %block_0_407456 ], [ %t3529, %block_0_4079f3 ]
  %t1179 = phi i512 [ %t1160, %block_0_407456 ], [ %t3530, %block_0_4079f3 ]
  %t1180 = phi i512 [ %t1161, %block_0_407456 ], [ %t3531, %block_0_4079f3 ]
  %t1181 = phi i512 [ %t1162, %block_0_407456 ], [ %t3532, %block_0_4079f3 ]
  %t1182 = phi i512 [ %t1163, %block_0_407456 ], [ %t3533, %block_0_4079f3 ]
  %t1183 = phi i512 [ %t1164, %block_0_407456 ], [ %t3534, %block_0_4079f3 ]
  ; r1114 := (trunc r1104 32)
  %t1184 = trunc i64 %t1174 to i32
  ; r1115 := (uext r1114 64)
  %t1185 = zext i32 %t1184 to i64
  ; r1116 := (bitcast r1106 (vec 8 double))
  %t1186 = bitcast i512 %t1176 to <8 x double>
  ; r1117 := (bitcast r1107 (vec 8 double))
  %t1187 = bitcast i512 %t1177 to <8 x double>
  ; r1118 := (bitcast r1108 (vec 8 double))
  %t1188 = bitcast i512 %t1178 to <8 x double>
  ; r1119 := (bitcast r1109 (vec 8 double))
  %t1189 = bitcast i512 %t1179 to <8 x double>
  ; r1120 := (bitcast r1110 (vec 8 double))
  %t1190 = bitcast i512 %t1180 to <8 x double>
  ; r1121 := (bitcast r1111 (vec 8 double))
  %t1191 = bitcast i512 %t1181 to <8 x double>
  ; r1122 := (bitcast r1112 (vec 8 double))
  %t1192 = bitcast i512 %t1182 to <8 x double>
  ; r1123 := (bitcast r1113 (vec 8 double))
  %t1193 = bitcast i512 %t1183 to <8 x double>
  ; r1124 := call arenas_extend(r1115, r1101, r1099, r1116, r1117, r1118, r1119, r1120, r1121, r1122, r1123)
  %t1194 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @arenas_extend(i64 %t1185, i64 %t1171, i64 %t1169, <8 x double> %t1186, <8 x double> %t1187, <8 x double> %t1188, <8 x double> %t1189, <8 x double> %t1190, <8 x double> %t1191, <8 x double> %t1192, <8 x double> %t1193)
  ; r1125 := (tuple_field r1124 0)
  %t1195 = extractvalue { i64, i64, <8 x double> } %t1194, 0
  ; r1126 := (tuple_field r1124 1)
  %t1196 = extractvalue { i64, i64, <8 x double> } %t1194, 1
  ; r1127 := (tuple_field r1124 2)
  %t1197 = extractvalue { i64, i64, <8 x double> } %t1194, 2
  ; r1128 := (bitcast r1127 (bv 512))
  %t1198 = bitcast <8 x double> %t1197 to i512
  br label %block_0_40746c
block_0_40746c:
  %t1199 = phi i64 [ %t1195, %block_0_407464 ]
  %t1200 = phi i64 [ %t1168, %block_0_407464 ]
  %t1201 = phi i64 [ %t1196, %block_0_407464 ]
  %t1202 = phi i64 [ %t1170, %block_0_407464 ]
  %t1203 = phi i64 [ %t1171, %block_0_407464 ]
  %t1204 = phi i64 [ %t1172, %block_0_407464 ]
  %t1205 = phi i64 [ %t1173, %block_0_407464 ]
  %t1206 = phi i64 [ %t1175, %block_0_407464 ]
  %t1207 = phi i512 [ %t1198, %block_0_407464 ]
  %t1208 = phi i512 [ %t1177, %block_0_407464 ]
  %t1209 = phi i512 [ %t1178, %block_0_407464 ]
  %t1210 = phi i512 [ %t1179, %block_0_407464 ]
  %t1211 = phi i512 [ %t1180, %block_0_407464 ]
  %t1212 = phi i512 [ %t1181, %block_0_407464 ]
  %t1213 = phi i512 [ %t1182, %block_0_407464 ]
  %t1214 = phi i512 [ %t1183, %block_0_407464 ]
  br label %block_0_40746f
block_0_40746f:
  %t1215 = phi i64 [ %t1200, %block_0_40746c ], [ %t3496, %block_0_4079df ]
  %t1216 = phi i64 [ %t1201, %block_0_40746c ], [ %t3497, %block_0_4079df ]
  %t1217 = phi i64 [ %t1202, %block_0_40746c ], [ %t3498, %block_0_4079df ]
  %t1218 = phi i64 [ %t1199, %block_0_40746c ], [ %t3517, %block_0_4079df ]
  %t1219 = phi i64 [ %t1203, %block_0_40746c ], [ %t3499, %block_0_4079df ]
  %t1220 = phi i64 [ %t1204, %block_0_40746c ], [ %t3500, %block_0_4079df ]
  %t1221 = phi i64 [ %t1205, %block_0_40746c ], [ %t3501, %block_0_4079df ]
  %t1222 = phi i64 [ %t1206, %block_0_40746c ], [ %t3503, %block_0_4079df ]
  %t1223 = phi i512 [ %t1207, %block_0_40746c ], [ %t3505, %block_0_4079df ]
  %t1224 = phi i512 [ %t1208, %block_0_40746c ], [ %t3506, %block_0_4079df ]
  %t1225 = phi i512 [ %t1209, %block_0_40746c ], [ %t3507, %block_0_4079df ]
  %t1226 = phi i512 [ %t1210, %block_0_40746c ], [ %t3508, %block_0_4079df ]
  %t1227 = phi i512 [ %t1211, %block_0_40746c ], [ %t3509, %block_0_4079df ]
  %t1228 = phi i512 [ %t1212, %block_0_40746c ], [ %t3510, %block_0_4079df ]
  %t1229 = phi i512 [ %t1213, %block_0_40746c ], [ %t3511, %block_0_4079df ]
  %t1230 = phi i512 [ %t1214, %block_0_40746c ], [ %t3512, %block_0_4079df ]
  ; r1161 := (read (0x6356e8 : bv 64) (bv 32))
  %t1231 = inttoptr i64 6510312 to i32*
  %t1232 = load i32, i32* %t1231
  ; r1162 := (eq r1161 (0x0 : bv 32))
  %t1233 = icmp eq i32 %t1232, 0
  br i1 %t1233, label %block_0_40747d, label %block_0_407968
block_0_40747d:
  %t1234 = phi i64 [ %t1215, %block_0_40746f ]
  %t1235 = phi i64 [ %t1217, %block_0_40746f ]
  %t1236 = phi i64 [ %t1218, %block_0_40746f ]
  %t1237 = phi i64 [ %t1219, %block_0_40746f ]
  %t1238 = phi i64 [ %t1220, %block_0_40746f ]
  %t1239 = phi i64 [ %t1221, %block_0_40746f ]
  %t1240 = phi i64 [ %t1222, %block_0_40746f ]
  %t1241 = phi i512 [ %t1223, %block_0_40746f ]
  %t1242 = phi i512 [ %t1224, %block_0_40746f ]
  %t1243 = phi i512 [ %t1225, %block_0_40746f ]
  %t1244 = phi i512 [ %t1226, %block_0_40746f ]
  %t1245 = phi i512 [ %t1227, %block_0_40746f ]
  %t1246 = phi i512 [ %t1228, %block_0_40746f ]
  %t1247 = phi i512 [ %t1229, %block_0_40746f ]
  %t1248 = phi i512 [ %t1230, %block_0_40746f ]
  ; r1178 := (trunc r1169 32)
  %t1249 = trunc i64 %t1240 to i32
  ; r1179 := (eq r1178 (0x0 : bv 32))
  %t1250 = icmp eq i32 %t1249, 0
  ; r1180 := (mux r1179 (0x0 : bv 8) (0x1 : bv 8))
  %t1251 = select i1 %t1250, i8 0, i8 1
  ; r1181 := (bv_and r1169 (0xffffffffffffff00 : bv 64))
  %t1252 = and i64 %t1240, 18446744073709551360
  ; r1182 := (uext r1180 64)
  %t1253 = zext i8 %t1251 to i64
  ; r1183 := (bv_or r1181 r1182)
  %t1254 = or i64 %t1252, %t1253
  ; r1184 := (bv_add r1164 (0xfff : bv 64))
  %t1255 = add i64 %t1235, 4095
  ; r1185 := (bv_and r1184 (0xfffffffffffff000 : bv 64))
  %t1256 = and i64 %t1255, 18446744073709547520
  br label %block_0_407243
block_0_407497:
  %t1257 = phi i64 [ %t42, %block_0_40708e ]
  %t1258 = phi i64 [ %t43, %block_0_40708e ]
  %t1259 = phi i64 [ %t44, %block_0_40708e ]
  %t1260 = phi i64 [ %t45, %block_0_40708e ]
  %t1261 = phi i64 [ %t46, %block_0_40708e ]
  %t1262 = phi i64 [ %t47, %block_0_40708e ]
  %t1263 = phi i64 [ %t48, %block_0_40708e ]
  %t1264 = phi i512 [ %t49, %block_0_40708e ]
  %t1265 = phi i512 [ %t50, %block_0_40708e ]
  %t1266 = phi i512 [ %t51, %block_0_40708e ]
  %t1267 = phi i512 [ %t52, %block_0_40708e ]
  %t1268 = phi i512 [ %t53, %block_0_40708e ]
  %t1269 = phi i512 [ %t54, %block_0_40708e ]
  %t1270 = phi i512 [ %t55, %block_0_40708e ]
  %t1271 = phi i512 [ %t56, %block_0_40708e ]
  ; r1201 := (read (0x6356a8 : bv 64) (bv 32))
  %t1272 = inttoptr i64 6510248 to i32*
  %t1273 = load i32, i32* %t1272
  ; r1202 := (bv_ult r1201 (0x1 : bv 32))
  %t1274 = icmp ult i32 %t1273, 1
  ; r1203 := (eq r1201 (0x1 : bv 32))
  %t1275 = icmp eq i32 %t1273, 1
  ; r1204 := (or r1202 r1203)
  %t1276 = or i1 %t1274, %t1275
  br i1 %t1276, label %block_0_40709e, label %block_0_4074a4
block_0_4074a4:
  %t1277 = phi i64 [ %t1257, %block_0_407497 ]
  %t1278 = phi i64 [ %t1258, %block_0_407497 ]
  %t1279 = phi i64 [ %t1259, %block_0_407497 ]
  %t1280 = phi i64 [ %t1260, %block_0_407497 ]
  %t1281 = phi i64 [ %t1261, %block_0_407497 ]
  %t1282 = phi i64 [ %t1262, %block_0_407497 ]
  %t1283 = phi i64 [ %t1263, %block_0_407497 ]
  %t1284 = phi i512 [ %t1264, %block_0_407497 ]
  %t1285 = phi i512 [ %t1265, %block_0_407497 ]
  %t1286 = phi i512 [ %t1266, %block_0_407497 ]
  %t1287 = phi i512 [ %t1267, %block_0_407497 ]
  %t1288 = phi i512 [ %t1268, %block_0_407497 ]
  %t1289 = phi i512 [ %t1269, %block_0_407497 ]
  %t1290 = phi i512 [ %t1270, %block_0_407497 ]
  %t1291 = phi i512 [ %t1271, %block_0_407497 ]
  ; r1220 := (bitcast r1212 (vec 8 double))
  %t1292 = bitcast i512 %t1284 to <8 x double>
  ; r1221 := (bitcast r1213 (vec 8 double))
  %t1293 = bitcast i512 %t1285 to <8 x double>
  ; r1222 := (bitcast r1214 (vec 8 double))
  %t1294 = bitcast i512 %t1286 to <8 x double>
  ; r1223 := (bitcast r1215 (vec 8 double))
  %t1295 = bitcast i512 %t1287 to <8 x double>
  ; r1224 := (bitcast r1216 (vec 8 double))
  %t1296 = bitcast i512 %t1288 to <8 x double>
  ; r1225 := (bitcast r1217 (vec 8 double))
  %t1297 = bitcast i512 %t1289 to <8 x double>
  ; r1226 := (bitcast r1218 (vec 8 double))
  %t1298 = bitcast i512 %t1290 to <8 x double>
  ; r1227 := (bitcast r1219 (vec 8 double))
  %t1299 = bitcast i512 %t1291 to <8 x double>
  ; r1228 := call pthread_self_int(r1207, r1208, r1206, r1205, r1209, r1210, r1220, r1221, r1222, r1223, r1224, r1225, r1226, r1227)
  %t1300 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_self_int(i64 %t1279, i64 %t1280, i64 %t1278, i64 %t1277, i64 %t1281, i64 %t1282, <8 x double> %t1292, <8 x double> %t1293, <8 x double> %t1294, <8 x double> %t1295, <8 x double> %t1296, <8 x double> %t1297, <8 x double> %t1298, <8 x double> %t1299)
  ; r1229 := (tuple_field r1228 0)
  %t1301 = extractvalue { i64, i64, <8 x double> } %t1300, 0
  ; r1230 := (tuple_field r1228 1)
  %t1302 = extractvalue { i64, i64, <8 x double> } %t1300, 1
  ; r1231 := (tuple_field r1228 2)
  %t1303 = extractvalue { i64, i64, <8 x double> } %t1300, 2
  ; r1232 := (bitcast r1231 (bv 512))
  %t1304 = bitcast <8 x double> %t1303 to i512
  br label %block_0_4074a9
block_0_4074a9:
  %t1305 = phi i64 [ %t1301, %block_0_4074a4 ]
  %t1306 = phi i64 [ %t1279, %block_0_4074a4 ]
  %t1307 = phi i64 [ %t1280, %block_0_4074a4 ]
  %t1308 = phi i64 [ %t1281, %block_0_4074a4 ]
  %t1309 = phi i64 [ %t1282, %block_0_4074a4 ]
  %t1310 = phi i64 [ %t1283, %block_0_4074a4 ]
  %t1311 = phi i512 [ %t1304, %block_0_4074a4 ]
  %t1312 = phi i512 [ %t1285, %block_0_4074a4 ]
  %t1313 = phi i512 [ %t1286, %block_0_4074a4 ]
  %t1314 = phi i512 [ %t1287, %block_0_4074a4 ]
  %t1315 = phi i512 [ %t1288, %block_0_4074a4 ]
  %t1316 = phi i512 [ %t1289, %block_0_4074a4 ]
  %t1317 = phi i512 [ %t1290, %block_0_4074a4 ]
  %t1318 = phi i512 [ %t1291, %block_0_4074a4 ]
  ; r1247 := (read (0x6356a8 : bv 64) (bv 32))
  %t1319 = inttoptr i64 6510248 to i32*
  %t1320 = load i32, i32* %t1319
  ; r1248 := (uext r1247 64)
  %t1321 = zext i32 %t1320 to i64
  ; r1249 := (div 64 (0x0 : bv 64) r1233 r1248)
  %t1322 = call { i64, i64 } (i64, i64, i64) asm sideeffect "div $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i64 0, i64 %t1305, i64 %t1321)
  ; r1250 := (tuple_field r1249 1)
  %t1323 = extractvalue { i64, i64 } %t1322, 1
  ; r1251 := (read (0x6356a0 : bv 64) (bv 64))
  %t1324 = inttoptr i64 6510240 to i64*
  %t1325 = load i64, i64* %t1324
  ; r1252 := (bv_mul (0x8 : bv 64) r1250)
  %t1326 = mul i64 8, %t1323
  ; r1253 := (bv_add r1251 r1252)
  %t1327 = add i64 %t1325, %t1326
  ; r1254 := (read r1253 (bv 64))
  %t1328 = inttoptr i64 %t1327 to i64*
  %t1329 = load i64, i64* %t1328
  ; r1255 := (eq r1254 (0x0 : bv 64))
  %t1330 = icmp eq i64 %t1329, 0
  br i1 %t1330, label %block_0_4074d3, label %block_0_4070a8
block_0_4074d3:
  %t1331 = phi i64 [ %t1321, %block_0_4074a9 ]
  %t1332 = phi i64 [ %t1323, %block_0_4074a9 ]
  %t1333 = phi i64 [ %t1306, %block_0_4074a9 ]
  %t1334 = phi i64 [ %t1307, %block_0_4074a9 ]
  %t1335 = phi i64 [ %t1308, %block_0_4074a9 ]
  %t1336 = phi i64 [ %t1309, %block_0_4074a9 ]
  %t1337 = phi i64 [ %t1326, %block_0_4074a9 ]
  %t1338 = phi i64 [ %t1310, %block_0_4074a9 ]
  %t1339 = phi i512 [ %t1311, %block_0_4074a9 ]
  %t1340 = phi i512 [ %t1312, %block_0_4074a9 ]
  %t1341 = phi i512 [ %t1313, %block_0_4074a9 ]
  %t1342 = phi i512 [ %t1314, %block_0_4074a9 ]
  %t1343 = phi i512 [ %t1315, %block_0_4074a9 ]
  %t1344 = phi i512 [ %t1316, %block_0_4074a9 ]
  %t1345 = phi i512 [ %t1317, %block_0_4074a9 ]
  %t1346 = phi i512 [ %t1318, %block_0_4074a9 ]
  ; r1272 := (read (0x6356e8 : bv 64) (bv 32))
  %t1347 = inttoptr i64 6510312 to i32*
  %t1348 = load i32, i32* %t1347
  ; r1273 := (eq r1272 (0x0 : bv 32))
  %t1349 = icmp eq i32 %t1348, 0
  br i1 %t1349, label %block_0_4074e3, label %block_0_407a9d
block_0_4074e3:
  %t1350 = phi i64 [ %t1331, %block_0_4074d3 ], [ %t4162, %block_0_407b1f ]
  %t1351 = phi i64 [ %t1332, %block_0_4074d3 ], [ %t4163, %block_0_407b1f ]
  %t1352 = phi i64 [ %t1333, %block_0_4074d3 ], [ %t4164, %block_0_407b1f ]
  %t1353 = phi i64 [ %t1332, %block_0_4074d3 ], [ %t4165, %block_0_407b1f ]
  %t1354 = phi i64 [ %t1334, %block_0_4074d3 ], [ %t4166, %block_0_407b1f ]
  %t1355 = phi i64 [ %t1335, %block_0_4074d3 ], [ %t4167, %block_0_407b1f ]
  %t1356 = phi i64 [ %t1336, %block_0_4074d3 ], [ %t4168, %block_0_407b1f ]
  %t1357 = phi i64 [ %t1338, %block_0_4074d3 ], [ %t4169, %block_0_407b1f ]
  %t1358 = phi i512 [ %t1339, %block_0_4074d3 ], [ %t4170, %block_0_407b1f ]
  %t1359 = phi i512 [ %t1340, %block_0_4074d3 ], [ %t4171, %block_0_407b1f ]
  %t1360 = phi i512 [ %t1341, %block_0_4074d3 ], [ %t4172, %block_0_407b1f ]
  %t1361 = phi i512 [ %t1342, %block_0_4074d3 ], [ %t4173, %block_0_407b1f ]
  %t1362 = phi i512 [ %t1343, %block_0_4074d3 ], [ %t4174, %block_0_407b1f ]
  %t1363 = phi i512 [ %t1344, %block_0_4074d3 ], [ %t4175, %block_0_407b1f ]
  %t1364 = phi i512 [ %t1345, %block_0_4074d3 ], [ %t4176, %block_0_407b1f ]
  %t1365 = phi i512 [ %t1346, %block_0_4074d3 ], [ %t4177, %block_0_407b1f ]
  ; r1290 := (trunc r1277 32)
  %t1366 = trunc i64 %t1353 to i32
  ; r1291 := (uext r1290 64)
  %t1367 = zext i32 %t1366 to i64
  ; r1292 := (bitcast r1282 (vec 8 double))
  %t1368 = bitcast i512 %t1358 to <8 x double>
  ; r1293 := (bitcast r1283 (vec 8 double))
  %t1369 = bitcast i512 %t1359 to <8 x double>
  ; r1294 := (bitcast r1284 (vec 8 double))
  %t1370 = bitcast i512 %t1360 to <8 x double>
  ; r1295 := (bitcast r1285 (vec 8 double))
  %t1371 = bitcast i512 %t1361 to <8 x double>
  ; r1296 := (bitcast r1286 (vec 8 double))
  %t1372 = bitcast i512 %t1362 to <8 x double>
  ; r1297 := (bitcast r1287 (vec 8 double))
  %t1373 = bitcast i512 %t1363 to <8 x double>
  ; r1298 := (bitcast r1288 (vec 8 double))
  %t1374 = bitcast i512 %t1364 to <8 x double>
  ; r1299 := (bitcast r1289 (vec 8 double))
  %t1375 = bitcast i512 %t1365 to <8 x double>
  ; r1300 := call arenas_extend(r1291, r1278, r1275, r1292, r1293, r1294, r1295, r1296, r1297, r1298, r1299)
  %t1376 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @arenas_extend(i64 %t1367, i64 %t1354, i64 %t1351, <8 x double> %t1368, <8 x double> %t1369, <8 x double> %t1370, <8 x double> %t1371, <8 x double> %t1372, <8 x double> %t1373, <8 x double> %t1374, <8 x double> %t1375)
  ; r1301 := (tuple_field r1300 0)
  %t1377 = extractvalue { i64, i64, <8 x double> } %t1376, 0
  ; r1302 := (tuple_field r1300 1)
  %t1378 = extractvalue { i64, i64, <8 x double> } %t1376, 1
  ; r1303 := (tuple_field r1300 2)
  %t1379 = extractvalue { i64, i64, <8 x double> } %t1376, 2
  ; r1304 := (bitcast r1303 (bv 512))
  %t1380 = bitcast <8 x double> %t1379 to i512
  br label %block_0_4074ea
block_0_4074ea:
  %t1381 = phi i64 [ %t1377, %block_0_4074e3 ]
  %t1382 = phi i64 [ %t1350, %block_0_4074e3 ]
  %t1383 = phi i64 [ %t1378, %block_0_4074e3 ]
  %t1384 = phi i64 [ %t1352, %block_0_4074e3 ]
  %t1385 = phi i64 [ %t1354, %block_0_4074e3 ]
  %t1386 = phi i64 [ %t1355, %block_0_4074e3 ]
  %t1387 = phi i64 [ %t1356, %block_0_4074e3 ]
  %t1388 = phi i64 [ %t1357, %block_0_4074e3 ]
  %t1389 = phi i512 [ %t1380, %block_0_4074e3 ]
  %t1390 = phi i512 [ %t1359, %block_0_4074e3 ]
  %t1391 = phi i512 [ %t1360, %block_0_4074e3 ]
  %t1392 = phi i512 [ %t1361, %block_0_4074e3 ]
  %t1393 = phi i512 [ %t1362, %block_0_4074e3 ]
  %t1394 = phi i512 [ %t1363, %block_0_4074e3 ]
  %t1395 = phi i512 [ %t1364, %block_0_4074e3 ]
  %t1396 = phi i512 [ %t1365, %block_0_4074e3 ]
  br label %block_0_4074ed
block_0_4074ed:
  %t1397 = phi i64 [ %t1382, %block_0_4074ea ], [ %t4139, %block_0_407b0b ]
  %t1398 = phi i64 [ %t1383, %block_0_4074ea ], [ %t4140, %block_0_407b0b ]
  %t1399 = phi i64 [ %t1384, %block_0_4074ea ], [ %t4141, %block_0_407b0b ]
  %t1400 = phi i64 [ %t1385, %block_0_4074ea ], [ %t4143, %block_0_407b0b ]
  %t1401 = phi i64 [ %t1386, %block_0_4074ea ], [ %t4144, %block_0_407b0b ]
  %t1402 = phi i64 [ %t1387, %block_0_4074ea ], [ %t4145, %block_0_407b0b ]
  %t1403 = phi i64 [ %t1381, %block_0_4074ea ], [ %t4160, %block_0_407b0b ]
  %t1404 = phi i64 [ %t1388, %block_0_4074ea ], [ %t4147, %block_0_407b0b ]
  %t1405 = phi i512 [ %t1389, %block_0_4074ea ], [ %t4148, %block_0_407b0b ]
  %t1406 = phi i512 [ %t1390, %block_0_4074ea ], [ %t4149, %block_0_407b0b ]
  %t1407 = phi i512 [ %t1391, %block_0_4074ea ], [ %t4150, %block_0_407b0b ]
  %t1408 = phi i512 [ %t1392, %block_0_4074ea ], [ %t4151, %block_0_407b0b ]
  %t1409 = phi i512 [ %t1393, %block_0_4074ea ], [ %t4152, %block_0_407b0b ]
  %t1410 = phi i512 [ %t1394, %block_0_4074ea ], [ %t4153, %block_0_407b0b ]
  %t1411 = phi i512 [ %t1395, %block_0_4074ea ], [ %t4154, %block_0_407b0b ]
  %t1412 = phi i512 [ %t1396, %block_0_4074ea ], [ %t4155, %block_0_407b0b ]
  ; r1337 := (read (0x6356e8 : bv 64) (bv 32))
  %t1413 = inttoptr i64 6510312 to i32*
  %t1414 = load i32, i32* %t1413
  ; r1338 := (eq r1337 (0x0 : bv 32))
  %t1415 = icmp eq i32 %t1414, 0
  br i1 %t1415, label %block_0_4074fb, label %block_0_407a8e
block_0_4074fb:
  %t1416 = phi i64 [ %t1397, %block_0_4074ed ]
  %t1417 = phi i64 [ %t1399, %block_0_4074ed ]
  %t1418 = phi i64 [ %t1400, %block_0_4074ed ]
  %t1419 = phi i64 [ %t1401, %block_0_4074ed ]
  %t1420 = phi i64 [ %t1402, %block_0_4074ed ]
  %t1421 = phi i64 [ %t1403, %block_0_4074ed ]
  %t1422 = phi i64 [ %t1404, %block_0_4074ed ]
  %t1423 = phi i512 [ %t1405, %block_0_4074ed ]
  %t1424 = phi i512 [ %t1406, %block_0_4074ed ]
  %t1425 = phi i512 [ %t1407, %block_0_4074ed ]
  %t1426 = phi i512 [ %t1408, %block_0_4074ed ]
  %t1427 = phi i512 [ %t1409, %block_0_4074ed ]
  %t1428 = phi i512 [ %t1410, %block_0_4074ed ]
  %t1429 = phi i512 [ %t1411, %block_0_4074ed ]
  %t1430 = phi i512 [ %t1412, %block_0_4074ed ]
  ; r1354 := (read (0x635508 : bv 64) (bv 64))
  %t1431 = inttoptr i64 6509832 to i64*
  %t1432 = load i64, i64* %t1431
  ; r1355 := (bv_add r1354 r1340)
  %t1433 = add i64 %t1432, %t1417
  ; r1356 := (read r1355 (bv 8))
  %t1434 = inttoptr i64 %t1433 to i8*
  %t1435 = load i8, i8* %t1434
  ; r1357 := (uext r1356 64)
  %t1436 = zext i8 %t1435 to i64
  ; r1358 := (bv_mul (0x8 : bv 64) r1357)
  %t1437 = mul i64 8, %t1436
  ; r1359 := (bv_add r1357 r1358)
  %t1438 = add i64 %t1436, %t1437
  ; r1360 := (bv_shl r1359 (0x3 : bv 64))
  %t1439 = shl i64 %t1438, 3
  ; r1361 := (bv_add r1344 r1360)
  %t1440 = add i64 %t1421, %t1439
  ; r1362 := (bv_add r1361 (0xb0 : bv 64))
  %t1441 = add i64 %t1440, 176
  ; r1363 := (read r1362 (bv 64))
  %t1442 = inttoptr i64 %t1441 to i64*
  %t1443 = load i64, i64* %t1442
  ; r1364 := (bv_add r1361 (0x88 : bv 64))
  %t1444 = add i64 %t1440, 136
  br label %block_0_4070db
block_0_407523:
  %t1445 = phi i64 [ %t640, %block_0_4072a4 ]
  %t1446 = phi i64 [ %t641, %block_0_4072a4 ]
  %t1447 = phi i64 [ %t642, %block_0_4072a4 ]
  %t1448 = phi i64 [ %t643, %block_0_4072a4 ]
  %t1449 = phi i64 [ %t644, %block_0_4072a4 ]
  %t1450 = phi i64 [ %t656, %block_0_4072a4 ]
  %t1451 = phi i64 [ %t645, %block_0_4072a4 ]
  %t1452 = phi i512 [ %t646, %block_0_4072a4 ]
  %t1453 = phi i512 [ %t647, %block_0_4072a4 ]
  %t1454 = phi i512 [ %t648, %block_0_4072a4 ]
  %t1455 = phi i512 [ %t649, %block_0_4072a4 ]
  %t1456 = phi i512 [ %t650, %block_0_4072a4 ]
  %t1457 = phi i512 [ %t651, %block_0_4072a4 ]
  %t1458 = phi i512 [ %t652, %block_0_4072a4 ]
  %t1459 = phi i512 [ %t653, %block_0_4072a4 ]
  ; r1380 := (read (0x6356a8 : bv 64) (bv 32))
  %t1460 = inttoptr i64 6510248 to i32*
  %t1461 = load i32, i32* %t1460
  ; r1381 := (bv_ult r1380 (0x1 : bv 32))
  %t1462 = icmp ult i32 %t1461, 1
  ; r1382 := (eq r1380 (0x1 : bv 32))
  %t1463 = icmp eq i32 %t1461, 1
  ; r1383 := (or r1381 r1382)
  %t1464 = or i1 %t1462, %t1463
  br i1 %t1464, label %block_0_4072b4, label %block_0_407530
block_0_407530:
  %t1465 = phi i64 [ %t1445, %block_0_407523 ]
  %t1466 = phi i64 [ %t1446, %block_0_407523 ]
  %t1467 = phi i64 [ %t1447, %block_0_407523 ]
  %t1468 = phi i64 [ %t1448, %block_0_407523 ]
  %t1469 = phi i64 [ %t1449, %block_0_407523 ]
  %t1470 = phi i64 [ %t1450, %block_0_407523 ]
  %t1471 = phi i64 [ %t1451, %block_0_407523 ]
  %t1472 = phi i512 [ %t1452, %block_0_407523 ]
  %t1473 = phi i512 [ %t1453, %block_0_407523 ]
  %t1474 = phi i512 [ %t1454, %block_0_407523 ]
  %t1475 = phi i512 [ %t1455, %block_0_407523 ]
  %t1476 = phi i512 [ %t1456, %block_0_407523 ]
  %t1477 = phi i512 [ %t1457, %block_0_407523 ]
  %t1478 = phi i512 [ %t1458, %block_0_407523 ]
  %t1479 = phi i512 [ %t1459, %block_0_407523 ]
  ; r1399 := (bitcast r1391 (vec 8 double))
  %t1480 = bitcast i512 %t1472 to <8 x double>
  ; r1400 := (bitcast r1392 (vec 8 double))
  %t1481 = bitcast i512 %t1473 to <8 x double>
  ; r1401 := (bitcast r1393 (vec 8 double))
  %t1482 = bitcast i512 %t1474 to <8 x double>
  ; r1402 := (bitcast r1394 (vec 8 double))
  %t1483 = bitcast i512 %t1475 to <8 x double>
  ; r1403 := (bitcast r1395 (vec 8 double))
  %t1484 = bitcast i512 %t1476 to <8 x double>
  ; r1404 := (bitcast r1396 (vec 8 double))
  %t1485 = bitcast i512 %t1477 to <8 x double>
  ; r1405 := (bitcast r1397 (vec 8 double))
  %t1486 = bitcast i512 %t1478 to <8 x double>
  ; r1406 := (bitcast r1398 (vec 8 double))
  %t1487 = bitcast i512 %t1479 to <8 x double>
  ; r1407 := call pthread_self_int(r1386, r1387, r1385, r1384, r1388, r1389, r1399, r1400, r1401, r1402, r1403, r1404, r1405, r1406)
  %t1488 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_self_int(i64 %t1467, i64 %t1468, i64 %t1466, i64 %t1465, i64 %t1469, i64 %t1470, <8 x double> %t1480, <8 x double> %t1481, <8 x double> %t1482, <8 x double> %t1483, <8 x double> %t1484, <8 x double> %t1485, <8 x double> %t1486, <8 x double> %t1487)
  ; r1408 := (tuple_field r1407 0)
  %t1489 = extractvalue { i64, i64, <8 x double> } %t1488, 0
  ; r1409 := (tuple_field r1407 1)
  %t1490 = extractvalue { i64, i64, <8 x double> } %t1488, 1
  ; r1410 := (tuple_field r1407 2)
  %t1491 = extractvalue { i64, i64, <8 x double> } %t1488, 2
  ; r1411 := (bitcast r1410 (bv 512))
  %t1492 = bitcast <8 x double> %t1491 to i512
  br label %block_0_407535
block_0_407535:
  %t1493 = phi i64 [ %t1489, %block_0_407530 ]
  %t1494 = phi i64 [ %t1467, %block_0_407530 ]
  %t1495 = phi i64 [ %t1468, %block_0_407530 ]
  %t1496 = phi i64 [ %t1469, %block_0_407530 ]
  %t1497 = phi i64 [ %t1470, %block_0_407530 ]
  %t1498 = phi i64 [ %t1471, %block_0_407530 ]
  %t1499 = phi i512 [ %t1492, %block_0_407530 ]
  %t1500 = phi i512 [ %t1473, %block_0_407530 ]
  %t1501 = phi i512 [ %t1474, %block_0_407530 ]
  %t1502 = phi i512 [ %t1475, %block_0_407530 ]
  %t1503 = phi i512 [ %t1476, %block_0_407530 ]
  %t1504 = phi i512 [ %t1477, %block_0_407530 ]
  %t1505 = phi i512 [ %t1478, %block_0_407530 ]
  %t1506 = phi i512 [ %t1479, %block_0_407530 ]
  ; r1426 := (read (0x6356a8 : bv 64) (bv 32))
  %t1507 = inttoptr i64 6510248 to i32*
  %t1508 = load i32, i32* %t1507
  ; r1427 := (uext r1426 64)
  %t1509 = zext i32 %t1508 to i64
  ; r1428 := (div 64 (0x0 : bv 64) r1412 r1427)
  %t1510 = call { i64, i64 } (i64, i64, i64) asm sideeffect "div $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i64 0, i64 %t1493, i64 %t1509)
  ; r1429 := (tuple_field r1428 1)
  %t1511 = extractvalue { i64, i64 } %t1510, 1
  ; r1430 := (read (0x6356a0 : bv 64) (bv 64))
  %t1512 = inttoptr i64 6510240 to i64*
  %t1513 = load i64, i64* %t1512
  ; r1431 := (bv_mul (0x8 : bv 64) r1429)
  %t1514 = mul i64 8, %t1511
  ; r1432 := (bv_add r1430 r1431)
  %t1515 = add i64 %t1513, %t1514
  ; r1433 := (read r1432 (bv 64))
  %t1516 = inttoptr i64 %t1515 to i64*
  %t1517 = load i64, i64* %t1516
  ; r1434 := (eq r1433 (0x0 : bv 64))
  %t1518 = icmp eq i64 %t1517, 0
  br i1 %t1518, label %block_0_40755f, label %block_0_4072be
block_0_40755f:
  %t1519 = phi i64 [ %t1509, %block_0_407535 ]
  %t1520 = phi i64 [ %t1511, %block_0_407535 ]
  %t1521 = phi i64 [ %t1494, %block_0_407535 ]
  %t1522 = phi i64 [ %t1495, %block_0_407535 ]
  %t1523 = phi i64 [ %t1497, %block_0_407535 ]
  %t1524 = phi i64 [ %t1514, %block_0_407535 ]
  %t1525 = phi i64 [ %t1498, %block_0_407535 ]
  %t1526 = phi i512 [ %t1499, %block_0_407535 ]
  %t1527 = phi i512 [ %t1500, %block_0_407535 ]
  %t1528 = phi i512 [ %t1501, %block_0_407535 ]
  %t1529 = phi i512 [ %t1502, %block_0_407535 ]
  %t1530 = phi i512 [ %t1503, %block_0_407535 ]
  %t1531 = phi i512 [ %t1504, %block_0_407535 ]
  %t1532 = phi i512 [ %t1505, %block_0_407535 ]
  %t1533 = phi i512 [ %t1506, %block_0_407535 ]
  ; r1450 := (read (0x6356e8 : bv 64) (bv 32))
  %t1534 = inttoptr i64 6510312 to i32*
  %t1535 = load i32, i32* %t1534
  ; r1451 := (uext r1450 64)
  %t1536 = zext i32 %t1535 to i64
  ; r1452 := (eq r1450 (0x0 : bv 32))
  %t1537 = icmp eq i32 %t1535, 0
  br i1 %t1537, label %block_0_40756f, label %block_0_407a07
block_0_40756f:
  %t1538 = phi i64 [ %t1519, %block_0_40755f ], [ %t3838, %block_0_407a89 ]
  %t1539 = phi i64 [ %t1520, %block_0_40755f ], [ %t3839, %block_0_407a89 ]
  %t1540 = phi i64 [ %t1521, %block_0_40755f ], [ %t3840, %block_0_407a89 ]
  %t1541 = phi i64 [ %t1520, %block_0_40755f ], [ %t3841, %block_0_407a89 ]
  %t1542 = phi i64 [ %t1522, %block_0_40755f ], [ %t3842, %block_0_407a89 ]
  %t1543 = phi i64 [ %t1536, %block_0_40755f ], [ %t3843, %block_0_407a89 ]
  %t1544 = phi i64 [ %t1523, %block_0_40755f ], [ %t3844, %block_0_407a89 ]
  %t1545 = phi i64 [ %t1525, %block_0_40755f ], [ %t3845, %block_0_407a89 ]
  %t1546 = phi i512 [ %t1526, %block_0_40755f ], [ %t3846, %block_0_407a89 ]
  %t1547 = phi i512 [ %t1527, %block_0_40755f ], [ %t3847, %block_0_407a89 ]
  %t1548 = phi i512 [ %t1528, %block_0_40755f ], [ %t3848, %block_0_407a89 ]
  %t1549 = phi i512 [ %t1529, %block_0_40755f ], [ %t3849, %block_0_407a89 ]
  %t1550 = phi i512 [ %t1530, %block_0_40755f ], [ %t3850, %block_0_407a89 ]
  %t1551 = phi i512 [ %t1531, %block_0_40755f ], [ %t3851, %block_0_407a89 ]
  %t1552 = phi i512 [ %t1532, %block_0_40755f ], [ %t3852, %block_0_407a89 ]
  %t1553 = phi i512 [ %t1533, %block_0_40755f ], [ %t3853, %block_0_407a89 ]
  ; r1469 := (trunc r1456 32)
  %t1554 = trunc i64 %t1541 to i32
  ; r1470 := (uext r1469 64)
  %t1555 = zext i32 %t1554 to i64
  ; r1471 := (bitcast r1461 (vec 8 double))
  %t1556 = bitcast i512 %t1546 to <8 x double>
  ; r1472 := (bitcast r1462 (vec 8 double))
  %t1557 = bitcast i512 %t1547 to <8 x double>
  ; r1473 := (bitcast r1463 (vec 8 double))
  %t1558 = bitcast i512 %t1548 to <8 x double>
  ; r1474 := (bitcast r1464 (vec 8 double))
  %t1559 = bitcast i512 %t1549 to <8 x double>
  ; r1475 := (bitcast r1465 (vec 8 double))
  %t1560 = bitcast i512 %t1550 to <8 x double>
  ; r1476 := (bitcast r1466 (vec 8 double))
  %t1561 = bitcast i512 %t1551 to <8 x double>
  ; r1477 := (bitcast r1467 (vec 8 double))
  %t1562 = bitcast i512 %t1552 to <8 x double>
  ; r1478 := (bitcast r1468 (vec 8 double))
  %t1563 = bitcast i512 %t1553 to <8 x double>
  ; r1479 := call arenas_extend(r1470, r1457, r1454, r1471, r1472, r1473, r1474, r1475, r1476, r1477, r1478)
  %t1564 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @arenas_extend(i64 %t1555, i64 %t1542, i64 %t1539, <8 x double> %t1556, <8 x double> %t1557, <8 x double> %t1558, <8 x double> %t1559, <8 x double> %t1560, <8 x double> %t1561, <8 x double> %t1562, <8 x double> %t1563)
  ; r1480 := (tuple_field r1479 0)
  %t1565 = extractvalue { i64, i64, <8 x double> } %t1564, 0
  ; r1481 := (tuple_field r1479 1)
  %t1566 = extractvalue { i64, i64, <8 x double> } %t1564, 1
  ; r1482 := (tuple_field r1479 2)
  %t1567 = extractvalue { i64, i64, <8 x double> } %t1564, 2
  ; r1483 := (bitcast r1482 (bv 512))
  %t1568 = bitcast <8 x double> %t1567 to i512
  br label %block_0_407576
block_0_407576:
  %t1569 = phi i64 [ %t1565, %block_0_40756f ]
  %t1570 = phi i64 [ %t1538, %block_0_40756f ]
  %t1571 = phi i64 [ %t1566, %block_0_40756f ]
  %t1572 = phi i64 [ %t1540, %block_0_40756f ]
  %t1573 = phi i64 [ %t1542, %block_0_40756f ]
  %t1574 = phi i64 [ %t1543, %block_0_40756f ]
  %t1575 = phi i64 [ %t1544, %block_0_40756f ]
  %t1576 = phi i64 [ %t1545, %block_0_40756f ]
  %t1577 = phi i512 [ %t1568, %block_0_40756f ]
  %t1578 = phi i512 [ %t1547, %block_0_40756f ]
  %t1579 = phi i512 [ %t1548, %block_0_40756f ]
  %t1580 = phi i512 [ %t1549, %block_0_40756f ]
  %t1581 = phi i512 [ %t1550, %block_0_40756f ]
  %t1582 = phi i512 [ %t1551, %block_0_40756f ]
  %t1583 = phi i512 [ %t1552, %block_0_40756f ]
  %t1584 = phi i512 [ %t1553, %block_0_40756f ]
  br label %block_0_407579
block_0_407579:
  %t1585 = phi i64 [ %t1570, %block_0_407576 ], [ %t3815, %block_0_407a75 ]
  %t1586 = phi i64 [ %t1571, %block_0_407576 ], [ %t3816, %block_0_407a75 ]
  %t1587 = phi i64 [ %t1572, %block_0_407576 ], [ %t3817, %block_0_407a75 ]
  %t1588 = phi i64 [ %t1573, %block_0_407576 ], [ %t3819, %block_0_407a75 ]
  %t1589 = phi i64 [ %t1574, %block_0_407576 ], [ %t3820, %block_0_407a75 ]
  %t1590 = phi i64 [ %t1575, %block_0_407576 ], [ %t3821, %block_0_407a75 ]
  %t1591 = phi i64 [ %t1569, %block_0_407576 ], [ %t3836, %block_0_407a75 ]
  %t1592 = phi i64 [ %t1576, %block_0_407576 ], [ %t3823, %block_0_407a75 ]
  %t1593 = phi i512 [ %t1577, %block_0_407576 ], [ %t3824, %block_0_407a75 ]
  %t1594 = phi i512 [ %t1578, %block_0_407576 ], [ %t3825, %block_0_407a75 ]
  %t1595 = phi i512 [ %t1579, %block_0_407576 ], [ %t3826, %block_0_407a75 ]
  %t1596 = phi i512 [ %t1580, %block_0_407576 ], [ %t3827, %block_0_407a75 ]
  %t1597 = phi i512 [ %t1581, %block_0_407576 ], [ %t3828, %block_0_407a75 ]
  %t1598 = phi i512 [ %t1582, %block_0_407576 ], [ %t3829, %block_0_407a75 ]
  %t1599 = phi i512 [ %t1583, %block_0_407576 ], [ %t3830, %block_0_407a75 ]
  %t1600 = phi i512 [ %t1584, %block_0_407576 ], [ %t3831, %block_0_407a75 ]
  ; r1516 := (read (0x6356e8 : bv 64) (bv 32))
  %t1601 = inttoptr i64 6510312 to i32*
  %t1602 = load i32, i32* %t1601
  ; r1517 := (eq r1516 (0x0 : bv 32))
  %t1603 = icmp eq i32 %t1602, 0
  br i1 %t1603, label %block_0_407587, label %block_0_4079f8
block_0_407587:
  %t1604 = phi i64 [ %t1587, %block_0_407579 ]
  %t1605 = phi i64 [ %t1588, %block_0_407579 ]
  %t1606 = phi i64 [ %t1589, %block_0_407579 ]
  %t1607 = phi i64 [ %t1590, %block_0_407579 ]
  %t1608 = phi i64 [ %t1591, %block_0_407579 ]
  %t1609 = phi i64 [ %t1592, %block_0_407579 ]
  %t1610 = phi i512 [ %t1593, %block_0_407579 ]
  %t1611 = phi i512 [ %t1594, %block_0_407579 ]
  %t1612 = phi i512 [ %t1595, %block_0_407579 ]
  %t1613 = phi i512 [ %t1596, %block_0_407579 ]
  %t1614 = phi i512 [ %t1597, %block_0_407579 ]
  %t1615 = phi i512 [ %t1598, %block_0_407579 ]
  %t1616 = phi i512 [ %t1599, %block_0_407579 ]
  %t1617 = phi i512 [ %t1600, %block_0_407579 ]
  ; r1532 := (read (0x635500 : bv 64) (bv 64))
  %t1618 = inttoptr i64 6509824 to i64*
  %t1619 = load i64, i64* %t1618
  ; r1533 := (read (0x6354f8 : bv 64) (bv 8))
  %t1620 = inttoptr i64 6509816 to i8*
  %t1621 = load i8, i8* %t1620
  ; r1534 := (uext r1533 64)
  %t1622 = zext i8 %t1621 to i64
  ; r1535 := (read (0x6354c0 : bv 64) (bv 32))
  %t1623 = inttoptr i64 6509760 to i32*
  %t1624 = load i32, i32* %t1623
  ; r1536 := (uext r1535 64)
  %t1625 = zext i32 %t1624 to i64
  ; r1537 := (bv_add r1518 r1532)
  %t1626 = add i64 %t1604, %t1619
  ; r1538 := (bv_complement r1532)
  %t1627 = xor i64 %t1619, -1
  ; r1539 := (bv_and r1537 r1538)
  %t1628 = and i64 %t1626, %t1627
  ; r1540 := (bv_add r1539 (0xfffffffffffff000 : bv 64))
  %t1629 = add i64 %t1628, 18446744073709547520
  ; r1541 := (bv_and r1533 (0x3f : bv 8))
  %t1630 = and i8 %t1621, 63
  ; r1542 := (eq r1541 (0x0 : bv 8))
  %t1631 = icmp eq i8 %t1630, 0
  ; r1543 := (uext r1541 64)
  %t1632 = zext i8 %t1630 to i64
  ; r1544 := (bv_shr r1540 r1543)
  %t1633 = lshr i64 %t1629, %t1632
  ; r1545 := (mux r1542 r1540 r1544)
  %t1634 = select i1 %t1631, i64 %t1629, i64 %t1633
  ; r1546 := (bv_add r1545 r1536)
  %t1635 = add i64 %t1634, %t1625
  br label %block_0_4072f8
block_0_4075b8:
  %t1636 = phi i64 [ %t620, %block_0_407278 ]
  %t1637 = phi i64 [ %t621, %block_0_407278 ]
  %t1638 = phi i512 [ %t622, %block_0_407278 ]
  ; r1550 := (bitcast r1549 (vec 8 double))
  %t1639 = bitcast i512 %t1638 to <8 x double>
  ; r1551 := call memset(r1548, (0xa5 : bv 64), r1547, r1550)
  %t1640 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t1637, i64 165, i64 %t1636, <8 x double> %t1639)
  ; r1552 := (tuple_field r1551 0)
  %t1641 = extractvalue { i64, i64, <8 x double> } %t1640, 0
  ; r1553 := (tuple_field r1551 1)
  %t1642 = extractvalue { i64, i64, <8 x double> } %t1640, 1
  ; r1554 := (tuple_field r1551 2)
  %t1643 = extractvalue { i64, i64, <8 x double> } %t1640, 2
  ; r1555 := (bitcast r1554 (bv 512))
  %t1644 = bitcast <8 x double> %t1643 to i512
  br label %block_0_4075c8
block_0_4075c8:
  %t1645 = phi i64 [ %t1642, %block_0_4075b8 ]
  %t1646 = phi i64 [ %t1637, %block_0_4075b8 ]
  %t1647 = phi i512 [ %t1644, %block_0_4075b8 ]
  br label %block_0_407292
block_0_4075cd:
  %t1648 = phi i64 [ %t517, %block_0_407220 ]
  %t1649 = phi i64 [ %t518, %block_0_407220 ]
  %t1650 = phi i64 [ %t542, %block_0_407220 ]
  %t1651 = phi i64 [ %t520, %block_0_407220 ]
  %t1652 = phi i64 [ %t521, %block_0_407220 ]
  %t1653 = phi i64 [ %t522, %block_0_407220 ]
  %t1654 = phi i64 [ %t523, %block_0_407220 ]
  %t1655 = phi i64 [ %t540, %block_0_407220 ]
  %t1656 = phi i512 [ %t525, %block_0_407220 ]
  %t1657 = phi i512 [ %t526, %block_0_407220 ]
  %t1658 = phi i512 [ %t527, %block_0_407220 ]
  %t1659 = phi i512 [ %t528, %block_0_407220 ]
  %t1660 = phi i512 [ %t529, %block_0_407220 ]
  %t1661 = phi i512 [ %t530, %block_0_407220 ]
  %t1662 = phi i512 [ %t531, %block_0_407220 ]
  %t1663 = phi i512 [ %t532, %block_0_407220 ]
  ; r1575 := (bitcast r1567 (vec 8 double))
  %t1664 = bitcast i512 %t1656 to <8 x double>
  ; r1576 := (bitcast r1568 (vec 8 double))
  %t1665 = bitcast i512 %t1657 to <8 x double>
  ; r1577 := (bitcast r1569 (vec 8 double))
  %t1666 = bitcast i512 %t1658 to <8 x double>
  ; r1578 := (bitcast r1570 (vec 8 double))
  %t1667 = bitcast i512 %t1659 to <8 x double>
  ; r1579 := (bitcast r1571 (vec 8 double))
  %t1668 = bitcast i512 %t1660 to <8 x double>
  ; r1580 := (bitcast r1572 (vec 8 double))
  %t1669 = bitcast i512 %t1661 to <8 x double>
  ; r1581 := (bitcast r1573 (vec 8 double))
  %t1670 = bitcast i512 %t1662 to <8 x double>
  ; r1582 := (bitcast r1574 (vec 8 double))
  %t1671 = bitcast i512 %t1663 to <8 x double>
  ; r1583 := call pthread_mutex_trylock_int(r1562, r1563, r1560, r1559, r1564, r1565, r1575, r1576, r1577, r1578, r1579, r1580, r1581, r1582)
  %t1672 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t1651, i64 %t1652, i64 %t1649, i64 %t1648, i64 %t1653, i64 %t1654, <8 x double> %t1664, <8 x double> %t1665, <8 x double> %t1666, <8 x double> %t1667, <8 x double> %t1668, <8 x double> %t1669, <8 x double> %t1670, <8 x double> %t1671)
  ; r1584 := (tuple_field r1583 0)
  %t1673 = extractvalue { i64, i64, <8 x double> } %t1672, 0
  ; r1585 := (tuple_field r1583 1)
  %t1674 = extractvalue { i64, i64, <8 x double> } %t1672, 1
  ; r1586 := (tuple_field r1583 2)
  %t1675 = extractvalue { i64, i64, <8 x double> } %t1672, 2
  ; r1587 := (bitcast r1586 (bv 512))
  %t1676 = bitcast <8 x double> %t1675 to i512
  br label %block_0_4075d5
block_0_4075d5:
  %t1677 = phi i64 [ %t1673, %block_0_4075cd ]
  %t1678 = phi i64 [ %t1648, %block_0_4075cd ]
  %t1679 = phi i64 [ %t1674, %block_0_4075cd ]
  %t1680 = phi i64 [ %t1650, %block_0_4075cd ]
  %t1681 = phi i64 [ %t1651, %block_0_4075cd ]
  %t1682 = phi i64 [ %t1652, %block_0_4075cd ]
  %t1683 = phi i64 [ %t1653, %block_0_4075cd ]
  %t1684 = phi i64 [ %t1654, %block_0_4075cd ]
  %t1685 = phi i64 [ %t1655, %block_0_4075cd ]
  %t1686 = phi i512 [ %t1676, %block_0_4075cd ]
  %t1687 = phi i512 [ %t1657, %block_0_4075cd ]
  %t1688 = phi i512 [ %t1658, %block_0_4075cd ]
  %t1689 = phi i512 [ %t1659, %block_0_4075cd ]
  %t1690 = phi i512 [ %t1660, %block_0_4075cd ]
  %t1691 = phi i512 [ %t1661, %block_0_4075cd ]
  %t1692 = phi i512 [ %t1662, %block_0_4075cd ]
  %t1693 = phi i512 [ %t1663, %block_0_4075cd ]
  ; r1605 := (trunc r1588 32)
  %t1694 = trunc i64 %t1677 to i32
  ; r1606 := (eq r1605 (0x0 : bv 32))
  %t1695 = icmp eq i32 %t1694, 0
  br i1 %t1695, label %block_0_407243, label %block_0_4075dd
block_0_4075dd:
  %t1696 = phi i64 [ %t1678, %block_0_4075d5 ]
  %t1697 = phi i64 [ %t1679, %block_0_4075d5 ]
  %t1698 = phi i64 [ %t1680, %block_0_4075d5 ]
  %t1699 = phi i64 [ %t1681, %block_0_4075d5 ]
  %t1700 = phi i64 [ %t1682, %block_0_4075d5 ]
  %t1701 = phi i64 [ %t1683, %block_0_4075d5 ]
  %t1702 = phi i64 [ %t1684, %block_0_4075d5 ]
  %t1703 = phi i64 [ %t1685, %block_0_4075d5 ]
  %t1704 = phi i512 [ %t1686, %block_0_4075d5 ]
  %t1705 = phi i512 [ %t1687, %block_0_4075d5 ]
  %t1706 = phi i512 [ %t1688, %block_0_4075d5 ]
  %t1707 = phi i512 [ %t1689, %block_0_4075d5 ]
  %t1708 = phi i512 [ %t1690, %block_0_4075d5 ]
  %t1709 = phi i512 [ %t1691, %block_0_4075d5 ]
  %t1710 = phi i512 [ %t1692, %block_0_4075d5 ]
  %t1711 = phi i512 [ %t1693, %block_0_4075d5 ]
  ; r1623 := (read (0x6354a8 : bv 64) (bv 32))
  %t1712 = inttoptr i64 6509736 to i32*
  %t1713 = load i32, i32* %t1712
  ; r1624 := (bv_ult r1623 (0x1 : bv 32))
  %t1714 = icmp ult i32 %t1713, 1
  ; r1625 := (eq r1623 (0x1 : bv 32))
  %t1715 = icmp eq i32 %t1713, 1
  ; r1626 := (or r1624 r1625)
  %t1716 = or i1 %t1714, %t1715
  br i1 %t1716, label %block_0_407635, label %block_0_4075e6
block_0_4075e6:
  %t1717 = phi i64 [ %t1698, %block_0_4075dd ]
  %t1718 = phi i64 [ %t1699, %block_0_4075dd ]
  %t1719 = phi i64 [ %t1700, %block_0_4075dd ]
  %t1720 = phi i64 [ %t1701, %block_0_4075dd ]
  %t1721 = phi i64 [ %t1702, %block_0_4075dd ]
  %t1722 = phi i64 [ %t1703, %block_0_4075dd ]
  %t1723 = phi i512 [ %t1704, %block_0_4075dd ]
  %t1724 = phi i512 [ %t1705, %block_0_4075dd ]
  %t1725 = phi i512 [ %t1706, %block_0_4075dd ]
  %t1726 = phi i512 [ %t1707, %block_0_4075dd ]
  %t1727 = phi i512 [ %t1708, %block_0_4075dd ]
  %t1728 = phi i512 [ %t1709, %block_0_4075dd ]
  %t1729 = phi i512 [ %t1710, %block_0_4075dd ]
  %t1730 = phi i512 [ %t1711, %block_0_4075dd ]
  br label %block_0_4075ec
block_0_4075ec:
  %t1731 = phi i64 [ %t1717, %block_0_4075e6 ], [ %t1829, %block_0_40762b ]
  %t1732 = phi i64 [ %t1718, %block_0_4075e6 ], [ %t1830, %block_0_40762b ]
  %t1733 = phi i64 [ %t1719, %block_0_4075e6 ], [ %t1831, %block_0_40762b ]
  %t1734 = phi i64 [ %t1720, %block_0_4075e6 ], [ %t1832, %block_0_40762b ]
  %t1735 = phi i64 [ %t1721, %block_0_4075e6 ], [ %t1833, %block_0_40762b ]
  %t1736 = phi i64 [ 1, %block_0_4075e6 ], [ %t1846, %block_0_40762b ]
  %t1737 = phi i64 [ %t1722, %block_0_4075e6 ], [ %t1835, %block_0_40762b ]
  %t1738 = phi i512 [ %t1723, %block_0_4075e6 ], [ %t1836, %block_0_40762b ]
  %t1739 = phi i512 [ %t1724, %block_0_4075e6 ], [ %t1837, %block_0_40762b ]
  %t1740 = phi i512 [ %t1725, %block_0_4075e6 ], [ %t1838, %block_0_40762b ]
  %t1741 = phi i512 [ %t1726, %block_0_4075e6 ], [ %t1839, %block_0_40762b ]
  %t1742 = phi i512 [ %t1727, %block_0_4075e6 ], [ %t1840, %block_0_40762b ]
  %t1743 = phi i512 [ %t1728, %block_0_4075e6 ], [ %t1841, %block_0_40762b ]
  %t1744 = phi i512 [ %t1729, %block_0_4075e6 ], [ %t1842, %block_0_40762b ]
  %t1745 = phi i512 [ %t1730, %block_0_4075e6 ], [ %t1843, %block_0_40762b ]
  ; r1656 := (trunc r1646 32)
  %t1746 = trunc i64 %t1736 to i32
  ; r1657 := (uext r1656 64)
  %t1747 = zext i32 %t1746 to i64
  ; r1658 := (trunc r1646 8)
  %t1748 = trunc i64 %t1736 to i8
  ; r1659 := (bv_and r1658 (0x1f : bv 8))
  %t1749 = and i8 %t1748, 31
  ; r1660 := (eq r1659 (0x0 : bv 8))
  %t1750 = icmp eq i8 %t1749, 0
  ; r1661 := (uext r1659 32)
  %t1751 = zext i8 %t1749 to i32
  ; r1662 := (bv_shl (0x1 : bv 32) r1661)
  %t1752 = shl i32 1, %t1751
  ; r1663 := (mux r1660 (0x1 : bv 32) r1662)
  %t1753 = select i1 %t1750, i32 1, i32 %t1752
  ; r1664 := (uext r1663 64)
  %t1754 = zext i32 %t1753 to i64
  ; r1665 := (bv_ult (0x0 : bv 32) r1663)
  %t1755 = icmp ult i32 0, %t1753
  br i1 %t1755, label %block_0_407606, label %block_0_40761b
block_0_407606:
  %t1756 = phi i64 [ %t1747, %block_0_4075ec ], [ %t1756, %block_0_407606 ]
  %t1757 = phi i64 [ %t1754, %block_0_4075ec ], [ %t1757, %block_0_407606 ]
  %t1758 = phi i64 [ %t1731, %block_0_4075ec ], [ %t1758, %block_0_407606 ]
  %t1759 = phi i64 [ %t1732, %block_0_4075ec ], [ %t1759, %block_0_407606 ]
  %t1760 = phi i64 [ %t1733, %block_0_4075ec ], [ %t1760, %block_0_407606 ]
  %t1761 = phi i64 [ %t1734, %block_0_4075ec ], [ %t1761, %block_0_407606 ]
  %t1762 = phi i64 [ %t1735, %block_0_4075ec ], [ %t1762, %block_0_407606 ]
  %t1763 = phi i64 [ %t1736, %block_0_4075ec ], [ %t1763, %block_0_407606 ]
  %t1764 = phi i64 [ %t1737, %block_0_4075ec ], [ %t1764, %block_0_407606 ]
  %t1765 = phi i512 [ %t1738, %block_0_4075ec ], [ %t1765, %block_0_407606 ]
  %t1766 = phi i512 [ %t1739, %block_0_4075ec ], [ %t1766, %block_0_407606 ]
  %t1767 = phi i512 [ %t1740, %block_0_4075ec ], [ %t1767, %block_0_407606 ]
  %t1768 = phi i512 [ %t1741, %block_0_4075ec ], [ %t1768, %block_0_407606 ]
  %t1769 = phi i512 [ %t1742, %block_0_4075ec ], [ %t1769, %block_0_407606 ]
  %t1770 = phi i512 [ %t1743, %block_0_4075ec ], [ %t1770, %block_0_407606 ]
  %t1771 = phi i512 [ %t1744, %block_0_4075ec ], [ %t1771, %block_0_407606 ]
  %t1772 = phi i512 [ %t1745, %block_0_4075ec ], [ %t1772, %block_0_407606 ]
  %t1773 = phi i32 [ 0, %block_0_4075ec ], [ %t1774, %block_0_407606 ]
  ; r1684 := (bv_add r1683 (0x1 : bv 32))
  %t1774 = add i32 %t1773, 1
  ; r1685 := (trunc r1667 32)
  %t1775 = trunc i64 %t1757 to i32
  ; r1686 := (bv_ult r1684 r1685)
  %t1776 = icmp ult i32 %t1774, %t1775
  br i1 %t1776, label %block_0_407606, label %block_0_40761b
block_0_40761b:
  %t1777 = phi i64 [ %t1747, %block_0_4075ec ], [ %t1756, %block_0_407606 ]
  %t1778 = phi i64 [ %t1754, %block_0_4075ec ], [ %t1757, %block_0_407606 ]
  %t1779 = phi i64 [ %t1731, %block_0_4075ec ], [ %t1758, %block_0_407606 ]
  %t1780 = phi i64 [ %t1732, %block_0_4075ec ], [ %t1759, %block_0_407606 ]
  %t1781 = phi i64 [ %t1733, %block_0_4075ec ], [ %t1760, %block_0_407606 ]
  %t1782 = phi i64 [ %t1734, %block_0_4075ec ], [ %t1761, %block_0_407606 ]
  %t1783 = phi i64 [ %t1735, %block_0_4075ec ], [ %t1762, %block_0_407606 ]
  %t1784 = phi i64 [ %t1736, %block_0_4075ec ], [ %t1763, %block_0_407606 ]
  %t1785 = phi i64 [ %t1737, %block_0_4075ec ], [ %t1764, %block_0_407606 ]
  %t1786 = phi i512 [ %t1738, %block_0_4075ec ], [ %t1765, %block_0_407606 ]
  %t1787 = phi i512 [ %t1739, %block_0_4075ec ], [ %t1766, %block_0_407606 ]
  %t1788 = phi i512 [ %t1740, %block_0_4075ec ], [ %t1767, %block_0_407606 ]
  %t1789 = phi i512 [ %t1741, %block_0_4075ec ], [ %t1768, %block_0_407606 ]
  %t1790 = phi i512 [ %t1742, %block_0_4075ec ], [ %t1769, %block_0_407606 ]
  %t1791 = phi i512 [ %t1743, %block_0_4075ec ], [ %t1770, %block_0_407606 ]
  %t1792 = phi i512 [ %t1744, %block_0_4075ec ], [ %t1771, %block_0_407606 ]
  %t1793 = phi i512 [ %t1745, %block_0_4075ec ], [ %t1772, %block_0_407606 ]
  ; r1704 := (bitcast r1696 (vec 8 double))
  %t1794 = bitcast i512 %t1786 to <8 x double>
  ; r1705 := (bitcast r1697 (vec 8 double))
  %t1795 = bitcast i512 %t1787 to <8 x double>
  ; r1706 := (bitcast r1698 (vec 8 double))
  %t1796 = bitcast i512 %t1788 to <8 x double>
  ; r1707 := (bitcast r1699 (vec 8 double))
  %t1797 = bitcast i512 %t1789 to <8 x double>
  ; r1708 := (bitcast r1700 (vec 8 double))
  %t1798 = bitcast i512 %t1790 to <8 x double>
  ; r1709 := (bitcast r1701 (vec 8 double))
  %t1799 = bitcast i512 %t1791 to <8 x double>
  ; r1710 := (bitcast r1702 (vec 8 double))
  %t1800 = bitcast i512 %t1792 to <8 x double>
  ; r1711 := (bitcast r1703 (vec 8 double))
  %t1801 = bitcast i512 %t1793 to <8 x double>
  ; r1712 := call pthread_mutex_trylock_int(r1690, r1691, r1688, r1687, r1692, r1693, r1704, r1705, r1706, r1707, r1708, r1709, r1710, r1711)
  %t1802 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t1780, i64 %t1781, i64 %t1778, i64 %t1777, i64 %t1782, i64 %t1783, <8 x double> %t1794, <8 x double> %t1795, <8 x double> %t1796, <8 x double> %t1797, <8 x double> %t1798, <8 x double> %t1799, <8 x double> %t1800, <8 x double> %t1801)
  ; r1713 := (tuple_field r1712 0)
  %t1803 = extractvalue { i64, i64, <8 x double> } %t1802, 0
  ; r1714 := (tuple_field r1712 1)
  %t1804 = extractvalue { i64, i64, <8 x double> } %t1802, 1
  ; r1715 := (tuple_field r1712 2)
  %t1805 = extractvalue { i64, i64, <8 x double> } %t1802, 2
  ; r1716 := (bitcast r1715 (bv 512))
  %t1806 = bitcast <8 x double> %t1805 to i512
  br label %block_0_407623
block_0_407623:
  %t1807 = phi i64 [ %t1803, %block_0_40761b ]
  %t1808 = phi i64 [ %t1777, %block_0_40761b ]
  %t1809 = phi i64 [ %t1804, %block_0_40761b ]
  %t1810 = phi i64 [ %t1779, %block_0_40761b ]
  %t1811 = phi i64 [ %t1780, %block_0_40761b ]
  %t1812 = phi i64 [ %t1781, %block_0_40761b ]
  %t1813 = phi i64 [ %t1782, %block_0_40761b ]
  %t1814 = phi i64 [ %t1783, %block_0_40761b ]
  %t1815 = phi i64 [ %t1784, %block_0_40761b ]
  %t1816 = phi i64 [ %t1785, %block_0_40761b ]
  %t1817 = phi i512 [ %t1806, %block_0_40761b ]
  %t1818 = phi i512 [ %t1787, %block_0_40761b ]
  %t1819 = phi i512 [ %t1788, %block_0_40761b ]
  %t1820 = phi i512 [ %t1789, %block_0_40761b ]
  %t1821 = phi i512 [ %t1790, %block_0_40761b ]
  %t1822 = phi i512 [ %t1791, %block_0_40761b ]
  %t1823 = phi i512 [ %t1792, %block_0_40761b ]
  %t1824 = phi i512 [ %t1793, %block_0_40761b ]
  ; r1735 := (trunc r1717 32)
  %t1825 = trunc i64 %t1807 to i32
  ; r1736 := (eq r1735 (0x0 : bv 32))
  %t1826 = icmp eq i32 %t1825, 0
  br i1 %t1826, label %block_0_407243, label %block_0_40762b
block_0_40762b:
  %t1827 = phi i64 [ %t1808, %block_0_407623 ]
  %t1828 = phi i64 [ %t1809, %block_0_407623 ]
  %t1829 = phi i64 [ %t1810, %block_0_407623 ]
  %t1830 = phi i64 [ %t1811, %block_0_407623 ]
  %t1831 = phi i64 [ %t1812, %block_0_407623 ]
  %t1832 = phi i64 [ %t1813, %block_0_407623 ]
  %t1833 = phi i64 [ %t1814, %block_0_407623 ]
  %t1834 = phi i64 [ %t1815, %block_0_407623 ]
  %t1835 = phi i64 [ %t1816, %block_0_407623 ]
  %t1836 = phi i512 [ %t1817, %block_0_407623 ]
  %t1837 = phi i512 [ %t1818, %block_0_407623 ]
  %t1838 = phi i512 [ %t1819, %block_0_407623 ]
  %t1839 = phi i512 [ %t1820, %block_0_407623 ]
  %t1840 = phi i512 [ %t1821, %block_0_407623 ]
  %t1841 = phi i512 [ %t1822, %block_0_407623 ]
  %t1842 = phi i512 [ %t1823, %block_0_407623 ]
  %t1843 = phi i512 [ %t1824, %block_0_407623 ]
  ; r1754 := (trunc r1744 32)
  %t1844 = trunc i64 %t1834 to i32
  ; r1755 := (bv_add r1754 (0x1 : bv 32))
  %t1845 = add i32 %t1844, 1
  ; r1756 := (uext r1755 64)
  %t1846 = zext i32 %t1845 to i64
  ; r1757 := (eq r1754 (0xb : bv 32))
  %t1847 = icmp eq i32 %t1844, 11
  br i1 %t1847, label %block_0_407635, label %block_0_4075ec
block_0_407635:
  %t1848 = phi i64 [ %t1696, %block_0_4075dd ], [ %t1827, %block_0_40762b ]
  %t1849 = phi i64 [ %t1697, %block_0_4075dd ], [ %t1828, %block_0_40762b ]
  %t1850 = phi i64 [ %t1698, %block_0_4075dd ], [ %t1829, %block_0_40762b ]
  %t1851 = phi i64 [ %t1699, %block_0_4075dd ], [ %t1830, %block_0_40762b ]
  %t1852 = phi i64 [ %t1700, %block_0_4075dd ], [ %t1831, %block_0_40762b ]
  %t1853 = phi i64 [ %t1701, %block_0_4075dd ], [ %t1832, %block_0_40762b ]
  %t1854 = phi i64 [ %t1702, %block_0_4075dd ], [ %t1833, %block_0_40762b ]
  %t1855 = phi i64 [ %t1703, %block_0_4075dd ], [ %t1835, %block_0_40762b ]
  %t1856 = phi i512 [ %t1704, %block_0_4075dd ], [ %t1836, %block_0_40762b ]
  %t1857 = phi i512 [ %t1705, %block_0_4075dd ], [ %t1837, %block_0_40762b ]
  %t1858 = phi i512 [ %t1706, %block_0_4075dd ], [ %t1838, %block_0_40762b ]
  %t1859 = phi i512 [ %t1707, %block_0_4075dd ], [ %t1839, %block_0_40762b ]
  %t1860 = phi i512 [ %t1708, %block_0_4075dd ], [ %t1840, %block_0_40762b ]
  %t1861 = phi i512 [ %t1709, %block_0_4075dd ], [ %t1841, %block_0_40762b ]
  %t1862 = phi i512 [ %t1710, %block_0_4075dd ], [ %t1842, %block_0_40762b ]
  %t1863 = phi i512 [ %t1711, %block_0_4075dd ], [ %t1843, %block_0_40762b ]
  ; r1774 := (bitcast r1766 (vec 8 double))
  %t1864 = bitcast i512 %t1856 to <8 x double>
  ; r1775 := (bitcast r1767 (vec 8 double))
  %t1865 = bitcast i512 %t1857 to <8 x double>
  ; r1776 := (bitcast r1768 (vec 8 double))
  %t1866 = bitcast i512 %t1858 to <8 x double>
  ; r1777 := (bitcast r1769 (vec 8 double))
  %t1867 = bitcast i512 %t1859 to <8 x double>
  ; r1778 := (bitcast r1770 (vec 8 double))
  %t1868 = bitcast i512 %t1860 to <8 x double>
  ; r1779 := (bitcast r1771 (vec 8 double))
  %t1869 = bitcast i512 %t1861 to <8 x double>
  ; r1780 := (bitcast r1772 (vec 8 double))
  %t1870 = bitcast i512 %t1862 to <8 x double>
  ; r1781 := (bitcast r1773 (vec 8 double))
  %t1871 = bitcast i512 %t1863 to <8 x double>
  ; r1782 := call pthread_mutex_lock_int(r1761, r1762, r1759, r1758, r1763, r1764, r1774, r1775, r1776, r1777, r1778, r1779, r1780, r1781)
  %t1872 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 %t1851, i64 %t1852, i64 %t1849, i64 %t1848, i64 %t1853, i64 %t1854, <8 x double> %t1864, <8 x double> %t1865, <8 x double> %t1866, <8 x double> %t1867, <8 x double> %t1868, <8 x double> %t1869, <8 x double> %t1870, <8 x double> %t1871)
  ; r1783 := (tuple_field r1782 0)
  %t1873 = extractvalue { i64, i64, <8 x double> } %t1872, 0
  ; r1784 := (tuple_field r1782 1)
  %t1874 = extractvalue { i64, i64, <8 x double> } %t1872, 1
  ; r1785 := (tuple_field r1782 2)
  %t1875 = extractvalue { i64, i64, <8 x double> } %t1872, 2
  ; r1786 := (bitcast r1785 (bv 512))
  %t1876 = bitcast <8 x double> %t1875 to i512
  br label %block_0_40763d
block_0_40763d:
  %t1877 = phi i64 [ %t1848, %block_0_407635 ]
  %t1878 = phi i64 [ %t1850, %block_0_407635 ]
  %t1879 = phi i64 [ %t1851, %block_0_407635 ]
  %t1880 = phi i64 [ %t1852, %block_0_407635 ]
  %t1881 = phi i64 [ %t1853, %block_0_407635 ]
  %t1882 = phi i64 [ %t1854, %block_0_407635 ]
  %t1883 = phi i64 [ %t1855, %block_0_407635 ]
  %t1884 = phi i512 [ %t1876, %block_0_407635 ]
  %t1885 = phi i512 [ %t1857, %block_0_407635 ]
  %t1886 = phi i512 [ %t1858, %block_0_407635 ]
  %t1887 = phi i512 [ %t1859, %block_0_407635 ]
  %t1888 = phi i512 [ %t1860, %block_0_407635 ]
  %t1889 = phi i512 [ %t1861, %block_0_407635 ]
  %t1890 = phi i512 [ %t1862, %block_0_407635 ]
  %t1891 = phi i512 [ %t1863, %block_0_407635 ]
  br label %block_0_407243
block_0_407642:
  %t1892 = phi i64 [ %t112, %block_0_4070db ], [ %t137, %block_0_4070f4 ]
  %t1893 = phi i64 [ %t114, %block_0_4070db ], [ %t140, %block_0_4070f4 ]
  %t1894 = phi i64 [ %t115, %block_0_4070db ], [ %t141, %block_0_4070f4 ]
  %t1895 = phi i64 [ %t116, %block_0_4070db ], [ %t142, %block_0_4070f4 ]
  %t1896 = phi i64 [ %t117, %block_0_4070db ], [ %t144, %block_0_4070f4 ]
  %t1897 = phi i64 [ %t118, %block_0_4070db ], [ %t145, %block_0_4070f4 ]
  %t1898 = phi i64 [ %t119, %block_0_4070db ], [ %t146, %block_0_4070f4 ]
  %t1899 = phi i64 [ %t120, %block_0_4070db ], [ %t147, %block_0_4070f4 ]
  %t1900 = phi i512 [ %t121, %block_0_4070db ], [ %t148, %block_0_4070f4 ]
  %t1901 = phi i512 [ %t122, %block_0_4070db ], [ %t149, %block_0_4070f4 ]
  %t1902 = phi i512 [ %t123, %block_0_4070db ], [ %t150, %block_0_4070f4 ]
  %t1903 = phi i512 [ %t124, %block_0_4070db ], [ %t151, %block_0_4070f4 ]
  %t1904 = phi i512 [ %t125, %block_0_4070db ], [ %t152, %block_0_4070f4 ]
  %t1905 = phi i512 [ %t126, %block_0_4070db ], [ %t153, %block_0_4070f4 ]
  %t1906 = phi i512 [ %t127, %block_0_4070db ], [ %t154, %block_0_4070f4 ]
  %t1907 = phi i512 [ %t128, %block_0_4070db ], [ %t155, %block_0_4070f4 ]
  ; r1818 := (bitcast r1810 (vec 8 double))
  %t1908 = bitcast i512 %t1900 to <8 x double>
  ; r1819 := (bitcast r1811 (vec 8 double))
  %t1909 = bitcast i512 %t1901 to <8 x double>
  ; r1820 := (bitcast r1812 (vec 8 double))
  %t1910 = bitcast i512 %t1902 to <8 x double>
  ; r1821 := (bitcast r1813 (vec 8 double))
  %t1911 = bitcast i512 %t1903 to <8 x double>
  ; r1822 := (bitcast r1814 (vec 8 double))
  %t1912 = bitcast i512 %t1904 to <8 x double>
  ; r1823 := (bitcast r1815 (vec 8 double))
  %t1913 = bitcast i512 %t1905 to <8 x double>
  ; r1824 := (bitcast r1816 (vec 8 double))
  %t1914 = bitcast i512 %t1906 to <8 x double>
  ; r1825 := (bitcast r1817 (vec 8 double))
  %t1915 = bitcast i512 %t1907 to <8 x double>
  ; r1826 := call arena_bin_malloc_hard(r1807, r1806, r1818, r1819, r1820, r1821, r1822, r1823, r1824, r1825)
  %t1916 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @arena_bin_malloc_hard(i64 %t1897, i64 %t1896, <8 x double> %t1908, <8 x double> %t1909, <8 x double> %t1910, <8 x double> %t1911, <8 x double> %t1912, <8 x double> %t1913, <8 x double> %t1914, <8 x double> %t1915)
  ; r1827 := (tuple_field r1826 0)
  %t1917 = extractvalue { i64, i64, <8 x double> } %t1916, 0
  ; r1828 := (tuple_field r1826 1)
  %t1918 = extractvalue { i64, i64, <8 x double> } %t1916, 1
  ; r1829 := (tuple_field r1826 2)
  %t1919 = extractvalue { i64, i64, <8 x double> } %t1916, 2
  ; r1830 := (bitcast r1829 (bv 512))
  %t1920 = bitcast <8 x double> %t1919 to i512
  br label %block_0_40764d
block_0_40764d:
  %t1921 = phi i64 [ %t1917, %block_0_407642 ]
  %t1922 = phi i64 [ %t1892, %block_0_407642 ]
  %t1923 = phi i64 [ %t1918, %block_0_407642 ]
  %t1924 = phi i64 [ %t1893, %block_0_407642 ]
  %t1925 = phi i64 [ %t1894, %block_0_407642 ]
  %t1926 = phi i64 [ %t1895, %block_0_407642 ]
  %t1927 = phi i64 [ %t1897, %block_0_407642 ]
  %t1928 = phi i64 [ %t1898, %block_0_407642 ]
  %t1929 = phi i64 [ %t1899, %block_0_407642 ]
  %t1930 = phi i512 [ %t1920, %block_0_407642 ]
  %t1931 = phi i512 [ %t1901, %block_0_407642 ]
  %t1932 = phi i512 [ %t1902, %block_0_407642 ]
  %t1933 = phi i512 [ %t1903, %block_0_407642 ]
  %t1934 = phi i512 [ %t1904, %block_0_407642 ]
  %t1935 = phi i512 [ %t1905, %block_0_407642 ]
  %t1936 = phi i512 [ %t1906, %block_0_407642 ]
  %t1937 = phi i512 [ %t1907, %block_0_407642 ]
  br label %block_0_407650
block_0_407650:
  %t1938 = phi i64 [ %t1922, %block_0_40764d ], [ %t2044, %block_0_4076a8 ], [ %t2257, %block_0_407714 ]
  %t1939 = phi i64 [ %t1923, %block_0_40764d ], [ %t2045, %block_0_4076a8 ], [ %t2258, %block_0_407714 ]
  %t1940 = phi i64 [ %t1924, %block_0_40764d ], [ %t2046, %block_0_4076a8 ], [ %t2259, %block_0_407714 ]
  %t1941 = phi i64 [ %t1925, %block_0_40764d ], [ %t2047, %block_0_4076a8 ], [ %t2260, %block_0_407714 ]
  %t1942 = phi i64 [ %t1926, %block_0_40764d ], [ %t2048, %block_0_4076a8 ], [ %t2261, %block_0_407714 ]
  %t1943 = phi i64 [ %t1921, %block_0_40764d ], [ %t2043, %block_0_4076a8 ], [ %t2263, %block_0_407714 ]
  %t1944 = phi i64 [ %t1927, %block_0_40764d ], [ %t2049, %block_0_4076a8 ], [ %t2264, %block_0_407714 ]
  %t1945 = phi i64 [ %t1928, %block_0_40764d ], [ %t2050, %block_0_4076a8 ], [ %t2265, %block_0_407714 ]
  %t1946 = phi i64 [ %t1929, %block_0_40764d ], [ %t2051, %block_0_4076a8 ], [ %t2266, %block_0_407714 ]
  %t1947 = phi i512 [ %t1930, %block_0_40764d ], [ %t2052, %block_0_4076a8 ], [ %t2267, %block_0_407714 ]
  %t1948 = phi i512 [ %t1931, %block_0_40764d ], [ %t2053, %block_0_4076a8 ], [ %t2268, %block_0_407714 ]
  %t1949 = phi i512 [ %t1932, %block_0_40764d ], [ %t2054, %block_0_4076a8 ], [ %t2269, %block_0_407714 ]
  %t1950 = phi i512 [ %t1933, %block_0_40764d ], [ %t2055, %block_0_4076a8 ], [ %t2270, %block_0_407714 ]
  %t1951 = phi i512 [ %t1934, %block_0_40764d ], [ %t2056, %block_0_4076a8 ], [ %t2271, %block_0_407714 ]
  %t1952 = phi i512 [ %t1935, %block_0_40764d ], [ %t2057, %block_0_4076a8 ], [ %t2272, %block_0_407714 ]
  %t1953 = phi i512 [ %t1936, %block_0_40764d ], [ %t2058, %block_0_4076a8 ], [ %t2273, %block_0_407714 ]
  %t1954 = phi i512 [ %t1937, %block_0_40764d ], [ %t2059, %block_0_4076a8 ], [ %t2274, %block_0_407714 ]
  ; r1865 := (eq r1853 (0x0 : bv 64))
  %t1955 = icmp eq i64 %t1943, 0
  br i1 %t1955, label %block_0_4076e1, label %block_0_407659
block_0_407659:
  %t1956 = phi i64 [ %t1938, %block_0_407650 ]
  %t1957 = phi i64 [ %t1939, %block_0_407650 ]
  %t1958 = phi i64 [ %t1940, %block_0_407650 ]
  %t1959 = phi i64 [ %t1941, %block_0_407650 ]
  %t1960 = phi i64 [ %t1942, %block_0_407650 ]
  %t1961 = phi i64 [ %t1943, %block_0_407650 ]
  %t1962 = phi i64 [ %t1944, %block_0_407650 ]
  %t1963 = phi i64 [ %t1945, %block_0_407650 ]
  %t1964 = phi i64 [ %t1946, %block_0_407650 ]
  %t1965 = phi i512 [ %t1947, %block_0_407650 ]
  %t1966 = phi i512 [ %t1948, %block_0_407650 ]
  %t1967 = phi i512 [ %t1949, %block_0_407650 ]
  %t1968 = phi i512 [ %t1950, %block_0_407650 ]
  %t1969 = phi i512 [ %t1951, %block_0_407650 ]
  %t1970 = phi i512 [ %t1952, %block_0_407650 ]
  %t1971 = phi i512 [ %t1953, %block_0_407650 ]
  %t1972 = phi i512 [ %t1954, %block_0_407650 ]
  ; r1883 := (read (0x6356e8 : bv 64) (bv 32))
  %t1973 = inttoptr i64 6510312 to i32*
  %t1974 = load i32, i32* %t1973
  ; r1884 := (eq r1883 (0x0 : bv 32))
  %t1975 = icmp eq i32 %t1974, 0
  br i1 %t1975, label %block_0_407663, label %block_0_4076ba
block_0_407663:
  %t1976 = phi i64 [ %t1957, %block_0_407659 ], [ %t2125, %block_0_4076c2 ]
  %t1977 = phi i64 [ %t1961, %block_0_407659 ], [ %t2126, %block_0_4076c2 ]
  %t1978 = phi i64 [ %t1963, %block_0_407659 ], [ %t2127, %block_0_4076c2 ]
  %t1979 = phi i64 [ %t1964, %block_0_407659 ], [ %t2128, %block_0_4076c2 ]
  %t1980 = phi i512 [ %t1965, %block_0_407659 ], [ %t2129, %block_0_4076c2 ]
  ; r1890 := (trunc r1888 8)
  %t1981 = trunc i64 %t1979 to i8
  ; r1891 := (eq r1890 (0x0 : bv 8))
  %t1982 = icmp eq i8 %t1981, 0
  br i1 %t1982, label %block_0_407668, label %block_0_407682
block_0_407668:
  %t1983 = phi i64 [ %t1976, %block_0_407663 ]
  %t1984 = phi i64 [ %t1977, %block_0_407663 ]
  %t1985 = phi i64 [ %t1978, %block_0_407663 ]
  %t1986 = phi i512 [ %t1980, %block_0_407663 ]
  ; r1896 := (read (0x635461 : bv 64) (bv 8))
  %t1987 = inttoptr i64 6509665 to i8*
  %t1988 = load i8, i8* %t1987
  ; r1897 := (eq r1896 (0x0 : bv 8))
  %t1989 = icmp eq i8 %t1988, 0
  br i1 %t1989, label %block_0_407675, label %block_0_4076fc
block_0_407675:
  %t1990 = phi i64 [ %t1983, %block_0_407668 ]
  %t1991 = phi i64 [ %t1984, %block_0_407668 ]
  %t1992 = phi i64 [ %t1985, %block_0_407668 ]
  %t1993 = phi i512 [ %t1986, %block_0_407668 ]
  ; r1902 := (read (0x635465 : bv 64) (bv 8))
  %t1994 = inttoptr i64 6509669 to i8*
  %t1995 = load i8, i8* %t1994
  ; r1903 := (eq r1902 (0x0 : bv 8))
  %t1996 = icmp eq i8 %t1995, 0
  br i1 %t1996, label %block_0_407292, label %block_0_407682
block_0_407682:
  %t1997 = phi i64 [ %t1977, %block_0_407663 ], [ %t1991, %block_0_407675 ]
  %t1998 = phi i64 [ %t1978, %block_0_407663 ], [ %t1992, %block_0_407675 ]
  %t1999 = phi i512 [ %t1980, %block_0_407663 ], [ %t1993, %block_0_407675 ]
  ; r1907 := (bitcast r1906 (vec 8 double))
  %t2000 = bitcast i512 %t1999 to <8 x double>
  ; r1908 := call memset(r1904, (0x0 : bv 64), r1905, r1907)
  %t2001 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t1997, i64 0, i64 %t1998, <8 x double> %t2000)
  ; r1909 := (tuple_field r1908 0)
  %t2002 = extractvalue { i64, i64, <8 x double> } %t2001, 0
  ; r1910 := (tuple_field r1908 1)
  %t2003 = extractvalue { i64, i64, <8 x double> } %t2001, 1
  ; r1911 := (tuple_field r1908 2)
  %t2004 = extractvalue { i64, i64, <8 x double> } %t2001, 2
  ; r1912 := (bitcast r1911 (bv 512))
  %t2005 = bitcast <8 x double> %t2004 to i512
  br label %block_0_40768f
block_0_40768f:
  %t2006 = phi i64 [ %t2003, %block_0_407682 ]
  %t2007 = phi i64 [ %t1997, %block_0_407682 ]
  %t2008 = phi i512 [ %t2005, %block_0_407682 ]
  br label %block_0_407292
block_0_407694:
  %t2009 = phi i64 [ %t709, %block_0_4072f8 ], [ %t753, %block_0_407311 ]
  %t2010 = phi i64 [ %t710, %block_0_4072f8 ], [ %t734, %block_0_407311 ]
  %t2011 = phi i64 [ %t711, %block_0_4072f8 ], [ %t735, %block_0_407311 ]
  %t2012 = phi i64 [ %t712, %block_0_4072f8 ], [ %t736, %block_0_407311 ]
  %t2013 = phi i64 [ %t713, %block_0_4072f8 ], [ %t737, %block_0_407311 ]
  %t2014 = phi i64 [ %t714, %block_0_4072f8 ], [ %t739, %block_0_407311 ]
  %t2015 = phi i64 [ %t715, %block_0_4072f8 ], [ %t740, %block_0_407311 ]
  %t2016 = phi i64 [ %t716, %block_0_4072f8 ], [ %t741, %block_0_407311 ]
  %t2017 = phi i512 [ %t717, %block_0_4072f8 ], [ %t742, %block_0_407311 ]
  %t2018 = phi i512 [ %t718, %block_0_4072f8 ], [ %t743, %block_0_407311 ]
  %t2019 = phi i512 [ %t719, %block_0_4072f8 ], [ %t744, %block_0_407311 ]
  %t2020 = phi i512 [ %t720, %block_0_4072f8 ], [ %t745, %block_0_407311 ]
  %t2021 = phi i512 [ %t721, %block_0_4072f8 ], [ %t746, %block_0_407311 ]
  %t2022 = phi i512 [ %t722, %block_0_4072f8 ], [ %t747, %block_0_407311 ]
  %t2023 = phi i512 [ %t723, %block_0_4072f8 ], [ %t748, %block_0_407311 ]
  %t2024 = phi i512 [ %t724, %block_0_4072f8 ], [ %t749, %block_0_407311 ]
  ; r1932 := (bv_mul (0x8 : bv 64) r1917)
  %t2025 = mul i64 8, %t2010
  ; r1933 := (bv_add r1917 r1932)
  %t2026 = add i64 %t2010, %t2025
  ; r1934 := (bv_mul (0x8 : bv 64) r1933)
  %t2027 = mul i64 8, %t2026
  ; r1935 := (bv_add r1921 r1934)
  %t2028 = add i64 %t2014, %t2027
  ; r1936 := (bv_add r1935 (0x88 : bv 64))
  %t2029 = add i64 %t2028, 136
  ; r1937 := (bitcast r1924 (vec 8 double))
  %t2030 = bitcast i512 %t2017 to <8 x double>
  ; r1938 := (bitcast r1925 (vec 8 double))
  %t2031 = bitcast i512 %t2018 to <8 x double>
  ; r1939 := (bitcast r1926 (vec 8 double))
  %t2032 = bitcast i512 %t2019 to <8 x double>
  ; r1940 := (bitcast r1927 (vec 8 double))
  %t2033 = bitcast i512 %t2020 to <8 x double>
  ; r1941 := (bitcast r1928 (vec 8 double))
  %t2034 = bitcast i512 %t2021 to <8 x double>
  ; r1942 := (bitcast r1929 (vec 8 double))
  %t2035 = bitcast i512 %t2022 to <8 x double>
  ; r1943 := (bitcast r1930 (vec 8 double))
  %t2036 = bitcast i512 %t2023 to <8 x double>
  ; r1944 := (bitcast r1931 (vec 8 double))
  %t2037 = bitcast i512 %t2024 to <8 x double>
  ; r1945 := call arena_bin_malloc_hard(r1921, r1936, r1937, r1938, r1939, r1940, r1941, r1942, r1943, r1944)
  %t2038 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @arena_bin_malloc_hard(i64 %t2014, i64 %t2029, <8 x double> %t2030, <8 x double> %t2031, <8 x double> %t2032, <8 x double> %t2033, <8 x double> %t2034, <8 x double> %t2035, <8 x double> %t2036, <8 x double> %t2037)
  ; r1946 := (tuple_field r1945 0)
  %t2039 = extractvalue { i64, i64, <8 x double> } %t2038, 0
  ; r1947 := (tuple_field r1945 1)
  %t2040 = extractvalue { i64, i64, <8 x double> } %t2038, 1
  ; r1948 := (tuple_field r1945 2)
  %t2041 = extractvalue { i64, i64, <8 x double> } %t2038, 2
  ; r1949 := (bitcast r1948 (bv 512))
  %t2042 = bitcast <8 x double> %t2041 to i512
  br label %block_0_4076a8
block_0_4076a8:
  %t2043 = phi i64 [ %t2039, %block_0_407694 ]
  %t2044 = phi i64 [ %t2009, %block_0_407694 ]
  %t2045 = phi i64 [ %t2040, %block_0_407694 ]
  %t2046 = phi i64 [ %t2011, %block_0_407694 ]
  %t2047 = phi i64 [ %t2012, %block_0_407694 ]
  %t2048 = phi i64 [ %t2013, %block_0_407694 ]
  %t2049 = phi i64 [ %t2014, %block_0_407694 ]
  %t2050 = phi i64 [ %t2015, %block_0_407694 ]
  %t2051 = phi i64 [ %t2016, %block_0_407694 ]
  %t2052 = phi i512 [ %t2042, %block_0_407694 ]
  %t2053 = phi i512 [ %t2018, %block_0_407694 ]
  %t2054 = phi i512 [ %t2019, %block_0_407694 ]
  %t2055 = phi i512 [ %t2020, %block_0_407694 ]
  %t2056 = phi i512 [ %t2021, %block_0_407694 ]
  %t2057 = phi i512 [ %t2022, %block_0_407694 ]
  %t2058 = phi i512 [ %t2023, %block_0_407694 ]
  %t2059 = phi i512 [ %t2024, %block_0_407694 ]
  br label %block_0_407650
block_0_4076ad:
  %t2060 = phi i64 [ %t592, %block_0_407263 ]
  %t2061 = phi i64 [ %t593, %block_0_407263 ]
  %t2062 = phi i64 [ %t594, %block_0_407263 ]
  %t2063 = phi i64 [ %t595, %block_0_407263 ]
  %t2064 = phi i64 [ %t596, %block_0_407263 ]
  %t2065 = phi i64 [ %t597, %block_0_407263 ]
  %t2066 = phi i64 [ %t598, %block_0_407263 ]
  %t2067 = phi i64 [ %t599, %block_0_407263 ]
  %t2068 = phi i64 [ %t600, %block_0_407263 ]
  %t2069 = phi i512 [ %t601, %block_0_407263 ]
  %t2070 = phi i512 [ %t602, %block_0_407263 ]
  %t2071 = phi i512 [ %t603, %block_0_407263 ]
  %t2072 = phi i512 [ %t604, %block_0_407263 ]
  %t2073 = phi i512 [ %t605, %block_0_407263 ]
  %t2074 = phi i512 [ %t606, %block_0_407263 ]
  %t2075 = phi i512 [ %t607, %block_0_407263 ]
  %t2076 = phi i512 [ %t608, %block_0_407263 ]
  ; r1984 := (bitcast r1976 (vec 8 double))
  %t2077 = bitcast i512 %t2069 to <8 x double>
  ; r1985 := (bitcast r1977 (vec 8 double))
  %t2078 = bitcast i512 %t2070 to <8 x double>
  ; r1986 := (bitcast r1978 (vec 8 double))
  %t2079 = bitcast i512 %t2071 to <8 x double>
  ; r1987 := (bitcast r1979 (vec 8 double))
  %t2080 = bitcast i512 %t2072 to <8 x double>
  ; r1988 := (bitcast r1980 (vec 8 double))
  %t2081 = bitcast i512 %t2073 to <8 x double>
  ; r1989 := (bitcast r1981 (vec 8 double))
  %t2082 = bitcast i512 %t2074 to <8 x double>
  ; r1990 := (bitcast r1982 (vec 8 double))
  %t2083 = bitcast i512 %t2075 to <8 x double>
  ; r1991 := (bitcast r1983 (vec 8 double))
  %t2084 = bitcast i512 %t2076 to <8 x double>
  ; r1992 := call pthread_mutex_unlock_int(r1970, r1971, r1968, r1967, r1972, r1973, r1984, r1985, r1986, r1987, r1988, r1989, r1990, r1991)
  %t2085 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t2063, i64 %t2064, i64 %t2061, i64 %t2060, i64 %t2065, i64 %t2066, <8 x double> %t2077, <8 x double> %t2078, <8 x double> %t2079, <8 x double> %t2080, <8 x double> %t2081, <8 x double> %t2082, <8 x double> %t2083, <8 x double> %t2084)
  ; r1993 := (tuple_field r1992 0)
  %t2086 = extractvalue { i64, i64, <8 x double> } %t2085, 0
  ; r1994 := (tuple_field r1992 1)
  %t2087 = extractvalue { i64, i64, <8 x double> } %t2085, 1
  ; r1995 := (tuple_field r1992 2)
  %t2088 = extractvalue { i64, i64, <8 x double> } %t2085, 2
  ; r1996 := (bitcast r1995 (bv 512))
  %t2089 = bitcast <8 x double> %t2088 to i512
  br label %block_0_4076b5
block_0_4076b5:
  %t2090 = phi i64 [ %t2087, %block_0_4076ad ]
  %t2091 = phi i64 [ %t2062, %block_0_4076ad ]
  %t2092 = phi i64 [ %t2067, %block_0_4076ad ]
  %t2093 = phi i64 [ %t2068, %block_0_4076ad ]
  %t2094 = phi i512 [ %t2089, %block_0_4076ad ]
  br label %block_0_407273
block_0_4076ba:
  %t2095 = phi i64 [ %t1956, %block_0_407659 ]
  %t2096 = phi i64 [ %t1957, %block_0_407659 ]
  %t2097 = phi i64 [ %t1958, %block_0_407659 ]
  %t2098 = phi i64 [ %t1959, %block_0_407659 ]
  %t2099 = phi i64 [ %t1960, %block_0_407659 ]
  %t2100 = phi i64 [ %t1961, %block_0_407659 ]
  %t2101 = phi i64 [ %t1962, %block_0_407659 ]
  %t2102 = phi i64 [ %t1963, %block_0_407659 ]
  %t2103 = phi i64 [ %t1964, %block_0_407659 ]
  %t2104 = phi i512 [ %t1965, %block_0_407659 ]
  %t2105 = phi i512 [ %t1966, %block_0_407659 ]
  %t2106 = phi i512 [ %t1967, %block_0_407659 ]
  %t2107 = phi i512 [ %t1968, %block_0_407659 ]
  %t2108 = phi i512 [ %t1969, %block_0_407659 ]
  %t2109 = phi i512 [ %t1970, %block_0_407659 ]
  %t2110 = phi i512 [ %t1971, %block_0_407659 ]
  %t2111 = phi i512 [ %t1972, %block_0_407659 ]
  ; r2019 := (bitcast r2011 (vec 8 double))
  %t2112 = bitcast i512 %t2104 to <8 x double>
  ; r2020 := (bitcast r2012 (vec 8 double))
  %t2113 = bitcast i512 %t2105 to <8 x double>
  ; r2021 := (bitcast r2013 (vec 8 double))
  %t2114 = bitcast i512 %t2106 to <8 x double>
  ; r2022 := (bitcast r2014 (vec 8 double))
  %t2115 = bitcast i512 %t2107 to <8 x double>
  ; r2023 := (bitcast r2015 (vec 8 double))
  %t2116 = bitcast i512 %t2108 to <8 x double>
  ; r2024 := (bitcast r2016 (vec 8 double))
  %t2117 = bitcast i512 %t2109 to <8 x double>
  ; r2025 := (bitcast r2017 (vec 8 double))
  %t2118 = bitcast i512 %t2110 to <8 x double>
  ; r2026 := (bitcast r2018 (vec 8 double))
  %t2119 = bitcast i512 %t2111 to <8 x double>
  ; r2027 := call pthread_mutex_unlock_int(r2008, r2004, r2003, r2002, r2005, r2006, r2019, r2020, r2021, r2022, r2023, r2024, r2025, r2026)
  %t2120 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t2101, i64 %t2097, i64 %t2096, i64 %t2095, i64 %t2098, i64 %t2099, <8 x double> %t2112, <8 x double> %t2113, <8 x double> %t2114, <8 x double> %t2115, <8 x double> %t2116, <8 x double> %t2117, <8 x double> %t2118, <8 x double> %t2119)
  ; r2028 := (tuple_field r2027 0)
  %t2121 = extractvalue { i64, i64, <8 x double> } %t2120, 0
  ; r2029 := (tuple_field r2027 1)
  %t2122 = extractvalue { i64, i64, <8 x double> } %t2120, 1
  ; r2030 := (tuple_field r2027 2)
  %t2123 = extractvalue { i64, i64, <8 x double> } %t2120, 2
  ; r2031 := (bitcast r2030 (bv 512))
  %t2124 = bitcast <8 x double> %t2123 to i512
  br label %block_0_4076c2
block_0_4076c2:
  %t2125 = phi i64 [ %t2122, %block_0_4076ba ]
  %t2126 = phi i64 [ %t2100, %block_0_4076ba ]
  %t2127 = phi i64 [ %t2102, %block_0_4076ba ]
  %t2128 = phi i64 [ %t2103, %block_0_4076ba ]
  %t2129 = phi i512 [ %t2124, %block_0_4076ba ]
  br label %block_0_407663
block_0_4076c4:
  %t2130 = phi i64 [ %t575, %block_0_407257 ]
  %t2131 = phi i64 [ %t576, %block_0_407257 ]
  %t2132 = phi i64 [ %t578, %block_0_407257 ]
  %t2133 = phi i64 [ %t579, %block_0_407257 ]
  %t2134 = phi i64 [ %t580, %block_0_407257 ]
  %t2135 = phi i64 [ %t581, %block_0_407257 ]
  %t2136 = phi i64 [ %t574, %block_0_407257 ]
  %t2137 = phi i512 [ %t583, %block_0_407257 ]
  %t2138 = phi i512 [ %t584, %block_0_407257 ]
  %t2139 = phi i512 [ %t585, %block_0_407257 ]
  %t2140 = phi i512 [ %t586, %block_0_407257 ]
  %t2141 = phi i512 [ %t587, %block_0_407257 ]
  %t2142 = phi i512 [ %t588, %block_0_407257 ]
  %t2143 = phi i512 [ %t589, %block_0_407257 ]
  %t2144 = phi i512 [ %t590, %block_0_407257 ]
  ; r2052 := (read (0x6356e8 : bv 64) (bv 32))
  %t2145 = inttoptr i64 6510312 to i32*
  %t2146 = load i32, i32* %t2145
  ; r2053 := (eq r2052 (0x0 : bv 32))
  %t2147 = icmp eq i32 %t2146, 0
  br i1 %t2147, label %block_0_407292, label %block_0_4076d4
block_0_4076d4:
  %t2148 = phi i64 [ %t2130, %block_0_4076c4 ]
  %t2149 = phi i64 [ %t2131, %block_0_4076c4 ]
  %t2150 = phi i64 [ %t2132, %block_0_4076c4 ]
  %t2151 = phi i64 [ %t2133, %block_0_4076c4 ]
  %t2152 = phi i64 [ %t2134, %block_0_4076c4 ]
  %t2153 = phi i64 [ %t2135, %block_0_4076c4 ]
  %t2154 = phi i64 [ %t2136, %block_0_4076c4 ]
  %t2155 = phi i512 [ %t2137, %block_0_4076c4 ]
  %t2156 = phi i512 [ %t2138, %block_0_4076c4 ]
  %t2157 = phi i512 [ %t2139, %block_0_4076c4 ]
  %t2158 = phi i512 [ %t2140, %block_0_4076c4 ]
  %t2159 = phi i512 [ %t2141, %block_0_4076c4 ]
  %t2160 = phi i512 [ %t2142, %block_0_4076c4 ]
  %t2161 = phi i512 [ %t2143, %block_0_4076c4 ]
  %t2162 = phi i512 [ %t2144, %block_0_4076c4 ]
  ; r2069 := (bitcast r2061 (vec 8 double))
  %t2163 = bitcast i512 %t2155 to <8 x double>
  ; r2070 := (bitcast r2062 (vec 8 double))
  %t2164 = bitcast i512 %t2156 to <8 x double>
  ; r2071 := (bitcast r2063 (vec 8 double))
  %t2165 = bitcast i512 %t2157 to <8 x double>
  ; r2072 := (bitcast r2064 (vec 8 double))
  %t2166 = bitcast i512 %t2158 to <8 x double>
  ; r2073 := (bitcast r2065 (vec 8 double))
  %t2167 = bitcast i512 %t2159 to <8 x double>
  ; r2074 := (bitcast r2066 (vec 8 double))
  %t2168 = bitcast i512 %t2160 to <8 x double>
  ; r2075 := (bitcast r2067 (vec 8 double))
  %t2169 = bitcast i512 %t2161 to <8 x double>
  ; r2076 := (bitcast r2068 (vec 8 double))
  %t2170 = bitcast i512 %t2162 to <8 x double>
  ; r2077 := call pthread_mutex_unlock_int(r2056, r2057, r2055, r2054, r2058, r2059, r2069, r2070, r2071, r2072, r2073, r2074, r2075, r2076)
  %t2171 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t2150, i64 %t2151, i64 %t2149, i64 %t2148, i64 %t2152, i64 %t2153, <8 x double> %t2163, <8 x double> %t2164, <8 x double> %t2165, <8 x double> %t2166, <8 x double> %t2167, <8 x double> %t2168, <8 x double> %t2169, <8 x double> %t2170)
  ; r2078 := (tuple_field r2077 0)
  %t2172 = extractvalue { i64, i64, <8 x double> } %t2171, 0
  ; r2079 := (tuple_field r2077 1)
  %t2173 = extractvalue { i64, i64, <8 x double> } %t2171, 1
  ; r2080 := (tuple_field r2077 2)
  %t2174 = extractvalue { i64, i64, <8 x double> } %t2171, 2
  ; r2081 := (bitcast r2080 (bv 512))
  %t2175 = bitcast <8 x double> %t2174 to i512
  br label %block_0_4076dc
block_0_4076dc:
  %t2176 = phi i64 [ %t2173, %block_0_4076d4 ]
  %t2177 = phi i64 [ %t2154, %block_0_4076d4 ]
  %t2178 = phi i512 [ %t2175, %block_0_4076d4 ]
  br label %block_0_407292
block_0_4076e1:
  %t2179 = phi i64 [ %t1938, %block_0_407650 ]
  %t2180 = phi i64 [ %t1939, %block_0_407650 ]
  %t2181 = phi i64 [ %t1940, %block_0_407650 ]
  %t2182 = phi i64 [ %t1941, %block_0_407650 ]
  %t2183 = phi i64 [ %t1942, %block_0_407650 ]
  %t2184 = phi i64 [ %t1943, %block_0_407650 ]
  %t2185 = phi i64 [ %t1944, %block_0_407650 ]
  %t2186 = phi i512 [ %t1947, %block_0_407650 ]
  %t2187 = phi i512 [ %t1948, %block_0_407650 ]
  %t2188 = phi i512 [ %t1949, %block_0_407650 ]
  %t2189 = phi i512 [ %t1950, %block_0_407650 ]
  %t2190 = phi i512 [ %t1951, %block_0_407650 ]
  %t2191 = phi i512 [ %t1952, %block_0_407650 ]
  %t2192 = phi i512 [ %t1953, %block_0_407650 ]
  %t2193 = phi i512 [ %t1954, %block_0_407650 ]
  ; r2100 := (read (0x6356e8 : bv 64) (bv 32))
  %t2194 = inttoptr i64 6510312 to i32*
  %t2195 = load i32, i32* %t2194
  ; r2101 := (eq r2100 (0x0 : bv 32))
  %t2196 = icmp eq i32 %t2195, 0
  br i1 %t2196, label %block_0_407292, label %block_0_4076ef
block_0_4076ef:
  %t2197 = phi i64 [ %t2179, %block_0_4076e1 ]
  %t2198 = phi i64 [ %t2180, %block_0_4076e1 ]
  %t2199 = phi i64 [ %t2181, %block_0_4076e1 ]
  %t2200 = phi i64 [ %t2182, %block_0_4076e1 ]
  %t2201 = phi i64 [ %t2183, %block_0_4076e1 ]
  %t2202 = phi i64 [ %t2184, %block_0_4076e1 ]
  %t2203 = phi i64 [ %t2185, %block_0_4076e1 ]
  %t2204 = phi i512 [ %t2186, %block_0_4076e1 ]
  %t2205 = phi i512 [ %t2187, %block_0_4076e1 ]
  %t2206 = phi i512 [ %t2188, %block_0_4076e1 ]
  %t2207 = phi i512 [ %t2189, %block_0_4076e1 ]
  %t2208 = phi i512 [ %t2190, %block_0_4076e1 ]
  %t2209 = phi i512 [ %t2191, %block_0_4076e1 ]
  %t2210 = phi i512 [ %t2192, %block_0_4076e1 ]
  %t2211 = phi i512 [ %t2193, %block_0_4076e1 ]
  ; r2117 := (bitcast r2109 (vec 8 double))
  %t2212 = bitcast i512 %t2204 to <8 x double>
  ; r2118 := (bitcast r2110 (vec 8 double))
  %t2213 = bitcast i512 %t2205 to <8 x double>
  ; r2119 := (bitcast r2111 (vec 8 double))
  %t2214 = bitcast i512 %t2206 to <8 x double>
  ; r2120 := (bitcast r2112 (vec 8 double))
  %t2215 = bitcast i512 %t2207 to <8 x double>
  ; r2121 := (bitcast r2113 (vec 8 double))
  %t2216 = bitcast i512 %t2208 to <8 x double>
  ; r2122 := (bitcast r2114 (vec 8 double))
  %t2217 = bitcast i512 %t2209 to <8 x double>
  ; r2123 := (bitcast r2115 (vec 8 double))
  %t2218 = bitcast i512 %t2210 to <8 x double>
  ; r2124 := (bitcast r2116 (vec 8 double))
  %t2219 = bitcast i512 %t2211 to <8 x double>
  ; r2125 := call pthread_mutex_unlock_int(r2108, r2104, r2103, r2102, r2105, r2106, r2117, r2118, r2119, r2120, r2121, r2122, r2123, r2124)
  %t2220 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t2203, i64 %t2199, i64 %t2198, i64 %t2197, i64 %t2200, i64 %t2201, <8 x double> %t2212, <8 x double> %t2213, <8 x double> %t2214, <8 x double> %t2215, <8 x double> %t2216, <8 x double> %t2217, <8 x double> %t2218, <8 x double> %t2219)
  ; r2126 := (tuple_field r2125 0)
  %t2221 = extractvalue { i64, i64, <8 x double> } %t2220, 0
  ; r2127 := (tuple_field r2125 1)
  %t2222 = extractvalue { i64, i64, <8 x double> } %t2220, 1
  ; r2128 := (tuple_field r2125 2)
  %t2223 = extractvalue { i64, i64, <8 x double> } %t2220, 2
  ; r2129 := (bitcast r2128 (bv 512))
  %t2224 = bitcast <8 x double> %t2223 to i512
  br label %block_0_4076f7
block_0_4076f7:
  %t2225 = phi i64 [ %t2222, %block_0_4076ef ]
  %t2226 = phi i64 [ %t2202, %block_0_4076ef ]
  %t2227 = phi i512 [ %t2224, %block_0_4076ef ]
  br label %block_0_407292
block_0_4076fc:
  %t2228 = phi i64 [ %t1984, %block_0_407668 ]
  %t2229 = phi i64 [ %t1985, %block_0_407668 ]
  %t2230 = phi i512 [ %t1986, %block_0_407668 ]
  ; r2136 := (bitcast r2135 (vec 8 double))
  %t2231 = bitcast i512 %t2230 to <8 x double>
  ; r2137 := call memset(r2133, (0xa5 : bv 64), r2134, r2136)
  %t2232 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t2228, i64 165, i64 %t2229, <8 x double> %t2231)
  ; r2138 := (tuple_field r2137 0)
  %t2233 = extractvalue { i64, i64, <8 x double> } %t2232, 0
  ; r2139 := (tuple_field r2137 1)
  %t2234 = extractvalue { i64, i64, <8 x double> } %t2232, 1
  ; r2140 := (tuple_field r2137 2)
  %t2235 = extractvalue { i64, i64, <8 x double> } %t2232, 2
  ; r2141 := (bitcast r2140 (bv 512))
  %t2236 = bitcast <8 x double> %t2235 to i512
  br label %block_0_40770c
block_0_40770c:
  %t2237 = phi i64 [ %t2234, %block_0_4076fc ]
  %t2238 = phi i64 [ %t2228, %block_0_4076fc ]
  %t2239 = phi i512 [ %t2236, %block_0_4076fc ]
  br label %block_0_407292
block_0_407711:
  %t2240 = phi i64 [ %t213, %block_0_407125 ], [ %t231, %block_0_407130 ], [ %t808, %block_0_407341 ], [ %t826, %block_0_407346 ]
  %t2241 = phi i64 [ %t214, %block_0_407125 ], [ %t232, %block_0_407130 ], [ %t809, %block_0_407341 ], [ %t827, %block_0_407346 ]
  %t2242 = phi i64 [ %t215, %block_0_407125 ], [ %t234, %block_0_407130 ], [ %t810, %block_0_407341 ], [ %t829, %block_0_407346 ]
  %t2243 = phi i64 [ %t216, %block_0_407125 ], [ %t251, %block_0_407130 ], [ %t811, %block_0_407341 ], [ %t846, %block_0_407346 ]
  %t2244 = phi i64 [ %t217, %block_0_407125 ], [ %t236, %block_0_407130 ], [ %t812, %block_0_407341 ], [ %t831, %block_0_407346 ]
  %t2245 = phi i64 [ %t218, %block_0_407125 ], [ %t237, %block_0_407130 ], [ %t813, %block_0_407341 ], [ %t832, %block_0_407346 ]
  %t2246 = phi i64 [ %t219, %block_0_407125 ], [ %t238, %block_0_407130 ], [ %t814, %block_0_407341 ], [ %t833, %block_0_407346 ]
  %t2247 = phi i64 [ %t220, %block_0_407125 ], [ %t239, %block_0_407130 ], [ %t815, %block_0_407341 ], [ %t834, %block_0_407346 ]
  %t2248 = phi i64 [ %t221, %block_0_407125 ], [ %t240, %block_0_407130 ], [ %t816, %block_0_407341 ], [ %t835, %block_0_407346 ]
  %t2249 = phi i512 [ %t222, %block_0_407125 ], [ %t241, %block_0_407130 ], [ %t817, %block_0_407341 ], [ %t836, %block_0_407346 ]
  %t2250 = phi i512 [ %t223, %block_0_407125 ], [ %t242, %block_0_407130 ], [ %t818, %block_0_407341 ], [ %t837, %block_0_407346 ]
  %t2251 = phi i512 [ %t224, %block_0_407125 ], [ %t243, %block_0_407130 ], [ %t819, %block_0_407341 ], [ %t838, %block_0_407346 ]
  %t2252 = phi i512 [ %t225, %block_0_407125 ], [ %t244, %block_0_407130 ], [ %t820, %block_0_407341 ], [ %t839, %block_0_407346 ]
  %t2253 = phi i512 [ %t226, %block_0_407125 ], [ %t245, %block_0_407130 ], [ %t821, %block_0_407341 ], [ %t840, %block_0_407346 ]
  %t2254 = phi i512 [ %t227, %block_0_407125 ], [ %t246, %block_0_407130 ], [ %t822, %block_0_407341 ], [ %t841, %block_0_407346 ]
  %t2255 = phi i512 [ %t228, %block_0_407125 ], [ %t247, %block_0_407130 ], [ %t823, %block_0_407341 ], [ %t842, %block_0_407346 ]
  %t2256 = phi i512 [ %t229, %block_0_407125 ], [ %t248, %block_0_407130 ], [ %t824, %block_0_407341 ], [ %t843, %block_0_407346 ]
  br label %block_0_407714
block_0_407714:
  %t2257 = phi i64 [ %t346, %block_0_40714a ], [ %t461, %block_0_4071ff ], [ %t941, %block_0_407360 ], [ %t1056, %block_0_407415 ], [ %t2240, %block_0_407711 ], [ %t2878, %block_0_407812 ], [ %t2993, %block_0_4078b8 ], [ %t3072, %block_0_4078bd ], [ %t3187, %block_0_407963 ]
  %t2258 = phi i64 [ %t323, %block_0_40714a ], [ %t462, %block_0_4071ff ], [ %t918, %block_0_407360 ], [ %t1057, %block_0_407415 ], [ %t2241, %block_0_407711 ], [ %t2852, %block_0_407812 ], [ %t2994, %block_0_4078b8 ], [ %t3046, %block_0_4078bd ], [ %t3188, %block_0_407963 ]
  %t2259 = phi i64 [ %t347, %block_0_40714a ], [ %t463, %block_0_4071ff ], [ %t942, %block_0_407360 ], [ %t1058, %block_0_407415 ], [ %t2242, %block_0_407711 ], [ %t2879, %block_0_407812 ], [ %t2995, %block_0_4078b8 ], [ %t3073, %block_0_4078bd ], [ %t3189, %block_0_407963 ]
  %t2260 = phi i64 [ %t345, %block_0_40714a ], [ %t464, %block_0_4071ff ], [ %t940, %block_0_407360 ], [ %t1059, %block_0_407415 ], [ %t2243, %block_0_407711 ], [ %t2877, %block_0_407812 ], [ %t2996, %block_0_4078b8 ], [ %t3071, %block_0_4078bd ], [ %t3190, %block_0_407963 ]
  %t2261 = phi i64 [ %t331, %block_0_40714a ], [ %t465, %block_0_4071ff ], [ %t926, %block_0_407360 ], [ %t1060, %block_0_407415 ], [ %t2244, %block_0_407711 ], [ %t2820, %block_0_407812 ], [ %t2997, %block_0_4078b8 ], [ %t3014, %block_0_4078bd ], [ %t3191, %block_0_407963 ]
  %t2262 = phi i64 [ %t285, %block_0_40714a ], [ %t466, %block_0_4071ff ], [ %t880, %block_0_407360 ], [ %t1061, %block_0_407415 ], [ %t2245, %block_0_407711 ], [ %t2821, %block_0_407812 ], [ %t2998, %block_0_4078b8 ], [ %t3015, %block_0_4078bd ], [ %t3192, %block_0_407963 ]
  %t2263 = phi i64 [ %t324, %block_0_40714a ], [ %t467, %block_0_4071ff ], [ %t919, %block_0_407360 ], [ %t1062, %block_0_407415 ], [ 0, %block_0_407711 ], [ %t2857, %block_0_407812 ], [ %t2999, %block_0_4078b8 ], [ %t3051, %block_0_4078bd ], [ %t3193, %block_0_407963 ]
  %t2264 = phi i64 [ %t286, %block_0_40714a ], [ %t468, %block_0_4071ff ], [ %t881, %block_0_407360 ], [ %t1063, %block_0_407415 ], [ %t2246, %block_0_407711 ], [ %t2822, %block_0_407812 ], [ %t3000, %block_0_4078b8 ], [ %t3016, %block_0_4078bd ], [ %t3194, %block_0_407963 ]
  %t2265 = phi i64 [ %t287, %block_0_40714a ], [ %t469, %block_0_4071ff ], [ %t882, %block_0_407360 ], [ %t1064, %block_0_407415 ], [ %t2247, %block_0_407711 ], [ %t2823, %block_0_407812 ], [ %t3001, %block_0_4078b8 ], [ %t3017, %block_0_4078bd ], [ %t3195, %block_0_407963 ]
  %t2266 = phi i64 [ %t288, %block_0_40714a ], [ %t470, %block_0_4071ff ], [ %t883, %block_0_407360 ], [ %t1065, %block_0_407415 ], [ %t2248, %block_0_407711 ], [ %t2824, %block_0_407812 ], [ %t3002, %block_0_4078b8 ], [ %t3018, %block_0_4078bd ], [ %t3196, %block_0_407963 ]
  %t2267 = phi i512 [ %t289, %block_0_40714a ], [ %t471, %block_0_4071ff ], [ %t884, %block_0_407360 ], [ %t1066, %block_0_407415 ], [ %t2249, %block_0_407711 ], [ %t2825, %block_0_407812 ], [ %t3003, %block_0_4078b8 ], [ %t3019, %block_0_4078bd ], [ %t3197, %block_0_407963 ]
  %t2268 = phi i512 [ %t290, %block_0_40714a ], [ %t472, %block_0_4071ff ], [ %t885, %block_0_407360 ], [ %t1067, %block_0_407415 ], [ %t2250, %block_0_407711 ], [ %t2826, %block_0_407812 ], [ %t3004, %block_0_4078b8 ], [ %t3020, %block_0_4078bd ], [ %t3198, %block_0_407963 ]
  %t2269 = phi i512 [ %t291, %block_0_40714a ], [ %t473, %block_0_4071ff ], [ %t886, %block_0_407360 ], [ %t1068, %block_0_407415 ], [ %t2251, %block_0_407711 ], [ %t2827, %block_0_407812 ], [ %t3005, %block_0_4078b8 ], [ %t3021, %block_0_4078bd ], [ %t3199, %block_0_407963 ]
  %t2270 = phi i512 [ %t292, %block_0_40714a ], [ %t474, %block_0_4071ff ], [ %t887, %block_0_407360 ], [ %t1069, %block_0_407415 ], [ %t2252, %block_0_407711 ], [ %t2828, %block_0_407812 ], [ %t3006, %block_0_4078b8 ], [ %t3022, %block_0_4078bd ], [ %t3200, %block_0_407963 ]
  %t2271 = phi i512 [ %t293, %block_0_40714a ], [ %t475, %block_0_4071ff ], [ %t888, %block_0_407360 ], [ %t1070, %block_0_407415 ], [ %t2253, %block_0_407711 ], [ %t2829, %block_0_407812 ], [ %t3007, %block_0_4078b8 ], [ %t3023, %block_0_4078bd ], [ %t3201, %block_0_407963 ]
  %t2272 = phi i512 [ %t294, %block_0_40714a ], [ %t476, %block_0_4071ff ], [ %t889, %block_0_407360 ], [ %t1071, %block_0_407415 ], [ %t2254, %block_0_407711 ], [ %t2830, %block_0_407812 ], [ %t3008, %block_0_4078b8 ], [ %t3024, %block_0_4078bd ], [ %t3202, %block_0_407963 ]
  %t2273 = phi i512 [ %t295, %block_0_40714a ], [ %t477, %block_0_4071ff ], [ %t890, %block_0_407360 ], [ %t1072, %block_0_407415 ], [ %t2255, %block_0_407711 ], [ %t2831, %block_0_407812 ], [ %t3009, %block_0_4078b8 ], [ %t3025, %block_0_4078bd ], [ %t3203, %block_0_407963 ]
  %t2274 = phi i512 [ %t296, %block_0_40714a ], [ %t478, %block_0_4071ff ], [ %t891, %block_0_407360 ], [ %t1073, %block_0_407415 ], [ %t2256, %block_0_407711 ], [ %t2832, %block_0_407812 ], [ %t3010, %block_0_4078b8 ], [ %t3026, %block_0_4078bd ], [ %t3204, %block_0_407963 ]
  ; r2180 := (bv_add r2167 (0xc : bv 64))
  %t2275 = add i64 %t2262, 12
  ; r2181 := (read r2180 (bv 32))
  %t2276 = inttoptr i64 %t2275 to i32*
  %t2277 = load i32, i32* %t2276
  ; r2182 := (read r2180 (bv 32))
  %t2278 = inttoptr i64 %t2275 to i32*
  %t2279 = load i32, i32* %t2278
  ; r2183 := (bv_add r2181 (0xffffffff : bv 32))
  %t2280 = add i32 %t2277, 4294967295
  ; write r2180 r2183
  %t2281 = inttoptr i64 %t2275 to i32*
  store i32 %t2280, i32* %t2281
  br label %block_0_407650
block_0_40771e:
  %t2282 = phi i64 [ %t691, %block_0_4072be ]
  %t2283 = phi i64 [ %t694, %block_0_4072be ]
  %t2284 = phi i64 [ %t708, %block_0_4072be ]
  %t2285 = phi i64 [ %t697, %block_0_4072be ]
  %t2286 = phi i64 [ %t675, %block_0_4072be ]
  %t2287 = phi i64 [ %t676, %block_0_4072be ]
  %t2288 = phi i64 [ %t677, %block_0_4072be ]
  %t2289 = phi i64 [ %t700, %block_0_4072be ]
  %t2290 = phi i64 [ %t678, %block_0_4072be ]
  %t2291 = phi i512 [ %t679, %block_0_4072be ]
  %t2292 = phi i512 [ %t680, %block_0_4072be ]
  %t2293 = phi i512 [ %t681, %block_0_4072be ]
  %t2294 = phi i512 [ %t682, %block_0_4072be ]
  %t2295 = phi i512 [ %t683, %block_0_4072be ]
  %t2296 = phi i512 [ %t684, %block_0_4072be ]
  %t2297 = phi i512 [ %t685, %block_0_4072be ]
  %t2298 = phi i512 [ %t686, %block_0_4072be ]
  ; r2201 := (bitcast r2193 (vec 8 double))
  %t2299 = bitcast i512 %t2291 to <8 x double>
  ; r2202 := (bitcast r2194 (vec 8 double))
  %t2300 = bitcast i512 %t2292 to <8 x double>
  ; r2203 := (bitcast r2195 (vec 8 double))
  %t2301 = bitcast i512 %t2293 to <8 x double>
  ; r2204 := (bitcast r2196 (vec 8 double))
  %t2302 = bitcast i512 %t2294 to <8 x double>
  ; r2205 := (bitcast r2197 (vec 8 double))
  %t2303 = bitcast i512 %t2295 to <8 x double>
  ; r2206 := (bitcast r2198 (vec 8 double))
  %t2304 = bitcast i512 %t2296 to <8 x double>
  ; r2207 := (bitcast r2199 (vec 8 double))
  %t2305 = bitcast i512 %t2297 to <8 x double>
  ; r2208 := (bitcast r2200 (vec 8 double))
  %t2306 = bitcast i512 %t2298 to <8 x double>
  ; r2209 := call pthread_mutex_trylock_int(r2190, r2187, r2185, r2184, r2188, r2189, r2201, r2202, r2203, r2204, r2205, r2206, r2207, r2208)
  %t2307 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t2288, i64 %t2285, i64 %t2283, i64 %t2282, i64 %t2286, i64 %t2287, <8 x double> %t2299, <8 x double> %t2300, <8 x double> %t2301, <8 x double> %t2302, <8 x double> %t2303, <8 x double> %t2304, <8 x double> %t2305, <8 x double> %t2306)
  ; r2210 := (tuple_field r2209 0)
  %t2308 = extractvalue { i64, i64, <8 x double> } %t2307, 0
  ; r2211 := (tuple_field r2209 1)
  %t2309 = extractvalue { i64, i64, <8 x double> } %t2307, 1
  ; r2212 := (tuple_field r2209 2)
  %t2310 = extractvalue { i64, i64, <8 x double> } %t2307, 2
  ; r2213 := (bitcast r2212 (bv 512))
  %t2311 = bitcast <8 x double> %t2310 to i512
  br label %block_0_407726
block_0_407726:
  %t2312 = phi i64 [ %t2308, %block_0_40771e ]
  %t2313 = phi i64 [ %t2282, %block_0_40771e ]
  %t2314 = phi i64 [ %t2309, %block_0_40771e ]
  %t2315 = phi i64 [ %t2284, %block_0_40771e ]
  %t2316 = phi i64 [ %t2285, %block_0_40771e ]
  %t2317 = phi i64 [ %t2286, %block_0_40771e ]
  %t2318 = phi i64 [ %t2287, %block_0_40771e ]
  %t2319 = phi i64 [ %t2288, %block_0_40771e ]
  %t2320 = phi i64 [ %t2289, %block_0_40771e ]
  %t2321 = phi i64 [ %t2290, %block_0_40771e ]
  %t2322 = phi i512 [ %t2311, %block_0_40771e ]
  %t2323 = phi i512 [ %t2292, %block_0_40771e ]
  %t2324 = phi i512 [ %t2293, %block_0_40771e ]
  %t2325 = phi i512 [ %t2294, %block_0_40771e ]
  %t2326 = phi i512 [ %t2295, %block_0_40771e ]
  %t2327 = phi i512 [ %t2296, %block_0_40771e ]
  %t2328 = phi i512 [ %t2297, %block_0_40771e ]
  %t2329 = phi i512 [ %t2298, %block_0_40771e ]
  ; r2232 := (trunc r2214 32)
  %t2330 = trunc i64 %t2312 to i32
  ; r2233 := (eq r2232 (0x0 : bv 32))
  %t2331 = icmp eq i32 %t2330, 0
  br i1 %t2331, label %block_0_4072f8, label %block_0_40772e
block_0_40772e:
  %t2332 = phi i64 [ %t2313, %block_0_407726 ]
  %t2333 = phi i64 [ %t2314, %block_0_407726 ]
  %t2334 = phi i64 [ %t2315, %block_0_407726 ]
  %t2335 = phi i64 [ %t2316, %block_0_407726 ]
  %t2336 = phi i64 [ %t2317, %block_0_407726 ]
  %t2337 = phi i64 [ %t2318, %block_0_407726 ]
  %t2338 = phi i64 [ %t2319, %block_0_407726 ]
  %t2339 = phi i64 [ %t2320, %block_0_407726 ]
  %t2340 = phi i64 [ %t2321, %block_0_407726 ]
  %t2341 = phi i512 [ %t2322, %block_0_407726 ]
  %t2342 = phi i512 [ %t2323, %block_0_407726 ]
  %t2343 = phi i512 [ %t2324, %block_0_407726 ]
  %t2344 = phi i512 [ %t2325, %block_0_407726 ]
  %t2345 = phi i512 [ %t2326, %block_0_407726 ]
  %t2346 = phi i512 [ %t2327, %block_0_407726 ]
  %t2347 = phi i512 [ %t2328, %block_0_407726 ]
  %t2348 = phi i512 [ %t2329, %block_0_407726 ]
  ; r2251 := (read (0x6354a8 : bv 64) (bv 32))
  %t2349 = inttoptr i64 6509736 to i32*
  %t2350 = load i32, i32* %t2349
  ; r2252 := (bv_ult r2251 (0x1 : bv 32))
  %t2351 = icmp ult i32 %t2350, 1
  ; r2253 := (eq r2251 (0x1 : bv 32))
  %t2352 = icmp eq i32 %t2350, 1
  ; r2254 := (or r2252 r2253)
  %t2353 = or i1 %t2351, %t2352
  br i1 %t2353, label %block_0_407782, label %block_0_407737
block_0_407737:
  %t2354 = phi i64 [ %t2334, %block_0_40772e ]
  %t2355 = phi i64 [ %t2335, %block_0_40772e ]
  %t2356 = phi i64 [ %t2336, %block_0_40772e ]
  %t2357 = phi i64 [ %t2337, %block_0_40772e ]
  %t2358 = phi i64 [ %t2338, %block_0_40772e ]
  %t2359 = phi i64 [ %t2339, %block_0_40772e ]
  %t2360 = phi i64 [ %t2340, %block_0_40772e ]
  %t2361 = phi i512 [ %t2341, %block_0_40772e ]
  %t2362 = phi i512 [ %t2342, %block_0_40772e ]
  %t2363 = phi i512 [ %t2343, %block_0_40772e ]
  %t2364 = phi i512 [ %t2344, %block_0_40772e ]
  %t2365 = phi i512 [ %t2345, %block_0_40772e ]
  %t2366 = phi i512 [ %t2346, %block_0_40772e ]
  %t2367 = phi i512 [ %t2347, %block_0_40772e ]
  %t2368 = phi i512 [ %t2348, %block_0_40772e ]
  br label %block_0_40773c
block_0_40773c:
  %t2369 = phi i64 [ %t2354, %block_0_407737 ], [ %t2471, %block_0_40777a ]
  %t2370 = phi i64 [ 1, %block_0_407737 ], [ %t2489, %block_0_40777a ]
  %t2371 = phi i64 [ %t2355, %block_0_407737 ], [ %t2473, %block_0_40777a ]
  %t2372 = phi i64 [ %t2356, %block_0_407737 ], [ %t2474, %block_0_40777a ]
  %t2373 = phi i64 [ %t2357, %block_0_407737 ], [ %t2475, %block_0_40777a ]
  %t2374 = phi i64 [ %t2358, %block_0_407737 ], [ %t2476, %block_0_40777a ]
  %t2375 = phi i64 [ %t2359, %block_0_407737 ], [ %t2477, %block_0_40777a ]
  %t2376 = phi i64 [ %t2360, %block_0_407737 ], [ %t2478, %block_0_40777a ]
  %t2377 = phi i512 [ %t2361, %block_0_407737 ], [ %t2479, %block_0_40777a ]
  %t2378 = phi i512 [ %t2362, %block_0_407737 ], [ %t2480, %block_0_40777a ]
  %t2379 = phi i512 [ %t2363, %block_0_407737 ], [ %t2481, %block_0_40777a ]
  %t2380 = phi i512 [ %t2364, %block_0_407737 ], [ %t2482, %block_0_40777a ]
  %t2381 = phi i512 [ %t2365, %block_0_407737 ], [ %t2483, %block_0_40777a ]
  %t2382 = phi i512 [ %t2366, %block_0_407737 ], [ %t2484, %block_0_40777a ]
  %t2383 = phi i512 [ %t2367, %block_0_407737 ], [ %t2485, %block_0_40777a ]
  %t2384 = phi i512 [ %t2368, %block_0_407737 ], [ %t2486, %block_0_40777a ]
  ; r2286 := (trunc r2271 32)
  %t2385 = trunc i64 %t2370 to i32
  ; r2287 := (uext r2286 64)
  %t2386 = zext i32 %t2385 to i64
  ; r2288 := (trunc r2271 8)
  %t2387 = trunc i64 %t2370 to i8
  ; r2289 := (bv_and r2288 (0x1f : bv 8))
  %t2388 = and i8 %t2387, 31
  ; r2290 := (eq r2289 (0x0 : bv 8))
  %t2389 = icmp eq i8 %t2388, 0
  ; r2291 := (uext r2289 32)
  %t2390 = zext i8 %t2388 to i32
  ; r2292 := (bv_shl (0x1 : bv 32) r2291)
  %t2391 = shl i32 1, %t2390
  ; r2293 := (mux r2290 (0x1 : bv 32) r2292)
  %t2392 = select i1 %t2389, i32 1, i32 %t2391
  ; r2294 := (uext r2293 64)
  %t2393 = zext i32 %t2392 to i64
  ; r2295 := (bv_ult (0x0 : bv 32) r2293)
  %t2394 = icmp ult i32 0, %t2392
  br i1 %t2394, label %block_0_407755, label %block_0_40776a
block_0_407755:
  %t2395 = phi i64 [ %t2386, %block_0_40773c ], [ %t2395, %block_0_407755 ]
  %t2396 = phi i64 [ %t2393, %block_0_40773c ], [ %t2396, %block_0_407755 ]
  %t2397 = phi i64 [ %t2369, %block_0_40773c ], [ %t2397, %block_0_407755 ]
  %t2398 = phi i64 [ %t2370, %block_0_40773c ], [ %t2398, %block_0_407755 ]
  %t2399 = phi i64 [ %t2371, %block_0_40773c ], [ %t2399, %block_0_407755 ]
  %t2400 = phi i64 [ %t2372, %block_0_40773c ], [ %t2400, %block_0_407755 ]
  %t2401 = phi i64 [ %t2373, %block_0_40773c ], [ %t2401, %block_0_407755 ]
  %t2402 = phi i64 [ %t2374, %block_0_40773c ], [ %t2402, %block_0_407755 ]
  %t2403 = phi i64 [ %t2375, %block_0_40773c ], [ %t2403, %block_0_407755 ]
  %t2404 = phi i64 [ %t2376, %block_0_40773c ], [ %t2404, %block_0_407755 ]
  %t2405 = phi i512 [ %t2377, %block_0_40773c ], [ %t2405, %block_0_407755 ]
  %t2406 = phi i512 [ %t2378, %block_0_40773c ], [ %t2406, %block_0_407755 ]
  %t2407 = phi i512 [ %t2379, %block_0_40773c ], [ %t2407, %block_0_407755 ]
  %t2408 = phi i512 [ %t2380, %block_0_40773c ], [ %t2408, %block_0_407755 ]
  %t2409 = phi i512 [ %t2381, %block_0_40773c ], [ %t2409, %block_0_407755 ]
  %t2410 = phi i512 [ %t2382, %block_0_40773c ], [ %t2410, %block_0_407755 ]
  %t2411 = phi i512 [ %t2383, %block_0_40773c ], [ %t2411, %block_0_407755 ]
  %t2412 = phi i512 [ %t2384, %block_0_40773c ], [ %t2412, %block_0_407755 ]
  %t2413 = phi i32 [ 0, %block_0_40773c ], [ %t2414, %block_0_407755 ]
  ; r2315 := (bv_add r2314 (0x1 : bv 32))
  %t2414 = add i32 %t2413, 1
  ; r2316 := (trunc r2297 32)
  %t2415 = trunc i64 %t2396 to i32
  ; r2317 := (bv_ult r2315 r2316)
  %t2416 = icmp ult i32 %t2414, %t2415
  br i1 %t2416, label %block_0_407755, label %block_0_40776a
block_0_40776a:
  %t2417 = phi i64 [ %t2386, %block_0_40773c ], [ %t2395, %block_0_407755 ]
  %t2418 = phi i64 [ %t2393, %block_0_40773c ], [ %t2396, %block_0_407755 ]
  %t2419 = phi i64 [ %t2369, %block_0_40773c ], [ %t2397, %block_0_407755 ]
  %t2420 = phi i64 [ %t2370, %block_0_40773c ], [ %t2398, %block_0_407755 ]
  %t2421 = phi i64 [ %t2371, %block_0_40773c ], [ %t2399, %block_0_407755 ]
  %t2422 = phi i64 [ %t2372, %block_0_40773c ], [ %t2400, %block_0_407755 ]
  %t2423 = phi i64 [ %t2373, %block_0_40773c ], [ %t2401, %block_0_407755 ]
  %t2424 = phi i64 [ %t2374, %block_0_40773c ], [ %t2402, %block_0_407755 ]
  %t2425 = phi i64 [ %t2375, %block_0_40773c ], [ %t2403, %block_0_407755 ]
  %t2426 = phi i64 [ %t2376, %block_0_40773c ], [ %t2404, %block_0_407755 ]
  %t2427 = phi i512 [ %t2377, %block_0_40773c ], [ %t2405, %block_0_407755 ]
  %t2428 = phi i512 [ %t2378, %block_0_40773c ], [ %t2406, %block_0_407755 ]
  %t2429 = phi i512 [ %t2379, %block_0_40773c ], [ %t2407, %block_0_407755 ]
  %t2430 = phi i512 [ %t2380, %block_0_40773c ], [ %t2408, %block_0_407755 ]
  %t2431 = phi i512 [ %t2381, %block_0_40773c ], [ %t2409, %block_0_407755 ]
  %t2432 = phi i512 [ %t2382, %block_0_40773c ], [ %t2410, %block_0_407755 ]
  %t2433 = phi i512 [ %t2383, %block_0_40773c ], [ %t2411, %block_0_407755 ]
  %t2434 = phi i512 [ %t2384, %block_0_40773c ], [ %t2412, %block_0_407755 ]
  ; r2336 := (bitcast r2328 (vec 8 double))
  %t2435 = bitcast i512 %t2427 to <8 x double>
  ; r2337 := (bitcast r2329 (vec 8 double))
  %t2436 = bitcast i512 %t2428 to <8 x double>
  ; r2338 := (bitcast r2330 (vec 8 double))
  %t2437 = bitcast i512 %t2429 to <8 x double>
  ; r2339 := (bitcast r2331 (vec 8 double))
  %t2438 = bitcast i512 %t2430 to <8 x double>
  ; r2340 := (bitcast r2332 (vec 8 double))
  %t2439 = bitcast i512 %t2431 to <8 x double>
  ; r2341 := (bitcast r2333 (vec 8 double))
  %t2440 = bitcast i512 %t2432 to <8 x double>
  ; r2342 := (bitcast r2334 (vec 8 double))
  %t2441 = bitcast i512 %t2433 to <8 x double>
  ; r2343 := (bitcast r2335 (vec 8 double))
  %t2442 = bitcast i512 %t2434 to <8 x double>
  ; r2344 := call pthread_mutex_trylock_int(r2325, r2322, r2319, r2318, r2323, r2324, r2336, r2337, r2338, r2339, r2340, r2341, r2342, r2343)
  %t2443 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t2424, i64 %t2421, i64 %t2418, i64 %t2417, i64 %t2422, i64 %t2423, <8 x double> %t2435, <8 x double> %t2436, <8 x double> %t2437, <8 x double> %t2438, <8 x double> %t2439, <8 x double> %t2440, <8 x double> %t2441, <8 x double> %t2442)
  ; r2345 := (tuple_field r2344 0)
  %t2444 = extractvalue { i64, i64, <8 x double> } %t2443, 0
  ; r2346 := (tuple_field r2344 1)
  %t2445 = extractvalue { i64, i64, <8 x double> } %t2443, 1
  ; r2347 := (tuple_field r2344 2)
  %t2446 = extractvalue { i64, i64, <8 x double> } %t2443, 2
  ; r2348 := (bitcast r2347 (bv 512))
  %t2447 = bitcast <8 x double> %t2446 to i512
  br label %block_0_407772
block_0_407772:
  %t2448 = phi i64 [ %t2444, %block_0_40776a ]
  %t2449 = phi i64 [ %t2417, %block_0_40776a ]
  %t2450 = phi i64 [ %t2445, %block_0_40776a ]
  %t2451 = phi i64 [ %t2419, %block_0_40776a ]
  %t2452 = phi i64 [ %t2420, %block_0_40776a ]
  %t2453 = phi i64 [ %t2421, %block_0_40776a ]
  %t2454 = phi i64 [ %t2422, %block_0_40776a ]
  %t2455 = phi i64 [ %t2423, %block_0_40776a ]
  %t2456 = phi i64 [ %t2424, %block_0_40776a ]
  %t2457 = phi i64 [ %t2425, %block_0_40776a ]
  %t2458 = phi i64 [ %t2426, %block_0_40776a ]
  %t2459 = phi i512 [ %t2447, %block_0_40776a ]
  %t2460 = phi i512 [ %t2428, %block_0_40776a ]
  %t2461 = phi i512 [ %t2429, %block_0_40776a ]
  %t2462 = phi i512 [ %t2430, %block_0_40776a ]
  %t2463 = phi i512 [ %t2431, %block_0_40776a ]
  %t2464 = phi i512 [ %t2432, %block_0_40776a ]
  %t2465 = phi i512 [ %t2433, %block_0_40776a ]
  %t2466 = phi i512 [ %t2434, %block_0_40776a ]
  ; r2368 := (trunc r2349 32)
  %t2467 = trunc i64 %t2448 to i32
  ; r2369 := (eq r2368 (0x0 : bv 32))
  %t2468 = icmp eq i32 %t2467, 0
  br i1 %t2468, label %block_0_4072f8, label %block_0_40777a
block_0_40777a:
  %t2469 = phi i64 [ %t2449, %block_0_407772 ]
  %t2470 = phi i64 [ %t2450, %block_0_407772 ]
  %t2471 = phi i64 [ %t2451, %block_0_407772 ]
  %t2472 = phi i64 [ %t2452, %block_0_407772 ]
  %t2473 = phi i64 [ %t2453, %block_0_407772 ]
  %t2474 = phi i64 [ %t2454, %block_0_407772 ]
  %t2475 = phi i64 [ %t2455, %block_0_407772 ]
  %t2476 = phi i64 [ %t2456, %block_0_407772 ]
  %t2477 = phi i64 [ %t2457, %block_0_407772 ]
  %t2478 = phi i64 [ %t2458, %block_0_407772 ]
  %t2479 = phi i512 [ %t2459, %block_0_407772 ]
  %t2480 = phi i512 [ %t2460, %block_0_407772 ]
  %t2481 = phi i512 [ %t2461, %block_0_407772 ]
  %t2482 = phi i512 [ %t2462, %block_0_407772 ]
  %t2483 = phi i512 [ %t2463, %block_0_407772 ]
  %t2484 = phi i512 [ %t2464, %block_0_407772 ]
  %t2485 = phi i512 [ %t2465, %block_0_407772 ]
  %t2486 = phi i512 [ %t2466, %block_0_407772 ]
  ; r2388 := (trunc r2373 32)
  %t2487 = trunc i64 %t2472 to i32
  ; r2389 := (bv_add r2388 (0x1 : bv 32))
  %t2488 = add i32 %t2487, 1
  ; r2390 := (uext r2389 64)
  %t2489 = zext i32 %t2488 to i64
  ; r2391 := (eq r2388 (0xb : bv 32))
  %t2490 = icmp eq i32 %t2487, 11
  br i1 %t2490, label %block_0_407782, label %block_0_40773c
block_0_407782:
  %t2491 = phi i64 [ %t2332, %block_0_40772e ], [ %t2469, %block_0_40777a ]
  %t2492 = phi i64 [ %t2333, %block_0_40772e ], [ %t2470, %block_0_40777a ]
  %t2493 = phi i64 [ %t2334, %block_0_40772e ], [ %t2471, %block_0_40777a ]
  %t2494 = phi i64 [ %t2335, %block_0_40772e ], [ %t2473, %block_0_40777a ]
  %t2495 = phi i64 [ %t2336, %block_0_40772e ], [ %t2474, %block_0_40777a ]
  %t2496 = phi i64 [ %t2337, %block_0_40772e ], [ %t2475, %block_0_40777a ]
  %t2497 = phi i64 [ %t2338, %block_0_40772e ], [ %t2476, %block_0_40777a ]
  %t2498 = phi i64 [ %t2339, %block_0_40772e ], [ %t2477, %block_0_40777a ]
  %t2499 = phi i64 [ %t2340, %block_0_40772e ], [ %t2478, %block_0_40777a ]
  %t2500 = phi i512 [ %t2341, %block_0_40772e ], [ %t2479, %block_0_40777a ]
  %t2501 = phi i512 [ %t2342, %block_0_40772e ], [ %t2480, %block_0_40777a ]
  %t2502 = phi i512 [ %t2343, %block_0_40772e ], [ %t2481, %block_0_40777a ]
  %t2503 = phi i512 [ %t2344, %block_0_40772e ], [ %t2482, %block_0_40777a ]
  %t2504 = phi i512 [ %t2345, %block_0_40772e ], [ %t2483, %block_0_40777a ]
  %t2505 = phi i512 [ %t2346, %block_0_40772e ], [ %t2484, %block_0_40777a ]
  %t2506 = phi i512 [ %t2347, %block_0_40772e ], [ %t2485, %block_0_40777a ]
  %t2507 = phi i512 [ %t2348, %block_0_40772e ], [ %t2486, %block_0_40777a ]
  ; r2409 := (bitcast r2401 (vec 8 double))
  %t2508 = bitcast i512 %t2500 to <8 x double>
  ; r2410 := (bitcast r2402 (vec 8 double))
  %t2509 = bitcast i512 %t2501 to <8 x double>
  ; r2411 := (bitcast r2403 (vec 8 double))
  %t2510 = bitcast i512 %t2502 to <8 x double>
  ; r2412 := (bitcast r2404 (vec 8 double))
  %t2511 = bitcast i512 %t2503 to <8 x double>
  ; r2413 := (bitcast r2405 (vec 8 double))
  %t2512 = bitcast i512 %t2504 to <8 x double>
  ; r2414 := (bitcast r2406 (vec 8 double))
  %t2513 = bitcast i512 %t2505 to <8 x double>
  ; r2415 := (bitcast r2407 (vec 8 double))
  %t2514 = bitcast i512 %t2506 to <8 x double>
  ; r2416 := (bitcast r2408 (vec 8 double))
  %t2515 = bitcast i512 %t2507 to <8 x double>
  ; r2417 := call pthread_mutex_lock_int(r2398, r2395, r2393, r2392, r2396, r2397, r2409, r2410, r2411, r2412, r2413, r2414, r2415, r2416)
  %t2516 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 %t2497, i64 %t2494, i64 %t2492, i64 %t2491, i64 %t2495, i64 %t2496, <8 x double> %t2508, <8 x double> %t2509, <8 x double> %t2510, <8 x double> %t2511, <8 x double> %t2512, <8 x double> %t2513, <8 x double> %t2514, <8 x double> %t2515)
  ; r2418 := (tuple_field r2417 0)
  %t2517 = extractvalue { i64, i64, <8 x double> } %t2516, 0
  ; r2419 := (tuple_field r2417 1)
  %t2518 = extractvalue { i64, i64, <8 x double> } %t2516, 1
  ; r2420 := (tuple_field r2417 2)
  %t2519 = extractvalue { i64, i64, <8 x double> } %t2516, 2
  ; r2421 := (bitcast r2420 (bv 512))
  %t2520 = bitcast <8 x double> %t2519 to i512
  br label %block_0_40778a
block_0_40778a:
  %t2521 = phi i64 [ %t2491, %block_0_407782 ]
  %t2522 = phi i64 [ %t2493, %block_0_407782 ]
  %t2523 = phi i64 [ %t2494, %block_0_407782 ]
  %t2524 = phi i64 [ %t2495, %block_0_407782 ]
  %t2525 = phi i64 [ %t2496, %block_0_407782 ]
  %t2526 = phi i64 [ %t2497, %block_0_407782 ]
  %t2527 = phi i64 [ %t2498, %block_0_407782 ]
  %t2528 = phi i64 [ %t2499, %block_0_407782 ]
  %t2529 = phi i512 [ %t2520, %block_0_407782 ]
  %t2530 = phi i512 [ %t2501, %block_0_407782 ]
  %t2531 = phi i512 [ %t2502, %block_0_407782 ]
  %t2532 = phi i512 [ %t2503, %block_0_407782 ]
  %t2533 = phi i512 [ %t2504, %block_0_407782 ]
  %t2534 = phi i512 [ %t2505, %block_0_407782 ]
  %t2535 = phi i512 [ %t2506, %block_0_407782 ]
  %t2536 = phi i512 [ %t2507, %block_0_407782 ]
  br label %block_0_4072f8
block_0_40778f:
  %t2537 = phi i64 [ %t79, %block_0_4070a8 ]
  %t2538 = phi i64 [ %t80, %block_0_4070a8 ]
  %t2539 = phi i64 [ %t102, %block_0_4070a8 ]
  %t2540 = phi i64 [ %t82, %block_0_4070a8 ]
  %t2541 = phi i64 [ %t83, %block_0_4070a8 ]
  %t2542 = phi i64 [ %t84, %block_0_4070a8 ]
  %t2543 = phi i64 [ %t108, %block_0_4070a8 ]
  %t2544 = phi i64 [ %t85, %block_0_4070a8 ]
  %t2545 = phi i64 [ %t111, %block_0_4070a8 ]
  %t2546 = phi i64 [ %t86, %block_0_4070a8 ]
  %t2547 = phi i512 [ %t87, %block_0_4070a8 ]
  %t2548 = phi i512 [ %t88, %block_0_4070a8 ]
  %t2549 = phi i512 [ %t89, %block_0_4070a8 ]
  %t2550 = phi i512 [ %t90, %block_0_4070a8 ]
  %t2551 = phi i512 [ %t91, %block_0_4070a8 ]
  %t2552 = phi i512 [ %t92, %block_0_4070a8 ]
  %t2553 = phi i512 [ %t93, %block_0_4070a8 ]
  %t2554 = phi i512 [ %t94, %block_0_4070a8 ]
  ; r2456 := (bitcast r2448 (vec 8 double))
  %t2555 = bitcast i512 %t2547 to <8 x double>
  ; r2457 := (bitcast r2449 (vec 8 double))
  %t2556 = bitcast i512 %t2548 to <8 x double>
  ; r2458 := (bitcast r2450 (vec 8 double))
  %t2557 = bitcast i512 %t2549 to <8 x double>
  ; r2459 := (bitcast r2451 (vec 8 double))
  %t2558 = bitcast i512 %t2550 to <8 x double>
  ; r2460 := (bitcast r2452 (vec 8 double))
  %t2559 = bitcast i512 %t2551 to <8 x double>
  ; r2461 := (bitcast r2453 (vec 8 double))
  %t2560 = bitcast i512 %t2552 to <8 x double>
  ; r2462 := (bitcast r2454 (vec 8 double))
  %t2561 = bitcast i512 %t2553 to <8 x double>
  ; r2463 := (bitcast r2455 (vec 8 double))
  %t2562 = bitcast i512 %t2554 to <8 x double>
  ; r2464 := call pthread_mutex_trylock_int(r2445, r2441, r2439, r2438, r2442, r2443, r2456, r2457, r2458, r2459, r2460, r2461, r2462, r2463)
  %t2563 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t2544, i64 %t2540, i64 %t2538, i64 %t2537, i64 %t2541, i64 %t2542, <8 x double> %t2555, <8 x double> %t2556, <8 x double> %t2557, <8 x double> %t2558, <8 x double> %t2559, <8 x double> %t2560, <8 x double> %t2561, <8 x double> %t2562)
  ; r2465 := (tuple_field r2464 0)
  %t2564 = extractvalue { i64, i64, <8 x double> } %t2563, 0
  ; r2466 := (tuple_field r2464 1)
  %t2565 = extractvalue { i64, i64, <8 x double> } %t2563, 1
  ; r2467 := (tuple_field r2464 2)
  %t2566 = extractvalue { i64, i64, <8 x double> } %t2563, 2
  ; r2468 := (bitcast r2467 (bv 512))
  %t2567 = bitcast <8 x double> %t2566 to i512
  br label %block_0_407797
block_0_407797:
  %t2568 = phi i64 [ %t2564, %block_0_40778f ]
  %t2569 = phi i64 [ %t2537, %block_0_40778f ]
  %t2570 = phi i64 [ %t2565, %block_0_40778f ]
  %t2571 = phi i64 [ %t2539, %block_0_40778f ]
  %t2572 = phi i64 [ %t2540, %block_0_40778f ]
  %t2573 = phi i64 [ %t2541, %block_0_40778f ]
  %t2574 = phi i64 [ %t2542, %block_0_40778f ]
  %t2575 = phi i64 [ %t2543, %block_0_40778f ]
  %t2576 = phi i64 [ %t2544, %block_0_40778f ]
  %t2577 = phi i64 [ %t2545, %block_0_40778f ]
  %t2578 = phi i64 [ %t2546, %block_0_40778f ]
  %t2579 = phi i512 [ %t2567, %block_0_40778f ]
  %t2580 = phi i512 [ %t2548, %block_0_40778f ]
  %t2581 = phi i512 [ %t2549, %block_0_40778f ]
  %t2582 = phi i512 [ %t2550, %block_0_40778f ]
  %t2583 = phi i512 [ %t2551, %block_0_40778f ]
  %t2584 = phi i512 [ %t2552, %block_0_40778f ]
  %t2585 = phi i512 [ %t2553, %block_0_40778f ]
  %t2586 = phi i512 [ %t2554, %block_0_40778f ]
  ; r2488 := (trunc r2469 32)
  %t2587 = trunc i64 %t2568 to i32
  ; r2489 := (eq r2488 (0x0 : bv 32))
  %t2588 = icmp eq i32 %t2587, 0
  br i1 %t2588, label %block_0_4070db, label %block_0_40779f
block_0_40779f:
  %t2589 = phi i64 [ %t2569, %block_0_407797 ]
  %t2590 = phi i64 [ %t2570, %block_0_407797 ]
  %t2591 = phi i64 [ %t2571, %block_0_407797 ]
  %t2592 = phi i64 [ %t2572, %block_0_407797 ]
  %t2593 = phi i64 [ %t2573, %block_0_407797 ]
  %t2594 = phi i64 [ %t2574, %block_0_407797 ]
  %t2595 = phi i64 [ %t2575, %block_0_407797 ]
  %t2596 = phi i64 [ %t2576, %block_0_407797 ]
  %t2597 = phi i64 [ %t2577, %block_0_407797 ]
  %t2598 = phi i64 [ %t2578, %block_0_407797 ]
  %t2599 = phi i512 [ %t2579, %block_0_407797 ]
  %t2600 = phi i512 [ %t2580, %block_0_407797 ]
  %t2601 = phi i512 [ %t2581, %block_0_407797 ]
  %t2602 = phi i512 [ %t2582, %block_0_407797 ]
  %t2603 = phi i512 [ %t2583, %block_0_407797 ]
  %t2604 = phi i512 [ %t2584, %block_0_407797 ]
  %t2605 = phi i512 [ %t2585, %block_0_407797 ]
  %t2606 = phi i512 [ %t2586, %block_0_407797 ]
  ; r2508 := (read (0x6354a8 : bv 64) (bv 32))
  %t2607 = inttoptr i64 6509736 to i32*
  %t2608 = load i32, i32* %t2607
  ; r2509 := (bv_ult r2508 (0x1 : bv 32))
  %t2609 = icmp ult i32 %t2608, 1
  ; r2510 := (eq r2508 (0x1 : bv 32))
  %t2610 = icmp eq i32 %t2608, 1
  ; r2511 := (or r2509 r2510)
  %t2611 = or i1 %t2609, %t2610
  br i1 %t2611, label %block_0_4077f3, label %block_0_4077a8
block_0_4077a8:
  %t2612 = phi i64 [ %t2591, %block_0_40779f ]
  %t2613 = phi i64 [ %t2592, %block_0_40779f ]
  %t2614 = phi i64 [ %t2593, %block_0_40779f ]
  %t2615 = phi i64 [ %t2594, %block_0_40779f ]
  %t2616 = phi i64 [ %t2595, %block_0_40779f ]
  %t2617 = phi i64 [ %t2596, %block_0_40779f ]
  %t2618 = phi i64 [ %t2597, %block_0_40779f ]
  %t2619 = phi i64 [ %t2598, %block_0_40779f ]
  %t2620 = phi i512 [ %t2599, %block_0_40779f ]
  %t2621 = phi i512 [ %t2600, %block_0_40779f ]
  %t2622 = phi i512 [ %t2601, %block_0_40779f ]
  %t2623 = phi i512 [ %t2602, %block_0_40779f ]
  %t2624 = phi i512 [ %t2603, %block_0_40779f ]
  %t2625 = phi i512 [ %t2604, %block_0_40779f ]
  %t2626 = phi i512 [ %t2605, %block_0_40779f ]
  %t2627 = phi i512 [ %t2606, %block_0_40779f ]
  br label %block_0_4077ad
block_0_4077ad:
  %t2628 = phi i64 [ %t2612, %block_0_4077a8 ], [ %t2736, %block_0_4077eb ]
  %t2629 = phi i64 [ 1, %block_0_4077a8 ], [ %t2755, %block_0_4077eb ]
  %t2630 = phi i64 [ %t2613, %block_0_4077a8 ], [ %t2738, %block_0_4077eb ]
  %t2631 = phi i64 [ %t2614, %block_0_4077a8 ], [ %t2739, %block_0_4077eb ]
  %t2632 = phi i64 [ %t2615, %block_0_4077a8 ], [ %t2740, %block_0_4077eb ]
  %t2633 = phi i64 [ %t2616, %block_0_4077a8 ], [ %t2741, %block_0_4077eb ]
  %t2634 = phi i64 [ %t2617, %block_0_4077a8 ], [ %t2742, %block_0_4077eb ]
  %t2635 = phi i64 [ %t2618, %block_0_4077a8 ], [ %t2743, %block_0_4077eb ]
  %t2636 = phi i64 [ %t2619, %block_0_4077a8 ], [ %t2744, %block_0_4077eb ]
  %t2637 = phi i512 [ %t2620, %block_0_4077a8 ], [ %t2745, %block_0_4077eb ]
  %t2638 = phi i512 [ %t2621, %block_0_4077a8 ], [ %t2746, %block_0_4077eb ]
  %t2639 = phi i512 [ %t2622, %block_0_4077a8 ], [ %t2747, %block_0_4077eb ]
  %t2640 = phi i512 [ %t2623, %block_0_4077a8 ], [ %t2748, %block_0_4077eb ]
  %t2641 = phi i512 [ %t2624, %block_0_4077a8 ], [ %t2749, %block_0_4077eb ]
  %t2642 = phi i512 [ %t2625, %block_0_4077a8 ], [ %t2750, %block_0_4077eb ]
  %t2643 = phi i512 [ %t2626, %block_0_4077a8 ], [ %t2751, %block_0_4077eb ]
  %t2644 = phi i512 [ %t2627, %block_0_4077a8 ], [ %t2752, %block_0_4077eb ]
  ; r2545 := (trunc r2529 32)
  %t2645 = trunc i64 %t2629 to i32
  ; r2546 := (uext r2545 64)
  %t2646 = zext i32 %t2645 to i64
  ; r2547 := (trunc r2529 8)
  %t2647 = trunc i64 %t2629 to i8
  ; r2548 := (bv_and r2547 (0x1f : bv 8))
  %t2648 = and i8 %t2647, 31
  ; r2549 := (eq r2548 (0x0 : bv 8))
  %t2649 = icmp eq i8 %t2648, 0
  ; r2550 := (uext r2548 32)
  %t2650 = zext i8 %t2648 to i32
  ; r2551 := (bv_shl (0x1 : bv 32) r2550)
  %t2651 = shl i32 1, %t2650
  ; r2552 := (mux r2549 (0x1 : bv 32) r2551)
  %t2652 = select i1 %t2649, i32 1, i32 %t2651
  ; r2553 := (uext r2552 64)
  %t2653 = zext i32 %t2652 to i64
  ; r2554 := (bv_ult r2552 (0x0 : bv 32))
  %t2654 = icmp ult i32 %t2652, 0
  ; r2555 := (eq r2552 (0x0 : bv 32))
  %t2655 = icmp eq i32 %t2652, 0
  ; r2556 := (or r2554 r2555)
  %t2656 = or i1 %t2654, %t2655
  br i1 %t2656, label %block_0_4077db, label %block_0_4077c6
block_0_4077c6:
  %t2657 = phi i64 [ %t2646, %block_0_4077ad ], [ %t2657, %block_0_4077c6 ]
  %t2658 = phi i64 [ %t2653, %block_0_4077ad ], [ %t2658, %block_0_4077c6 ]
  %t2659 = phi i64 [ %t2628, %block_0_4077ad ], [ %t2659, %block_0_4077c6 ]
  %t2660 = phi i64 [ %t2629, %block_0_4077ad ], [ %t2660, %block_0_4077c6 ]
  %t2661 = phi i64 [ %t2630, %block_0_4077ad ], [ %t2661, %block_0_4077c6 ]
  %t2662 = phi i64 [ %t2631, %block_0_4077ad ], [ %t2662, %block_0_4077c6 ]
  %t2663 = phi i64 [ %t2632, %block_0_4077ad ], [ %t2663, %block_0_4077c6 ]
  %t2664 = phi i64 [ %t2633, %block_0_4077ad ], [ %t2664, %block_0_4077c6 ]
  %t2665 = phi i64 [ %t2634, %block_0_4077ad ], [ %t2665, %block_0_4077c6 ]
  %t2666 = phi i64 [ %t2635, %block_0_4077ad ], [ %t2666, %block_0_4077c6 ]
  %t2667 = phi i64 [ %t2636, %block_0_4077ad ], [ %t2667, %block_0_4077c6 ]
  %t2668 = phi i512 [ %t2637, %block_0_4077ad ], [ %t2668, %block_0_4077c6 ]
  %t2669 = phi i512 [ %t2638, %block_0_4077ad ], [ %t2669, %block_0_4077c6 ]
  %t2670 = phi i512 [ %t2639, %block_0_4077ad ], [ %t2670, %block_0_4077c6 ]
  %t2671 = phi i512 [ %t2640, %block_0_4077ad ], [ %t2671, %block_0_4077c6 ]
  %t2672 = phi i512 [ %t2641, %block_0_4077ad ], [ %t2672, %block_0_4077c6 ]
  %t2673 = phi i512 [ %t2642, %block_0_4077ad ], [ %t2673, %block_0_4077c6 ]
  %t2674 = phi i512 [ %t2643, %block_0_4077ad ], [ %t2674, %block_0_4077c6 ]
  %t2675 = phi i512 [ %t2644, %block_0_4077ad ], [ %t2675, %block_0_4077c6 ]
  %t2676 = phi i32 [ 0, %block_0_4077ad ], [ %t2677, %block_0_4077c6 ]
  ; r2577 := (bv_add r2576 (0x1 : bv 32))
  %t2677 = add i32 %t2676, 1
  ; r2578 := (trunc r2558 32)
  %t2678 = trunc i64 %t2658 to i32
  ; r2579 := (bv_ult r2577 r2578)
  %t2679 = icmp ult i32 %t2677, %t2678
  br i1 %t2679, label %block_0_4077c6, label %block_0_4077db
block_0_4077db:
  %t2680 = phi i64 [ %t2646, %block_0_4077ad ], [ %t2657, %block_0_4077c6 ]
  %t2681 = phi i64 [ %t2653, %block_0_4077ad ], [ %t2658, %block_0_4077c6 ]
  %t2682 = phi i64 [ %t2628, %block_0_4077ad ], [ %t2659, %block_0_4077c6 ]
  %t2683 = phi i64 [ %t2629, %block_0_4077ad ], [ %t2660, %block_0_4077c6 ]
  %t2684 = phi i64 [ %t2630, %block_0_4077ad ], [ %t2661, %block_0_4077c6 ]
  %t2685 = phi i64 [ %t2631, %block_0_4077ad ], [ %t2662, %block_0_4077c6 ]
  %t2686 = phi i64 [ %t2632, %block_0_4077ad ], [ %t2663, %block_0_4077c6 ]
  %t2687 = phi i64 [ %t2633, %block_0_4077ad ], [ %t2664, %block_0_4077c6 ]
  %t2688 = phi i64 [ %t2634, %block_0_4077ad ], [ %t2665, %block_0_4077c6 ]
  %t2689 = phi i64 [ %t2635, %block_0_4077ad ], [ %t2666, %block_0_4077c6 ]
  %t2690 = phi i64 [ %t2636, %block_0_4077ad ], [ %t2667, %block_0_4077c6 ]
  %t2691 = phi i512 [ %t2637, %block_0_4077ad ], [ %t2668, %block_0_4077c6 ]
  %t2692 = phi i512 [ %t2638, %block_0_4077ad ], [ %t2669, %block_0_4077c6 ]
  %t2693 = phi i512 [ %t2639, %block_0_4077ad ], [ %t2670, %block_0_4077c6 ]
  %t2694 = phi i512 [ %t2640, %block_0_4077ad ], [ %t2671, %block_0_4077c6 ]
  %t2695 = phi i512 [ %t2641, %block_0_4077ad ], [ %t2672, %block_0_4077c6 ]
  %t2696 = phi i512 [ %t2642, %block_0_4077ad ], [ %t2673, %block_0_4077c6 ]
  %t2697 = phi i512 [ %t2643, %block_0_4077ad ], [ %t2674, %block_0_4077c6 ]
  %t2698 = phi i512 [ %t2644, %block_0_4077ad ], [ %t2675, %block_0_4077c6 ]
  ; r2599 := (bitcast r2591 (vec 8 double))
  %t2699 = bitcast i512 %t2691 to <8 x double>
  ; r2600 := (bitcast r2592 (vec 8 double))
  %t2700 = bitcast i512 %t2692 to <8 x double>
  ; r2601 := (bitcast r2593 (vec 8 double))
  %t2701 = bitcast i512 %t2693 to <8 x double>
  ; r2602 := (bitcast r2594 (vec 8 double))
  %t2702 = bitcast i512 %t2694 to <8 x double>
  ; r2603 := (bitcast r2595 (vec 8 double))
  %t2703 = bitcast i512 %t2695 to <8 x double>
  ; r2604 := (bitcast r2596 (vec 8 double))
  %t2704 = bitcast i512 %t2696 to <8 x double>
  ; r2605 := (bitcast r2597 (vec 8 double))
  %t2705 = bitcast i512 %t2697 to <8 x double>
  ; r2606 := (bitcast r2598 (vec 8 double))
  %t2706 = bitcast i512 %t2698 to <8 x double>
  ; r2607 := call pthread_mutex_trylock_int(r2588, r2584, r2581, r2580, r2585, r2586, r2599, r2600, r2601, r2602, r2603, r2604, r2605, r2606)
  %t2707 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t2688, i64 %t2684, i64 %t2681, i64 %t2680, i64 %t2685, i64 %t2686, <8 x double> %t2699, <8 x double> %t2700, <8 x double> %t2701, <8 x double> %t2702, <8 x double> %t2703, <8 x double> %t2704, <8 x double> %t2705, <8 x double> %t2706)
  ; r2608 := (tuple_field r2607 0)
  %t2708 = extractvalue { i64, i64, <8 x double> } %t2707, 0
  ; r2609 := (tuple_field r2607 1)
  %t2709 = extractvalue { i64, i64, <8 x double> } %t2707, 1
  ; r2610 := (tuple_field r2607 2)
  %t2710 = extractvalue { i64, i64, <8 x double> } %t2707, 2
  ; r2611 := (bitcast r2610 (bv 512))
  %t2711 = bitcast <8 x double> %t2710 to i512
  br label %block_0_4077e3
block_0_4077e3:
  %t2712 = phi i64 [ %t2708, %block_0_4077db ]
  %t2713 = phi i64 [ %t2680, %block_0_4077db ]
  %t2714 = phi i64 [ %t2709, %block_0_4077db ]
  %t2715 = phi i64 [ %t2682, %block_0_4077db ]
  %t2716 = phi i64 [ %t2683, %block_0_4077db ]
  %t2717 = phi i64 [ %t2684, %block_0_4077db ]
  %t2718 = phi i64 [ %t2685, %block_0_4077db ]
  %t2719 = phi i64 [ %t2686, %block_0_4077db ]
  %t2720 = phi i64 [ %t2687, %block_0_4077db ]
  %t2721 = phi i64 [ %t2688, %block_0_4077db ]
  %t2722 = phi i64 [ %t2689, %block_0_4077db ]
  %t2723 = phi i64 [ %t2690, %block_0_4077db ]
  %t2724 = phi i512 [ %t2711, %block_0_4077db ]
  %t2725 = phi i512 [ %t2692, %block_0_4077db ]
  %t2726 = phi i512 [ %t2693, %block_0_4077db ]
  %t2727 = phi i512 [ %t2694, %block_0_4077db ]
  %t2728 = phi i512 [ %t2695, %block_0_4077db ]
  %t2729 = phi i512 [ %t2696, %block_0_4077db ]
  %t2730 = phi i512 [ %t2697, %block_0_4077db ]
  %t2731 = phi i512 [ %t2698, %block_0_4077db ]
  ; r2632 := (trunc r2612 32)
  %t2732 = trunc i64 %t2712 to i32
  ; r2633 := (eq r2632 (0x0 : bv 32))
  %t2733 = icmp eq i32 %t2732, 0
  br i1 %t2733, label %block_0_4070db, label %block_0_4077eb
block_0_4077eb:
  %t2734 = phi i64 [ %t2713, %block_0_4077e3 ]
  %t2735 = phi i64 [ %t2714, %block_0_4077e3 ]
  %t2736 = phi i64 [ %t2715, %block_0_4077e3 ]
  %t2737 = phi i64 [ %t2716, %block_0_4077e3 ]
  %t2738 = phi i64 [ %t2717, %block_0_4077e3 ]
  %t2739 = phi i64 [ %t2718, %block_0_4077e3 ]
  %t2740 = phi i64 [ %t2719, %block_0_4077e3 ]
  %t2741 = phi i64 [ %t2720, %block_0_4077e3 ]
  %t2742 = phi i64 [ %t2721, %block_0_4077e3 ]
  %t2743 = phi i64 [ %t2722, %block_0_4077e3 ]
  %t2744 = phi i64 [ %t2723, %block_0_4077e3 ]
  %t2745 = phi i512 [ %t2724, %block_0_4077e3 ]
  %t2746 = phi i512 [ %t2725, %block_0_4077e3 ]
  %t2747 = phi i512 [ %t2726, %block_0_4077e3 ]
  %t2748 = phi i512 [ %t2727, %block_0_4077e3 ]
  %t2749 = phi i512 [ %t2728, %block_0_4077e3 ]
  %t2750 = phi i512 [ %t2729, %block_0_4077e3 ]
  %t2751 = phi i512 [ %t2730, %block_0_4077e3 ]
  %t2752 = phi i512 [ %t2731, %block_0_4077e3 ]
  ; r2653 := (trunc r2637 32)
  %t2753 = trunc i64 %t2737 to i32
  ; r2654 := (bv_add r2653 (0x1 : bv 32))
  %t2754 = add i32 %t2753, 1
  ; r2655 := (uext r2654 64)
  %t2755 = zext i32 %t2754 to i64
  ; r2656 := (eq r2653 (0xb : bv 32))
  %t2756 = icmp eq i32 %t2753, 11
  br i1 %t2756, label %block_0_4077f3, label %block_0_4077ad
block_0_4077f3:
  %t2757 = phi i64 [ %t2589, %block_0_40779f ], [ %t2734, %block_0_4077eb ]
  %t2758 = phi i64 [ %t2590, %block_0_40779f ], [ %t2735, %block_0_4077eb ]
  %t2759 = phi i64 [ %t2591, %block_0_40779f ], [ %t2736, %block_0_4077eb ]
  %t2760 = phi i64 [ %t2592, %block_0_40779f ], [ %t2738, %block_0_4077eb ]
  %t2761 = phi i64 [ %t2593, %block_0_40779f ], [ %t2739, %block_0_4077eb ]
  %t2762 = phi i64 [ %t2594, %block_0_40779f ], [ %t2740, %block_0_4077eb ]
  %t2763 = phi i64 [ %t2595, %block_0_40779f ], [ %t2741, %block_0_4077eb ]
  %t2764 = phi i64 [ %t2596, %block_0_40779f ], [ %t2742, %block_0_4077eb ]
  %t2765 = phi i64 [ %t2597, %block_0_40779f ], [ %t2743, %block_0_4077eb ]
  %t2766 = phi i64 [ %t2598, %block_0_40779f ], [ %t2744, %block_0_4077eb ]
  %t2767 = phi i512 [ %t2599, %block_0_40779f ], [ %t2745, %block_0_4077eb ]
  %t2768 = phi i512 [ %t2600, %block_0_40779f ], [ %t2746, %block_0_4077eb ]
  %t2769 = phi i512 [ %t2601, %block_0_40779f ], [ %t2747, %block_0_4077eb ]
  %t2770 = phi i512 [ %t2602, %block_0_40779f ], [ %t2748, %block_0_4077eb ]
  %t2771 = phi i512 [ %t2603, %block_0_40779f ], [ %t2749, %block_0_4077eb ]
  %t2772 = phi i512 [ %t2604, %block_0_40779f ], [ %t2750, %block_0_4077eb ]
  %t2773 = phi i512 [ %t2605, %block_0_40779f ], [ %t2751, %block_0_4077eb ]
  %t2774 = phi i512 [ %t2606, %block_0_40779f ], [ %t2752, %block_0_4077eb ]
  ; r2675 := (bitcast r2667 (vec 8 double))
  %t2775 = bitcast i512 %t2767 to <8 x double>
  ; r2676 := (bitcast r2668 (vec 8 double))
  %t2776 = bitcast i512 %t2768 to <8 x double>
  ; r2677 := (bitcast r2669 (vec 8 double))
  %t2777 = bitcast i512 %t2769 to <8 x double>
  ; r2678 := (bitcast r2670 (vec 8 double))
  %t2778 = bitcast i512 %t2770 to <8 x double>
  ; r2679 := (bitcast r2671 (vec 8 double))
  %t2779 = bitcast i512 %t2771 to <8 x double>
  ; r2680 := (bitcast r2672 (vec 8 double))
  %t2780 = bitcast i512 %t2772 to <8 x double>
  ; r2681 := (bitcast r2673 (vec 8 double))
  %t2781 = bitcast i512 %t2773 to <8 x double>
  ; r2682 := (bitcast r2674 (vec 8 double))
  %t2782 = bitcast i512 %t2774 to <8 x double>
  ; r2683 := call pthread_mutex_lock_int(r2664, r2660, r2658, r2657, r2661, r2662, r2675, r2676, r2677, r2678, r2679, r2680, r2681, r2682)
  %t2783 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 %t2764, i64 %t2760, i64 %t2758, i64 %t2757, i64 %t2761, i64 %t2762, <8 x double> %t2775, <8 x double> %t2776, <8 x double> %t2777, <8 x double> %t2778, <8 x double> %t2779, <8 x double> %t2780, <8 x double> %t2781, <8 x double> %t2782)
  ; r2684 := (tuple_field r2683 0)
  %t2784 = extractvalue { i64, i64, <8 x double> } %t2783, 0
  ; r2685 := (tuple_field r2683 1)
  %t2785 = extractvalue { i64, i64, <8 x double> } %t2783, 1
  ; r2686 := (tuple_field r2683 2)
  %t2786 = extractvalue { i64, i64, <8 x double> } %t2783, 2
  ; r2687 := (bitcast r2686 (bv 512))
  %t2787 = bitcast <8 x double> %t2786 to i512
  br label %block_0_4077fb
block_0_4077fb:
  %t2788 = phi i64 [ %t2757, %block_0_4077f3 ]
  %t2789 = phi i64 [ %t2759, %block_0_4077f3 ]
  %t2790 = phi i64 [ %t2760, %block_0_4077f3 ]
  %t2791 = phi i64 [ %t2761, %block_0_4077f3 ]
  %t2792 = phi i64 [ %t2762, %block_0_4077f3 ]
  %t2793 = phi i64 [ %t2763, %block_0_4077f3 ]
  %t2794 = phi i64 [ %t2764, %block_0_4077f3 ]
  %t2795 = phi i64 [ %t2765, %block_0_4077f3 ]
  %t2796 = phi i64 [ %t2766, %block_0_4077f3 ]
  %t2797 = phi i512 [ %t2787, %block_0_4077f3 ]
  %t2798 = phi i512 [ %t2768, %block_0_4077f3 ]
  %t2799 = phi i512 [ %t2769, %block_0_4077f3 ]
  %t2800 = phi i512 [ %t2770, %block_0_4077f3 ]
  %t2801 = phi i512 [ %t2771, %block_0_4077f3 ]
  %t2802 = phi i512 [ %t2772, %block_0_4077f3 ]
  %t2803 = phi i512 [ %t2773, %block_0_4077f3 ]
  %t2804 = phi i512 [ %t2774, %block_0_4077f3 ]
  br label %block_0_4070db
block_0_407800:
  %t2805 = phi i64 [ %t627, %block_0_407285 ]
  %t2806 = phi i64 [ %t628, %block_0_407285 ]
  %t2807 = phi i512 [ %t629, %block_0_407285 ]
  ; r2708 := (bitcast r2707 (vec 8 double))
  %t2808 = bitcast i512 %t2807 to <8 x double>
  ; r2709 := call memset(r2706, (0x0 : bv 64), r2705, r2708)
  %t2809 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t2806, i64 0, i64 %t2805, <8 x double> %t2808)
  ; r2710 := (tuple_field r2709 0)
  %t2810 = extractvalue { i64, i64, <8 x double> } %t2809, 0
  ; r2711 := (tuple_field r2709 1)
  %t2811 = extractvalue { i64, i64, <8 x double> } %t2809, 1
  ; r2712 := (tuple_field r2709 2)
  %t2812 = extractvalue { i64, i64, <8 x double> } %t2809, 2
  ; r2713 := (bitcast r2712 (bv 512))
  %t2813 = bitcast <8 x double> %t2812 to i512
  br label %block_0_40780d
block_0_40780d:
  %t2814 = phi i64 [ %t2811, %block_0_407800 ]
  %t2815 = phi i64 [ %t2806, %block_0_407800 ]
  %t2816 = phi i512 [ %t2813, %block_0_407800 ]
  br label %block_0_407292
block_0_407812:
  %t2817 = phi i64 [ %t774, %block_0_40731d ]
  %t2818 = phi i64 [ %t756, %block_0_40731d ]
  %t2819 = phi i64 [ %t780, %block_0_40731d ]
  %t2820 = phi i64 [ %t774, %block_0_40731d ]
  %t2821 = phi i64 [ %t759, %block_0_40731d ]
  %t2822 = phi i64 [ %t760, %block_0_40731d ]
  %t2823 = phi i64 [ %t761, %block_0_40731d ]
  %t2824 = phi i64 [ %t762, %block_0_40731d ]
  %t2825 = phi i512 [ %t763, %block_0_40731d ]
  %t2826 = phi i512 [ %t764, %block_0_40731d ]
  %t2827 = phi i512 [ %t765, %block_0_40731d ]
  %t2828 = phi i512 [ %t766, %block_0_40731d ]
  %t2829 = phi i512 [ %t767, %block_0_40731d ]
  %t2830 = phi i512 [ %t768, %block_0_40731d ]
  %t2831 = phi i512 [ %t769, %block_0_40731d ]
  %t2832 = phi i512 [ %t770, %block_0_40731d ]
  ; r2733 := (trunc r2719 32)
  %t2833 = trunc i64 %t2819 to i32
  ; r2734 := (eq r2733 (0x0 : bv 32))
  %t2834 = icmp eq i32 %t2833, 0
  ; r2735 := (bsf r2733)
  %t2835 = call i32 (i32, i1) @llvm.cttz.i32(i32 %t2833, i1 1)
  ; r2736 := (bv_add r2718 (0xb0 : bv 64))
  %t2836 = add i64 %t2818, 176
  ; r2737 := (read r2736 (bv 64))
  %t2837 = inttoptr i64 %t2836 to i64*
  %t2838 = load i64, i64* %t2837
  ; r2738 := (bv_add r2718 (0xc8 : bv 64))
  %t2839 = add i64 %t2818, 200
  ; r2739 := (read r2738 (bv 32))
  %t2840 = inttoptr i64 %t2839 to i32*
  %t2841 = load i32, i32* %t2840
  ; r2740 := (uext r2739 64)
  %t2842 = zext i32 %t2841 to i64
  ; r2741 := (trunc r2717 32)
  %t2843 = trunc i64 %t2817 to i32
  ; r2742 := (bv_shl r2741 (0x5 : bv 32))
  %t2844 = shl i32 %t2843, 5
  ; r2743 := (uext r2742 64)
  %t2845 = zext i32 %t2844 to i64
  ; r2744 := (mux r2734 (0xffffffff : bv 32) r2735)
  %t2846 = select i1 %t2834, i32 4294967295, i32 %t2835
  ; r2745 := (trunc r2744 8)
  %t2847 = trunc i32 %t2846 to i8
  ; r2746 := (uext r2744 64)
  %t2848 = zext i32 %t2846 to i64
  ; r2747 := (bv_add r2746 r2743)
  %t2849 = add i64 %t2848, %t2845
  ; r2748 := (trunc r2747 32)
  %t2850 = trunc i64 %t2849 to i32
  ; r2749 := (uext r2748 64)
  %t2851 = zext i32 %t2850 to i64
  ; r2750 := (bv_add r2721 r2740)
  %t2852 = add i64 %t2821, %t2842
  ; r2751 := (sext r2737 128)
  %t2853 = sext i64 %t2838 to i128
  ; r2752 := (sext r2749 128)
  %t2854 = sext i64 %t2851 to i128
  ; r2753 := (bv_mul r2751 r2752)
  %t2855 = mul i128 %t2853, %t2854
  ; r2754 := (trunc r2753 64)
  %t2856 = trunc i128 %t2855 to i64
  ; r2755 := (bv_add r2750 r2754)
  %t2857 = add i64 %t2852, %t2856
  ; r2756 := (bv_and r2745 (0x1f : bv 8))
  %t2858 = and i8 %t2847, 31
  ; r2757 := (eq r2756 (0x0 : bv 8))
  %t2859 = icmp eq i8 %t2858, 0
  ; r2758 := (uext r2756 32)
  %t2860 = zext i8 %t2858 to i32
  ; r2759 := (bv_shl (0x1 : bv 32) r2758)
  %t2861 = shl i32 1, %t2860
  ; r2760 := (mux r2757 (0x1 : bv 32) r2759)
  %t2862 = select i1 %t2859, i32 1, i32 %t2861
  ; r2761 := (bv_xor r2760 r2733)
  %t2863 = xor i32 %t2862, %t2833
  ; r2762 := (bv_add r2737 r2755)
  %t2864 = add i64 %t2838, %t2857
  ; r2763 := (bv_add r2762 (0xffffffffffffffff : bv 64))
  %t2865 = add i64 %t2864, 18446744073709551615
  ; r2764 := (bv_mul (0x4 : bv 64) r2720)
  %t2866 = mul i64 4, %t2820
  ; r2765 := (bv_add r2721 r2764)
  %t2867 = add i64 %t2821, %t2866
  ; r2766 := (bv_add r2765 (0x10 : bv 64))
  %t2868 = add i64 %t2867, 16
  ; write r2766 r2761
  %t2869 = inttoptr i64 %t2868 to i32*
  store i32 %t2863, i32* %t2869
  ; r2767 := (read (0x635518 : bv 64) (bv 64))
  %t2870 = inttoptr i64 6509848 to i64*
  %t2871 = load i64, i64* %t2870
  ; r2768 := (bv_complement r2767)
  %t2872 = xor i64 %t2871, -1
  ; r2769 := (bv_and r2755 r2768)
  %t2873 = and i64 %t2857, %t2872
  ; r2770 := (bv_sub r2755 r2769)
  %t2874 = sub i64 %t2857, %t2873
  ; r2771 := (bv_sub r2763 r2769)
  %t2875 = sub i64 %t2865, %t2873
  ; r2772 := (read r2769 (bv 64))
  %t2876 = inttoptr i64 %t2873 to i64*
  %t2877 = load i64, i64* %t2876
  ; r2773 := (bv_shr r2770 (0xc : bv 64))
  %t2878 = lshr i64 %t2874, 12
  ; r2774 := (bv_shr r2771 (0xc : bv 64))
  %t2879 = lshr i64 %t2875, 12
  ; r2775 := (eq r2773 r2774)
  %t2880 = icmp eq i64 %t2878, %t2879
  ; r2776 := (bv_ule r2774 r2773)
  %t2881 = icmp ule i64 %t2879, %t2878
  ; r2777 := (not r2775)
  %t2882 = icmp eq i1 %t2880, 0
  ; r2778 := (and r2776 r2777)
  %t2883 = and i1 %t2881, %t2882
  br i1 %t2883, label %block_0_407714, label %block_0_407884
block_0_407884:
  %t2884 = phi i64 [ %t2878, %block_0_407812 ]
  %t2885 = phi i64 [ %t2879, %block_0_407812 ]
  %t2886 = phi i64 [ %t2873, %block_0_407812 ]
  %t2887 = phi i64 [ %t2877, %block_0_407812 ]
  %t2888 = phi i64 [ %t2820, %block_0_407812 ]
  %t2889 = phi i64 [ %t2821, %block_0_407812 ]
  %t2890 = phi i64 [ %t2857, %block_0_407812 ]
  %t2891 = phi i64 [ %t2822, %block_0_407812 ]
  %t2892 = phi i64 [ %t2823, %block_0_407812 ]
  %t2893 = phi i64 [ %t2824, %block_0_407812 ]
  %t2894 = phi i512 [ %t2825, %block_0_407812 ]
  %t2895 = phi i512 [ %t2826, %block_0_407812 ]
  %t2896 = phi i512 [ %t2827, %block_0_407812 ]
  %t2897 = phi i512 [ %t2828, %block_0_407812 ]
  %t2898 = phi i512 [ %t2829, %block_0_407812 ]
  %t2899 = phi i512 [ %t2830, %block_0_407812 ]
  %t2900 = phi i512 [ %t2831, %block_0_407812 ]
  %t2901 = phi i512 [ %t2832, %block_0_407812 ]
  ; r2797 := (bv_mul (0x2 : bv 64) r2779)
  %t2902 = mul i64 2, %t2884
  ; r2798 := (bv_add r2779 r2797)
  %t2903 = add i64 %t2884, %t2902
  ; r2799 := (bv_mul (0x8 : bv 64) r2798)
  %t2904 = mul i64 8, %t2903
  ; r2800 := (bv_add r2781 r2799)
  %t2905 = add i64 %t2886, %t2904
  ; r2801 := (bv_add r2800 (0x28 : bv 64))
  %t2906 = add i64 %t2905, 40
  br label %block_0_40788d
block_0_40788d:
  %t2907 = phi i64 [ %t2884, %block_0_407884 ], [ %t2988, %block_0_4078a3 ]
  %t2908 = phi i64 [ %t2906, %block_0_407884 ], [ %t2991, %block_0_4078a3 ]
  %t2909 = phi i64 [ %t2885, %block_0_407884 ], [ %t2970, %block_0_4078a3 ]
  %t2910 = phi i64 [ %t2886, %block_0_407884 ], [ %t2971, %block_0_4078a3 ]
  %t2911 = phi i64 [ %t2887, %block_0_407884 ], [ %t2972, %block_0_4078a3 ]
  %t2912 = phi i64 [ %t2888, %block_0_407884 ], [ %t2973, %block_0_4078a3 ]
  %t2913 = phi i64 [ %t2889, %block_0_407884 ], [ %t2974, %block_0_4078a3 ]
  %t2914 = phi i64 [ %t2890, %block_0_407884 ], [ %t2975, %block_0_4078a3 ]
  %t2915 = phi i64 [ %t2891, %block_0_407884 ], [ %t2976, %block_0_4078a3 ]
  %t2916 = phi i64 [ %t2892, %block_0_407884 ], [ %t2977, %block_0_4078a3 ]
  %t2917 = phi i64 [ %t2893, %block_0_407884 ], [ %t2978, %block_0_4078a3 ]
  %t2918 = phi i512 [ %t2894, %block_0_407884 ], [ %t2979, %block_0_4078a3 ]
  %t2919 = phi i512 [ %t2895, %block_0_407884 ], [ %t2980, %block_0_4078a3 ]
  %t2920 = phi i512 [ %t2896, %block_0_407884 ], [ %t2981, %block_0_4078a3 ]
  %t2921 = phi i512 [ %t2897, %block_0_407884 ], [ %t2982, %block_0_4078a3 ]
  %t2922 = phi i512 [ %t2898, %block_0_407884 ], [ %t2983, %block_0_4078a3 ]
  %t2923 = phi i512 [ %t2899, %block_0_407884 ], [ %t2984, %block_0_4078a3 ]
  %t2924 = phi i512 [ %t2900, %block_0_407884 ], [ %t2985, %block_0_4078a3 ]
  %t2925 = phi i512 [ %t2901, %block_0_407884 ], [ %t2986, %block_0_4078a3 ]
  ; r2821 := (bv_add r2803 (0x10 : bv 64))
  %t2926 = add i64 %t2908, 16
  ; r2822 := (read r2821 (bv 64))
  %t2927 = inttoptr i64 %t2926 to i64*
  %t2928 = load i64, i64* %t2927
  ; r2823 := (trunc r2822 8)
  %t2929 = trunc i64 %t2928 to i8
  ; r2824 := (bv_and r2823 (0x8 : bv 8))
  %t2930 = and i8 %t2929, 8
  ; r2825 := (eq r2824 (0x0 : bv 8))
  %t2931 = icmp eq i8 %t2930, 0
  br i1 %t2931, label %block_0_4078a3, label %block_0_407895
block_0_407895:
  %t2932 = phi i64 [ %t2928, %block_0_40788d ]
  %t2933 = phi i64 [ %t2907, %block_0_40788d ]
  %t2934 = phi i64 [ %t2908, %block_0_40788d ]
  %t2935 = phi i64 [ %t2909, %block_0_40788d ]
  %t2936 = phi i64 [ %t2910, %block_0_40788d ]
  %t2937 = phi i64 [ %t2911, %block_0_40788d ]
  %t2938 = phi i64 [ %t2912, %block_0_40788d ]
  %t2939 = phi i64 [ %t2913, %block_0_40788d ]
  %t2940 = phi i64 [ %t2914, %block_0_40788d ]
  %t2941 = phi i64 [ %t2915, %block_0_40788d ]
  %t2942 = phi i64 [ %t2916, %block_0_40788d ]
  %t2943 = phi i64 [ %t2917, %block_0_40788d ]
  %t2944 = phi i512 [ %t2918, %block_0_40788d ]
  %t2945 = phi i512 [ %t2919, %block_0_40788d ]
  %t2946 = phi i512 [ %t2920, %block_0_40788d ]
  %t2947 = phi i512 [ %t2921, %block_0_40788d ]
  %t2948 = phi i512 [ %t2922, %block_0_40788d ]
  %t2949 = phi i512 [ %t2923, %block_0_40788d ]
  %t2950 = phi i512 [ %t2924, %block_0_40788d ]
  %t2951 = phi i512 [ %t2925, %block_0_40788d ]
  ; r2846 := (bv_add r2830 (0x20 : bv 64))
  %t2952 = add i64 %t2936, 32
  ; r2847 := (read r2846 (bv 64))
  %t2953 = inttoptr i64 %t2952 to i64*
  %t2954 = load i64, i64* %t2953
  ; r2848 := (read r2846 (bv 64))
  %t2955 = inttoptr i64 %t2952 to i64*
  %t2956 = load i64, i64* %t2955
  ; r2849 := (bv_add r2847 (0xffffffffffffffff : bv 64))
  %t2957 = add i64 %t2954, 18446744073709551615
  ; write r2846 r2849
  %t2958 = inttoptr i64 %t2952 to i64*
  store i64 %t2957, i64* %t2958
  ; r2850 := (bv_xor r2826 (0x8 : bv 64))
  %t2959 = xor i64 %t2932, 8
  ; r2851 := (bv_add r2831 (0x60 : bv 64))
  %t2960 = add i64 %t2937, 96
  ; r2852 := (read r2851 (bv 64))
  %t2961 = inttoptr i64 %t2960 to i64*
  %t2962 = load i64, i64* %t2961
  ; r2853 := (read r2851 (bv 64))
  %t2963 = inttoptr i64 %t2960 to i64*
  %t2964 = load i64, i64* %t2963
  ; r2854 := (bv_add r2852 (0xffffffffffffffff : bv 64))
  %t2965 = add i64 %t2962, 18446744073709551615
  ; write r2851 r2854
  %t2966 = inttoptr i64 %t2960 to i64*
  store i64 %t2965, i64* %t2966
  br label %block_0_4078a3
block_0_4078a3:
  %t2967 = phi i64 [ %t2928, %block_0_40788d ], [ %t2959, %block_0_407895 ]
  %t2968 = phi i64 [ %t2907, %block_0_40788d ], [ %t2933, %block_0_407895 ]
  %t2969 = phi i64 [ %t2908, %block_0_40788d ], [ %t2934, %block_0_407895 ]
  %t2970 = phi i64 [ %t2909, %block_0_40788d ], [ %t2935, %block_0_407895 ]
  %t2971 = phi i64 [ %t2910, %block_0_40788d ], [ %t2936, %block_0_407895 ]
  %t2972 = phi i64 [ %t2911, %block_0_40788d ], [ %t2937, %block_0_407895 ]
  %t2973 = phi i64 [ %t2912, %block_0_40788d ], [ %t2938, %block_0_407895 ]
  %t2974 = phi i64 [ %t2913, %block_0_40788d ], [ %t2939, %block_0_407895 ]
  %t2975 = phi i64 [ %t2914, %block_0_40788d ], [ %t2940, %block_0_407895 ]
  %t2976 = phi i64 [ %t2915, %block_0_40788d ], [ %t2941, %block_0_407895 ]
  %t2977 = phi i64 [ %t2916, %block_0_40788d ], [ %t2942, %block_0_407895 ]
  %t2978 = phi i64 [ %t2917, %block_0_40788d ], [ %t2943, %block_0_407895 ]
  %t2979 = phi i512 [ %t2918, %block_0_40788d ], [ %t2944, %block_0_407895 ]
  %t2980 = phi i512 [ %t2919, %block_0_40788d ], [ %t2945, %block_0_407895 ]
  %t2981 = phi i512 [ %t2920, %block_0_40788d ], [ %t2946, %block_0_407895 ]
  %t2982 = phi i512 [ %t2921, %block_0_40788d ], [ %t2947, %block_0_407895 ]
  %t2983 = phi i512 [ %t2922, %block_0_40788d ], [ %t2948, %block_0_407895 ]
  %t2984 = phi i512 [ %t2923, %block_0_40788d ], [ %t2949, %block_0_407895 ]
  %t2985 = phi i512 [ %t2924, %block_0_40788d ], [ %t2950, %block_0_407895 ]
  %t2986 = phi i512 [ %t2925, %block_0_40788d ], [ %t2951, %block_0_407895 ]
  ; r2875 := (bv_add r2855 (0x10 : bv 64))
  %t2987 = add i64 %t2967, 16
  ; r2876 := (bv_add r2856 (0x1 : bv 64))
  %t2988 = add i64 %t2968, 1
  ; r2877 := (bv_add r2857 (0x10 : bv 64))
  %t2989 = add i64 %t2969, 16
  ; write r2877 r2875
  %t2990 = inttoptr i64 %t2989 to i64*
  store i64 %t2987, i64* %t2990
  ; r2878 := (bv_add r2857 (0x18 : bv 64))
  %t2991 = add i64 %t2969, 24
  ; r2879 := (bv_ult r2858 r2876)
  %t2992 = icmp ult i64 %t2970, %t2988
  br i1 %t2992, label %block_0_4078b8, label %block_0_40788d
block_0_4078b8:
  %t2993 = phi i64 [ %t2988, %block_0_4078a3 ]
  %t2994 = phi i64 [ %t2991, %block_0_4078a3 ]
  %t2995 = phi i64 [ %t2970, %block_0_4078a3 ]
  %t2996 = phi i64 [ %t2972, %block_0_4078a3 ]
  %t2997 = phi i64 [ %t2973, %block_0_4078a3 ]
  %t2998 = phi i64 [ %t2974, %block_0_4078a3 ]
  %t2999 = phi i64 [ %t2975, %block_0_4078a3 ]
  %t3000 = phi i64 [ %t2976, %block_0_4078a3 ]
  %t3001 = phi i64 [ %t2977, %block_0_4078a3 ]
  %t3002 = phi i64 [ %t2978, %block_0_4078a3 ]
  %t3003 = phi i512 [ %t2979, %block_0_4078a3 ]
  %t3004 = phi i512 [ %t2980, %block_0_4078a3 ]
  %t3005 = phi i512 [ %t2981, %block_0_4078a3 ]
  %t3006 = phi i512 [ %t2982, %block_0_4078a3 ]
  %t3007 = phi i512 [ %t2983, %block_0_4078a3 ]
  %t3008 = phi i512 [ %t2984, %block_0_4078a3 ]
  %t3009 = phi i512 [ %t2985, %block_0_4078a3 ]
  %t3010 = phi i512 [ %t2986, %block_0_4078a3 ]
  br label %block_0_407714
block_0_4078bd:
  %t3011 = phi i64 [ %t179, %block_0_407101 ]
  %t3012 = phi i64 [ %t161, %block_0_407101 ]
  %t3013 = phi i64 [ %t185, %block_0_407101 ]
  %t3014 = phi i64 [ %t179, %block_0_407101 ]
  %t3015 = phi i64 [ %t164, %block_0_407101 ]
  %t3016 = phi i64 [ %t165, %block_0_407101 ]
  %t3017 = phi i64 [ %t166, %block_0_407101 ]
  %t3018 = phi i64 [ %t167, %block_0_407101 ]
  %t3019 = phi i512 [ %t168, %block_0_407101 ]
  %t3020 = phi i512 [ %t169, %block_0_407101 ]
  %t3021 = phi i512 [ %t170, %block_0_407101 ]
  %t3022 = phi i512 [ %t171, %block_0_407101 ]
  %t3023 = phi i512 [ %t172, %block_0_407101 ]
  %t3024 = phi i512 [ %t173, %block_0_407101 ]
  %t3025 = phi i512 [ %t174, %block_0_407101 ]
  %t3026 = phi i512 [ %t175, %block_0_407101 ]
  ; r2914 := (trunc r2900 32)
  %t3027 = trunc i64 %t3013 to i32
  ; r2915 := (eq r2914 (0x0 : bv 32))
  %t3028 = icmp eq i32 %t3027, 0
  ; r2916 := (bsf r2914)
  %t3029 = call i32 (i32, i1) @llvm.cttz.i32(i32 %t3027, i1 1)
  ; r2917 := (bv_add r2899 (0xb0 : bv 64))
  %t3030 = add i64 %t3012, 176
  ; r2918 := (read r2917 (bv 64))
  %t3031 = inttoptr i64 %t3030 to i64*
  %t3032 = load i64, i64* %t3031
  ; r2919 := (bv_add r2899 (0xc8 : bv 64))
  %t3033 = add i64 %t3012, 200
  ; r2920 := (read r2919 (bv 32))
  %t3034 = inttoptr i64 %t3033 to i32*
  %t3035 = load i32, i32* %t3034
  ; r2921 := (uext r2920 64)
  %t3036 = zext i32 %t3035 to i64
  ; r2922 := (trunc r2898 32)
  %t3037 = trunc i64 %t3011 to i32
  ; r2923 := (bv_shl r2922 (0x5 : bv 32))
  %t3038 = shl i32 %t3037, 5
  ; r2924 := (uext r2923 64)
  %t3039 = zext i32 %t3038 to i64
  ; r2925 := (mux r2915 (0xffffffff : bv 32) r2916)
  %t3040 = select i1 %t3028, i32 4294967295, i32 %t3029
  ; r2926 := (trunc r2925 8)
  %t3041 = trunc i32 %t3040 to i8
  ; r2927 := (uext r2925 64)
  %t3042 = zext i32 %t3040 to i64
  ; r2928 := (bv_add r2927 r2924)
  %t3043 = add i64 %t3042, %t3039
  ; r2929 := (trunc r2928 32)
  %t3044 = trunc i64 %t3043 to i32
  ; r2930 := (uext r2929 64)
  %t3045 = zext i32 %t3044 to i64
  ; r2931 := (bv_add r2902 r2921)
  %t3046 = add i64 %t3015, %t3036
  ; r2932 := (sext r2918 128)
  %t3047 = sext i64 %t3032 to i128
  ; r2933 := (sext r2930 128)
  %t3048 = sext i64 %t3045 to i128
  ; r2934 := (bv_mul r2932 r2933)
  %t3049 = mul i128 %t3047, %t3048
  ; r2935 := (trunc r2934 64)
  %t3050 = trunc i128 %t3049 to i64
  ; r2936 := (bv_add r2931 r2935)
  %t3051 = add i64 %t3046, %t3050
  ; r2937 := (bv_and r2926 (0x1f : bv 8))
  %t3052 = and i8 %t3041, 31
  ; r2938 := (eq r2937 (0x0 : bv 8))
  %t3053 = icmp eq i8 %t3052, 0
  ; r2939 := (uext r2937 32)
  %t3054 = zext i8 %t3052 to i32
  ; r2940 := (bv_shl (0x1 : bv 32) r2939)
  %t3055 = shl i32 1, %t3054
  ; r2941 := (mux r2938 (0x1 : bv 32) r2940)
  %t3056 = select i1 %t3053, i32 1, i32 %t3055
  ; r2942 := (bv_xor r2941 r2914)
  %t3057 = xor i32 %t3056, %t3027
  ; r2943 := (bv_add r2918 r2936)
  %t3058 = add i64 %t3032, %t3051
  ; r2944 := (bv_add r2943 (0xffffffffffffffff : bv 64))
  %t3059 = add i64 %t3058, 18446744073709551615
  ; r2945 := (bv_mul (0x4 : bv 64) r2901)
  %t3060 = mul i64 4, %t3014
  ; r2946 := (bv_add r2902 r2945)
  %t3061 = add i64 %t3015, %t3060
  ; r2947 := (bv_add r2946 (0x10 : bv 64))
  %t3062 = add i64 %t3061, 16
  ; write r2947 r2942
  %t3063 = inttoptr i64 %t3062 to i32*
  store i32 %t3057, i32* %t3063
  ; r2948 := (read (0x635518 : bv 64) (bv 64))
  %t3064 = inttoptr i64 6509848 to i64*
  %t3065 = load i64, i64* %t3064
  ; r2949 := (bv_complement r2948)
  %t3066 = xor i64 %t3065, -1
  ; r2950 := (bv_and r2936 r2949)
  %t3067 = and i64 %t3051, %t3066
  ; r2951 := (bv_sub r2936 r2950)
  %t3068 = sub i64 %t3051, %t3067
  ; r2952 := (bv_sub r2944 r2950)
  %t3069 = sub i64 %t3059, %t3067
  ; r2953 := (read r2950 (bv 64))
  %t3070 = inttoptr i64 %t3067 to i64*
  %t3071 = load i64, i64* %t3070
  ; r2954 := (bv_shr r2951 (0xc : bv 64))
  %t3072 = lshr i64 %t3068, 12
  ; r2955 := (bv_shr r2952 (0xc : bv 64))
  %t3073 = lshr i64 %t3069, 12
  ; r2956 := (eq r2954 r2955)
  %t3074 = icmp eq i64 %t3072, %t3073
  ; r2957 := (bv_ule r2955 r2954)
  %t3075 = icmp ule i64 %t3073, %t3072
  ; r2958 := (not r2956)
  %t3076 = icmp eq i1 %t3074, 0
  ; r2959 := (and r2957 r2958)
  %t3077 = and i1 %t3075, %t3076
  br i1 %t3077, label %block_0_407714, label %block_0_40792f
block_0_40792f:
  %t3078 = phi i64 [ %t3072, %block_0_4078bd ]
  %t3079 = phi i64 [ %t3073, %block_0_4078bd ]
  %t3080 = phi i64 [ %t3067, %block_0_4078bd ]
  %t3081 = phi i64 [ %t3071, %block_0_4078bd ]
  %t3082 = phi i64 [ %t3014, %block_0_4078bd ]
  %t3083 = phi i64 [ %t3015, %block_0_4078bd ]
  %t3084 = phi i64 [ %t3051, %block_0_4078bd ]
  %t3085 = phi i64 [ %t3016, %block_0_4078bd ]
  %t3086 = phi i64 [ %t3017, %block_0_4078bd ]
  %t3087 = phi i64 [ %t3018, %block_0_4078bd ]
  %t3088 = phi i512 [ %t3019, %block_0_4078bd ]
  %t3089 = phi i512 [ %t3020, %block_0_4078bd ]
  %t3090 = phi i512 [ %t3021, %block_0_4078bd ]
  %t3091 = phi i512 [ %t3022, %block_0_4078bd ]
  %t3092 = phi i512 [ %t3023, %block_0_4078bd ]
  %t3093 = phi i512 [ %t3024, %block_0_4078bd ]
  %t3094 = phi i512 [ %t3025, %block_0_4078bd ]
  %t3095 = phi i512 [ %t3026, %block_0_4078bd ]
  ; r2978 := (bv_mul (0x2 : bv 64) r2960)
  %t3096 = mul i64 2, %t3078
  ; r2979 := (bv_add r2960 r2978)
  %t3097 = add i64 %t3078, %t3096
  ; r2980 := (bv_mul (0x8 : bv 64) r2979)
  %t3098 = mul i64 8, %t3097
  ; r2981 := (bv_add r2962 r2980)
  %t3099 = add i64 %t3080, %t3098
  ; r2982 := (bv_add r2981 (0x28 : bv 64))
  %t3100 = add i64 %t3099, 40
  br label %block_0_407938
block_0_407938:
  %t3101 = phi i64 [ %t3078, %block_0_40792f ], [ %t3182, %block_0_40794e ]
  %t3102 = phi i64 [ %t3100, %block_0_40792f ], [ %t3185, %block_0_40794e ]
  %t3103 = phi i64 [ %t3079, %block_0_40792f ], [ %t3164, %block_0_40794e ]
  %t3104 = phi i64 [ %t3080, %block_0_40792f ], [ %t3165, %block_0_40794e ]
  %t3105 = phi i64 [ %t3081, %block_0_40792f ], [ %t3166, %block_0_40794e ]
  %t3106 = phi i64 [ %t3082, %block_0_40792f ], [ %t3167, %block_0_40794e ]
  %t3107 = phi i64 [ %t3083, %block_0_40792f ], [ %t3168, %block_0_40794e ]
  %t3108 = phi i64 [ %t3084, %block_0_40792f ], [ %t3169, %block_0_40794e ]
  %t3109 = phi i64 [ %t3085, %block_0_40792f ], [ %t3170, %block_0_40794e ]
  %t3110 = phi i64 [ %t3086, %block_0_40792f ], [ %t3171, %block_0_40794e ]
  %t3111 = phi i64 [ %t3087, %block_0_40792f ], [ %t3172, %block_0_40794e ]
  %t3112 = phi i512 [ %t3088, %block_0_40792f ], [ %t3173, %block_0_40794e ]
  %t3113 = phi i512 [ %t3089, %block_0_40792f ], [ %t3174, %block_0_40794e ]
  %t3114 = phi i512 [ %t3090, %block_0_40792f ], [ %t3175, %block_0_40794e ]
  %t3115 = phi i512 [ %t3091, %block_0_40792f ], [ %t3176, %block_0_40794e ]
  %t3116 = phi i512 [ %t3092, %block_0_40792f ], [ %t3177, %block_0_40794e ]
  %t3117 = phi i512 [ %t3093, %block_0_40792f ], [ %t3178, %block_0_40794e ]
  %t3118 = phi i512 [ %t3094, %block_0_40792f ], [ %t3179, %block_0_40794e ]
  %t3119 = phi i512 [ %t3095, %block_0_40792f ], [ %t3180, %block_0_40794e ]
  ; r3002 := (bv_add r2984 (0x10 : bv 64))
  %t3120 = add i64 %t3102, 16
  ; r3003 := (read r3002 (bv 64))
  %t3121 = inttoptr i64 %t3120 to i64*
  %t3122 = load i64, i64* %t3121
  ; r3004 := (trunc r3003 8)
  %t3123 = trunc i64 %t3122 to i8
  ; r3005 := (bv_and r3004 (0x8 : bv 8))
  %t3124 = and i8 %t3123, 8
  ; r3006 := (eq r3005 (0x0 : bv 8))
  %t3125 = icmp eq i8 %t3124, 0
  br i1 %t3125, label %block_0_40794e, label %block_0_407940
block_0_407940:
  %t3126 = phi i64 [ %t3122, %block_0_407938 ]
  %t3127 = phi i64 [ %t3101, %block_0_407938 ]
  %t3128 = phi i64 [ %t3102, %block_0_407938 ]
  %t3129 = phi i64 [ %t3103, %block_0_407938 ]
  %t3130 = phi i64 [ %t3104, %block_0_407938 ]
  %t3131 = phi i64 [ %t3105, %block_0_407938 ]
  %t3132 = phi i64 [ %t3106, %block_0_407938 ]
  %t3133 = phi i64 [ %t3107, %block_0_407938 ]
  %t3134 = phi i64 [ %t3108, %block_0_407938 ]
  %t3135 = phi i64 [ %t3109, %block_0_407938 ]
  %t3136 = phi i64 [ %t3110, %block_0_407938 ]
  %t3137 = phi i64 [ %t3111, %block_0_407938 ]
  %t3138 = phi i512 [ %t3112, %block_0_407938 ]
  %t3139 = phi i512 [ %t3113, %block_0_407938 ]
  %t3140 = phi i512 [ %t3114, %block_0_407938 ]
  %t3141 = phi i512 [ %t3115, %block_0_407938 ]
  %t3142 = phi i512 [ %t3116, %block_0_407938 ]
  %t3143 = phi i512 [ %t3117, %block_0_407938 ]
  %t3144 = phi i512 [ %t3118, %block_0_407938 ]
  %t3145 = phi i512 [ %t3119, %block_0_407938 ]
  ; r3027 := (bv_add r3011 (0x20 : bv 64))
  %t3146 = add i64 %t3130, 32
  ; r3028 := (read r3027 (bv 64))
  %t3147 = inttoptr i64 %t3146 to i64*
  %t3148 = load i64, i64* %t3147
  ; r3029 := (read r3027 (bv 64))
  %t3149 = inttoptr i64 %t3146 to i64*
  %t3150 = load i64, i64* %t3149
  ; r3030 := (bv_add r3028 (0xffffffffffffffff : bv 64))
  %t3151 = add i64 %t3148, 18446744073709551615
  ; write r3027 r3030
  %t3152 = inttoptr i64 %t3146 to i64*
  store i64 %t3151, i64* %t3152
  ; r3031 := (bv_xor r3007 (0x8 : bv 64))
  %t3153 = xor i64 %t3126, 8
  ; r3032 := (bv_add r3012 (0x60 : bv 64))
  %t3154 = add i64 %t3131, 96
  ; r3033 := (read r3032 (bv 64))
  %t3155 = inttoptr i64 %t3154 to i64*
  %t3156 = load i64, i64* %t3155
  ; r3034 := (read r3032 (bv 64))
  %t3157 = inttoptr i64 %t3154 to i64*
  %t3158 = load i64, i64* %t3157
  ; r3035 := (bv_add r3033 (0xffffffffffffffff : bv 64))
  %t3159 = add i64 %t3156, 18446744073709551615
  ; write r3032 r3035
  %t3160 = inttoptr i64 %t3154 to i64*
  store i64 %t3159, i64* %t3160
  br label %block_0_40794e
block_0_40794e:
  %t3161 = phi i64 [ %t3122, %block_0_407938 ], [ %t3153, %block_0_407940 ]
  %t3162 = phi i64 [ %t3101, %block_0_407938 ], [ %t3127, %block_0_407940 ]
  %t3163 = phi i64 [ %t3102, %block_0_407938 ], [ %t3128, %block_0_407940 ]
  %t3164 = phi i64 [ %t3103, %block_0_407938 ], [ %t3129, %block_0_407940 ]
  %t3165 = phi i64 [ %t3104, %block_0_407938 ], [ %t3130, %block_0_407940 ]
  %t3166 = phi i64 [ %t3105, %block_0_407938 ], [ %t3131, %block_0_407940 ]
  %t3167 = phi i64 [ %t3106, %block_0_407938 ], [ %t3132, %block_0_407940 ]
  %t3168 = phi i64 [ %t3107, %block_0_407938 ], [ %t3133, %block_0_407940 ]
  %t3169 = phi i64 [ %t3108, %block_0_407938 ], [ %t3134, %block_0_407940 ]
  %t3170 = phi i64 [ %t3109, %block_0_407938 ], [ %t3135, %block_0_407940 ]
  %t3171 = phi i64 [ %t3110, %block_0_407938 ], [ %t3136, %block_0_407940 ]
  %t3172 = phi i64 [ %t3111, %block_0_407938 ], [ %t3137, %block_0_407940 ]
  %t3173 = phi i512 [ %t3112, %block_0_407938 ], [ %t3138, %block_0_407940 ]
  %t3174 = phi i512 [ %t3113, %block_0_407938 ], [ %t3139, %block_0_407940 ]
  %t3175 = phi i512 [ %t3114, %block_0_407938 ], [ %t3140, %block_0_407940 ]
  %t3176 = phi i512 [ %t3115, %block_0_407938 ], [ %t3141, %block_0_407940 ]
  %t3177 = phi i512 [ %t3116, %block_0_407938 ], [ %t3142, %block_0_407940 ]
  %t3178 = phi i512 [ %t3117, %block_0_407938 ], [ %t3143, %block_0_407940 ]
  %t3179 = phi i512 [ %t3118, %block_0_407938 ], [ %t3144, %block_0_407940 ]
  %t3180 = phi i512 [ %t3119, %block_0_407938 ], [ %t3145, %block_0_407940 ]
  ; r3056 := (bv_add r3036 (0x10 : bv 64))
  %t3181 = add i64 %t3161, 16
  ; r3057 := (bv_add r3037 (0x1 : bv 64))
  %t3182 = add i64 %t3162, 1
  ; r3058 := (bv_add r3038 (0x10 : bv 64))
  %t3183 = add i64 %t3163, 16
  ; write r3058 r3056
  %t3184 = inttoptr i64 %t3183 to i64*
  store i64 %t3181, i64* %t3184
  ; r3059 := (bv_add r3038 (0x18 : bv 64))
  %t3185 = add i64 %t3163, 24
  ; r3060 := (bv_ult r3039 r3057)
  %t3186 = icmp ult i64 %t3164, %t3182
  br i1 %t3186, label %block_0_407963, label %block_0_407938
block_0_407963:
  %t3187 = phi i64 [ %t3182, %block_0_40794e ]
  %t3188 = phi i64 [ %t3185, %block_0_40794e ]
  %t3189 = phi i64 [ %t3164, %block_0_40794e ]
  %t3190 = phi i64 [ %t3166, %block_0_40794e ]
  %t3191 = phi i64 [ %t3167, %block_0_40794e ]
  %t3192 = phi i64 [ %t3168, %block_0_40794e ]
  %t3193 = phi i64 [ %t3169, %block_0_40794e ]
  %t3194 = phi i64 [ %t3170, %block_0_40794e ]
  %t3195 = phi i64 [ %t3171, %block_0_40794e ]
  %t3196 = phi i64 [ %t3172, %block_0_40794e ]
  %t3197 = phi i512 [ %t3173, %block_0_40794e ]
  %t3198 = phi i512 [ %t3174, %block_0_40794e ]
  %t3199 = phi i512 [ %t3175, %block_0_40794e ]
  %t3200 = phi i512 [ %t3176, %block_0_40794e ]
  %t3201 = phi i512 [ %t3177, %block_0_40794e ]
  %t3202 = phi i512 [ %t3178, %block_0_40794e ]
  %t3203 = phi i512 [ %t3179, %block_0_40794e ]
  %t3204 = phi i512 [ %t3180, %block_0_40794e ]
  br label %block_0_407714
block_0_407968:
  %t3205 = phi i64 [ %t1215, %block_0_40746f ]
  %t3206 = phi i64 [ %t1216, %block_0_40746f ]
  %t3207 = phi i64 [ %t1217, %block_0_40746f ]
  %t3208 = phi i64 [ %t1218, %block_0_40746f ]
  %t3209 = phi i64 [ %t1219, %block_0_40746f ]
  %t3210 = phi i64 [ %t1220, %block_0_40746f ]
  %t3211 = phi i64 [ %t1221, %block_0_40746f ]
  %t3212 = phi i64 [ %t1222, %block_0_40746f ]
  %t3213 = phi i512 [ %t1223, %block_0_40746f ]
  %t3214 = phi i512 [ %t1224, %block_0_40746f ]
  %t3215 = phi i512 [ %t1225, %block_0_40746f ]
  %t3216 = phi i512 [ %t1226, %block_0_40746f ]
  %t3217 = phi i512 [ %t1227, %block_0_40746f ]
  %t3218 = phi i512 [ %t1228, %block_0_40746f ]
  %t3219 = phi i512 [ %t1229, %block_0_40746f ]
  %t3220 = phi i512 [ %t1230, %block_0_40746f ]
  ; r3095 := (bitcast r3087 (vec 8 double))
  %t3221 = bitcast i512 %t3213 to <8 x double>
  ; r3096 := (bitcast r3088 (vec 8 double))
  %t3222 = bitcast i512 %t3214 to <8 x double>
  ; r3097 := (bitcast r3089 (vec 8 double))
  %t3223 = bitcast i512 %t3215 to <8 x double>
  ; r3098 := (bitcast r3090 (vec 8 double))
  %t3224 = bitcast i512 %t3216 to <8 x double>
  ; r3099 := (bitcast r3091 (vec 8 double))
  %t3225 = bitcast i512 %t3217 to <8 x double>
  ; r3100 := (bitcast r3092 (vec 8 double))
  %t3226 = bitcast i512 %t3218 to <8 x double>
  ; r3101 := (bitcast r3093 (vec 8 double))
  %t3227 = bitcast i512 %t3219 to <8 x double>
  ; r3102 := (bitcast r3094 (vec 8 double))
  %t3228 = bitcast i512 %t3220 to <8 x double>
  ; r3103 := call pthread_mutex_unlock_int((0x6356b0 : bv 64), r3083, r3080, r3079, r3084, r3085, r3095, r3096, r3097, r3098, r3099, r3100, r3101, r3102)
  %t3229 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510256, i64 %t3209, i64 %t3206, i64 %t3205, i64 %t3210, i64 %t3211, <8 x double> %t3221, <8 x double> %t3222, <8 x double> %t3223, <8 x double> %t3224, <8 x double> %t3225, <8 x double> %t3226, <8 x double> %t3227, <8 x double> %t3228)
  ; r3104 := (tuple_field r3103 0)
  %t3230 = extractvalue { i64, i64, <8 x double> } %t3229, 0
  ; r3105 := (tuple_field r3103 1)
  %t3231 = extractvalue { i64, i64, <8 x double> } %t3229, 1
  ; r3106 := (tuple_field r3103 2)
  %t3232 = extractvalue { i64, i64, <8 x double> } %t3229, 2
  ; r3107 := (bitcast r3106 (bv 512))
  %t3233 = bitcast <8 x double> %t3232 to i512
  br label %block_0_407972
block_0_407972:
  %t3234 = phi i64 [ %t3205, %block_0_407968 ]
  %t3235 = phi i64 [ %t3231, %block_0_407968 ]
  %t3236 = phi i64 [ %t3207, %block_0_407968 ]
  %t3237 = phi i64 [ %t3208, %block_0_407968 ]
  %t3238 = phi i64 [ %t3209, %block_0_407968 ]
  %t3239 = phi i64 [ %t3210, %block_0_407968 ]
  %t3240 = phi i64 [ %t3211, %block_0_407968 ]
  %t3241 = phi i64 [ %t3212, %block_0_407968 ]
  %t3242 = phi i512 [ %t3233, %block_0_407968 ]
  %t3243 = phi i512 [ %t3214, %block_0_407968 ]
  %t3244 = phi i512 [ %t3215, %block_0_407968 ]
  %t3245 = phi i512 [ %t3216, %block_0_407968 ]
  %t3246 = phi i512 [ %t3217, %block_0_407968 ]
  %t3247 = phi i512 [ %t3218, %block_0_407968 ]
  %t3248 = phi i512 [ %t3219, %block_0_407968 ]
  %t3249 = phi i512 [ %t3220, %block_0_407968 ]
  br label %block_0_407220
block_0_407977:
  %t3250 = phi i64 [ %t1148, %block_0_407456 ]
  %t3251 = phi i64 [ %t1149, %block_0_407456 ]
  %t3252 = phi i64 [ %t1150, %block_0_407456 ]
  %t3253 = phi i64 [ %t1151, %block_0_407456 ]
  %t3254 = phi i64 [ %t1152, %block_0_407456 ]
  %t3255 = phi i64 [ %t1153, %block_0_407456 ]
  %t3256 = phi i64 [ %t1154, %block_0_407456 ]
  %t3257 = phi i64 [ %t1155, %block_0_407456 ]
  %t3258 = phi i64 [ %t1156, %block_0_407456 ]
  %t3259 = phi i512 [ %t1157, %block_0_407456 ]
  %t3260 = phi i512 [ %t1158, %block_0_407456 ]
  %t3261 = phi i512 [ %t1159, %block_0_407456 ]
  %t3262 = phi i512 [ %t1160, %block_0_407456 ]
  %t3263 = phi i512 [ %t1161, %block_0_407456 ]
  %t3264 = phi i512 [ %t1162, %block_0_407456 ]
  %t3265 = phi i512 [ %t1163, %block_0_407456 ]
  %t3266 = phi i512 [ %t1164, %block_0_407456 ]
  ; r3141 := (bitcast r3133 (vec 8 double))
  %t3267 = bitcast i512 %t3259 to <8 x double>
  ; r3142 := (bitcast r3134 (vec 8 double))
  %t3268 = bitcast i512 %t3260 to <8 x double>
  ; r3143 := (bitcast r3135 (vec 8 double))
  %t3269 = bitcast i512 %t3261 to <8 x double>
  ; r3144 := (bitcast r3136 (vec 8 double))
  %t3270 = bitcast i512 %t3262 to <8 x double>
  ; r3145 := (bitcast r3137 (vec 8 double))
  %t3271 = bitcast i512 %t3263 to <8 x double>
  ; r3146 := (bitcast r3138 (vec 8 double))
  %t3272 = bitcast i512 %t3264 to <8 x double>
  ; r3147 := (bitcast r3139 (vec 8 double))
  %t3273 = bitcast i512 %t3265 to <8 x double>
  ; r3148 := (bitcast r3140 (vec 8 double))
  %t3274 = bitcast i512 %t3266 to <8 x double>
  ; r3149 := call pthread_mutex_trylock_int((0x6356b0 : bv 64), r3128, r3125, r3124, r3129, r3130, r3141, r3142, r3143, r3144, r3145, r3146, r3147, r3148)
  %t3275 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 6510256, i64 %t3254, i64 %t3251, i64 %t3250, i64 %t3255, i64 %t3256, <8 x double> %t3267, <8 x double> %t3268, <8 x double> %t3269, <8 x double> %t3270, <8 x double> %t3271, <8 x double> %t3272, <8 x double> %t3273, <8 x double> %t3274)
  ; r3150 := (tuple_field r3149 0)
  %t3276 = extractvalue { i64, i64, <8 x double> } %t3275, 0
  ; r3151 := (tuple_field r3149 1)
  %t3277 = extractvalue { i64, i64, <8 x double> } %t3275, 1
  ; r3152 := (tuple_field r3149 2)
  %t3278 = extractvalue { i64, i64, <8 x double> } %t3275, 2
  ; r3153 := (bitcast r3152 (bv 512))
  %t3279 = bitcast <8 x double> %t3278 to i512
  br label %block_0_407981
block_0_407981:
  %t3280 = phi i64 [ %t3276, %block_0_407977 ]
  %t3281 = phi i64 [ %t3250, %block_0_407977 ]
  %t3282 = phi i64 [ %t3277, %block_0_407977 ]
  %t3283 = phi i64 [ %t3252, %block_0_407977 ]
  %t3284 = phi i64 [ %t3253, %block_0_407977 ]
  %t3285 = phi i64 [ %t3254, %block_0_407977 ]
  %t3286 = phi i64 [ %t3255, %block_0_407977 ]
  %t3287 = phi i64 [ %t3256, %block_0_407977 ]
  %t3288 = phi i64 [ %t3251, %block_0_407977 ]
  %t3289 = phi i64 [ %t3257, %block_0_407977 ]
  %t3290 = phi i64 [ %t3258, %block_0_407977 ]
  %t3291 = phi i512 [ %t3279, %block_0_407977 ]
  %t3292 = phi i512 [ %t3260, %block_0_407977 ]
  %t3293 = phi i512 [ %t3261, %block_0_407977 ]
  %t3294 = phi i512 [ %t3262, %block_0_407977 ]
  %t3295 = phi i512 [ %t3263, %block_0_407977 ]
  %t3296 = phi i512 [ %t3264, %block_0_407977 ]
  %t3297 = phi i512 [ %t3265, %block_0_407977 ]
  %t3298 = phi i512 [ %t3266, %block_0_407977 ]
  ; r3173 := (trunc r3154 32)
  %t3299 = trunc i64 %t3280 to i32
  ; r3174 := (eq r3173 (0x0 : bv 32))
  %t3300 = icmp eq i32 %t3299, 0
  br i1 %t3300, label %block_0_4079df, label %block_0_407985
block_0_407985:
  %t3301 = phi i64 [ %t3281, %block_0_407981 ]
  %t3302 = phi i64 [ %t3282, %block_0_407981 ]
  %t3303 = phi i64 [ %t3283, %block_0_407981 ]
  %t3304 = phi i64 [ %t3284, %block_0_407981 ]
  %t3305 = phi i64 [ %t3285, %block_0_407981 ]
  %t3306 = phi i64 [ %t3286, %block_0_407981 ]
  %t3307 = phi i64 [ %t3287, %block_0_407981 ]
  %t3308 = phi i64 [ %t3288, %block_0_407981 ]
  %t3309 = phi i64 [ %t3289, %block_0_407981 ]
  %t3310 = phi i64 [ %t3290, %block_0_407981 ]
  %t3311 = phi i512 [ %t3291, %block_0_407981 ]
  %t3312 = phi i512 [ %t3292, %block_0_407981 ]
  %t3313 = phi i512 [ %t3293, %block_0_407981 ]
  %t3314 = phi i512 [ %t3294, %block_0_407981 ]
  %t3315 = phi i512 [ %t3295, %block_0_407981 ]
  %t3316 = phi i512 [ %t3296, %block_0_407981 ]
  %t3317 = phi i512 [ %t3297, %block_0_407981 ]
  %t3318 = phi i512 [ %t3298, %block_0_407981 ]
  ; r3193 := (read (0x6354a8 : bv 64) (bv 32))
  %t3319 = inttoptr i64 6509736 to i32*
  %t3320 = load i32, i32* %t3319
  ; r3194 := (bv_ult r3193 (0x1 : bv 32))
  %t3321 = icmp ult i32 %t3320, 1
  ; r3195 := (eq r3193 (0x1 : bv 32))
  %t3322 = icmp eq i32 %t3320, 1
  ; r3196 := (or r3194 r3195)
  %t3323 = or i1 %t3321, %t3322
  br i1 %t3323, label %block_0_4079d5, label %block_0_40798e
block_0_40798e:
  %t3324 = phi i64 [ %t3303, %block_0_407985 ]
  %t3325 = phi i64 [ %t3304, %block_0_407985 ]
  %t3326 = phi i64 [ %t3305, %block_0_407985 ]
  %t3327 = phi i64 [ %t3306, %block_0_407985 ]
  %t3328 = phi i64 [ %t3307, %block_0_407985 ]
  %t3329 = phi i64 [ %t3308, %block_0_407985 ]
  %t3330 = phi i64 [ %t3309, %block_0_407985 ]
  %t3331 = phi i64 [ %t3310, %block_0_407985 ]
  %t3332 = phi i512 [ %t3311, %block_0_407985 ]
  %t3333 = phi i512 [ %t3312, %block_0_407985 ]
  %t3334 = phi i512 [ %t3313, %block_0_407985 ]
  %t3335 = phi i512 [ %t3314, %block_0_407985 ]
  %t3336 = phi i512 [ %t3315, %block_0_407985 ]
  %t3337 = phi i512 [ %t3316, %block_0_407985 ]
  %t3338 = phi i512 [ %t3317, %block_0_407985 ]
  %t3339 = phi i512 [ %t3318, %block_0_407985 ]
  ; r3213 := (bv_and r3198 (0xffffffffffffff00 : bv 64))
  %t3340 = and i64 %t3325, 18446744073709551360
  ; r3214 := (bv_or r3213 (0x1 : bv 64))
  %t3341 = or i64 %t3340, 1
  br label %block_0_407991
block_0_407991:
  %t3342 = phi i64 [ %t3324, %block_0_40798e ], [ %t3446, %block_0_4079cd ]
  %t3343 = phi i64 [ %t3341, %block_0_40798e ], [ %t3464, %block_0_4079cd ]
  %t3344 = phi i64 [ %t3326, %block_0_40798e ], [ %t3448, %block_0_4079cd ]
  %t3345 = phi i64 [ %t3327, %block_0_40798e ], [ %t3449, %block_0_4079cd ]
  %t3346 = phi i64 [ %t3328, %block_0_40798e ], [ %t3450, %block_0_4079cd ]
  %t3347 = phi i64 [ %t3329, %block_0_40798e ], [ %t3451, %block_0_4079cd ]
  %t3348 = phi i64 [ %t3330, %block_0_40798e ], [ %t3452, %block_0_4079cd ]
  %t3349 = phi i64 [ %t3331, %block_0_40798e ], [ %t3453, %block_0_4079cd ]
  %t3350 = phi i512 [ %t3332, %block_0_40798e ], [ %t3454, %block_0_4079cd ]
  %t3351 = phi i512 [ %t3333, %block_0_40798e ], [ %t3455, %block_0_4079cd ]
  %t3352 = phi i512 [ %t3334, %block_0_40798e ], [ %t3456, %block_0_4079cd ]
  %t3353 = phi i512 [ %t3335, %block_0_40798e ], [ %t3457, %block_0_4079cd ]
  %t3354 = phi i512 [ %t3336, %block_0_40798e ], [ %t3458, %block_0_4079cd ]
  %t3355 = phi i512 [ %t3337, %block_0_40798e ], [ %t3459, %block_0_4079cd ]
  %t3356 = phi i512 [ %t3338, %block_0_40798e ], [ %t3460, %block_0_4079cd ]
  %t3357 = phi i512 [ %t3339, %block_0_40798e ], [ %t3461, %block_0_4079cd ]
  ; r3231 := (trunc r3216 32)
  %t3358 = trunc i64 %t3343 to i32
  ; r3232 := (uext r3231 64)
  %t3359 = zext i32 %t3358 to i64
  ; r3233 := (trunc r3216 8)
  %t3360 = trunc i64 %t3343 to i8
  ; r3234 := (bv_and r3233 (0x1f : bv 8))
  %t3361 = and i8 %t3360, 31
  ; r3235 := (eq r3234 (0x0 : bv 8))
  %t3362 = icmp eq i8 %t3361, 0
  ; r3236 := (uext r3234 32)
  %t3363 = zext i8 %t3361 to i32
  ; r3237 := (bv_shl (0x1 : bv 32) r3236)
  %t3364 = shl i32 1, %t3363
  ; r3238 := (mux r3235 (0x1 : bv 32) r3237)
  %t3365 = select i1 %t3362, i32 1, i32 %t3364
  ; r3239 := (uext r3238 64)
  %t3366 = zext i32 %t3365 to i64
  ; r3240 := (bv_ult r3238 (0x0 : bv 32))
  %t3367 = icmp ult i32 %t3365, 0
  ; r3241 := (eq r3238 (0x0 : bv 32))
  %t3368 = icmp eq i32 %t3365, 0
  ; r3242 := (or r3240 r3241)
  %t3369 = or i1 %t3367, %t3368
  br i1 %t3369, label %block_0_4079bf, label %block_0_4079aa
block_0_4079aa:
  %t3370 = phi i64 [ %t3359, %block_0_407991 ], [ %t3370, %block_0_4079aa ]
  %t3371 = phi i64 [ %t3366, %block_0_407991 ], [ %t3371, %block_0_4079aa ]
  %t3372 = phi i64 [ %t3342, %block_0_407991 ], [ %t3372, %block_0_4079aa ]
  %t3373 = phi i64 [ %t3343, %block_0_407991 ], [ %t3373, %block_0_4079aa ]
  %t3374 = phi i64 [ %t3344, %block_0_407991 ], [ %t3374, %block_0_4079aa ]
  %t3375 = phi i64 [ %t3345, %block_0_407991 ], [ %t3375, %block_0_4079aa ]
  %t3376 = phi i64 [ %t3346, %block_0_407991 ], [ %t3376, %block_0_4079aa ]
  %t3377 = phi i64 [ %t3347, %block_0_407991 ], [ %t3377, %block_0_4079aa ]
  %t3378 = phi i64 [ %t3348, %block_0_407991 ], [ %t3378, %block_0_4079aa ]
  %t3379 = phi i64 [ %t3349, %block_0_407991 ], [ %t3379, %block_0_4079aa ]
  %t3380 = phi i512 [ %t3350, %block_0_407991 ], [ %t3380, %block_0_4079aa ]
  %t3381 = phi i512 [ %t3351, %block_0_407991 ], [ %t3381, %block_0_4079aa ]
  %t3382 = phi i512 [ %t3352, %block_0_407991 ], [ %t3382, %block_0_4079aa ]
  %t3383 = phi i512 [ %t3353, %block_0_407991 ], [ %t3383, %block_0_4079aa ]
  %t3384 = phi i512 [ %t3354, %block_0_407991 ], [ %t3384, %block_0_4079aa ]
  %t3385 = phi i512 [ %t3355, %block_0_407991 ], [ %t3385, %block_0_4079aa ]
  %t3386 = phi i512 [ %t3356, %block_0_407991 ], [ %t3386, %block_0_4079aa ]
  %t3387 = phi i512 [ %t3357, %block_0_407991 ], [ %t3387, %block_0_4079aa ]
  %t3388 = phi i32 [ 0, %block_0_407991 ], [ %t3389, %block_0_4079aa ]
  ; r3262 := (bv_add r3261 (0x1 : bv 32))
  %t3389 = add i32 %t3388, 1
  ; r3263 := (trunc r3244 32)
  %t3390 = trunc i64 %t3371 to i32
  ; r3264 := (bv_ult r3262 r3263)
  %t3391 = icmp ult i32 %t3389, %t3390
  br i1 %t3391, label %block_0_4079aa, label %block_0_4079bf
block_0_4079bf:
  %t3392 = phi i64 [ %t3359, %block_0_407991 ], [ %t3370, %block_0_4079aa ]
  %t3393 = phi i64 [ %t3366, %block_0_407991 ], [ %t3371, %block_0_4079aa ]
  %t3394 = phi i64 [ %t3342, %block_0_407991 ], [ %t3372, %block_0_4079aa ]
  %t3395 = phi i64 [ %t3343, %block_0_407991 ], [ %t3373, %block_0_4079aa ]
  %t3396 = phi i64 [ %t3344, %block_0_407991 ], [ %t3374, %block_0_4079aa ]
  %t3397 = phi i64 [ %t3345, %block_0_407991 ], [ %t3375, %block_0_4079aa ]
  %t3398 = phi i64 [ %t3346, %block_0_407991 ], [ %t3376, %block_0_4079aa ]
  %t3399 = phi i64 [ %t3347, %block_0_407991 ], [ %t3377, %block_0_4079aa ]
  %t3400 = phi i64 [ %t3348, %block_0_407991 ], [ %t3378, %block_0_4079aa ]
  %t3401 = phi i64 [ %t3349, %block_0_407991 ], [ %t3379, %block_0_4079aa ]
  %t3402 = phi i512 [ %t3350, %block_0_407991 ], [ %t3380, %block_0_4079aa ]
  %t3403 = phi i512 [ %t3351, %block_0_407991 ], [ %t3381, %block_0_4079aa ]
  %t3404 = phi i512 [ %t3352, %block_0_407991 ], [ %t3382, %block_0_4079aa ]
  %t3405 = phi i512 [ %t3353, %block_0_407991 ], [ %t3383, %block_0_4079aa ]
  %t3406 = phi i512 [ %t3354, %block_0_407991 ], [ %t3384, %block_0_4079aa ]
  %t3407 = phi i512 [ %t3355, %block_0_407991 ], [ %t3385, %block_0_4079aa ]
  %t3408 = phi i512 [ %t3356, %block_0_407991 ], [ %t3386, %block_0_4079aa ]
  %t3409 = phi i512 [ %t3357, %block_0_407991 ], [ %t3387, %block_0_4079aa ]
  ; r3283 := (bitcast r3275 (vec 8 double))
  %t3410 = bitcast i512 %t3402 to <8 x double>
  ; r3284 := (bitcast r3276 (vec 8 double))
  %t3411 = bitcast i512 %t3403 to <8 x double>
  ; r3285 := (bitcast r3277 (vec 8 double))
  %t3412 = bitcast i512 %t3404 to <8 x double>
  ; r3286 := (bitcast r3278 (vec 8 double))
  %t3413 = bitcast i512 %t3405 to <8 x double>
  ; r3287 := (bitcast r3279 (vec 8 double))
  %t3414 = bitcast i512 %t3406 to <8 x double>
  ; r3288 := (bitcast r3280 (vec 8 double))
  %t3415 = bitcast i512 %t3407 to <8 x double>
  ; r3289 := (bitcast r3281 (vec 8 double))
  %t3416 = bitcast i512 %t3408 to <8 x double>
  ; r3290 := (bitcast r3282 (vec 8 double))
  %t3417 = bitcast i512 %t3409 to <8 x double>
  ; r3291 := call pthread_mutex_trylock_int((0x6356b0 : bv 64), r3269, r3266, r3265, r3270, r3271, r3283, r3284, r3285, r3286, r3287, r3288, r3289, r3290)
  %t3418 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 6510256, i64 %t3396, i64 %t3393, i64 %t3392, i64 %t3397, i64 %t3398, <8 x double> %t3410, <8 x double> %t3411, <8 x double> %t3412, <8 x double> %t3413, <8 x double> %t3414, <8 x double> %t3415, <8 x double> %t3416, <8 x double> %t3417)
  ; r3292 := (tuple_field r3291 0)
  %t3419 = extractvalue { i64, i64, <8 x double> } %t3418, 0
  ; r3293 := (tuple_field r3291 1)
  %t3420 = extractvalue { i64, i64, <8 x double> } %t3418, 1
  ; r3294 := (tuple_field r3291 2)
  %t3421 = extractvalue { i64, i64, <8 x double> } %t3418, 2
  ; r3295 := (bitcast r3294 (bv 512))
  %t3422 = bitcast <8 x double> %t3421 to i512
  br label %block_0_4079c9
block_0_4079c9:
  %t3423 = phi i64 [ %t3419, %block_0_4079bf ]
  %t3424 = phi i64 [ %t3392, %block_0_4079bf ]
  %t3425 = phi i64 [ %t3420, %block_0_4079bf ]
  %t3426 = phi i64 [ %t3394, %block_0_4079bf ]
  %t3427 = phi i64 [ %t3395, %block_0_4079bf ]
  %t3428 = phi i64 [ %t3396, %block_0_4079bf ]
  %t3429 = phi i64 [ %t3397, %block_0_4079bf ]
  %t3430 = phi i64 [ %t3398, %block_0_4079bf ]
  %t3431 = phi i64 [ %t3399, %block_0_4079bf ]
  %t3432 = phi i64 [ %t3400, %block_0_4079bf ]
  %t3433 = phi i64 [ %t3401, %block_0_4079bf ]
  %t3434 = phi i512 [ %t3422, %block_0_4079bf ]
  %t3435 = phi i512 [ %t3403, %block_0_4079bf ]
  %t3436 = phi i512 [ %t3404, %block_0_4079bf ]
  %t3437 = phi i512 [ %t3405, %block_0_4079bf ]
  %t3438 = phi i512 [ %t3406, %block_0_4079bf ]
  %t3439 = phi i512 [ %t3407, %block_0_4079bf ]
  %t3440 = phi i512 [ %t3408, %block_0_4079bf ]
  %t3441 = phi i512 [ %t3409, %block_0_4079bf ]
  ; r3315 := (trunc r3296 32)
  %t3442 = trunc i64 %t3423 to i32
  ; r3316 := (eq r3315 (0x0 : bv 32))
  %t3443 = icmp eq i32 %t3442, 0
  br i1 %t3443, label %block_0_4079df, label %block_0_4079cd
block_0_4079cd:
  %t3444 = phi i64 [ %t3424, %block_0_4079c9 ]
  %t3445 = phi i64 [ %t3425, %block_0_4079c9 ]
  %t3446 = phi i64 [ %t3426, %block_0_4079c9 ]
  %t3447 = phi i64 [ %t3427, %block_0_4079c9 ]
  %t3448 = phi i64 [ %t3428, %block_0_4079c9 ]
  %t3449 = phi i64 [ %t3429, %block_0_4079c9 ]
  %t3450 = phi i64 [ %t3430, %block_0_4079c9 ]
  %t3451 = phi i64 [ %t3431, %block_0_4079c9 ]
  %t3452 = phi i64 [ %t3432, %block_0_4079c9 ]
  %t3453 = phi i64 [ %t3433, %block_0_4079c9 ]
  %t3454 = phi i512 [ %t3434, %block_0_4079c9 ]
  %t3455 = phi i512 [ %t3435, %block_0_4079c9 ]
  %t3456 = phi i512 [ %t3436, %block_0_4079c9 ]
  %t3457 = phi i512 [ %t3437, %block_0_4079c9 ]
  %t3458 = phi i512 [ %t3438, %block_0_4079c9 ]
  %t3459 = phi i512 [ %t3439, %block_0_4079c9 ]
  %t3460 = phi i512 [ %t3440, %block_0_4079c9 ]
  %t3461 = phi i512 [ %t3441, %block_0_4079c9 ]
  ; r3335 := (trunc r3320 32)
  %t3462 = trunc i64 %t3447 to i32
  ; r3336 := (bv_add r3335 (0x1 : bv 32))
  %t3463 = add i32 %t3462, 1
  ; r3337 := (uext r3336 64)
  %t3464 = zext i32 %t3463 to i64
  ; r3338 := (eq r3335 (0xb : bv 32))
  %t3465 = icmp eq i32 %t3462, 11
  br i1 %t3465, label %block_0_4079d5, label %block_0_407991
block_0_4079d5:
  %t3466 = phi i64 [ %t3301, %block_0_407985 ], [ %t3444, %block_0_4079cd ]
  %t3467 = phi i64 [ %t3302, %block_0_407985 ], [ %t3445, %block_0_4079cd ]
  %t3468 = phi i64 [ %t3303, %block_0_407985 ], [ %t3446, %block_0_4079cd ]
  %t3469 = phi i64 [ %t3305, %block_0_407985 ], [ %t3448, %block_0_4079cd ]
  %t3470 = phi i64 [ %t3306, %block_0_407985 ], [ %t3449, %block_0_4079cd ]
  %t3471 = phi i64 [ %t3307, %block_0_407985 ], [ %t3450, %block_0_4079cd ]
  %t3472 = phi i64 [ %t3308, %block_0_407985 ], [ %t3451, %block_0_4079cd ]
  %t3473 = phi i64 [ %t3309, %block_0_407985 ], [ %t3452, %block_0_4079cd ]
  %t3474 = phi i64 [ %t3310, %block_0_407985 ], [ %t3453, %block_0_4079cd ]
  %t3475 = phi i512 [ %t3311, %block_0_407985 ], [ %t3454, %block_0_4079cd ]
  %t3476 = phi i512 [ %t3312, %block_0_407985 ], [ %t3455, %block_0_4079cd ]
  %t3477 = phi i512 [ %t3313, %block_0_407985 ], [ %t3456, %block_0_4079cd ]
  %t3478 = phi i512 [ %t3314, %block_0_407985 ], [ %t3457, %block_0_4079cd ]
  %t3479 = phi i512 [ %t3315, %block_0_407985 ], [ %t3458, %block_0_4079cd ]
  %t3480 = phi i512 [ %t3316, %block_0_407985 ], [ %t3459, %block_0_4079cd ]
  %t3481 = phi i512 [ %t3317, %block_0_407985 ], [ %t3460, %block_0_4079cd ]
  %t3482 = phi i512 [ %t3318, %block_0_407985 ], [ %t3461, %block_0_4079cd ]
  ; r3356 := (bitcast r3348 (vec 8 double))
  %t3483 = bitcast i512 %t3475 to <8 x double>
  ; r3357 := (bitcast r3349 (vec 8 double))
  %t3484 = bitcast i512 %t3476 to <8 x double>
  ; r3358 := (bitcast r3350 (vec 8 double))
  %t3485 = bitcast i512 %t3477 to <8 x double>
  ; r3359 := (bitcast r3351 (vec 8 double))
  %t3486 = bitcast i512 %t3478 to <8 x double>
  ; r3360 := (bitcast r3352 (vec 8 double))
  %t3487 = bitcast i512 %t3479 to <8 x double>
  ; r3361 := (bitcast r3353 (vec 8 double))
  %t3488 = bitcast i512 %t3480 to <8 x double>
  ; r3362 := (bitcast r3354 (vec 8 double))
  %t3489 = bitcast i512 %t3481 to <8 x double>
  ; r3363 := (bitcast r3355 (vec 8 double))
  %t3490 = bitcast i512 %t3482 to <8 x double>
  ; r3364 := call pthread_mutex_lock_int((0x6356b0 : bv 64), r3342, r3340, r3339, r3343, r3344, r3356, r3357, r3358, r3359, r3360, r3361, r3362, r3363)
  %t3491 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510256, i64 %t3469, i64 %t3467, i64 %t3466, i64 %t3470, i64 %t3471, <8 x double> %t3483, <8 x double> %t3484, <8 x double> %t3485, <8 x double> %t3486, <8 x double> %t3487, <8 x double> %t3488, <8 x double> %t3489, <8 x double> %t3490)
  ; r3365 := (tuple_field r3364 0)
  %t3492 = extractvalue { i64, i64, <8 x double> } %t3491, 0
  ; r3366 := (tuple_field r3364 1)
  %t3493 = extractvalue { i64, i64, <8 x double> } %t3491, 1
  ; r3367 := (tuple_field r3364 2)
  %t3494 = extractvalue { i64, i64, <8 x double> } %t3491, 2
  ; r3368 := (bitcast r3367 (bv 512))
  %t3495 = bitcast <8 x double> %t3494 to i512
  br label %block_0_4079df
block_0_4079df:
  %t3496 = phi i64 [ %t3281, %block_0_407981 ], [ %t3424, %block_0_4079c9 ], [ %t3466, %block_0_4079d5 ]
  %t3497 = phi i64 [ %t3282, %block_0_407981 ], [ %t3425, %block_0_4079c9 ], [ %t3493, %block_0_4079d5 ]
  %t3498 = phi i64 [ %t3283, %block_0_407981 ], [ %t3426, %block_0_4079c9 ], [ %t3468, %block_0_4079d5 ]
  %t3499 = phi i64 [ %t3285, %block_0_407981 ], [ %t3428, %block_0_4079c9 ], [ %t3469, %block_0_4079d5 ]
  %t3500 = phi i64 [ %t3286, %block_0_407981 ], [ %t3429, %block_0_4079c9 ], [ %t3470, %block_0_4079d5 ]
  %t3501 = phi i64 [ %t3287, %block_0_407981 ], [ %t3430, %block_0_4079c9 ], [ %t3471, %block_0_4079d5 ]
  %t3502 = phi i64 [ %t3288, %block_0_407981 ], [ %t3431, %block_0_4079c9 ], [ %t3472, %block_0_4079d5 ]
  %t3503 = phi i64 [ %t3289, %block_0_407981 ], [ %t3432, %block_0_4079c9 ], [ %t3473, %block_0_4079d5 ]
  %t3504 = phi i64 [ %t3290, %block_0_407981 ], [ %t3433, %block_0_4079c9 ], [ %t3474, %block_0_4079d5 ]
  %t3505 = phi i512 [ %t3291, %block_0_407981 ], [ %t3434, %block_0_4079c9 ], [ %t3495, %block_0_4079d5 ]
  %t3506 = phi i512 [ %t3292, %block_0_407981 ], [ %t3435, %block_0_4079c9 ], [ %t3476, %block_0_4079d5 ]
  %t3507 = phi i512 [ %t3293, %block_0_407981 ], [ %t3436, %block_0_4079c9 ], [ %t3477, %block_0_4079d5 ]
  %t3508 = phi i512 [ %t3294, %block_0_407981 ], [ %t3437, %block_0_4079c9 ], [ %t3478, %block_0_4079d5 ]
  %t3509 = phi i512 [ %t3295, %block_0_407981 ], [ %t3438, %block_0_4079c9 ], [ %t3479, %block_0_4079d5 ]
  %t3510 = phi i512 [ %t3296, %block_0_407981 ], [ %t3439, %block_0_4079c9 ], [ %t3480, %block_0_4079d5 ]
  %t3511 = phi i512 [ %t3297, %block_0_407981 ], [ %t3440, %block_0_4079c9 ], [ %t3481, %block_0_4079d5 ]
  %t3512 = phi i512 [ %t3298, %block_0_407981 ], [ %t3441, %block_0_4079c9 ], [ %t3482, %block_0_4079d5 ]
  ; r3386 := (read (0x6356a0 : bv 64) (bv 64))
  %t3513 = inttoptr i64 6510240 to i64*
  %t3514 = load i64, i64* %t3513
  ; r3387 := (bv_add r3377 r3386)
  %t3515 = add i64 %t3504, %t3514
  ; r3388 := (read r3387 (bv 64))
  %t3516 = inttoptr i64 %t3515 to i64*
  %t3517 = load i64, i64* %t3516
  ; r3389 := (eq r3388 (0x0 : bv 64))
  %t3518 = icmp eq i64 %t3517, 0
  br i1 %t3518, label %block_0_4079f3, label %block_0_40746f
block_0_4079f3:
  %t3519 = phi i64 [ %t3496, %block_0_4079df ]
  %t3520 = phi i64 [ %t3497, %block_0_4079df ]
  %t3521 = phi i64 [ %t3498, %block_0_4079df ]
  %t3522 = phi i64 [ %t3499, %block_0_4079df ]
  %t3523 = phi i64 [ %t3500, %block_0_4079df ]
  %t3524 = phi i64 [ %t3501, %block_0_4079df ]
  %t3525 = phi i64 [ %t3502, %block_0_4079df ]
  %t3526 = phi i64 [ %t3503, %block_0_4079df ]
  %t3527 = phi i512 [ %t3505, %block_0_4079df ]
  %t3528 = phi i512 [ %t3506, %block_0_4079df ]
  %t3529 = phi i512 [ %t3507, %block_0_4079df ]
  %t3530 = phi i512 [ %t3508, %block_0_4079df ]
  %t3531 = phi i512 [ %t3509, %block_0_4079df ]
  %t3532 = phi i512 [ %t3510, %block_0_4079df ]
  %t3533 = phi i512 [ %t3511, %block_0_4079df ]
  %t3534 = phi i512 [ %t3512, %block_0_4079df ]
  br label %block_0_407464
block_0_4079f8:
  %t3535 = phi i64 [ %t1585, %block_0_407579 ]
  %t3536 = phi i64 [ %t1586, %block_0_407579 ]
  %t3537 = phi i64 [ %t1587, %block_0_407579 ]
  %t3538 = phi i64 [ %t1588, %block_0_407579 ]
  %t3539 = phi i64 [ %t1589, %block_0_407579 ]
  %t3540 = phi i64 [ %t1590, %block_0_407579 ]
  %t3541 = phi i64 [ %t1591, %block_0_407579 ]
  %t3542 = phi i64 [ %t1592, %block_0_407579 ]
  %t3543 = phi i512 [ %t1593, %block_0_407579 ]
  %t3544 = phi i512 [ %t1594, %block_0_407579 ]
  %t3545 = phi i512 [ %t1595, %block_0_407579 ]
  %t3546 = phi i512 [ %t1596, %block_0_407579 ]
  %t3547 = phi i512 [ %t1597, %block_0_407579 ]
  %t3548 = phi i512 [ %t1598, %block_0_407579 ]
  %t3549 = phi i512 [ %t1599, %block_0_407579 ]
  %t3550 = phi i512 [ %t1600, %block_0_407579 ]
  ; r3422 := (bitcast r3414 (vec 8 double))
  %t3551 = bitcast i512 %t3543 to <8 x double>
  ; r3423 := (bitcast r3415 (vec 8 double))
  %t3552 = bitcast i512 %t3544 to <8 x double>
  ; r3424 := (bitcast r3416 (vec 8 double))
  %t3553 = bitcast i512 %t3545 to <8 x double>
  ; r3425 := (bitcast r3417 (vec 8 double))
  %t3554 = bitcast i512 %t3546 to <8 x double>
  ; r3426 := (bitcast r3418 (vec 8 double))
  %t3555 = bitcast i512 %t3547 to <8 x double>
  ; r3427 := (bitcast r3419 (vec 8 double))
  %t3556 = bitcast i512 %t3548 to <8 x double>
  ; r3428 := (bitcast r3420 (vec 8 double))
  %t3557 = bitcast i512 %t3549 to <8 x double>
  ; r3429 := (bitcast r3421 (vec 8 double))
  %t3558 = bitcast i512 %t3550 to <8 x double>
  ; r3430 := call pthread_mutex_unlock_int((0x6356b0 : bv 64), r3409, r3407, r3406, r3410, r3411, r3422, r3423, r3424, r3425, r3426, r3427, r3428, r3429)
  %t3559 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510256, i64 %t3538, i64 %t3536, i64 %t3535, i64 %t3539, i64 %t3540, <8 x double> %t3551, <8 x double> %t3552, <8 x double> %t3553, <8 x double> %t3554, <8 x double> %t3555, <8 x double> %t3556, <8 x double> %t3557, <8 x double> %t3558)
  ; r3431 := (tuple_field r3430 0)
  %t3560 = extractvalue { i64, i64, <8 x double> } %t3559, 0
  ; r3432 := (tuple_field r3430 1)
  %t3561 = extractvalue { i64, i64, <8 x double> } %t3559, 1
  ; r3433 := (tuple_field r3430 2)
  %t3562 = extractvalue { i64, i64, <8 x double> } %t3559, 2
  ; r3434 := (bitcast r3433 (bv 512))
  %t3563 = bitcast <8 x double> %t3562 to i512
  br label %block_0_407a02
block_0_407a02:
  %t3564 = phi i64 [ %t3537, %block_0_4079f8 ]
  %t3565 = phi i64 [ %t3539, %block_0_4079f8 ]
  %t3566 = phi i64 [ %t3540, %block_0_4079f8 ]
  %t3567 = phi i64 [ %t3541, %block_0_4079f8 ]
  %t3568 = phi i64 [ %t3542, %block_0_4079f8 ]
  %t3569 = phi i512 [ %t3563, %block_0_4079f8 ]
  %t3570 = phi i512 [ %t3544, %block_0_4079f8 ]
  %t3571 = phi i512 [ %t3545, %block_0_4079f8 ]
  %t3572 = phi i512 [ %t3546, %block_0_4079f8 ]
  %t3573 = phi i512 [ %t3547, %block_0_4079f8 ]
  %t3574 = phi i512 [ %t3548, %block_0_4079f8 ]
  %t3575 = phi i512 [ %t3549, %block_0_4079f8 ]
  %t3576 = phi i512 [ %t3550, %block_0_4079f8 ]
  br label %block_0_4072be
block_0_407a07:
  %t3577 = phi i64 [ %t1519, %block_0_40755f ]
  %t3578 = phi i64 [ %t1520, %block_0_40755f ]
  %t3579 = phi i64 [ %t1521, %block_0_40755f ]
  %t3580 = phi i64 [ %t1522, %block_0_40755f ]
  %t3581 = phi i64 [ %t1536, %block_0_40755f ]
  %t3582 = phi i64 [ %t1523, %block_0_40755f ]
  %t3583 = phi i64 [ %t1524, %block_0_40755f ]
  %t3584 = phi i64 [ %t1525, %block_0_40755f ]
  %t3585 = phi i512 [ %t1526, %block_0_40755f ]
  %t3586 = phi i512 [ %t1527, %block_0_40755f ]
  %t3587 = phi i512 [ %t1528, %block_0_40755f ]
  %t3588 = phi i512 [ %t1529, %block_0_40755f ]
  %t3589 = phi i512 [ %t1530, %block_0_40755f ]
  %t3590 = phi i512 [ %t1531, %block_0_40755f ]
  %t3591 = phi i512 [ %t1532, %block_0_40755f ]
  %t3592 = phi i512 [ %t1533, %block_0_40755f ]
  ; r3464 := (bitcast r3456 (vec 8 double))
  %t3593 = bitcast i512 %t3585 to <8 x double>
  ; r3465 := (bitcast r3457 (vec 8 double))
  %t3594 = bitcast i512 %t3586 to <8 x double>
  ; r3466 := (bitcast r3458 (vec 8 double))
  %t3595 = bitcast i512 %t3587 to <8 x double>
  ; r3467 := (bitcast r3459 (vec 8 double))
  %t3596 = bitcast i512 %t3588 to <8 x double>
  ; r3468 := (bitcast r3460 (vec 8 double))
  %t3597 = bitcast i512 %t3589 to <8 x double>
  ; r3469 := (bitcast r3461 (vec 8 double))
  %t3598 = bitcast i512 %t3590 to <8 x double>
  ; r3470 := (bitcast r3462 (vec 8 double))
  %t3599 = bitcast i512 %t3591 to <8 x double>
  ; r3471 := (bitcast r3463 (vec 8 double))
  %t3600 = bitcast i512 %t3592 to <8 x double>
  ; r3472 := call pthread_mutex_trylock_int((0x6356b0 : bv 64), r3451, r3449, r3448, r3452, r3453, r3464, r3465, r3466, r3467, r3468, r3469, r3470, r3471)
  %t3601 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 6510256, i64 %t3580, i64 %t3578, i64 %t3577, i64 %t3581, i64 %t3582, <8 x double> %t3593, <8 x double> %t3594, <8 x double> %t3595, <8 x double> %t3596, <8 x double> %t3597, <8 x double> %t3598, <8 x double> %t3599, <8 x double> %t3600)
  ; r3473 := (tuple_field r3472 0)
  %t3602 = extractvalue { i64, i64, <8 x double> } %t3601, 0
  ; r3474 := (tuple_field r3472 1)
  %t3603 = extractvalue { i64, i64, <8 x double> } %t3601, 1
  ; r3475 := (tuple_field r3472 2)
  %t3604 = extractvalue { i64, i64, <8 x double> } %t3601, 2
  ; r3476 := (bitcast r3475 (bv 512))
  %t3605 = bitcast <8 x double> %t3604 to i512
  br label %block_0_407a11
block_0_407a11:
  %t3606 = phi i64 [ %t3602, %block_0_407a07 ]
  %t3607 = phi i64 [ %t3577, %block_0_407a07 ]
  %t3608 = phi i64 [ %t3603, %block_0_407a07 ]
  %t3609 = phi i64 [ %t3579, %block_0_407a07 ]
  %t3610 = phi i64 [ %t3578, %block_0_407a07 ]
  %t3611 = phi i64 [ %t3580, %block_0_407a07 ]
  %t3612 = phi i64 [ %t3581, %block_0_407a07 ]
  %t3613 = phi i64 [ %t3582, %block_0_407a07 ]
  %t3614 = phi i64 [ %t3583, %block_0_407a07 ]
  %t3615 = phi i64 [ %t3584, %block_0_407a07 ]
  %t3616 = phi i512 [ %t3605, %block_0_407a07 ]
  %t3617 = phi i512 [ %t3586, %block_0_407a07 ]
  %t3618 = phi i512 [ %t3587, %block_0_407a07 ]
  %t3619 = phi i512 [ %t3588, %block_0_407a07 ]
  %t3620 = phi i512 [ %t3589, %block_0_407a07 ]
  %t3621 = phi i512 [ %t3590, %block_0_407a07 ]
  %t3622 = phi i512 [ %t3591, %block_0_407a07 ]
  %t3623 = phi i512 [ %t3592, %block_0_407a07 ]
  ; r3495 := (trunc r3477 32)
  %t3624 = trunc i64 %t3606 to i32
  ; r3496 := (eq r3495 (0x0 : bv 32))
  %t3625 = icmp eq i32 %t3624, 0
  br i1 %t3625, label %block_0_407a75, label %block_0_407a15
block_0_407a15:
  %t3626 = phi i64 [ %t3607, %block_0_407a11 ]
  %t3627 = phi i64 [ %t3608, %block_0_407a11 ]
  %t3628 = phi i64 [ %t3609, %block_0_407a11 ]
  %t3629 = phi i64 [ %t3610, %block_0_407a11 ]
  %t3630 = phi i64 [ %t3611, %block_0_407a11 ]
  %t3631 = phi i64 [ %t3612, %block_0_407a11 ]
  %t3632 = phi i64 [ %t3613, %block_0_407a11 ]
  %t3633 = phi i64 [ %t3614, %block_0_407a11 ]
  %t3634 = phi i64 [ %t3615, %block_0_407a11 ]
  %t3635 = phi i512 [ %t3616, %block_0_407a11 ]
  %t3636 = phi i512 [ %t3617, %block_0_407a11 ]
  %t3637 = phi i512 [ %t3618, %block_0_407a11 ]
  %t3638 = phi i512 [ %t3619, %block_0_407a11 ]
  %t3639 = phi i512 [ %t3620, %block_0_407a11 ]
  %t3640 = phi i512 [ %t3621, %block_0_407a11 ]
  %t3641 = phi i512 [ %t3622, %block_0_407a11 ]
  %t3642 = phi i512 [ %t3623, %block_0_407a11 ]
  ; r3514 := (read (0x6354a8 : bv 64) (bv 32))
  %t3643 = inttoptr i64 6509736 to i32*
  %t3644 = load i32, i32* %t3643
  ; r3515 := (bv_ult r3514 (0x1 : bv 32))
  %t3645 = icmp ult i32 %t3644, 1
  ; r3516 := (eq r3514 (0x1 : bv 32))
  %t3646 = icmp eq i32 %t3644, 1
  ; r3517 := (or r3515 r3516)
  %t3647 = or i1 %t3645, %t3646
  br i1 %t3647, label %block_0_407a6b, label %block_0_407a1e
block_0_407a1e:
  %t3648 = phi i64 [ %t3628, %block_0_407a15 ]
  %t3649 = phi i64 [ %t3629, %block_0_407a15 ]
  %t3650 = phi i64 [ %t3630, %block_0_407a15 ]
  %t3651 = phi i64 [ %t3631, %block_0_407a15 ]
  %t3652 = phi i64 [ %t3632, %block_0_407a15 ]
  %t3653 = phi i64 [ %t3633, %block_0_407a15 ]
  %t3654 = phi i64 [ %t3634, %block_0_407a15 ]
  %t3655 = phi i512 [ %t3635, %block_0_407a15 ]
  %t3656 = phi i512 [ %t3636, %block_0_407a15 ]
  %t3657 = phi i512 [ %t3637, %block_0_407a15 ]
  %t3658 = phi i512 [ %t3638, %block_0_407a15 ]
  %t3659 = phi i512 [ %t3639, %block_0_407a15 ]
  %t3660 = phi i512 [ %t3640, %block_0_407a15 ]
  %t3661 = phi i512 [ %t3641, %block_0_407a15 ]
  %t3662 = phi i512 [ %t3642, %block_0_407a15 ]
  br label %block_0_407a24
block_0_407a24:
  %t3663 = phi i64 [ %t3648, %block_0_407a1e ], [ %t3765, %block_0_407a61 ]
  %t3664 = phi i64 [ %t3649, %block_0_407a1e ], [ %t3766, %block_0_407a61 ]
  %t3665 = phi i64 [ %t3650, %block_0_407a1e ], [ %t3767, %block_0_407a61 ]
  %t3666 = phi i64 [ %t3651, %block_0_407a1e ], [ %t3768, %block_0_407a61 ]
  %t3667 = phi i64 [ %t3652, %block_0_407a1e ], [ %t3769, %block_0_407a61 ]
  %t3668 = phi i64 [ 1, %block_0_407a1e ], [ %t3783, %block_0_407a61 ]
  %t3669 = phi i64 [ %t3653, %block_0_407a1e ], [ %t3771, %block_0_407a61 ]
  %t3670 = phi i64 [ %t3654, %block_0_407a1e ], [ %t3772, %block_0_407a61 ]
  %t3671 = phi i512 [ %t3655, %block_0_407a1e ], [ %t3773, %block_0_407a61 ]
  %t3672 = phi i512 [ %t3656, %block_0_407a1e ], [ %t3774, %block_0_407a61 ]
  %t3673 = phi i512 [ %t3657, %block_0_407a1e ], [ %t3775, %block_0_407a61 ]
  %t3674 = phi i512 [ %t3658, %block_0_407a1e ], [ %t3776, %block_0_407a61 ]
  %t3675 = phi i512 [ %t3659, %block_0_407a1e ], [ %t3777, %block_0_407a61 ]
  %t3676 = phi i512 [ %t3660, %block_0_407a1e ], [ %t3778, %block_0_407a61 ]
  %t3677 = phi i512 [ %t3661, %block_0_407a1e ], [ %t3779, %block_0_407a61 ]
  %t3678 = phi i512 [ %t3662, %block_0_407a1e ], [ %t3780, %block_0_407a61 ]
  ; r3549 := (trunc r3538 32)
  %t3679 = trunc i64 %t3668 to i32
  ; r3550 := (uext r3549 64)
  %t3680 = zext i32 %t3679 to i64
  ; r3551 := (trunc r3538 8)
  %t3681 = trunc i64 %t3668 to i8
  ; r3552 := (bv_and r3551 (0x1f : bv 8))
  %t3682 = and i8 %t3681, 31
  ; r3553 := (eq r3552 (0x0 : bv 8))
  %t3683 = icmp eq i8 %t3682, 0
  ; r3554 := (uext r3552 32)
  %t3684 = zext i8 %t3682 to i32
  ; r3555 := (bv_shl (0x1 : bv 32) r3554)
  %t3685 = shl i32 1, %t3684
  ; r3556 := (mux r3553 (0x1 : bv 32) r3555)
  %t3686 = select i1 %t3683, i32 1, i32 %t3685
  ; r3557 := (uext r3556 64)
  %t3687 = zext i32 %t3686 to i64
  ; r3558 := (bv_ult (0x0 : bv 32) r3556)
  %t3688 = icmp ult i32 0, %t3686
  br i1 %t3688, label %block_0_407a3e, label %block_0_407a53
block_0_407a3e:
  %t3689 = phi i64 [ %t3680, %block_0_407a24 ], [ %t3689, %block_0_407a3e ]
  %t3690 = phi i64 [ %t3687, %block_0_407a24 ], [ %t3690, %block_0_407a3e ]
  %t3691 = phi i64 [ %t3663, %block_0_407a24 ], [ %t3691, %block_0_407a3e ]
  %t3692 = phi i64 [ %t3664, %block_0_407a24 ], [ %t3692, %block_0_407a3e ]
  %t3693 = phi i64 [ %t3665, %block_0_407a24 ], [ %t3693, %block_0_407a3e ]
  %t3694 = phi i64 [ %t3666, %block_0_407a24 ], [ %t3694, %block_0_407a3e ]
  %t3695 = phi i64 [ %t3667, %block_0_407a24 ], [ %t3695, %block_0_407a3e ]
  %t3696 = phi i64 [ %t3668, %block_0_407a24 ], [ %t3696, %block_0_407a3e ]
  %t3697 = phi i64 [ %t3669, %block_0_407a24 ], [ %t3697, %block_0_407a3e ]
  %t3698 = phi i64 [ %t3670, %block_0_407a24 ], [ %t3698, %block_0_407a3e ]
  %t3699 = phi i512 [ %t3671, %block_0_407a24 ], [ %t3699, %block_0_407a3e ]
  %t3700 = phi i512 [ %t3672, %block_0_407a24 ], [ %t3700, %block_0_407a3e ]
  %t3701 = phi i512 [ %t3673, %block_0_407a24 ], [ %t3701, %block_0_407a3e ]
  %t3702 = phi i512 [ %t3674, %block_0_407a24 ], [ %t3702, %block_0_407a3e ]
  %t3703 = phi i512 [ %t3675, %block_0_407a24 ], [ %t3703, %block_0_407a3e ]
  %t3704 = phi i512 [ %t3676, %block_0_407a24 ], [ %t3704, %block_0_407a3e ]
  %t3705 = phi i512 [ %t3677, %block_0_407a24 ], [ %t3705, %block_0_407a3e ]
  %t3706 = phi i512 [ %t3678, %block_0_407a24 ], [ %t3706, %block_0_407a3e ]
  %t3707 = phi i32 [ 0, %block_0_407a24 ], [ %t3708, %block_0_407a3e ]
  ; r3578 := (bv_add r3577 (0x1 : bv 32))
  %t3708 = add i32 %t3707, 1
  ; r3579 := (trunc r3560 32)
  %t3709 = trunc i64 %t3690 to i32
  ; r3580 := (bv_ult r3578 r3579)
  %t3710 = icmp ult i32 %t3708, %t3709
  br i1 %t3710, label %block_0_407a3e, label %block_0_407a53
block_0_407a53:
  %t3711 = phi i64 [ %t3680, %block_0_407a24 ], [ %t3689, %block_0_407a3e ]
  %t3712 = phi i64 [ %t3687, %block_0_407a24 ], [ %t3690, %block_0_407a3e ]
  %t3713 = phi i64 [ %t3663, %block_0_407a24 ], [ %t3691, %block_0_407a3e ]
  %t3714 = phi i64 [ %t3664, %block_0_407a24 ], [ %t3692, %block_0_407a3e ]
  %t3715 = phi i64 [ %t3665, %block_0_407a24 ], [ %t3693, %block_0_407a3e ]
  %t3716 = phi i64 [ %t3666, %block_0_407a24 ], [ %t3694, %block_0_407a3e ]
  %t3717 = phi i64 [ %t3667, %block_0_407a24 ], [ %t3695, %block_0_407a3e ]
  %t3718 = phi i64 [ %t3668, %block_0_407a24 ], [ %t3696, %block_0_407a3e ]
  %t3719 = phi i64 [ %t3669, %block_0_407a24 ], [ %t3697, %block_0_407a3e ]
  %t3720 = phi i64 [ %t3670, %block_0_407a24 ], [ %t3698, %block_0_407a3e ]
  %t3721 = phi i512 [ %t3671, %block_0_407a24 ], [ %t3699, %block_0_407a3e ]
  %t3722 = phi i512 [ %t3672, %block_0_407a24 ], [ %t3700, %block_0_407a3e ]
  %t3723 = phi i512 [ %t3673, %block_0_407a24 ], [ %t3701, %block_0_407a3e ]
  %t3724 = phi i512 [ %t3674, %block_0_407a24 ], [ %t3702, %block_0_407a3e ]
  %t3725 = phi i512 [ %t3675, %block_0_407a24 ], [ %t3703, %block_0_407a3e ]
  %t3726 = phi i512 [ %t3676, %block_0_407a24 ], [ %t3704, %block_0_407a3e ]
  %t3727 = phi i512 [ %t3677, %block_0_407a24 ], [ %t3705, %block_0_407a3e ]
  %t3728 = phi i512 [ %t3678, %block_0_407a24 ], [ %t3706, %block_0_407a3e ]
  ; r3599 := (bitcast r3591 (vec 8 double))
  %t3729 = bitcast i512 %t3721 to <8 x double>
  ; r3600 := (bitcast r3592 (vec 8 double))
  %t3730 = bitcast i512 %t3722 to <8 x double>
  ; r3601 := (bitcast r3593 (vec 8 double))
  %t3731 = bitcast i512 %t3723 to <8 x double>
  ; r3602 := (bitcast r3594 (vec 8 double))
  %t3732 = bitcast i512 %t3724 to <8 x double>
  ; r3603 := (bitcast r3595 (vec 8 double))
  %t3733 = bitcast i512 %t3725 to <8 x double>
  ; r3604 := (bitcast r3596 (vec 8 double))
  %t3734 = bitcast i512 %t3726 to <8 x double>
  ; r3605 := (bitcast r3597 (vec 8 double))
  %t3735 = bitcast i512 %t3727 to <8 x double>
  ; r3606 := (bitcast r3598 (vec 8 double))
  %t3736 = bitcast i512 %t3728 to <8 x double>
  ; r3607 := call pthread_mutex_trylock_int((0x6356b0 : bv 64), r3585, r3582, r3581, r3586, r3587, r3599, r3600, r3601, r3602, r3603, r3604, r3605, r3606)
  %t3737 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 6510256, i64 %t3715, i64 %t3712, i64 %t3711, i64 %t3716, i64 %t3717, <8 x double> %t3729, <8 x double> %t3730, <8 x double> %t3731, <8 x double> %t3732, <8 x double> %t3733, <8 x double> %t3734, <8 x double> %t3735, <8 x double> %t3736)
  ; r3608 := (tuple_field r3607 0)
  %t3738 = extractvalue { i64, i64, <8 x double> } %t3737, 0
  ; r3609 := (tuple_field r3607 1)
  %t3739 = extractvalue { i64, i64, <8 x double> } %t3737, 1
  ; r3610 := (tuple_field r3607 2)
  %t3740 = extractvalue { i64, i64, <8 x double> } %t3737, 2
  ; r3611 := (bitcast r3610 (bv 512))
  %t3741 = bitcast <8 x double> %t3740 to i512
  br label %block_0_407a5d
block_0_407a5d:
  %t3742 = phi i64 [ %t3738, %block_0_407a53 ]
  %t3743 = phi i64 [ %t3711, %block_0_407a53 ]
  %t3744 = phi i64 [ %t3739, %block_0_407a53 ]
  %t3745 = phi i64 [ %t3713, %block_0_407a53 ]
  %t3746 = phi i64 [ %t3714, %block_0_407a53 ]
  %t3747 = phi i64 [ %t3715, %block_0_407a53 ]
  %t3748 = phi i64 [ %t3716, %block_0_407a53 ]
  %t3749 = phi i64 [ %t3717, %block_0_407a53 ]
  %t3750 = phi i64 [ %t3718, %block_0_407a53 ]
  %t3751 = phi i64 [ %t3719, %block_0_407a53 ]
  %t3752 = phi i64 [ %t3720, %block_0_407a53 ]
  %t3753 = phi i512 [ %t3741, %block_0_407a53 ]
  %t3754 = phi i512 [ %t3722, %block_0_407a53 ]
  %t3755 = phi i512 [ %t3723, %block_0_407a53 ]
  %t3756 = phi i512 [ %t3724, %block_0_407a53 ]
  %t3757 = phi i512 [ %t3725, %block_0_407a53 ]
  %t3758 = phi i512 [ %t3726, %block_0_407a53 ]
  %t3759 = phi i512 [ %t3727, %block_0_407a53 ]
  %t3760 = phi i512 [ %t3728, %block_0_407a53 ]
  ; r3631 := (trunc r3612 32)
  %t3761 = trunc i64 %t3742 to i32
  ; r3632 := (eq r3631 (0x0 : bv 32))
  %t3762 = icmp eq i32 %t3761, 0
  br i1 %t3762, label %block_0_407a75, label %block_0_407a61
block_0_407a61:
  %t3763 = phi i64 [ %t3743, %block_0_407a5d ]
  %t3764 = phi i64 [ %t3744, %block_0_407a5d ]
  %t3765 = phi i64 [ %t3745, %block_0_407a5d ]
  %t3766 = phi i64 [ %t3746, %block_0_407a5d ]
  %t3767 = phi i64 [ %t3747, %block_0_407a5d ]
  %t3768 = phi i64 [ %t3748, %block_0_407a5d ]
  %t3769 = phi i64 [ %t3749, %block_0_407a5d ]
  %t3770 = phi i64 [ %t3750, %block_0_407a5d ]
  %t3771 = phi i64 [ %t3751, %block_0_407a5d ]
  %t3772 = phi i64 [ %t3752, %block_0_407a5d ]
  %t3773 = phi i512 [ %t3753, %block_0_407a5d ]
  %t3774 = phi i512 [ %t3754, %block_0_407a5d ]
  %t3775 = phi i512 [ %t3755, %block_0_407a5d ]
  %t3776 = phi i512 [ %t3756, %block_0_407a5d ]
  %t3777 = phi i512 [ %t3757, %block_0_407a5d ]
  %t3778 = phi i512 [ %t3758, %block_0_407a5d ]
  %t3779 = phi i512 [ %t3759, %block_0_407a5d ]
  %t3780 = phi i512 [ %t3760, %block_0_407a5d ]
  ; r3651 := (trunc r3640 32)
  %t3781 = trunc i64 %t3770 to i32
  ; r3652 := (bv_add r3651 (0x1 : bv 32))
  %t3782 = add i32 %t3781, 1
  ; r3653 := (uext r3652 64)
  %t3783 = zext i32 %t3782 to i64
  ; r3654 := (eq r3651 (0xb : bv 32))
  %t3784 = icmp eq i32 %t3781, 11
  br i1 %t3784, label %block_0_407a6b, label %block_0_407a24
block_0_407a6b:
  %t3785 = phi i64 [ %t3626, %block_0_407a15 ], [ %t3763, %block_0_407a61 ]
  %t3786 = phi i64 [ %t3627, %block_0_407a15 ], [ %t3764, %block_0_407a61 ]
  %t3787 = phi i64 [ %t3628, %block_0_407a15 ], [ %t3765, %block_0_407a61 ]
  %t3788 = phi i64 [ %t3629, %block_0_407a15 ], [ %t3766, %block_0_407a61 ]
  %t3789 = phi i64 [ %t3630, %block_0_407a15 ], [ %t3767, %block_0_407a61 ]
  %t3790 = phi i64 [ %t3631, %block_0_407a15 ], [ %t3768, %block_0_407a61 ]
  %t3791 = phi i64 [ %t3632, %block_0_407a15 ], [ %t3769, %block_0_407a61 ]
  %t3792 = phi i64 [ %t3633, %block_0_407a15 ], [ %t3771, %block_0_407a61 ]
  %t3793 = phi i64 [ %t3634, %block_0_407a15 ], [ %t3772, %block_0_407a61 ]
  %t3794 = phi i512 [ %t3635, %block_0_407a15 ], [ %t3773, %block_0_407a61 ]
  %t3795 = phi i512 [ %t3636, %block_0_407a15 ], [ %t3774, %block_0_407a61 ]
  %t3796 = phi i512 [ %t3637, %block_0_407a15 ], [ %t3775, %block_0_407a61 ]
  %t3797 = phi i512 [ %t3638, %block_0_407a15 ], [ %t3776, %block_0_407a61 ]
  %t3798 = phi i512 [ %t3639, %block_0_407a15 ], [ %t3777, %block_0_407a61 ]
  %t3799 = phi i512 [ %t3640, %block_0_407a15 ], [ %t3778, %block_0_407a61 ]
  %t3800 = phi i512 [ %t3641, %block_0_407a15 ], [ %t3779, %block_0_407a61 ]
  %t3801 = phi i512 [ %t3642, %block_0_407a15 ], [ %t3780, %block_0_407a61 ]
  ; r3672 := (bitcast r3664 (vec 8 double))
  %t3802 = bitcast i512 %t3794 to <8 x double>
  ; r3673 := (bitcast r3665 (vec 8 double))
  %t3803 = bitcast i512 %t3795 to <8 x double>
  ; r3674 := (bitcast r3666 (vec 8 double))
  %t3804 = bitcast i512 %t3796 to <8 x double>
  ; r3675 := (bitcast r3667 (vec 8 double))
  %t3805 = bitcast i512 %t3797 to <8 x double>
  ; r3676 := (bitcast r3668 (vec 8 double))
  %t3806 = bitcast i512 %t3798 to <8 x double>
  ; r3677 := (bitcast r3669 (vec 8 double))
  %t3807 = bitcast i512 %t3799 to <8 x double>
  ; r3678 := (bitcast r3670 (vec 8 double))
  %t3808 = bitcast i512 %t3800 to <8 x double>
  ; r3679 := (bitcast r3671 (vec 8 double))
  %t3809 = bitcast i512 %t3801 to <8 x double>
  ; r3680 := call pthread_mutex_lock_int((0x6356b0 : bv 64), r3659, r3656, r3655, r3660, r3661, r3672, r3673, r3674, r3675, r3676, r3677, r3678, r3679)
  %t3810 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510256, i64 %t3789, i64 %t3786, i64 %t3785, i64 %t3790, i64 %t3791, <8 x double> %t3802, <8 x double> %t3803, <8 x double> %t3804, <8 x double> %t3805, <8 x double> %t3806, <8 x double> %t3807, <8 x double> %t3808, <8 x double> %t3809)
  ; r3681 := (tuple_field r3680 0)
  %t3811 = extractvalue { i64, i64, <8 x double> } %t3810, 0
  ; r3682 := (tuple_field r3680 1)
  %t3812 = extractvalue { i64, i64, <8 x double> } %t3810, 1
  ; r3683 := (tuple_field r3680 2)
  %t3813 = extractvalue { i64, i64, <8 x double> } %t3810, 2
  ; r3684 := (bitcast r3683 (bv 512))
  %t3814 = bitcast <8 x double> %t3813 to i512
  br label %block_0_407a75
block_0_407a75:
  %t3815 = phi i64 [ %t3607, %block_0_407a11 ], [ %t3743, %block_0_407a5d ], [ %t3785, %block_0_407a6b ]
  %t3816 = phi i64 [ %t3608, %block_0_407a11 ], [ %t3744, %block_0_407a5d ], [ %t3812, %block_0_407a6b ]
  %t3817 = phi i64 [ %t3609, %block_0_407a11 ], [ %t3745, %block_0_407a5d ], [ %t3787, %block_0_407a6b ]
  %t3818 = phi i64 [ %t3610, %block_0_407a11 ], [ %t3746, %block_0_407a5d ], [ %t3788, %block_0_407a6b ]
  %t3819 = phi i64 [ %t3611, %block_0_407a11 ], [ %t3747, %block_0_407a5d ], [ %t3789, %block_0_407a6b ]
  %t3820 = phi i64 [ %t3612, %block_0_407a11 ], [ %t3748, %block_0_407a5d ], [ %t3790, %block_0_407a6b ]
  %t3821 = phi i64 [ %t3613, %block_0_407a11 ], [ %t3749, %block_0_407a5d ], [ %t3791, %block_0_407a6b ]
  %t3822 = phi i64 [ %t3614, %block_0_407a11 ], [ %t3751, %block_0_407a5d ], [ %t3792, %block_0_407a6b ]
  %t3823 = phi i64 [ %t3615, %block_0_407a11 ], [ %t3752, %block_0_407a5d ], [ %t3793, %block_0_407a6b ]
  %t3824 = phi i512 [ %t3616, %block_0_407a11 ], [ %t3753, %block_0_407a5d ], [ %t3814, %block_0_407a6b ]
  %t3825 = phi i512 [ %t3617, %block_0_407a11 ], [ %t3754, %block_0_407a5d ], [ %t3795, %block_0_407a6b ]
  %t3826 = phi i512 [ %t3618, %block_0_407a11 ], [ %t3755, %block_0_407a5d ], [ %t3796, %block_0_407a6b ]
  %t3827 = phi i512 [ %t3619, %block_0_407a11 ], [ %t3756, %block_0_407a5d ], [ %t3797, %block_0_407a6b ]
  %t3828 = phi i512 [ %t3620, %block_0_407a11 ], [ %t3757, %block_0_407a5d ], [ %t3798, %block_0_407a6b ]
  %t3829 = phi i512 [ %t3621, %block_0_407a11 ], [ %t3758, %block_0_407a5d ], [ %t3799, %block_0_407a6b ]
  %t3830 = phi i512 [ %t3622, %block_0_407a11 ], [ %t3759, %block_0_407a5d ], [ %t3800, %block_0_407a6b ]
  %t3831 = phi i512 [ %t3623, %block_0_407a11 ], [ %t3760, %block_0_407a5d ], [ %t3801, %block_0_407a6b ]
  ; r3702 := (read (0x6356a0 : bv 64) (bv 64))
  %t3832 = inttoptr i64 6510240 to i64*
  %t3833 = load i64, i64* %t3832
  ; r3703 := (bv_add r3692 r3702)
  %t3834 = add i64 %t3822, %t3833
  ; r3704 := (read r3703 (bv 64))
  %t3835 = inttoptr i64 %t3834 to i64*
  %t3836 = load i64, i64* %t3835
  ; r3705 := (eq r3704 (0x0 : bv 64))
  %t3837 = icmp eq i64 %t3836, 0
  br i1 %t3837, label %block_0_407a89, label %block_0_407579
block_0_407a89:
  %t3838 = phi i64 [ %t3815, %block_0_407a75 ]
  %t3839 = phi i64 [ %t3816, %block_0_407a75 ]
  %t3840 = phi i64 [ %t3817, %block_0_407a75 ]
  %t3841 = phi i64 [ %t3818, %block_0_407a75 ]
  %t3842 = phi i64 [ %t3819, %block_0_407a75 ]
  %t3843 = phi i64 [ %t3820, %block_0_407a75 ]
  %t3844 = phi i64 [ %t3821, %block_0_407a75 ]
  %t3845 = phi i64 [ %t3823, %block_0_407a75 ]
  %t3846 = phi i512 [ %t3824, %block_0_407a75 ]
  %t3847 = phi i512 [ %t3825, %block_0_407a75 ]
  %t3848 = phi i512 [ %t3826, %block_0_407a75 ]
  %t3849 = phi i512 [ %t3827, %block_0_407a75 ]
  %t3850 = phi i512 [ %t3828, %block_0_407a75 ]
  %t3851 = phi i512 [ %t3829, %block_0_407a75 ]
  %t3852 = phi i512 [ %t3830, %block_0_407a75 ]
  %t3853 = phi i512 [ %t3831, %block_0_407a75 ]
  br label %block_0_40756f
block_0_407a8e:
  %t3854 = phi i64 [ %t1397, %block_0_4074ed ]
  %t3855 = phi i64 [ %t1398, %block_0_4074ed ]
  %t3856 = phi i64 [ %t1399, %block_0_4074ed ]
  %t3857 = phi i64 [ %t1400, %block_0_4074ed ]
  %t3858 = phi i64 [ %t1401, %block_0_4074ed ]
  %t3859 = phi i64 [ %t1402, %block_0_4074ed ]
  %t3860 = phi i64 [ %t1403, %block_0_4074ed ]
  %t3861 = phi i64 [ %t1404, %block_0_4074ed ]
  %t3862 = phi i512 [ %t1405, %block_0_4074ed ]
  %t3863 = phi i512 [ %t1406, %block_0_4074ed ]
  %t3864 = phi i512 [ %t1407, %block_0_4074ed ]
  %t3865 = phi i512 [ %t1408, %block_0_4074ed ]
  %t3866 = phi i512 [ %t1409, %block_0_4074ed ]
  %t3867 = phi i512 [ %t1410, %block_0_4074ed ]
  %t3868 = phi i512 [ %t1411, %block_0_4074ed ]
  %t3869 = phi i512 [ %t1412, %block_0_4074ed ]
  ; r3738 := (bitcast r3730 (vec 8 double))
  %t3870 = bitcast i512 %t3862 to <8 x double>
  ; r3739 := (bitcast r3731 (vec 8 double))
  %t3871 = bitcast i512 %t3863 to <8 x double>
  ; r3740 := (bitcast r3732 (vec 8 double))
  %t3872 = bitcast i512 %t3864 to <8 x double>
  ; r3741 := (bitcast r3733 (vec 8 double))
  %t3873 = bitcast i512 %t3865 to <8 x double>
  ; r3742 := (bitcast r3734 (vec 8 double))
  %t3874 = bitcast i512 %t3866 to <8 x double>
  ; r3743 := (bitcast r3735 (vec 8 double))
  %t3875 = bitcast i512 %t3867 to <8 x double>
  ; r3744 := (bitcast r3736 (vec 8 double))
  %t3876 = bitcast i512 %t3868 to <8 x double>
  ; r3745 := (bitcast r3737 (vec 8 double))
  %t3877 = bitcast i512 %t3869 to <8 x double>
  ; r3746 := call pthread_mutex_unlock_int((0x6356b0 : bv 64), r3725, r3723, r3722, r3726, r3727, r3738, r3739, r3740, r3741, r3742, r3743, r3744, r3745)
  %t3878 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510256, i64 %t3857, i64 %t3855, i64 %t3854, i64 %t3858, i64 %t3859, <8 x double> %t3870, <8 x double> %t3871, <8 x double> %t3872, <8 x double> %t3873, <8 x double> %t3874, <8 x double> %t3875, <8 x double> %t3876, <8 x double> %t3877)
  ; r3747 := (tuple_field r3746 0)
  %t3879 = extractvalue { i64, i64, <8 x double> } %t3878, 0
  ; r3748 := (tuple_field r3746 1)
  %t3880 = extractvalue { i64, i64, <8 x double> } %t3878, 1
  ; r3749 := (tuple_field r3746 2)
  %t3881 = extractvalue { i64, i64, <8 x double> } %t3878, 2
  ; r3750 := (bitcast r3749 (bv 512))
  %t3882 = bitcast <8 x double> %t3881 to i512
  br label %block_0_407a98
block_0_407a98:
  %t3883 = phi i64 [ %t3854, %block_0_407a8e ]
  %t3884 = phi i64 [ %t3880, %block_0_407a8e ]
  %t3885 = phi i64 [ %t3856, %block_0_407a8e ]
  %t3886 = phi i64 [ %t3857, %block_0_407a8e ]
  %t3887 = phi i64 [ %t3858, %block_0_407a8e ]
  %t3888 = phi i64 [ %t3859, %block_0_407a8e ]
  %t3889 = phi i64 [ %t3860, %block_0_407a8e ]
  %t3890 = phi i64 [ %t3861, %block_0_407a8e ]
  %t3891 = phi i512 [ %t3882, %block_0_407a8e ]
  %t3892 = phi i512 [ %t3863, %block_0_407a8e ]
  %t3893 = phi i512 [ %t3864, %block_0_407a8e ]
  %t3894 = phi i512 [ %t3865, %block_0_407a8e ]
  %t3895 = phi i512 [ %t3866, %block_0_407a8e ]
  %t3896 = phi i512 [ %t3867, %block_0_407a8e ]
  %t3897 = phi i512 [ %t3868, %block_0_407a8e ]
  %t3898 = phi i512 [ %t3869, %block_0_407a8e ]
  br label %block_0_4070a8
block_0_407a9d:
  %t3899 = phi i64 [ %t1331, %block_0_4074d3 ]
  %t3900 = phi i64 [ %t1332, %block_0_4074d3 ]
  %t3901 = phi i64 [ %t1333, %block_0_4074d3 ]
  %t3902 = phi i64 [ %t1334, %block_0_4074d3 ]
  %t3903 = phi i64 [ %t1335, %block_0_4074d3 ]
  %t3904 = phi i64 [ %t1336, %block_0_4074d3 ]
  %t3905 = phi i64 [ %t1337, %block_0_4074d3 ]
  %t3906 = phi i64 [ %t1338, %block_0_4074d3 ]
  %t3907 = phi i512 [ %t1339, %block_0_4074d3 ]
  %t3908 = phi i512 [ %t1340, %block_0_4074d3 ]
  %t3909 = phi i512 [ %t1341, %block_0_4074d3 ]
  %t3910 = phi i512 [ %t1342, %block_0_4074d3 ]
  %t3911 = phi i512 [ %t1343, %block_0_4074d3 ]
  %t3912 = phi i512 [ %t1344, %block_0_4074d3 ]
  %t3913 = phi i512 [ %t1345, %block_0_4074d3 ]
  %t3914 = phi i512 [ %t1346, %block_0_4074d3 ]
  ; r3783 := (bitcast r3775 (vec 8 double))
  %t3915 = bitcast i512 %t3907 to <8 x double>
  ; r3784 := (bitcast r3776 (vec 8 double))
  %t3916 = bitcast i512 %t3908 to <8 x double>
  ; r3785 := (bitcast r3777 (vec 8 double))
  %t3917 = bitcast i512 %t3909 to <8 x double>
  ; r3786 := (bitcast r3778 (vec 8 double))
  %t3918 = bitcast i512 %t3910 to <8 x double>
  ; r3787 := (bitcast r3779 (vec 8 double))
  %t3919 = bitcast i512 %t3911 to <8 x double>
  ; r3788 := (bitcast r3780 (vec 8 double))
  %t3920 = bitcast i512 %t3912 to <8 x double>
  ; r3789 := (bitcast r3781 (vec 8 double))
  %t3921 = bitcast i512 %t3913 to <8 x double>
  ; r3790 := (bitcast r3782 (vec 8 double))
  %t3922 = bitcast i512 %t3914 to <8 x double>
  ; r3791 := call pthread_mutex_trylock_int((0x6356b0 : bv 64), r3770, r3768, r3767, r3771, r3772, r3783, r3784, r3785, r3786, r3787, r3788, r3789, r3790)
  %t3923 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 6510256, i64 %t3902, i64 %t3900, i64 %t3899, i64 %t3903, i64 %t3904, <8 x double> %t3915, <8 x double> %t3916, <8 x double> %t3917, <8 x double> %t3918, <8 x double> %t3919, <8 x double> %t3920, <8 x double> %t3921, <8 x double> %t3922)
  ; r3792 := (tuple_field r3791 0)
  %t3924 = extractvalue { i64, i64, <8 x double> } %t3923, 0
  ; r3793 := (tuple_field r3791 1)
  %t3925 = extractvalue { i64, i64, <8 x double> } %t3923, 1
  ; r3794 := (tuple_field r3791 2)
  %t3926 = extractvalue { i64, i64, <8 x double> } %t3923, 2
  ; r3795 := (bitcast r3794 (bv 512))
  %t3927 = bitcast <8 x double> %t3926 to i512
  br label %block_0_407aa7
block_0_407aa7:
  %t3928 = phi i64 [ %t3924, %block_0_407a9d ]
  %t3929 = phi i64 [ %t3899, %block_0_407a9d ]
  %t3930 = phi i64 [ %t3925, %block_0_407a9d ]
  %t3931 = phi i64 [ %t3901, %block_0_407a9d ]
  %t3932 = phi i64 [ %t3900, %block_0_407a9d ]
  %t3933 = phi i64 [ %t3902, %block_0_407a9d ]
  %t3934 = phi i64 [ %t3903, %block_0_407a9d ]
  %t3935 = phi i64 [ %t3904, %block_0_407a9d ]
  %t3936 = phi i64 [ %t3905, %block_0_407a9d ]
  %t3937 = phi i64 [ %t3906, %block_0_407a9d ]
  %t3938 = phi i512 [ %t3927, %block_0_407a9d ]
  %t3939 = phi i512 [ %t3908, %block_0_407a9d ]
  %t3940 = phi i512 [ %t3909, %block_0_407a9d ]
  %t3941 = phi i512 [ %t3910, %block_0_407a9d ]
  %t3942 = phi i512 [ %t3911, %block_0_407a9d ]
  %t3943 = phi i512 [ %t3912, %block_0_407a9d ]
  %t3944 = phi i512 [ %t3913, %block_0_407a9d ]
  %t3945 = phi i512 [ %t3914, %block_0_407a9d ]
  ; r3814 := (trunc r3796 32)
  %t3946 = trunc i64 %t3928 to i32
  ; r3815 := (eq r3814 (0x0 : bv 32))
  %t3947 = icmp eq i32 %t3946, 0
  br i1 %t3947, label %block_0_407b0b, label %block_0_407aab
block_0_407aab:
  %t3948 = phi i64 [ %t3929, %block_0_407aa7 ]
  %t3949 = phi i64 [ %t3930, %block_0_407aa7 ]
  %t3950 = phi i64 [ %t3931, %block_0_407aa7 ]
  %t3951 = phi i64 [ %t3932, %block_0_407aa7 ]
  %t3952 = phi i64 [ %t3933, %block_0_407aa7 ]
  %t3953 = phi i64 [ %t3934, %block_0_407aa7 ]
  %t3954 = phi i64 [ %t3935, %block_0_407aa7 ]
  %t3955 = phi i64 [ %t3936, %block_0_407aa7 ]
  %t3956 = phi i64 [ %t3937, %block_0_407aa7 ]
  %t3957 = phi i512 [ %t3938, %block_0_407aa7 ]
  %t3958 = phi i512 [ %t3939, %block_0_407aa7 ]
  %t3959 = phi i512 [ %t3940, %block_0_407aa7 ]
  %t3960 = phi i512 [ %t3941, %block_0_407aa7 ]
  %t3961 = phi i512 [ %t3942, %block_0_407aa7 ]
  %t3962 = phi i512 [ %t3943, %block_0_407aa7 ]
  %t3963 = phi i512 [ %t3944, %block_0_407aa7 ]
  %t3964 = phi i512 [ %t3945, %block_0_407aa7 ]
  ; r3833 := (read (0x6354a8 : bv 64) (bv 32))
  %t3965 = inttoptr i64 6509736 to i32*
  %t3966 = load i32, i32* %t3965
  ; r3834 := (bv_ult r3833 (0x1 : bv 32))
  %t3967 = icmp ult i32 %t3966, 1
  ; r3835 := (eq r3833 (0x1 : bv 32))
  %t3968 = icmp eq i32 %t3966, 1
  ; r3836 := (or r3834 r3835)
  %t3969 = or i1 %t3967, %t3968
  br i1 %t3969, label %block_0_407b01, label %block_0_407ab4
block_0_407ab4:
  %t3970 = phi i64 [ %t3950, %block_0_407aab ]
  %t3971 = phi i64 [ %t3951, %block_0_407aab ]
  %t3972 = phi i64 [ %t3952, %block_0_407aab ]
  %t3973 = phi i64 [ %t3953, %block_0_407aab ]
  %t3974 = phi i64 [ %t3954, %block_0_407aab ]
  %t3975 = phi i64 [ %t3955, %block_0_407aab ]
  %t3976 = phi i64 [ %t3956, %block_0_407aab ]
  %t3977 = phi i512 [ %t3957, %block_0_407aab ]
  %t3978 = phi i512 [ %t3958, %block_0_407aab ]
  %t3979 = phi i512 [ %t3959, %block_0_407aab ]
  %t3980 = phi i512 [ %t3960, %block_0_407aab ]
  %t3981 = phi i512 [ %t3961, %block_0_407aab ]
  %t3982 = phi i512 [ %t3962, %block_0_407aab ]
  %t3983 = phi i512 [ %t3963, %block_0_407aab ]
  %t3984 = phi i512 [ %t3964, %block_0_407aab ]
  br label %block_0_407aba
block_0_407aba:
  %t3985 = phi i64 [ %t3970, %block_0_407ab4 ], [ %t4089, %block_0_407af7 ]
  %t3986 = phi i64 [ %t3971, %block_0_407ab4 ], [ %t4090, %block_0_407af7 ]
  %t3987 = phi i64 [ %t3972, %block_0_407ab4 ], [ %t4091, %block_0_407af7 ]
  %t3988 = phi i64 [ %t3973, %block_0_407ab4 ], [ %t4092, %block_0_407af7 ]
  %t3989 = phi i64 [ %t3974, %block_0_407ab4 ], [ %t4093, %block_0_407af7 ]
  %t3990 = phi i64 [ 1, %block_0_407ab4 ], [ %t4107, %block_0_407af7 ]
  %t3991 = phi i64 [ %t3975, %block_0_407ab4 ], [ %t4095, %block_0_407af7 ]
  %t3992 = phi i64 [ %t3976, %block_0_407ab4 ], [ %t4096, %block_0_407af7 ]
  %t3993 = phi i512 [ %t3977, %block_0_407ab4 ], [ %t4097, %block_0_407af7 ]
  %t3994 = phi i512 [ %t3978, %block_0_407ab4 ], [ %t4098, %block_0_407af7 ]
  %t3995 = phi i512 [ %t3979, %block_0_407ab4 ], [ %t4099, %block_0_407af7 ]
  %t3996 = phi i512 [ %t3980, %block_0_407ab4 ], [ %t4100, %block_0_407af7 ]
  %t3997 = phi i512 [ %t3981, %block_0_407ab4 ], [ %t4101, %block_0_407af7 ]
  %t3998 = phi i512 [ %t3982, %block_0_407ab4 ], [ %t4102, %block_0_407af7 ]
  %t3999 = phi i512 [ %t3983, %block_0_407ab4 ], [ %t4103, %block_0_407af7 ]
  %t4000 = phi i512 [ %t3984, %block_0_407ab4 ], [ %t4104, %block_0_407af7 ]
  ; r3868 := (trunc r3857 32)
  %t4001 = trunc i64 %t3990 to i32
  ; r3869 := (uext r3868 64)
  %t4002 = zext i32 %t4001 to i64
  ; r3870 := (trunc r3857 8)
  %t4003 = trunc i64 %t3990 to i8
  ; r3871 := (bv_and r3870 (0x1f : bv 8))
  %t4004 = and i8 %t4003, 31
  ; r3872 := (eq r3871 (0x0 : bv 8))
  %t4005 = icmp eq i8 %t4004, 0
  ; r3873 := (uext r3871 32)
  %t4006 = zext i8 %t4004 to i32
  ; r3874 := (bv_shl (0x1 : bv 32) r3873)
  %t4007 = shl i32 1, %t4006
  ; r3875 := (mux r3872 (0x1 : bv 32) r3874)
  %t4008 = select i1 %t4005, i32 1, i32 %t4007
  ; r3876 := (uext r3875 64)
  %t4009 = zext i32 %t4008 to i64
  ; r3877 := (bv_ult r3875 (0x0 : bv 32))
  %t4010 = icmp ult i32 %t4008, 0
  ; r3878 := (eq r3875 (0x0 : bv 32))
  %t4011 = icmp eq i32 %t4008, 0
  ; r3879 := (or r3877 r3878)
  %t4012 = or i1 %t4010, %t4011
  br i1 %t4012, label %block_0_407ae9, label %block_0_407ad4
block_0_407ad4:
  %t4013 = phi i64 [ %t4002, %block_0_407aba ], [ %t4013, %block_0_407ad4 ]
  %t4014 = phi i64 [ %t4009, %block_0_407aba ], [ %t4014, %block_0_407ad4 ]
  %t4015 = phi i64 [ %t3985, %block_0_407aba ], [ %t4015, %block_0_407ad4 ]
  %t4016 = phi i64 [ %t3986, %block_0_407aba ], [ %t4016, %block_0_407ad4 ]
  %t4017 = phi i64 [ %t3987, %block_0_407aba ], [ %t4017, %block_0_407ad4 ]
  %t4018 = phi i64 [ %t3988, %block_0_407aba ], [ %t4018, %block_0_407ad4 ]
  %t4019 = phi i64 [ %t3989, %block_0_407aba ], [ %t4019, %block_0_407ad4 ]
  %t4020 = phi i64 [ %t3990, %block_0_407aba ], [ %t4020, %block_0_407ad4 ]
  %t4021 = phi i64 [ %t3991, %block_0_407aba ], [ %t4021, %block_0_407ad4 ]
  %t4022 = phi i64 [ %t3992, %block_0_407aba ], [ %t4022, %block_0_407ad4 ]
  %t4023 = phi i512 [ %t3993, %block_0_407aba ], [ %t4023, %block_0_407ad4 ]
  %t4024 = phi i512 [ %t3994, %block_0_407aba ], [ %t4024, %block_0_407ad4 ]
  %t4025 = phi i512 [ %t3995, %block_0_407aba ], [ %t4025, %block_0_407ad4 ]
  %t4026 = phi i512 [ %t3996, %block_0_407aba ], [ %t4026, %block_0_407ad4 ]
  %t4027 = phi i512 [ %t3997, %block_0_407aba ], [ %t4027, %block_0_407ad4 ]
  %t4028 = phi i512 [ %t3998, %block_0_407aba ], [ %t4028, %block_0_407ad4 ]
  %t4029 = phi i512 [ %t3999, %block_0_407aba ], [ %t4029, %block_0_407ad4 ]
  %t4030 = phi i512 [ %t4000, %block_0_407aba ], [ %t4030, %block_0_407ad4 ]
  %t4031 = phi i32 [ 0, %block_0_407aba ], [ %t4032, %block_0_407ad4 ]
  ; r3899 := (bv_add r3898 (0x1 : bv 32))
  %t4032 = add i32 %t4031, 1
  ; r3900 := (trunc r3881 32)
  %t4033 = trunc i64 %t4014 to i32
  ; r3901 := (bv_ult r3899 r3900)
  %t4034 = icmp ult i32 %t4032, %t4033
  br i1 %t4034, label %block_0_407ad4, label %block_0_407ae9
block_0_407ae9:
  %t4035 = phi i64 [ %t4002, %block_0_407aba ], [ %t4013, %block_0_407ad4 ]
  %t4036 = phi i64 [ %t4009, %block_0_407aba ], [ %t4014, %block_0_407ad4 ]
  %t4037 = phi i64 [ %t3985, %block_0_407aba ], [ %t4015, %block_0_407ad4 ]
  %t4038 = phi i64 [ %t3986, %block_0_407aba ], [ %t4016, %block_0_407ad4 ]
  %t4039 = phi i64 [ %t3987, %block_0_407aba ], [ %t4017, %block_0_407ad4 ]
  %t4040 = phi i64 [ %t3988, %block_0_407aba ], [ %t4018, %block_0_407ad4 ]
  %t4041 = phi i64 [ %t3989, %block_0_407aba ], [ %t4019, %block_0_407ad4 ]
  %t4042 = phi i64 [ %t3990, %block_0_407aba ], [ %t4020, %block_0_407ad4 ]
  %t4043 = phi i64 [ %t3991, %block_0_407aba ], [ %t4021, %block_0_407ad4 ]
  %t4044 = phi i64 [ %t3992, %block_0_407aba ], [ %t4022, %block_0_407ad4 ]
  %t4045 = phi i512 [ %t3993, %block_0_407aba ], [ %t4023, %block_0_407ad4 ]
  %t4046 = phi i512 [ %t3994, %block_0_407aba ], [ %t4024, %block_0_407ad4 ]
  %t4047 = phi i512 [ %t3995, %block_0_407aba ], [ %t4025, %block_0_407ad4 ]
  %t4048 = phi i512 [ %t3996, %block_0_407aba ], [ %t4026, %block_0_407ad4 ]
  %t4049 = phi i512 [ %t3997, %block_0_407aba ], [ %t4027, %block_0_407ad4 ]
  %t4050 = phi i512 [ %t3998, %block_0_407aba ], [ %t4028, %block_0_407ad4 ]
  %t4051 = phi i512 [ %t3999, %block_0_407aba ], [ %t4029, %block_0_407ad4 ]
  %t4052 = phi i512 [ %t4000, %block_0_407aba ], [ %t4030, %block_0_407ad4 ]
  ; r3920 := (bitcast r3912 (vec 8 double))
  %t4053 = bitcast i512 %t4045 to <8 x double>
  ; r3921 := (bitcast r3913 (vec 8 double))
  %t4054 = bitcast i512 %t4046 to <8 x double>
  ; r3922 := (bitcast r3914 (vec 8 double))
  %t4055 = bitcast i512 %t4047 to <8 x double>
  ; r3923 := (bitcast r3915 (vec 8 double))
  %t4056 = bitcast i512 %t4048 to <8 x double>
  ; r3924 := (bitcast r3916 (vec 8 double))
  %t4057 = bitcast i512 %t4049 to <8 x double>
  ; r3925 := (bitcast r3917 (vec 8 double))
  %t4058 = bitcast i512 %t4050 to <8 x double>
  ; r3926 := (bitcast r3918 (vec 8 double))
  %t4059 = bitcast i512 %t4051 to <8 x double>
  ; r3927 := (bitcast r3919 (vec 8 double))
  %t4060 = bitcast i512 %t4052 to <8 x double>
  ; r3928 := call pthread_mutex_trylock_int((0x6356b0 : bv 64), r3906, r3903, r3902, r3907, r3908, r3920, r3921, r3922, r3923, r3924, r3925, r3926, r3927)
  %t4061 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 6510256, i64 %t4039, i64 %t4036, i64 %t4035, i64 %t4040, i64 %t4041, <8 x double> %t4053, <8 x double> %t4054, <8 x double> %t4055, <8 x double> %t4056, <8 x double> %t4057, <8 x double> %t4058, <8 x double> %t4059, <8 x double> %t4060)
  ; r3929 := (tuple_field r3928 0)
  %t4062 = extractvalue { i64, i64, <8 x double> } %t4061, 0
  ; r3930 := (tuple_field r3928 1)
  %t4063 = extractvalue { i64, i64, <8 x double> } %t4061, 1
  ; r3931 := (tuple_field r3928 2)
  %t4064 = extractvalue { i64, i64, <8 x double> } %t4061, 2
  ; r3932 := (bitcast r3931 (bv 512))
  %t4065 = bitcast <8 x double> %t4064 to i512
  br label %block_0_407af3
block_0_407af3:
  %t4066 = phi i64 [ %t4062, %block_0_407ae9 ]
  %t4067 = phi i64 [ %t4035, %block_0_407ae9 ]
  %t4068 = phi i64 [ %t4063, %block_0_407ae9 ]
  %t4069 = phi i64 [ %t4037, %block_0_407ae9 ]
  %t4070 = phi i64 [ %t4038, %block_0_407ae9 ]
  %t4071 = phi i64 [ %t4039, %block_0_407ae9 ]
  %t4072 = phi i64 [ %t4040, %block_0_407ae9 ]
  %t4073 = phi i64 [ %t4041, %block_0_407ae9 ]
  %t4074 = phi i64 [ %t4042, %block_0_407ae9 ]
  %t4075 = phi i64 [ %t4043, %block_0_407ae9 ]
  %t4076 = phi i64 [ %t4044, %block_0_407ae9 ]
  %t4077 = phi i512 [ %t4065, %block_0_407ae9 ]
  %t4078 = phi i512 [ %t4046, %block_0_407ae9 ]
  %t4079 = phi i512 [ %t4047, %block_0_407ae9 ]
  %t4080 = phi i512 [ %t4048, %block_0_407ae9 ]
  %t4081 = phi i512 [ %t4049, %block_0_407ae9 ]
  %t4082 = phi i512 [ %t4050, %block_0_407ae9 ]
  %t4083 = phi i512 [ %t4051, %block_0_407ae9 ]
  %t4084 = phi i512 [ %t4052, %block_0_407ae9 ]
  ; r3952 := (trunc r3933 32)
  %t4085 = trunc i64 %t4066 to i32
  ; r3953 := (eq r3952 (0x0 : bv 32))
  %t4086 = icmp eq i32 %t4085, 0
  br i1 %t4086, label %block_0_407b0b, label %block_0_407af7
block_0_407af7:
  %t4087 = phi i64 [ %t4067, %block_0_407af3 ]
  %t4088 = phi i64 [ %t4068, %block_0_407af3 ]
  %t4089 = phi i64 [ %t4069, %block_0_407af3 ]
  %t4090 = phi i64 [ %t4070, %block_0_407af3 ]
  %t4091 = phi i64 [ %t4071, %block_0_407af3 ]
  %t4092 = phi i64 [ %t4072, %block_0_407af3 ]
  %t4093 = phi i64 [ %t4073, %block_0_407af3 ]
  %t4094 = phi i64 [ %t4074, %block_0_407af3 ]
  %t4095 = phi i64 [ %t4075, %block_0_407af3 ]
  %t4096 = phi i64 [ %t4076, %block_0_407af3 ]
  %t4097 = phi i512 [ %t4077, %block_0_407af3 ]
  %t4098 = phi i512 [ %t4078, %block_0_407af3 ]
  %t4099 = phi i512 [ %t4079, %block_0_407af3 ]
  %t4100 = phi i512 [ %t4080, %block_0_407af3 ]
  %t4101 = phi i512 [ %t4081, %block_0_407af3 ]
  %t4102 = phi i512 [ %t4082, %block_0_407af3 ]
  %t4103 = phi i512 [ %t4083, %block_0_407af3 ]
  %t4104 = phi i512 [ %t4084, %block_0_407af3 ]
  ; r3972 := (trunc r3961 32)
  %t4105 = trunc i64 %t4094 to i32
  ; r3973 := (bv_add r3972 (0x1 : bv 32))
  %t4106 = add i32 %t4105, 1
  ; r3974 := (uext r3973 64)
  %t4107 = zext i32 %t4106 to i64
  ; r3975 := (eq r3972 (0xb : bv 32))
  %t4108 = icmp eq i32 %t4105, 11
  br i1 %t4108, label %block_0_407b01, label %block_0_407aba
block_0_407b01:
  %t4109 = phi i64 [ %t3948, %block_0_407aab ], [ %t4087, %block_0_407af7 ]
  %t4110 = phi i64 [ %t3949, %block_0_407aab ], [ %t4088, %block_0_407af7 ]
  %t4111 = phi i64 [ %t3950, %block_0_407aab ], [ %t4089, %block_0_407af7 ]
  %t4112 = phi i64 [ %t3951, %block_0_407aab ], [ %t4090, %block_0_407af7 ]
  %t4113 = phi i64 [ %t3952, %block_0_407aab ], [ %t4091, %block_0_407af7 ]
  %t4114 = phi i64 [ %t3953, %block_0_407aab ], [ %t4092, %block_0_407af7 ]
  %t4115 = phi i64 [ %t3954, %block_0_407aab ], [ %t4093, %block_0_407af7 ]
  %t4116 = phi i64 [ %t3955, %block_0_407aab ], [ %t4095, %block_0_407af7 ]
  %t4117 = phi i64 [ %t3956, %block_0_407aab ], [ %t4096, %block_0_407af7 ]
  %t4118 = phi i512 [ %t3957, %block_0_407aab ], [ %t4097, %block_0_407af7 ]
  %t4119 = phi i512 [ %t3958, %block_0_407aab ], [ %t4098, %block_0_407af7 ]
  %t4120 = phi i512 [ %t3959, %block_0_407aab ], [ %t4099, %block_0_407af7 ]
  %t4121 = phi i512 [ %t3960, %block_0_407aab ], [ %t4100, %block_0_407af7 ]
  %t4122 = phi i512 [ %t3961, %block_0_407aab ], [ %t4101, %block_0_407af7 ]
  %t4123 = phi i512 [ %t3962, %block_0_407aab ], [ %t4102, %block_0_407af7 ]
  %t4124 = phi i512 [ %t3963, %block_0_407aab ], [ %t4103, %block_0_407af7 ]
  %t4125 = phi i512 [ %t3964, %block_0_407aab ], [ %t4104, %block_0_407af7 ]
  ; r3993 := (bitcast r3985 (vec 8 double))
  %t4126 = bitcast i512 %t4118 to <8 x double>
  ; r3994 := (bitcast r3986 (vec 8 double))
  %t4127 = bitcast i512 %t4119 to <8 x double>
  ; r3995 := (bitcast r3987 (vec 8 double))
  %t4128 = bitcast i512 %t4120 to <8 x double>
  ; r3996 := (bitcast r3988 (vec 8 double))
  %t4129 = bitcast i512 %t4121 to <8 x double>
  ; r3997 := (bitcast r3989 (vec 8 double))
  %t4130 = bitcast i512 %t4122 to <8 x double>
  ; r3998 := (bitcast r3990 (vec 8 double))
  %t4131 = bitcast i512 %t4123 to <8 x double>
  ; r3999 := (bitcast r3991 (vec 8 double))
  %t4132 = bitcast i512 %t4124 to <8 x double>
  ; r4000 := (bitcast r3992 (vec 8 double))
  %t4133 = bitcast i512 %t4125 to <8 x double>
  ; r4001 := call pthread_mutex_lock_int((0x6356b0 : bv 64), r3980, r3977, r3976, r3981, r3982, r3993, r3994, r3995, r3996, r3997, r3998, r3999, r4000)
  %t4134 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510256, i64 %t4113, i64 %t4110, i64 %t4109, i64 %t4114, i64 %t4115, <8 x double> %t4126, <8 x double> %t4127, <8 x double> %t4128, <8 x double> %t4129, <8 x double> %t4130, <8 x double> %t4131, <8 x double> %t4132, <8 x double> %t4133)
  ; r4002 := (tuple_field r4001 0)
  %t4135 = extractvalue { i64, i64, <8 x double> } %t4134, 0
  ; r4003 := (tuple_field r4001 1)
  %t4136 = extractvalue { i64, i64, <8 x double> } %t4134, 1
  ; r4004 := (tuple_field r4001 2)
  %t4137 = extractvalue { i64, i64, <8 x double> } %t4134, 2
  ; r4005 := (bitcast r4004 (bv 512))
  %t4138 = bitcast <8 x double> %t4137 to i512
  br label %block_0_407b0b
block_0_407b0b:
  %t4139 = phi i64 [ %t3929, %block_0_407aa7 ], [ %t4067, %block_0_407af3 ], [ %t4109, %block_0_407b01 ]
  %t4140 = phi i64 [ %t3930, %block_0_407aa7 ], [ %t4068, %block_0_407af3 ], [ %t4136, %block_0_407b01 ]
  %t4141 = phi i64 [ %t3931, %block_0_407aa7 ], [ %t4069, %block_0_407af3 ], [ %t4111, %block_0_407b01 ]
  %t4142 = phi i64 [ %t3932, %block_0_407aa7 ], [ %t4070, %block_0_407af3 ], [ %t4112, %block_0_407b01 ]
  %t4143 = phi i64 [ %t3933, %block_0_407aa7 ], [ %t4071, %block_0_407af3 ], [ %t4113, %block_0_407b01 ]
  %t4144 = phi i64 [ %t3934, %block_0_407aa7 ], [ %t4072, %block_0_407af3 ], [ %t4114, %block_0_407b01 ]
  %t4145 = phi i64 [ %t3935, %block_0_407aa7 ], [ %t4073, %block_0_407af3 ], [ %t4115, %block_0_407b01 ]
  %t4146 = phi i64 [ %t3936, %block_0_407aa7 ], [ %t4075, %block_0_407af3 ], [ %t4116, %block_0_407b01 ]
  %t4147 = phi i64 [ %t3937, %block_0_407aa7 ], [ %t4076, %block_0_407af3 ], [ %t4117, %block_0_407b01 ]
  %t4148 = phi i512 [ %t3938, %block_0_407aa7 ], [ %t4077, %block_0_407af3 ], [ %t4138, %block_0_407b01 ]
  %t4149 = phi i512 [ %t3939, %block_0_407aa7 ], [ %t4078, %block_0_407af3 ], [ %t4119, %block_0_407b01 ]
  %t4150 = phi i512 [ %t3940, %block_0_407aa7 ], [ %t4079, %block_0_407af3 ], [ %t4120, %block_0_407b01 ]
  %t4151 = phi i512 [ %t3941, %block_0_407aa7 ], [ %t4080, %block_0_407af3 ], [ %t4121, %block_0_407b01 ]
  %t4152 = phi i512 [ %t3942, %block_0_407aa7 ], [ %t4081, %block_0_407af3 ], [ %t4122, %block_0_407b01 ]
  %t4153 = phi i512 [ %t3943, %block_0_407aa7 ], [ %t4082, %block_0_407af3 ], [ %t4123, %block_0_407b01 ]
  %t4154 = phi i512 [ %t3944, %block_0_407aa7 ], [ %t4083, %block_0_407af3 ], [ %t4124, %block_0_407b01 ]
  %t4155 = phi i512 [ %t3945, %block_0_407aa7 ], [ %t4084, %block_0_407af3 ], [ %t4125, %block_0_407b01 ]
  ; r4023 := (read (0x6356a0 : bv 64) (bv 64))
  %t4156 = inttoptr i64 6510240 to i64*
  %t4157 = load i64, i64* %t4156
  ; r4024 := (bv_add r4013 r4023)
  %t4158 = add i64 %t4146, %t4157
  ; r4025 := (read r4024 (bv 64))
  %t4159 = inttoptr i64 %t4158 to i64*
  %t4160 = load i64, i64* %t4159
  ; r4026 := (eq r4025 (0x0 : bv 64))
  %t4161 = icmp eq i64 %t4160, 0
  br i1 %t4161, label %block_0_407b1f, label %block_0_4074ed
block_0_407b1f:
  %t4162 = phi i64 [ %t4139, %block_0_407b0b ]
  %t4163 = phi i64 [ %t4140, %block_0_407b0b ]
  %t4164 = phi i64 [ %t4141, %block_0_407b0b ]
  %t4165 = phi i64 [ %t4142, %block_0_407b0b ]
  %t4166 = phi i64 [ %t4143, %block_0_407b0b ]
  %t4167 = phi i64 [ %t4144, %block_0_407b0b ]
  %t4168 = phi i64 [ %t4145, %block_0_407b0b ]
  %t4169 = phi i64 [ %t4147, %block_0_407b0b ]
  %t4170 = phi i512 [ %t4148, %block_0_407b0b ]
  %t4171 = phi i512 [ %t4149, %block_0_407b0b ]
  %t4172 = phi i512 [ %t4150, %block_0_407b0b ]
  %t4173 = phi i512 [ %t4151, %block_0_407b0b ]
  %t4174 = phi i512 [ %t4152, %block_0_407b0b ]
  %t4175 = phi i512 [ %t4153, %block_0_407b0b ]
  %t4176 = phi i512 [ %t4154, %block_0_407b0b ]
  %t4177 = phi i512 [ %t4155, %block_0_407b0b ]
  br label %block_0_4074e3
}
define { i64, i64, <8 x double> } @mmap(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_4094c0:
  ; r0 := (trunc arg3 32)
  %t0 = trunc i64 %arg3 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (trunc arg2 32)
  %t2 = trunc i64 %arg2 to i32
  ; r3 := (uext r2 64)
  %t3 = zext i32 %t2 to i64
  ; r4 := (trunc arg4 32)
  %t4 = trunc i64 %arg4 to i32
  ; r5 := (uext r4 64)
  %t5 = zext i32 %t4 to i64
  ; r6 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg7 (bv 512))
  %t8 = bitcast <8 x double> %arg7 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg8 (bv 512))
  %t10 = bitcast <8 x double> %arg8 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg10 (bv 512))
  %t14 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := (bitcast arg11 (bv 512))
  %t16 = bitcast <8 x double> %arg11 to i512
  ; r17 := (bitcast r16 (vec 8 double))
  %t17 = bitcast i512 %t16 to <8 x double>
  ; r18 := (bitcast arg12 (bv 512))
  %t18 = bitcast <8 x double> %arg12 to i512
  ; r19 := (bitcast r18 (vec 8 double))
  %t19 = bitcast i512 %t18 to <8 x double>
  ; r20 := (bitcast arg13 (bv 512))
  %t20 = bitcast <8 x double> %arg13 to i512
  ; r21 := (bitcast r20 (vec 8 double))
  %t21 = bitcast i512 %t20 to <8 x double>
  ; r22 := call __getosreldate(arg0, arg1, arg2, arg3, arg4, arg5, r7, r9, r11, r13, r15, r17, r19, r21)
  %t22 = call i64 (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__getosreldate(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15, <8 x double> %t17, <8 x double> %t19, <8 x double> %t21)
  br label %block_0_4094f9
block_0_4094f9:
  %t23 = phi i64 [ %t22, %block_0_4094c0 ]
  %t24 = phi i64 [ %arg5, %block_0_4094c0 ]
  %t25 = phi i64 [ %t5, %block_0_4094c0 ]
  %t26 = phi i64 [ %t1, %block_0_4094c0 ]
  %t27 = phi i64 [ %t3, %block_0_4094c0 ]
  %t28 = phi i64 [ %arg1, %block_0_4094c0 ]
  %t29 = phi i64 [ %arg0, %block_0_4094c0 ]
  ; r30 := (trunc r23 32)
  %t30 = trunc i64 %t23 to i32
  ; r31 := (ssbb_overflows r30 (0xaae92 : bv 32) false)
  %t31 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t30, i32 700050)
  %t32 = extractvalue { i32, i1 } %t31, 1
  ; r32 := (bv_add r30 (0xfff5516e : bv 32))
  %t33 = add i32 %t30, 4294267246
  ; r33 := (bv_slt r32 (0x0 : bv 32))
  %t34 = icmp slt i32 %t33, 0
  ; r34 := (eq r30 (0xaae92 : bv 32))
  %t35 = icmp eq i32 %t30, 700050
  ; r35 := (xor r33 r31)
  %t36 = xor i1 %t34, %t32
  ; r36 := (or r34 r35)
  %t37 = or i1 %t35, %t36
  br i1 %t37, label %block_0_409540, label %block_0_409500
block_0_409500:
  %t38 = phi i64 [ %t24, %block_0_4094f9 ]
  %t39 = phi i64 [ %t25, %block_0_4094f9 ]
  %t40 = phi i64 [ %t26, %block_0_4094f9 ]
  %t41 = phi i64 [ %t27, %block_0_4094f9 ]
  %t42 = phi i64 [ %t28, %block_0_4094f9 ]
  %t43 = phi i64 [ %t29, %block_0_4094f9 ]
  ; r43 := (trunc r38 32)
  %t44 = trunc i64 %t39 to i32
  ; r44 := (uext r43 64)
  %t45 = zext i32 %t44 to i64
  ; r45 := (trunc r39 32)
  %t46 = trunc i64 %t40 to i32
  ; r46 := (uext r45 64)
  %t47 = zext i32 %t46 to i64
  ; r47 := (trunc r40 32)
  %t48 = trunc i64 %t41 to i32
  ; r48 := (uext r47 64)
  %t49 = zext i32 %t48 to i64
  %t50 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64) @__sys_mmap(i64 %t43, i64 %t42, i64 %t49, i64 %t47, i64 %t45, i64 %t38)
  ret { i64, i64, <8 x double> } %t50
block_0_409540:
  %t51 = phi i64 [ %t25, %block_0_4094f9 ]
  %t52 = phi i64 [ %t26, %block_0_4094f9 ]
  %t53 = phi i64 [ %t27, %block_0_4094f9 ]
  %t54 = phi i64 [ %t28, %block_0_4094f9 ]
  %t55 = phi i64 [ %t29, %block_0_4094f9 ]
  ; r54 := (trunc r49 32)
  %t56 = trunc i64 %t51 to i32
  ; r55 := (uext r54 64)
  %t57 = zext i32 %t56 to i64
  ; r56 := (trunc r50 32)
  %t58 = trunc i64 %t52 to i32
  ; r57 := (uext r56 64)
  %t59 = zext i32 %t58 to i64
  ; r58 := (trunc r51 32)
  %t60 = trunc i64 %t53 to i32
  ; r59 := (uext r58 64)
  %t61 = zext i32 %t60 to i64
  ; r60 := call __sys_freebsd6_mmap(r53, r52, r59, r57, r55, (0x0 : bv 64))
  %t62 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64) @__sys_freebsd6_mmap(i64 %t55, i64 %t54, i64 %t61, i64 %t59, i64 %t57, i64 0)
  ; r61 := (tuple_field r60 0)
  %t63 = extractvalue { i64, i64, <8 x double> } %t62, 0
  ; r62 := (tuple_field r60 1)
  %t64 = extractvalue { i64, i64, <8 x double> } %t62, 1
  ; r63 := (tuple_field r60 2)
  %t65 = extractvalue { i64, i64, <8 x double> } %t62, 2
  ; r64 := (bitcast r63 (bv 512))
  %t66 = bitcast <8 x double> %t65 to i512
  br label %block_0_40955b
block_0_40955b:
  %t67 = phi i64 [ %t63, %block_0_409540 ]
  %t68 = phi i64 [ %t64, %block_0_409540 ]
  %t69 = phi i512 [ %t66, %block_0_409540 ]
  ; r68 := (bitcast r67 (vec 8 double))
  %t70 = bitcast i512 %t69 to <8 x double>
  ; r69 := (tuple r65 r66 r68)
  %t71 = insertvalue { i64, i64, <8 x double> } undef, i64 %t67, 0
  %t72 = insertvalue { i64, i64, <8 x double> } %t71, i64 %t68, 1
  %t73 = insertvalue { i64, i64, <8 x double> } %t72, <8 x double> %t70, 2
  ret { i64, i64, <8 x double> } %t73
}
define void @__chk_fail(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_409a30:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call __fail((0x427ff0 : bv 64), arg1, arg2, r1)
  %t2 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__fail(i64 4358128, i64 %arg1, i64 %arg2, <8 x double> %t1)
  ret void
}
define { i64, i64, <8 x double> } @__stack_chk_fail_local(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_409a40:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  %t2 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__fail(i64 4358168, i64 %arg1, i64 %arg2, <8 x double> %t1)
  ret { i64, i64, <8 x double> } %t2
}
define i64 @atoi(i64 %arg0, <8 x double> %arg1) {
block_0_409b10:
  ; r0 := (bitcast arg1 (bv 512))
  %t0 = bitcast <8 x double> %arg1 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call strtol(arg0, (0x0 : bv 64), (0xa : bv 64), r1)
  %t2 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strtol(i64 %arg0, i64 0, i64 10, <8 x double> %t1)
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, i64, <8 x double> } %t2, 1
  ; r5 := (tuple_field r2 2)
  %t5 = extractvalue { i64, i64, <8 x double> } %t2, 2
  ; r6 := (bitcast r5 (bv 512))
  %t6 = bitcast <8 x double> %t5 to i512
  br label %block_0_409b20
block_0_409b20:
  %t7 = phi i64 [ %t3, %block_0_409b10 ]
  ret i64 %t7
}
define void @setlogmask(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_409be0:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (trunc arg0 32)
  %t3 = trunc i64 %arg0 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (eq r0 (0x0 : bv 32))
  %t5 = icmp eq i32 %t1, 0
  ; r5 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t9 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg11 (bv 512))
  %t11 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r12 := (bitcast arg13 (bv 512))
  %t13 = bitcast <8 x double> %arg13 to i512
  ; r13 := (bitcast arg6 (bv 512))
  %t14 = bitcast <8 x double> %arg6 to i512
  ; r14 := (bitcast arg7 (bv 512))
  %t15 = bitcast <8 x double> %arg7 to i512
  ; r15 := (bitcast arg8 (bv 512))
  %t16 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast arg9 (bv 512))
  %t17 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast arg10 (bv 512))
  %t18 = bitcast <8 x double> %arg10 to i512
  ; r18 := (bitcast arg11 (bv 512))
  %t19 = bitcast <8 x double> %arg11 to i512
  ; r19 := (bitcast arg12 (bv 512))
  %t20 = bitcast <8 x double> %arg12 to i512
  ; r20 := (bitcast arg13 (bv 512))
  %t21 = bitcast <8 x double> %arg13 to i512
  br i1 %t5, label %block_0_409bfa, label %block_0_409c32
block_0_409bfa:
  %t22 = phi i64 [ %arg3, %block_0_409be0 ], [ %t98, %block_0_409c3c ]
  %t23 = phi i64 [ %t2, %block_0_409be0 ], [ %t99, %block_0_409c3c ]
  %t24 = phi i64 [ %t4, %block_0_409be0 ], [ %t100, %block_0_409c3c ]
  %t25 = phi i64 [ %arg1, %block_0_409be0 ], [ %t101, %block_0_409c3c ]
  %t26 = phi i64 [ %arg4, %block_0_409be0 ], [ %t102, %block_0_409c3c ]
  %t27 = phi i64 [ %arg5, %block_0_409be0 ], [ %t103, %block_0_409c3c ]
  %t28 = phi i512 [ %t6, %block_0_409be0 ], [ %t104, %block_0_409c3c ]
  %t29 = phi i512 [ %t7, %block_0_409be0 ], [ %t105, %block_0_409c3c ]
  %t30 = phi i512 [ %t8, %block_0_409be0 ], [ %t106, %block_0_409c3c ]
  %t31 = phi i512 [ %t9, %block_0_409be0 ], [ %t107, %block_0_409c3c ]
  %t32 = phi i512 [ %t10, %block_0_409be0 ], [ %t108, %block_0_409c3c ]
  %t33 = phi i512 [ %t11, %block_0_409be0 ], [ %t109, %block_0_409c3c ]
  %t34 = phi i512 [ %t12, %block_0_409be0 ], [ %t110, %block_0_409c3c ]
  %t35 = phi i512 [ %t13, %block_0_409be0 ], [ %t111, %block_0_409c3c ]
  ; r35 := (read (0x630158 : bv 64) (bv 32))
  %t36 = inttoptr i64 6488408 to i32*
  %t37 = load i32, i32* %t36
  ; r36 := (trunc r23 32)
  %t38 = trunc i64 %t24 to i32
  ; r37 := (eq r36 (0x0 : bv 32))
  %t39 = icmp eq i32 %t38, 0
  ; r38 := (mux r37 r35 r36)
  %t40 = select i1 %t39, i32 %t37, i32 %t38
  ; write (0x630158 : bv 64) r38
  %t41 = inttoptr i64 6488408 to i32*
  store i32 %t40, i32* %t41
  ; r39 := (read (0x6356e8 : bv 64) (bv 32))
  %t42 = inttoptr i64 6510312 to i32*
  %t43 = load i32, i32* %t42
  ; r40 := (eq r39 (0x0 : bv 32))
  %t44 = icmp eq i32 %t43, 0
  br i1 %t44, label %block_0_409c21, label %block_0_409c17
block_0_409c17:
  %t45 = phi i64 [ %t22, %block_0_409bfa ]
  %t46 = phi i64 [ %t23, %block_0_409bfa ]
  %t47 = phi i64 [ %t25, %block_0_409bfa ]
  %t48 = phi i64 [ %t26, %block_0_409bfa ]
  %t49 = phi i64 [ %t27, %block_0_409bfa ]
  %t50 = phi i512 [ %t28, %block_0_409bfa ]
  %t51 = phi i512 [ %t29, %block_0_409bfa ]
  %t52 = phi i512 [ %t30, %block_0_409bfa ]
  %t53 = phi i512 [ %t31, %block_0_409bfa ]
  %t54 = phi i512 [ %t32, %block_0_409bfa ]
  %t55 = phi i512 [ %t33, %block_0_409bfa ]
  %t56 = phi i512 [ %t34, %block_0_409bfa ]
  %t57 = phi i512 [ %t35, %block_0_409bfa ]
  ; r54 := (bitcast r46 (vec 8 double))
  %t58 = bitcast i512 %t50 to <8 x double>
  ; r55 := (bitcast r47 (vec 8 double))
  %t59 = bitcast i512 %t51 to <8 x double>
  ; r56 := (bitcast r48 (vec 8 double))
  %t60 = bitcast i512 %t52 to <8 x double>
  ; r57 := (bitcast r49 (vec 8 double))
  %t61 = bitcast i512 %t53 to <8 x double>
  ; r58 := (bitcast r50 (vec 8 double))
  %t62 = bitcast i512 %t54 to <8 x double>
  ; r59 := (bitcast r51 (vec 8 double))
  %t63 = bitcast i512 %t55 to <8 x double>
  ; r60 := (bitcast r52 (vec 8 double))
  %t64 = bitcast i512 %t56 to <8 x double>
  ; r61 := (bitcast r53 (vec 8 double))
  %t65 = bitcast i512 %t57 to <8 x double>
  ; r62 := call pthread_mutex_unlock_int((0x635740 : bv 64), r43, r42, r41, r44, r45, r54, r55, r56, r57, r58, r59, r60, r61)
  %t66 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510400, i64 %t47, i64 %t46, i64 %t45, i64 %t48, i64 %t49, <8 x double> %t58, <8 x double> %t59, <8 x double> %t60, <8 x double> %t61, <8 x double> %t62, <8 x double> %t63, <8 x double> %t64, <8 x double> %t65)
  ; r63 := (tuple_field r62 0)
  %t67 = extractvalue { i64, i64, <8 x double> } %t66, 0
  ; r64 := (tuple_field r62 1)
  %t68 = extractvalue { i64, i64, <8 x double> } %t66, 1
  ; r65 := (tuple_field r62 2)
  %t69 = extractvalue { i64, i64, <8 x double> } %t66, 2
  ; r66 := (bitcast r65 (bv 512))
  %t70 = bitcast <8 x double> %t69 to i512
  br label %block_0_409c21
block_0_409c21:
  ret void
block_0_409c32:
  %t71 = phi i64 [ %arg3, %block_0_409be0 ]
  %t72 = phi i64 [ %t2, %block_0_409be0 ]
  %t73 = phi i64 [ %t4, %block_0_409be0 ]
  %t74 = phi i64 [ %arg1, %block_0_409be0 ]
  %t75 = phi i64 [ %arg4, %block_0_409be0 ]
  %t76 = phi i64 [ %arg5, %block_0_409be0 ]
  %t77 = phi i512 [ %t14, %block_0_409be0 ]
  %t78 = phi i512 [ %t15, %block_0_409be0 ]
  %t79 = phi i512 [ %t16, %block_0_409be0 ]
  %t80 = phi i512 [ %t17, %block_0_409be0 ]
  %t81 = phi i512 [ %t18, %block_0_409be0 ]
  %t82 = phi i512 [ %t19, %block_0_409be0 ]
  %t83 = phi i512 [ %t20, %block_0_409be0 ]
  %t84 = phi i512 [ %t21, %block_0_409be0 ]
  ; r81 := (bitcast r73 (vec 8 double))
  %t85 = bitcast i512 %t77 to <8 x double>
  ; r82 := (bitcast r74 (vec 8 double))
  %t86 = bitcast i512 %t78 to <8 x double>
  ; r83 := (bitcast r75 (vec 8 double))
  %t87 = bitcast i512 %t79 to <8 x double>
  ; r84 := (bitcast r76 (vec 8 double))
  %t88 = bitcast i512 %t80 to <8 x double>
  ; r85 := (bitcast r77 (vec 8 double))
  %t89 = bitcast i512 %t81 to <8 x double>
  ; r86 := (bitcast r78 (vec 8 double))
  %t90 = bitcast i512 %t82 to <8 x double>
  ; r87 := (bitcast r79 (vec 8 double))
  %t91 = bitcast i512 %t83 to <8 x double>
  ; r88 := (bitcast r80 (vec 8 double))
  %t92 = bitcast i512 %t84 to <8 x double>
  ; r89 := call pthread_mutex_lock_int((0x635740 : bv 64), r70, r68, r67, r71, r72, r81, r82, r83, r84, r85, r86, r87, r88)
  %t93 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510400, i64 %t74, i64 %t72, i64 %t71, i64 %t75, i64 %t76, <8 x double> %t85, <8 x double> %t86, <8 x double> %t87, <8 x double> %t88, <8 x double> %t89, <8 x double> %t90, <8 x double> %t91, <8 x double> %t92)
  ; r90 := (tuple_field r89 0)
  %t94 = extractvalue { i64, i64, <8 x double> } %t93, 0
  ; r91 := (tuple_field r89 1)
  %t95 = extractvalue { i64, i64, <8 x double> } %t93, 1
  ; r92 := (tuple_field r89 2)
  %t96 = extractvalue { i64, i64, <8 x double> } %t93, 2
  ; r93 := (bitcast r92 (bv 512))
  %t97 = bitcast <8 x double> %t96 to i512
  br label %block_0_409c3c
block_0_409c3c:
  %t98 = phi i64 [ %t71, %block_0_409c32 ]
  %t99 = phi i64 [ %t95, %block_0_409c32 ]
  %t100 = phi i64 [ %t73, %block_0_409c32 ]
  %t101 = phi i64 [ %t74, %block_0_409c32 ]
  %t102 = phi i64 [ %t75, %block_0_409c32 ]
  %t103 = phi i64 [ %t76, %block_0_409c32 ]
  %t104 = phi i512 [ %t97, %block_0_409c32 ]
  %t105 = phi i512 [ %t78, %block_0_409c32 ]
  %t106 = phi i512 [ %t79, %block_0_409c32 ]
  %t107 = phi i512 [ %t80, %block_0_409c32 ]
  %t108 = phi i512 [ %t81, %block_0_409c32 ]
  %t109 = phi i512 [ %t82, %block_0_409c32 ]
  %t110 = phi i512 [ %t83, %block_0_409c32 ]
  %t111 = phi i512 [ %t84, %block_0_409c32 ]
  br label %block_0_409bfa
}
define void @closelog(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_409c40:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t5 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t7 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t8 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t9 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t10 = bitcast <8 x double> %arg13 to i512
  ; r10 := (bitcast arg6 (bv 512))
  %t11 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t13 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t14 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t15 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t16 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t17 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t18 = bitcast <8 x double> %arg13 to i512
  br i1 %t3, label %block_0_409c4e, label %block_0_409c95
block_0_409c4e:
  %t19 = phi i64 [ %t2, %block_0_409c40 ], [ %t104, %block_0_409c9f ]
  %t20 = phi i64 [ %arg4, %block_0_409c40 ], [ %t105, %block_0_409c9f ]
  %t21 = phi i64 [ %arg5, %block_0_409c40 ], [ %t106, %block_0_409c9f ]
  %t22 = phi i512 [ %t4, %block_0_409c40 ], [ %t107, %block_0_409c9f ]
  %t23 = phi i512 [ %t5, %block_0_409c40 ], [ %t108, %block_0_409c9f ]
  %t24 = phi i512 [ %t6, %block_0_409c40 ], [ %t109, %block_0_409c9f ]
  %t25 = phi i512 [ %t7, %block_0_409c40 ], [ %t110, %block_0_409c9f ]
  %t26 = phi i512 [ %t8, %block_0_409c40 ], [ %t111, %block_0_409c9f ]
  %t27 = phi i512 [ %t9, %block_0_409c40 ], [ %t112, %block_0_409c9f ]
  %t28 = phi i512 [ %t10, %block_0_409c40 ], [ %t113, %block_0_409c9f ]
  ; r28 := (read (0x63015c : bv 64) (bv 32))
  %t29 = inttoptr i64 6488412 to i32*
  %t30 = load i32, i32* %t29
  ; r29 := (uext r28 64)
  %t31 = zext i32 %t30 to i64
  ; r30 := call __sys_close(r29)
  %t32 = call { i64, i64, <8 x double> } (i64) @__sys_close(i64 %t31)
  ; r31 := (tuple_field r30 0)
  %t33 = extractvalue { i64, i64, <8 x double> } %t32, 0
  ; r32 := (tuple_field r30 1)
  %t34 = extractvalue { i64, i64, <8 x double> } %t32, 1
  ; r33 := (tuple_field r30 2)
  %t35 = extractvalue { i64, i64, <8 x double> } %t32, 2
  ; r34 := (bitcast r33 (bv 512))
  %t36 = bitcast <8 x double> %t35 to i512
  br label %block_0_409c59
block_0_409c59:
  %t37 = phi i64 [ %t34, %block_0_409c4e ]
  %t38 = phi i64 [ %t19, %block_0_409c4e ]
  %t39 = phi i64 [ %t20, %block_0_409c4e ]
  %t40 = phi i64 [ %t21, %block_0_409c4e ]
  %t41 = phi i512 [ %t36, %block_0_409c4e ]
  %t42 = phi i512 [ %t22, %block_0_409c4e ]
  %t43 = phi i512 [ %t23, %block_0_409c4e ]
  %t44 = phi i512 [ %t24, %block_0_409c4e ]
  %t45 = phi i512 [ %t25, %block_0_409c4e ]
  %t46 = phi i512 [ %t26, %block_0_409c4e ]
  %t47 = phi i512 [ %t27, %block_0_409c4e ]
  %t48 = phi i512 [ %t28, %block_0_409c4e ]
  ; r47 := (read (0x6356e8 : bv 64) (bv 32))
  %t49 = inttoptr i64 6510312 to i32*
  %t50 = load i32, i32* %t49
  ; r48 := (uext r47 64)
  %t51 = zext i32 %t50 to i64
  ; write (0x63015c : bv 64) (0xffffffff : bv 32)
  %t52 = inttoptr i64 6488412 to i32*
  store i32 4294967295, i32* %t52
  ; write (0x635748 : bv 64) (0x0 : bv 64)
  %t53 = inttoptr i64 6510408 to i64*
  store i64 0, i64* %t53
  ; write (0x635754 : bv 64) (0x0 : bv 32)
  %t54 = inttoptr i64 6510420 to i32*
  store i32 0, i32* %t54
  ; r49 := (eq r47 (0x0 : bv 32))
  %t55 = icmp eq i32 %t50, 0
  br i1 %t55, label %block_0_409c82, label %block_0_409c87
block_0_409c82:
  ret void
block_0_409c87:
  %t56 = phi i64 [ %t51, %block_0_409c59 ]
  %t57 = phi i64 [ %t37, %block_0_409c59 ]
  %t58 = phi i64 [ %t38, %block_0_409c59 ]
  %t59 = phi i64 [ %t39, %block_0_409c59 ]
  %t60 = phi i64 [ %t40, %block_0_409c59 ]
  %t61 = phi i512 [ %t41, %block_0_409c59 ]
  %t62 = phi i512 [ %t42, %block_0_409c59 ]
  %t63 = phi i512 [ %t43, %block_0_409c59 ]
  %t64 = phi i512 [ %t44, %block_0_409c59 ]
  %t65 = phi i512 [ %t45, %block_0_409c59 ]
  %t66 = phi i512 [ %t46, %block_0_409c59 ]
  %t67 = phi i512 [ %t47, %block_0_409c59 ]
  %t68 = phi i512 [ %t48, %block_0_409c59 ]
  ; r63 := (bitcast r55 (vec 8 double))
  %t69 = bitcast i512 %t61 to <8 x double>
  ; r64 := (bitcast r56 (vec 8 double))
  %t70 = bitcast i512 %t62 to <8 x double>
  ; r65 := (bitcast r57 (vec 8 double))
  %t71 = bitcast i512 %t63 to <8 x double>
  ; r66 := (bitcast r58 (vec 8 double))
  %t72 = bitcast i512 %t64 to <8 x double>
  ; r67 := (bitcast r59 (vec 8 double))
  %t73 = bitcast i512 %t65 to <8 x double>
  ; r68 := (bitcast r60 (vec 8 double))
  %t74 = bitcast i512 %t66 to <8 x double>
  ; r69 := (bitcast r61 (vec 8 double))
  %t75 = bitcast i512 %t67 to <8 x double>
  ; r70 := (bitcast r62 (vec 8 double))
  %t76 = bitcast i512 %t68 to <8 x double>
  ; r71 := call pthread_mutex_unlock_int((0x635740 : bv 64), r52, r51, r50, r53, r54, r63, r64, r65, r66, r67, r68, r69, r70)
  %t77 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510400, i64 %t58, i64 %t57, i64 %t56, i64 %t59, i64 %t60, <8 x double> %t69, <8 x double> %t70, <8 x double> %t71, <8 x double> %t72, <8 x double> %t73, <8 x double> %t74, <8 x double> %t75, <8 x double> %t76)
  ret void
block_0_409c95:
  %t78 = phi i64 [ %arg3, %block_0_409c40 ]
  %t79 = phi i64 [ %arg2, %block_0_409c40 ]
  %t80 = phi i64 [ %t2, %block_0_409c40 ]
  %t81 = phi i64 [ %arg4, %block_0_409c40 ]
  %t82 = phi i64 [ %arg5, %block_0_409c40 ]
  %t83 = phi i512 [ %t11, %block_0_409c40 ]
  %t84 = phi i512 [ %t12, %block_0_409c40 ]
  %t85 = phi i512 [ %t13, %block_0_409c40 ]
  %t86 = phi i512 [ %t14, %block_0_409c40 ]
  %t87 = phi i512 [ %t15, %block_0_409c40 ]
  %t88 = phi i512 [ %t16, %block_0_409c40 ]
  %t89 = phi i512 [ %t17, %block_0_409c40 ]
  %t90 = phi i512 [ %t18, %block_0_409c40 ]
  ; r85 := (bitcast r77 (vec 8 double))
  %t91 = bitcast i512 %t83 to <8 x double>
  ; r86 := (bitcast r78 (vec 8 double))
  %t92 = bitcast i512 %t84 to <8 x double>
  ; r87 := (bitcast r79 (vec 8 double))
  %t93 = bitcast i512 %t85 to <8 x double>
  ; r88 := (bitcast r80 (vec 8 double))
  %t94 = bitcast i512 %t86 to <8 x double>
  ; r89 := (bitcast r81 (vec 8 double))
  %t95 = bitcast i512 %t87 to <8 x double>
  ; r90 := (bitcast r82 (vec 8 double))
  %t96 = bitcast i512 %t88 to <8 x double>
  ; r91 := (bitcast r83 (vec 8 double))
  %t97 = bitcast i512 %t89 to <8 x double>
  ; r92 := (bitcast r84 (vec 8 double))
  %t98 = bitcast i512 %t90 to <8 x double>
  ; r93 := call pthread_mutex_lock_int((0x635740 : bv 64), r74, r73, r72, r75, r76, r85, r86, r87, r88, r89, r90, r91, r92)
  %t99 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510400, i64 %t80, i64 %t79, i64 %t78, i64 %t81, i64 %t82, <8 x double> %t91, <8 x double> %t92, <8 x double> %t93, <8 x double> %t94, <8 x double> %t95, <8 x double> %t96, <8 x double> %t97, <8 x double> %t98)
  ; r94 := (tuple_field r93 0)
  %t100 = extractvalue { i64, i64, <8 x double> } %t99, 0
  ; r95 := (tuple_field r93 1)
  %t101 = extractvalue { i64, i64, <8 x double> } %t99, 1
  ; r96 := (tuple_field r93 2)
  %t102 = extractvalue { i64, i64, <8 x double> } %t99, 2
  ; r97 := (bitcast r96 (bv 512))
  %t103 = bitcast <8 x double> %t102 to i512
  br label %block_0_409c9f
block_0_409c9f:
  %t104 = phi i64 [ %t80, %block_0_409c95 ]
  %t105 = phi i64 [ %t81, %block_0_409c95 ]
  %t106 = phi i64 [ %t82, %block_0_409c95 ]
  %t107 = phi i512 [ %t84, %block_0_409c95 ]
  %t108 = phi i512 [ %t85, %block_0_409c95 ]
  %t109 = phi i512 [ %t86, %block_0_409c95 ]
  %t110 = phi i512 [ %t87, %block_0_409c95 ]
  %t111 = phi i512 [ %t88, %block_0_409c95 ]
  %t112 = phi i512 [ %t89, %block_0_409c95 ]
  %t113 = phi i512 [ %t90, %block_0_409c95 ]
  br label %block_0_409c4e
}
define void @openlog(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_409fc0:
  ; r0 := (trunc arg2 32)
  %t0 = trunc i64 %arg2 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (read (0x6356e8 : bv 64) (bv 32))
  %t2 = inttoptr i64 6510312 to i32*
  %t3 = load i32, i32* %t2
  ; r3 := (trunc arg1 32)
  %t4 = trunc i64 %arg1 to i32
  ; r4 := (uext r3 64)
  %t5 = zext i32 %t4 to i64
  ; r5 := (eq r2 (0x0 : bv 32))
  %t6 = icmp eq i32 %t3, 0
  ; r6 := (bitcast arg6 (bv 512))
  %t7 = bitcast <8 x double> %arg6 to i512
  ; r7 := (bitcast arg7 (bv 512))
  %t8 = bitcast <8 x double> %arg7 to i512
  ; r8 := (bitcast arg8 (bv 512))
  %t9 = bitcast <8 x double> %arg8 to i512
  ; r9 := (bitcast arg9 (bv 512))
  %t10 = bitcast <8 x double> %arg9 to i512
  ; r10 := (bitcast arg10 (bv 512))
  %t11 = bitcast <8 x double> %arg10 to i512
  ; r11 := (bitcast arg11 (bv 512))
  %t12 = bitcast <8 x double> %arg11 to i512
  ; r12 := (bitcast arg12 (bv 512))
  %t13 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r14 := (bitcast arg6 (bv 512))
  %t15 = bitcast <8 x double> %arg6 to i512
  ; r15 := (bitcast arg7 (bv 512))
  %t16 = bitcast <8 x double> %arg7 to i512
  ; r16 := (bitcast arg8 (bv 512))
  %t17 = bitcast <8 x double> %arg8 to i512
  ; r17 := (bitcast arg9 (bv 512))
  %t18 = bitcast <8 x double> %arg9 to i512
  ; r18 := (bitcast arg10 (bv 512))
  %t19 = bitcast <8 x double> %arg10 to i512
  ; r19 := (bitcast arg11 (bv 512))
  %t20 = bitcast <8 x double> %arg11 to i512
  ; r20 := (bitcast arg12 (bv 512))
  %t21 = bitcast <8 x double> %arg12 to i512
  ; r21 := (bitcast arg13 (bv 512))
  %t22 = bitcast <8 x double> %arg13 to i512
  br i1 %t6, label %block_0_409fe4, label %block_0_40a030
block_0_409fe4:
  %t23 = phi i64 [ %arg3, %block_0_409fc0 ], [ %t115, %block_0_40a03a ]
  %t24 = phi i64 [ %t1, %block_0_409fc0 ], [ %t116, %block_0_40a03a ]
  %t25 = phi i64 [ %t5, %block_0_409fc0 ], [ %t117, %block_0_40a03a ]
  %t26 = phi i64 [ %arg1, %block_0_409fc0 ], [ %t118, %block_0_40a03a ]
  %t27 = phi i64 [ %arg4, %block_0_409fc0 ], [ %t119, %block_0_40a03a ]
  %t28 = phi i64 [ %arg5, %block_0_409fc0 ], [ %t120, %block_0_40a03a ]
  %t29 = phi i64 [ %arg0, %block_0_409fc0 ], [ %t121, %block_0_40a03a ]
  %t30 = phi i512 [ %t7, %block_0_409fc0 ], [ %t122, %block_0_40a03a ]
  %t31 = phi i512 [ %t8, %block_0_409fc0 ], [ %t123, %block_0_40a03a ]
  %t32 = phi i512 [ %t9, %block_0_409fc0 ], [ %t124, %block_0_40a03a ]
  %t33 = phi i512 [ %t10, %block_0_409fc0 ], [ %t125, %block_0_40a03a ]
  %t34 = phi i512 [ %t11, %block_0_409fc0 ], [ %t126, %block_0_40a03a ]
  %t35 = phi i512 [ %t12, %block_0_409fc0 ], [ %t127, %block_0_40a03a ]
  %t36 = phi i512 [ %t13, %block_0_409fc0 ], [ %t128, %block_0_40a03a ]
  %t37 = phi i512 [ %t14, %block_0_409fc0 ], [ %t129, %block_0_40a03a ]
  ; r37 := (trunc r23 32)
  %t38 = trunc i64 %t24 to i32
  ; r38 := (uext r37 64)
  %t39 = zext i32 %t38 to i64
  ; r39 := (trunc r24 32)
  %t40 = trunc i64 %t25 to i32
  ; r40 := (uext r39 64)
  %t41 = zext i32 %t40 to i64
  ; r41 := (bitcast r29 (vec 8 double))
  %t42 = bitcast i512 %t30 to <8 x double>
  ; r42 := call openlog_unlocked(r28, r40, r38, r41)
  %t43 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @openlog_unlocked(i64 %t29, i64 %t41, i64 %t39, <8 x double> %t42)
  ; r43 := (tuple_field r42 0)
  %t44 = extractvalue { i64, i64, <8 x double> } %t43, 0
  ; r44 := (tuple_field r42 1)
  %t45 = extractvalue { i64, i64, <8 x double> } %t43, 1
  ; r45 := (tuple_field r42 2)
  %t46 = extractvalue { i64, i64, <8 x double> } %t43, 2
  ; r46 := (bitcast r45 (bv 512))
  %t47 = bitcast <8 x double> %t46 to i512
  br label %block_0_409ff0
block_0_409ff0:
  %t48 = phi i64 [ %t23, %block_0_409fe4 ]
  %t49 = phi i64 [ %t45, %block_0_409fe4 ]
  %t50 = phi i64 [ %t26, %block_0_409fe4 ]
  %t51 = phi i64 [ %t27, %block_0_409fe4 ]
  %t52 = phi i64 [ %t28, %block_0_409fe4 ]
  %t53 = phi i512 [ %t47, %block_0_409fe4 ]
  %t54 = phi i512 [ %t31, %block_0_409fe4 ]
  %t55 = phi i512 [ %t32, %block_0_409fe4 ]
  %t56 = phi i512 [ %t33, %block_0_409fe4 ]
  %t57 = phi i512 [ %t34, %block_0_409fe4 ]
  %t58 = phi i512 [ %t35, %block_0_409fe4 ]
  %t59 = phi i512 [ %t36, %block_0_409fe4 ]
  %t60 = phi i512 [ %t37, %block_0_409fe4 ]
  ; r60 := (read (0x6356e8 : bv 64) (bv 32))
  %t61 = inttoptr i64 6510312 to i32*
  %t62 = load i32, i32* %t61
  ; r61 := (eq r60 (0x0 : bv 32))
  %t63 = icmp eq i32 %t62, 0
  br i1 %t63, label %block_0_409ffa, label %block_0_40a010
block_0_409ffa:
  ret void
block_0_40a010:
  %t64 = phi i64 [ %t48, %block_0_409ff0 ]
  %t65 = phi i64 [ %t49, %block_0_409ff0 ]
  %t66 = phi i64 [ %t50, %block_0_409ff0 ]
  %t67 = phi i64 [ %t51, %block_0_409ff0 ]
  %t68 = phi i64 [ %t52, %block_0_409ff0 ]
  %t69 = phi i512 [ %t53, %block_0_409ff0 ]
  %t70 = phi i512 [ %t54, %block_0_409ff0 ]
  %t71 = phi i512 [ %t55, %block_0_409ff0 ]
  %t72 = phi i512 [ %t56, %block_0_409ff0 ]
  %t73 = phi i512 [ %t57, %block_0_409ff0 ]
  %t74 = phi i512 [ %t58, %block_0_409ff0 ]
  %t75 = phi i512 [ %t59, %block_0_409ff0 ]
  %t76 = phi i512 [ %t60, %block_0_409ff0 ]
  ; r75 := (bitcast r67 (vec 8 double))
  %t77 = bitcast i512 %t69 to <8 x double>
  ; r76 := (bitcast r68 (vec 8 double))
  %t78 = bitcast i512 %t70 to <8 x double>
  ; r77 := (bitcast r69 (vec 8 double))
  %t79 = bitcast i512 %t71 to <8 x double>
  ; r78 := (bitcast r70 (vec 8 double))
  %t80 = bitcast i512 %t72 to <8 x double>
  ; r79 := (bitcast r71 (vec 8 double))
  %t81 = bitcast i512 %t73 to <8 x double>
  ; r80 := (bitcast r72 (vec 8 double))
  %t82 = bitcast i512 %t74 to <8 x double>
  ; r81 := (bitcast r73 (vec 8 double))
  %t83 = bitcast i512 %t75 to <8 x double>
  ; r82 := (bitcast r74 (vec 8 double))
  %t84 = bitcast i512 %t76 to <8 x double>
  ; r83 := call pthread_mutex_unlock_int((0x635740 : bv 64), r64, r63, r62, r65, r66, r75, r76, r77, r78, r79, r80, r81, r82)
  %t85 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510400, i64 %t66, i64 %t65, i64 %t64, i64 %t67, i64 %t68, <8 x double> %t77, <8 x double> %t78, <8 x double> %t79, <8 x double> %t80, <8 x double> %t81, <8 x double> %t82, <8 x double> %t83, <8 x double> %t84)
  ret void
block_0_40a030:
  %t86 = phi i64 [ %arg3, %block_0_409fc0 ]
  %t87 = phi i64 [ %arg2, %block_0_409fc0 ]
  %t88 = phi i64 [ %t1, %block_0_409fc0 ]
  %t89 = phi i64 [ %t5, %block_0_409fc0 ]
  %t90 = phi i64 [ %arg1, %block_0_409fc0 ]
  %t91 = phi i64 [ %arg0, %block_0_409fc0 ]
  %t92 = phi i64 [ %arg4, %block_0_409fc0 ]
  %t93 = phi i64 [ %arg5, %block_0_409fc0 ]
  %t94 = phi i512 [ %t15, %block_0_409fc0 ]
  %t95 = phi i512 [ %t16, %block_0_409fc0 ]
  %t96 = phi i512 [ %t17, %block_0_409fc0 ]
  %t97 = phi i512 [ %t18, %block_0_409fc0 ]
  %t98 = phi i512 [ %t19, %block_0_409fc0 ]
  %t99 = phi i512 [ %t20, %block_0_409fc0 ]
  %t100 = phi i512 [ %t21, %block_0_409fc0 ]
  %t101 = phi i512 [ %t22, %block_0_409fc0 ]
  ; r100 := (bitcast r92 (vec 8 double))
  %t102 = bitcast i512 %t94 to <8 x double>
  ; r101 := (bitcast r93 (vec 8 double))
  %t103 = bitcast i512 %t95 to <8 x double>
  ; r102 := (bitcast r94 (vec 8 double))
  %t104 = bitcast i512 %t96 to <8 x double>
  ; r103 := (bitcast r95 (vec 8 double))
  %t105 = bitcast i512 %t97 to <8 x double>
  ; r104 := (bitcast r96 (vec 8 double))
  %t106 = bitcast i512 %t98 to <8 x double>
  ; r105 := (bitcast r97 (vec 8 double))
  %t107 = bitcast i512 %t99 to <8 x double>
  ; r106 := (bitcast r98 (vec 8 double))
  %t108 = bitcast i512 %t100 to <8 x double>
  ; r107 := (bitcast r99 (vec 8 double))
  %t109 = bitcast i512 %t101 to <8 x double>
  ; r108 := call pthread_mutex_lock_int((0x635740 : bv 64), r88, r85, r84, r90, r91, r100, r101, r102, r103, r104, r105, r106, r107)
  %t110 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510400, i64 %t90, i64 %t87, i64 %t86, i64 %t92, i64 %t93, <8 x double> %t102, <8 x double> %t103, <8 x double> %t104, <8 x double> %t105, <8 x double> %t106, <8 x double> %t107, <8 x double> %t108, <8 x double> %t109)
  ; r109 := (tuple_field r108 0)
  %t111 = extractvalue { i64, i64, <8 x double> } %t110, 0
  ; r110 := (tuple_field r108 1)
  %t112 = extractvalue { i64, i64, <8 x double> } %t110, 1
  ; r111 := (tuple_field r108 2)
  %t113 = extractvalue { i64, i64, <8 x double> } %t110, 2
  ; r112 := (bitcast r111 (bv 512))
  %t114 = bitcast <8 x double> %t113 to i512
  br label %block_0_40a03a
block_0_40a03a:
  %t115 = phi i64 [ %t86, %block_0_40a030 ]
  %t116 = phi i64 [ %t88, %block_0_40a030 ]
  %t117 = phi i64 [ %t89, %block_0_40a030 ]
  %t118 = phi i64 [ %t90, %block_0_40a030 ]
  %t119 = phi i64 [ %t92, %block_0_40a030 ]
  %t120 = phi i64 [ %t93, %block_0_40a030 ]
  %t121 = phi i64 [ %t91, %block_0_40a030 ]
  %t122 = phi i512 [ %t114, %block_0_40a030 ]
  %t123 = phi i512 [ %t95, %block_0_40a030 ]
  %t124 = phi i512 [ %t96, %block_0_40a030 ]
  %t125 = phi i512 [ %t97, %block_0_40a030 ]
  %t126 = phi i512 [ %t98, %block_0_40a030 ]
  %t127 = phi i512 [ %t99, %block_0_40a030 ]
  %t128 = phi i512 [ %t100, %block_0_40a030 ]
  %t129 = phi i512 [ %t101, %block_0_40a030 ]
  br label %block_0_409fe4
}
define { i64, <8 x double> } @strstr(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_40a630:
  ; r0 := (read arg1 (bv 8))
  %t0 = inttoptr i64 %arg1 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i8 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 8))
  %t3 = icmp eq i8 %t1, 0
  ; r3 := (bitcast arg2 (bv 512))
  %t4 = bitcast <8 x double> %arg2 to i512
  ; r4 := (bitcast arg2 (bv 512))
  %t5 = bitcast <8 x double> %arg2 to i512
  br i1 %t3, label %block_0_40a653, label %block_0_40a66f
block_0_40a653:
  %t6 = phi i64 [ %arg0, %block_0_40a630 ], [ %t69, %block_0_40a6a2 ]
  %t7 = phi i512 [ %t4, %block_0_40a630 ], [ %t68, %block_0_40a6a2 ]
  br label %block_0_40a656
block_0_40a656:
  %t8 = phi i64 [ %t6, %block_0_40a653 ], [ 0, %block_0_40a6a8 ]
  %t9 = phi i512 [ %t7, %block_0_40a653 ], [ %t70, %block_0_40a6a8 ]
  ; r9 := (bitcast r8 (vec 8 double))
  %t10 = bitcast i512 %t9 to <8 x double>
  ; r10 := (tuple r7 r9)
  %t11 = insertvalue { i64, <8 x double> } undef, i64 %t8, 0
  %t12 = insertvalue { i64, <8 x double> } %t11, <8 x double> %t10, 1
  ret { i64, <8 x double> } %t12
block_0_40a66f:
  %t13 = phi i64 [ %arg0, %block_0_40a630 ]
  %t14 = phi i64 [ %t2, %block_0_40a630 ]
  %t15 = phi i64 [ %arg1, %block_0_40a630 ]
  %t16 = phi i512 [ %t5, %block_0_40a630 ]
  ; r15 := (bv_add r13 (0x1 : bv 64))
  %t17 = add i64 %t15, 1
  ; r16 := (bitcast r14 (vec 8 double))
  %t18 = bitcast i512 %t16 to <8 x double>
  ; r17 := call strlen(r15, r16)
  %t19 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t17, <8 x double> %t18)
  ; r18 := (tuple_field r17 0)
  %t20 = extractvalue { i64, i64, <8 x double> } %t19, 0
  ; r19 := (tuple_field r17 1)
  %t21 = extractvalue { i64, i64, <8 x double> } %t19, 1
  ; r20 := (tuple_field r17 2)
  %t22 = extractvalue { i64, i64, <8 x double> } %t19, 2
  ; r21 := (bitcast r20 (bv 512))
  %t23 = bitcast <8 x double> %t22 to i512
  br label %block_0_40a67b
block_0_40a67b:
  %t24 = phi i64 [ %t20, %block_0_40a66f ]
  %t25 = phi i64 [ %t13, %block_0_40a66f ]
  %t26 = phi i64 [ %t14, %block_0_40a66f ]
  %t27 = phi i64 [ %t17, %block_0_40a66f ]
  %t28 = phi i512 [ %t23, %block_0_40a66f ]
  br label %block_0_40a680
block_0_40a680:
  %t29 = phi i64 [ %t25, %block_0_40a67b ], [ %t44, %block_0_40a687 ], [ %t60, %block_0_40a69e ]
  %t30 = phi i64 [ %t26, %block_0_40a67b ], [ %t40, %block_0_40a687 ], [ %t61, %block_0_40a69e ]
  %t31 = phi i64 [ %t27, %block_0_40a67b ], [ %t41, %block_0_40a687 ], [ %t62, %block_0_40a69e ]
  %t32 = phi i64 [ %t24, %block_0_40a67b ], [ %t42, %block_0_40a687 ], [ %t63, %block_0_40a69e ]
  %t33 = phi i512 [ %t28, %block_0_40a67b ], [ %t43, %block_0_40a687 ], [ %t64, %block_0_40a69e ]
  ; r32 := (read r27 (bv 8))
  %t34 = inttoptr i64 %t29 to i8*
  %t35 = load i8, i8* %t34
  ; r33 := (uext r32 64)
  %t36 = zext i8 %t35 to i64
  ; r34 := (eq r32 (0x0 : bv 8))
  %t37 = icmp eq i8 %t35, 0
  br i1 %t37, label %block_0_40a6a8, label %block_0_40a687
block_0_40a687:
  %t38 = phi i64 [ %t36, %block_0_40a680 ]
  %t39 = phi i64 [ %t29, %block_0_40a680 ]
  %t40 = phi i64 [ %t30, %block_0_40a680 ]
  %t41 = phi i64 [ %t31, %block_0_40a680 ]
  %t42 = phi i64 [ %t32, %block_0_40a680 ]
  %t43 = phi i512 [ %t33, %block_0_40a680 ]
  ; r41 := (bv_add r36 (0x1 : bv 64))
  %t44 = add i64 %t39, 1
  ; r42 := (trunc r35 8)
  %t45 = trunc i64 %t38 to i8
  ; r43 := (trunc r37 8)
  %t46 = trunc i64 %t40 to i8
  ; r44 := (eq r42 r43)
  %t47 = icmp eq i8 %t45, %t46
  br i1 %t47, label %block_0_40a690, label %block_0_40a680
block_0_40a690:
  %t48 = phi i64 [ %t44, %block_0_40a687 ]
  %t49 = phi i64 [ %t40, %block_0_40a687 ]
  %t50 = phi i64 [ %t41, %block_0_40a687 ]
  %t51 = phi i64 [ %t42, %block_0_40a687 ]
  %t52 = phi i512 [ %t43, %block_0_40a687 ]
  ; r50 := (bitcast r49 (vec 8 double))
  %t53 = bitcast i512 %t52 to <8 x double>
  ; r51 := call strncmp(r45, r47, r48, r50)
  %t54 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strncmp(i64 %t48, i64 %t50, i64 %t51, <8 x double> %t53)
  ; r52 := (tuple_field r51 0)
  %t55 = extractvalue { i64, i64, <8 x double> } %t54, 0
  ; r53 := (tuple_field r51 1)
  %t56 = extractvalue { i64, i64, <8 x double> } %t54, 1
  ; r54 := (tuple_field r51 2)
  %t57 = extractvalue { i64, i64, <8 x double> } %t54, 2
  ; r55 := (bitcast r54 (bv 512))
  %t58 = bitcast <8 x double> %t57 to i512
  br label %block_0_40a69e
block_0_40a69e:
  %t59 = phi i64 [ %t55, %block_0_40a690 ]
  %t60 = phi i64 [ %t48, %block_0_40a690 ]
  %t61 = phi i64 [ %t49, %block_0_40a690 ]
  %t62 = phi i64 [ %t50, %block_0_40a690 ]
  %t63 = phi i64 [ %t51, %block_0_40a690 ]
  %t64 = phi i512 [ %t58, %block_0_40a690 ]
  ; r62 := (trunc r56 32)
  %t65 = trunc i64 %t59 to i32
  ; r63 := (eq r62 (0x0 : bv 32))
  %t66 = icmp eq i32 %t65, 0
  br i1 %t66, label %block_0_40a6a2, label %block_0_40a680
block_0_40a6a2:
  %t67 = phi i64 [ %t60, %block_0_40a69e ]
  %t68 = phi i512 [ %t64, %block_0_40a69e ]
  ; r66 := (bv_add r64 (0xffffffffffffffff : bv 64))
  %t69 = add i64 %t67, 18446744073709551615
  br label %block_0_40a653
block_0_40a6a8:
  %t70 = phi i512 [ %t33, %block_0_40a680 ]
  br label %block_0_40a656
}
define { i64, i64, <8 x double> } @atexit_register(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40a880:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t5 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t7 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t8 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t9 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t10 = bitcast <8 x double> %arg13 to i512
  ; r10 := (bitcast arg6 (bv 512))
  %t11 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t13 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t14 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t15 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t16 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t17 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t18 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_40a895, label %block_0_40a9f0
block_0_40a895:
  %t19 = phi i64 [ %arg3, %block_0_40a880 ]
  %t20 = phi i64 [ %arg2, %block_0_40a880 ]
  %t21 = phi i64 [ %arg1, %block_0_40a880 ]
  %t22 = phi i64 [ %arg0, %block_0_40a880 ]
  %t23 = phi i64 [ %arg4, %block_0_40a880 ]
  %t24 = phi i64 [ %arg5, %block_0_40a880 ]
  %t25 = phi i512 [ %t3, %block_0_40a880 ]
  %t26 = phi i512 [ %t4, %block_0_40a880 ]
  %t27 = phi i512 [ %t5, %block_0_40a880 ]
  %t28 = phi i512 [ %t6, %block_0_40a880 ]
  %t29 = phi i512 [ %t7, %block_0_40a880 ]
  %t30 = phi i512 [ %t8, %block_0_40a880 ]
  %t31 = phi i512 [ %t9, %block_0_40a880 ]
  %t32 = phi i512 [ %t10, %block_0_40a880 ]
  ; r32 := (read (0x635b90 : bv 64) (bv 64))
  %t33 = inttoptr i64 6511504 to i64*
  %t34 = load i64, i64* %t33
  ; r33 := (eq r32 (0x0 : bv 64))
  %t35 = icmp eq i64 %t34, 0
  br i1 %t35, label %block_0_40aa0a, label %block_0_40a8a5
block_0_40a8a5:
  %t36 = phi i64 [ %t19, %block_0_40a895 ], [ %t424, %block_0_40a9a0 ], [ %t593, %block_0_40a9fa ]
  %t37 = phi i64 [ %t20, %block_0_40a895 ], [ %t425, %block_0_40a9a0 ], [ %t594, %block_0_40a9fa ]
  %t38 = phi i64 [ %t34, %block_0_40a895 ], [ %t426, %block_0_40a9a0 ], [ %t608, %block_0_40a9fa ]
  %t39 = phi i64 [ %t21, %block_0_40a895 ], [ %t428, %block_0_40a9a0 ], [ %t595, %block_0_40a9fa ]
  %t40 = phi i64 [ %t23, %block_0_40a895 ], [ %t429, %block_0_40a9a0 ], [ %t596, %block_0_40a9fa ]
  %t41 = phi i64 [ %t24, %block_0_40a895 ], [ %t430, %block_0_40a9a0 ], [ %t597, %block_0_40a9fa ]
  %t42 = phi i64 [ %t22, %block_0_40a895 ], [ %t431, %block_0_40a9a0 ], [ %t598, %block_0_40a9fa ]
  %t43 = phi i512 [ %t25, %block_0_40a895 ], [ %t432, %block_0_40a9a0 ], [ %t599, %block_0_40a9fa ]
  %t44 = phi i512 [ %t26, %block_0_40a895 ], [ %t433, %block_0_40a9a0 ], [ %t600, %block_0_40a9fa ]
  %t45 = phi i512 [ %t27, %block_0_40a895 ], [ %t434, %block_0_40a9a0 ], [ %t601, %block_0_40a9fa ]
  %t46 = phi i512 [ %t28, %block_0_40a895 ], [ %t435, %block_0_40a9a0 ], [ %t602, %block_0_40a9fa ]
  %t47 = phi i512 [ %t29, %block_0_40a895 ], [ %t436, %block_0_40a9a0 ], [ %t603, %block_0_40a9fa ]
  %t48 = phi i512 [ %t30, %block_0_40a895 ], [ %t437, %block_0_40a9a0 ], [ %t604, %block_0_40a9fa ]
  %t49 = phi i512 [ %t31, %block_0_40a895 ], [ %t438, %block_0_40a9a0 ], [ %t605, %block_0_40a9fa ]
  %t50 = phi i512 [ %t32, %block_0_40a895 ], [ %t439, %block_0_40a9a0 ], [ %t606, %block_0_40a9fa ]
  ; r49 := (bv_add r36 (0x8 : bv 64))
  %t51 = add i64 %t38, 8
  ; r50 := (read r49 (bv 32))
  %t52 = inttoptr i64 %t51 to i32*
  %t53 = load i32, i32* %t52
  ; r51 := (ssbb_overflows r50 (0x1f : bv 32) false)
  %t54 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t53, i32 31)
  %t55 = extractvalue { i32, i1 } %t54, 1
  ; r52 := (bv_add r50 (0xffffffe1 : bv 32))
  %t56 = add i32 %t53, 4294967265
  ; r53 := (bv_slt r52 (0x0 : bv 32))
  %t57 = icmp slt i32 %t56, 0
  ; r54 := (eq r50 (0x1f : bv 32))
  %t58 = icmp eq i32 %t53, 31
  ; r55 := (xor r53 r51)
  %t59 = xor i1 %t57, %t55
  ; r56 := (or r54 r55)
  %t60 = or i1 %t58, %t59
  br i1 %t60, label %block_0_40a927, label %block_0_40a8ab
block_0_40a8ab:
  %t61 = phi i64 [ %t36, %block_0_40a8a5 ]
  %t62 = phi i64 [ %t37, %block_0_40a8a5 ]
  %t63 = phi i64 [ %t39, %block_0_40a8a5 ]
  %t64 = phi i64 [ %t40, %block_0_40a8a5 ]
  %t65 = phi i64 [ %t41, %block_0_40a8a5 ]
  %t66 = phi i64 [ %t42, %block_0_40a8a5 ]
  %t67 = phi i512 [ %t43, %block_0_40a8a5 ]
  %t68 = phi i512 [ %t44, %block_0_40a8a5 ]
  %t69 = phi i512 [ %t45, %block_0_40a8a5 ]
  %t70 = phi i512 [ %t46, %block_0_40a8a5 ]
  %t71 = phi i512 [ %t47, %block_0_40a8a5 ]
  %t72 = phi i512 [ %t48, %block_0_40a8a5 ]
  %t73 = phi i512 [ %t49, %block_0_40a8a5 ]
  %t74 = phi i512 [ %t50, %block_0_40a8a5 ]
  br label %block_0_40a8b0
block_0_40a8b0:
  %t75 = phi i64 [ %t61, %block_0_40a8ab ], [ %t240, %block_0_40a91a ]
  %t76 = phi i64 [ %t62, %block_0_40a8ab ], [ %t241, %block_0_40a91a ]
  %t77 = phi i64 [ %t63, %block_0_40a8ab ], [ %t242, %block_0_40a91a ]
  %t78 = phi i64 [ %t64, %block_0_40a8ab ], [ %t243, %block_0_40a91a ]
  %t79 = phi i64 [ %t65, %block_0_40a8ab ], [ %t244, %block_0_40a91a ]
  %t80 = phi i64 [ %t66, %block_0_40a8ab ], [ %t245, %block_0_40a91a ]
  %t81 = phi i512 [ %t67, %block_0_40a8ab ], [ %t246, %block_0_40a91a ]
  %t82 = phi i512 [ %t68, %block_0_40a8ab ], [ %t247, %block_0_40a91a ]
  %t83 = phi i512 [ %t69, %block_0_40a8ab ], [ %t248, %block_0_40a91a ]
  %t84 = phi i512 [ %t70, %block_0_40a8ab ], [ %t249, %block_0_40a91a ]
  %t85 = phi i512 [ %t71, %block_0_40a8ab ], [ %t250, %block_0_40a91a ]
  %t86 = phi i512 [ %t72, %block_0_40a8ab ], [ %t251, %block_0_40a91a ]
  %t87 = phi i512 [ %t73, %block_0_40a8ab ], [ %t252, %block_0_40a91a ]
  %t88 = phi i512 [ %t74, %block_0_40a8ab ], [ %t253, %block_0_40a91a ]
  ; r85 := (read (0x6356e8 : bv 64) (bv 32))
  %t89 = inttoptr i64 6510312 to i32*
  %t90 = load i32, i32* %t89
  ; r86 := (read (0x635b90 : bv 64) (bv 64))
  %t91 = inttoptr i64 6511504 to i64*
  %t92 = load i64, i64* %t91
  ; r87 := (eq r85 (0x0 : bv 32))
  %t93 = icmp eq i32 %t90, 0
  br i1 %t93, label %block_0_40a8c5, label %block_0_40a974
block_0_40a8c5:
  %t94 = phi i64 [ %t75, %block_0_40a8b0 ], [ %t345, %block_0_40a97e ]
  %t95 = phi i64 [ %t76, %block_0_40a8b0 ], [ %t346, %block_0_40a97e ]
  %t96 = phi i64 [ %t92, %block_0_40a8b0 ], [ %t347, %block_0_40a97e ]
  %t97 = phi i64 [ %t77, %block_0_40a8b0 ], [ %t348, %block_0_40a97e ]
  %t98 = phi i64 [ %t78, %block_0_40a8b0 ], [ %t349, %block_0_40a97e ]
  %t99 = phi i64 [ %t79, %block_0_40a8b0 ], [ %t350, %block_0_40a97e ]
  %t100 = phi i64 [ %t80, %block_0_40a8b0 ], [ %t351, %block_0_40a97e ]
  %t101 = phi i512 [ %t81, %block_0_40a8b0 ], [ %t352, %block_0_40a97e ]
  %t102 = phi i512 [ %t82, %block_0_40a8b0 ], [ %t353, %block_0_40a97e ]
  %t103 = phi i512 [ %t83, %block_0_40a8b0 ], [ %t354, %block_0_40a97e ]
  %t104 = phi i512 [ %t84, %block_0_40a8b0 ], [ %t355, %block_0_40a97e ]
  %t105 = phi i512 [ %t85, %block_0_40a8b0 ], [ %t356, %block_0_40a97e ]
  %t106 = phi i512 [ %t86, %block_0_40a8b0 ], [ %t357, %block_0_40a97e ]
  %t107 = phi i512 [ %t87, %block_0_40a8b0 ], [ %t358, %block_0_40a97e ]
  %t108 = phi i512 [ %t88, %block_0_40a8b0 ], [ %t359, %block_0_40a97e ]
  ; r103 := (bitcast r95 (vec 8 double))
  %t109 = bitcast i512 %t101 to <8 x double>
  ; r104 := (bitcast r96 (vec 8 double))
  %t110 = bitcast i512 %t102 to <8 x double>
  ; r105 := (bitcast r97 (vec 8 double))
  %t111 = bitcast i512 %t103 to <8 x double>
  ; r106 := (bitcast r98 (vec 8 double))
  %t112 = bitcast i512 %t104 to <8 x double>
  ; r107 := (bitcast r99 (vec 8 double))
  %t113 = bitcast i512 %t105 to <8 x double>
  ; r108 := (bitcast r100 (vec 8 double))
  %t114 = bitcast i512 %t106 to <8 x double>
  ; r109 := (bitcast r101 (vec 8 double))
  %t115 = bitcast i512 %t107 to <8 x double>
  ; r110 := (bitcast r102 (vec 8 double))
  %t116 = bitcast i512 %t108 to <8 x double>
  ; r111 := call malloc((0x410 : bv 64), r91, r89, r88, r92, r93, r103, r104, r105, r106, r107, r108, r109, r110)
  %t117 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @malloc(i64 1040, i64 %t97, i64 %t95, i64 %t94, i64 %t98, i64 %t99, <8 x double> %t109, <8 x double> %t110, <8 x double> %t111, <8 x double> %t112, <8 x double> %t113, <8 x double> %t114, <8 x double> %t115, <8 x double> %t116)
  ; r112 := (tuple_field r111 0)
  %t118 = extractvalue { i64, i64, <8 x double> } %t117, 0
  ; r113 := (tuple_field r111 1)
  %t119 = extractvalue { i64, i64, <8 x double> } %t117, 1
  ; r114 := (tuple_field r111 2)
  %t120 = extractvalue { i64, i64, <8 x double> } %t117, 2
  ; r115 := (bitcast r114 (bv 512))
  %t121 = bitcast <8 x double> %t120 to i512
  br label %block_0_40a8cf
block_0_40a8cf:
  %t122 = phi i64 [ %t118, %block_0_40a8c5 ]
  %t123 = phi i64 [ %t94, %block_0_40a8c5 ]
  %t124 = phi i64 [ %t119, %block_0_40a8c5 ]
  %t125 = phi i64 [ %t96, %block_0_40a8c5 ]
  %t126 = phi i64 [ %t97, %block_0_40a8c5 ]
  %t127 = phi i64 [ %t98, %block_0_40a8c5 ]
  %t128 = phi i64 [ %t99, %block_0_40a8c5 ]
  %t129 = phi i64 [ %t100, %block_0_40a8c5 ]
  %t130 = phi i512 [ %t121, %block_0_40a8c5 ]
  %t131 = phi i512 [ %t102, %block_0_40a8c5 ]
  %t132 = phi i512 [ %t103, %block_0_40a8c5 ]
  %t133 = phi i512 [ %t104, %block_0_40a8c5 ]
  %t134 = phi i512 [ %t105, %block_0_40a8c5 ]
  %t135 = phi i512 [ %t106, %block_0_40a8c5 ]
  %t136 = phi i512 [ %t107, %block_0_40a8c5 ]
  %t137 = phi i512 [ %t108, %block_0_40a8c5 ]
  ; r132 := (eq r116 (0x0 : bv 64))
  %t138 = icmp eq i64 %t122, 0
  br i1 %t138, label %block_0_40a9e6, label %block_0_40a8db
block_0_40a8db:
  %t139 = phi i64 [ %t122, %block_0_40a8cf ]
  %t140 = phi i64 [ %t123, %block_0_40a8cf ]
  %t141 = phi i64 [ %t124, %block_0_40a8cf ]
  %t142 = phi i64 [ %t125, %block_0_40a8cf ]
  %t143 = phi i64 [ %t126, %block_0_40a8cf ]
  %t144 = phi i64 [ %t127, %block_0_40a8cf ]
  %t145 = phi i64 [ %t128, %block_0_40a8cf ]
  %t146 = phi i64 [ %t129, %block_0_40a8cf ]
  %t147 = phi i512 [ %t130, %block_0_40a8cf ]
  %t148 = phi i512 [ %t131, %block_0_40a8cf ]
  %t149 = phi i512 [ %t132, %block_0_40a8cf ]
  %t150 = phi i512 [ %t133, %block_0_40a8cf ]
  %t151 = phi i512 [ %t134, %block_0_40a8cf ]
  %t152 = phi i512 [ %t135, %block_0_40a8cf ]
  %t153 = phi i512 [ %t136, %block_0_40a8cf ]
  %t154 = phi i512 [ %t137, %block_0_40a8cf ]
  ; r149 := (read (0x6356e8 : bv 64) (bv 32))
  %t155 = inttoptr i64 6510312 to i32*
  %t156 = load i32, i32* %t155
  ; r150 := (eq r149 (0x0 : bv 32))
  %t157 = icmp eq i32 %t156, 0
  br i1 %t157, label %block_0_40a8e9, label %block_0_40a983
block_0_40a8e9:
  %t158 = phi i64 [ %t140, %block_0_40a8db ]
  %t159 = phi i64 [ %t141, %block_0_40a8db ]
  %t160 = phi i64 [ %t139, %block_0_40a8db ]
  %t161 = phi i64 [ %t142, %block_0_40a8db ]
  %t162 = phi i64 [ %t143, %block_0_40a8db ]
  %t163 = phi i64 [ %t144, %block_0_40a8db ]
  %t164 = phi i64 [ %t145, %block_0_40a8db ]
  %t165 = phi i64 [ %t146, %block_0_40a8db ]
  %t166 = phi i512 [ %t147, %block_0_40a8db ]
  %t167 = phi i512 [ %t148, %block_0_40a8db ]
  %t168 = phi i512 [ %t149, %block_0_40a8db ]
  %t169 = phi i512 [ %t150, %block_0_40a8db ]
  %t170 = phi i512 [ %t151, %block_0_40a8db ]
  %t171 = phi i512 [ %t152, %block_0_40a8db ]
  %t172 = phi i512 [ %t153, %block_0_40a8db ]
  %t173 = phi i512 [ %t154, %block_0_40a8db ]
  ; r167 := (read (0x635b90 : bv 64) (bv 64))
  %t174 = inttoptr i64 6511504 to i64*
  %t175 = load i64, i64* %t174
  ; r168 := (eq r154 r167)
  %t176 = icmp eq i64 %t161, %t175
  br i1 %t176, label %block_0_40a9a0, label %block_0_40a8f6
block_0_40a8f6:
  %t177 = phi i64 [ %t158, %block_0_40a8e9 ], [ %t389, %block_0_40a98d ]
  %t178 = phi i64 [ %t159, %block_0_40a8e9 ], [ %t390, %block_0_40a98d ]
  %t179 = phi i64 [ %t160, %block_0_40a8e9 ], [ %t391, %block_0_40a98d ]
  %t180 = phi i64 [ %t162, %block_0_40a8e9 ], [ %t393, %block_0_40a98d ]
  %t181 = phi i64 [ %t163, %block_0_40a8e9 ], [ %t394, %block_0_40a98d ]
  %t182 = phi i64 [ %t164, %block_0_40a8e9 ], [ %t395, %block_0_40a98d ]
  %t183 = phi i64 [ %t165, %block_0_40a8e9 ], [ %t396, %block_0_40a98d ]
  %t184 = phi i512 [ %t166, %block_0_40a8e9 ], [ %t397, %block_0_40a98d ]
  %t185 = phi i512 [ %t167, %block_0_40a8e9 ], [ %t398, %block_0_40a98d ]
  %t186 = phi i512 [ %t168, %block_0_40a8e9 ], [ %t399, %block_0_40a98d ]
  %t187 = phi i512 [ %t169, %block_0_40a8e9 ], [ %t400, %block_0_40a98d ]
  %t188 = phi i512 [ %t170, %block_0_40a8e9 ], [ %t401, %block_0_40a98d ]
  %t189 = phi i512 [ %t171, %block_0_40a8e9 ], [ %t402, %block_0_40a98d ]
  %t190 = phi i512 [ %t172, %block_0_40a8e9 ], [ %t403, %block_0_40a98d ]
  %t191 = phi i512 [ %t173, %block_0_40a8e9 ], [ %t404, %block_0_40a98d ]
  ; r184 := (read (0x6356e8 : bv 64) (bv 32))
  %t192 = inttoptr i64 6510312 to i32*
  %t193 = load i32, i32* %t192
  ; r185 := (eq r184 (0x0 : bv 32))
  %t194 = icmp eq i32 %t193, 0
  br i1 %t194, label %block_0_40a904, label %block_0_40a9c5
block_0_40a904:
  %t195 = phi i64 [ %t177, %block_0_40a8f6 ], [ %t513, %block_0_40a9cf ]
  %t196 = phi i64 [ %t178, %block_0_40a8f6 ], [ %t514, %block_0_40a9cf ]
  %t197 = phi i64 [ %t179, %block_0_40a8f6 ], [ %t515, %block_0_40a9cf ]
  %t198 = phi i64 [ %t180, %block_0_40a8f6 ], [ %t516, %block_0_40a9cf ]
  %t199 = phi i64 [ %t181, %block_0_40a8f6 ], [ %t517, %block_0_40a9cf ]
  %t200 = phi i64 [ %t182, %block_0_40a8f6 ], [ %t518, %block_0_40a9cf ]
  %t201 = phi i64 [ %t183, %block_0_40a8f6 ], [ %t519, %block_0_40a9cf ]
  %t202 = phi i512 [ %t184, %block_0_40a8f6 ], [ %t520, %block_0_40a9cf ]
  %t203 = phi i512 [ %t185, %block_0_40a8f6 ], [ %t521, %block_0_40a9cf ]
  %t204 = phi i512 [ %t186, %block_0_40a8f6 ], [ %t522, %block_0_40a9cf ]
  %t205 = phi i512 [ %t187, %block_0_40a8f6 ], [ %t523, %block_0_40a9cf ]
  %t206 = phi i512 [ %t188, %block_0_40a8f6 ], [ %t524, %block_0_40a9cf ]
  %t207 = phi i512 [ %t189, %block_0_40a8f6 ], [ %t525, %block_0_40a9cf ]
  %t208 = phi i512 [ %t190, %block_0_40a8f6 ], [ %t526, %block_0_40a9cf ]
  %t209 = phi i512 [ %t191, %block_0_40a8f6 ], [ %t527, %block_0_40a9cf ]
  ; r201 := (bitcast r193 (vec 8 double))
  %t210 = bitcast i512 %t202 to <8 x double>
  ; r202 := (bitcast r194 (vec 8 double))
  %t211 = bitcast i512 %t203 to <8 x double>
  ; r203 := (bitcast r195 (vec 8 double))
  %t212 = bitcast i512 %t204 to <8 x double>
  ; r204 := (bitcast r196 (vec 8 double))
  %t213 = bitcast i512 %t205 to <8 x double>
  ; r205 := (bitcast r197 (vec 8 double))
  %t214 = bitcast i512 %t206 to <8 x double>
  ; r206 := (bitcast r198 (vec 8 double))
  %t215 = bitcast i512 %t207 to <8 x double>
  ; r207 := (bitcast r199 (vec 8 double))
  %t216 = bitcast i512 %t208 to <8 x double>
  ; r208 := (bitcast r200 (vec 8 double))
  %t217 = bitcast i512 %t209 to <8 x double>
  ; r209 := call free(r188, r189, r187, r186, r190, r191, r201, r202, r203, r204, r205, r206, r207, r208)
  %t218 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t197, i64 %t198, i64 %t196, i64 %t195, i64 %t199, i64 %t200, <8 x double> %t210, <8 x double> %t211, <8 x double> %t212, <8 x double> %t213, <8 x double> %t214, <8 x double> %t215, <8 x double> %t216, <8 x double> %t217)
  ; r210 := (tuple_field r209 0)
  %t219 = extractvalue { i64, i64, <8 x double> } %t218, 0
  ; r211 := (tuple_field r209 1)
  %t220 = extractvalue { i64, i64, <8 x double> } %t218, 1
  ; r212 := (tuple_field r209 2)
  %t221 = extractvalue { i64, i64, <8 x double> } %t218, 2
  ; r213 := (bitcast r212 (bv 512))
  %t222 = bitcast <8 x double> %t221 to i512
  br label %block_0_40a90c
block_0_40a90c:
  %t223 = phi i64 [ %t195, %block_0_40a904 ]
  %t224 = phi i64 [ %t220, %block_0_40a904 ]
  %t225 = phi i64 [ %t198, %block_0_40a904 ]
  %t226 = phi i64 [ %t199, %block_0_40a904 ]
  %t227 = phi i64 [ %t200, %block_0_40a904 ]
  %t228 = phi i64 [ %t201, %block_0_40a904 ]
  %t229 = phi i512 [ %t222, %block_0_40a904 ]
  %t230 = phi i512 [ %t203, %block_0_40a904 ]
  %t231 = phi i512 [ %t204, %block_0_40a904 ]
  %t232 = phi i512 [ %t205, %block_0_40a904 ]
  %t233 = phi i512 [ %t206, %block_0_40a904 ]
  %t234 = phi i512 [ %t207, %block_0_40a904 ]
  %t235 = phi i512 [ %t208, %block_0_40a904 ]
  %t236 = phi i512 [ %t209, %block_0_40a904 ]
  ; r228 := (read (0x6356e8 : bv 64) (bv 32))
  %t237 = inttoptr i64 6510312 to i32*
  %t238 = load i32, i32* %t237
  ; r229 := (eq r228 (0x0 : bv 32))
  %t239 = icmp eq i32 %t238, 0
  br i1 %t239, label %block_0_40a91a, label %block_0_40a9b6
block_0_40a91a:
  %t240 = phi i64 [ %t223, %block_0_40a90c ], [ %t471, %block_0_40a9c0 ]
  %t241 = phi i64 [ %t224, %block_0_40a90c ], [ %t472, %block_0_40a9c0 ]
  %t242 = phi i64 [ %t225, %block_0_40a90c ], [ %t473, %block_0_40a9c0 ]
  %t243 = phi i64 [ %t226, %block_0_40a90c ], [ %t474, %block_0_40a9c0 ]
  %t244 = phi i64 [ %t227, %block_0_40a90c ], [ %t475, %block_0_40a9c0 ]
  %t245 = phi i64 [ %t228, %block_0_40a90c ], [ %t476, %block_0_40a9c0 ]
  %t246 = phi i512 [ %t229, %block_0_40a90c ], [ %t477, %block_0_40a9c0 ]
  %t247 = phi i512 [ %t230, %block_0_40a90c ], [ %t478, %block_0_40a9c0 ]
  %t248 = phi i512 [ %t231, %block_0_40a90c ], [ %t479, %block_0_40a9c0 ]
  %t249 = phi i512 [ %t232, %block_0_40a90c ], [ %t480, %block_0_40a9c0 ]
  %t250 = phi i512 [ %t233, %block_0_40a90c ], [ %t481, %block_0_40a9c0 ]
  %t251 = phi i512 [ %t234, %block_0_40a90c ], [ %t482, %block_0_40a9c0 ]
  %t252 = phi i512 [ %t235, %block_0_40a90c ], [ %t483, %block_0_40a9c0 ]
  %t253 = phi i512 [ %t236, %block_0_40a90c ], [ %t484, %block_0_40a9c0 ]
  ; r244 := (read (0x635b90 : bv 64) (bv 64))
  %t254 = inttoptr i64 6511504 to i64*
  %t255 = load i64, i64* %t254
  ; r245 := (bv_add r244 (0x8 : bv 64))
  %t256 = add i64 %t255, 8
  ; r246 := (read r245 (bv 32))
  %t257 = inttoptr i64 %t256 to i32*
  %t258 = load i32, i32* %t257
  ; r247 := (ssbb_overflows r246 (0x1f : bv 32) false)
  %t259 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t258, i32 31)
  %t260 = extractvalue { i32, i1 } %t259, 1
  ; r248 := (bv_add r246 (0xffffffe1 : bv 32))
  %t261 = add i32 %t258, 4294967265
  ; r249 := (bv_slt r248 (0x0 : bv 32))
  %t262 = icmp slt i32 %t261, 0
  ; r250 := (eq r246 (0x1f : bv 32))
  %t263 = icmp eq i32 %t258, 31
  ; r251 := (not r250)
  %t264 = icmp eq i1 %t263, 0
  ; r252 := (eq r249 r247)
  %t265 = icmp eq i1 %t262, %t260
  ; r253 := (and r251 r252)
  %t266 = and i1 %t264, %t265
  br i1 %t266, label %block_0_40a8b0, label %block_0_40a927
block_0_40a927:
  %t267 = phi i64 [ %t38, %block_0_40a8a5 ], [ %t255, %block_0_40a91a ], [ 6510464, %block_0_40aa0a ]
  %t268 = phi i64 [ %t40, %block_0_40a8a5 ], [ %t243, %block_0_40a91a ], [ %t610, %block_0_40aa0a ]
  %t269 = phi i64 [ %t41, %block_0_40a8a5 ], [ %t244, %block_0_40a91a ], [ %t611, %block_0_40aa0a ]
  %t270 = phi i64 [ %t42, %block_0_40a8a5 ], [ %t245, %block_0_40a91a ], [ %t612, %block_0_40aa0a ]
  %t271 = phi i512 [ %t43, %block_0_40a8a5 ], [ %t246, %block_0_40a91a ], [ %t613, %block_0_40aa0a ]
  %t272 = phi i512 [ %t44, %block_0_40a8a5 ], [ %t247, %block_0_40a91a ], [ %t614, %block_0_40aa0a ]
  %t273 = phi i512 [ %t45, %block_0_40a8a5 ], [ %t248, %block_0_40a91a ], [ %t615, %block_0_40aa0a ]
  %t274 = phi i512 [ %t46, %block_0_40a8a5 ], [ %t249, %block_0_40a91a ], [ %t616, %block_0_40aa0a ]
  %t275 = phi i512 [ %t47, %block_0_40a8a5 ], [ %t250, %block_0_40a91a ], [ %t617, %block_0_40aa0a ]
  %t276 = phi i512 [ %t48, %block_0_40a8a5 ], [ %t251, %block_0_40a91a ], [ %t618, %block_0_40aa0a ]
  %t277 = phi i512 [ %t49, %block_0_40a8a5 ], [ %t252, %block_0_40a91a ], [ %t619, %block_0_40aa0a ]
  %t278 = phi i512 [ %t50, %block_0_40a8a5 ], [ %t253, %block_0_40a91a ], [ %t620, %block_0_40aa0a ]
  ; r266 := (bv_add r254 (0x8 : bv 64))
  %t279 = add i64 %t267, 8
  ; r267 := (read r266 (bv 32))
  %t280 = inttoptr i64 %t279 to i32*
  %t281 = load i32, i32* %t280
  ; r268 := (read r257 (bv 64))
  %t282 = inttoptr i64 %t270 to i64*
  %t283 = load i64, i64* %t282
  ; r269 := (read (0x6356e8 : bv 64) (bv 32))
  %t284 = inttoptr i64 6510312 to i32*
  %t285 = load i32, i32* %t284
  ; r270 := (sext r267 64)
  %t286 = sext i32 %t281 to i64
  ; r271 := (bv_add r267 (0x1 : bv 32))
  %t287 = add i32 %t281, 1
  ; r272 := (uext r271 64)
  %t288 = zext i32 %t287 to i64
  ; r273 := (bv_shl r270 (0x5 : bv 64))
  %t289 = shl i64 %t286, 5
  ; r274 := (bv_add r273 r254)
  %t290 = add i64 %t289, %t267
  ; r275 := (bv_add r274 (0x10 : bv 64))
  %t291 = add i64 %t290, 16
  ; write r275 r268
  %t292 = inttoptr i64 %t291 to i64*
  store i64 %t283, i64* %t292
  ; r276 := (bv_add r257 (0x8 : bv 64))
  %t293 = add i64 %t270, 8
  ; r277 := (read r276 (bv 64))
  %t294 = inttoptr i64 %t293 to i64*
  %t295 = load i64, i64* %t294
  ; r278 := (bv_add r274 (0x18 : bv 64))
  %t296 = add i64 %t290, 24
  ; write r278 r277
  %t297 = inttoptr i64 %t296 to i64*
  store i64 %t295, i64* %t297
  ; r279 := (bv_add r257 (0x10 : bv 64))
  %t298 = add i64 %t270, 16
  ; r280 := (read r279 (bv 64))
  %t299 = inttoptr i64 %t298 to i64*
  %t300 = load i64, i64* %t299
  ; r281 := (bv_add r274 (0x20 : bv 64))
  %t301 = add i64 %t290, 32
  ; write r281 r280
  %t302 = inttoptr i64 %t301 to i64*
  store i64 %t300, i64* %t302
  ; r282 := (bv_add r257 (0x18 : bv 64))
  %t303 = add i64 %t270, 24
  ; r283 := (read r282 (bv 64))
  %t304 = inttoptr i64 %t303 to i64*
  %t305 = load i64, i64* %t304
  ; write r266 r271
  %t306 = inttoptr i64 %t279 to i32*
  store i32 %t287, i32* %t306
  ; r284 := (bv_add r274 (0x28 : bv 64))
  %t307 = add i64 %t290, 40
  ; write r284 r283
  %t308 = inttoptr i64 %t307 to i64*
  store i64 %t305, i64* %t308
  ; r285 := (eq r269 (0x0 : bv 32))
  %t309 = icmp eq i32 %t285, 0
  br i1 %t309, label %block_0_40a96f, label %block_0_40a9d5
block_0_40a96f:
  %t310 = phi i64 [ 0, %block_0_40a927 ]
  %t311 = phi i64 [ %t283, %block_0_40a927 ]
  %t312 = phi i512 [ %t271, %block_0_40a927 ]
  ; r289 := (bitcast r288 (vec 8 double))
  %t313 = bitcast i512 %t312 to <8 x double>
  ; r290 := (tuple r286 r287 r289)
  %t314 = insertvalue { i64, i64, <8 x double> } undef, i64 %t310, 0
  %t315 = insertvalue { i64, i64, <8 x double> } %t314, i64 %t311, 1
  %t316 = insertvalue { i64, i64, <8 x double> } %t315, <8 x double> %t313, 2
  ret { i64, i64, <8 x double> } %t316
block_0_40a974:
  %t317 = phi i64 [ %t75, %block_0_40a8b0 ]
  %t318 = phi i64 [ %t76, %block_0_40a8b0 ]
  %t319 = phi i64 [ %t92, %block_0_40a8b0 ]
  %t320 = phi i64 [ %t77, %block_0_40a8b0 ]
  %t321 = phi i64 [ %t78, %block_0_40a8b0 ]
  %t322 = phi i64 [ %t79, %block_0_40a8b0 ]
  %t323 = phi i64 [ %t80, %block_0_40a8b0 ]
  %t324 = phi i512 [ %t81, %block_0_40a8b0 ]
  %t325 = phi i512 [ %t82, %block_0_40a8b0 ]
  %t326 = phi i512 [ %t83, %block_0_40a8b0 ]
  %t327 = phi i512 [ %t84, %block_0_40a8b0 ]
  %t328 = phi i512 [ %t85, %block_0_40a8b0 ]
  %t329 = phi i512 [ %t86, %block_0_40a8b0 ]
  %t330 = phi i512 [ %t87, %block_0_40a8b0 ]
  %t331 = phi i512 [ %t88, %block_0_40a8b0 ]
  ; r306 := (bitcast r298 (vec 8 double))
  %t332 = bitcast i512 %t324 to <8 x double>
  ; r307 := (bitcast r299 (vec 8 double))
  %t333 = bitcast i512 %t325 to <8 x double>
  ; r308 := (bitcast r300 (vec 8 double))
  %t334 = bitcast i512 %t326 to <8 x double>
  ; r309 := (bitcast r301 (vec 8 double))
  %t335 = bitcast i512 %t327 to <8 x double>
  ; r310 := (bitcast r302 (vec 8 double))
  %t336 = bitcast i512 %t328 to <8 x double>
  ; r311 := (bitcast r303 (vec 8 double))
  %t337 = bitcast i512 %t329 to <8 x double>
  ; r312 := (bitcast r304 (vec 8 double))
  %t338 = bitcast i512 %t330 to <8 x double>
  ; r313 := (bitcast r305 (vec 8 double))
  %t339 = bitcast i512 %t331 to <8 x double>
  ; r314 := call pthread_mutex_unlock_int((0x635760 : bv 64), r294, r292, r291, r295, r296, r306, r307, r308, r309, r310, r311, r312, r313)
  %t340 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510432, i64 %t320, i64 %t318, i64 %t317, i64 %t321, i64 %t322, <8 x double> %t332, <8 x double> %t333, <8 x double> %t334, <8 x double> %t335, <8 x double> %t336, <8 x double> %t337, <8 x double> %t338, <8 x double> %t339)
  ; r315 := (tuple_field r314 0)
  %t341 = extractvalue { i64, i64, <8 x double> } %t340, 0
  ; r316 := (tuple_field r314 1)
  %t342 = extractvalue { i64, i64, <8 x double> } %t340, 1
  ; r317 := (tuple_field r314 2)
  %t343 = extractvalue { i64, i64, <8 x double> } %t340, 2
  ; r318 := (bitcast r317 (bv 512))
  %t344 = bitcast <8 x double> %t343 to i512
  br label %block_0_40a97e
block_0_40a97e:
  %t345 = phi i64 [ %t317, %block_0_40a974 ]
  %t346 = phi i64 [ %t342, %block_0_40a974 ]
  %t347 = phi i64 [ %t319, %block_0_40a974 ]
  %t348 = phi i64 [ %t320, %block_0_40a974 ]
  %t349 = phi i64 [ %t321, %block_0_40a974 ]
  %t350 = phi i64 [ %t322, %block_0_40a974 ]
  %t351 = phi i64 [ %t323, %block_0_40a974 ]
  %t352 = phi i512 [ %t344, %block_0_40a974 ]
  %t353 = phi i512 [ %t325, %block_0_40a974 ]
  %t354 = phi i512 [ %t326, %block_0_40a974 ]
  %t355 = phi i512 [ %t327, %block_0_40a974 ]
  %t356 = phi i512 [ %t328, %block_0_40a974 ]
  %t357 = phi i512 [ %t329, %block_0_40a974 ]
  %t358 = phi i512 [ %t330, %block_0_40a974 ]
  %t359 = phi i512 [ %t331, %block_0_40a974 ]
  br label %block_0_40a8c5
block_0_40a983:
  %t360 = phi i64 [ %t140, %block_0_40a8db ]
  %t361 = phi i64 [ %t141, %block_0_40a8db ]
  %t362 = phi i64 [ %t139, %block_0_40a8db ]
  %t363 = phi i64 [ %t142, %block_0_40a8db ]
  %t364 = phi i64 [ %t143, %block_0_40a8db ]
  %t365 = phi i64 [ %t144, %block_0_40a8db ]
  %t366 = phi i64 [ %t145, %block_0_40a8db ]
  %t367 = phi i64 [ %t146, %block_0_40a8db ]
  %t368 = phi i512 [ %t147, %block_0_40a8db ]
  %t369 = phi i512 [ %t148, %block_0_40a8db ]
  %t370 = phi i512 [ %t149, %block_0_40a8db ]
  %t371 = phi i512 [ %t150, %block_0_40a8db ]
  %t372 = phi i512 [ %t151, %block_0_40a8db ]
  %t373 = phi i512 [ %t152, %block_0_40a8db ]
  %t374 = phi i512 [ %t153, %block_0_40a8db ]
  %t375 = phi i512 [ %t154, %block_0_40a8db ]
  ; r350 := (bitcast r342 (vec 8 double))
  %t376 = bitcast i512 %t368 to <8 x double>
  ; r351 := (bitcast r343 (vec 8 double))
  %t377 = bitcast i512 %t369 to <8 x double>
  ; r352 := (bitcast r344 (vec 8 double))
  %t378 = bitcast i512 %t370 to <8 x double>
  ; r353 := (bitcast r345 (vec 8 double))
  %t379 = bitcast i512 %t371 to <8 x double>
  ; r354 := (bitcast r346 (vec 8 double))
  %t380 = bitcast i512 %t372 to <8 x double>
  ; r355 := (bitcast r347 (vec 8 double))
  %t381 = bitcast i512 %t373 to <8 x double>
  ; r356 := (bitcast r348 (vec 8 double))
  %t382 = bitcast i512 %t374 to <8 x double>
  ; r357 := (bitcast r349 (vec 8 double))
  %t383 = bitcast i512 %t375 to <8 x double>
  ; r358 := call pthread_mutex_lock_int((0x635760 : bv 64), r338, r335, r334, r339, r340, r350, r351, r352, r353, r354, r355, r356, r357)
  %t384 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510432, i64 %t364, i64 %t361, i64 %t360, i64 %t365, i64 %t366, <8 x double> %t376, <8 x double> %t377, <8 x double> %t378, <8 x double> %t379, <8 x double> %t380, <8 x double> %t381, <8 x double> %t382, <8 x double> %t383)
  ; r359 := (tuple_field r358 0)
  %t385 = extractvalue { i64, i64, <8 x double> } %t384, 0
  ; r360 := (tuple_field r358 1)
  %t386 = extractvalue { i64, i64, <8 x double> } %t384, 1
  ; r361 := (tuple_field r358 2)
  %t387 = extractvalue { i64, i64, <8 x double> } %t384, 2
  ; r362 := (bitcast r361 (bv 512))
  %t388 = bitcast <8 x double> %t387 to i512
  br label %block_0_40a98d
block_0_40a98d:
  %t389 = phi i64 [ %t360, %block_0_40a983 ]
  %t390 = phi i64 [ %t386, %block_0_40a983 ]
  %t391 = phi i64 [ %t362, %block_0_40a983 ]
  %t392 = phi i64 [ %t363, %block_0_40a983 ]
  %t393 = phi i64 [ %t364, %block_0_40a983 ]
  %t394 = phi i64 [ %t365, %block_0_40a983 ]
  %t395 = phi i64 [ %t366, %block_0_40a983 ]
  %t396 = phi i64 [ %t367, %block_0_40a983 ]
  %t397 = phi i512 [ %t388, %block_0_40a983 ]
  %t398 = phi i512 [ %t369, %block_0_40a983 ]
  %t399 = phi i512 [ %t370, %block_0_40a983 ]
  %t400 = phi i512 [ %t371, %block_0_40a983 ]
  %t401 = phi i512 [ %t372, %block_0_40a983 ]
  %t402 = phi i512 [ %t373, %block_0_40a983 ]
  %t403 = phi i512 [ %t374, %block_0_40a983 ]
  %t404 = phi i512 [ %t375, %block_0_40a983 ]
  ; r379 := (read (0x635b90 : bv 64) (bv 64))
  %t405 = inttoptr i64 6511504 to i64*
  %t406 = load i64, i64* %t405
  ; r380 := (eq r366 r379)
  %t407 = icmp eq i64 %t392, %t406
  br i1 %t407, label %block_0_40a99a, label %block_0_40a8f6
block_0_40a99a:
  %t408 = phi i64 [ %t389, %block_0_40a98d ]
  %t409 = phi i64 [ %t390, %block_0_40a98d ]
  %t410 = phi i64 [ %t391, %block_0_40a98d ]
  %t411 = phi i64 [ %t392, %block_0_40a98d ]
  %t412 = phi i64 [ %t393, %block_0_40a98d ]
  %t413 = phi i64 [ %t394, %block_0_40a98d ]
  %t414 = phi i64 [ %t395, %block_0_40a98d ]
  %t415 = phi i64 [ %t396, %block_0_40a98d ]
  %t416 = phi i512 [ %t397, %block_0_40a98d ]
  %t417 = phi i512 [ %t398, %block_0_40a98d ]
  %t418 = phi i512 [ %t399, %block_0_40a98d ]
  %t419 = phi i512 [ %t400, %block_0_40a98d ]
  %t420 = phi i512 [ %t401, %block_0_40a98d ]
  %t421 = phi i512 [ %t402, %block_0_40a98d ]
  %t422 = phi i512 [ %t403, %block_0_40a98d ]
  %t423 = phi i512 [ %t404, %block_0_40a98d ]
  br label %block_0_40a9a0
block_0_40a9a0:
  %t424 = phi i64 [ %t158, %block_0_40a8e9 ], [ %t408, %block_0_40a99a ]
  %t425 = phi i64 [ %t159, %block_0_40a8e9 ], [ %t409, %block_0_40a99a ]
  %t426 = phi i64 [ %t160, %block_0_40a8e9 ], [ %t410, %block_0_40a99a ]
  %t427 = phi i64 [ %t161, %block_0_40a8e9 ], [ %t411, %block_0_40a99a ]
  %t428 = phi i64 [ %t162, %block_0_40a8e9 ], [ %t412, %block_0_40a99a ]
  %t429 = phi i64 [ %t163, %block_0_40a8e9 ], [ %t413, %block_0_40a99a ]
  %t430 = phi i64 [ %t164, %block_0_40a8e9 ], [ %t414, %block_0_40a99a ]
  %t431 = phi i64 [ %t165, %block_0_40a8e9 ], [ %t415, %block_0_40a99a ]
  %t432 = phi i512 [ %t166, %block_0_40a8e9 ], [ %t416, %block_0_40a99a ]
  %t433 = phi i512 [ %t167, %block_0_40a8e9 ], [ %t417, %block_0_40a99a ]
  %t434 = phi i512 [ %t168, %block_0_40a8e9 ], [ %t418, %block_0_40a99a ]
  %t435 = phi i512 [ %t169, %block_0_40a8e9 ], [ %t419, %block_0_40a99a ]
  %t436 = phi i512 [ %t170, %block_0_40a8e9 ], [ %t420, %block_0_40a99a ]
  %t437 = phi i512 [ %t171, %block_0_40a8e9 ], [ %t421, %block_0_40a99a ]
  %t438 = phi i512 [ %t172, %block_0_40a8e9 ], [ %t422, %block_0_40a99a ]
  %t439 = phi i512 [ %t173, %block_0_40a8e9 ], [ %t423, %block_0_40a99a ]
  ; write r399 r400
  %t440 = inttoptr i64 %t426 to i64*
  store i64 %t427, i64* %t440
  ; r413 := (bv_add r399 (0x8 : bv 64))
  %t441 = add i64 %t426, 8
  ; write r413 (0x0 : bv 32)
  %t442 = inttoptr i64 %t441 to i32*
  store i32 0, i32* %t442
  ; write (0x635b90 : bv 64) r399
  %t443 = inttoptr i64 6511504 to i64*
  store i64 %t426, i64* %t443
  br label %block_0_40a8a5
block_0_40a9b6:
  %t444 = phi i64 [ %t223, %block_0_40a90c ]
  %t445 = phi i64 [ %t224, %block_0_40a90c ]
  %t446 = phi i64 [ %t225, %block_0_40a90c ]
  %t447 = phi i64 [ %t226, %block_0_40a90c ]
  %t448 = phi i64 [ %t227, %block_0_40a90c ]
  %t449 = phi i64 [ %t228, %block_0_40a90c ]
  %t450 = phi i512 [ %t229, %block_0_40a90c ]
  %t451 = phi i512 [ %t230, %block_0_40a90c ]
  %t452 = phi i512 [ %t231, %block_0_40a90c ]
  %t453 = phi i512 [ %t232, %block_0_40a90c ]
  %t454 = phi i512 [ %t233, %block_0_40a90c ]
  %t455 = phi i512 [ %t234, %block_0_40a90c ]
  %t456 = phi i512 [ %t235, %block_0_40a90c ]
  %t457 = phi i512 [ %t236, %block_0_40a90c ]
  ; r428 := (bitcast r420 (vec 8 double))
  %t458 = bitcast i512 %t450 to <8 x double>
  ; r429 := (bitcast r421 (vec 8 double))
  %t459 = bitcast i512 %t451 to <8 x double>
  ; r430 := (bitcast r422 (vec 8 double))
  %t460 = bitcast i512 %t452 to <8 x double>
  ; r431 := (bitcast r423 (vec 8 double))
  %t461 = bitcast i512 %t453 to <8 x double>
  ; r432 := (bitcast r424 (vec 8 double))
  %t462 = bitcast i512 %t454 to <8 x double>
  ; r433 := (bitcast r425 (vec 8 double))
  %t463 = bitcast i512 %t455 to <8 x double>
  ; r434 := (bitcast r426 (vec 8 double))
  %t464 = bitcast i512 %t456 to <8 x double>
  ; r435 := (bitcast r427 (vec 8 double))
  %t465 = bitcast i512 %t457 to <8 x double>
  ; r436 := call pthread_mutex_lock_int((0x635760 : bv 64), r416, r415, r414, r417, r418, r428, r429, r430, r431, r432, r433, r434, r435)
  %t466 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510432, i64 %t446, i64 %t445, i64 %t444, i64 %t447, i64 %t448, <8 x double> %t458, <8 x double> %t459, <8 x double> %t460, <8 x double> %t461, <8 x double> %t462, <8 x double> %t463, <8 x double> %t464, <8 x double> %t465)
  ; r437 := (tuple_field r436 0)
  %t467 = extractvalue { i64, i64, <8 x double> } %t466, 0
  ; r438 := (tuple_field r436 1)
  %t468 = extractvalue { i64, i64, <8 x double> } %t466, 1
  ; r439 := (tuple_field r436 2)
  %t469 = extractvalue { i64, i64, <8 x double> } %t466, 2
  ; r440 := (bitcast r439 (bv 512))
  %t470 = bitcast <8 x double> %t469 to i512
  br label %block_0_40a9c0
block_0_40a9c0:
  %t471 = phi i64 [ %t444, %block_0_40a9b6 ]
  %t472 = phi i64 [ %t468, %block_0_40a9b6 ]
  %t473 = phi i64 [ %t446, %block_0_40a9b6 ]
  %t474 = phi i64 [ %t447, %block_0_40a9b6 ]
  %t475 = phi i64 [ %t448, %block_0_40a9b6 ]
  %t476 = phi i64 [ %t449, %block_0_40a9b6 ]
  %t477 = phi i512 [ %t470, %block_0_40a9b6 ]
  %t478 = phi i512 [ %t451, %block_0_40a9b6 ]
  %t479 = phi i512 [ %t452, %block_0_40a9b6 ]
  %t480 = phi i512 [ %t453, %block_0_40a9b6 ]
  %t481 = phi i512 [ %t454, %block_0_40a9b6 ]
  %t482 = phi i512 [ %t455, %block_0_40a9b6 ]
  %t483 = phi i512 [ %t456, %block_0_40a9b6 ]
  %t484 = phi i512 [ %t457, %block_0_40a9b6 ]
  br label %block_0_40a91a
block_0_40a9c5:
  %t485 = phi i64 [ %t177, %block_0_40a8f6 ]
  %t486 = phi i64 [ %t178, %block_0_40a8f6 ]
  %t487 = phi i64 [ %t179, %block_0_40a8f6 ]
  %t488 = phi i64 [ %t180, %block_0_40a8f6 ]
  %t489 = phi i64 [ %t181, %block_0_40a8f6 ]
  %t490 = phi i64 [ %t182, %block_0_40a8f6 ]
  %t491 = phi i64 [ %t183, %block_0_40a8f6 ]
  %t492 = phi i512 [ %t184, %block_0_40a8f6 ]
  %t493 = phi i512 [ %t185, %block_0_40a8f6 ]
  %t494 = phi i512 [ %t186, %block_0_40a8f6 ]
  %t495 = phi i512 [ %t187, %block_0_40a8f6 ]
  %t496 = phi i512 [ %t188, %block_0_40a8f6 ]
  %t497 = phi i512 [ %t189, %block_0_40a8f6 ]
  %t498 = phi i512 [ %t190, %block_0_40a8f6 ]
  %t499 = phi i512 [ %t191, %block_0_40a8f6 ]
  ; r470 := (bitcast r462 (vec 8 double))
  %t500 = bitcast i512 %t492 to <8 x double>
  ; r471 := (bitcast r463 (vec 8 double))
  %t501 = bitcast i512 %t493 to <8 x double>
  ; r472 := (bitcast r464 (vec 8 double))
  %t502 = bitcast i512 %t494 to <8 x double>
  ; r473 := (bitcast r465 (vec 8 double))
  %t503 = bitcast i512 %t495 to <8 x double>
  ; r474 := (bitcast r466 (vec 8 double))
  %t504 = bitcast i512 %t496 to <8 x double>
  ; r475 := (bitcast r467 (vec 8 double))
  %t505 = bitcast i512 %t497 to <8 x double>
  ; r476 := (bitcast r468 (vec 8 double))
  %t506 = bitcast i512 %t498 to <8 x double>
  ; r477 := (bitcast r469 (vec 8 double))
  %t507 = bitcast i512 %t499 to <8 x double>
  ; r478 := call pthread_mutex_unlock_int((0x635760 : bv 64), r458, r456, r455, r459, r460, r470, r471, r472, r473, r474, r475, r476, r477)
  %t508 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510432, i64 %t488, i64 %t486, i64 %t485, i64 %t489, i64 %t490, <8 x double> %t500, <8 x double> %t501, <8 x double> %t502, <8 x double> %t503, <8 x double> %t504, <8 x double> %t505, <8 x double> %t506, <8 x double> %t507)
  ; r479 := (tuple_field r478 0)
  %t509 = extractvalue { i64, i64, <8 x double> } %t508, 0
  ; r480 := (tuple_field r478 1)
  %t510 = extractvalue { i64, i64, <8 x double> } %t508, 1
  ; r481 := (tuple_field r478 2)
  %t511 = extractvalue { i64, i64, <8 x double> } %t508, 2
  ; r482 := (bitcast r481 (bv 512))
  %t512 = bitcast <8 x double> %t511 to i512
  br label %block_0_40a9cf
block_0_40a9cf:
  %t513 = phi i64 [ %t485, %block_0_40a9c5 ]
  %t514 = phi i64 [ %t510, %block_0_40a9c5 ]
  %t515 = phi i64 [ %t487, %block_0_40a9c5 ]
  %t516 = phi i64 [ %t488, %block_0_40a9c5 ]
  %t517 = phi i64 [ %t489, %block_0_40a9c5 ]
  %t518 = phi i64 [ %t490, %block_0_40a9c5 ]
  %t519 = phi i64 [ %t491, %block_0_40a9c5 ]
  %t520 = phi i512 [ %t512, %block_0_40a9c5 ]
  %t521 = phi i512 [ %t493, %block_0_40a9c5 ]
  %t522 = phi i512 [ %t494, %block_0_40a9c5 ]
  %t523 = phi i512 [ %t495, %block_0_40a9c5 ]
  %t524 = phi i512 [ %t496, %block_0_40a9c5 ]
  %t525 = phi i512 [ %t497, %block_0_40a9c5 ]
  %t526 = phi i512 [ %t498, %block_0_40a9c5 ]
  %t527 = phi i512 [ %t499, %block_0_40a9c5 ]
  br label %block_0_40a904
block_0_40a9d5:
  %t528 = phi i64 [ %t291, %block_0_40a927 ]
  %t529 = phi i64 [ %t283, %block_0_40a927 ]
  %t530 = phi i64 [ %t288, %block_0_40a927 ]
  %t531 = phi i64 [ %t268, %block_0_40a927 ]
  %t532 = phi i64 [ %t269, %block_0_40a927 ]
  %t533 = phi i512 [ %t271, %block_0_40a927 ]
  %t534 = phi i512 [ %t272, %block_0_40a927 ]
  %t535 = phi i512 [ %t273, %block_0_40a927 ]
  %t536 = phi i512 [ %t274, %block_0_40a927 ]
  %t537 = phi i512 [ %t275, %block_0_40a927 ]
  %t538 = phi i512 [ %t276, %block_0_40a927 ]
  %t539 = phi i512 [ %t277, %block_0_40a927 ]
  %t540 = phi i512 [ %t278, %block_0_40a927 ]
  ; r511 := (bitcast r503 (vec 8 double))
  %t541 = bitcast i512 %t533 to <8 x double>
  ; r512 := (bitcast r504 (vec 8 double))
  %t542 = bitcast i512 %t534 to <8 x double>
  ; r513 := (bitcast r505 (vec 8 double))
  %t543 = bitcast i512 %t535 to <8 x double>
  ; r514 := (bitcast r506 (vec 8 double))
  %t544 = bitcast i512 %t536 to <8 x double>
  ; r515 := (bitcast r507 (vec 8 double))
  %t545 = bitcast i512 %t537 to <8 x double>
  ; r516 := (bitcast r508 (vec 8 double))
  %t546 = bitcast i512 %t538 to <8 x double>
  ; r517 := (bitcast r509 (vec 8 double))
  %t547 = bitcast i512 %t539 to <8 x double>
  ; r518 := (bitcast r510 (vec 8 double))
  %t548 = bitcast i512 %t540 to <8 x double>
  ; r519 := call pthread_mutex_unlock_int((0x635760 : bv 64), r500, r499, r498, r501, r502, r511, r512, r513, r514, r515, r516, r517, r518)
  %t549 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6510432, i64 %t530, i64 %t529, i64 %t528, i64 %t531, i64 %t532, <8 x double> %t541, <8 x double> %t542, <8 x double> %t543, <8 x double> %t544, <8 x double> %t545, <8 x double> %t546, <8 x double> %t547, <8 x double> %t548)
  ; r520 := (tuple_field r519 0)
  %t550 = extractvalue { i64, i64, <8 x double> } %t549, 0
  ; r521 := (tuple_field r519 1)
  %t551 = extractvalue { i64, i64, <8 x double> } %t549, 1
  ; r522 := (tuple_field r519 2)
  %t552 = extractvalue { i64, i64, <8 x double> } %t549, 2
  ; r523 := (bitcast r522 (bv 512))
  %t553 = bitcast <8 x double> %t552 to i512
  br label %block_0_40a9df
block_0_40a9df:
  %t554 = phi i64 [ %t551, %block_0_40a9d5 ]
  %t555 = phi i512 [ %t553, %block_0_40a9d5 ]
  ; r526 := (bitcast r525 (vec 8 double))
  %t556 = bitcast i512 %t555 to <8 x double>
  ; r527 := (tuple (0x0 : bv 64) r524 r526)
  %t557 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t558 = insertvalue { i64, i64, <8 x double> } %t557, i64 %t554, 1
  %t559 = insertvalue { i64, i64, <8 x double> } %t558, <8 x double> %t556, 2
  ret { i64, i64, <8 x double> } %t559
block_0_40a9e6:
  %t560 = phi i64 [ %t124, %block_0_40a8cf ]
  %t561 = phi i512 [ %t130, %block_0_40a8cf ]
  ; r530 := (bitcast r529 (vec 8 double))
  %t562 = bitcast i512 %t561 to <8 x double>
  ; r531 := (tuple (0xffffffff : bv 64) r528 r530)
  %t563 = insertvalue { i64, i64, <8 x double> } undef, i64 4294967295, 0
  %t564 = insertvalue { i64, i64, <8 x double> } %t563, i64 %t560, 1
  %t565 = insertvalue { i64, i64, <8 x double> } %t564, <8 x double> %t562, 2
  ret { i64, i64, <8 x double> } %t565
block_0_40a9f0:
  %t566 = phi i64 [ %arg3, %block_0_40a880 ]
  %t567 = phi i64 [ %arg2, %block_0_40a880 ]
  %t568 = phi i64 [ %arg1, %block_0_40a880 ]
  %t569 = phi i64 [ %arg0, %block_0_40a880 ]
  %t570 = phi i64 [ %arg4, %block_0_40a880 ]
  %t571 = phi i64 [ %arg5, %block_0_40a880 ]
  %t572 = phi i512 [ %t11, %block_0_40a880 ]
  %t573 = phi i512 [ %t12, %block_0_40a880 ]
  %t574 = phi i512 [ %t13, %block_0_40a880 ]
  %t575 = phi i512 [ %t14, %block_0_40a880 ]
  %t576 = phi i512 [ %t15, %block_0_40a880 ]
  %t577 = phi i512 [ %t16, %block_0_40a880 ]
  %t578 = phi i512 [ %t17, %block_0_40a880 ]
  %t579 = phi i512 [ %t18, %block_0_40a880 ]
  ; r546 := (bitcast r538 (vec 8 double))
  %t580 = bitcast i512 %t572 to <8 x double>
  ; r547 := (bitcast r539 (vec 8 double))
  %t581 = bitcast i512 %t573 to <8 x double>
  ; r548 := (bitcast r540 (vec 8 double))
  %t582 = bitcast i512 %t574 to <8 x double>
  ; r549 := (bitcast r541 (vec 8 double))
  %t583 = bitcast i512 %t575 to <8 x double>
  ; r550 := (bitcast r542 (vec 8 double))
  %t584 = bitcast i512 %t576 to <8 x double>
  ; r551 := (bitcast r543 (vec 8 double))
  %t585 = bitcast i512 %t577 to <8 x double>
  ; r552 := (bitcast r544 (vec 8 double))
  %t586 = bitcast i512 %t578 to <8 x double>
  ; r553 := (bitcast r545 (vec 8 double))
  %t587 = bitcast i512 %t579 to <8 x double>
  ; r554 := call pthread_mutex_lock_int((0x635760 : bv 64), r534, r533, r532, r536, r537, r546, r547, r548, r549, r550, r551, r552, r553)
  %t588 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6510432, i64 %t568, i64 %t567, i64 %t566, i64 %t570, i64 %t571, <8 x double> %t580, <8 x double> %t581, <8 x double> %t582, <8 x double> %t583, <8 x double> %t584, <8 x double> %t585, <8 x double> %t586, <8 x double> %t587)
  ; r555 := (tuple_field r554 0)
  %t589 = extractvalue { i64, i64, <8 x double> } %t588, 0
  ; r556 := (tuple_field r554 1)
  %t590 = extractvalue { i64, i64, <8 x double> } %t588, 1
  ; r557 := (tuple_field r554 2)
  %t591 = extractvalue { i64, i64, <8 x double> } %t588, 2
  ; r558 := (bitcast r557 (bv 512))
  %t592 = bitcast <8 x double> %t591 to i512
  br label %block_0_40a9fa
block_0_40a9fa:
  %t593 = phi i64 [ %t566, %block_0_40a9f0 ]
  %t594 = phi i64 [ %t590, %block_0_40a9f0 ]
  %t595 = phi i64 [ %t568, %block_0_40a9f0 ]
  %t596 = phi i64 [ %t570, %block_0_40a9f0 ]
  %t597 = phi i64 [ %t571, %block_0_40a9f0 ]
  %t598 = phi i64 [ %t569, %block_0_40a9f0 ]
  %t599 = phi i512 [ %t592, %block_0_40a9f0 ]
  %t600 = phi i512 [ %t573, %block_0_40a9f0 ]
  %t601 = phi i512 [ %t574, %block_0_40a9f0 ]
  %t602 = phi i512 [ %t575, %block_0_40a9f0 ]
  %t603 = phi i512 [ %t576, %block_0_40a9f0 ]
  %t604 = phi i512 [ %t577, %block_0_40a9f0 ]
  %t605 = phi i512 [ %t578, %block_0_40a9f0 ]
  %t606 = phi i512 [ %t579, %block_0_40a9f0 ]
  ; r573 := (read (0x635b90 : bv 64) (bv 64))
  %t607 = inttoptr i64 6511504 to i64*
  %t608 = load i64, i64* %t607
  ; r574 := (eq r573 (0x0 : bv 64))
  %t609 = icmp eq i64 %t608, 0
  br i1 %t609, label %block_0_40aa0a, label %block_0_40a8a5
block_0_40aa0a:
  %t610 = phi i64 [ %t23, %block_0_40a895 ], [ %t596, %block_0_40a9fa ]
  %t611 = phi i64 [ %t24, %block_0_40a895 ], [ %t597, %block_0_40a9fa ]
  %t612 = phi i64 [ %t22, %block_0_40a895 ], [ %t598, %block_0_40a9fa ]
  %t613 = phi i512 [ %t25, %block_0_40a895 ], [ %t599, %block_0_40a9fa ]
  %t614 = phi i512 [ %t26, %block_0_40a895 ], [ %t600, %block_0_40a9fa ]
  %t615 = phi i512 [ %t27, %block_0_40a895 ], [ %t601, %block_0_40a9fa ]
  %t616 = phi i512 [ %t28, %block_0_40a895 ], [ %t602, %block_0_40a9fa ]
  %t617 = phi i512 [ %t29, %block_0_40a895 ], [ %t603, %block_0_40a9fa ]
  %t618 = phi i512 [ %t30, %block_0_40a895 ], [ %t604, %block_0_40a9fa ]
  %t619 = phi i512 [ %t31, %block_0_40a895 ], [ %t605, %block_0_40a9fa ]
  %t620 = phi i512 [ %t32, %block_0_40a895 ], [ %t606, %block_0_40a9fa ]
  ; write (0x635b90 : bv 64) (0x635780 : bv 64)
  %t621 = inttoptr i64 6511504 to i64*
  store i64 6510464, i64* %t621
  br label %block_0_40a927
}
define { i64, i64, <8 x double> } @detzcode(i64 %arg0, <8 x double> %arg1) {
block_0_40aa80:
  ; r0 := (read arg0 (bv 8))
  %t0 = inttoptr i64 %arg0 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (sext r0 64)
  %t2 = sext i8 %t1 to i64
  ; r2 := (bv_sar r1 (0x3f : bv 64))
  %t3 = ashr i64 %t2, 63
  ; r3 := (bitcast arg1 (bv 512))
  %t4 = bitcast <8 x double> %arg1 to i512
  br label %block_0_40aa90
block_0_40aa90:
  %t5 = phi i64 [ 0, %block_0_40aa80 ], [ %t14, %block_0_40aa90 ]
  %t6 = phi i64 [ %t3, %block_0_40aa80 ], [ %t15, %block_0_40aa90 ]
  %t7 = phi i64 [ %arg0, %block_0_40aa80 ], [ %t7, %block_0_40aa90 ]
  %t8 = phi i512 [ %t4, %block_0_40aa80 ], [ %t8, %block_0_40aa90 ]
  ; r8 := (bv_add r4 r6)
  %t9 = add i64 %t5, %t7
  ; r9 := (read r8 (bv 8))
  %t10 = inttoptr i64 %t9 to i8*
  %t11 = load i8, i8* %t10
  ; r10 := (uext r9 64)
  %t12 = zext i8 %t11 to i64
  ; r11 := (bv_shl r5 (0x8 : bv 64))
  %t13 = shl i64 %t6, 8
  ; r12 := (bv_add r4 (0x1 : bv 64))
  %t14 = add i64 %t5, 1
  ; r13 := (bv_or r11 r10)
  %t15 = or i64 %t13, %t12
  ; r14 := (eq r4 (0x3 : bv 64))
  %t16 = icmp eq i64 %t5, 3
  br i1 %t16, label %block_0_40aaa5, label %block_0_40aa90
block_0_40aaa5:
  %t17 = phi i64 [ %t15, %block_0_40aa90 ]
  %t18 = phi i512 [ %t8, %block_0_40aa90 ]
  ; r17 := (bitcast r16 (vec 8 double))
  %t19 = bitcast i512 %t18 to <8 x double>
  ; r18 := (tuple r15 r15 r17)
  %t20 = insertvalue { i64, i64, <8 x double> } undef, i64 %t17, 0
  %t21 = insertvalue { i64, i64, <8 x double> } %t20, i64 %t17, 1
  %t22 = insertvalue { i64, i64, <8 x double> } %t21, <8 x double> %t19, 2
  ret { i64, i64, <8 x double> } %t22
}
define { i64, i64, <8 x double> } @detzcode64(i64 %arg0, <8 x double> %arg1) {
block_0_40aab0:
  ; r0 := (read arg0 (bv 8))
  %t0 = inttoptr i64 %arg0 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (sext r0 64)
  %t2 = sext i8 %t1 to i64
  ; r2 := (bv_sar r1 (0x3f : bv 64))
  %t3 = ashr i64 %t2, 63
  ; r3 := (bitcast arg1 (bv 512))
  %t4 = bitcast <8 x double> %arg1 to i512
  br label %block_0_40aac0
block_0_40aac0:
  %t5 = phi i64 [ %t3, %block_0_40aab0 ], [ %t16, %block_0_40aac0 ]
  %t6 = phi i64 [ 0, %block_0_40aab0 ], [ %t13, %block_0_40aac0 ]
  %t7 = phi i64 [ %arg0, %block_0_40aab0 ], [ %t7, %block_0_40aac0 ]
  %t8 = phi i512 [ %t4, %block_0_40aab0 ], [ %t8, %block_0_40aac0 ]
  ; r8 := (bv_add r5 r6)
  %t9 = add i64 %t6, %t7
  ; r9 := (read r8 (bv 8))
  %t10 = inttoptr i64 %t9 to i8*
  %t11 = load i8, i8* %t10
  ; r10 := (uext r9 64)
  %t12 = zext i8 %t11 to i64
  ; r11 := (bv_add r5 (0x1 : bv 64))
  %t13 = add i64 %t6, 1
  ; r12 := (bv_shl r4 (0x8 : bv 64))
  %t14 = shl i64 %t5, 8
  ; r13 := (eq r5 (0x7 : bv 64))
  %t15 = icmp eq i64 %t6, 7
  ; r14 := (bv_add r12 r10)
  %t16 = add i64 %t14, %t12
  br i1 %t15, label %block_0_40aad9, label %block_0_40aac0
block_0_40aad9:
  %t17 = phi i64 [ %t16, %block_0_40aac0 ]
  %t18 = phi i64 [ %t14, %block_0_40aac0 ]
  %t19 = phi i512 [ %t8, %block_0_40aac0 ]
  ; r18 := (bitcast r17 (vec 8 double))
  %t20 = bitcast i512 %t19 to <8 x double>
  ; r19 := (tuple r15 r16 r18)
  %t21 = insertvalue { i64, i64, <8 x double> } undef, i64 %t17, 0
  %t22 = insertvalue { i64, i64, <8 x double> } %t21, i64 %t18, 1
  %t23 = insertvalue { i64, i64, <8 x double> } %t22, <8 x double> %t20, 2
  ret { i64, i64, <8 x double> } %t23
}
define { i64, i64, <8 x double> } @differ_by_repeat(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40aae0:
  ; r0 := (bv_sub arg0 arg1)
  %t0 = sub i64 %arg0, %arg1
  ; r1 := (eq r0 (0x2f0605980 : bv 64))
  %t1 = icmp eq i64 %t0, 12622780800
  ; r2 := (mux r1 (0x1 : bv 8) (0x0 : bv 8))
  %t2 = select i1 %t1, i8 1, i8 0
  ; r3 := (uext r2 64)
  %t3 = zext i8 %t2 to i64
  ; r4 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (tuple r3 arg2 r5)
  %t6 = insertvalue { i64, i64, <8 x double> } undef, i64 %t3, 0
  %t7 = insertvalue { i64, i64, <8 x double> } %t6, i64 %arg2, 1
  %t8 = insertvalue { i64, i64, <8 x double> } %t7, <8 x double> %t5, 2
  ret { i64, i64, <8 x double> } %t8
}
define { i64, i64, <8 x double> } @getzname(i64 %arg0, <8 x double> %arg1) {
block_0_40ab00:
  ; r0 := (read arg0 (bv 8))
  %t0 = inttoptr i64 %arg0 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i8 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 8))
  %t3 = icmp eq i8 %t1, 0
  ; r3 := (bitcast arg1 (bv 512))
  %t4 = bitcast <8 x double> %arg1 to i512
  ; r4 := (bitcast arg1 (bv 512))
  %t5 = bitcast <8 x double> %arg1 to i512
  br i1 %t3, label %block_0_40ab12, label %block_0_40ab07
block_0_40ab07:
  %t6 = phi i64 [ %t2, %block_0_40ab00 ]
  %t7 = phi i64 [ %arg0, %block_0_40ab00 ]
  %t8 = phi i512 [ %t5, %block_0_40ab00 ]
  ; r8 := (trunc r5 8)
  %t9 = trunc i64 %t6 to i8
  ; r9 := (sext r8 32)
  %t10 = sext i8 %t9 to i32
  ; r10 := (bv_add r9 (0xffffffd0 : bv 32))
  %t11 = add i32 %t10, 4294967248
  ; r11 := (eq r9 (0x39 : bv 32))
  %t12 = icmp eq i32 %t10, 57
  ; r12 := (bv_ule (0x9 : bv 32) r10)
  %t13 = icmp ule i32 9, %t11
  ; r13 := (not r11)
  %t14 = icmp eq i1 %t12, 0
  ; r14 := (and r12 r13)
  %t15 = and i1 %t13, %t14
  br i1 %t15, label %block_0_40ab16, label %block_0_40ab12
block_0_40ab12:
  %t16 = phi i64 [ %t2, %block_0_40ab00 ], [ %t6, %block_0_40ab07 ], [ %t23, %block_0_40ab16 ], [ %t28, %block_0_40ab1b ], [ %t33, %block_0_40ab22 ]
  %t17 = phi i64 [ %arg0, %block_0_40ab00 ], [ %t7, %block_0_40ab07 ], [ %t24, %block_0_40ab16 ], [ %t29, %block_0_40ab1b ], [ %t34, %block_0_40ab22 ]
  %t18 = phi i512 [ %t4, %block_0_40ab00 ], [ %t8, %block_0_40ab07 ], [ %t25, %block_0_40ab16 ], [ %t30, %block_0_40ab1b ], [ %t35, %block_0_40ab22 ]
  ; r18 := (bitcast r17 (vec 8 double))
  %t19 = bitcast i512 %t18 to <8 x double>
  ; r19 := (tuple r16 r15 r18)
  %t20 = insertvalue { i64, i64, <8 x double> } undef, i64 %t17, 0
  %t21 = insertvalue { i64, i64, <8 x double> } %t20, i64 %t16, 1
  %t22 = insertvalue { i64, i64, <8 x double> } %t21, <8 x double> %t19, 2
  ret { i64, i64, <8 x double> } %t22
block_0_40ab16:
  %t23 = phi i64 [ %t6, %block_0_40ab07 ]
  %t24 = phi i64 [ %t7, %block_0_40ab07 ]
  %t25 = phi i512 [ %t8, %block_0_40ab07 ]
  ; r23 := (trunc r20 8)
  %t26 = trunc i64 %t23 to i8
  ; r24 := (eq r23 (0x2c : bv 8))
  %t27 = icmp eq i8 %t26, 44
  br i1 %t27, label %block_0_40ab12, label %block_0_40ab1b
block_0_40ab1b:
  %t28 = phi i64 [ %t23, %block_0_40ab16 ]
  %t29 = phi i64 [ %t24, %block_0_40ab16 ]
  %t30 = phi i512 [ %t25, %block_0_40ab16 ]
  ; r28 := (trunc r25 8)
  %t31 = trunc i64 %t28 to i8
  ; r29 := (eq r28 (0x2d : bv 8))
  %t32 = icmp eq i8 %t31, 45
  br i1 %t32, label %block_0_40ab12, label %block_0_40ab22
block_0_40ab22:
  %t33 = phi i64 [ %t28, %block_0_40ab1b ]
  %t34 = phi i64 [ %t29, %block_0_40ab1b ]
  %t35 = phi i512 [ %t30, %block_0_40ab1b ]
  ; r33 := (trunc r30 8)
  %t36 = trunc i64 %t33 to i8
  ; r34 := (eq r33 (0x2b : bv 8))
  %t37 = icmp eq i8 %t36, 43
  br i1 %t37, label %block_0_40ab12, label %block_0_40ab27
block_0_40ab27:
  %t38 = phi i64 [ %t34, %block_0_40ab22 ]
  %t39 = phi i512 [ %t35, %block_0_40ab22 ]
  ; r37 := (bv_add r35 (0x1 : bv 64))
  %t40 = add i64 %t38, 1
  ; r38 := (bitcast r36 (vec 8 double))
  %t41 = bitcast i512 %t39 to <8 x double>
  %t42 = call { i64, i64, <8 x double> } (i64, <8 x double>) @getzname(i64 %t40, <8 x double> %t41)
  ret { i64, i64, <8 x double> } %t42
}
define { i64, i64, <8 x double> } @getqzname(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40ab40:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  br label %block_0_40ab4d
block_0_40ab42:
  %t1 = phi i64 [ %t21, %block_0_40ab4d ]
  %t2 = phi i64 [ %t15, %block_0_40ab4d ]
  %t3 = phi i64 [ %t16, %block_0_40ab4d ]
  %t4 = phi i64 [ %t17, %block_0_40ab4d ]
  %t5 = phi i512 [ %t18, %block_0_40ab4d ]
  ; r6 := (trunc r1 8)
  %t6 = trunc i64 %t1 to i8
  ; r7 := (sext r6 32)
  %t7 = sext i8 %t6 to i32
  ; r8 := (trunc r3 32)
  %t8 = trunc i64 %t3 to i32
  ; r9 := (eq r7 r8)
  %t9 = icmp eq i32 %t7, %t8
  br i1 %t9, label %block_0_40ab54, label %block_0_40ab49
block_0_40ab49:
  %t10 = phi i64 [ %t2, %block_0_40ab42 ]
  %t11 = phi i64 [ %t3, %block_0_40ab42 ]
  %t12 = phi i64 [ %t4, %block_0_40ab42 ]
  %t13 = phi i512 [ %t5, %block_0_40ab42 ]
  ; r14 := (bv_add r12 (0x1 : bv 64))
  %t14 = add i64 %t12, 1
  br label %block_0_40ab4d
block_0_40ab4d:
  %t15 = phi i64 [ %arg2, %block_0_40ab40 ], [ %t10, %block_0_40ab49 ]
  %t16 = phi i64 [ %arg1, %block_0_40ab40 ], [ %t11, %block_0_40ab49 ]
  %t17 = phi i64 [ %arg0, %block_0_40ab40 ], [ %t14, %block_0_40ab49 ]
  %t18 = phi i512 [ %t0, %block_0_40ab40 ], [ %t13, %block_0_40ab49 ]
  ; r19 := (read r17 (bv 8))
  %t19 = inttoptr i64 %t17 to i8*
  %t20 = load i8, i8* %t19
  ; r20 := (uext r19 64)
  %t21 = zext i8 %t20 to i64
  ; r21 := (eq r19 (0x0 : bv 8))
  %t22 = icmp eq i8 %t20, 0
  br i1 %t22, label %block_0_40ab54, label %block_0_40ab42
block_0_40ab54:
  %t23 = phi i64 [ %t2, %block_0_40ab42 ], [ %t15, %block_0_40ab4d ]
  %t24 = phi i64 [ %t4, %block_0_40ab42 ], [ %t17, %block_0_40ab4d ]
  %t25 = phi i512 [ %t5, %block_0_40ab42 ], [ %t18, %block_0_40ab4d ]
  ; r25 := (bitcast r24 (vec 8 double))
  %t26 = bitcast i512 %t25 to <8 x double>
  ; r26 := (tuple r23 r22 r25)
  %t27 = insertvalue { i64, i64, <8 x double> } undef, i64 %t24, 0
  %t28 = insertvalue { i64, i64, <8 x double> } %t27, i64 %t23, 1
  %t29 = insertvalue { i64, i64, <8 x double> } %t28, <8 x double> %t26, 2
  ret { i64, i64, <8 x double> } %t29
}
define { i64, i64, <8 x double> } @getnum(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_40ab60:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg4 (bv 512))
  %t1 = bitcast <8 x double> %arg4 to i512
  ; r2 := (bitcast arg4 (bv 512))
  %t2 = bitcast <8 x double> %arg4 to i512
  br i1 %t0, label %block_0_40ab65, label %block_0_40ab70
block_0_40ab65:
  %t3 = phi i64 [ %arg2, %block_0_40ab60 ], [ %t92, %block_0_40abaa ]
  %t4 = phi i64 [ %arg0, %block_0_40ab60 ], [ %t94, %block_0_40abaa ]
  %t5 = phi i512 [ %t1, %block_0_40ab60 ], [ %t96, %block_0_40abaa ]
  ; r6 := (bitcast r5 (vec 8 double))
  %t6 = bitcast i512 %t5 to <8 x double>
  ; r7 := (tuple r4 r3 r6)
  %t7 = insertvalue { i64, i64, <8 x double> } undef, i64 %t4, 0
  %t8 = insertvalue { i64, i64, <8 x double> } %t7, i64 %t3, 1
  %t9 = insertvalue { i64, i64, <8 x double> } %t8, <8 x double> %t6, 2
  ret { i64, i64, <8 x double> } %t9
block_0_40ab70:
  %t10 = phi i64 [ %arg3, %block_0_40ab60 ]
  %t11 = phi i64 [ %arg2, %block_0_40ab60 ]
  %t12 = phi i64 [ %arg1, %block_0_40ab60 ]
  %t13 = phi i64 [ %arg0, %block_0_40ab60 ]
  %t14 = phi i512 [ %t2, %block_0_40ab60 ]
  ; r13 := (read r11 (bv 8))
  %t15 = inttoptr i64 %t13 to i8*
  %t16 = load i8, i8* %t15
  ; r14 := (sext r13 32)
  %t17 = sext i8 %t16 to i32
  ; r15 := (uext r14 64)
  %t18 = zext i32 %t17 to i64
  ; r16 := (bv_add r15 (0xffffffffffffffd0 : bv 64))
  %t19 = add i64 %t18, 18446744073709551568
  ; r17 := (trunc r16 32)
  %t20 = trunc i64 %t19 to i32
  ; r18 := (bv_ult r17 (0x9 : bv 32))
  %t21 = icmp ult i32 %t20, 9
  ; r19 := (eq r17 (0x9 : bv 32))
  %t22 = icmp eq i32 %t20, 9
  ; r20 := (or r18 r19)
  %t23 = or i1 %t21, %t22
  br i1 %t23, label %block_0_40ab83, label %block_0_40ab7d
block_0_40ab7d:
  %t24 = phi i64 [ %t11, %block_0_40ab70 ], [ %t37, %block_0_40ab86 ], [ %t77, %block_0_40aba5 ]
  %t25 = phi i512 [ %t14, %block_0_40ab70 ], [ %t42, %block_0_40ab86 ], [ %t81, %block_0_40aba5 ]
  ; r23 := (bitcast r22 (vec 8 double))
  %t26 = bitcast i512 %t25 to <8 x double>
  ; r24 := (tuple (0x0 : bv 64) r21 r23)
  %t27 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t28 = insertvalue { i64, i64, <8 x double> } %t27, i64 %t24, 1
  %t29 = insertvalue { i64, i64, <8 x double> } %t28, <8 x double> %t26, 2
  ret { i64, i64, <8 x double> } %t29
block_0_40ab83:
  %t30 = phi i64 [ %t10, %block_0_40ab70 ]
  %t31 = phi i64 [ %t11, %block_0_40ab70 ]
  %t32 = phi i64 [ %t12, %block_0_40ab70 ]
  %t33 = phi i64 [ %t13, %block_0_40ab70 ]
  %t34 = phi i64 [ %t18, %block_0_40ab70 ]
  %t35 = phi i512 [ %t14, %block_0_40ab70 ]
  br label %block_0_40ab86
block_0_40ab86:
  %t36 = phi i64 [ %t30, %block_0_40ab83 ], [ %t61, %block_0_40ab94 ]
  %t37 = phi i64 [ %t31, %block_0_40ab83 ], [ %t62, %block_0_40ab94 ]
  %t38 = phi i64 [ %t32, %block_0_40ab83 ], [ %t63, %block_0_40ab94 ]
  %t39 = phi i64 [ %t33, %block_0_40ab83 ], [ %t67, %block_0_40ab94 ]
  %t40 = phi i64 [ %t34, %block_0_40ab83 ], [ %t71, %block_0_40ab94 ]
  %t41 = phi i64 [ 0, %block_0_40ab83 ], [ %t65, %block_0_40ab94 ]
  %t42 = phi i512 [ %t35, %block_0_40ab83 ], [ %t66, %block_0_40ab94 ]
  ; r38 := (bv_mul (0x4 : bv 64) r36)
  %t43 = mul i64 4, %t41
  ; r39 := (bv_add r36 r38)
  %t44 = add i64 %t41, %t43
  ; r40 := (trunc r39 32)
  %t45 = trunc i64 %t44 to i32
  ; r41 := (uext r40 64)
  %t46 = zext i32 %t45 to i64
  ; r42 := (bv_mul (0x2 : bv 64) r41)
  %t47 = mul i64 2, %t46
  ; r43 := (bv_add r35 r42)
  %t48 = add i64 %t40, %t47
  ; r44 := (bv_add r43 (0xffffffffffffffd0 : bv 64))
  %t49 = add i64 %t48, 18446744073709551568
  ; r45 := (trunc r44 32)
  %t50 = trunc i64 %t49 to i32
  ; r46 := (uext r45 64)
  %t51 = zext i32 %t50 to i64
  ; r47 := (trunc r31 32)
  %t52 = trunc i64 %t36 to i32
  ; r48 := (ssbb_overflows r45 r47 false)
  %t53 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t50, i32 %t52)
  %t54 = extractvalue { i32, i1 } %t53, 1
  ; r49 := (bv_sub r45 r47)
  %t55 = sub i32 %t50, %t52
  ; r50 := (bv_slt r49 (0x0 : bv 32))
  %t56 = icmp slt i32 %t55, 0
  ; r51 := (eq r45 r47)
  %t57 = icmp eq i32 %t50, %t52
  ; r52 := (not r51)
  %t58 = icmp eq i1 %t57, 0
  ; r53 := (eq r50 r48)
  %t59 = icmp eq i1 %t56, %t54
  ; r54 := (and r52 r53)
  %t60 = and i1 %t58, %t59
  br i1 %t60, label %block_0_40ab7d, label %block_0_40ab94
block_0_40ab94:
  %t61 = phi i64 [ %t36, %block_0_40ab86 ]
  %t62 = phi i64 [ %t37, %block_0_40ab86 ]
  %t63 = phi i64 [ %t38, %block_0_40ab86 ]
  %t64 = phi i64 [ %t39, %block_0_40ab86 ]
  %t65 = phi i64 [ %t51, %block_0_40ab86 ]
  %t66 = phi i512 [ %t42, %block_0_40ab86 ]
  ; r61 := (bv_add r58 (0x1 : bv 64))
  %t67 = add i64 %t64, 1
  ; r62 := (read r61 (bv 8))
  %t68 = inttoptr i64 %t67 to i8*
  %t69 = load i8, i8* %t68
  ; r63 := (sext r62 32)
  %t70 = sext i8 %t69 to i32
  ; r64 := (uext r63 64)
  %t71 = zext i32 %t70 to i64
  ; r65 := (bv_add r64 (0xffffffffffffffd0 : bv 64))
  %t72 = add i64 %t71, 18446744073709551568
  ; r66 := (trunc r65 32)
  %t73 = trunc i64 %t72 to i32
  ; r67 := (bv_ult r66 (0x9 : bv 32))
  %t74 = icmp ult i32 %t73, 9
  ; r68 := (eq r66 (0x9 : bv 32))
  %t75 = icmp eq i32 %t73, 9
  ; r69 := (or r67 r68)
  %t76 = or i1 %t74, %t75
  br i1 %t76, label %block_0_40ab86, label %block_0_40aba5
block_0_40aba5:
  %t77 = phi i64 [ %t62, %block_0_40ab94 ]
  %t78 = phi i64 [ %t63, %block_0_40ab94 ]
  %t79 = phi i64 [ %t67, %block_0_40ab94 ]
  %t80 = phi i64 [ %t65, %block_0_40ab94 ]
  %t81 = phi i512 [ %t66, %block_0_40ab94 ]
  ; r75 := (trunc r70 32)
  %t82 = trunc i64 %t77 to i32
  ; r76 := (trunc r73 32)
  %t83 = trunc i64 %t80 to i32
  ; r77 := (ssbb_overflows r75 r76 false)
  %t84 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t82, i32 %t83)
  %t85 = extractvalue { i32, i1 } %t84, 1
  ; r78 := (bv_sub r75 r76)
  %t86 = sub i32 %t82, %t83
  ; r79 := (bv_slt r78 (0x0 : bv 32))
  %t87 = icmp slt i32 %t86, 0
  ; r80 := (eq r75 r76)
  %t88 = icmp eq i32 %t82, %t83
  ; r81 := (not r80)
  %t89 = icmp eq i1 %t88, 0
  ; r82 := (eq r79 r77)
  %t90 = icmp eq i1 %t87, %t85
  ; r83 := (and r81 r82)
  %t91 = and i1 %t89, %t90
  br i1 %t91, label %block_0_40ab7d, label %block_0_40abaa
block_0_40abaa:
  %t92 = phi i64 [ %t77, %block_0_40aba5 ]
  %t93 = phi i64 [ %t78, %block_0_40aba5 ]
  %t94 = phi i64 [ %t79, %block_0_40aba5 ]
  %t95 = phi i64 [ %t80, %block_0_40aba5 ]
  %t96 = phi i512 [ %t81, %block_0_40aba5 ]
  ; r89 := (trunc r87 32)
  %t97 = trunc i64 %t95 to i32
  ; write r85 r89
  %t98 = inttoptr i64 %t93 to i32*
  store i32 %t97, i32* %t98
  br label %block_0_40ab65
}
define { i64, i64, <8 x double> } @getoffset(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_40ac60:
  ; r0 := (read arg0 (bv 8))
  %t0 = inttoptr i64 %arg0 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i8 %t1 to i64
  ; r2 := (eq r0 (0x2d : bv 8))
  %t3 = icmp eq i8 %t1, 45
  ; r3 := (bitcast arg2 (bv 512))
  %t4 = bitcast <8 x double> %arg2 to i512
  ; r4 := (bitcast arg2 (bv 512))
  %t5 = bitcast <8 x double> %arg2 to i512
  br i1 %t3, label %block_0_40aca0, label %block_0_40ac78
block_0_40ac78:
  %t6 = phi i64 [ %t2, %block_0_40ac60 ]
  %t7 = phi i64 [ %arg1, %block_0_40ac60 ]
  %t8 = phi i64 [ %arg0, %block_0_40ac60 ]
  %t9 = phi i512 [ %t5, %block_0_40ac60 ]
  ; r9 := (trunc r5 8)
  %t10 = trunc i64 %t6 to i8
  ; r10 := (eq r9 (0x2b : bv 8))
  %t11 = icmp eq i8 %t10, 43
  br i1 %t11, label %block_0_40acb0, label %block_0_40ac7e
block_0_40ac7e:
  %t12 = phi i64 [ %t7, %block_0_40ac78 ], [ %t50, %block_0_40aca0 ], [ %t54, %block_0_40acb0 ]
  %t13 = phi i64 [ 0, %block_0_40ac78 ], [ 1, %block_0_40aca0 ], [ %t55, %block_0_40acb0 ]
  %t14 = phi i64 [ %t8, %block_0_40ac78 ], [ %t53, %block_0_40aca0 ], [ %t58, %block_0_40acb0 ]
  %t15 = phi i512 [ %t9, %block_0_40ac78 ], [ %t52, %block_0_40aca0 ], [ %t57, %block_0_40acb0 ]
  ; r15 := (bitcast r14 (vec 8 double))
  %t16 = bitcast i512 %t15 to <8 x double>
  ; r16 := call getsecs(r13, r11, r15)
  %t17 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @getsecs(i64 %t14, i64 %t12, <8 x double> %t16)
  ; r17 := (tuple_field r16 0)
  %t18 = extractvalue { i64, i64, <8 x double> } %t17, 0
  ; r18 := (tuple_field r16 1)
  %t19 = extractvalue { i64, i64, <8 x double> } %t17, 1
  ; r19 := (tuple_field r16 2)
  %t20 = extractvalue { i64, i64, <8 x double> } %t17, 2
  ; r20 := (bitcast r19 (bv 512))
  %t21 = bitcast <8 x double> %t20 to i512
  br label %block_0_40ac86
block_0_40ac86:
  %t22 = phi i64 [ %t18, %block_0_40ac7e ]
  %t23 = phi i64 [ %t19, %block_0_40ac7e ]
  %t24 = phi i64 [ %t12, %block_0_40ac7e ]
  %t25 = phi i64 [ %t13, %block_0_40ac7e ]
  %t26 = phi i512 [ %t21, %block_0_40ac7e ]
  ; r26 := (eq r21 (0x0 : bv 64))
  %t27 = icmp eq i64 %t22, 0
  br i1 %t27, label %block_0_40ac92, label %block_0_40ac8b
block_0_40ac8b:
  %t28 = phi i64 [ %t22, %block_0_40ac86 ]
  %t29 = phi i64 [ %t23, %block_0_40ac86 ]
  %t30 = phi i64 [ %t24, %block_0_40ac86 ]
  %t31 = phi i64 [ %t25, %block_0_40ac86 ]
  %t32 = phi i512 [ %t26, %block_0_40ac86 ]
  ; r32 := (trunc r30 32)
  %t33 = trunc i64 %t31 to i32
  ; r33 := (eq r32 (0x0 : bv 32))
  %t34 = icmp eq i32 %t33, 0
  br i1 %t34, label %block_0_40ac92, label %block_0_40ac8f
block_0_40ac8f:
  %t35 = phi i64 [ %t28, %block_0_40ac8b ]
  %t36 = phi i64 [ %t29, %block_0_40ac8b ]
  %t37 = phi i64 [ %t30, %block_0_40ac8b ]
  %t38 = phi i512 [ %t32, %block_0_40ac8b ]
  ; r38 := (read r36 (bv 64))
  %t39 = inttoptr i64 %t37 to i64*
  %t40 = load i64, i64* %t39
  ; r39 := (bv_sub (0x0 : bv 64) r38)
  %t41 = sub i64 0, %t40
  ; write r36 r39
  %t42 = inttoptr i64 %t37 to i64*
  store i64 %t41, i64* %t42
  br label %block_0_40ac92
block_0_40ac92:
  %t43 = phi i64 [ %t22, %block_0_40ac86 ], [ %t28, %block_0_40ac8b ], [ %t35, %block_0_40ac8f ]
  %t44 = phi i64 [ %t23, %block_0_40ac86 ], [ %t29, %block_0_40ac8b ], [ %t36, %block_0_40ac8f ]
  %t45 = phi i512 [ %t26, %block_0_40ac86 ], [ %t32, %block_0_40ac8b ], [ %t38, %block_0_40ac8f ]
  ; r43 := (bitcast r42 (vec 8 double))
  %t46 = bitcast i512 %t45 to <8 x double>
  ; r44 := (tuple r40 r41 r43)
  %t47 = insertvalue { i64, i64, <8 x double> } undef, i64 %t43, 0
  %t48 = insertvalue { i64, i64, <8 x double> } %t47, i64 %t44, 1
  %t49 = insertvalue { i64, i64, <8 x double> } %t48, <8 x double> %t46, 2
  ret { i64, i64, <8 x double> } %t49
block_0_40aca0:
  %t50 = phi i64 [ %arg1, %block_0_40ac60 ]
  %t51 = phi i64 [ %arg0, %block_0_40ac60 ]
  %t52 = phi i512 [ %t4, %block_0_40ac60 ]
  ; r48 := (bv_add r46 (0x1 : bv 64))
  %t53 = add i64 %t51, 1
  br label %block_0_40ac7e
block_0_40acb0:
  %t54 = phi i64 [ %t7, %block_0_40ac78 ]
  %t55 = phi i64 [ 0, %block_0_40ac78 ]
  %t56 = phi i64 [ %t8, %block_0_40ac78 ]
  %t57 = phi i512 [ %t9, %block_0_40ac78 ]
  ; r53 := (bv_add r51 (0x1 : bv 64))
  %t58 = add i64 %t56, 1
  br label %block_0_40ac7e
}
define { i64, i64, <8 x double> } @getrule(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40acc0:
  ; r0 := (read arg0 (bv 8))
  %t0 = inttoptr i64 %arg0 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i8 %t1 to i64
  ; r2 := (eq r0 (0x4a : bv 8))
  %t3 = icmp eq i8 %t1, 74
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r4 := (bitcast arg3 (bv 512))
  %t5 = bitcast <8 x double> %arg3 to i512
  br i1 %t3, label %block_0_40ad7e, label %block_0_40accf
block_0_40accf:
  %t6 = phi i64 [ %t2, %block_0_40acc0 ]
  %t7 = phi i64 [ %arg2, %block_0_40acc0 ]
  %t8 = phi i64 [ %arg1, %block_0_40acc0 ]
  %t9 = phi i64 [ %arg0, %block_0_40acc0 ]
  %t10 = phi i512 [ %t5, %block_0_40acc0 ]
  ; r10 := (trunc r5 8)
  %t11 = trunc i64 %t6 to i8
  ; r11 := (eq r10 (0x4d : bv 8))
  %t12 = icmp eq i8 %t11, 77
  br i1 %t12, label %block_0_40ad10, label %block_0_40acd3
block_0_40acd3:
  %t13 = phi i64 [ %t6, %block_0_40accf ]
  %t14 = phi i64 [ %t7, %block_0_40accf ]
  %t15 = phi i64 [ %t8, %block_0_40accf ]
  %t16 = phi i64 [ %t9, %block_0_40accf ]
  %t17 = phi i512 [ %t10, %block_0_40accf ]
  ; r17 := (trunc r12 8)
  %t18 = trunc i64 %t13 to i8
  ; r18 := (sext r17 32)
  %t19 = sext i8 %t18 to i32
  ; r19 := (bv_add r18 (0xffffffd0 : bv 32))
  %t20 = add i32 %t19, 4294967248
  ; r20 := (bv_ult r19 (0x9 : bv 32))
  %t21 = icmp ult i32 %t20, 9
  ; r21 := (eq r18 (0x39 : bv 32))
  %t22 = icmp eq i32 %t19, 57
  ; r22 := (or r20 r21)
  %t23 = or i1 %t21, %t22
  br i1 %t23, label %block_0_40ace2, label %block_0_40acde
block_0_40acde:
  %t24 = phi i64 [ %t14, %block_0_40acd3 ], [ %t84, %block_0_40ad32 ], [ %t107, %block_0_40ad53 ]
  %t25 = phi i512 [ %t17, %block_0_40acd3 ], [ %t86, %block_0_40ad32 ], [ %t109, %block_0_40ad53 ]
  br label %block_0_40ace0
block_0_40ace0:
  %t26 = phi i64 [ 0, %block_0_40acde ], [ %t44, %block_0_40acf8 ], [ %t78, %block_0_40ad2d ], [ %t101, %block_0_40ad4e ]
  %t27 = phi i64 [ %t24, %block_0_40acde ], [ %t45, %block_0_40acf8 ], [ %t79, %block_0_40ad2d ], [ %t102, %block_0_40ad4e ]
  %t28 = phi i512 [ %t25, %block_0_40acde ], [ %t47, %block_0_40acf8 ], [ %t81, %block_0_40ad2d ], [ %t104, %block_0_40ad4e ]
  ; r28 := (bitcast r27 (vec 8 double))
  %t29 = bitcast i512 %t28 to <8 x double>
  ; r29 := (tuple r25 r26 r28)
  %t30 = insertvalue { i64, i64, <8 x double> } undef, i64 %t26, 0
  %t31 = insertvalue { i64, i64, <8 x double> } %t30, i64 %t27, 1
  %t32 = insertvalue { i64, i64, <8 x double> } %t31, <8 x double> %t29, 2
  ret { i64, i64, <8 x double> } %t32
block_0_40ace2:
  %t33 = phi i64 [ %t15, %block_0_40acd3 ]
  %t34 = phi i64 [ %t16, %block_0_40acd3 ]
  %t35 = phi i512 [ %t17, %block_0_40acd3 ]
  ; write r30 (0x1 : bv 32)
  %t36 = inttoptr i64 %t33 to i32*
  store i32 1, i32* %t36
  ; r33 := (bv_add r30 (0x4 : bv 64))
  %t37 = add i64 %t33, 4
  ; r34 := (bitcast r32 (vec 8 double))
  %t38 = bitcast i512 %t35 to <8 x double>
  ; r35 := call getnum(r31, r33, (0x0 : bv 64), (0x16d : bv 64), r34)
  %t39 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, <8 x double>) @getnum(i64 %t34, i64 %t37, i64 0, i64 365, <8 x double> %t38)
  ; r36 := (tuple_field r35 0)
  %t40 = extractvalue { i64, i64, <8 x double> } %t39, 0
  ; r37 := (tuple_field r35 1)
  %t41 = extractvalue { i64, i64, <8 x double> } %t39, 1
  ; r38 := (tuple_field r35 2)
  %t42 = extractvalue { i64, i64, <8 x double> } %t39, 2
  ; r39 := (bitcast r38 (bv 512))
  %t43 = bitcast <8 x double> %t42 to i512
  br label %block_0_40acf8
block_0_40acf8:
  %t44 = phi i64 [ %t40, %block_0_40ace2 ], [ %t124, %block_0_40ad6c ], [ %t147, %block_0_40ad9b ]
  %t45 = phi i64 [ %t41, %block_0_40ace2 ], [ %t125, %block_0_40ad6c ], [ %t148, %block_0_40ad9b ]
  %t46 = phi i64 [ %t33, %block_0_40ace2 ], [ %t126, %block_0_40ad6c ], [ %t149, %block_0_40ad9b ]
  %t47 = phi i512 [ %t43, %block_0_40ace2 ], [ %t127, %block_0_40ad6c ], [ %t150, %block_0_40ad9b ]
  ; r44 := (eq r40 (0x0 : bv 64))
  %t48 = icmp eq i64 %t44, 0
  br i1 %t48, label %block_0_40ace0, label %block_0_40acfd
block_0_40acfd:
  %t49 = phi i64 [ %t44, %block_0_40acf8 ]
  %t50 = phi i64 [ %t45, %block_0_40acf8 ]
  %t51 = phi i64 [ %t46, %block_0_40acf8 ]
  %t52 = phi i512 [ %t47, %block_0_40acf8 ]
  ; r49 := (read r45 (bv 8))
  %t53 = inttoptr i64 %t49 to i8*
  %t54 = load i8, i8* %t53
  ; r50 := (eq r49 (0x2f : bv 8))
  %t55 = icmp eq i8 %t54, 47
  br i1 %t55, label %block_0_40ad70, label %block_0_40ad02
block_0_40ad02:
  %t56 = phi i64 [ %t49, %block_0_40acfd ]
  %t57 = phi i64 [ %t50, %block_0_40acfd ]
  %t58 = phi i64 [ %t51, %block_0_40acfd ]
  %t59 = phi i512 [ %t52, %block_0_40acfd ]
  ; r55 := (bv_add r53 (0x10 : bv 64))
  %t60 = add i64 %t58, 16
  ; write r55 (0x1c20 : bv 64)
  %t61 = inttoptr i64 %t60 to i64*
  store i64 7200, i64* %t61
  ; r56 := (bitcast r54 (vec 8 double))
  %t62 = bitcast i512 %t59 to <8 x double>
  ; r57 := (tuple r51 r52 r56)
  %t63 = insertvalue { i64, i64, <8 x double> } undef, i64 %t56, 0
  %t64 = insertvalue { i64, i64, <8 x double> } %t63, i64 %t57, 1
  %t65 = insertvalue { i64, i64, <8 x double> } %t64, <8 x double> %t62, 2
  ret { i64, i64, <8 x double> } %t65
block_0_40ad10:
  %t66 = phi i64 [ %t8, %block_0_40accf ]
  %t67 = phi i64 [ %t9, %block_0_40accf ]
  %t68 = phi i512 [ %t10, %block_0_40accf ]
  ; write r58 (0x2 : bv 32)
  %t69 = inttoptr i64 %t66 to i32*
  store i32 2, i32* %t69
  ; r61 := (bv_add r58 (0xc : bv 64))
  %t70 = add i64 %t66, 12
  ; r62 := (bv_add r59 (0x1 : bv 64))
  %t71 = add i64 %t67, 1
  ; r63 := (bitcast r60 (vec 8 double))
  %t72 = bitcast i512 %t68 to <8 x double>
  ; r64 := call getnum(r62, r61, (0x1 : bv 64), (0xc : bv 64), r63)
  %t73 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, <8 x double>) @getnum(i64 %t71, i64 %t70, i64 1, i64 12, <8 x double> %t72)
  ; r65 := (tuple_field r64 0)
  %t74 = extractvalue { i64, i64, <8 x double> } %t73, 0
  ; r66 := (tuple_field r64 1)
  %t75 = extractvalue { i64, i64, <8 x double> } %t73, 1
  ; r67 := (tuple_field r64 2)
  %t76 = extractvalue { i64, i64, <8 x double> } %t73, 2
  ; r68 := (bitcast r67 (bv 512))
  %t77 = bitcast <8 x double> %t76 to i512
  br label %block_0_40ad2d
block_0_40ad2d:
  %t78 = phi i64 [ %t74, %block_0_40ad10 ]
  %t79 = phi i64 [ %t75, %block_0_40ad10 ]
  %t80 = phi i64 [ %t66, %block_0_40ad10 ]
  %t81 = phi i512 [ %t77, %block_0_40ad10 ]
  ; r73 := (eq r69 (0x0 : bv 64))
  %t82 = icmp eq i64 %t78, 0
  br i1 %t82, label %block_0_40ace0, label %block_0_40ad32
block_0_40ad32:
  %t83 = phi i64 [ %t78, %block_0_40ad2d ]
  %t84 = phi i64 [ %t79, %block_0_40ad2d ]
  %t85 = phi i64 [ %t80, %block_0_40ad2d ]
  %t86 = phi i512 [ %t81, %block_0_40ad2d ]
  ; r78 := (read r74 (bv 8))
  %t87 = inttoptr i64 %t83 to i8*
  %t88 = load i8, i8* %t87
  ; r79 := (eq r78 (0x2e : bv 8))
  %t89 = icmp eq i8 %t88, 46
  br i1 %t89, label %block_0_40ad37, label %block_0_40acde
block_0_40ad37:
  %t90 = phi i64 [ %t83, %block_0_40ad32 ]
  %t91 = phi i64 [ %t85, %block_0_40ad32 ]
  %t92 = phi i512 [ %t86, %block_0_40ad32 ]
  ; r83 := (bv_add r80 (0x1 : bv 64))
  %t93 = add i64 %t90, 1
  ; r84 := (bv_add r81 (0x8 : bv 64))
  %t94 = add i64 %t91, 8
  ; r85 := (bitcast r82 (vec 8 double))
  %t95 = bitcast i512 %t92 to <8 x double>
  ; r86 := call getnum(r83, r84, (0x1 : bv 64), (0x5 : bv 64), r85)
  %t96 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, <8 x double>) @getnum(i64 %t93, i64 %t94, i64 1, i64 5, <8 x double> %t95)
  ; r87 := (tuple_field r86 0)
  %t97 = extractvalue { i64, i64, <8 x double> } %t96, 0
  ; r88 := (tuple_field r86 1)
  %t98 = extractvalue { i64, i64, <8 x double> } %t96, 1
  ; r89 := (tuple_field r86 2)
  %t99 = extractvalue { i64, i64, <8 x double> } %t96, 2
  ; r90 := (bitcast r89 (bv 512))
  %t100 = bitcast <8 x double> %t99 to i512
  br label %block_0_40ad4e
block_0_40ad4e:
  %t101 = phi i64 [ %t97, %block_0_40ad37 ]
  %t102 = phi i64 [ %t98, %block_0_40ad37 ]
  %t103 = phi i64 [ %t91, %block_0_40ad37 ]
  %t104 = phi i512 [ %t100, %block_0_40ad37 ]
  ; r95 := (eq r91 (0x0 : bv 64))
  %t105 = icmp eq i64 %t101, 0
  br i1 %t105, label %block_0_40ace0, label %block_0_40ad53
block_0_40ad53:
  %t106 = phi i64 [ %t101, %block_0_40ad4e ]
  %t107 = phi i64 [ %t102, %block_0_40ad4e ]
  %t108 = phi i64 [ %t103, %block_0_40ad4e ]
  %t109 = phi i512 [ %t104, %block_0_40ad4e ]
  ; r100 := (read r96 (bv 8))
  %t110 = inttoptr i64 %t106 to i8*
  %t111 = load i8, i8* %t110
  ; r101 := (eq r100 (0x2e : bv 8))
  %t112 = icmp eq i8 %t111, 46
  br i1 %t112, label %block_0_40ad58, label %block_0_40acde
block_0_40ad58:
  %t113 = phi i64 [ %t106, %block_0_40ad53 ]
  %t114 = phi i64 [ %t108, %block_0_40ad53 ]
  %t115 = phi i512 [ %t109, %block_0_40ad53 ]
  ; r105 := (bv_add r102 (0x1 : bv 64))
  %t116 = add i64 %t113, 1
  ; r106 := (bv_add r103 (0x4 : bv 64))
  %t117 = add i64 %t114, 4
  ; r107 := (bitcast r104 (vec 8 double))
  %t118 = bitcast i512 %t115 to <8 x double>
  ; r108 := call getnum(r105, r106, (0x0 : bv 64), (0x6 : bv 64), r107)
  %t119 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, <8 x double>) @getnum(i64 %t116, i64 %t117, i64 0, i64 6, <8 x double> %t118)
  ; r109 := (tuple_field r108 0)
  %t120 = extractvalue { i64, i64, <8 x double> } %t119, 0
  ; r110 := (tuple_field r108 1)
  %t121 = extractvalue { i64, i64, <8 x double> } %t119, 1
  ; r111 := (tuple_field r108 2)
  %t122 = extractvalue { i64, i64, <8 x double> } %t119, 2
  ; r112 := (bitcast r111 (bv 512))
  %t123 = bitcast <8 x double> %t122 to i512
  br label %block_0_40ad6c
block_0_40ad6c:
  %t124 = phi i64 [ %t120, %block_0_40ad58 ]
  %t125 = phi i64 [ %t121, %block_0_40ad58 ]
  %t126 = phi i64 [ %t114, %block_0_40ad58 ]
  %t127 = phi i512 [ %t123, %block_0_40ad58 ]
  br label %block_0_40acf8
block_0_40ad70:
  %t128 = phi i64 [ %t49, %block_0_40acfd ]
  %t129 = phi i64 [ %t51, %block_0_40acfd ]
  %t130 = phi i512 [ %t52, %block_0_40acfd ]
  ; r120 := (bv_add r118 (0x10 : bv 64))
  %t131 = add i64 %t129, 16
  ; r121 := (bv_add r117 (0x1 : bv 64))
  %t132 = add i64 %t128, 1
  ; r122 := (bitcast r119 (vec 8 double))
  %t133 = bitcast i512 %t130 to <8 x double>
  %t134 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @getsecs(i64 %t132, i64 %t131, <8 x double> %t133)
  ret { i64, i64, <8 x double> } %t134
block_0_40ad7e:
  %t135 = phi i64 [ %arg1, %block_0_40acc0 ]
  %t136 = phi i64 [ %arg0, %block_0_40acc0 ]
  %t137 = phi i512 [ %t4, %block_0_40acc0 ]
  ; write r123 (0x0 : bv 32)
  %t138 = inttoptr i64 %t135 to i32*
  store i32 0, i32* %t138
  ; r126 := (bv_add r123 (0x4 : bv 64))
  %t139 = add i64 %t135, 4
  ; r127 := (bv_add r124 (0x1 : bv 64))
  %t140 = add i64 %t136, 1
  ; r128 := (bitcast r125 (vec 8 double))
  %t141 = bitcast i512 %t137 to <8 x double>
  ; r129 := call getnum(r127, r126, (0x1 : bv 64), (0x16d : bv 64), r128)
  %t142 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, <8 x double>) @getnum(i64 %t140, i64 %t139, i64 1, i64 365, <8 x double> %t141)
  ; r130 := (tuple_field r129 0)
  %t143 = extractvalue { i64, i64, <8 x double> } %t142, 0
  ; r131 := (tuple_field r129 1)
  %t144 = extractvalue { i64, i64, <8 x double> } %t142, 1
  ; r132 := (tuple_field r129 2)
  %t145 = extractvalue { i64, i64, <8 x double> } %t142, 2
  ; r133 := (bitcast r132 (bv 512))
  %t146 = bitcast <8 x double> %t145 to i512
  br label %block_0_40ad9b
block_0_40ad9b:
  %t147 = phi i64 [ %t143, %block_0_40ad7e ]
  %t148 = phi i64 [ %t144, %block_0_40ad7e ]
  %t149 = phi i64 [ %t135, %block_0_40ad7e ]
  %t150 = phi i512 [ %t146, %block_0_40ad7e ]
  br label %block_0_40acf8
}
define { i64, <8 x double> } @transtime(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_40ada0:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (trunc arg1 8)
  %t2 = trunc i64 %arg1 to i8
  ; r3 := (bv_and r2 (0x3 : bv 8))
  %t3 = and i8 %t2, 3
  ; r4 := (eq r3 (0x0 : bv 8))
  %t4 = icmp eq i8 %t3, 0
  ; r5 := (bitcast arg4 (bv 512))
  %t5 = bitcast <8 x double> %arg4 to i512
  ; r6 := (bitcast arg4 (bv 512))
  %t6 = bitcast <8 x double> %arg4 to i512
  br i1 %t4, label %block_0_40adb5, label %block_0_40add8
block_0_40adb5:
  %t7 = phi i64 [ %arg3, %block_0_40ada0 ]
  %t8 = phi i64 [ %arg2, %block_0_40ada0 ]
  %t9 = phi i64 [ 0, %block_0_40ada0 ]
  %t10 = phi i64 [ %arg1, %block_0_40ada0 ]
  %t11 = phi i64 [ %arg0, %block_0_40ada0 ]
  %t12 = phi i64 [ %t1, %block_0_40ada0 ]
  %t13 = phi i512 [ %t5, %block_0_40ada0 ]
  ; r14 := (trunc r10 32)
  %t14 = trunc i64 %t10 to i32
  ; r15 := (bv_and r9 (0xffffffffffffff00 : bv 64))
  %t15 = and i64 %t9, 18446744073709551360
  ; r16 := (bv_or r15 (0x1 : bv 64))
  %t16 = or i64 %t15, 1
  ; r17 := (sext r14 64)
  %t17 = sext i32 %t14 to i64
  ; r18 := (bv_mul (0x51eb851f : bv 64) r17)
  %t18 = mul i64 1374389535, %t17
  ; r19 := (bv_shr r18 (0x20 : bv 64))
  %t19 = lshr i64 %t18, 32
  ; r20 := (trunc r19 32)
  %t20 = trunc i64 %t19 to i32
  ; r21 := (uext r20 64)
  %t21 = zext i32 %t20 to i64
  ; r22 := (bv_sar r14 (0x1f : bv 32))
  %t22 = ashr i32 %t14, 31
  ; r23 := (uext r22 64)
  %t23 = zext i32 %t22 to i64
  ; r24 := (bv_sar r20 (0x5 : bv 32))
  %t24 = ashr i32 %t20, 5
  ; r25 := (bv_sub r24 r22)
  %t25 = sub i32 %t24, %t22
  ; r26 := (sext r25 64)
  %t26 = sext i32 %t25 to i64
  ; r27 := (bv_mul (0x64 : bv 64) r26)
  %t27 = mul i64 100, %t26
  ; r28 := (trunc r27 32)
  %t28 = trunc i64 %t27 to i32
  ; r29 := (trunc r12 32)
  %t29 = trunc i64 %t12 to i32
  ; r30 := (eq r29 r28)
  %t30 = icmp eq i32 %t29, %t28
  br i1 %t30, label %block_0_40ae2a, label %block_0_40add8
block_0_40add8:
  %t31 = phi i64 [ %arg3, %block_0_40ada0 ], [ %t7, %block_0_40adb5 ]
  %t32 = phi i64 [ 0, %block_0_40ada0 ], [ %t16, %block_0_40adb5 ]
  %t33 = phi i64 [ %arg0, %block_0_40ada0 ], [ %t11, %block_0_40adb5 ]
  %t34 = phi i64 [ %t1, %block_0_40ada0 ], [ %t12, %block_0_40adb5 ]
  %t35 = phi i64 [ %arg2, %block_0_40ada0 ], [ %t8, %block_0_40adb5 ]
  %t36 = phi i512 [ %t6, %block_0_40ada0 ], [ %t13, %block_0_40adb5 ]
  ; r37 := (read r35 (bv 32))
  %t37 = inttoptr i64 %t35 to i32*
  %t38 = load i32, i32* %t37
  ; r38 := (uext r37 64)
  %t39 = zext i32 %t38 to i64
  ; r39 := (eq r37 (0x1 : bv 32))
  %t40 = icmp eq i32 %t38, 1
  br i1 %t40, label %block_0_40ae46, label %block_0_40ade0
block_0_40ade0:
  %t41 = phi i64 [ %t39, %block_0_40add8 ], [ %t130, %block_0_40ae2a ]
  %t42 = phi i64 [ %t31, %block_0_40add8 ], [ %t114, %block_0_40ae2a ]
  %t43 = phi i64 [ %t32, %block_0_40add8 ], [ %t132, %block_0_40ae2a ]
  %t44 = phi i64 [ %t33, %block_0_40add8 ], [ %t115, %block_0_40ae2a ]
  %t45 = phi i64 [ %t34, %block_0_40add8 ], [ %t116, %block_0_40ae2a ]
  %t46 = phi i64 [ %t35, %block_0_40add8 ], [ %t117, %block_0_40ae2a ]
  %t47 = phi i512 [ %t36, %block_0_40add8 ], [ %t118, %block_0_40ae2a ]
  ; r47 := (trunc r40 32)
  %t48 = trunc i64 %t41 to i32
  ; r48 := (eq r47 (0x2 : bv 32))
  %t49 = icmp eq i32 %t48, 2
  br i1 %t49, label %block_0_40ae61, label %block_0_40ade5
block_0_40ade5:
  %t50 = phi i64 [ %t41, %block_0_40ade0 ]
  %t51 = phi i64 [ %t42, %block_0_40ade0 ]
  %t52 = phi i64 [ %t43, %block_0_40ade0 ]
  %t53 = phi i64 [ %t44, %block_0_40ade0 ]
  %t54 = phi i64 [ %t46, %block_0_40ade0 ]
  %t55 = phi i512 [ %t47, %block_0_40ade0 ]
  ; r55 := (trunc r49 32)
  %t56 = trunc i64 %t50 to i32
  ; r56 := (eq r55 (0x0 : bv 32))
  %t57 = icmp eq i32 %t56, 0
  br i1 %t57, label %block_0_40adf8, label %block_0_40adeb
block_0_40adeb:
  %t58 = phi i64 [ 0, %block_0_40ade5 ], [ %t85, %block_0_40adf8 ], [ %t86, %block_0_40ae15 ]
  %t59 = phi i64 [ %t51, %block_0_40ade5 ], [ %t70, %block_0_40adf8 ], [ %t89, %block_0_40ae15 ]
  %t60 = phi i64 [ %t54, %block_0_40ade5 ], [ %t73, %block_0_40adf8 ], [ %t90, %block_0_40ae15 ]
  %t61 = phi i512 [ %t55, %block_0_40ade5 ], [ %t74, %block_0_40adf8 ], [ %t91, %block_0_40ae15 ]
  ; r61 := (bv_add r59 (0x10 : bv 64))
  %t62 = add i64 %t60, 16
  ; r62 := (read r61 (bv 64))
  %t63 = inttoptr i64 %t62 to i64*
  %t64 = load i64, i64* %t63
  ; r63 := (bv_add r58 r62)
  %t65 = add i64 %t59, %t64
  ; r64 := (bv_add r63 r57)
  %t66 = add i64 %t65, %t58
  ; r65 := (bitcast r60 (vec 8 double))
  %t67 = bitcast i512 %t61 to <8 x double>
  ; r66 := (tuple r64 r65)
  %t68 = insertvalue { i64, <8 x double> } undef, i64 %t66, 0
  %t69 = insertvalue { i64, <8 x double> } %t68, <8 x double> %t67, 1
  ret { i64, <8 x double> } %t69
block_0_40adf8:
  %t70 = phi i64 [ %t51, %block_0_40ade5 ]
  %t71 = phi i64 [ %t52, %block_0_40ade5 ]
  %t72 = phi i64 [ %t53, %block_0_40ade5 ]
  %t73 = phi i64 [ %t54, %block_0_40ade5 ]
  %t74 = phi i512 [ %t55, %block_0_40ade5 ]
  ; r72 := (bv_add r70 (0x4 : bv 64))
  %t75 = add i64 %t73, 4
  ; r73 := (read r72 (bv 32))
  %t76 = inttoptr i64 %t75 to i32*
  %t77 = load i32, i32* %t76
  ; r74 := (uext r73 64)
  %t78 = zext i32 %t77 to i64
  ; r75 := (sext r73 128)
  %t79 = sext i32 %t77 to i128
  ; r76 := (bv_mul (0x15180 : bv 128) r75)
  %t80 = mul i128 86400, %t79
  ; r77 := (trunc r76 64)
  %t81 = trunc i128 %t80 to i64
  ; r78 := (trunc r68 32)
  %t82 = trunc i64 %t71 to i32
  ; r79 := (eq r78 (0x0 : bv 32))
  %t83 = icmp eq i32 %t82, 0
  ; r80 := (bv_add r77 r69)
  %t84 = add i64 %t81, %t72
  ; r81 := (bv_add r80 (0xfffffffffffeae80 : bv 64))
  %t85 = add i64 %t84, 18446744073709465216
  br i1 %t83, label %block_0_40adeb, label %block_0_40ae15
block_0_40ae15:
  %t86 = phi i64 [ %t85, %block_0_40adf8 ]
  %t87 = phi i64 [ %t78, %block_0_40adf8 ]
  %t88 = phi i64 [ %t84, %block_0_40adf8 ]
  %t89 = phi i64 [ %t70, %block_0_40adf8 ]
  %t90 = phi i64 [ %t73, %block_0_40adf8 ]
  %t91 = phi i512 [ %t74, %block_0_40adf8 ]
  ; r88 := (trunc r83 32)
  %t92 = trunc i64 %t87 to i32
  ; r89 := (ssbb_overflows r88 (0x3b : bv 32) false)
  %t93 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t92, i32 59)
  %t94 = extractvalue { i32, i1 } %t93, 1
  ; r90 := (bv_add r88 (0xffffffc5 : bv 32))
  %t95 = add i32 %t92, 4294967237
  ; r91 := (bv_slt r90 (0x0 : bv 32))
  %t96 = icmp slt i32 %t95, 0
  ; r92 := (eq r88 (0x3b : bv 32))
  %t97 = icmp eq i32 %t92, 59
  ; r93 := (xor r91 r89)
  %t98 = xor i1 %t96, %t94
  ; r94 := (or r92 r93)
  %t99 = or i1 %t97, %t98
  br i1 %t99, label %block_0_40adeb, label %block_0_40ae1a
block_0_40ae1a:
  %t100 = phi i64 [ %t88, %block_0_40ae15 ]
  %t101 = phi i64 [ %t89, %block_0_40ae15 ]
  %t102 = phi i64 [ %t90, %block_0_40ae15 ]
  %t103 = phi i512 [ %t91, %block_0_40ae15 ]
  ; r99 := (bv_add r97 (0x10 : bv 64))
  %t104 = add i64 %t102, 16
  ; r100 := (read r99 (bv 64))
  %t105 = inttoptr i64 %t104 to i64*
  %t106 = load i64, i64* %t105
  ; r101 := (bv_add r96 r100)
  %t107 = add i64 %t101, %t106
  ; r102 := (bv_add r101 r95)
  %t108 = add i64 %t107, %t100
  ; r103 := (bitcast r98 (vec 8 double))
  %t109 = bitcast i512 %t103 to <8 x double>
  ; r104 := (tuple r102 r103)
  %t110 = insertvalue { i64, <8 x double> } undef, i64 %t108, 0
  %t111 = insertvalue { i64, <8 x double> } %t110, <8 x double> %t109, 1
  ret { i64, <8 x double> } %t111
block_0_40ae2a:
  %t112 = phi i64 [ %t23, %block_0_40adb5 ]
  %t113 = phi i64 [ %t21, %block_0_40adb5 ]
  %t114 = phi i64 [ %t7, %block_0_40adb5 ]
  %t115 = phi i64 [ %t11, %block_0_40adb5 ]
  %t116 = phi i64 [ %t12, %block_0_40adb5 ]
  %t117 = phi i64 [ %t8, %block_0_40adb5 ]
  %t118 = phi i512 [ %t13, %block_0_40adb5 ]
  ; r112 := (trunc r106 32)
  %t119 = trunc i64 %t113 to i32
  ; r113 := (bv_sar r112 (0x7 : bv 32))
  %t120 = ashr i32 %t119, 7
  ; r114 := (trunc r105 32)
  %t121 = trunc i64 %t112 to i32
  ; r115 := (bv_sub r113 r114)
  %t122 = sub i32 %t120, %t121
  ; r116 := (sext r115 64)
  %t123 = sext i32 %t122 to i64
  ; r117 := (bv_mul (0x190 : bv 64) r116)
  %t124 = mul i64 400, %t123
  ; r118 := (trunc r117 32)
  %t125 = trunc i64 %t124 to i32
  ; r119 := (trunc r109 32)
  %t126 = trunc i64 %t116 to i32
  ; r120 := (eq r119 r118)
  %t127 = icmp eq i32 %t126, %t125
  ; r121 := (read r110 (bv 32))
  %t128 = inttoptr i64 %t117 to i32*
  %t129 = load i32, i32* %t128
  ; r122 := (uext r121 64)
  %t130 = zext i32 %t129 to i64
  ; r123 := (mux r120 (0x1 : bv 8) (0x0 : bv 8))
  %t131 = select i1 %t127, i8 1, i8 0
  ; r124 := (uext r123 64)
  %t132 = zext i8 %t131 to i64
  ; r125 := (eq r121 (0x1 : bv 32))
  %t133 = icmp eq i32 %t129, 1
  br i1 %t133, label %block_0_40ae46, label %block_0_40ade0
block_0_40ae46:
  %t134 = phi i64 [ %t31, %block_0_40add8 ], [ %t114, %block_0_40ae2a ]
  %t135 = phi i64 [ %t33, %block_0_40add8 ], [ %t115, %block_0_40ae2a ]
  %t136 = phi i64 [ %t35, %block_0_40add8 ], [ %t117, %block_0_40ae2a ]
  %t137 = phi i512 [ %t36, %block_0_40add8 ], [ %t118, %block_0_40ae2a ]
  ; r130 := (bv_add r128 (0x4 : bv 64))
  %t138 = add i64 %t136, 4
  ; r131 := (read r130 (bv 32))
  %t139 = inttoptr i64 %t138 to i32*
  %t140 = load i32, i32* %t139
  ; r132 := (bv_add r128 (0x10 : bv 64))
  %t141 = add i64 %t136, 16
  ; r133 := (read r132 (bv 64))
  %t142 = inttoptr i64 %t141 to i64*
  %t143 = load i64, i64* %t142
  ; r134 := (bv_add r126 r133)
  %t144 = add i64 %t134, %t143
  ; r135 := (sext r131 128)
  %t145 = sext i32 %t140 to i128
  ; r136 := (bv_mul (0x15180 : bv 128) r135)
  %t146 = mul i128 86400, %t145
  ; r137 := (trunc r136 64)
  %t147 = trunc i128 %t146 to i64
  ; r138 := (bv_add r137 r127)
  %t148 = add i64 %t147, %t135
  ; r139 := (bv_add r134 r138)
  %t149 = add i64 %t144, %t148
  ; r140 := (bitcast r129 (vec 8 double))
  %t150 = bitcast i512 %t137 to <8 x double>
  ; r141 := (tuple r139 r140)
  %t151 = insertvalue { i64, <8 x double> } undef, i64 %t149, 0
  %t152 = insertvalue { i64, <8 x double> } %t151, <8 x double> %t150, 1
  ret { i64, <8 x double> } %t152
block_0_40ae61:
  %t153 = phi i64 [ %t42, %block_0_40ade0 ]
  %t154 = phi i64 [ %t43, %block_0_40ade0 ]
  %t155 = phi i64 [ %t44, %block_0_40ade0 ]
  %t156 = phi i64 [ %t45, %block_0_40ade0 ]
  %t157 = phi i64 [ %t46, %block_0_40ade0 ]
  %t158 = phi i512 [ %t47, %block_0_40ade0 ]
  ; r148 := (bv_add r146 (0xc : bv 64))
  %t159 = add i64 %t157, 12
  ; r149 := (read r148 (bv 32))
  %t160 = inttoptr i64 %t159 to i32*
  %t161 = load i32, i32* %t160
  ; r150 := (uext r149 64)
  %t162 = zext i32 %t161 to i64
  ; r151 := (bv_add r150 (0xffffffffffffffff : bv 64))
  %t163 = add i64 %t162, 18446744073709551615
  ; r152 := (trunc r151 32)
  %t164 = trunc i64 %t163 to i32
  ; r153 := (uext r152 64)
  %t165 = zext i32 %t164 to i64
  ; r154 := (bv_slt r152 (0x0 : bv 32))
  %t166 = icmp slt i32 %t164, 0
  ; r155 := (eq r152 (0x0 : bv 32))
  %t167 = icmp eq i32 %t164, 0
  ; r156 := (or r155 r154)
  %t168 = or i1 %t167, %t166
  br i1 %t168, label %block_0_40aea9, label %block_0_40ae71
block_0_40ae71:
  %t169 = phi i64 [ %t153, %block_0_40ae61 ]
  %t170 = phi i64 [ %t154, %block_0_40ae61 ]
  %t171 = phi i64 [ %t155, %block_0_40ae61 ]
  %t172 = phi i64 [ %t156, %block_0_40ae61 ]
  %t173 = phi i64 [ %t162, %block_0_40ae61 ]
  %t174 = phi i64 [ %t157, %block_0_40ae61 ]
  %t175 = phi i64 [ %t165, %block_0_40ae61 ]
  %t176 = phi i512 [ %t158, %block_0_40ae61 ]
  ; r165 := (trunc r158 32)
  %t177 = trunc i64 %t170 to i32
  ; r166 := (sext r165 64)
  %t178 = sext i32 %t177 to i64
  ; r167 := (bv_add r166 r166)
  %t179 = add i64 %t178, %t178
  ; r168 := (bv_add r167 r166)
  %t180 = add i64 %t179, %t178
  ; r169 := (bv_shl r168 (0x4 : bv 64))
  %t181 = shl i64 %t180, 4
  ; r170 := (bv_add r169 (0x428160 : bv 64))
  %t182 = add i64 %t181, 4358496
  br label %block_0_40ae90
block_0_40ae90:
  %t183 = phi i64 [ 1, %block_0_40ae71 ], [ %t197, %block_0_40ae90 ]
  %t184 = phi i64 [ %t182, %block_0_40ae71 ], [ %t198, %block_0_40ae90 ]
  %t185 = phi i64 [ %t169, %block_0_40ae71 ], [ %t185, %block_0_40ae90 ]
  %t186 = phi i64 [ %t170, %block_0_40ae71 ], [ %t186, %block_0_40ae90 ]
  %t187 = phi i64 [ %t172, %block_0_40ae71 ], [ %t187, %block_0_40ae90 ]
  %t188 = phi i64 [ %t173, %block_0_40ae71 ], [ %t188, %block_0_40ae90 ]
  %t189 = phi i64 [ %t171, %block_0_40ae71 ], [ %t202, %block_0_40ae90 ]
  %t190 = phi i64 [ %t174, %block_0_40ae71 ], [ %t190, %block_0_40ae90 ]
  %t191 = phi i64 [ %t175, %block_0_40ae71 ], [ %t191, %block_0_40ae90 ]
  %t192 = phi i512 [ %t176, %block_0_40ae71 ], [ %t192, %block_0_40ae90 ]
  ; r181 := (read r172 (bv 32))
  %t193 = inttoptr i64 %t184 to i32*
  %t194 = load i32, i32* %t193
  ; r182 := (trunc r171 32)
  %t195 = trunc i64 %t183 to i32
  ; r183 := (bv_add r182 (0x1 : bv 32))
  %t196 = add i32 %t195, 1
  ; r184 := (uext r183 64)
  %t197 = zext i32 %t196 to i64
  ; r185 := (bv_add r172 (0x4 : bv 64))
  %t198 = add i64 %t184, 4
  ; r186 := (sext r181 128)
  %t199 = sext i32 %t194 to i128
  ; r187 := (bv_mul (0x15180 : bv 128) r186)
  %t200 = mul i128 86400, %t199
  ; r188 := (trunc r187 64)
  %t201 = trunc i128 %t200 to i64
  ; r189 := (bv_add r177 r188)
  %t202 = add i64 %t189, %t201
  ; r190 := (trunc r176 32)
  %t203 = trunc i64 %t188 to i32
  ; r191 := (eq r183 r190)
  %t204 = icmp eq i32 %t196, %t203
  br i1 %t204, label %block_0_40aea9, label %block_0_40ae90
block_0_40aea9:
  %t205 = phi i64 [ %t153, %block_0_40ae61 ], [ %t185, %block_0_40ae90 ]
  %t206 = phi i64 [ %t154, %block_0_40ae61 ], [ %t186, %block_0_40ae90 ]
  %t207 = phi i64 [ %t156, %block_0_40ae61 ], [ %t187, %block_0_40ae90 ]
  %t208 = phi i64 [ %t162, %block_0_40ae61 ], [ %t188, %block_0_40ae90 ]
  %t209 = phi i64 [ %t155, %block_0_40ae61 ], [ %t202, %block_0_40ae90 ]
  %t210 = phi i64 [ %t157, %block_0_40ae61 ], [ %t190, %block_0_40ae90 ]
  %t211 = phi i64 [ %t165, %block_0_40ae61 ], [ %t191, %block_0_40ae90 ]
  %t212 = phi i512 [ %t158, %block_0_40ae61 ], [ %t192, %block_0_40ae90 ]
  ; r200 := (bv_add r194 (0xffffffffffffffff : bv 64))
  %t213 = add i64 %t207, 18446744073709551615
  ; r201 := (trunc r200 32)
  %t214 = trunc i64 %t213 to i32
  ; r202 := (trunc r195 32)
  %t215 = trunc i64 %t208 to i32
  ; r203 := (ssbb_overflows r202 (0x3 : bv 32) false)
  %t216 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t215, i32 3)
  %t217 = extractvalue { i32, i1 } %t216, 1
  ; r204 := (bv_add r202 (0xfffffffd : bv 32))
  %t218 = add i32 %t215, 4294967293
  ; r205 := (bv_slt r204 (0x0 : bv 32))
  %t219 = icmp slt i32 %t218, 0
  ; r206 := (eq r205 r203)
  %t220 = icmp eq i1 %t219, %t217
  ; r207 := (trunc r194 32)
  %t221 = trunc i64 %t207 to i32
  ; r208 := (mux r206 r207 r201)
  %t222 = select i1 %t220, i32 %t221, i32 %t214
  ; r209 := (bv_add r195 (0x9 : bv 64))
  %t223 = add i64 %t208, 9
  ; r210 := (trunc r209 32)
  %t224 = trunc i64 %t223 to i32
  ; r211 := (bv_add r197 (0x8 : bv 64))
  %t225 = add i64 %t210, 8
  ; r212 := (read r211 (bv 32))
  %t226 = inttoptr i64 %t225 to i32*
  %t227 = load i32, i32* %t226
  ; r213 := (uext r212 64)
  %t228 = zext i32 %t227 to i64
  ; r214 := (sext r208 64)
  %t229 = sext i32 %t222 to i64
  ; r215 := (bv_mul (0x51eb851f : bv 64) r214)
  %t230 = mul i64 1374389535, %t229
  ; r216 := (bv_shr r215 (0x20 : bv 64))
  %t231 = lshr i64 %t230, 32
  ; r217 := (trunc r216 32)
  %t232 = trunc i64 %t231 to i32
  ; r218 := (bv_sar r208 (0x1f : bv 32))
  %t233 = ashr i32 %t222, 31
  ; r219 := (bv_sar r210 (0x1f : bv 32))
  %t234 = ashr i32 %t224, 31
  ; r220 := (bv_sar r217 (0x5 : bv 32))
  %t235 = ashr i32 %t232, 5
  ; r221 := (bv_sub r220 r218)
  %t236 = sub i32 %t235, %t233
  ; r222 := (bv_slt r221 (0x0 : bv 32))
  %t237 = icmp slt i32 %t236, 0
  ; r223 := (uext r221 64)
  %t238 = zext i32 %t236 to i64
  ; r224 := (sext r221 64)
  %t239 = sext i32 %t236 to i64
  ; r225 := (bv_mul (0x64 : bv 64) r224)
  %t240 = mul i64 100, %t239
  ; r226 := (trunc r225 32)
  %t241 = trunc i64 %t240 to i32
  ; r227 := (bv_sub r208 r226)
  %t242 = sub i32 %t222, %t241
  ; r228 := (bv_slt r227 (0x0 : bv 32))
  %t243 = icmp slt i32 %t242, 0
  ; r229 := (uext r227 64)
  %t244 = zext i32 %t242 to i64
  ; r230 := (sext r210 64)
  %t245 = sext i32 %t224 to i64
  ; r231 := (bv_mul r230 (0x2aaaaaab : bv 64))
  %t246 = mul i64 %t245, 715827883
  ; r232 := (bv_shr r231 (0x20 : bv 64))
  %t247 = lshr i64 %t246, 32
  ; r233 := (trunc r232 32)
  %t248 = trunc i64 %t247 to i32
  ; r234 := (bv_sar r233 (0x1 : bv 32))
  %t249 = ashr i32 %t248, 1
  ; r235 := (bv_sub r234 r219)
  %t250 = sub i32 %t249, %t234
  ; r236 := (uext r235 64)
  %t251 = zext i32 %t250 to i64
  ; r237 := (bv_mul (0x2 : bv 64) r236)
  %t252 = mul i64 2, %t251
  ; r238 := (bv_add r236 r237)
  %t253 = add i64 %t251, %t252
  ; r239 := (trunc r238 32)
  %t254 = trunc i64 %t253 to i32
  ; r240 := (bv_shl r239 (0x2 : bv 32))
  %t255 = shl i32 %t254, 2
  ; r241 := (bv_sub r210 r240)
  %t256 = sub i32 %t224, %t255
  ; r242 := (uext r241 64)
  %t257 = zext i32 %t256 to i64
  ; r243 := (bv_add r242 (0x1 : bv 64))
  %t258 = add i64 %t257, 1
  ; r244 := (trunc r243 32)
  %t259 = trunc i64 %t258 to i32
  ; r245 := (sext r244 64)
  %t260 = sext i32 %t259 to i64
  ; r246 := (bv_mul (0x1a : bv 64) r245)
  %t261 = mul i64 26, %t260
  ; r247 := (trunc r246 32)
  %t262 = trunc i64 %t261 to i32
  ; r248 := (uext r247 64)
  %t263 = zext i32 %t262 to i64
  ; r249 := (bv_add r197 (0x4 : bv 64))
  %t264 = add i64 %t210, 4
  ; r250 := (read r249 (bv 32))
  %t265 = inttoptr i64 %t264 to i32*
  %t266 = load i32, i32* %t265
  ; r251 := (bv_add r248 (0xfffffffffffffffe : bv 64))
  %t267 = add i64 %t263, 18446744073709551614
  ; r252 := (trunc r251 32)
  %t268 = trunc i64 %t267 to i32
  ; r253 := (bv_sar r252 (0x1f : bv 32))
  %t269 = ashr i32 %t268, 31
  ; r254 := (sext r252 64)
  %t270 = sext i32 %t268 to i64
  ; r255 := (bv_mul r254 (0x66666667 : bv 64))
  %t271 = mul i64 %t270, 1717986919
  ; r256 := (bv_shr r255 (0x20 : bv 64))
  %t272 = lshr i64 %t271, 32
  ; r257 := (trunc r256 32)
  %t273 = trunc i64 %t272 to i32
  ; r258 := (bv_add r229 (0x3 : bv 64))
  %t274 = add i64 %t244, 3
  ; r259 := (trunc r258 32)
  %t275 = trunc i64 %t274 to i32
  ; r260 := (bv_sar r257 (0x2 : bv 32))
  %t276 = ashr i32 %t273, 2
  ; r261 := (bv_sub r260 r253)
  %t277 = sub i32 %t276, %t269
  ; r262 := (uext r261 64)
  %t278 = zext i32 %t277 to i64
  ; r263 := (bv_add r229 r262)
  %t279 = add i64 %t244, %t278
  ; r264 := (bv_add r263 (0x1 : bv 64))
  %t280 = add i64 %t279, 1
  ; r265 := (trunc r264 32)
  %t281 = trunc i64 %t280 to i32
  ; r266 := (mux r228 r259 r227)
  %t282 = select i1 %t243, i32 %t275, i32 %t242
  ; r267 := (bv_add r223 (0x3 : bv 64))
  %t283 = add i64 %t238, 3
  ; r268 := (trunc r267 32)
  %t284 = trunc i64 %t283 to i32
  ; r269 := (bv_sar r266 (0x2 : bv 32))
  %t285 = ashr i32 %t282, 2
  ; r270 := (bv_add r265 r269)
  %t286 = add i32 %t281, %t285
  ; r271 := (uext r270 64)
  %t287 = zext i32 %t286 to i64
  ; r272 := (mux r222 r268 r221)
  %t288 = select i1 %t237, i32 %t284, i32 %t236
  ; r273 := (bv_sar r272 (0x2 : bv 32))
  %t289 = ashr i32 %t288, 2
  ; r274 := (uext r273 64)
  %t290 = zext i32 %t289 to i64
  ; r275 := (bv_add r271 r274)
  %t291 = add i64 %t287, %t290
  ; r276 := (trunc r275 32)
  %t292 = trunc i64 %t291 to i32
  ; r277 := (bv_add r223 r223)
  %t293 = add i64 %t238, %t238
  ; r278 := (trunc r277 32)
  %t294 = trunc i64 %t293 to i32
  ; r279 := (bv_sub r276 r278)
  %t295 = sub i32 %t292, %t294
  ; r280 := (sext r279 64)
  %t296 = sext i32 %t295 to i64
  ; r281 := (bv_mul r280 (0xffffffff92492493 : bv 64))
  %t297 = mul i64 %t296, 18446744071868851347
  ; r282 := (bv_shr r281 (0x20 : bv 64))
  %t298 = lshr i64 %t297, 32
  ; r283 := (trunc r282 32)
  %t299 = trunc i64 %t298 to i32
  ; r284 := (bv_sar r279 (0x1f : bv 32))
  %t300 = ashr i32 %t295, 31
  ; r285 := (bv_add r283 r279)
  %t301 = add i32 %t299, %t295
  ; r286 := (bv_sar r285 (0x2 : bv 32))
  %t302 = ashr i32 %t301, 2
  ; r287 := (bv_sub r286 r284)
  %t303 = sub i32 %t302, %t300
  ; r288 := (uext r287 64)
  %t304 = zext i32 %t303 to i64
  ; r289 := (bv_mul (0x8 : bv 64) r288)
  %t305 = mul i64 8, %t304
  ; r290 := (trunc r289 32)
  %t306 = trunc i64 %t305 to i32
  ; r291 := (bv_sub r290 r287)
  %t307 = sub i32 %t306, %t303
  ; r292 := (bv_sub r279 r291)
  %t308 = sub i32 %t295, %t307
  ; r293 := (uext r292 64)
  %t309 = zext i32 %t308 to i64
  ; r294 := (bv_add r293 (0x7 : bv 64))
  %t310 = add i64 %t309, 7
  ; r295 := (trunc r294 32)
  %t311 = trunc i64 %t310 to i32
  ; r296 := (ssbb_overflows r292 (0xffffffff : bv 32) false)
  %t312 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t308, i32 4294967295)
  %t313 = extractvalue { i32, i1 } %t312, 1
  ; r297 := (bv_add r292 (0x1 : bv 32))
  %t314 = add i32 %t308, 1
  ; r298 := (bv_slt r297 (0x0 : bv 32))
  %t315 = icmp slt i32 %t314, 0
  ; r299 := (eq r292 (0xffffffff : bv 32))
  %t316 = icmp eq i32 %t308, 4294967295
  ; r300 := (xor r298 r296)
  %t317 = xor i1 %t315, %t313
  ; r301 := (or r299 r300)
  %t318 = or i1 %t316, %t317
  ; r302 := (mux r301 r295 r292)
  %t319 = select i1 %t318, i32 %t311, i32 %t308
  ; r303 := (bv_sub r250 r302)
  %t320 = sub i32 %t266, %t319
  ; r304 := (uext r303 64)
  %t321 = zext i32 %t320 to i64
  ; r305 := (bv_add r304 (0x7 : bv 64))
  %t322 = add i64 %t321, 7
  ; r306 := (trunc r305 32)
  %t323 = trunc i64 %t322 to i32
  ; r307 := (ssbb_overflows r303 (0xffffffff : bv 32) false)
  %t324 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t320, i32 4294967295)
  %t325 = extractvalue { i32, i1 } %t324, 1
  ; r308 := (bv_add r303 (0x1 : bv 32))
  %t326 = add i32 %t320, 1
  ; r309 := (bv_slt r308 (0x0 : bv 32))
  %t327 = icmp slt i32 %t326, 0
  ; r310 := (eq r303 (0xffffffff : bv 32))
  %t328 = icmp eq i32 %t320, 4294967295
  ; r311 := (xor r309 r307)
  %t329 = xor i1 %t327, %t325
  ; r312 := (or r310 r311)
  %t330 = or i1 %t328, %t329
  ; r313 := (mux r312 r306 r303)
  %t331 = select i1 %t330, i32 %t323, i32 %t320
  ; r314 := (uext r313 64)
  %t332 = zext i32 %t331 to i64
  ; r315 := (ssbb_overflows r212 (0x1 : bv 32) false)
  %t333 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t227, i32 1)
  %t334 = extractvalue { i32, i1 } %t333, 1
  ; r316 := (bv_add r212 (0xffffffff : bv 32))
  %t335 = add i32 %t227, 4294967295
  ; r317 := (bv_slt r316 (0x0 : bv 32))
  %t336 = icmp slt i32 %t335, 0
  ; r318 := (eq r212 (0x1 : bv 32))
  %t337 = icmp eq i32 %t227, 1
  ; r319 := (xor r317 r315)
  %t338 = xor i1 %t336, %t334
  ; r320 := (or r318 r319)
  %t339 = or i1 %t337, %t338
  br i1 %t339, label %block_0_40afc3, label %block_0_40af83
block_0_40af83:
  %t340 = phi i64 [ %t205, %block_0_40aea9 ]
  %t341 = phi i64 [ %t206, %block_0_40aea9 ]
  %t342 = phi i64 [ %t332, %block_0_40aea9 ]
  %t343 = phi i64 [ %t228, %block_0_40aea9 ]
  %t344 = phi i64 [ %t209, %block_0_40aea9 ]
  %t345 = phi i64 [ %t210, %block_0_40aea9 ]
  %t346 = phi i64 [ %t211, %block_0_40aea9 ]
  %t347 = phi i512 [ %t212, %block_0_40aea9 ]
  ; r329 := (trunc r322 32)
  %t348 = trunc i64 %t341 to i32
  ; r330 := (sext r329 64)
  %t349 = sext i32 %t348 to i64
  ; r331 := (trunc r327 32)
  %t350 = trunc i64 %t346 to i32
  ; r332 := (sext r331 64)
  %t351 = sext i32 %t350 to i64
  ; r333 := (bv_add r323 (0x7 : bv 64))
  %t352 = add i64 %t342, 7
  ; r334 := (trunc r333 32)
  %t353 = trunc i64 %t352 to i32
  ; r335 := (uext r334 64)
  %t354 = zext i32 %t353 to i64
  ; r336 := (bv_add r330 r330)
  %t355 = add i64 %t349, %t349
  ; r337 := (bv_add r336 r330)
  %t356 = add i64 %t355, %t349
  ; r338 := (bv_mul (0x4 : bv 64) r337)
  %t357 = mul i64 4, %t356
  ; r339 := (bv_add r332 r338)
  %t358 = add i64 %t351, %t357
  ; r340 := (bv_mul (0x4 : bv 64) r339)
  %t359 = mul i64 4, %t358
  ; r341 := (bv_add r340 (0x428160 : bv 64))
  %t360 = add i64 %t359, 4358496
  ; r342 := (read r341 (bv 32))
  %t361 = inttoptr i64 %t360 to i32*
  %t362 = load i32, i32* %t361
  ; r343 := (uext r342 64)
  %t363 = zext i32 %t362 to i64
  ; r344 := (ssbb_overflows r342 r334 false)
  %t364 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t362, i32 %t353)
  %t365 = extractvalue { i32, i1 } %t364, 1
  ; r345 := (bv_sub r342 r334)
  %t366 = sub i32 %t362, %t353
  ; r346 := (bv_slt r345 (0x0 : bv 32))
  %t367 = icmp slt i32 %t366, 0
  ; r347 := (eq r342 r334)
  %t368 = icmp eq i32 %t362, %t353
  ; r348 := (xor r346 r344)
  %t369 = xor i1 %t367, %t365
  ; r349 := (or r347 r348)
  %t370 = or i1 %t368, %t369
  br i1 %t370, label %block_0_40afc3, label %block_0_40afa3
block_0_40afa3:
  %t371 = phi i64 [ %t363, %block_0_40af83 ]
  %t372 = phi i64 [ %t340, %block_0_40af83 ]
  %t373 = phi i64 [ %t354, %block_0_40af83 ]
  %t374 = phi i64 [ %t343, %block_0_40af83 ]
  %t375 = phi i64 [ %t344, %block_0_40af83 ]
  %t376 = phi i64 [ %t345, %block_0_40af83 ]
  %t377 = phi i512 [ %t347, %block_0_40af83 ]
  ; r357 := (trunc r352 32)
  %t378 = trunc i64 %t373 to i32
  ; r358 := (uext r357 64)
  %t379 = zext i32 %t378 to i64
  br label %block_0_40afbb
block_0_40afb0:
  %t380 = phi i64 [ %t409, %block_0_40afbb ]
  %t381 = phi i64 [ %t410, %block_0_40afbb ]
  %t382 = phi i64 [ %t419, %block_0_40afbb ]
  %t383 = phi i64 [ %t412, %block_0_40afbb ]
  %t384 = phi i64 [ %t413, %block_0_40afbb ]
  %t385 = phi i64 [ %t414, %block_0_40afbb ]
  %t386 = phi i64 [ %t415, %block_0_40afbb ]
  %t387 = phi i512 [ %t416, %block_0_40afbb ]
  ; r367 := (bv_add r362 (0x7 : bv 64))
  %t388 = add i64 %t383, 7
  ; r368 := (trunc r367 32)
  %t389 = trunc i64 %t388 to i32
  ; r369 := (uext r368 64)
  %t390 = zext i32 %t389 to i64
  ; r370 := (trunc r359 32)
  %t391 = trunc i64 %t380 to i32
  ; r371 := (ssbb_overflows r370 r368 false)
  %t392 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t391, i32 %t389)
  %t393 = extractvalue { i32, i1 } %t392, 1
  ; r372 := (bv_sub r370 r368)
  %t394 = sub i32 %t391, %t389
  ; r373 := (bv_slt r372 (0x0 : bv 32))
  %t395 = icmp slt i32 %t394, 0
  ; r374 := (eq r370 r368)
  %t396 = icmp eq i32 %t391, %t389
  ; r375 := (xor r373 r371)
  %t397 = xor i1 %t395, %t393
  ; r376 := (or r374 r375)
  %t398 = or i1 %t396, %t397
  br i1 %t398, label %block_0_40afc3, label %block_0_40afb8
block_0_40afb8:
  %t399 = phi i64 [ %t380, %block_0_40afb0 ]
  %t400 = phi i64 [ %t381, %block_0_40afb0 ]
  %t401 = phi i64 [ %t390, %block_0_40afb0 ]
  %t402 = phi i64 [ %t382, %block_0_40afb0 ]
  %t403 = phi i64 [ %t384, %block_0_40afb0 ]
  %t404 = phi i64 [ %t385, %block_0_40afb0 ]
  %t405 = phi i64 [ %t386, %block_0_40afb0 ]
  %t406 = phi i512 [ %t387, %block_0_40afb0 ]
  ; r385 := (trunc r379 32)
  %t407 = trunc i64 %t401 to i32
  ; r386 := (uext r385 64)
  %t408 = zext i32 %t407 to i64
  br label %block_0_40afbb
block_0_40afbb:
  %t409 = phi i64 [ %t371, %block_0_40afa3 ], [ %t399, %block_0_40afb8 ]
  %t410 = phi i64 [ %t372, %block_0_40afa3 ], [ %t400, %block_0_40afb8 ]
  %t411 = phi i64 [ 1, %block_0_40afa3 ], [ %t402, %block_0_40afb8 ]
  %t412 = phi i64 [ %t379, %block_0_40afa3 ], [ %t408, %block_0_40afb8 ]
  %t413 = phi i64 [ %t374, %block_0_40afa3 ], [ %t403, %block_0_40afb8 ]
  %t414 = phi i64 [ %t375, %block_0_40afa3 ], [ %t404, %block_0_40afb8 ]
  %t415 = phi i64 [ %t376, %block_0_40afa3 ], [ %t405, %block_0_40afb8 ]
  %t416 = phi i512 [ %t377, %block_0_40afa3 ], [ %t406, %block_0_40afb8 ]
  ; r395 := (trunc r389 32)
  %t417 = trunc i64 %t411 to i32
  ; r396 := (bv_add r395 (0x1 : bv 32))
  %t418 = add i32 %t417, 1
  ; r397 := (uext r396 64)
  %t419 = zext i32 %t418 to i64
  ; r398 := (trunc r391 32)
  %t420 = trunc i64 %t413 to i32
  ; r399 := (eq r396 r398)
  %t421 = icmp eq i32 %t418, %t420
  br i1 %t421, label %block_0_40afc3, label %block_0_40afb0
block_0_40afc3:
  %t422 = phi i64 [ %t205, %block_0_40aea9 ], [ %t340, %block_0_40af83 ], [ %t381, %block_0_40afb0 ], [ %t410, %block_0_40afbb ]
  %t423 = phi i64 [ %t332, %block_0_40aea9 ], [ %t342, %block_0_40af83 ], [ %t383, %block_0_40afb0 ], [ %t412, %block_0_40afbb ]
  %t424 = phi i64 [ %t209, %block_0_40aea9 ], [ %t344, %block_0_40af83 ], [ %t385, %block_0_40afb0 ], [ %t414, %block_0_40afbb ]
  %t425 = phi i64 [ %t210, %block_0_40aea9 ], [ %t345, %block_0_40af83 ], [ %t386, %block_0_40afb0 ], [ %t415, %block_0_40afbb ]
  %t426 = phi i512 [ %t212, %block_0_40aea9 ], [ %t347, %block_0_40af83 ], [ %t387, %block_0_40afb0 ], [ %t416, %block_0_40afbb ]
  ; r405 := (trunc r401 32)
  %t427 = trunc i64 %t423 to i32
  ; r406 := (bv_add r403 (0x10 : bv 64))
  %t428 = add i64 %t425, 16
  ; r407 := (read r406 (bv 64))
  %t429 = inttoptr i64 %t428 to i64*
  %t430 = load i64, i64* %t429
  ; r408 := (bv_add r400 r407)
  %t431 = add i64 %t422, %t430
  ; r409 := (sext r405 128)
  %t432 = sext i32 %t427 to i128
  ; r410 := (bv_mul (0x15180 : bv 128) r409)
  %t433 = mul i128 86400, %t432
  ; r411 := (trunc r410 64)
  %t434 = trunc i128 %t433 to i64
  ; r412 := (bv_add r411 r402)
  %t435 = add i64 %t434, %t424
  ; r413 := (bv_add r408 r412)
  %t436 = add i64 %t431, %t435
  ; r414 := (bitcast r404 (vec 8 double))
  %t437 = bitcast i512 %t426 to <8 x double>
  ; r415 := (tuple r413 r414)
  %t438 = insertvalue { i64, <8 x double> } undef, i64 %t436, 0
  %t439 = insertvalue { i64, <8 x double> } %t438, <8 x double> %t437, 1
  ret { i64, <8 x double> } %t439
}
define { i64, <8 x double> } @leaps_thru_end_of(i64 %arg0, <8 x double> %arg1) {
block_0_40afe0:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (bv_slt r0 (0x0 : bv 32))
  %t1 = icmp slt i32 %t0, 0
  ; r2 := (bitcast arg1 (bv 512))
  %t2 = bitcast <8 x double> %arg1 to i512
  ; r3 := (bitcast arg1 (bv 512))
  %t3 = bitcast <8 x double> %arg1 to i512
  br i1 %t1, label %block_0_40b006, label %block_0_40afe4
block_0_40afe4:
  %t4 = phi i64 [ %arg0, %block_0_40afe0 ]
  %t5 = phi i512 [ %t3, %block_0_40afe0 ]
  ; r6 := (trunc r4 32)
  %t6 = trunc i64 %t4 to i32
  ; r7 := (sext r6 64)
  %t7 = sext i32 %t6 to i64
  ; r8 := (bv_mul r7 (0x51eb851f : bv 64))
  %t8 = mul i64 %t7, 1374389535
  ; r9 := (bv_shr r8 (0x20 : bv 64))
  %t9 = lshr i64 %t8, 32
  ; r10 := (trunc r9 32)
  %t10 = trunc i64 %t9 to i32
  ; r11 := (bv_sar r6 (0x1f : bv 32))
  %t11 = ashr i32 %t6, 31
  ; r12 := (bv_sar r6 (0x2 : bv 32))
  %t12 = ashr i32 %t6, 2
  ; r13 := (bv_sar r10 (0x5 : bv 32))
  %t13 = ashr i32 %t10, 5
  ; r14 := (bv_sar r10 (0x7 : bv 32))
  %t14 = ashr i32 %t10, 7
  ; r15 := (bv_sub r13 r11)
  %t15 = sub i32 %t13, %t11
  ; r16 := (bv_sub r14 r11)
  %t16 = sub i32 %t14, %t11
  ; r17 := (bv_add r16 r12)
  %t17 = add i32 %t16, %t12
  ; r18 := (bv_sub r17 r15)
  %t18 = sub i32 %t17, %t15
  ; r19 := (uext r18 64)
  %t19 = zext i32 %t18 to i64
  ; r20 := (bitcast r5 (vec 8 double))
  %t20 = bitcast i512 %t5 to <8 x double>
  ; r21 := (tuple r19 r20)
  %t21 = insertvalue { i64, <8 x double> } undef, i64 %t19, 0
  %t22 = insertvalue { i64, <8 x double> } %t21, <8 x double> %t20, 1
  ret { i64, <8 x double> } %t22
block_0_40b006:
  %t23 = phi i64 [ %arg0, %block_0_40afe0 ]
  %t24 = phi i512 [ %t2, %block_0_40afe0 ]
  ; r24 := (trunc r22 32)
  %t25 = trunc i64 %t23 to i32
  ; r25 := (bv_complement r24)
  %t26 = xor i32 %t25, -1
  ; r26 := (uext r25 64)
  %t27 = zext i32 %t26 to i64
  ; r27 := (bitcast r23 (vec 8 double))
  %t28 = bitcast i512 %t24 to <8 x double>
  ; r28 := call leaps_thru_end_of(r26, r27)
  %t29 = call { i64, <8 x double> } (i64, <8 x double>) @leaps_thru_end_of(i64 %t27, <8 x double> %t28)
  ; r29 := (tuple_field r28 0)
  %t30 = extractvalue { i64, <8 x double> } %t29, 0
  ; r30 := (tuple_field r28 1)
  %t31 = extractvalue { i64, <8 x double> } %t29, 1
  ; r31 := (bitcast r30 (bv 512))
  %t32 = bitcast <8 x double> %t31 to i512
  br label %block_0_40b00d
block_0_40b00d:
  %t33 = phi i64 [ %t30, %block_0_40b006 ]
  %t34 = phi i512 [ %t32, %block_0_40b006 ]
  ; r34 := (trunc r32 32)
  %t35 = trunc i64 %t33 to i32
  ; r35 := (bv_complement r34)
  %t36 = xor i32 %t35, -1
  ; r36 := (uext r35 64)
  %t37 = zext i32 %t36 to i64
  ; r37 := (bitcast r33 (vec 8 double))
  %t38 = bitcast i512 %t34 to <8 x double>
  ; r38 := (tuple r36 r37)
  %t39 = insertvalue { i64, <8 x double> } undef, i64 %t37, 0
  %t40 = insertvalue { i64, <8 x double> } %t39, <8 x double> %t38, 1
  ret { i64, <8 x double> } %t40
}
define { i64, i64, <8 x double> } @increment_overflow(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_40b010:
  ; r0 := (read arg0 (bv 32))
  %t0 = inttoptr i64 %arg0 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (bv_add arg1 r1)
  %t3 = add i64 %arg1, %t2
  ; r3 := (trunc r2 32)
  %t4 = trunc i64 %t3 to i32
  ; r4 := (ssbb_overflows r0 r3 false)
  %t5 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t1, i32 %t4)
  %t6 = extractvalue { i32, i1 } %t5, 1
  ; r5 := (bv_sub r0 r3)
  %t7 = sub i32 %t1, %t4
  ; r6 := (bv_slt r5 (0x0 : bv 32))
  %t8 = icmp slt i32 %t7, 0
  ; r7 := (eq r0 r3)
  %t9 = icmp eq i32 %t1, %t4
  ; write arg0 r3
  %t10 = inttoptr i64 %arg0 to i32*
  store i32 %t4, i32* %t10
  ; r8 := (not r7)
  %t11 = icmp eq i1 %t9, 0
  ; r9 := (eq r6 r4)
  %t12 = icmp eq i1 %t8, %t6
  ; r10 := (and r8 r9)
  %t13 = and i1 %t11, %t12
  ; r11 := (mux r10 (0x1 : bv 8) (0x0 : bv 8))
  %t14 = select i1 %t13, i8 1, i8 0
  ; r12 := (trunc arg1 32)
  %t15 = trunc i64 %arg1 to i32
  ; r13 := (bv_shr r12 (0x1f : bv 32))
  %t16 = lshr i32 %t15, 31
  ; r14 := (bv_and r3 (0xffffff00 : bv 32))
  %t17 = and i32 %t4, 4294967040
  ; r15 := (uext r11 32)
  %t18 = zext i8 %t14 to i32
  ; r16 := (bv_or r14 r15)
  %t19 = or i32 %t17, %t18
  ; r17 := (bv_xor r16 r13)
  %t20 = xor i32 %t19, %t16
  ; r18 := (trunc r17 8)
  %t21 = trunc i32 %t20 to i8
  ; r19 := (uext r18 64)
  %t22 = zext i8 %t21 to i64
  ; r20 := (bitcast arg2 (bv 512))
  %t23 = bitcast <8 x double> %arg2 to i512
  ; r21 := (bitcast r20 (vec 8 double))
  %t24 = bitcast i512 %t23 to <8 x double>
  ; r22 := (tuple r19 r1 r21)
  %t25 = insertvalue { i64, i64, <8 x double> } undef, i64 %t22, 0
  %t26 = insertvalue { i64, i64, <8 x double> } %t25, i64 %t2, 1
  %t27 = insertvalue { i64, i64, <8 x double> } %t26, <8 x double> %t24, 2
  ret { i64, i64, <8 x double> } %t27
}
define { i64, i64, <8 x double> } @long_increment_overflow(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_40b8f0:
  ; r0 := (read arg0 (bv 64))
  %t0 = inttoptr i64 %arg0 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (trunc arg1 32)
  %t2 = trunc i64 %arg1 to i32
  ; r2 := (sext r1 64)
  %t3 = sext i32 %t2 to i64
  ; r3 := (bv_add r2 r0)
  %t4 = add i64 %t3, %t1
  ; r4 := (ssbb_overflows r0 r3 false)
  %t5 = call { i64, i1 } (i64, i64) @llvm.ssub.with.overflow.i64(i64 %t1, i64 %t4)
  %t6 = extractvalue { i64, i1 } %t5, 1
  ; r5 := (bv_sub r0 r3)
  %t7 = sub i64 %t1, %t4
  ; r6 := (bv_slt r5 (0x0 : bv 64))
  %t8 = icmp slt i64 %t7, 0
  ; r7 := (eq r0 r3)
  %t9 = icmp eq i64 %t1, %t4
  ; write arg0 r3
  %t10 = inttoptr i64 %arg0 to i64*
  store i64 %t4, i64* %t10
  ; r8 := (not r7)
  %t11 = icmp eq i1 %t9, 0
  ; r9 := (eq r6 r4)
  %t12 = icmp eq i1 %t8, %t6
  ; r10 := (and r8 r9)
  %t13 = and i1 %t11, %t12
  ; r11 := (mux r10 (0x1 : bv 8) (0x0 : bv 8))
  %t14 = select i1 %t13, i8 1, i8 0
  ; r12 := (bv_shr r1 (0x1f : bv 32))
  %t15 = lshr i32 %t2, 31
  ; r13 := (trunc r3 32)
  %t16 = trunc i64 %t4 to i32
  ; r14 := (bv_and r13 (0xffffff00 : bv 32))
  %t17 = and i32 %t16, 4294967040
  ; r15 := (uext r11 32)
  %t18 = zext i8 %t14 to i32
  ; r16 := (bv_or r14 r15)
  %t19 = or i32 %t17, %t18
  ; r17 := (bv_xor r16 r12)
  %t20 = xor i32 %t19, %t15
  ; r18 := (trunc r17 8)
  %t21 = trunc i32 %t20 to i8
  ; r19 := (uext r18 64)
  %t22 = zext i8 %t21 to i64
  ; r20 := (bitcast arg2 (bv 512))
  %t23 = bitcast <8 x double> %arg2 to i512
  ; r21 := (bitcast r20 (vec 8 double))
  %t24 = bitcast i512 %t23 to <8 x double>
  ; r22 := (tuple r19 r0 r21)
  %t25 = insertvalue { i64, i64, <8 x double> } undef, i64 %t22, 0
  %t26 = insertvalue { i64, i64, <8 x double> } %t25, i64 %t1, 1
  %t27 = insertvalue { i64, i64, <8 x double> } %t26, <8 x double> %t24, 2
  ret { i64, i64, <8 x double> } %t27
}
define { i64, i64, <8 x double> } @normalize_overflow(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40b910:
  ; r0 := (read arg1 (bv 32))
  %t0 = inttoptr i64 %arg1 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (trunc arg2 32)
  %t3 = trunc i64 %arg2 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (bv_slt r0 (0x0 : bv 32))
  %t5 = icmp slt i32 %t1, 0
  ; r5 := (bitcast arg3 (bv 512))
  %t6 = bitcast <8 x double> %arg3 to i512
  ; r6 := (bitcast arg3 (bv 512))
  %t7 = bitcast <8 x double> %arg3 to i512
  br i1 %t5, label %block_0_40b940, label %block_0_40b919
block_0_40b919:
  %t8 = phi i64 [ %t2, %block_0_40b910 ]
  %t9 = phi i64 [ %arg1, %block_0_40b910 ]
  %t10 = phi i64 [ %arg0, %block_0_40b910 ]
  %t11 = phi i64 [ %t4, %block_0_40b910 ]
  %t12 = phi i512 [ %t7, %block_0_40b910 ]
  ; r12 := (trunc r7 32)
  %t13 = trunc i64 %t8 to i32
  ; r13 := (bv_sar r12 (0x1f : bv 32))
  %t14 = ashr i32 %t13, 31
  ; r14 := (trunc r10 32)
  %t15 = trunc i64 %t11 to i32
  ; r15 := (idiv 32 r13 r12 r14)
  %t16 = call { i32, i32 } (i32, i32, i32) asm sideeffect "idiv $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i32 %t14, i32 %t13, i32 %t15)
  ; r16 := (tuple_field r15 0)
  %t17 = extractvalue { i32, i32 } %t16, 0
  ; r17 := (uext r16 64)
  %t18 = zext i32 %t17 to i64
  br label %block_0_40b926
block_0_40b926:
  %t19 = phi i64 [ %t8, %block_0_40b919 ], [ %t37, %block_0_40b940 ]
  %t20 = phi i64 [ %t9, %block_0_40b919 ], [ %t38, %block_0_40b940 ]
  %t21 = phi i64 [ %t10, %block_0_40b919 ], [ %t39, %block_0_40b940 ]
  %t22 = phi i64 [ %t18, %block_0_40b919 ], [ %t49, %block_0_40b940 ]
  %t23 = phi i64 [ %t11, %block_0_40b919 ], [ %t40, %block_0_40b940 ]
  %t24 = phi i512 [ %t12, %block_0_40b919 ], [ %t41, %block_0_40b940 ]
  ; r24 := (trunc r22 32)
  %t25 = trunc i64 %t23 to i32
  ; r25 := (trunc r21 32)
  %t26 = trunc i64 %t22 to i32
  ; r26 := (sext r25 64)
  %t27 = sext i32 %t26 to i64
  ; r27 := (sext r24 64)
  %t28 = sext i32 %t25 to i64
  ; r28 := (bv_mul r26 r27)
  %t29 = mul i64 %t27, %t28
  ; r29 := (trunc r28 32)
  %t30 = trunc i64 %t29 to i32
  ; r30 := (trunc r18 32)
  %t31 = trunc i64 %t19 to i32
  ; r31 := (bv_sub r30 r29)
  %t32 = sub i32 %t31, %t30
  ; write r19 r31
  %t33 = inttoptr i64 %t20 to i32*
  store i32 %t32, i32* %t33
  ; r32 := (uext r25 64)
  %t34 = zext i32 %t26 to i64
  ; r33 := (bitcast r23 (vec 8 double))
  %t35 = bitcast i512 %t24 to <8 x double>
  %t36 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @increment_overflow(i64 %t21, i64 %t34, <8 x double> %t35)
  ret { i64, i64, <8 x double> } %t36
block_0_40b940:
  %t37 = phi i64 [ %t2, %block_0_40b910 ]
  %t38 = phi i64 [ %arg1, %block_0_40b910 ]
  %t39 = phi i64 [ %arg0, %block_0_40b910 ]
  %t40 = phi i64 [ %t4, %block_0_40b910 ]
  %t41 = phi i512 [ %t6, %block_0_40b910 ]
  ; r39 := (trunc r34 32)
  %t42 = trunc i64 %t37 to i32
  ; r40 := (bv_complement r39)
  %t43 = xor i32 %t42, -1
  ; r41 := (bv_sar r40 (0x1f : bv 32))
  %t44 = ashr i32 %t43, 31
  ; r42 := (trunc r37 32)
  %t45 = trunc i64 %t40 to i32
  ; r43 := (idiv 32 r41 r40 r42)
  %t46 = call { i32, i32 } (i32, i32, i32) asm sideeffect "idiv $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i32 %t44, i32 %t43, i32 %t45)
  ; r44 := (tuple_field r43 0)
  %t47 = extractvalue { i32, i32 } %t46, 0
  ; r45 := (bv_complement r44)
  %t48 = xor i32 %t47, -1
  ; r46 := (uext r45 64)
  %t49 = zext i32 %t48 to i64
  br label %block_0_40b926
}
define { i64, i64, <8 x double> } @tmcomp(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40b960:
  ; r0 := (bv_add arg0 (0x14 : bv 64))
  %t0 = add i64 %arg0, 20
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (bv_add arg1 (0x14 : bv 64))
  %t3 = add i64 %arg1, 20
  ; r3 := (read r2 (bv 32))
  %t4 = inttoptr i64 %t3 to i32*
  %t5 = load i32, i32* %t4
  ; r4 := (bv_sub r1 r3)
  %t6 = sub i32 %t2, %t5
  ; r5 := (eq r1 r3)
  %t7 = icmp eq i32 %t2, %t5
  ; r6 := (uext r4 64)
  %t8 = zext i32 %t6 to i64
  ; r7 := (bitcast arg3 (bv 512))
  %t9 = bitcast <8 x double> %arg3 to i512
  ; r8 := (bitcast arg3 (bv 512))
  %t10 = bitcast <8 x double> %arg3 to i512
  br i1 %t7, label %block_0_40b968, label %block_0_40b990
block_0_40b968:
  %t11 = phi i64 [ %arg2, %block_0_40b960 ]
  %t12 = phi i64 [ %arg1, %block_0_40b960 ]
  %t13 = phi i64 [ %arg0, %block_0_40b960 ]
  %t14 = phi i512 [ %t9, %block_0_40b960 ]
  ; r13 := (bv_add r11 (0x10 : bv 64))
  %t15 = add i64 %t13, 16
  ; r14 := (read r13 (bv 32))
  %t16 = inttoptr i64 %t15 to i32*
  %t17 = load i32, i32* %t16
  ; r15 := (bv_add r10 (0x10 : bv 64))
  %t18 = add i64 %t12, 16
  ; r16 := (read r15 (bv 32))
  %t19 = inttoptr i64 %t18 to i32*
  %t20 = load i32, i32* %t19
  ; r17 := (bv_sub r14 r16)
  %t21 = sub i32 %t17, %t20
  ; r18 := (eq r14 r16)
  %t22 = icmp eq i32 %t17, %t20
  ; r19 := (uext r17 64)
  %t23 = zext i32 %t21 to i64
  br i1 %t22, label %block_0_40b970, label %block_0_40b990
block_0_40b970:
  %t24 = phi i64 [ %t11, %block_0_40b968 ]
  %t25 = phi i64 [ %t12, %block_0_40b968 ]
  %t26 = phi i64 [ %t13, %block_0_40b968 ]
  %t27 = phi i512 [ %t14, %block_0_40b968 ]
  ; r24 := (bv_add r22 (0xc : bv 64))
  %t28 = add i64 %t26, 12
  ; r25 := (read r24 (bv 32))
  %t29 = inttoptr i64 %t28 to i32*
  %t30 = load i32, i32* %t29
  ; r26 := (bv_add r21 (0xc : bv 64))
  %t31 = add i64 %t25, 12
  ; r27 := (read r26 (bv 32))
  %t32 = inttoptr i64 %t31 to i32*
  %t33 = load i32, i32* %t32
  ; r28 := (bv_sub r25 r27)
  %t34 = sub i32 %t30, %t33
  ; r29 := (eq r25 r27)
  %t35 = icmp eq i32 %t30, %t33
  ; r30 := (uext r28 64)
  %t36 = zext i32 %t34 to i64
  br i1 %t35, label %block_0_40b978, label %block_0_40b990
block_0_40b978:
  %t37 = phi i64 [ %t24, %block_0_40b970 ]
  %t38 = phi i64 [ %t25, %block_0_40b970 ]
  %t39 = phi i64 [ %t26, %block_0_40b970 ]
  %t40 = phi i512 [ %t27, %block_0_40b970 ]
  ; r35 := (bv_add r33 (0x8 : bv 64))
  %t41 = add i64 %t39, 8
  ; r36 := (read r35 (bv 32))
  %t42 = inttoptr i64 %t41 to i32*
  %t43 = load i32, i32* %t42
  ; r37 := (bv_add r32 (0x8 : bv 64))
  %t44 = add i64 %t38, 8
  ; r38 := (read r37 (bv 32))
  %t45 = inttoptr i64 %t44 to i32*
  %t46 = load i32, i32* %t45
  ; r39 := (bv_sub r36 r38)
  %t47 = sub i32 %t43, %t46
  ; r40 := (eq r36 r38)
  %t48 = icmp eq i32 %t43, %t46
  ; r41 := (uext r39 64)
  %t49 = zext i32 %t47 to i64
  br i1 %t48, label %block_0_40b980, label %block_0_40b990
block_0_40b980:
  %t50 = phi i64 [ %t37, %block_0_40b978 ]
  %t51 = phi i64 [ %t38, %block_0_40b978 ]
  %t52 = phi i64 [ %t39, %block_0_40b978 ]
  %t53 = phi i512 [ %t40, %block_0_40b978 ]
  ; r46 := (bv_add r44 (0x4 : bv 64))
  %t54 = add i64 %t52, 4
  ; r47 := (read r46 (bv 32))
  %t55 = inttoptr i64 %t54 to i32*
  %t56 = load i32, i32* %t55
  ; r48 := (bv_add r43 (0x4 : bv 64))
  %t57 = add i64 %t51, 4
  ; r49 := (read r48 (bv 32))
  %t58 = inttoptr i64 %t57 to i32*
  %t59 = load i32, i32* %t58
  ; r50 := (bv_sub r47 r49)
  %t60 = sub i32 %t56, %t59
  ; r51 := (eq r47 r49)
  %t61 = icmp eq i32 %t56, %t59
  ; r52 := (uext r50 64)
  %t62 = zext i32 %t60 to i64
  br i1 %t61, label %block_0_40b988, label %block_0_40b990
block_0_40b988:
  %t63 = phi i64 [ %t50, %block_0_40b980 ]
  %t64 = phi i64 [ %t51, %block_0_40b980 ]
  %t65 = phi i64 [ %t52, %block_0_40b980 ]
  %t66 = phi i512 [ %t53, %block_0_40b980 ]
  ; r57 := (read r55 (bv 32))
  %t67 = inttoptr i64 %t65 to i32*
  %t68 = load i32, i32* %t67
  ; r58 := (read r54 (bv 32))
  %t69 = inttoptr i64 %t64 to i32*
  %t70 = load i32, i32* %t69
  ; r59 := (bv_sub r57 r58)
  %t71 = sub i32 %t68, %t70
  ; r60 := (uext r59 64)
  %t72 = zext i32 %t71 to i64
  br label %block_0_40b990
block_0_40b990:
  %t73 = phi i64 [ %t8, %block_0_40b960 ], [ %t23, %block_0_40b968 ], [ %t36, %block_0_40b970 ], [ %t49, %block_0_40b978 ], [ %t62, %block_0_40b980 ], [ %t72, %block_0_40b988 ]
  %t74 = phi i64 [ %arg2, %block_0_40b960 ], [ %t11, %block_0_40b968 ], [ %t24, %block_0_40b970 ], [ %t37, %block_0_40b978 ], [ %t50, %block_0_40b980 ], [ %t63, %block_0_40b988 ]
  %t75 = phi i512 [ %t10, %block_0_40b960 ], [ %t14, %block_0_40b968 ], [ %t27, %block_0_40b970 ], [ %t40, %block_0_40b978 ], [ %t53, %block_0_40b980 ], [ %t66, %block_0_40b988 ]
  ; r64 := (bitcast r63 (vec 8 double))
  %t76 = bitcast i512 %t75 to <8 x double>
  ; r65 := (tuple r61 r62 r64)
  %t77 = insertvalue { i64, i64, <8 x double> } undef, i64 %t73, 0
  %t78 = insertvalue { i64, i64, <8 x double> } %t77, i64 %t74, 1
  %t79 = insertvalue { i64, i64, <8 x double> } %t78, <8 x double> %t76, 2
  ret { i64, i64, <8 x double> } %t79
}
define { i64, i64, <8 x double> } @time2(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_40c0a0:
  ; r0 := (bitcast arg4 (bv 512))
  %t0 = bitcast <8 x double> %arg4 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call time2sub(arg0, arg1, arg2, arg3, (0x0 : bv 64), r1)
  %t2 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, <8 x double>) @time2sub(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 0, <8 x double> %t1)
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, i64, <8 x double> } %t2, 1
  ; r5 := (tuple_field r2 2)
  %t5 = extractvalue { i64, i64, <8 x double> } %t2, 2
  ; r6 := (bitcast r5 (bv 512))
  %t6 = bitcast <8 x double> %t5 to i512
  br label %block_0_40c0cc
block_0_40c0cc:
  %t7 = phi i64 [ %t3, %block_0_40c0a0 ]
  %t8 = phi i64 [ %t4, %block_0_40c0a0 ]
  %t9 = phi i64 [ %arg3, %block_0_40c0a0 ]
  %t10 = phi i64 [ %arg2, %block_0_40c0a0 ]
  %t11 = phi i64 [ %arg1, %block_0_40c0a0 ]
  %t12 = phi i64 [ %arg0, %block_0_40c0a0 ]
  %t13 = phi i512 [ %t6, %block_0_40c0a0 ]
  ; r14 := (read r9 (bv 32))
  %t14 = inttoptr i64 %t9 to i32*
  %t15 = load i32, i32* %t14
  ; r15 := (eq r14 (0x0 : bv 32))
  %t16 = icmp eq i32 %t15, 0
  br i1 %t16, label %block_0_40c0f0, label %block_0_40c0d4
block_0_40c0d4:
  %t17 = phi i64 [ %t7, %block_0_40c0cc ]
  %t18 = phi i64 [ %t8, %block_0_40c0cc ]
  %t19 = phi i512 [ %t13, %block_0_40c0cc ]
  ; r19 := (bitcast r18 (vec 8 double))
  %t20 = bitcast i512 %t19 to <8 x double>
  ; r20 := (tuple r16 r17 r19)
  %t21 = insertvalue { i64, i64, <8 x double> } undef, i64 %t17, 0
  %t22 = insertvalue { i64, i64, <8 x double> } %t21, i64 %t18, 1
  %t23 = insertvalue { i64, i64, <8 x double> } %t22, <8 x double> %t20, 2
  ret { i64, i64, <8 x double> } %t23
block_0_40c0f0:
  %t24 = phi i64 [ %t9, %block_0_40c0cc ]
  %t25 = phi i64 [ %t10, %block_0_40c0cc ]
  %t26 = phi i64 [ %t11, %block_0_40c0cc ]
  %t27 = phi i64 [ %t12, %block_0_40c0cc ]
  %t28 = phi i512 [ %t13, %block_0_40c0cc ]
  ; r26 := (bitcast r25 (vec 8 double))
  %t29 = bitcast i512 %t28 to <8 x double>
  %t30 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, <8 x double>) @time2sub(i64 %t27, i64 %t26, i64 %t25, i64 %t24, i64 1, <8 x double> %t29)
  ret { i64, i64, <8 x double> } %t30
}
define i64 @leapcorr(i64 %arg0) {
block_0_40c120:
  ; r0 := (read (0x635be0 : bv 64) (bv 32))
  %t0 = inttoptr i64 6511584 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (bv_add r1 (0xffffffffffffffff : bv 64))
  %t3 = add i64 %t2, 18446744073709551615
  ; r3 := (trunc r2 32)
  %t4 = trunc i64 %t3 to i32
  ; r4 := (sext r3 64)
  %t5 = sext i32 %t4 to i64
  ; r5 := (bv_shl r4 (0x4 : bv 64))
  %t6 = shl i64 %t5, 4
  ; r6 := (bv_add r5 (0x63a028 : bv 64))
  %t7 = add i64 %t6, 6529064
  br label %block_0_40c143
block_0_40c140:
  %t8 = phi i64 [ %t20, %block_0_40c148 ]
  %t9 = phi i64 [ %t26, %block_0_40c148 ]
  %t10 = phi i64 [ %t33, %block_0_40c148 ]
  %t11 = phi i64 [ %t22, %block_0_40c148 ]
  br label %block_0_40c143
block_0_40c143:
  %t12 = phi i64 [ %t2, %block_0_40c120 ], [ %t8, %block_0_40c140 ]
  %t13 = phi i64 [ %t7, %block_0_40c120 ], [ %t9, %block_0_40c140 ]
  %t14 = phi i64 [ %arg0, %block_0_40c120 ], [ %t11, %block_0_40c140 ]
  %t15 = phi i64 [ %t5, %block_0_40c120 ], [ %t10, %block_0_40c140 ]
  ; r15 := (trunc r11 32)
  %t16 = trunc i64 %t12 to i32
  ; r16 := (bv_add r15 (0xffffffff : bv 32))
  %t17 = add i32 %t16, 4294967295
  ; r17 := (bv_slt r16 (0x0 : bv 32))
  %t18 = icmp slt i32 %t17, 0
  ; r18 := (uext r16 64)
  %t19 = zext i32 %t17 to i64
  br i1 %t18, label %block_0_40c164, label %block_0_40c148
block_0_40c148:
  %t20 = phi i64 [ %t19, %block_0_40c143 ]
  %t21 = phi i64 [ %t13, %block_0_40c143 ]
  %t22 = phi i64 [ %t14, %block_0_40c143 ]
  %t23 = phi i64 [ %t15, %block_0_40c143 ]
  ; r23 := (read r20 (bv 64))
  %t24 = inttoptr i64 %t21 to i64*
  %t25 = load i64, i64* %t24
  ; r24 := (bv_add r20 (0xfffffffffffffff0 : bv 64))
  %t26 = add i64 %t21, 18446744073709551600
  ; r25 := (read r21 (bv 64))
  %t27 = inttoptr i64 %t22 to i64*
  %t28 = load i64, i64* %t27
  ; r26 := (ssbb_overflows r25 r23 false)
  %t29 = call { i64, i1 } (i64, i64) @llvm.ssub.with.overflow.i64(i64 %t28, i64 %t25)
  %t30 = extractvalue { i64, i1 } %t29, 1
  ; r27 := (bv_sub r25 r23)
  %t31 = sub i64 %t28, %t25
  ; r28 := (bv_slt r27 (0x0 : bv 64))
  %t32 = icmp slt i64 %t31, 0
  ; r29 := (bv_add r22 (0xffffffffffffffff : bv 64))
  %t33 = add i64 %t23, 18446744073709551615
  ; r30 := (xor r28 r26)
  %t34 = xor i1 %t32, %t30
  br i1 %t34, label %block_0_40c140, label %block_0_40c158
block_0_40c158:
  %t35 = phi i64 [ %t23, %block_0_40c148 ]
  ; r32 := (bv_shl r31 (0x4 : bv 64))
  %t36 = shl i64 %t35, 4
  ; r33 := (bv_add r32 (0x63a030 : bv 64))
  %t37 = add i64 %t36, 6529072
  ; r34 := (read r33 (bv 64))
  %t38 = inttoptr i64 %t37 to i64*
  %t39 = load i64, i64* %t38
  ret i64 %t39
block_0_40c164:
  ret i64 0
}
define void @timeoff(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_40c3e0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg2 (bv 512))
  %t1 = bitcast <8 x double> %arg2 to i512
  ; r2 := (bitcast arg2 (bv 512))
  %t2 = bitcast <8 x double> %arg2 to i512
  br i1 %t0, label %block_0_40c3ec, label %block_0_40c3e5
block_0_40c3e5:
  %t3 = phi i64 [ %arg1, %block_0_40c3e0 ]
  %t4 = phi i64 [ %arg0, %block_0_40c3e0 ]
  %t5 = phi i512 [ %t2, %block_0_40c3e0 ]
  ; r6 := (bv_add r4 (0x20 : bv 64))
  %t6 = add i64 %t4, 32
  ; write r6 (0x0 : bv 32)
  %t7 = inttoptr i64 %t6 to i32*
  store i32 0, i32* %t7
  br label %block_0_40c3ec
block_0_40c3ec:
  %t8 = phi i64 [ %arg1, %block_0_40c3e0 ], [ %t3, %block_0_40c3e5 ]
  %t9 = phi i64 [ %arg0, %block_0_40c3e0 ], [ %t4, %block_0_40c3e5 ]
  %t10 = phi i512 [ %t1, %block_0_40c3e0 ], [ %t5, %block_0_40c3e5 ]
  ; r10 := (bitcast r9 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r11 := call time1(r8, (0x40c420 : bv 64), r7, r10)
  %t12 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @time1(i64 %t9, i64 4244512, i64 %t8, <8 x double> %t11)
  ret void
}
define void @timegm(i64 %arg0, <8 x double> %arg1) {
block_0_40c400:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg1 (bv 512))
  %t1 = bitcast <8 x double> %arg1 to i512
  ; r2 := (bitcast arg1 (bv 512))
  %t2 = bitcast <8 x double> %arg1 to i512
  br i1 %t0, label %block_0_40c40c, label %block_0_40c405
block_0_40c405:
  %t3 = phi i64 [ %arg0, %block_0_40c400 ]
  %t4 = phi i512 [ %t2, %block_0_40c400 ]
  ; r5 := (bv_add r3 (0x20 : bv 64))
  %t5 = add i64 %t3, 32
  ; write r5 (0x0 : bv 32)
  %t6 = inttoptr i64 %t5 to i32*
  store i32 0, i32* %t6
  br label %block_0_40c40c
block_0_40c40c:
  %t7 = phi i64 [ %arg0, %block_0_40c400 ], [ %t3, %block_0_40c405 ]
  %t8 = phi i512 [ %t1, %block_0_40c400 ], [ %t4, %block_0_40c405 ]
  ; r8 := (bitcast r7 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r9 := call time1(r6, (0x40c420 : bv 64), (0x0 : bv 64), r8)
  %t10 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @time1(i64 %t7, i64 4244512, i64 0, <8 x double> %t9)
  ret void
}
define void @gmtsub(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40c420:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call _once((0x635ba0 : bv 64), (0x40d5a0 : bv 64), arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_once(i64 6511520, i64 4248992, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ; r17 := (tuple_field r16 0)
  %t17 = extractvalue { i64, i64, <8 x double> } %t16, 0
  ; r18 := (tuple_field r16 1)
  %t18 = extractvalue { i64, i64, <8 x double> } %t16, 1
  ; r19 := (tuple_field r16 2)
  %t19 = extractvalue { i64, i64, <8 x double> } %t16, 2
  ; r20 := (bitcast r19 (bv 512))
  %t20 = bitcast <8 x double> %t19 to i512
  br label %block_0_40c44b
block_0_40c44b:
  %t21 = phi i64 [ %arg1, %block_0_40c420 ]
  %t22 = phi i64 [ %arg0, %block_0_40c420 ]
  %t23 = phi i64 [ %arg2, %block_0_40c420 ]
  %t24 = phi i512 [ %t20, %block_0_40c420 ]
  ; r25 := (bitcast r24 (vec 8 double))
  %t25 = bitcast i512 %t24 to <8 x double>
  ; r26 := call timesub(r22, r21, (0x63a360 : bv 64), r23, r25)
  %t26 = call { i64, <8 x double> } (i64, i64, i64, i64, <8 x double>) @timesub(i64 %t22, i64 %t21, i64 6529888, i64 %t23, <8 x double> %t25)
  ; r27 := (tuple_field r26 0)
  %t27 = extractvalue { i64, <8 x double> } %t26, 0
  ; r28 := (tuple_field r26 1)
  %t28 = extractvalue { i64, <8 x double> } %t26, 1
  ; r29 := (bitcast r28 (bv 512))
  %t29 = bitcast <8 x double> %t28 to i512
  br label %block_0_40c45e
block_0_40c45e:
  %t30 = phi i64 [ %t21, %block_0_40c44b ]
  %t31 = phi i64 [ %t23, %block_0_40c44b ]
  ; r32 := (eq r30 (0x0 : bv 64))
  %t32 = icmp eq i64 %t30, 0
  ; r33 := (mux r32 (0x63e5a8 : bv 64) (0x630180 : bv 64))
  %t33 = select i1 %t32, i64 6546856, i64 6488448
  ; r34 := (bv_add r31 (0x30 : bv 64))
  %t34 = add i64 %t31, 48
  ; write r34 r33
  %t35 = inttoptr i64 %t34 to i64*
  store i64 %t33, i64* %t35
  ret void
}
define void @offtime(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40c490:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  call void (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @gmtsub(i64 %arg0, i64 %arg1, i64 6548480, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define void @gmtime_r(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40c4a0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  call void (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @gmtsub(i64 %arg0, i64 0, i64 %arg1, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define { i64, i64, <8 x double> } @typesequiv(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40c4b0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg6 (bv 512))
  %t1 = bitcast <8 x double> %arg6 to i512
  ; r2 := (bitcast arg6 (bv 512))
  %t2 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg7 (bv 512))
  %t3 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t5 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t6 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t7 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t8 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t9 = bitcast <8 x double> %arg13 to i512
  br i1 %t0, label %block_0_40c500, label %block_0_40c4b6
block_0_40c4b6:
  %t10 = phi i64 [ %arg2, %block_0_40c4b0 ]
  %t11 = phi i64 [ %arg1, %block_0_40c4b0 ]
  %t12 = phi i64 [ %arg0, %block_0_40c4b0 ]
  %t13 = phi i64 [ %arg5, %block_0_40c4b0 ]
  %t14 = phi i512 [ %t2, %block_0_40c4b0 ]
  %t15 = phi i512 [ %t3, %block_0_40c4b0 ]
  %t16 = phi i512 [ %t4, %block_0_40c4b0 ]
  %t17 = phi i512 [ %t5, %block_0_40c4b0 ]
  %t18 = phi i512 [ %t6, %block_0_40c4b0 ]
  %t19 = phi i512 [ %t7, %block_0_40c4b0 ]
  %t20 = phi i512 [ %t8, %block_0_40c4b0 ]
  %t21 = phi i512 [ %t9, %block_0_40c4b0 ]
  ; r22 := (trunc r11 32)
  %t22 = trunc i64 %t11 to i32
  ; r23 := (bv_slt r22 (0x0 : bv 32))
  %t23 = icmp slt i32 %t22, 0
  br i1 %t23, label %block_0_40c500, label %block_0_40c4ba
block_0_40c4ba:
  %t24 = phi i64 [ %t10, %block_0_40c4b6 ]
  %t25 = phi i64 [ %t11, %block_0_40c4b6 ]
  %t26 = phi i64 [ %t12, %block_0_40c4b6 ]
  %t27 = phi i64 [ %t13, %block_0_40c4b6 ]
  %t28 = phi i512 [ %t14, %block_0_40c4b6 ]
  %t29 = phi i512 [ %t15, %block_0_40c4b6 ]
  %t30 = phi i512 [ %t16, %block_0_40c4b6 ]
  %t31 = phi i512 [ %t17, %block_0_40c4b6 ]
  %t32 = phi i512 [ %t18, %block_0_40c4b6 ]
  %t33 = phi i512 [ %t19, %block_0_40c4b6 ]
  %t34 = phi i512 [ %t20, %block_0_40c4b6 ]
  %t35 = phi i512 [ %t21, %block_0_40c4b6 ]
  ; r36 := (bv_add r26 (0x8 : bv 64))
  %t36 = add i64 %t26, 8
  ; r37 := (read r36 (bv 32))
  %t37 = inttoptr i64 %t36 to i32*
  %t38 = load i32, i32* %t37
  ; r38 := (uext r37 64)
  %t39 = zext i32 %t38 to i64
  ; r39 := (trunc r25 32)
  %t40 = trunc i64 %t25 to i32
  ; r40 := (ssbb_overflows r37 r39 false)
  %t41 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t38, i32 %t40)
  %t42 = extractvalue { i32, i1 } %t41, 1
  ; r41 := (bv_sub r37 r39)
  %t43 = sub i32 %t38, %t40
  ; r42 := (bv_slt r41 (0x0 : bv 32))
  %t44 = icmp slt i32 %t43, 0
  ; r43 := (eq r37 r39)
  %t45 = icmp eq i32 %t38, %t40
  ; r44 := (xor r42 r40)
  %t46 = xor i1 %t44, %t42
  ; r45 := (or r43 r44)
  %t47 = or i1 %t45, %t46
  br i1 %t47, label %block_0_40c500, label %block_0_40c4c1
block_0_40c4c1:
  %t48 = phi i64 [ %t39, %block_0_40c4ba ]
  %t49 = phi i64 [ %t24, %block_0_40c4ba ]
  %t50 = phi i64 [ %t25, %block_0_40c4ba ]
  %t51 = phi i64 [ %t26, %block_0_40c4ba ]
  %t52 = phi i64 [ %t27, %block_0_40c4ba ]
  %t53 = phi i512 [ %t28, %block_0_40c4ba ]
  %t54 = phi i512 [ %t29, %block_0_40c4ba ]
  %t55 = phi i512 [ %t30, %block_0_40c4ba ]
  %t56 = phi i512 [ %t31, %block_0_40c4ba ]
  %t57 = phi i512 [ %t32, %block_0_40c4ba ]
  %t58 = phi i512 [ %t33, %block_0_40c4ba ]
  %t59 = phi i512 [ %t34, %block_0_40c4ba ]
  %t60 = phi i512 [ %t35, %block_0_40c4ba ]
  ; r59 := (trunc r47 32)
  %t61 = trunc i64 %t49 to i32
  ; r60 := (bv_slt r59 (0x0 : bv 32))
  %t62 = icmp slt i32 %t61, 0
  br i1 %t62, label %block_0_40c500, label %block_0_40c4c5
block_0_40c4c5:
  %t63 = phi i64 [ %t48, %block_0_40c4c1 ]
  %t64 = phi i64 [ %t49, %block_0_40c4c1 ]
  %t65 = phi i64 [ %t50, %block_0_40c4c1 ]
  %t66 = phi i64 [ %t51, %block_0_40c4c1 ]
  %t67 = phi i64 [ %t52, %block_0_40c4c1 ]
  %t68 = phi i512 [ %t53, %block_0_40c4c1 ]
  %t69 = phi i512 [ %t54, %block_0_40c4c1 ]
  %t70 = phi i512 [ %t55, %block_0_40c4c1 ]
  %t71 = phi i512 [ %t56, %block_0_40c4c1 ]
  %t72 = phi i512 [ %t57, %block_0_40c4c1 ]
  %t73 = phi i512 [ %t58, %block_0_40c4c1 ]
  %t74 = phi i512 [ %t59, %block_0_40c4c1 ]
  %t75 = phi i512 [ %t60, %block_0_40c4c1 ]
  ; r74 := (trunc r61 32)
  %t76 = trunc i64 %t63 to i32
  ; r75 := (trunc r62 32)
  %t77 = trunc i64 %t64 to i32
  ; r76 := (ssbb_overflows r74 r75 false)
  %t78 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t76, i32 %t77)
  %t79 = extractvalue { i32, i1 } %t78, 1
  ; r77 := (bv_sub r74 r75)
  %t80 = sub i32 %t76, %t77
  ; r78 := (bv_slt r77 (0x0 : bv 32))
  %t81 = icmp slt i32 %t80, 0
  ; r79 := (eq r74 r75)
  %t82 = icmp eq i32 %t76, %t77
  ; r80 := (xor r78 r76)
  %t83 = xor i1 %t81, %t79
  ; r81 := (or r79 r80)
  %t84 = or i1 %t82, %t83
  br i1 %t84, label %block_0_40c500, label %block_0_40c4c9
block_0_40c4c9:
  %t85 = phi i64 [ %t64, %block_0_40c4c5 ]
  %t86 = phi i64 [ %t65, %block_0_40c4c5 ]
  %t87 = phi i64 [ %t66, %block_0_40c4c5 ]
  %t88 = phi i64 [ %t67, %block_0_40c4c5 ]
  %t89 = phi i512 [ %t68, %block_0_40c4c5 ]
  %t90 = phi i512 [ %t69, %block_0_40c4c5 ]
  %t91 = phi i512 [ %t70, %block_0_40c4c5 ]
  %t92 = phi i512 [ %t71, %block_0_40c4c5 ]
  %t93 = phi i512 [ %t72, %block_0_40c4c5 ]
  %t94 = phi i512 [ %t73, %block_0_40c4c5 ]
  %t95 = phi i512 [ %t74, %block_0_40c4c5 ]
  %t96 = phi i512 [ %t75, %block_0_40c4c5 ]
  ; r94 := (trunc r83 32)
  %t97 = trunc i64 %t86 to i32
  ; r95 := (sext r94 64)
  %t98 = sext i32 %t97 to i64
  ; r96 := (trunc r82 32)
  %t99 = trunc i64 %t85 to i32
  ; r97 := (sext r96 64)
  %t100 = sext i32 %t99 to i64
  ; r98 := (bv_mul (0x2 : bv 64) r95)
  %t101 = mul i64 2, %t98
  ; r99 := (bv_add r95 r98)
  %t102 = add i64 %t98, %t101
  ; r100 := (bv_mul (0x2 : bv 64) r97)
  %t103 = mul i64 2, %t100
  ; r101 := (bv_add r97 r100)
  %t104 = add i64 %t100, %t103
  ; r102 := (bv_mul (0x8 : bv 64) r99)
  %t105 = mul i64 8, %t102
  ; r103 := (bv_shl r101 (0x3 : bv 64))
  %t106 = shl i64 %t104, 3
  ; r104 := (bv_add r103 r84)
  %t107 = add i64 %t106, %t87
  ; r105 := (bv_add r102 r84)
  %t108 = add i64 %t105, %t87
  ; r106 := (bv_add r104 (0x2a48 : bv 64))
  %t109 = add i64 %t107, 10824
  ; r107 := (read r106 (bv 64))
  %t110 = inttoptr i64 %t109 to i64*
  %t111 = load i64, i64* %t110
  ; r108 := (bv_add r105 (0x2a48 : bv 64))
  %t112 = add i64 %t108, 10824
  ; r109 := (read r108 (bv 64))
  %t113 = inttoptr i64 %t112 to i64*
  %t114 = load i64, i64* %t113
  ; r110 := (eq r109 r107)
  %t115 = icmp eq i64 %t114, %t111
  br i1 %t115, label %block_0_40c504, label %block_0_40c4fb
block_0_40c4fb:
  %t116 = phi i64 [ %t106, %block_0_40c4c9 ]
  %t117 = phi i512 [ %t89, %block_0_40c4c9 ]
  br label %block_0_40c500
block_0_40c500:
  %t118 = phi i64 [ %arg2, %block_0_40c4b0 ], [ %t10, %block_0_40c4b6 ], [ %t24, %block_0_40c4ba ], [ %t49, %block_0_40c4c1 ], [ %t64, %block_0_40c4c5 ], [ %t116, %block_0_40c4fb ], [ %t126, %block_0_40c504 ], [ %t148, %block_0_40c51b ]
  %t119 = phi i512 [ %t1, %block_0_40c4b0 ], [ %t14, %block_0_40c4b6 ], [ %t28, %block_0_40c4ba ], [ %t53, %block_0_40c4c1 ], [ %t68, %block_0_40c4c5 ], [ %t117, %block_0_40c4fb ], [ %t130, %block_0_40c504 ], [ %t153, %block_0_40c51b ]
  ; r115 := (bitcast r114 (vec 8 double))
  %t120 = bitcast i512 %t119 to <8 x double>
  ; r116 := (tuple (0x0 : bv 64) r113 r115)
  %t121 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t122 = insertvalue { i64, i64, <8 x double> } %t121, i64 %t118, 1
  %t123 = insertvalue { i64, i64, <8 x double> } %t122, <8 x double> %t120, 2
  ret { i64, i64, <8 x double> } %t123
block_0_40c504:
  %t124 = phi i64 [ %t107, %block_0_40c4c9 ]
  %t125 = phi i64 [ %t108, %block_0_40c4c9 ]
  %t126 = phi i64 [ %t106, %block_0_40c4c9 ]
  %t127 = phi i64 [ %t105, %block_0_40c4c9 ]
  %t128 = phi i64 [ %t87, %block_0_40c4c9 ]
  %t129 = phi i64 [ %t88, %block_0_40c4c9 ]
  %t130 = phi i512 [ %t89, %block_0_40c4c9 ]
  %t131 = phi i512 [ %t90, %block_0_40c4c9 ]
  %t132 = phi i512 [ %t91, %block_0_40c4c9 ]
  %t133 = phi i512 [ %t92, %block_0_40c4c9 ]
  %t134 = phi i512 [ %t93, %block_0_40c4c9 ]
  %t135 = phi i512 [ %t94, %block_0_40c4c9 ]
  %t136 = phi i512 [ %t95, %block_0_40c4c9 ]
  %t137 = phi i512 [ %t96, %block_0_40c4c9 ]
  ; r131 := (bv_add r117 (0x2a40 : bv 64))
  %t138 = add i64 %t124, 10816
  ; r132 := (bv_add r118 (0x2a40 : bv 64))
  %t139 = add i64 %t125, 10816
  ; r133 := (bv_add r118 (0x2a50 : bv 64))
  %t140 = add i64 %t125, 10832
  ; r134 := (read r133 (bv 32))
  %t141 = inttoptr i64 %t140 to i32*
  %t142 = load i32, i32* %t141
  ; r135 := (bv_add r117 (0x2a50 : bv 64))
  %t143 = add i64 %t124, 10832
  ; r136 := (read r135 (bv 32))
  %t144 = inttoptr i64 %t143 to i32*
  %t145 = load i32, i32* %t144
  ; r137 := (eq r134 r136)
  %t146 = icmp eq i32 %t142, %t145
  br i1 %t146, label %block_0_40c51b, label %block_0_40c500
block_0_40c51b:
  %t147 = phi i64 [ %t139, %block_0_40c504 ]
  %t148 = phi i64 [ %t126, %block_0_40c504 ]
  %t149 = phi i64 [ %t127, %block_0_40c504 ]
  %t150 = phi i64 [ %t128, %block_0_40c504 ]
  %t151 = phi i64 [ %t138, %block_0_40c504 ]
  %t152 = phi i64 [ %t129, %block_0_40c504 ]
  %t153 = phi i512 [ %t130, %block_0_40c504 ]
  %t154 = phi i512 [ %t131, %block_0_40c504 ]
  %t155 = phi i512 [ %t132, %block_0_40c504 ]
  %t156 = phi i512 [ %t133, %block_0_40c504 ]
  %t157 = phi i512 [ %t134, %block_0_40c504 ]
  %t158 = phi i512 [ %t135, %block_0_40c504 ]
  %t159 = phi i512 [ %t136, %block_0_40c504 ]
  %t160 = phi i512 [ %t137, %block_0_40c504 ]
  ; r152 := (bv_add r141 r139)
  %t161 = add i64 %t150, %t148
  ; r153 := (bv_add r152 (0x2a58 : bv 64))
  %t162 = add i64 %t161, 10840
  ; r154 := (read r153 (bv 64))
  %t163 = inttoptr i64 %t162 to i64*
  %t164 = load i64, i64* %t163
  ; r155 := (bv_add r141 r140)
  %t165 = add i64 %t150, %t149
  ; r156 := (bv_add r155 (0x2a58 : bv 64))
  %t166 = add i64 %t165, 10840
  ; r157 := (read r156 (bv 64))
  %t167 = inttoptr i64 %t166 to i64*
  %t168 = load i64, i64* %t167
  ; r158 := (eq r157 r154)
  %t169 = icmp eq i64 %t168, %t164
  br i1 %t169, label %block_0_40c52d, label %block_0_40c500
block_0_40c52d:
  %t170 = phi i64 [ %t147, %block_0_40c51b ]
  %t171 = phi i64 [ %t148, %block_0_40c51b ]
  %t172 = phi i64 [ %t150, %block_0_40c51b ]
  %t173 = phi i64 [ %t151, %block_0_40c51b ]
  %t174 = phi i64 [ %t152, %block_0_40c51b ]
  %t175 = phi i512 [ %t153, %block_0_40c51b ]
  %t176 = phi i512 [ %t154, %block_0_40c51b ]
  %t177 = phi i512 [ %t155, %block_0_40c51b ]
  %t178 = phi i512 [ %t156, %block_0_40c51b ]
  %t179 = phi i512 [ %t157, %block_0_40c51b ]
  %t180 = phi i512 [ %t158, %block_0_40c51b ]
  %t181 = phi i512 [ %t159, %block_0_40c51b ]
  %t182 = phi i512 [ %t160, %block_0_40c51b ]
  ; r172 := (bv_add r161 (0x4248 : bv 64))
  %t183 = add i64 %t172, 16968
  ; r173 := (bv_add r162 (0x14 : bv 64))
  %t184 = add i64 %t173, 20
  ; r174 := (read r173 (bv 32))
  %t185 = inttoptr i64 %t184 to i32*
  %t186 = load i32, i32* %t185
  ; r175 := (sext r174 64)
  %t187 = sext i32 %t186 to i64
  ; r176 := (bv_add r159 (0x14 : bv 64))
  %t188 = add i64 %t170, 20
  ; r177 := (read r176 (bv 32))
  %t189 = inttoptr i64 %t188 to i32*
  %t190 = load i32, i32* %t189
  ; r178 := (sext r177 64)
  %t191 = sext i32 %t190 to i64
  ; r179 := (bv_add r175 r172)
  %t192 = add i64 %t187, %t183
  ; r180 := (bv_add r178 r172)
  %t193 = add i64 %t191, %t183
  ; r181 := (bitcast r164 (vec 8 double))
  %t194 = bitcast i512 %t175 to <8 x double>
  ; r182 := (bitcast r165 (vec 8 double))
  %t195 = bitcast i512 %t176 to <8 x double>
  ; r183 := (bitcast r166 (vec 8 double))
  %t196 = bitcast i512 %t177 to <8 x double>
  ; r184 := (bitcast r167 (vec 8 double))
  %t197 = bitcast i512 %t178 to <8 x double>
  ; r185 := (bitcast r168 (vec 8 double))
  %t198 = bitcast i512 %t179 to <8 x double>
  ; r186 := (bitcast r169 (vec 8 double))
  %t199 = bitcast i512 %t180 to <8 x double>
  ; r187 := (bitcast r170 (vec 8 double))
  %t200 = bitcast i512 %t181 to <8 x double>
  ; r188 := (bitcast r171 (vec 8 double))
  %t201 = bitcast i512 %t182 to <8 x double>
  ; r189 := call strcmp(r180, r179, r160, r159, r162, r163, r181, r182, r183, r184, r185, r186, r187, r188)
  %t202 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @strcmp(i64 %t193, i64 %t192, i64 %t171, i64 %t170, i64 %t173, i64 %t174, <8 x double> %t194, <8 x double> %t195, <8 x double> %t196, <8 x double> %t197, <8 x double> %t198, <8 x double> %t199, <8 x double> %t200, <8 x double> %t201)
  ; r190 := (tuple_field r189 0)
  %t203 = extractvalue { i64, i64, <8 x double> } %t202, 0
  ; r191 := (tuple_field r189 1)
  %t204 = extractvalue { i64, i64, <8 x double> } %t202, 1
  ; r192 := (tuple_field r189 2)
  %t205 = extractvalue { i64, i64, <8 x double> } %t202, 2
  ; r193 := (bitcast r192 (bv 512))
  %t206 = bitcast <8 x double> %t205 to i512
  br label %block_0_40c547
block_0_40c547:
  %t207 = phi i64 [ %t203, %block_0_40c52d ]
  %t208 = phi i64 [ %t204, %block_0_40c52d ]
  %t209 = phi i512 [ %t206, %block_0_40c52d ]
  ; r197 := (trunc r194 32)
  %t210 = trunc i64 %t207 to i32
  ; r198 := (eq r197 (0x0 : bv 32))
  %t211 = icmp eq i32 %t210, 0
  ; r199 := (mux r198 (0x1 : bv 8) (0x0 : bv 8))
  %t212 = select i1 %t211, i8 1, i8 0
  ; r200 := (uext r199 64)
  %t213 = zext i8 %t212 to i64
  ; r201 := (bitcast r196 (vec 8 double))
  %t214 = bitcast i512 %t209 to <8 x double>
  ; r202 := (tuple r200 r195 r201)
  %t215 = insertvalue { i64, i64, <8 x double> } undef, i64 %t213, 0
  %t216 = insertvalue { i64, i64, <8 x double> } %t215, i64 %t208, 1
  %t217 = insertvalue { i64, i64, <8 x double> } %t216, <8 x double> %t214, 2
  ret { i64, i64, <8 x double> } %t217
}
define { i64, i64, <8 x double> } @gmtload(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40d560:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call tzload((0x4281c0 : bv 64), arg0, (0x1 : bv 64), arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @tzload(i64 4358592, i64 %arg0, i64 1, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ; r17 := (tuple_field r16 0)
  %t17 = extractvalue { i64, i64, <8 x double> } %t16, 0
  ; r18 := (tuple_field r16 1)
  %t18 = extractvalue { i64, i64, <8 x double> } %t16, 1
  ; r19 := (tuple_field r16 2)
  %t19 = extractvalue { i64, i64, <8 x double> } %t16, 2
  ; r20 := (bitcast r19 (bv 512))
  %t20 = bitcast <8 x double> %t19 to i512
  br label %block_0_40d576
block_0_40d576:
  %t21 = phi i64 [ %t17, %block_0_40d560 ]
  %t22 = phi i64 [ %t18, %block_0_40d560 ]
  %t23 = phi i64 [ %arg0, %block_0_40d560 ]
  %t24 = phi i512 [ %t20, %block_0_40d560 ]
  ; r25 := (trunc r21 32)
  %t25 = trunc i64 %t21 to i32
  ; r26 := (eq r25 (0x0 : bv 32))
  %t26 = icmp eq i32 %t25, 0
  br i1 %t26, label %block_0_40d57a, label %block_0_40d580
block_0_40d57a:
  %t27 = phi i64 [ %t21, %block_0_40d576 ]
  %t28 = phi i64 [ %t22, %block_0_40d576 ]
  %t29 = phi i512 [ %t24, %block_0_40d576 ]
  ; r30 := (bitcast r29 (vec 8 double))
  %t30 = bitcast i512 %t29 to <8 x double>
  ; r31 := (tuple r27 r28 r30)
  %t31 = insertvalue { i64, i64, <8 x double> } undef, i64 %t27, 0
  %t32 = insertvalue { i64, i64, <8 x double> } %t31, i64 %t28, 1
  %t33 = insertvalue { i64, i64, <8 x double> } %t32, <8 x double> %t30, 2
  ret { i64, i64, <8 x double> } %t33
block_0_40d580:
  %t34 = phi i64 [ %t23, %block_0_40d576 ]
  %t35 = phi i512 [ %t24, %block_0_40d576 ]
  ; r34 := (bitcast r33 (vec 8 double))
  %t36 = bitcast i512 %t35 to <8 x double>
  %t37 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @tzparse(i64 4358592, i64 %t34, i64 1, <8 x double> %t36)
  ret { i64, i64, <8 x double> } %t37
}
define void @gmt_init(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40d5a0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call gmtload((0x63a360 : bv 64), arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @gmtload(i64 6529888, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define void @tzsetwall(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40d6b0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call tzsetwall_basic((0x0 : bv 64), arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call <8 x double> (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @tzsetwall_basic(i64 0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define void @mktime(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40d8b0:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t5 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t7 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t8 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t9 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t10 = bitcast <8 x double> %arg13 to i512
  ; r10 := (bitcast arg6 (bv 512))
  %t11 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t13 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t14 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t15 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t16 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t17 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t18 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_40d8be, label %block_0_40d8f3
block_0_40d8be:
  %t19 = phi i64 [ %arg3, %block_0_40d8b0 ], [ %t123, %block_0_40d8fd ]
  %t20 = phi i64 [ %arg2, %block_0_40d8b0 ], [ %t124, %block_0_40d8fd ]
  %t21 = phi i64 [ %arg0, %block_0_40d8b0 ], [ %t125, %block_0_40d8fd ]
  %t22 = phi i64 [ %arg1, %block_0_40d8b0 ], [ %t126, %block_0_40d8fd ]
  %t23 = phi i64 [ %arg4, %block_0_40d8b0 ], [ %t127, %block_0_40d8fd ]
  %t24 = phi i64 [ %arg5, %block_0_40d8b0 ], [ %t128, %block_0_40d8fd ]
  %t25 = phi i512 [ %t3, %block_0_40d8b0 ], [ %t129, %block_0_40d8fd ]
  %t26 = phi i512 [ %t4, %block_0_40d8b0 ], [ %t130, %block_0_40d8fd ]
  %t27 = phi i512 [ %t5, %block_0_40d8b0 ], [ %t131, %block_0_40d8fd ]
  %t28 = phi i512 [ %t6, %block_0_40d8b0 ], [ %t132, %block_0_40d8fd ]
  %t29 = phi i512 [ %t7, %block_0_40d8b0 ], [ %t133, %block_0_40d8fd ]
  %t30 = phi i512 [ %t8, %block_0_40d8b0 ], [ %t134, %block_0_40d8fd ]
  %t31 = phi i512 [ %t9, %block_0_40d8b0 ], [ %t135, %block_0_40d8fd ]
  %t32 = phi i512 [ %t10, %block_0_40d8b0 ], [ %t136, %block_0_40d8fd ]
  ; r32 := (bitcast r24 (vec 8 double))
  %t33 = bitcast i512 %t25 to <8 x double>
  ; r33 := call tzset_basic((0x1 : bv 64), r21, r19, r32)
  %t34 = call <8 x double> (i64, i64, i64, <8 x double>) @tzset_basic(i64 1, i64 %t22, i64 %t20, <8 x double> %t33)
  ; r34 := (bitcast r33 (bv 512))
  %t35 = bitcast <8 x double> %t34 to i512
  br label %block_0_40d8c8
block_0_40d8c8:
  %t36 = phi i64 [ %t19, %block_0_40d8be ]
  %t37 = phi i64 [ %t21, %block_0_40d8be ]
  %t38 = phi i64 [ %t23, %block_0_40d8be ]
  %t39 = phi i64 [ %t24, %block_0_40d8be ]
  %t40 = phi i512 [ %t35, %block_0_40d8be ]
  %t41 = phi i512 [ %t26, %block_0_40d8be ]
  %t42 = phi i512 [ %t27, %block_0_40d8be ]
  %t43 = phi i512 [ %t28, %block_0_40d8be ]
  %t44 = phi i512 [ %t29, %block_0_40d8be ]
  %t45 = phi i512 [ %t30, %block_0_40d8be ]
  %t46 = phi i512 [ %t31, %block_0_40d8be ]
  %t47 = phi i512 [ %t32, %block_0_40d8be ]
  ; r47 := (bitcast r39 (vec 8 double))
  %t48 = bitcast i512 %t40 to <8 x double>
  ; r48 := call time1(r36, (0x40b6a0 : bv 64), (0x0 : bv 64), r47)
  %t49 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @time1(i64 %t37, i64 4241056, i64 0, <8 x double> %t48)
  ; r49 := (tuple_field r48 0)
  %t50 = extractvalue { i64, i64, <8 x double> } %t49, 0
  ; r50 := (tuple_field r48 1)
  %t51 = extractvalue { i64, i64, <8 x double> } %t49, 1
  ; r51 := (tuple_field r48 2)
  %t52 = extractvalue { i64, i64, <8 x double> } %t49, 2
  ; r52 := (bitcast r51 (bv 512))
  %t53 = bitcast <8 x double> %t52 to i512
  br label %block_0_40d8d7
block_0_40d8d7:
  %t54 = phi i64 [ %t36, %block_0_40d8c8 ]
  %t55 = phi i64 [ %t51, %block_0_40d8c8 ]
  %t56 = phi i64 [ %t38, %block_0_40d8c8 ]
  %t57 = phi i64 [ %t39, %block_0_40d8c8 ]
  %t58 = phi i512 [ %t53, %block_0_40d8c8 ]
  %t59 = phi i512 [ %t41, %block_0_40d8c8 ]
  %t60 = phi i512 [ %t42, %block_0_40d8c8 ]
  %t61 = phi i512 [ %t43, %block_0_40d8c8 ]
  %t62 = phi i512 [ %t44, %block_0_40d8c8 ]
  %t63 = phi i512 [ %t45, %block_0_40d8c8 ]
  %t64 = phi i512 [ %t46, %block_0_40d8c8 ]
  %t65 = phi i512 [ %t47, %block_0_40d8c8 ]
  ; r65 := (read (0x6356e8 : bv 64) (bv 32))
  %t66 = inttoptr i64 6510312 to i32*
  %t67 = load i32, i32* %t66
  ; r66 := (uext r65 64)
  %t68 = zext i32 %t67 to i64
  ; r67 := (eq r65 (0x0 : bv 32))
  %t69 = icmp eq i32 %t67, 0
  br i1 %t69, label %block_0_40d8ee, label %block_0_40d8e4
block_0_40d8e4:
  %t70 = phi i64 [ %t54, %block_0_40d8d7 ]
  %t71 = phi i64 [ %t55, %block_0_40d8d7 ]
  %t72 = phi i64 [ %t68, %block_0_40d8d7 ]
  %t73 = phi i64 [ %t56, %block_0_40d8d7 ]
  %t74 = phi i64 [ %t57, %block_0_40d8d7 ]
  %t75 = phi i512 [ %t58, %block_0_40d8d7 ]
  %t76 = phi i512 [ %t59, %block_0_40d8d7 ]
  %t77 = phi i512 [ %t60, %block_0_40d8d7 ]
  %t78 = phi i512 [ %t61, %block_0_40d8d7 ]
  %t79 = phi i512 [ %t62, %block_0_40d8d7 ]
  %t80 = phi i512 [ %t63, %block_0_40d8d7 ]
  %t81 = phi i512 [ %t64, %block_0_40d8d7 ]
  %t82 = phi i512 [ %t65, %block_0_40d8d7 ]
  ; r81 := (bitcast r73 (vec 8 double))
  %t83 = bitcast i512 %t75 to <8 x double>
  ; r82 := (bitcast r74 (vec 8 double))
  %t84 = bitcast i512 %t76 to <8 x double>
  ; r83 := (bitcast r75 (vec 8 double))
  %t85 = bitcast i512 %t77 to <8 x double>
  ; r84 := (bitcast r76 (vec 8 double))
  %t86 = bitcast i512 %t78 to <8 x double>
  ; r85 := (bitcast r77 (vec 8 double))
  %t87 = bitcast i512 %t79 to <8 x double>
  ; r86 := (bitcast r78 (vec 8 double))
  %t88 = bitcast i512 %t80 to <8 x double>
  ; r87 := (bitcast r79 (vec 8 double))
  %t89 = bitcast i512 %t81 to <8 x double>
  ; r88 := (bitcast r80 (vec 8 double))
  %t90 = bitcast i512 %t82 to <8 x double>
  ; r89 := call pthread_rwlock_unlock_int((0x635bb0 : bv 64), r70, r69, r68, r71, r72, r81, r82, r83, r84, r85, r86, r87, r88)
  %t91 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_rwlock_unlock_int(i64 6511536, i64 %t72, i64 %t71, i64 %t70, i64 %t73, i64 %t74, <8 x double> %t83, <8 x double> %t84, <8 x double> %t85, <8 x double> %t86, <8 x double> %t87, <8 x double> %t88, <8 x double> %t89, <8 x double> %t90)
  ; r90 := (tuple_field r89 0)
  %t92 = extractvalue { i64, i64, <8 x double> } %t91, 0
  ; r91 := (tuple_field r89 1)
  %t93 = extractvalue { i64, i64, <8 x double> } %t91, 1
  ; r92 := (tuple_field r89 2)
  %t94 = extractvalue { i64, i64, <8 x double> } %t91, 2
  ; r93 := (bitcast r92 (bv 512))
  %t95 = bitcast <8 x double> %t94 to i512
  br label %block_0_40d8ee
block_0_40d8ee:
  ret void
block_0_40d8f3:
  %t96 = phi i64 [ %arg3, %block_0_40d8b0 ]
  %t97 = phi i64 [ %arg2, %block_0_40d8b0 ]
  %t98 = phi i64 [ %arg0, %block_0_40d8b0 ]
  %t99 = phi i64 [ %arg1, %block_0_40d8b0 ]
  %t100 = phi i64 [ %arg4, %block_0_40d8b0 ]
  %t101 = phi i64 [ %arg5, %block_0_40d8b0 ]
  %t102 = phi i512 [ %t11, %block_0_40d8b0 ]
  %t103 = phi i512 [ %t12, %block_0_40d8b0 ]
  %t104 = phi i512 [ %t13, %block_0_40d8b0 ]
  %t105 = phi i512 [ %t14, %block_0_40d8b0 ]
  %t106 = phi i512 [ %t15, %block_0_40d8b0 ]
  %t107 = phi i512 [ %t16, %block_0_40d8b0 ]
  %t108 = phi i512 [ %t17, %block_0_40d8b0 ]
  %t109 = phi i512 [ %t18, %block_0_40d8b0 ]
  ; r108 := (bitcast r100 (vec 8 double))
  %t110 = bitcast i512 %t102 to <8 x double>
  ; r109 := (bitcast r101 (vec 8 double))
  %t111 = bitcast i512 %t103 to <8 x double>
  ; r110 := (bitcast r102 (vec 8 double))
  %t112 = bitcast i512 %t104 to <8 x double>
  ; r111 := (bitcast r103 (vec 8 double))
  %t113 = bitcast i512 %t105 to <8 x double>
  ; r112 := (bitcast r104 (vec 8 double))
  %t114 = bitcast i512 %t106 to <8 x double>
  ; r113 := (bitcast r105 (vec 8 double))
  %t115 = bitcast i512 %t107 to <8 x double>
  ; r114 := (bitcast r106 (vec 8 double))
  %t116 = bitcast i512 %t108 to <8 x double>
  ; r115 := (bitcast r107 (vec 8 double))
  %t117 = bitcast i512 %t109 to <8 x double>
  ; r116 := call pthread_rwlock_rdlock_int((0x635bb0 : bv 64), r97, r95, r94, r98, r99, r108, r109, r110, r111, r112, r113, r114, r115)
  %t118 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_rwlock_rdlock_int(i64 6511536, i64 %t99, i64 %t97, i64 %t96, i64 %t100, i64 %t101, <8 x double> %t110, <8 x double> %t111, <8 x double> %t112, <8 x double> %t113, <8 x double> %t114, <8 x double> %t115, <8 x double> %t116, <8 x double> %t117)
  ; r117 := (tuple_field r116 0)
  %t119 = extractvalue { i64, i64, <8 x double> } %t118, 0
  ; r118 := (tuple_field r116 1)
  %t120 = extractvalue { i64, i64, <8 x double> } %t118, 1
  ; r119 := (tuple_field r116 2)
  %t121 = extractvalue { i64, i64, <8 x double> } %t118, 2
  ; r120 := (bitcast r119 (bv 512))
  %t122 = bitcast <8 x double> %t121 to i512
  br label %block_0_40d8fd
block_0_40d8fd:
  %t123 = phi i64 [ %t96, %block_0_40d8f3 ]
  %t124 = phi i64 [ %t120, %block_0_40d8f3 ]
  %t125 = phi i64 [ %t98, %block_0_40d8f3 ]
  %t126 = phi i64 [ %t99, %block_0_40d8f3 ]
  %t127 = phi i64 [ %t100, %block_0_40d8f3 ]
  %t128 = phi i64 [ %t101, %block_0_40d8f3 ]
  %t129 = phi i512 [ %t122, %block_0_40d8f3 ]
  %t130 = phi i512 [ %t103, %block_0_40d8f3 ]
  %t131 = phi i512 [ %t104, %block_0_40d8f3 ]
  %t132 = phi i512 [ %t105, %block_0_40d8f3 ]
  %t133 = phi i512 [ %t106, %block_0_40d8f3 ]
  %t134 = phi i512 [ %t107, %block_0_40d8f3 ]
  %t135 = phi i512 [ %t108, %block_0_40d8f3 ]
  %t136 = phi i512 [ %t109, %block_0_40d8f3 ]
  br label %block_0_40d8be
}
define void @timelocal(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40d900:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg6 (bv 512))
  %t1 = bitcast <8 x double> %arg6 to i512
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast arg8 (bv 512))
  %t3 = bitcast <8 x double> %arg8 to i512
  ; r4 := (bitcast arg9 (bv 512))
  %t4 = bitcast <8 x double> %arg9 to i512
  ; r5 := (bitcast arg10 (bv 512))
  %t5 = bitcast <8 x double> %arg10 to i512
  ; r6 := (bitcast arg11 (bv 512))
  %t6 = bitcast <8 x double> %arg11 to i512
  ; r7 := (bitcast arg12 (bv 512))
  %t7 = bitcast <8 x double> %arg12 to i512
  ; r8 := (bitcast arg13 (bv 512))
  %t8 = bitcast <8 x double> %arg13 to i512
  ; r9 := (bitcast arg6 (bv 512))
  %t9 = bitcast <8 x double> %arg6 to i512
  ; r10 := (bitcast arg7 (bv 512))
  %t10 = bitcast <8 x double> %arg7 to i512
  ; r11 := (bitcast arg8 (bv 512))
  %t11 = bitcast <8 x double> %arg8 to i512
  ; r12 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r13 := (bitcast arg10 (bv 512))
  %t13 = bitcast <8 x double> %arg10 to i512
  ; r14 := (bitcast arg11 (bv 512))
  %t14 = bitcast <8 x double> %arg11 to i512
  ; r15 := (bitcast arg12 (bv 512))
  %t15 = bitcast <8 x double> %arg12 to i512
  ; r16 := (bitcast arg13 (bv 512))
  %t16 = bitcast <8 x double> %arg13 to i512
  br i1 %t0, label %block_0_40d90c, label %block_0_40d905
block_0_40d905:
  %t17 = phi i64 [ %arg3, %block_0_40d900 ]
  %t18 = phi i64 [ %arg2, %block_0_40d900 ]
  %t19 = phi i64 [ %arg1, %block_0_40d900 ]
  %t20 = phi i64 [ %arg0, %block_0_40d900 ]
  %t21 = phi i64 [ %arg4, %block_0_40d900 ]
  %t22 = phi i64 [ %arg5, %block_0_40d900 ]
  %t23 = phi i512 [ %t9, %block_0_40d900 ]
  %t24 = phi i512 [ %t10, %block_0_40d900 ]
  %t25 = phi i512 [ %t11, %block_0_40d900 ]
  %t26 = phi i512 [ %t12, %block_0_40d900 ]
  %t27 = phi i512 [ %t13, %block_0_40d900 ]
  %t28 = phi i512 [ %t14, %block_0_40d900 ]
  %t29 = phi i512 [ %t15, %block_0_40d900 ]
  %t30 = phi i512 [ %t16, %block_0_40d900 ]
  ; r31 := (bv_add r20 (0x20 : bv 64))
  %t31 = add i64 %t20, 32
  ; write r31 (0xffffffff : bv 32)
  %t32 = inttoptr i64 %t31 to i32*
  store i32 4294967295, i32* %t32
  br label %block_0_40d90c
block_0_40d90c:
  %t33 = phi i64 [ %arg3, %block_0_40d900 ], [ %t17, %block_0_40d905 ]
  %t34 = phi i64 [ %arg2, %block_0_40d900 ], [ %t18, %block_0_40d905 ]
  %t35 = phi i64 [ %arg1, %block_0_40d900 ], [ %t19, %block_0_40d905 ]
  %t36 = phi i64 [ %arg0, %block_0_40d900 ], [ %t20, %block_0_40d905 ]
  %t37 = phi i64 [ %arg4, %block_0_40d900 ], [ %t21, %block_0_40d905 ]
  %t38 = phi i64 [ %arg5, %block_0_40d900 ], [ %t22, %block_0_40d905 ]
  %t39 = phi i512 [ %t1, %block_0_40d900 ], [ %t23, %block_0_40d905 ]
  %t40 = phi i512 [ %t2, %block_0_40d900 ], [ %t24, %block_0_40d905 ]
  %t41 = phi i512 [ %t3, %block_0_40d900 ], [ %t25, %block_0_40d905 ]
  %t42 = phi i512 [ %t4, %block_0_40d900 ], [ %t26, %block_0_40d905 ]
  %t43 = phi i512 [ %t5, %block_0_40d900 ], [ %t27, %block_0_40d905 ]
  %t44 = phi i512 [ %t6, %block_0_40d900 ], [ %t28, %block_0_40d905 ]
  %t45 = phi i512 [ %t7, %block_0_40d900 ], [ %t29, %block_0_40d905 ]
  %t46 = phi i512 [ %t8, %block_0_40d900 ], [ %t30, %block_0_40d905 ]
  ; r46 := (bitcast r38 (vec 8 double))
  %t47 = bitcast i512 %t39 to <8 x double>
  ; r47 := (bitcast r39 (vec 8 double))
  %t48 = bitcast i512 %t40 to <8 x double>
  ; r48 := (bitcast r40 (vec 8 double))
  %t49 = bitcast i512 %t41 to <8 x double>
  ; r49 := (bitcast r41 (vec 8 double))
  %t50 = bitcast i512 %t42 to <8 x double>
  ; r50 := (bitcast r42 (vec 8 double))
  %t51 = bitcast i512 %t43 to <8 x double>
  ; r51 := (bitcast r43 (vec 8 double))
  %t52 = bitcast i512 %t44 to <8 x double>
  ; r52 := (bitcast r44 (vec 8 double))
  %t53 = bitcast i512 %t45 to <8 x double>
  ; r53 := (bitcast r45 (vec 8 double))
  %t54 = bitcast i512 %t46 to <8 x double>
  call void (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @mktime(i64 %t36, i64 %t35, i64 %t34, i64 %t33, i64 %t37, i64 %t38, <8 x double> %t47, <8 x double> %t48, <8 x double> %t49, <8 x double> %t50, <8 x double> %t51, <8 x double> %t52, <8 x double> %t53, <8 x double> %t54)
  ret void
}
define { i64, i64, <8 x double> } @localtime_r(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12) {
block_0_40d920:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg5 (bv 512))
  %t4 = bitcast <8 x double> %arg5 to i512
  ; r4 := (bitcast arg6 (bv 512))
  %t5 = bitcast <8 x double> %arg6 to i512
  ; r5 := (bitcast arg7 (bv 512))
  %t6 = bitcast <8 x double> %arg7 to i512
  ; r6 := (bitcast arg8 (bv 512))
  %t7 = bitcast <8 x double> %arg8 to i512
  ; r7 := (bitcast arg9 (bv 512))
  %t8 = bitcast <8 x double> %arg9 to i512
  ; r8 := (bitcast arg10 (bv 512))
  %t9 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r10 := (bitcast arg12 (bv 512))
  %t11 = bitcast <8 x double> %arg12 to i512
  ; r11 := (bitcast arg5 (bv 512))
  %t12 = bitcast <8 x double> %arg5 to i512
  ; r12 := (bitcast arg6 (bv 512))
  %t13 = bitcast <8 x double> %arg6 to i512
  ; r13 := (bitcast arg7 (bv 512))
  %t14 = bitcast <8 x double> %arg7 to i512
  ; r14 := (bitcast arg8 (bv 512))
  %t15 = bitcast <8 x double> %arg8 to i512
  ; r15 := (bitcast arg9 (bv 512))
  %t16 = bitcast <8 x double> %arg9 to i512
  ; r16 := (bitcast arg10 (bv 512))
  %t17 = bitcast <8 x double> %arg10 to i512
  ; r17 := (bitcast arg11 (bv 512))
  %t18 = bitcast <8 x double> %arg11 to i512
  ; r18 := (bitcast arg12 (bv 512))
  %t19 = bitcast <8 x double> %arg12 to i512
  br i1 %t3, label %block_0_40d940, label %block_0_40d980
block_0_40d940:
  %t20 = phi i64 [ %arg3, %block_0_40d920 ], [ %t135, %block_0_40d98a ]
  %t21 = phi i64 [ %arg2, %block_0_40d920 ], [ %t136, %block_0_40d98a ]
  %t22 = phi i64 [ %arg1, %block_0_40d920 ], [ %t137, %block_0_40d98a ]
  %t23 = phi i64 [ %arg0, %block_0_40d920 ], [ %t138, %block_0_40d98a ]
  %t24 = phi i64 [ %arg1, %block_0_40d920 ], [ %t139, %block_0_40d98a ]
  %t25 = phi i64 [ %t2, %block_0_40d920 ], [ %t140, %block_0_40d98a ]
  %t26 = phi i512 [ %t4, %block_0_40d920 ], [ %t141, %block_0_40d98a ]
  %t27 = phi i512 [ %t5, %block_0_40d920 ], [ %t142, %block_0_40d98a ]
  %t28 = phi i512 [ %t6, %block_0_40d920 ], [ %t143, %block_0_40d98a ]
  %t29 = phi i512 [ %t7, %block_0_40d920 ], [ %t144, %block_0_40d98a ]
  %t30 = phi i512 [ %t8, %block_0_40d920 ], [ %t145, %block_0_40d98a ]
  %t31 = phi i512 [ %t9, %block_0_40d920 ], [ %t146, %block_0_40d98a ]
  %t32 = phi i512 [ %t10, %block_0_40d920 ], [ %t147, %block_0_40d98a ]
  %t33 = phi i512 [ %t11, %block_0_40d920 ], [ %t148, %block_0_40d98a ]
  ; r33 := (bitcast r25 (vec 8 double))
  %t34 = bitcast i512 %t26 to <8 x double>
  ; r34 := call tzset_basic((0x1 : bv 64), r23, r20, r33)
  %t35 = call <8 x double> (i64, i64, i64, <8 x double>) @tzset_basic(i64 1, i64 %t24, i64 %t21, <8 x double> %t34)
  ; r35 := (bitcast r34 (bv 512))
  %t36 = bitcast <8 x double> %t35 to i512
  br label %block_0_40d94a
block_0_40d94a:
  %t37 = phi i64 [ %t20, %block_0_40d940 ]
  %t38 = phi i64 [ %t22, %block_0_40d940 ]
  %t39 = phi i64 [ %t23, %block_0_40d940 ]
  %t40 = phi i64 [ %t24, %block_0_40d940 ]
  %t41 = phi i64 [ %t25, %block_0_40d940 ]
  %t42 = phi i512 [ %t36, %block_0_40d940 ]
  %t43 = phi i512 [ %t27, %block_0_40d940 ]
  %t44 = phi i512 [ %t28, %block_0_40d940 ]
  %t45 = phi i512 [ %t29, %block_0_40d940 ]
  %t46 = phi i512 [ %t30, %block_0_40d940 ]
  %t47 = phi i512 [ %t31, %block_0_40d940 ]
  %t48 = phi i512 [ %t32, %block_0_40d940 ]
  %t49 = phi i512 [ %t33, %block_0_40d940 ]
  ; r49 := (bitcast r41 (vec 8 double))
  %t50 = bitcast i512 %t42 to <8 x double>
  ; r50 := call localsub(r38, (0x0 : bv 64), r37, r49)
  %t51 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @localsub(i64 %t39, i64 0, i64 %t38, <8 x double> %t50)
  ; r51 := (tuple_field r50 0)
  %t52 = extractvalue { i64, i64, <8 x double> } %t51, 0
  ; r52 := (tuple_field r50 1)
  %t53 = extractvalue { i64, i64, <8 x double> } %t51, 1
  ; r53 := (tuple_field r50 2)
  %t54 = extractvalue { i64, i64, <8 x double> } %t51, 2
  ; r54 := (bitcast r53 (bv 512))
  %t55 = bitcast <8 x double> %t54 to i512
  br label %block_0_40d957
block_0_40d957:
  %t56 = phi i64 [ %t37, %block_0_40d94a ]
  %t57 = phi i64 [ %t53, %block_0_40d94a ]
  %t58 = phi i64 [ %t38, %block_0_40d94a ]
  %t59 = phi i64 [ %t40, %block_0_40d94a ]
  %t60 = phi i64 [ %t41, %block_0_40d94a ]
  %t61 = phi i512 [ %t55, %block_0_40d94a ]
  %t62 = phi i512 [ %t43, %block_0_40d94a ]
  %t63 = phi i512 [ %t44, %block_0_40d94a ]
  %t64 = phi i512 [ %t45, %block_0_40d94a ]
  %t65 = phi i512 [ %t46, %block_0_40d94a ]
  %t66 = phi i512 [ %t47, %block_0_40d94a ]
  %t67 = phi i512 [ %t48, %block_0_40d94a ]
  %t68 = phi i512 [ %t49, %block_0_40d94a ]
  ; r68 := (read (0x6356e8 : bv 64) (bv 32))
  %t69 = inttoptr i64 6510312 to i32*
  %t70 = load i32, i32* %t69
  ; r69 := (uext r68 64)
  %t71 = zext i32 %t70 to i64
  ; r70 := (eq r68 (0x0 : bv 32))
  %t72 = icmp eq i32 %t70, 0
  br i1 %t72, label %block_0_40d96d, label %block_0_40d963
block_0_40d963:
  %t73 = phi i64 [ %t56, %block_0_40d957 ]
  %t74 = phi i64 [ %t57, %block_0_40d957 ]
  %t75 = phi i64 [ %t58, %block_0_40d957 ]
  %t76 = phi i64 [ %t59, %block_0_40d957 ]
  %t77 = phi i64 [ %t71, %block_0_40d957 ]
  %t78 = phi i64 [ %t60, %block_0_40d957 ]
  %t79 = phi i512 [ %t61, %block_0_40d957 ]
  %t80 = phi i512 [ %t62, %block_0_40d957 ]
  %t81 = phi i512 [ %t63, %block_0_40d957 ]
  %t82 = phi i512 [ %t64, %block_0_40d957 ]
  %t83 = phi i512 [ %t65, %block_0_40d957 ]
  %t84 = phi i512 [ %t66, %block_0_40d957 ]
  %t85 = phi i512 [ %t67, %block_0_40d957 ]
  %t86 = phi i512 [ %t68, %block_0_40d957 ]
  ; r85 := (bitcast r77 (vec 8 double))
  %t87 = bitcast i512 %t79 to <8 x double>
  ; r86 := (bitcast r78 (vec 8 double))
  %t88 = bitcast i512 %t80 to <8 x double>
  ; r87 := (bitcast r79 (vec 8 double))
  %t89 = bitcast i512 %t81 to <8 x double>
  ; r88 := (bitcast r80 (vec 8 double))
  %t90 = bitcast i512 %t82 to <8 x double>
  ; r89 := (bitcast r81 (vec 8 double))
  %t91 = bitcast i512 %t83 to <8 x double>
  ; r90 := (bitcast r82 (vec 8 double))
  %t92 = bitcast i512 %t84 to <8 x double>
  ; r91 := (bitcast r83 (vec 8 double))
  %t93 = bitcast i512 %t85 to <8 x double>
  ; r92 := (bitcast r84 (vec 8 double))
  %t94 = bitcast i512 %t86 to <8 x double>
  ; r93 := call pthread_rwlock_unlock_int((0x635bb0 : bv 64), r74, r72, r71, r75, r76, r85, r86, r87, r88, r89, r90, r91, r92)
  %t95 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_rwlock_unlock_int(i64 6511536, i64 %t76, i64 %t74, i64 %t73, i64 %t77, i64 %t78, <8 x double> %t87, <8 x double> %t88, <8 x double> %t89, <8 x double> %t90, <8 x double> %t91, <8 x double> %t92, <8 x double> %t93, <8 x double> %t94)
  ; r94 := (tuple_field r93 0)
  %t96 = extractvalue { i64, i64, <8 x double> } %t95, 0
  ; r95 := (tuple_field r93 1)
  %t97 = extractvalue { i64, i64, <8 x double> } %t95, 1
  ; r96 := (tuple_field r93 2)
  %t98 = extractvalue { i64, i64, <8 x double> } %t95, 2
  ; r97 := (bitcast r96 (bv 512))
  %t99 = bitcast <8 x double> %t98 to i512
  br label %block_0_40d96d
block_0_40d96d:
  %t100 = phi i64 [ %t57, %block_0_40d957 ], [ %t97, %block_0_40d963 ]
  %t101 = phi i64 [ %t58, %block_0_40d957 ], [ %t75, %block_0_40d963 ]
  %t102 = phi i512 [ %t61, %block_0_40d957 ], [ %t99, %block_0_40d963 ]
  ; r101 := (bitcast r100 (vec 8 double))
  %t103 = bitcast i512 %t102 to <8 x double>
  ; r102 := (tuple r99 r98 r101)
  %t104 = insertvalue { i64, i64, <8 x double> } undef, i64 %t101, 0
  %t105 = insertvalue { i64, i64, <8 x double> } %t104, i64 %t100, 1
  %t106 = insertvalue { i64, i64, <8 x double> } %t105, <8 x double> %t103, 2
  ret { i64, i64, <8 x double> } %t106
block_0_40d980:
  %t107 = phi i64 [ %arg3, %block_0_40d920 ]
  %t108 = phi i64 [ %arg2, %block_0_40d920 ]
  %t109 = phi i64 [ %arg1, %block_0_40d920 ]
  %t110 = phi i64 [ %arg0, %block_0_40d920 ]
  %t111 = phi i64 [ %arg1, %block_0_40d920 ]
  %t112 = phi i64 [ %arg4, %block_0_40d920 ]
  %t113 = phi i64 [ %t2, %block_0_40d920 ]
  %t114 = phi i512 [ %t12, %block_0_40d920 ]
  %t115 = phi i512 [ %t13, %block_0_40d920 ]
  %t116 = phi i512 [ %t14, %block_0_40d920 ]
  %t117 = phi i512 [ %t15, %block_0_40d920 ]
  %t118 = phi i512 [ %t16, %block_0_40d920 ]
  %t119 = phi i512 [ %t17, %block_0_40d920 ]
  %t120 = phi i512 [ %t18, %block_0_40d920 ]
  %t121 = phi i512 [ %t19, %block_0_40d920 ]
  ; r118 := (bitcast r110 (vec 8 double))
  %t122 = bitcast i512 %t114 to <8 x double>
  ; r119 := (bitcast r111 (vec 8 double))
  %t123 = bitcast i512 %t115 to <8 x double>
  ; r120 := (bitcast r112 (vec 8 double))
  %t124 = bitcast i512 %t116 to <8 x double>
  ; r121 := (bitcast r113 (vec 8 double))
  %t125 = bitcast i512 %t117 to <8 x double>
  ; r122 := (bitcast r114 (vec 8 double))
  %t126 = bitcast i512 %t118 to <8 x double>
  ; r123 := (bitcast r115 (vec 8 double))
  %t127 = bitcast i512 %t119 to <8 x double>
  ; r124 := (bitcast r116 (vec 8 double))
  %t128 = bitcast i512 %t120 to <8 x double>
  ; r125 := (bitcast r117 (vec 8 double))
  %t129 = bitcast i512 %t121 to <8 x double>
  ; r126 := call pthread_rwlock_rdlock_int((0x635bb0 : bv 64), r107, r104, r103, r108, r109, r118, r119, r120, r121, r122, r123, r124, r125)
  %t130 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_rwlock_rdlock_int(i64 6511536, i64 %t111, i64 %t108, i64 %t107, i64 %t112, i64 %t113, <8 x double> %t122, <8 x double> %t123, <8 x double> %t124, <8 x double> %t125, <8 x double> %t126, <8 x double> %t127, <8 x double> %t128, <8 x double> %t129)
  ; r127 := (tuple_field r126 0)
  %t131 = extractvalue { i64, i64, <8 x double> } %t130, 0
  ; r128 := (tuple_field r126 1)
  %t132 = extractvalue { i64, i64, <8 x double> } %t130, 1
  ; r129 := (tuple_field r126 2)
  %t133 = extractvalue { i64, i64, <8 x double> } %t130, 2
  ; r130 := (bitcast r129 (bv 512))
  %t134 = bitcast <8 x double> %t133 to i512
  br label %block_0_40d98a
block_0_40d98a:
  %t135 = phi i64 [ %t107, %block_0_40d980 ]
  %t136 = phi i64 [ %t132, %block_0_40d980 ]
  %t137 = phi i64 [ %t109, %block_0_40d980 ]
  %t138 = phi i64 [ %t110, %block_0_40d980 ]
  %t139 = phi i64 [ %t111, %block_0_40d980 ]
  %t140 = phi i64 [ %t113, %block_0_40d980 ]
  %t141 = phi i512 [ %t134, %block_0_40d980 ]
  %t142 = phi i512 [ %t115, %block_0_40d980 ]
  %t143 = phi i512 [ %t116, %block_0_40d980 ]
  %t144 = phi i512 [ %t117, %block_0_40d980 ]
  %t145 = phi i512 [ %t118, %block_0_40d980 ]
  %t146 = phi i512 [ %t119, %block_0_40d980 ]
  %t147 = phi i512 [ %t120, %block_0_40d980 ]
  %t148 = phi i512 [ %t121, %block_0_40d980 ]
  br label %block_0_40d940
}
define <8 x double> @tzset(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40d990:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  %t2 = call <8 x double> (i64, i64, i64, <8 x double>) @tzset_basic(i64 0, i64 %arg1, i64 %arg2, <8 x double> %t1)
  ret <8 x double> %t2
}
define void @gmtime(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40dac0:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t5 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t7 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t8 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t9 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t10 = bitcast <8 x double> %arg13 to i512
  ; r10 := (bitcast arg6 (bv 512))
  %t11 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t13 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t14 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t15 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t16 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t17 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t18 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_40db20, label %block_0_40dadd
block_0_40dadd:
  %t19 = phi i64 [ %arg3, %block_0_40dac0 ]
  %t20 = phi i64 [ %arg2, %block_0_40dac0 ]
  %t21 = phi i64 [ %arg0, %block_0_40dac0 ]
  %t22 = phi i64 [ %arg1, %block_0_40dac0 ]
  %t23 = phi i64 [ %arg0, %block_0_40dac0 ]
  %t24 = phi i64 [ %arg4, %block_0_40dac0 ]
  %t25 = phi i64 [ %arg5, %block_0_40dac0 ]
  %t26 = phi i512 [ %t11, %block_0_40dac0 ]
  %t27 = phi i512 [ %t12, %block_0_40dac0 ]
  %t28 = phi i512 [ %t13, %block_0_40dac0 ]
  %t29 = phi i512 [ %t14, %block_0_40dac0 ]
  %t30 = phi i512 [ %t15, %block_0_40dac0 ]
  %t31 = phi i512 [ %t16, %block_0_40dac0 ]
  %t32 = phi i512 [ %t17, %block_0_40dac0 ]
  %t33 = phi i512 [ %t18, %block_0_40dac0 ]
  ; r33 := (bitcast r25 (vec 8 double))
  %t34 = bitcast i512 %t26 to <8 x double>
  ; r34 := (bitcast r26 (vec 8 double))
  %t35 = bitcast i512 %t27 to <8 x double>
  ; r35 := (bitcast r27 (vec 8 double))
  %t36 = bitcast i512 %t28 to <8 x double>
  ; r36 := (bitcast r28 (vec 8 double))
  %t37 = bitcast i512 %t29 to <8 x double>
  ; r37 := (bitcast r29 (vec 8 double))
  %t38 = bitcast i512 %t30 to <8 x double>
  ; r38 := (bitcast r30 (vec 8 double))
  %t39 = bitcast i512 %t31 to <8 x double>
  ; r39 := (bitcast r31 (vec 8 double))
  %t40 = bitcast i512 %t32 to <8 x double>
  ; r40 := (bitcast r32 (vec 8 double))
  %t41 = bitcast i512 %t33 to <8 x double>
  ; r41 := call pthread_once_int((0x635bc0 : bv 64), (0x40dca0 : bv 64), r19, r18, r23, r24, r33, r34, r35, r36, r37, r38, r39, r40)
  %t42 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_once_int(i64 6511552, i64 4250784, i64 %t20, i64 %t19, i64 %t24, i64 %t25, <8 x double> %t34, <8 x double> %t35, <8 x double> %t36, <8 x double> %t37, <8 x double> %t38, <8 x double> %t39, <8 x double> %t40, <8 x double> %t41)
  ; r42 := (tuple_field r41 0)
  %t43 = extractvalue { i64, i64, <8 x double> } %t42, 0
  ; r43 := (tuple_field r41 1)
  %t44 = extractvalue { i64, i64, <8 x double> } %t42, 1
  ; r44 := (tuple_field r41 2)
  %t45 = extractvalue { i64, i64, <8 x double> } %t42, 2
  ; r45 := (bitcast r44 (bv 512))
  %t46 = bitcast <8 x double> %t45 to i512
  br label %block_0_40daec
block_0_40daec:
  %t47 = phi i64 [ %t19, %block_0_40dadd ]
  %t48 = phi i64 [ %t44, %block_0_40dadd ]
  %t49 = phi i64 [ %t21, %block_0_40dadd ]
  %t50 = phi i64 [ %t22, %block_0_40dadd ]
  %t51 = phi i64 [ %t23, %block_0_40dadd ]
  %t52 = phi i64 [ %t24, %block_0_40dadd ]
  %t53 = phi i64 [ %t25, %block_0_40dadd ]
  %t54 = phi i512 [ %t46, %block_0_40dadd ]
  %t55 = phi i512 [ %t27, %block_0_40dadd ]
  %t56 = phi i512 [ %t28, %block_0_40dadd ]
  %t57 = phi i512 [ %t29, %block_0_40dadd ]
  %t58 = phi i512 [ %t30, %block_0_40dadd ]
  %t59 = phi i512 [ %t31, %block_0_40dadd ]
  %t60 = phi i512 [ %t32, %block_0_40dadd ]
  %t61 = phi i512 [ %t33, %block_0_40dadd ]
  ; r61 := (read (0x63ebe8 : bv 64) (bv 32))
  %t62 = inttoptr i64 6548456 to i32*
  %t63 = load i32, i32* %t62
  ; r62 := (eq r61 (0x0 : bv 32))
  %t64 = icmp eq i32 %t63, 0
  br i1 %t64, label %block_0_40daf8, label %block_0_40db43
block_0_40daf8:
  %t65 = phi i64 [ %t47, %block_0_40daec ]
  %t66 = phi i64 [ %t48, %block_0_40daec ]
  %t67 = phi i64 [ %t49, %block_0_40daec ]
  %t68 = phi i64 [ %t50, %block_0_40daec ]
  %t69 = phi i64 [ %t52, %block_0_40daec ]
  %t70 = phi i64 [ %t53, %block_0_40daec ]
  %t71 = phi i512 [ %t54, %block_0_40daec ]
  %t72 = phi i512 [ %t55, %block_0_40daec ]
  %t73 = phi i512 [ %t56, %block_0_40daec ]
  %t74 = phi i512 [ %t57, %block_0_40daec ]
  %t75 = phi i512 [ %t58, %block_0_40daec ]
  %t76 = phi i512 [ %t59, %block_0_40daec ]
  %t77 = phi i512 [ %t60, %block_0_40daec ]
  %t78 = phi i512 [ %t61, %block_0_40daec ]
  ; r77 := (read (0x63ebe4 : bv 64) (bv 32))
  %t79 = inttoptr i64 6548452 to i32*
  %t80 = load i32, i32* %t79
  ; r78 := (uext r77 64)
  %t81 = zext i32 %t80 to i64
  ; r79 := (bitcast r69 (vec 8 double))
  %t82 = bitcast i512 %t71 to <8 x double>
  ; r80 := (bitcast r70 (vec 8 double))
  %t83 = bitcast i512 %t72 to <8 x double>
  ; r81 := (bitcast r71 (vec 8 double))
  %t84 = bitcast i512 %t73 to <8 x double>
  ; r82 := (bitcast r72 (vec 8 double))
  %t85 = bitcast i512 %t74 to <8 x double>
  ; r83 := (bitcast r73 (vec 8 double))
  %t86 = bitcast i512 %t75 to <8 x double>
  ; r84 := (bitcast r74 (vec 8 double))
  %t87 = bitcast i512 %t76 to <8 x double>
  ; r85 := (bitcast r75 (vec 8 double))
  %t88 = bitcast i512 %t77 to <8 x double>
  ; r86 := (bitcast r76 (vec 8 double))
  %t89 = bitcast i512 %t78 to <8 x double>
  ; r87 := call pthread_getspecific_int(r78, r66, r64, r63, r67, r68, r79, r80, r81, r82, r83, r84, r85, r86)
  %t90 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_getspecific_int(i64 %t81, i64 %t68, i64 %t66, i64 %t65, i64 %t69, i64 %t70, <8 x double> %t82, <8 x double> %t83, <8 x double> %t84, <8 x double> %t85, <8 x double> %t86, <8 x double> %t87, <8 x double> %t88, <8 x double> %t89)
  ; r88 := (tuple_field r87 0)
  %t91 = extractvalue { i64, i64, <8 x double> } %t90, 0
  ; r89 := (tuple_field r87 1)
  %t92 = extractvalue { i64, i64, <8 x double> } %t90, 1
  ; r90 := (tuple_field r87 2)
  %t93 = extractvalue { i64, i64, <8 x double> } %t90, 2
  ; r91 := (bitcast r90 (bv 512))
  %t94 = bitcast <8 x double> %t93 to i512
  br label %block_0_40db03
block_0_40db03:
  %t95 = phi i64 [ %t91, %block_0_40daf8 ]
  %t96 = phi i64 [ %t65, %block_0_40daf8 ]
  %t97 = phi i64 [ %t92, %block_0_40daf8 ]
  %t98 = phi i64 [ %t67, %block_0_40daf8 ]
  %t99 = phi i64 [ %t68, %block_0_40daf8 ]
  %t100 = phi i64 [ %t69, %block_0_40daf8 ]
  %t101 = phi i64 [ %t70, %block_0_40daf8 ]
  %t102 = phi i512 [ %t94, %block_0_40daf8 ]
  %t103 = phi i512 [ %t72, %block_0_40daf8 ]
  %t104 = phi i512 [ %t73, %block_0_40daf8 ]
  %t105 = phi i512 [ %t74, %block_0_40daf8 ]
  %t106 = phi i512 [ %t75, %block_0_40daf8 ]
  %t107 = phi i512 [ %t76, %block_0_40daf8 ]
  %t108 = phi i512 [ %t77, %block_0_40daf8 ]
  %t109 = phi i512 [ %t78, %block_0_40daf8 ]
  ; r107 := (eq r92 (0x0 : bv 64))
  %t110 = icmp eq i64 %t95, 0
  br i1 %t110, label %block_0_40db54, label %block_0_40db0b
block_0_40db0b:
  %t111 = phi i64 [ %t96, %block_0_40db03 ], [ %t238, %block_0_40db74 ]
  %t112 = phi i64 [ %t95, %block_0_40db03 ], [ %t239, %block_0_40db74 ]
  %t113 = phi i64 [ %t98, %block_0_40db03 ], [ %t240, %block_0_40db74 ]
  %t114 = phi i64 [ %t100, %block_0_40db03 ], [ %t241, %block_0_40db74 ]
  %t115 = phi i64 [ %t101, %block_0_40db03 ], [ %t242, %block_0_40db74 ]
  %t116 = phi i512 [ %t102, %block_0_40db03 ], [ %t243, %block_0_40db74 ]
  %t117 = phi i512 [ %t103, %block_0_40db03 ], [ %t244, %block_0_40db74 ]
  %t118 = phi i512 [ %t104, %block_0_40db03 ], [ %t245, %block_0_40db74 ]
  %t119 = phi i512 [ %t105, %block_0_40db03 ], [ %t246, %block_0_40db74 ]
  %t120 = phi i512 [ %t106, %block_0_40db03 ], [ %t247, %block_0_40db74 ]
  %t121 = phi i512 [ %t107, %block_0_40db03 ], [ %t248, %block_0_40db74 ]
  %t122 = phi i512 [ %t108, %block_0_40db03 ], [ %t249, %block_0_40db74 ]
  %t123 = phi i512 [ %t109, %block_0_40db03 ], [ %t250, %block_0_40db74 ]
  ; r121 := (bitcast r113 (vec 8 double))
  %t124 = bitcast i512 %t116 to <8 x double>
  ; r122 := (bitcast r114 (vec 8 double))
  %t125 = bitcast i512 %t117 to <8 x double>
  ; r123 := (bitcast r115 (vec 8 double))
  %t126 = bitcast i512 %t118 to <8 x double>
  ; r124 := (bitcast r116 (vec 8 double))
  %t127 = bitcast i512 %t119 to <8 x double>
  ; r125 := (bitcast r117 (vec 8 double))
  %t128 = bitcast i512 %t120 to <8 x double>
  ; r126 := (bitcast r118 (vec 8 double))
  %t129 = bitcast i512 %t121 to <8 x double>
  ; r127 := (bitcast r119 (vec 8 double))
  %t130 = bitcast i512 %t122 to <8 x double>
  ; r128 := (bitcast r120 (vec 8 double))
  %t131 = bitcast i512 %t123 to <8 x double>
  ; call gmtsub(r110, (0x0 : bv 64), r109, r108, r111, r112, r121, r122, r123, r124, r125, r126, r127, r128)
  call void (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @gmtsub(i64 %t113, i64 0, i64 %t112, i64 %t111, i64 %t114, i64 %t115, <8 x double> %t124, <8 x double> %t125, <8 x double> %t126, <8 x double> %t127, <8 x double> %t128, <8 x double> %t129, <8 x double> %t130, <8 x double> %t131)
  br label %block_0_40db18
block_0_40db18:
  br label %block_0_40db31
block_0_40db20:
  %t132 = phi i64 [ %arg3, %block_0_40dac0 ]
  %t133 = phi i64 [ %arg0, %block_0_40dac0 ]
  %t134 = phi i64 [ %arg4, %block_0_40dac0 ]
  %t135 = phi i64 [ %arg5, %block_0_40dac0 ]
  %t136 = phi i512 [ %t3, %block_0_40dac0 ]
  %t137 = phi i512 [ %t4, %block_0_40dac0 ]
  %t138 = phi i512 [ %t5, %block_0_40dac0 ]
  %t139 = phi i512 [ %t6, %block_0_40dac0 ]
  %t140 = phi i512 [ %t7, %block_0_40dac0 ]
  %t141 = phi i512 [ %t8, %block_0_40dac0 ]
  %t142 = phi i512 [ %t9, %block_0_40dac0 ]
  %t143 = phi i512 [ %t10, %block_0_40dac0 ]
  ; r141 := (bitcast r133 (vec 8 double))
  %t144 = bitcast i512 %t136 to <8 x double>
  ; r142 := (bitcast r134 (vec 8 double))
  %t145 = bitcast i512 %t137 to <8 x double>
  ; r143 := (bitcast r135 (vec 8 double))
  %t146 = bitcast i512 %t138 to <8 x double>
  ; r144 := (bitcast r136 (vec 8 double))
  %t147 = bitcast i512 %t139 to <8 x double>
  ; r145 := (bitcast r137 (vec 8 double))
  %t148 = bitcast i512 %t140 to <8 x double>
  ; r146 := (bitcast r138 (vec 8 double))
  %t149 = bitcast i512 %t141 to <8 x double>
  ; r147 := (bitcast r139 (vec 8 double))
  %t150 = bitcast i512 %t142 to <8 x double>
  ; r148 := (bitcast r140 (vec 8 double))
  %t151 = bitcast i512 %t143 to <8 x double>
  ; call gmtsub(r130, (0x0 : bv 64), (0x63ec00 : bv 64), r129, r131, r132, r141, r142, r143, r144, r145, r146, r147, r148)
  call void (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @gmtsub(i64 %t133, i64 0, i64 6548480, i64 %t132, i64 %t134, i64 %t135, <8 x double> %t144, <8 x double> %t145, <8 x double> %t146, <8 x double> %t147, <8 x double> %t148, <8 x double> %t149, <8 x double> %t150, <8 x double> %t151)
  br label %block_0_40db31
block_0_40db31:
  ret void
block_0_40db43:
  %t152 = phi i64 [ %t48, %block_0_40daec ]
  %t153 = phi i64 [ %t50, %block_0_40daec ]
  %t154 = phi i64 [ %t51, %block_0_40daec ]
  %t155 = phi i512 [ %t54, %block_0_40daec ]
  ; r153 := (bitcast r152 (vec 8 double))
  %t156 = bitcast i512 %t155 to <8 x double>
  ; r154 := call __error_unthreaded(r151, r150, r149, r153)
  %t157 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t154, i64 %t153, i64 %t152, <8 x double> %t156)
  ; r155 := (tuple_field r154 0)
  %t158 = extractvalue { i64, i64, <8 x double> } %t157, 0
  ; r156 := (tuple_field r154 1)
  %t159 = extractvalue { i64, i64, <8 x double> } %t157, 1
  ; r157 := (tuple_field r154 2)
  %t160 = extractvalue { i64, i64, <8 x double> } %t157, 2
  ; r158 := (bitcast r157 (bv 512))
  %t161 = bitcast <8 x double> %t160 to i512
  br label %block_0_40db48
block_0_40db48:
  %t162 = phi i64 [ %t158, %block_0_40db43 ]
  ; r160 := (read (0x63ebe8 : bv 64) (bv 32))
  %t163 = inttoptr i64 6548456 to i32*
  %t164 = load i32, i32* %t163
  ; write r159 r160
  %t165 = inttoptr i64 %t162 to i32*
  store i32 %t164, i32* %t165
  br label %block_0_40db31
block_0_40db54:
  %t166 = phi i64 [ %t96, %block_0_40db03 ]
  %t167 = phi i64 [ %t97, %block_0_40db03 ]
  %t168 = phi i64 [ %t98, %block_0_40db03 ]
  %t169 = phi i64 [ %t99, %block_0_40db03 ]
  %t170 = phi i64 [ %t100, %block_0_40db03 ]
  %t171 = phi i64 [ %t101, %block_0_40db03 ]
  %t172 = phi i512 [ %t102, %block_0_40db03 ]
  %t173 = phi i512 [ %t103, %block_0_40db03 ]
  %t174 = phi i512 [ %t104, %block_0_40db03 ]
  %t175 = phi i512 [ %t105, %block_0_40db03 ]
  %t176 = phi i512 [ %t106, %block_0_40db03 ]
  %t177 = phi i512 [ %t107, %block_0_40db03 ]
  %t178 = phi i512 [ %t108, %block_0_40db03 ]
  %t179 = phi i512 [ %t109, %block_0_40db03 ]
  ; r175 := (bitcast r167 (vec 8 double))
  %t180 = bitcast i512 %t172 to <8 x double>
  ; r176 := (bitcast r168 (vec 8 double))
  %t181 = bitcast i512 %t173 to <8 x double>
  ; r177 := (bitcast r169 (vec 8 double))
  %t182 = bitcast i512 %t174 to <8 x double>
  ; r178 := (bitcast r170 (vec 8 double))
  %t183 = bitcast i512 %t175 to <8 x double>
  ; r179 := (bitcast r171 (vec 8 double))
  %t184 = bitcast i512 %t176 to <8 x double>
  ; r180 := (bitcast r172 (vec 8 double))
  %t185 = bitcast i512 %t177 to <8 x double>
  ; r181 := (bitcast r173 (vec 8 double))
  %t186 = bitcast i512 %t178 to <8 x double>
  ; r182 := (bitcast r174 (vec 8 double))
  %t187 = bitcast i512 %t179 to <8 x double>
  ; r183 := call malloc((0x38 : bv 64), r164, r162, r161, r165, r166, r175, r176, r177, r178, r179, r180, r181, r182)
  %t188 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @malloc(i64 56, i64 %t169, i64 %t167, i64 %t166, i64 %t170, i64 %t171, <8 x double> %t180, <8 x double> %t181, <8 x double> %t182, <8 x double> %t183, <8 x double> %t184, <8 x double> %t185, <8 x double> %t186, <8 x double> %t187)
  ; r184 := (tuple_field r183 0)
  %t189 = extractvalue { i64, i64, <8 x double> } %t188, 0
  ; r185 := (tuple_field r183 1)
  %t190 = extractvalue { i64, i64, <8 x double> } %t188, 1
  ; r186 := (tuple_field r183 2)
  %t191 = extractvalue { i64, i64, <8 x double> } %t188, 2
  ; r187 := (bitcast r186 (bv 512))
  %t192 = bitcast <8 x double> %t191 to i512
  br label %block_0_40db5e
block_0_40db5e:
  %t193 = phi i64 [ %t189, %block_0_40db54 ]
  %t194 = phi i64 [ %t166, %block_0_40db54 ]
  %t195 = phi i64 [ %t190, %block_0_40db54 ]
  %t196 = phi i64 [ %t168, %block_0_40db54 ]
  %t197 = phi i64 [ %t170, %block_0_40db54 ]
  %t198 = phi i64 [ %t171, %block_0_40db54 ]
  %t199 = phi i512 [ %t192, %block_0_40db54 ]
  %t200 = phi i512 [ %t173, %block_0_40db54 ]
  %t201 = phi i512 [ %t174, %block_0_40db54 ]
  %t202 = phi i512 [ %t175, %block_0_40db54 ]
  %t203 = phi i512 [ %t176, %block_0_40db54 ]
  %t204 = phi i512 [ %t177, %block_0_40db54 ]
  %t205 = phi i512 [ %t178, %block_0_40db54 ]
  %t206 = phi i512 [ %t179, %block_0_40db54 ]
  ; r202 := (eq r188 (0x0 : bv 64))
  %t207 = icmp eq i64 %t193, 0
  br i1 %t207, label %block_0_40db31, label %block_0_40db63
block_0_40db63:
  %t208 = phi i64 [ %t193, %block_0_40db5e ]
  %t209 = phi i64 [ %t194, %block_0_40db5e ]
  %t210 = phi i64 [ %t195, %block_0_40db5e ]
  %t211 = phi i64 [ %t196, %block_0_40db5e ]
  %t212 = phi i64 [ %t197, %block_0_40db5e ]
  %t213 = phi i64 [ %t198, %block_0_40db5e ]
  %t214 = phi i512 [ %t199, %block_0_40db5e ]
  %t215 = phi i512 [ %t200, %block_0_40db5e ]
  %t216 = phi i512 [ %t201, %block_0_40db5e ]
  %t217 = phi i512 [ %t202, %block_0_40db5e ]
  %t218 = phi i512 [ %t203, %block_0_40db5e ]
  %t219 = phi i512 [ %t204, %block_0_40db5e ]
  %t220 = phi i512 [ %t205, %block_0_40db5e ]
  %t221 = phi i512 [ %t206, %block_0_40db5e ]
  ; r217 := (read (0x63ebe4 : bv 64) (bv 32))
  %t222 = inttoptr i64 6548452 to i32*
  %t223 = load i32, i32* %t222
  ; r218 := (uext r217 64)
  %t224 = zext i32 %t223 to i64
  ; r219 := (bitcast r209 (vec 8 double))
  %t225 = bitcast i512 %t214 to <8 x double>
  ; r220 := (bitcast r210 (vec 8 double))
  %t226 = bitcast i512 %t215 to <8 x double>
  ; r221 := (bitcast r211 (vec 8 double))
  %t227 = bitcast i512 %t216 to <8 x double>
  ; r222 := (bitcast r212 (vec 8 double))
  %t228 = bitcast i512 %t217 to <8 x double>
  ; r223 := (bitcast r213 (vec 8 double))
  %t229 = bitcast i512 %t218 to <8 x double>
  ; r224 := (bitcast r214 (vec 8 double))
  %t230 = bitcast i512 %t219 to <8 x double>
  ; r225 := (bitcast r215 (vec 8 double))
  %t231 = bitcast i512 %t220 to <8 x double>
  ; r226 := (bitcast r216 (vec 8 double))
  %t232 = bitcast i512 %t221 to <8 x double>
  ; r227 := call pthread_setspecific_int(r218, r203, r205, r204, r207, r208, r219, r220, r221, r222, r223, r224, r225, r226)
  %t233 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_setspecific_int(i64 %t224, i64 %t208, i64 %t210, i64 %t209, i64 %t212, i64 %t213, <8 x double> %t225, <8 x double> %t226, <8 x double> %t227, <8 x double> %t228, <8 x double> %t229, <8 x double> %t230, <8 x double> %t231, <8 x double> %t232)
  ; r228 := (tuple_field r227 0)
  %t234 = extractvalue { i64, i64, <8 x double> } %t233, 0
  ; r229 := (tuple_field r227 1)
  %t235 = extractvalue { i64, i64, <8 x double> } %t233, 1
  ; r230 := (tuple_field r227 2)
  %t236 = extractvalue { i64, i64, <8 x double> } %t233, 2
  ; r231 := (bitcast r230 (bv 512))
  %t237 = bitcast <8 x double> %t236 to i512
  br label %block_0_40db74
block_0_40db74:
  %t238 = phi i64 [ %t209, %block_0_40db63 ]
  %t239 = phi i64 [ %t208, %block_0_40db63 ]
  %t240 = phi i64 [ %t211, %block_0_40db63 ]
  %t241 = phi i64 [ %t212, %block_0_40db63 ]
  %t242 = phi i64 [ %t213, %block_0_40db63 ]
  %t243 = phi i512 [ %t237, %block_0_40db63 ]
  %t244 = phi i512 [ %t215, %block_0_40db63 ]
  %t245 = phi i512 [ %t216, %block_0_40db63 ]
  %t246 = phi i512 [ %t217, %block_0_40db63 ]
  %t247 = phi i512 [ %t218, %block_0_40db63 ]
  %t248 = phi i512 [ %t219, %block_0_40db63 ]
  %t249 = phi i512 [ %t220, %block_0_40db63 ]
  %t250 = phi i512 [ %t221, %block_0_40db63 ]
  br label %block_0_40db0b
}
define { i64, i64, <8 x double> } @localtime(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40db80:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_40dc02, label %block_0_40db9b
block_0_40db9b:
  %t12 = phi i64 [ %arg3, %block_0_40db80 ]
  %t13 = phi i64 [ %arg2, %block_0_40db80 ]
  %t14 = phi i64 [ %arg0, %block_0_40db80 ]
  %t15 = phi i64 [ %arg1, %block_0_40db80 ]
  %t16 = phi i64 [ %arg0, %block_0_40db80 ]
  %t17 = phi i64 [ %arg4, %block_0_40db80 ]
  %t18 = phi i64 [ %arg5, %block_0_40db80 ]
  %t19 = phi i512 [ %t4, %block_0_40db80 ]
  %t20 = phi i512 [ %t5, %block_0_40db80 ]
  %t21 = phi i512 [ %t6, %block_0_40db80 ]
  %t22 = phi i512 [ %t7, %block_0_40db80 ]
  %t23 = phi i512 [ %t8, %block_0_40db80 ]
  %t24 = phi i512 [ %t9, %block_0_40db80 ]
  %t25 = phi i512 [ %t10, %block_0_40db80 ]
  %t26 = phi i512 [ %t11, %block_0_40db80 ]
  ; r26 := (bitcast r18 (vec 8 double))
  %t27 = bitcast i512 %t19 to <8 x double>
  ; r27 := (bitcast r19 (vec 8 double))
  %t28 = bitcast i512 %t20 to <8 x double>
  ; r28 := (bitcast r20 (vec 8 double))
  %t29 = bitcast i512 %t21 to <8 x double>
  ; r29 := (bitcast r21 (vec 8 double))
  %t30 = bitcast i512 %t22 to <8 x double>
  ; r30 := (bitcast r22 (vec 8 double))
  %t31 = bitcast i512 %t23 to <8 x double>
  ; r31 := (bitcast r23 (vec 8 double))
  %t32 = bitcast i512 %t24 to <8 x double>
  ; r32 := (bitcast r24 (vec 8 double))
  %t33 = bitcast i512 %t25 to <8 x double>
  ; r33 := (bitcast r25 (vec 8 double))
  %t34 = bitcast i512 %t26 to <8 x double>
  ; r34 := call pthread_once_int((0x635bd0 : bv 64), (0x40dcc0 : bv 64), r12, r11, r16, r17, r26, r27, r28, r29, r30, r31, r32, r33)
  %t35 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_once_int(i64 6511568, i64 4250816, i64 %t13, i64 %t12, i64 %t17, i64 %t18, <8 x double> %t27, <8 x double> %t28, <8 x double> %t29, <8 x double> %t30, <8 x double> %t31, <8 x double> %t32, <8 x double> %t33, <8 x double> %t34)
  ; r35 := (tuple_field r34 0)
  %t36 = extractvalue { i64, i64, <8 x double> } %t35, 0
  ; r36 := (tuple_field r34 1)
  %t37 = extractvalue { i64, i64, <8 x double> } %t35, 1
  ; r37 := (tuple_field r34 2)
  %t38 = extractvalue { i64, i64, <8 x double> } %t35, 2
  ; r38 := (bitcast r37 (bv 512))
  %t39 = bitcast <8 x double> %t38 to i512
  br label %block_0_40dbaa
block_0_40dbaa:
  %t40 = phi i64 [ %t12, %block_0_40db9b ]
  %t41 = phi i64 [ %t37, %block_0_40db9b ]
  %t42 = phi i64 [ %t14, %block_0_40db9b ]
  %t43 = phi i64 [ %t15, %block_0_40db9b ]
  %t44 = phi i64 [ %t16, %block_0_40db9b ]
  %t45 = phi i64 [ %t17, %block_0_40db9b ]
  %t46 = phi i64 [ %t18, %block_0_40db9b ]
  %t47 = phi i512 [ %t39, %block_0_40db9b ]
  %t48 = phi i512 [ %t20, %block_0_40db9b ]
  %t49 = phi i512 [ %t21, %block_0_40db9b ]
  %t50 = phi i512 [ %t22, %block_0_40db9b ]
  %t51 = phi i512 [ %t23, %block_0_40db9b ]
  %t52 = phi i512 [ %t24, %block_0_40db9b ]
  %t53 = phi i512 [ %t25, %block_0_40db9b ]
  %t54 = phi i512 [ %t26, %block_0_40db9b ]
  ; r54 := (read (0x63ebf0 : bv 64) (bv 32))
  %t55 = inttoptr i64 6548464 to i32*
  %t56 = load i32, i32* %t55
  ; r55 := (eq r54 (0x0 : bv 32))
  %t57 = icmp eq i32 %t56, 0
  br i1 %t57, label %block_0_40dbb4, label %block_0_40dc2f
block_0_40dbb4:
  %t58 = phi i64 [ %t40, %block_0_40dbaa ]
  %t59 = phi i64 [ %t41, %block_0_40dbaa ]
  %t60 = phi i64 [ %t42, %block_0_40dbaa ]
  %t61 = phi i64 [ %t43, %block_0_40dbaa ]
  %t62 = phi i64 [ %t45, %block_0_40dbaa ]
  %t63 = phi i64 [ %t46, %block_0_40dbaa ]
  %t64 = phi i512 [ %t47, %block_0_40dbaa ]
  %t65 = phi i512 [ %t48, %block_0_40dbaa ]
  %t66 = phi i512 [ %t49, %block_0_40dbaa ]
  %t67 = phi i512 [ %t50, %block_0_40dbaa ]
  %t68 = phi i512 [ %t51, %block_0_40dbaa ]
  %t69 = phi i512 [ %t52, %block_0_40dbaa ]
  %t70 = phi i512 [ %t53, %block_0_40dbaa ]
  %t71 = phi i512 [ %t54, %block_0_40dbaa ]
  ; r70 := (read (0x63ebec : bv 64) (bv 32))
  %t72 = inttoptr i64 6548460 to i32*
  %t73 = load i32, i32* %t72
  ; r71 := (uext r70 64)
  %t74 = zext i32 %t73 to i64
  ; r72 := (bitcast r62 (vec 8 double))
  %t75 = bitcast i512 %t64 to <8 x double>
  ; r73 := (bitcast r63 (vec 8 double))
  %t76 = bitcast i512 %t65 to <8 x double>
  ; r74 := (bitcast r64 (vec 8 double))
  %t77 = bitcast i512 %t66 to <8 x double>
  ; r75 := (bitcast r65 (vec 8 double))
  %t78 = bitcast i512 %t67 to <8 x double>
  ; r76 := (bitcast r66 (vec 8 double))
  %t79 = bitcast i512 %t68 to <8 x double>
  ; r77 := (bitcast r67 (vec 8 double))
  %t80 = bitcast i512 %t69 to <8 x double>
  ; r78 := (bitcast r68 (vec 8 double))
  %t81 = bitcast i512 %t70 to <8 x double>
  ; r79 := (bitcast r69 (vec 8 double))
  %t82 = bitcast i512 %t71 to <8 x double>
  ; r80 := call pthread_getspecific_int(r71, r59, r57, r56, r60, r61, r72, r73, r74, r75, r76, r77, r78, r79)
  %t83 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_getspecific_int(i64 %t74, i64 %t61, i64 %t59, i64 %t58, i64 %t62, i64 %t63, <8 x double> %t75, <8 x double> %t76, <8 x double> %t77, <8 x double> %t78, <8 x double> %t79, <8 x double> %t80, <8 x double> %t81, <8 x double> %t82)
  ; r81 := (tuple_field r80 0)
  %t84 = extractvalue { i64, i64, <8 x double> } %t83, 0
  ; r82 := (tuple_field r80 1)
  %t85 = extractvalue { i64, i64, <8 x double> } %t83, 1
  ; r83 := (tuple_field r80 2)
  %t86 = extractvalue { i64, i64, <8 x double> } %t83, 2
  ; r84 := (bitcast r83 (bv 512))
  %t87 = bitcast <8 x double> %t86 to i512
  br label %block_0_40dbbf
block_0_40dbbf:
  %t88 = phi i64 [ %t84, %block_0_40dbb4 ]
  %t89 = phi i64 [ %t58, %block_0_40dbb4 ]
  %t90 = phi i64 [ %t85, %block_0_40dbb4 ]
  %t91 = phi i64 [ %t60, %block_0_40dbb4 ]
  %t92 = phi i64 [ %t61, %block_0_40dbb4 ]
  %t93 = phi i64 [ %t62, %block_0_40dbb4 ]
  %t94 = phi i64 [ %t63, %block_0_40dbb4 ]
  %t95 = phi i512 [ %t87, %block_0_40dbb4 ]
  %t96 = phi i512 [ %t65, %block_0_40dbb4 ]
  %t97 = phi i512 [ %t66, %block_0_40dbb4 ]
  %t98 = phi i512 [ %t67, %block_0_40dbb4 ]
  %t99 = phi i512 [ %t68, %block_0_40dbb4 ]
  %t100 = phi i512 [ %t69, %block_0_40dbb4 ]
  %t101 = phi i512 [ %t70, %block_0_40dbb4 ]
  %t102 = phi i512 [ %t71, %block_0_40dbb4 ]
  ; r100 := (eq r85 (0x0 : bv 64))
  %t103 = icmp eq i64 %t88, 0
  br i1 %t103, label %block_0_40dc4c, label %block_0_40dbcb
block_0_40dbcb:
  %t104 = phi i64 [ %t89, %block_0_40dbbf ], [ %t365, %block_0_40dc6c ]
  %t105 = phi i64 [ %t90, %block_0_40dbbf ], [ %t366, %block_0_40dc6c ]
  %t106 = phi i64 [ %t88, %block_0_40dbbf ], [ %t367, %block_0_40dc6c ]
  %t107 = phi i64 [ %t91, %block_0_40dbbf ], [ %t368, %block_0_40dc6c ]
  %t108 = phi i64 [ %t92, %block_0_40dbbf ], [ %t369, %block_0_40dc6c ]
  %t109 = phi i64 [ %t93, %block_0_40dbbf ], [ %t370, %block_0_40dc6c ]
  %t110 = phi i64 [ %t94, %block_0_40dbbf ], [ %t371, %block_0_40dc6c ]
  %t111 = phi i512 [ %t95, %block_0_40dbbf ], [ %t372, %block_0_40dc6c ]
  %t112 = phi i512 [ %t96, %block_0_40dbbf ], [ %t373, %block_0_40dc6c ]
  %t113 = phi i512 [ %t97, %block_0_40dbbf ], [ %t374, %block_0_40dc6c ]
  %t114 = phi i512 [ %t98, %block_0_40dbbf ], [ %t375, %block_0_40dc6c ]
  %t115 = phi i512 [ %t99, %block_0_40dbbf ], [ %t376, %block_0_40dc6c ]
  %t116 = phi i512 [ %t100, %block_0_40dbbf ], [ %t377, %block_0_40dc6c ]
  %t117 = phi i512 [ %t101, %block_0_40dbbf ], [ %t378, %block_0_40dc6c ]
  %t118 = phi i512 [ %t102, %block_0_40dbbf ], [ %t379, %block_0_40dc6c ]
  ; r116 := (read (0x6356e8 : bv 64) (bv 32))
  %t119 = inttoptr i64 6510312 to i32*
  %t120 = load i32, i32* %t119
  ; r117 := (eq r116 (0x0 : bv 32))
  %t121 = icmp eq i32 %t120, 0
  br i1 %t121, label %block_0_40dbd5, label %block_0_40dc40
block_0_40dbd5:
  %t122 = phi i64 [ %t104, %block_0_40dbcb ], [ %t274, %block_0_40dc4a ]
  %t123 = phi i64 [ %t105, %block_0_40dbcb ], [ %t275, %block_0_40dc4a ]
  %t124 = phi i64 [ %t106, %block_0_40dbcb ], [ %t276, %block_0_40dc4a ]
  %t125 = phi i64 [ %t107, %block_0_40dbcb ], [ %t277, %block_0_40dc4a ]
  %t126 = phi i64 [ %t108, %block_0_40dbcb ], [ %t278, %block_0_40dc4a ]
  %t127 = phi i64 [ %t109, %block_0_40dbcb ], [ %t279, %block_0_40dc4a ]
  %t128 = phi i64 [ %t110, %block_0_40dbcb ], [ %t280, %block_0_40dc4a ]
  %t129 = phi i512 [ %t111, %block_0_40dbcb ], [ %t281, %block_0_40dc4a ]
  %t130 = phi i512 [ %t112, %block_0_40dbcb ], [ %t282, %block_0_40dc4a ]
  %t131 = phi i512 [ %t113, %block_0_40dbcb ], [ %t283, %block_0_40dc4a ]
  %t132 = phi i512 [ %t114, %block_0_40dbcb ], [ %t284, %block_0_40dc4a ]
  %t133 = phi i512 [ %t115, %block_0_40dbcb ], [ %t285, %block_0_40dc4a ]
  %t134 = phi i512 [ %t116, %block_0_40dbcb ], [ %t286, %block_0_40dc4a ]
  %t135 = phi i512 [ %t117, %block_0_40dbcb ], [ %t287, %block_0_40dc4a ]
  %t136 = phi i512 [ %t118, %block_0_40dbcb ], [ %t288, %block_0_40dc4a ]
  ; r133 := (bitcast r125 (vec 8 double))
  %t137 = bitcast i512 %t129 to <8 x double>
  ; r134 := call tzset_basic((0x1 : bv 64), r122, r119, r133)
  %t138 = call <8 x double> (i64, i64, i64, <8 x double>) @tzset_basic(i64 1, i64 %t126, i64 %t123, <8 x double> %t137)
  ; r135 := (bitcast r134 (bv 512))
  %t139 = bitcast <8 x double> %t138 to i512
  br label %block_0_40dbdf
block_0_40dbdf:
  %t140 = phi i64 [ %t122, %block_0_40dbd5 ]
  %t141 = phi i64 [ %t124, %block_0_40dbd5 ]
  %t142 = phi i64 [ %t125, %block_0_40dbd5 ]
  %t143 = phi i64 [ %t126, %block_0_40dbd5 ]
  %t144 = phi i64 [ %t127, %block_0_40dbd5 ]
  %t145 = phi i64 [ %t128, %block_0_40dbd5 ]
  %t146 = phi i512 [ %t139, %block_0_40dbd5 ]
  %t147 = phi i512 [ %t130, %block_0_40dbd5 ]
  %t148 = phi i512 [ %t131, %block_0_40dbd5 ]
  %t149 = phi i512 [ %t132, %block_0_40dbd5 ]
  %t150 = phi i512 [ %t133, %block_0_40dbd5 ]
  %t151 = phi i512 [ %t134, %block_0_40dbd5 ]
  %t152 = phi i512 [ %t135, %block_0_40dbd5 ]
  %t153 = phi i512 [ %t136, %block_0_40dbd5 ]
  ; r150 := (bitcast r142 (vec 8 double))
  %t154 = bitcast i512 %t146 to <8 x double>
  ; r151 := call localsub(r138, (0x0 : bv 64), r137, r150)
  %t155 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @localsub(i64 %t142, i64 0, i64 %t141, <8 x double> %t154)
  ; r152 := (tuple_field r151 0)
  %t156 = extractvalue { i64, i64, <8 x double> } %t155, 0
  ; r153 := (tuple_field r151 1)
  %t157 = extractvalue { i64, i64, <8 x double> } %t155, 1
  ; r154 := (tuple_field r151 2)
  %t158 = extractvalue { i64, i64, <8 x double> } %t155, 2
  ; r155 := (bitcast r154 (bv 512))
  %t159 = bitcast <8 x double> %t158 to i512
  br label %block_0_40dbec
block_0_40dbec:
  %t160 = phi i64 [ %t140, %block_0_40dbdf ]
  %t161 = phi i64 [ %t157, %block_0_40dbdf ]
  %t162 = phi i64 [ %t141, %block_0_40dbdf ]
  %t163 = phi i64 [ %t143, %block_0_40dbdf ]
  %t164 = phi i64 [ %t144, %block_0_40dbdf ]
  %t165 = phi i64 [ %t145, %block_0_40dbdf ]
  %t166 = phi i512 [ %t159, %block_0_40dbdf ]
  %t167 = phi i512 [ %t147, %block_0_40dbdf ]
  %t168 = phi i512 [ %t148, %block_0_40dbdf ]
  %t169 = phi i512 [ %t149, %block_0_40dbdf ]
  %t170 = phi i512 [ %t150, %block_0_40dbdf ]
  %t171 = phi i512 [ %t151, %block_0_40dbdf ]
  %t172 = phi i512 [ %t152, %block_0_40dbdf ]
  %t173 = phi i512 [ %t153, %block_0_40dbdf ]
  ; r170 := (read (0x6356e8 : bv 64) (bv 32))
  %t174 = inttoptr i64 6510312 to i32*
  %t175 = load i32, i32* %t174
  ; r171 := (eq r170 (0x0 : bv 32))
  %t176 = icmp eq i32 %t175, 0
  br i1 %t176, label %block_0_40dc1d, label %block_0_40dbf6
block_0_40dbf6:
  %t177 = phi i64 [ %t160, %block_0_40dbec ]
  %t178 = phi i64 [ %t161, %block_0_40dbec ]
  %t179 = phi i64 [ %t162, %block_0_40dbec ]
  %t180 = phi i64 [ %t163, %block_0_40dbec ]
  %t181 = phi i64 [ %t164, %block_0_40dbec ]
  %t182 = phi i64 [ %t165, %block_0_40dbec ]
  %t183 = phi i512 [ %t166, %block_0_40dbec ]
  %t184 = phi i512 [ %t167, %block_0_40dbec ]
  %t185 = phi i512 [ %t168, %block_0_40dbec ]
  %t186 = phi i512 [ %t169, %block_0_40dbec ]
  %t187 = phi i512 [ %t170, %block_0_40dbec ]
  %t188 = phi i512 [ %t171, %block_0_40dbec ]
  %t189 = phi i512 [ %t172, %block_0_40dbec ]
  %t190 = phi i512 [ %t173, %block_0_40dbec ]
  ; r186 := (bitcast r178 (vec 8 double))
  %t191 = bitcast i512 %t183 to <8 x double>
  ; r187 := (bitcast r179 (vec 8 double))
  %t192 = bitcast i512 %t184 to <8 x double>
  ; r188 := (bitcast r180 (vec 8 double))
  %t193 = bitcast i512 %t185 to <8 x double>
  ; r189 := (bitcast r181 (vec 8 double))
  %t194 = bitcast i512 %t186 to <8 x double>
  ; r190 := (bitcast r182 (vec 8 double))
  %t195 = bitcast i512 %t187 to <8 x double>
  ; r191 := (bitcast r183 (vec 8 double))
  %t196 = bitcast i512 %t188 to <8 x double>
  ; r192 := (bitcast r184 (vec 8 double))
  %t197 = bitcast i512 %t189 to <8 x double>
  ; r193 := (bitcast r185 (vec 8 double))
  %t198 = bitcast i512 %t190 to <8 x double>
  ; r194 := call pthread_rwlock_unlock_int((0x635bb0 : bv 64), r175, r173, r172, r176, r177, r186, r187, r188, r189, r190, r191, r192, r193)
  %t199 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_rwlock_unlock_int(i64 6511536, i64 %t180, i64 %t178, i64 %t177, i64 %t181, i64 %t182, <8 x double> %t191, <8 x double> %t192, <8 x double> %t193, <8 x double> %t194, <8 x double> %t195, <8 x double> %t196, <8 x double> %t197, <8 x double> %t198)
  ; r195 := (tuple_field r194 0)
  %t200 = extractvalue { i64, i64, <8 x double> } %t199, 0
  ; r196 := (tuple_field r194 1)
  %t201 = extractvalue { i64, i64, <8 x double> } %t199, 1
  ; r197 := (tuple_field r194 2)
  %t202 = extractvalue { i64, i64, <8 x double> } %t199, 2
  ; r198 := (bitcast r197 (bv 512))
  %t203 = bitcast <8 x double> %t202 to i512
  br label %block_0_40dc00
block_0_40dc00:
  %t204 = phi i64 [ %t201, %block_0_40dbf6 ]
  %t205 = phi i64 [ %t179, %block_0_40dbf6 ]
  %t206 = phi i512 [ %t203, %block_0_40dbf6 ]
  br label %block_0_40dc1d
block_0_40dc02:
  %t207 = phi i64 [ %arg2, %block_0_40db80 ]
  %t208 = phi i64 [ %arg0, %block_0_40db80 ]
  %t209 = phi i64 [ %arg1, %block_0_40db80 ]
  %t210 = phi i512 [ %t3, %block_0_40db80 ]
  ; r206 := (bitcast r205 (vec 8 double))
  %t211 = bitcast i512 %t210 to <8 x double>
  ; r207 := call tzset_basic((0x0 : bv 64), r204, r202, r206)
  %t212 = call <8 x double> (i64, i64, i64, <8 x double>) @tzset_basic(i64 0, i64 %t209, i64 %t207, <8 x double> %t211)
  ; r208 := (bitcast r207 (bv 512))
  %t213 = bitcast <8 x double> %t212 to i512
  br label %block_0_40dc0e
block_0_40dc0e:
  %t214 = phi i64 [ 6548480, %block_0_40dc02 ]
  %t215 = phi i64 [ %t208, %block_0_40dc02 ]
  %t216 = phi i512 [ %t213, %block_0_40dc02 ]
  ; r212 := (bitcast r211 (vec 8 double))
  %t217 = bitcast i512 %t216 to <8 x double>
  ; r213 := call localsub(r210, (0x0 : bv 64), (0x63ec00 : bv 64), r212)
  %t218 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @localsub(i64 %t215, i64 0, i64 6548480, <8 x double> %t217)
  ; r214 := (tuple_field r213 0)
  %t219 = extractvalue { i64, i64, <8 x double> } %t218, 0
  ; r215 := (tuple_field r213 1)
  %t220 = extractvalue { i64, i64, <8 x double> } %t218, 1
  ; r216 := (tuple_field r213 2)
  %t221 = extractvalue { i64, i64, <8 x double> } %t218, 2
  ; r217 := (bitcast r216 (bv 512))
  %t222 = bitcast <8 x double> %t221 to i512
  br label %block_0_40dc1d
block_0_40dc1d:
  %t223 = phi i64 [ %t161, %block_0_40dbec ], [ %t204, %block_0_40dc00 ], [ %t220, %block_0_40dc0e ], [ %t244, %block_0_40dc34 ], [ %t319, %block_0_40dc56 ]
  %t224 = phi i64 [ %t162, %block_0_40dbec ], [ %t205, %block_0_40dc00 ], [ %t214, %block_0_40dc0e ], [ 0, %block_0_40dc34 ], [ %t320, %block_0_40dc56 ]
  %t225 = phi i512 [ %t166, %block_0_40dbec ], [ %t206, %block_0_40dc00 ], [ %t222, %block_0_40dc0e ], [ %t241, %block_0_40dc34 ], [ %t325, %block_0_40dc56 ]
  ; r221 := (bitcast r220 (vec 8 double))
  %t226 = bitcast i512 %t225 to <8 x double>
  ; r222 := (tuple r219 r218 r221)
  %t227 = insertvalue { i64, i64, <8 x double> } undef, i64 %t224, 0
  %t228 = insertvalue { i64, i64, <8 x double> } %t227, i64 %t223, 1
  %t229 = insertvalue { i64, i64, <8 x double> } %t228, <8 x double> %t226, 2
  ret { i64, i64, <8 x double> } %t229
block_0_40dc2f:
  %t230 = phi i64 [ %t41, %block_0_40dbaa ]
  %t231 = phi i64 [ %t43, %block_0_40dbaa ]
  %t232 = phi i64 [ %t44, %block_0_40dbaa ]
  %t233 = phi i512 [ %t47, %block_0_40dbaa ]
  ; r227 := (bitcast r226 (vec 8 double))
  %t234 = bitcast i512 %t233 to <8 x double>
  ; r228 := call __error_unthreaded(r225, r224, r223, r227)
  %t235 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t232, i64 %t231, i64 %t230, <8 x double> %t234)
  ; r229 := (tuple_field r228 0)
  %t236 = extractvalue { i64, i64, <8 x double> } %t235, 0
  ; r230 := (tuple_field r228 1)
  %t237 = extractvalue { i64, i64, <8 x double> } %t235, 1
  ; r231 := (tuple_field r228 2)
  %t238 = extractvalue { i64, i64, <8 x double> } %t235, 2
  ; r232 := (bitcast r231 (bv 512))
  %t239 = bitcast <8 x double> %t238 to i512
  br label %block_0_40dc34
block_0_40dc34:
  %t240 = phi i64 [ %t236, %block_0_40dc2f ]
  %t241 = phi i512 [ %t239, %block_0_40dc2f ]
  ; r235 := (read (0x63ebf0 : bv 64) (bv 32))
  %t242 = inttoptr i64 6548464 to i32*
  %t243 = load i32, i32* %t242
  ; r236 := (uext r235 64)
  %t244 = zext i32 %t243 to i64
  ; write r233 r235
  %t245 = inttoptr i64 %t240 to i32*
  store i32 %t243, i32* %t245
  br label %block_0_40dc1d
block_0_40dc40:
  %t246 = phi i64 [ %t104, %block_0_40dbcb ]
  %t247 = phi i64 [ %t105, %block_0_40dbcb ]
  %t248 = phi i64 [ %t106, %block_0_40dbcb ]
  %t249 = phi i64 [ %t107, %block_0_40dbcb ]
  %t250 = phi i64 [ %t108, %block_0_40dbcb ]
  %t251 = phi i64 [ %t109, %block_0_40dbcb ]
  %t252 = phi i64 [ %t110, %block_0_40dbcb ]
  %t253 = phi i512 [ %t111, %block_0_40dbcb ]
  %t254 = phi i512 [ %t112, %block_0_40dbcb ]
  %t255 = phi i512 [ %t113, %block_0_40dbcb ]
  %t256 = phi i512 [ %t114, %block_0_40dbcb ]
  %t257 = phi i512 [ %t115, %block_0_40dbcb ]
  %t258 = phi i512 [ %t116, %block_0_40dbcb ]
  %t259 = phi i512 [ %t117, %block_0_40dbcb ]
  %t260 = phi i512 [ %t118, %block_0_40dbcb ]
  ; r252 := (bitcast r244 (vec 8 double))
  %t261 = bitcast i512 %t253 to <8 x double>
  ; r253 := (bitcast r245 (vec 8 double))
  %t262 = bitcast i512 %t254 to <8 x double>
  ; r254 := (bitcast r246 (vec 8 double))
  %t263 = bitcast i512 %t255 to <8 x double>
  ; r255 := (bitcast r247 (vec 8 double))
  %t264 = bitcast i512 %t256 to <8 x double>
  ; r256 := (bitcast r248 (vec 8 double))
  %t265 = bitcast i512 %t257 to <8 x double>
  ; r257 := (bitcast r249 (vec 8 double))
  %t266 = bitcast i512 %t258 to <8 x double>
  ; r258 := (bitcast r250 (vec 8 double))
  %t267 = bitcast i512 %t259 to <8 x double>
  ; r259 := (bitcast r251 (vec 8 double))
  %t268 = bitcast i512 %t260 to <8 x double>
  ; r260 := call pthread_rwlock_rdlock_int((0x635bb0 : bv 64), r241, r238, r237, r242, r243, r252, r253, r254, r255, r256, r257, r258, r259)
  %t269 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_rwlock_rdlock_int(i64 6511536, i64 %t250, i64 %t247, i64 %t246, i64 %t251, i64 %t252, <8 x double> %t261, <8 x double> %t262, <8 x double> %t263, <8 x double> %t264, <8 x double> %t265, <8 x double> %t266, <8 x double> %t267, <8 x double> %t268)
  ; r261 := (tuple_field r260 0)
  %t270 = extractvalue { i64, i64, <8 x double> } %t269, 0
  ; r262 := (tuple_field r260 1)
  %t271 = extractvalue { i64, i64, <8 x double> } %t269, 1
  ; r263 := (tuple_field r260 2)
  %t272 = extractvalue { i64, i64, <8 x double> } %t269, 2
  ; r264 := (bitcast r263 (bv 512))
  %t273 = bitcast <8 x double> %t272 to i512
  br label %block_0_40dc4a
block_0_40dc4a:
  %t274 = phi i64 [ %t246, %block_0_40dc40 ]
  %t275 = phi i64 [ %t271, %block_0_40dc40 ]
  %t276 = phi i64 [ %t248, %block_0_40dc40 ]
  %t277 = phi i64 [ %t249, %block_0_40dc40 ]
  %t278 = phi i64 [ %t250, %block_0_40dc40 ]
  %t279 = phi i64 [ %t251, %block_0_40dc40 ]
  %t280 = phi i64 [ %t252, %block_0_40dc40 ]
  %t281 = phi i512 [ %t273, %block_0_40dc40 ]
  %t282 = phi i512 [ %t254, %block_0_40dc40 ]
  %t283 = phi i512 [ %t255, %block_0_40dc40 ]
  %t284 = phi i512 [ %t256, %block_0_40dc40 ]
  %t285 = phi i512 [ %t257, %block_0_40dc40 ]
  %t286 = phi i512 [ %t258, %block_0_40dc40 ]
  %t287 = phi i512 [ %t259, %block_0_40dc40 ]
  %t288 = phi i512 [ %t260, %block_0_40dc40 ]
  br label %block_0_40dbd5
block_0_40dc4c:
  %t289 = phi i64 [ %t88, %block_0_40dbbf ]
  %t290 = phi i64 [ %t89, %block_0_40dbbf ]
  %t291 = phi i64 [ %t90, %block_0_40dbbf ]
  %t292 = phi i64 [ %t91, %block_0_40dbbf ]
  %t293 = phi i64 [ %t92, %block_0_40dbbf ]
  %t294 = phi i64 [ %t93, %block_0_40dbbf ]
  %t295 = phi i64 [ %t94, %block_0_40dbbf ]
  %t296 = phi i512 [ %t95, %block_0_40dbbf ]
  %t297 = phi i512 [ %t96, %block_0_40dbbf ]
  %t298 = phi i512 [ %t97, %block_0_40dbbf ]
  %t299 = phi i512 [ %t98, %block_0_40dbbf ]
  %t300 = phi i512 [ %t99, %block_0_40dbbf ]
  %t301 = phi i512 [ %t100, %block_0_40dbbf ]
  %t302 = phi i512 [ %t101, %block_0_40dbbf ]
  %t303 = phi i512 [ %t102, %block_0_40dbbf ]
  ; r295 := (bitcast r287 (vec 8 double))
  %t304 = bitcast i512 %t296 to <8 x double>
  ; r296 := (bitcast r288 (vec 8 double))
  %t305 = bitcast i512 %t297 to <8 x double>
  ; r297 := (bitcast r289 (vec 8 double))
  %t306 = bitcast i512 %t298 to <8 x double>
  ; r298 := (bitcast r290 (vec 8 double))
  %t307 = bitcast i512 %t299 to <8 x double>
  ; r299 := (bitcast r291 (vec 8 double))
  %t308 = bitcast i512 %t300 to <8 x double>
  ; r300 := (bitcast r292 (vec 8 double))
  %t309 = bitcast i512 %t301 to <8 x double>
  ; r301 := (bitcast r293 (vec 8 double))
  %t310 = bitcast i512 %t302 to <8 x double>
  ; r302 := (bitcast r294 (vec 8 double))
  %t311 = bitcast i512 %t303 to <8 x double>
  ; r303 := call malloc((0x38 : bv 64), r284, r282, r281, r285, r286, r295, r296, r297, r298, r299, r300, r301, r302)
  %t312 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @malloc(i64 56, i64 %t293, i64 %t291, i64 %t290, i64 %t294, i64 %t295, <8 x double> %t304, <8 x double> %t305, <8 x double> %t306, <8 x double> %t307, <8 x double> %t308, <8 x double> %t309, <8 x double> %t310, <8 x double> %t311)
  ; r304 := (tuple_field r303 0)
  %t313 = extractvalue { i64, i64, <8 x double> } %t312, 0
  ; r305 := (tuple_field r303 1)
  %t314 = extractvalue { i64, i64, <8 x double> } %t312, 1
  ; r306 := (tuple_field r303 2)
  %t315 = extractvalue { i64, i64, <8 x double> } %t312, 2
  ; r307 := (bitcast r306 (bv 512))
  %t316 = bitcast <8 x double> %t315 to i512
  br label %block_0_40dc56
block_0_40dc56:
  %t317 = phi i64 [ %t313, %block_0_40dc4c ]
  %t318 = phi i64 [ %t290, %block_0_40dc4c ]
  %t319 = phi i64 [ %t314, %block_0_40dc4c ]
  %t320 = phi i64 [ %t289, %block_0_40dc4c ]
  %t321 = phi i64 [ %t292, %block_0_40dc4c ]
  %t322 = phi i64 [ %t293, %block_0_40dc4c ]
  %t323 = phi i64 [ %t294, %block_0_40dc4c ]
  %t324 = phi i64 [ %t295, %block_0_40dc4c ]
  %t325 = phi i512 [ %t316, %block_0_40dc4c ]
  %t326 = phi i512 [ %t297, %block_0_40dc4c ]
  %t327 = phi i512 [ %t298, %block_0_40dc4c ]
  %t328 = phi i512 [ %t299, %block_0_40dc4c ]
  %t329 = phi i512 [ %t300, %block_0_40dc4c ]
  %t330 = phi i512 [ %t301, %block_0_40dc4c ]
  %t331 = phi i512 [ %t302, %block_0_40dc4c ]
  %t332 = phi i512 [ %t303, %block_0_40dc4c ]
  ; r324 := (eq r308 (0x0 : bv 64))
  %t333 = icmp eq i64 %t317, 0
  br i1 %t333, label %block_0_40dc1d, label %block_0_40dc5b
block_0_40dc5b:
  %t334 = phi i64 [ %t317, %block_0_40dc56 ]
  %t335 = phi i64 [ %t318, %block_0_40dc56 ]
  %t336 = phi i64 [ %t319, %block_0_40dc56 ]
  %t337 = phi i64 [ %t321, %block_0_40dc56 ]
  %t338 = phi i64 [ %t322, %block_0_40dc56 ]
  %t339 = phi i64 [ %t323, %block_0_40dc56 ]
  %t340 = phi i64 [ %t324, %block_0_40dc56 ]
  %t341 = phi i512 [ %t325, %block_0_40dc56 ]
  %t342 = phi i512 [ %t326, %block_0_40dc56 ]
  %t343 = phi i512 [ %t327, %block_0_40dc56 ]
  %t344 = phi i512 [ %t328, %block_0_40dc56 ]
  %t345 = phi i512 [ %t329, %block_0_40dc56 ]
  %t346 = phi i512 [ %t330, %block_0_40dc56 ]
  %t347 = phi i512 [ %t331, %block_0_40dc56 ]
  %t348 = phi i512 [ %t332, %block_0_40dc56 ]
  ; r340 := (read (0x63ebec : bv 64) (bv 32))
  %t349 = inttoptr i64 6548460 to i32*
  %t350 = load i32, i32* %t349
  ; r341 := (uext r340 64)
  %t351 = zext i32 %t350 to i64
  ; r342 := (bitcast r332 (vec 8 double))
  %t352 = bitcast i512 %t341 to <8 x double>
  ; r343 := (bitcast r333 (vec 8 double))
  %t353 = bitcast i512 %t342 to <8 x double>
  ; r344 := (bitcast r334 (vec 8 double))
  %t354 = bitcast i512 %t343 to <8 x double>
  ; r345 := (bitcast r335 (vec 8 double))
  %t355 = bitcast i512 %t344 to <8 x double>
  ; r346 := (bitcast r336 (vec 8 double))
  %t356 = bitcast i512 %t345 to <8 x double>
  ; r347 := (bitcast r337 (vec 8 double))
  %t357 = bitcast i512 %t346 to <8 x double>
  ; r348 := (bitcast r338 (vec 8 double))
  %t358 = bitcast i512 %t347 to <8 x double>
  ; r349 := (bitcast r339 (vec 8 double))
  %t359 = bitcast i512 %t348 to <8 x double>
  ; r350 := call pthread_setspecific_int(r341, r325, r327, r326, r330, r331, r342, r343, r344, r345, r346, r347, r348, r349)
  %t360 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_setspecific_int(i64 %t351, i64 %t334, i64 %t336, i64 %t335, i64 %t339, i64 %t340, <8 x double> %t352, <8 x double> %t353, <8 x double> %t354, <8 x double> %t355, <8 x double> %t356, <8 x double> %t357, <8 x double> %t358, <8 x double> %t359)
  ; r351 := (tuple_field r350 0)
  %t361 = extractvalue { i64, i64, <8 x double> } %t360, 0
  ; r352 := (tuple_field r350 1)
  %t362 = extractvalue { i64, i64, <8 x double> } %t360, 1
  ; r353 := (tuple_field r350 2)
  %t363 = extractvalue { i64, i64, <8 x double> } %t360, 2
  ; r354 := (bitcast r353 (bv 512))
  %t364 = bitcast <8 x double> %t363 to i512
  br label %block_0_40dc6c
block_0_40dc6c:
  %t365 = phi i64 [ %t335, %block_0_40dc5b ]
  %t366 = phi i64 [ %t362, %block_0_40dc5b ]
  %t367 = phi i64 [ %t334, %block_0_40dc5b ]
  %t368 = phi i64 [ %t337, %block_0_40dc5b ]
  %t369 = phi i64 [ %t338, %block_0_40dc5b ]
  %t370 = phi i64 [ %t339, %block_0_40dc5b ]
  %t371 = phi i64 [ %t340, %block_0_40dc5b ]
  %t372 = phi i512 [ %t364, %block_0_40dc5b ]
  %t373 = phi i512 [ %t342, %block_0_40dc5b ]
  %t374 = phi i512 [ %t343, %block_0_40dc5b ]
  %t375 = phi i512 [ %t344, %block_0_40dc5b ]
  %t376 = phi i512 [ %t345, %block_0_40dc5b ]
  %t377 = phi i512 [ %t346, %block_0_40dc5b ]
  %t378 = phi i512 [ %t347, %block_0_40dc5b ]
  %t379 = phi i512 [ %t348, %block_0_40dc5b ]
  br label %block_0_40dbcb
}
define void @ctime(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40dc80:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call localtime(arg0, arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @localtime(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ; r17 := (tuple_field r16 0)
  %t17 = extractvalue { i64, i64, <8 x double> } %t16, 0
  ; r18 := (tuple_field r16 1)
  %t18 = extractvalue { i64, i64, <8 x double> } %t16, 1
  ; r19 := (tuple_field r16 2)
  %t19 = extractvalue { i64, i64, <8 x double> } %t16, 2
  ; r20 := (bitcast r19 (bv 512))
  %t20 = bitcast <8 x double> %t19 to i512
  br label %block_0_40dc89
block_0_40dc89:
  %t21 = phi i64 [ %t17, %block_0_40dc80 ]
  %t22 = phi i64 [ %t18, %block_0_40dc80 ]
  %t23 = phi i64 [ %arg1, %block_0_40dc80 ]
  %t24 = phi i512 [ %t20, %block_0_40dc80 ]
  ; r25 := (bitcast r24 (vec 8 double))
  %t25 = bitcast i512 %t24 to <8 x double>
  call void (i64, i64, i64, <8 x double>) @asctime(i64 %t21, i64 %t23, i64 %t22, <8 x double> %t25)
  ret void
}
define void @gmtime_key_init(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40dca0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call pthread_key_create_int((0x63ebe4 : bv 64), (0x406c50 : bv 64), arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call i64 (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_key_create_int(i64 6548452, i64 4222032, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  br label %block_0_40dcb3
block_0_40dcb3:
  %t17 = phi i64 [ %t16, %block_0_40dca0 ]
  ; r18 := (trunc r17 32)
  %t18 = trunc i64 %t17 to i32
  ; write (0x63ebe8 : bv 64) r18
  %t19 = inttoptr i64 6548456 to i32*
  store i32 %t18, i32* %t19
  ret void
}
define void @localtime_key_init(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40dcc0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call pthread_key_create_int((0x63ebec : bv 64), (0x406c50 : bv 64), arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call i64 (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_key_create_int(i64 6548460, i64 4222032, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  br label %block_0_40dcd3
block_0_40dcd3:
  %t17 = phi i64 [ %t16, %block_0_40dcc0 ]
  ; r18 := (trunc r17 32)
  %t18 = trunc i64 %t17 to i32
  ; write (0x63ebf0 : bv 64) r18
  %t19 = inttoptr i64 6548464 to i32*
  store i32 %t18, i32* %t19
  ret void
}
define void @asctime(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40def0:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call asctime_r(arg0, (0x63ec40 : bv 64), arg2, r1)
  %t2 = call i64 (i64, i64, i64, <8 x double>) @asctime_r(i64 %arg0, i64 6548544, i64 %arg2, <8 x double> %t1)
  ret void
}
define { i64, i64, <8 x double> } @fputc(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40e0d0:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (read (0x6356e8 : bv 64) (bv 32))
  %t2 = inttoptr i64 6510312 to i32*
  %t3 = load i32, i32* %t2
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (eq r2 (0x0 : bv 32))
  %t5 = icmp eq i32 %t3, 0
  ; r5 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t9 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg11 (bv 512))
  %t11 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r12 := (bitcast arg13 (bv 512))
  %t13 = bitcast <8 x double> %arg13 to i512
  ; r13 := (bitcast arg6 (bv 512))
  %t14 = bitcast <8 x double> %arg6 to i512
  ; r14 := (bitcast arg7 (bv 512))
  %t15 = bitcast <8 x double> %arg7 to i512
  ; r15 := (bitcast arg8 (bv 512))
  %t16 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast arg9 (bv 512))
  %t17 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast arg10 (bv 512))
  %t18 = bitcast <8 x double> %arg10 to i512
  ; r18 := (bitcast arg11 (bv 512))
  %t19 = bitcast <8 x double> %arg11 to i512
  ; r19 := (bitcast arg12 (bv 512))
  %t20 = bitcast <8 x double> %arg12 to i512
  ; r20 := (bitcast arg13 (bv 512))
  %t21 = bitcast <8 x double> %arg13 to i512
  br i1 %t5, label %block_0_40e0e5, label %block_0_40e120
block_0_40e0e5:
  %t22 = phi i64 [ %arg3, %block_0_40e0d0 ]
  %t23 = phi i64 [ %t4, %block_0_40e0d0 ]
  %t24 = phi i64 [ %arg1, %block_0_40e0d0 ]
  %t25 = phi i64 [ %t1, %block_0_40e0d0 ]
  %t26 = phi i64 [ %arg4, %block_0_40e0d0 ]
  %t27 = phi i64 [ %arg5, %block_0_40e0d0 ]
  %t28 = phi i512 [ %t6, %block_0_40e0d0 ]
  %t29 = phi i512 [ %t7, %block_0_40e0d0 ]
  %t30 = phi i512 [ %t8, %block_0_40e0d0 ]
  %t31 = phi i512 [ %t9, %block_0_40e0d0 ]
  %t32 = phi i512 [ %t10, %block_0_40e0d0 ]
  %t33 = phi i512 [ %t11, %block_0_40e0d0 ]
  %t34 = phi i512 [ %t12, %block_0_40e0d0 ]
  %t35 = phi i512 [ %t13, %block_0_40e0d0 ]
  ; r35 := (bv_add r23 (0xc : bv 64))
  %t36 = add i64 %t24, 12
  ; r36 := (read r35 (bv 32))
  %t37 = inttoptr i64 %t36 to i32*
  %t38 = load i32, i32* %t37
  ; r37 := (bv_add r36 (0xffffffff : bv 32))
  %t39 = add i32 %t38, 4294967295
  ; r38 := (bv_slt r37 (0x0 : bv 32))
  %t40 = icmp slt i32 %t39, 0
  ; r39 := (uext r37 64)
  %t41 = zext i32 %t39 to i64
  ; write r35 r37
  %t42 = inttoptr i64 %t36 to i32*
  store i32 %t39, i32* %t42
  br i1 %t40, label %block_0_40e135, label %block_0_40e0f2
block_0_40e0f2:
  %t43 = phi i64 [ %t22, %block_0_40e0e5 ], [ %t148, %block_0_40e128 ], [ %t195, %block_0_40e13a ]
  %t44 = phi i64 [ %t23, %block_0_40e0e5 ], [ %t149, %block_0_40e128 ], [ %t196, %block_0_40e13a ]
  %t45 = phi i64 [ %t24, %block_0_40e0e5 ], [ %t150, %block_0_40e128 ], [ %t197, %block_0_40e13a ]
  %t46 = phi i64 [ %t25, %block_0_40e0e5 ], [ %t151, %block_0_40e128 ], [ %t198, %block_0_40e13a ]
  %t47 = phi i64 [ %t24, %block_0_40e0e5 ], [ %t152, %block_0_40e128 ], [ %t199, %block_0_40e13a ]
  %t48 = phi i64 [ %t26, %block_0_40e0e5 ], [ %t153, %block_0_40e128 ], [ %t200, %block_0_40e13a ]
  %t49 = phi i64 [ %t27, %block_0_40e0e5 ], [ %t154, %block_0_40e128 ], [ %t201, %block_0_40e13a ]
  %t50 = phi i512 [ %t28, %block_0_40e0e5 ], [ %t155, %block_0_40e128 ], [ %t202, %block_0_40e13a ]
  %t51 = phi i512 [ %t29, %block_0_40e0e5 ], [ %t156, %block_0_40e128 ], [ %t203, %block_0_40e13a ]
  %t52 = phi i512 [ %t30, %block_0_40e0e5 ], [ %t157, %block_0_40e128 ], [ %t204, %block_0_40e13a ]
  %t53 = phi i512 [ %t31, %block_0_40e0e5 ], [ %t158, %block_0_40e128 ], [ %t205, %block_0_40e13a ]
  %t54 = phi i512 [ %t32, %block_0_40e0e5 ], [ %t159, %block_0_40e128 ], [ %t206, %block_0_40e13a ]
  %t55 = phi i512 [ %t33, %block_0_40e0e5 ], [ %t160, %block_0_40e128 ], [ %t207, %block_0_40e13a ]
  %t56 = phi i512 [ %t34, %block_0_40e0e5 ], [ %t161, %block_0_40e128 ], [ %t208, %block_0_40e13a ]
  %t57 = phi i512 [ %t35, %block_0_40e0e5 ], [ %t162, %block_0_40e128 ], [ %t209, %block_0_40e13a ]
  ; r55 := (read r42 (bv 64))
  %t58 = inttoptr i64 %t45 to i64*
  %t59 = load i64, i64* %t58
  ; r56 := (trunc r43 8)
  %t60 = trunc i64 %t46 to i8
  ; write r55 r56
  %t61 = inttoptr i64 %t59 to i8*
  store i8 %t60, i8* %t61
  ; r57 := (bv_add r55 (0x1 : bv 64))
  %t62 = add i64 %t59, 1
  ; r58 := (uext r56 64)
  %t63 = zext i8 %t60 to i64
  ; write r42 r57
  %t64 = inttoptr i64 %t45 to i64*
  store i64 %t62, i64* %t64
  br label %block_0_40e103
block_0_40e103:
  %t65 = phi i64 [ %t43, %block_0_40e0f2 ], [ %t243, %block_0_40e14a ]
  %t66 = phi i64 [ %t44, %block_0_40e0f2 ], [ %t244, %block_0_40e14a ]
  %t67 = phi i64 [ %t45, %block_0_40e0f2 ], [ %t245, %block_0_40e14a ]
  %t68 = phi i64 [ %t63, %block_0_40e0f2 ], [ %t258, %block_0_40e14a ]
  %t69 = phi i64 [ %t47, %block_0_40e0f2 ], [ %t246, %block_0_40e14a ]
  %t70 = phi i64 [ %t48, %block_0_40e0f2 ], [ %t247, %block_0_40e14a ]
  %t71 = phi i64 [ %t49, %block_0_40e0f2 ], [ %t248, %block_0_40e14a ]
  %t72 = phi i512 [ %t50, %block_0_40e0f2 ], [ %t249, %block_0_40e14a ]
  %t73 = phi i512 [ %t51, %block_0_40e0f2 ], [ %t250, %block_0_40e14a ]
  %t74 = phi i512 [ %t52, %block_0_40e0f2 ], [ %t251, %block_0_40e14a ]
  %t75 = phi i512 [ %t53, %block_0_40e0f2 ], [ %t252, %block_0_40e14a ]
  %t76 = phi i512 [ %t54, %block_0_40e0f2 ], [ %t253, %block_0_40e14a ]
  %t77 = phi i512 [ %t55, %block_0_40e0f2 ], [ %t254, %block_0_40e14a ]
  %t78 = phi i512 [ %t56, %block_0_40e0f2 ], [ %t255, %block_0_40e14a ]
  %t79 = phi i512 [ %t57, %block_0_40e0f2 ], [ %t256, %block_0_40e14a ]
  ; r74 := (read (0x6356e8 : bv 64) (bv 32))
  %t80 = inttoptr i64 6510312 to i32*
  %t81 = load i32, i32* %t80
  ; r75 := (eq r74 (0x0 : bv 32))
  %t82 = icmp eq i32 %t81, 0
  br i1 %t82, label %block_0_40e115, label %block_0_40e10d
block_0_40e10d:
  %t83 = phi i64 [ %t65, %block_0_40e103 ]
  %t84 = phi i64 [ %t66, %block_0_40e103 ]
  %t85 = phi i64 [ %t67, %block_0_40e103 ]
  %t86 = phi i64 [ %t68, %block_0_40e103 ]
  %t87 = phi i64 [ %t69, %block_0_40e103 ]
  %t88 = phi i64 [ %t70, %block_0_40e103 ]
  %t89 = phi i64 [ %t71, %block_0_40e103 ]
  %t90 = phi i512 [ %t72, %block_0_40e103 ]
  %t91 = phi i512 [ %t73, %block_0_40e103 ]
  %t92 = phi i512 [ %t74, %block_0_40e103 ]
  %t93 = phi i512 [ %t75, %block_0_40e103 ]
  %t94 = phi i512 [ %t76, %block_0_40e103 ]
  %t95 = phi i512 [ %t77, %block_0_40e103 ]
  %t96 = phi i512 [ %t78, %block_0_40e103 ]
  %t97 = phi i512 [ %t79, %block_0_40e103 ]
  ; r91 := (bitcast r83 (vec 8 double))
  %t98 = bitcast i512 %t90 to <8 x double>
  ; r92 := (bitcast r84 (vec 8 double))
  %t99 = bitcast i512 %t91 to <8 x double>
  ; r93 := (bitcast r85 (vec 8 double))
  %t100 = bitcast i512 %t92 to <8 x double>
  ; r94 := (bitcast r86 (vec 8 double))
  %t101 = bitcast i512 %t93 to <8 x double>
  ; r95 := (bitcast r87 (vec 8 double))
  %t102 = bitcast i512 %t94 to <8 x double>
  ; r96 := (bitcast r88 (vec 8 double))
  %t103 = bitcast i512 %t95 to <8 x double>
  ; r97 := (bitcast r89 (vec 8 double))
  %t104 = bitcast i512 %t96 to <8 x double>
  ; r98 := (bitcast r90 (vec 8 double))
  %t105 = bitcast i512 %t97 to <8 x double>
  ; r99 := call funlockfile(r78, r80, r77, r76, r81, r82, r91, r92, r93, r94, r95, r96, r97, r98)
  %t106 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @funlockfile(i64 %t85, i64 %t87, i64 %t84, i64 %t83, i64 %t88, i64 %t89, <8 x double> %t98, <8 x double> %t99, <8 x double> %t100, <8 x double> %t101, <8 x double> %t102, <8 x double> %t103, <8 x double> %t104, <8 x double> %t105)
  ; r100 := (tuple_field r99 0)
  %t107 = extractvalue { i64, i64, <8 x double> } %t106, 0
  ; r101 := (tuple_field r99 1)
  %t108 = extractvalue { i64, i64, <8 x double> } %t106, 1
  ; r102 := (tuple_field r99 2)
  %t109 = extractvalue { i64, i64, <8 x double> } %t106, 2
  ; r103 := (bitcast r102 (bv 512))
  %t110 = bitcast <8 x double> %t109 to i512
  br label %block_0_40e115
block_0_40e115:
  %t111 = phi i64 [ %t66, %block_0_40e103 ], [ %t108, %block_0_40e10d ]
  %t112 = phi i64 [ %t68, %block_0_40e103 ], [ %t86, %block_0_40e10d ]
  %t113 = phi i512 [ %t72, %block_0_40e103 ], [ %t110, %block_0_40e10d ]
  ; r107 := (trunc r105 32)
  %t114 = trunc i64 %t112 to i32
  ; r108 := (uext r107 64)
  %t115 = zext i32 %t114 to i64
  ; r109 := (bitcast r106 (vec 8 double))
  %t116 = bitcast i512 %t113 to <8 x double>
  ; r110 := (tuple r108 r104 r109)
  %t117 = insertvalue { i64, i64, <8 x double> } undef, i64 %t115, 0
  %t118 = insertvalue { i64, i64, <8 x double> } %t117, i64 %t111, 1
  %t119 = insertvalue { i64, i64, <8 x double> } %t118, <8 x double> %t116, 2
  ret { i64, i64, <8 x double> } %t119
block_0_40e120:
  %t120 = phi i64 [ %arg3, %block_0_40e0d0 ]
  %t121 = phi i64 [ %t4, %block_0_40e0d0 ]
  %t122 = phi i64 [ %arg1, %block_0_40e0d0 ]
  %t123 = phi i64 [ %t1, %block_0_40e0d0 ]
  %t124 = phi i64 [ %arg1, %block_0_40e0d0 ]
  %t125 = phi i64 [ %arg4, %block_0_40e0d0 ]
  %t126 = phi i64 [ %arg5, %block_0_40e0d0 ]
  %t127 = phi i512 [ %t14, %block_0_40e0d0 ]
  %t128 = phi i512 [ %t15, %block_0_40e0d0 ]
  %t129 = phi i512 [ %t16, %block_0_40e0d0 ]
  %t130 = phi i512 [ %t17, %block_0_40e0d0 ]
  %t131 = phi i512 [ %t18, %block_0_40e0d0 ]
  %t132 = phi i512 [ %t19, %block_0_40e0d0 ]
  %t133 = phi i512 [ %t20, %block_0_40e0d0 ]
  %t134 = phi i512 [ %t21, %block_0_40e0d0 ]
  ; r126 := (bitcast r118 (vec 8 double))
  %t135 = bitcast i512 %t127 to <8 x double>
  ; r127 := (bitcast r119 (vec 8 double))
  %t136 = bitcast i512 %t128 to <8 x double>
  ; r128 := (bitcast r120 (vec 8 double))
  %t137 = bitcast i512 %t129 to <8 x double>
  ; r129 := (bitcast r121 (vec 8 double))
  %t138 = bitcast i512 %t130 to <8 x double>
  ; r130 := (bitcast r122 (vec 8 double))
  %t139 = bitcast i512 %t131 to <8 x double>
  ; r131 := (bitcast r123 (vec 8 double))
  %t140 = bitcast i512 %t132 to <8 x double>
  ; r132 := (bitcast r124 (vec 8 double))
  %t141 = bitcast i512 %t133 to <8 x double>
  ; r133 := (bitcast r125 (vec 8 double))
  %t142 = bitcast i512 %t134 to <8 x double>
  ; r134 := call flockfile(r115, r115, r112, r111, r116, r117, r126, r127, r128, r129, r130, r131, r132, r133)
  %t143 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @flockfile(i64 %t124, i64 %t124, i64 %t121, i64 %t120, i64 %t125, i64 %t126, <8 x double> %t135, <8 x double> %t136, <8 x double> %t137, <8 x double> %t138, <8 x double> %t139, <8 x double> %t140, <8 x double> %t141, <8 x double> %t142)
  ; r135 := (tuple_field r134 0)
  %t144 = extractvalue { i64, i64, <8 x double> } %t143, 0
  ; r136 := (tuple_field r134 1)
  %t145 = extractvalue { i64, i64, <8 x double> } %t143, 1
  ; r137 := (tuple_field r134 2)
  %t146 = extractvalue { i64, i64, <8 x double> } %t143, 2
  ; r138 := (bitcast r137 (bv 512))
  %t147 = bitcast <8 x double> %t146 to i512
  br label %block_0_40e128
block_0_40e128:
  %t148 = phi i64 [ %t120, %block_0_40e120 ]
  %t149 = phi i64 [ %t145, %block_0_40e120 ]
  %t150 = phi i64 [ %t122, %block_0_40e120 ]
  %t151 = phi i64 [ %t123, %block_0_40e120 ]
  %t152 = phi i64 [ %t124, %block_0_40e120 ]
  %t153 = phi i64 [ %t125, %block_0_40e120 ]
  %t154 = phi i64 [ %t126, %block_0_40e120 ]
  %t155 = phi i512 [ %t147, %block_0_40e120 ]
  %t156 = phi i512 [ %t128, %block_0_40e120 ]
  %t157 = phi i512 [ %t129, %block_0_40e120 ]
  %t158 = phi i512 [ %t130, %block_0_40e120 ]
  %t159 = phi i512 [ %t131, %block_0_40e120 ]
  %t160 = phi i512 [ %t132, %block_0_40e120 ]
  %t161 = phi i512 [ %t133, %block_0_40e120 ]
  %t162 = phi i512 [ %t134, %block_0_40e120 ]
  ; r154 := (bv_add r141 (0xc : bv 64))
  %t163 = add i64 %t150, 12
  ; r155 := (read r154 (bv 32))
  %t164 = inttoptr i64 %t163 to i32*
  %t165 = load i32, i32* %t164
  ; r156 := (bv_add r155 (0xffffffff : bv 32))
  %t166 = add i32 %t165, 4294967295
  ; r157 := (bv_slt r156 (0x0 : bv 32))
  %t167 = icmp slt i32 %t166, 0
  ; r158 := (uext r156 64)
  %t168 = zext i32 %t166 to i64
  ; write r154 r156
  %t169 = inttoptr i64 %t163 to i32*
  store i32 %t166, i32* %t169
  br i1 %t167, label %block_0_40e135, label %block_0_40e0f2
block_0_40e135:
  %t170 = phi i64 [ %t41, %block_0_40e0e5 ], [ %t168, %block_0_40e128 ]
  %t171 = phi i64 [ %t22, %block_0_40e0e5 ], [ %t148, %block_0_40e128 ]
  %t172 = phi i64 [ %t23, %block_0_40e0e5 ], [ %t149, %block_0_40e128 ]
  %t173 = phi i64 [ %t24, %block_0_40e0e5 ], [ %t150, %block_0_40e128 ]
  %t174 = phi i64 [ %t25, %block_0_40e0e5 ], [ %t151, %block_0_40e128 ]
  %t175 = phi i64 [ %t24, %block_0_40e0e5 ], [ %t152, %block_0_40e128 ]
  %t176 = phi i64 [ %t26, %block_0_40e0e5 ], [ %t153, %block_0_40e128 ]
  %t177 = phi i64 [ %t27, %block_0_40e0e5 ], [ %t154, %block_0_40e128 ]
  %t178 = phi i512 [ %t28, %block_0_40e0e5 ], [ %t155, %block_0_40e128 ]
  %t179 = phi i512 [ %t29, %block_0_40e0e5 ], [ %t156, %block_0_40e128 ]
  %t180 = phi i512 [ %t30, %block_0_40e0e5 ], [ %t157, %block_0_40e128 ]
  %t181 = phi i512 [ %t31, %block_0_40e0e5 ], [ %t158, %block_0_40e128 ]
  %t182 = phi i512 [ %t32, %block_0_40e0e5 ], [ %t159, %block_0_40e128 ]
  %t183 = phi i512 [ %t33, %block_0_40e0e5 ], [ %t160, %block_0_40e128 ]
  %t184 = phi i512 [ %t34, %block_0_40e0e5 ], [ %t161, %block_0_40e128 ]
  %t185 = phi i512 [ %t35, %block_0_40e0e5 ], [ %t162, %block_0_40e128 ]
  ; r175 := (bv_add r162 (0x28 : bv 64))
  %t186 = add i64 %t173, 40
  ; r176 := (read r175 (bv 32))
  %t187 = inttoptr i64 %t186 to i32*
  %t188 = load i32, i32* %t187
  ; r177 := (trunc r159 32)
  %t189 = trunc i64 %t170 to i32
  ; r178 := (ssbb_overflows r177 r176 false)
  %t190 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t189, i32 %t188)
  %t191 = extractvalue { i32, i1 } %t190, 1
  ; r179 := (bv_sub r177 r176)
  %t192 = sub i32 %t189, %t188
  ; r180 := (bv_slt r179 (0x0 : bv 32))
  %t193 = icmp slt i32 %t192, 0
  ; r181 := (xor r180 r178)
  %t194 = xor i1 %t193, %t191
  br i1 %t194, label %block_0_40e140, label %block_0_40e13a
block_0_40e13a:
  %t195 = phi i64 [ %t171, %block_0_40e135 ]
  %t196 = phi i64 [ %t172, %block_0_40e135 ]
  %t197 = phi i64 [ %t173, %block_0_40e135 ]
  %t198 = phi i64 [ %t174, %block_0_40e135 ]
  %t199 = phi i64 [ %t175, %block_0_40e135 ]
  %t200 = phi i64 [ %t176, %block_0_40e135 ]
  %t201 = phi i64 [ %t177, %block_0_40e135 ]
  %t202 = phi i512 [ %t178, %block_0_40e135 ]
  %t203 = phi i512 [ %t179, %block_0_40e135 ]
  %t204 = phi i512 [ %t180, %block_0_40e135 ]
  %t205 = phi i512 [ %t181, %block_0_40e135 ]
  %t206 = phi i512 [ %t182, %block_0_40e135 ]
  %t207 = phi i512 [ %t183, %block_0_40e135 ]
  %t208 = phi i512 [ %t184, %block_0_40e135 ]
  %t209 = phi i512 [ %t185, %block_0_40e135 ]
  ; r197 := (trunc r185 8)
  %t210 = trunc i64 %t198 to i8
  ; r198 := (eq r197 (0xa : bv 8))
  %t211 = icmp eq i8 %t210, 10
  br i1 %t211, label %block_0_40e140, label %block_0_40e0f2
block_0_40e140:
  %t212 = phi i64 [ %t171, %block_0_40e135 ], [ %t195, %block_0_40e13a ]
  %t213 = phi i64 [ %t172, %block_0_40e135 ], [ %t196, %block_0_40e13a ]
  %t214 = phi i64 [ %t173, %block_0_40e135 ], [ %t197, %block_0_40e13a ]
  %t215 = phi i64 [ %t174, %block_0_40e135 ], [ %t198, %block_0_40e13a ]
  %t216 = phi i64 [ %t175, %block_0_40e135 ], [ %t199, %block_0_40e13a ]
  %t217 = phi i64 [ %t176, %block_0_40e135 ], [ %t200, %block_0_40e13a ]
  %t218 = phi i64 [ %t177, %block_0_40e135 ], [ %t201, %block_0_40e13a ]
  %t219 = phi i512 [ %t178, %block_0_40e135 ], [ %t202, %block_0_40e13a ]
  %t220 = phi i512 [ %t179, %block_0_40e135 ], [ %t203, %block_0_40e13a ]
  %t221 = phi i512 [ %t180, %block_0_40e135 ], [ %t204, %block_0_40e13a ]
  %t222 = phi i512 [ %t181, %block_0_40e135 ], [ %t205, %block_0_40e13a ]
  %t223 = phi i512 [ %t182, %block_0_40e135 ], [ %t206, %block_0_40e13a ]
  %t224 = phi i512 [ %t183, %block_0_40e135 ], [ %t207, %block_0_40e13a ]
  %t225 = phi i512 [ %t184, %block_0_40e135 ], [ %t208, %block_0_40e13a ]
  %t226 = phi i512 [ %t185, %block_0_40e135 ], [ %t209, %block_0_40e13a ]
  ; r214 := (trunc r202 32)
  %t227 = trunc i64 %t215 to i32
  ; r215 := (uext r214 64)
  %t228 = zext i32 %t227 to i64
  ; r216 := (bitcast r206 (vec 8 double))
  %t229 = bitcast i512 %t219 to <8 x double>
  ; r217 := (bitcast r207 (vec 8 double))
  %t230 = bitcast i512 %t220 to <8 x double>
  ; r218 := (bitcast r208 (vec 8 double))
  %t231 = bitcast i512 %t221 to <8 x double>
  ; r219 := (bitcast r209 (vec 8 double))
  %t232 = bitcast i512 %t222 to <8 x double>
  ; r220 := (bitcast r210 (vec 8 double))
  %t233 = bitcast i512 %t223 to <8 x double>
  ; r221 := (bitcast r211 (vec 8 double))
  %t234 = bitcast i512 %t224 to <8 x double>
  ; r222 := (bitcast r212 (vec 8 double))
  %t235 = bitcast i512 %t225 to <8 x double>
  ; r223 := (bitcast r213 (vec 8 double))
  %t236 = bitcast i512 %t226 to <8 x double>
  ; r224 := call __swbuf(r215, r201, r200, r199, r204, r205, r216, r217, r218, r219, r220, r221, r222, r223)
  %t237 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__swbuf(i64 %t228, i64 %t214, i64 %t213, i64 %t212, i64 %t217, i64 %t218, <8 x double> %t229, <8 x double> %t230, <8 x double> %t231, <8 x double> %t232, <8 x double> %t233, <8 x double> %t234, <8 x double> %t235, <8 x double> %t236)
  ; r225 := (tuple_field r224 0)
  %t238 = extractvalue { i64, i64, <8 x double> } %t237, 0
  ; r226 := (tuple_field r224 1)
  %t239 = extractvalue { i64, i64, <8 x double> } %t237, 1
  ; r227 := (tuple_field r224 2)
  %t240 = extractvalue { i64, i64, <8 x double> } %t237, 2
  ; r228 := (bitcast r227 (bv 512))
  %t241 = bitcast <8 x double> %t240 to i512
  br label %block_0_40e14a
block_0_40e14a:
  %t242 = phi i64 [ %t238, %block_0_40e140 ]
  %t243 = phi i64 [ %t212, %block_0_40e140 ]
  %t244 = phi i64 [ %t239, %block_0_40e140 ]
  %t245 = phi i64 [ %t214, %block_0_40e140 ]
  %t246 = phi i64 [ %t216, %block_0_40e140 ]
  %t247 = phi i64 [ %t217, %block_0_40e140 ]
  %t248 = phi i64 [ %t218, %block_0_40e140 ]
  %t249 = phi i512 [ %t241, %block_0_40e140 ]
  %t250 = phi i512 [ %t220, %block_0_40e140 ]
  %t251 = phi i512 [ %t221, %block_0_40e140 ]
  %t252 = phi i512 [ %t222, %block_0_40e140 ]
  %t253 = phi i512 [ %t223, %block_0_40e140 ]
  %t254 = phi i512 [ %t224, %block_0_40e140 ]
  %t255 = phi i512 [ %t225, %block_0_40e140 ]
  %t256 = phi i512 [ %t226, %block_0_40e140 ]
  ; r244 := (trunc r229 32)
  %t257 = trunc i64 %t242 to i32
  ; r245 := (uext r244 64)
  %t258 = zext i32 %t257 to i64
  br label %block_0_40e103
}
define { i64, i64, <8 x double> } @send(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3) {
block_0_40e150:
  %t0 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64) @__sys_sendto(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 0, i64 0)
  ret { i64, i64, <8 x double> } %t0
}
define { i64, i64, <8 x double> } @__elf_phdr_match_addr(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40e1e0:
  ; r0 := (bv_add arg0 (0x18 : bv 64))
  %t0 = add i64 %arg0, 24
  ; r1 := (read r0 (bv 16))
  %t1 = inttoptr i64 %t0 to i16*
  %t2 = load i16, i16* %t1
  ; r2 := (uext r1 32)
  %t3 = zext i16 %t2 to i32
  ; r3 := (uext r1 64)
  %t4 = zext i16 %t2 to i64
  ; r4 := (bv_slt r2 (0x0 : bv 32))
  %t5 = icmp slt i32 %t3, 0
  ; r5 := (eq r1 (0x0 : bv 16))
  %t6 = icmp eq i16 %t2, 0
  ; r6 := (or r5 r4)
  %t7 = or i1 %t6, %t5
  ; r7 := (bitcast arg3 (bv 512))
  %t8 = bitcast <8 x double> %arg3 to i512
  ; r8 := (bitcast arg3 (bv 512))
  %t9 = bitcast <8 x double> %arg3 to i512
  br i1 %t7, label %block_0_40e23d, label %block_0_40e1eb
block_0_40e1eb:
  %t10 = phi i64 [ %t4, %block_0_40e1e0 ]
  %t11 = phi i64 [ %arg1, %block_0_40e1e0 ]
  %t12 = phi i64 [ %arg0, %block_0_40e1e0 ]
  %t13 = phi i64 [ 0, %block_0_40e1e0 ]
  %t14 = phi i512 [ %t9, %block_0_40e1e0 ]
  ; r14 := (bv_add r11 (0x10 : bv 64))
  %t15 = add i64 %t12, 16
  ; r15 := (read r14 (bv 64))
  %t16 = inttoptr i64 %t15 to i64*
  %t17 = load i64, i64* %t16
  ; r16 := (bv_add r10 (0x8 : bv 64))
  %t18 = add i64 %t11, 8
  br label %block_0_40e21d
block_0_40e210:
  %t19 = phi i64 [ %t34, %block_0_40e21d ], [ %t47, %block_0_40e228 ], [ %t67, %block_0_40e234 ]
  %t20 = phi i64 [ %t35, %block_0_40e21d ], [ %t48, %block_0_40e228 ], [ %t68, %block_0_40e234 ]
  %t21 = phi i64 [ %t36, %block_0_40e21d ], [ %t49, %block_0_40e228 ], [ %t69, %block_0_40e234 ]
  %t22 = phi i64 [ %t37, %block_0_40e21d ], [ %t50, %block_0_40e228 ], [ %t70, %block_0_40e234 ]
  %t23 = phi i64 [ %t38, %block_0_40e21d ], [ %t51, %block_0_40e228 ], [ %t71, %block_0_40e234 ]
  %t24 = phi i64 [ %t39, %block_0_40e21d ], [ %t52, %block_0_40e228 ], [ %t72, %block_0_40e234 ]
  %t25 = phi i64 [ %t40, %block_0_40e21d ], [ %t53, %block_0_40e228 ], [ %t73, %block_0_40e234 ]
  %t26 = phi i64 [ %t41, %block_0_40e21d ], [ %t54, %block_0_40e228 ], [ %t74, %block_0_40e234 ]
  %t27 = phi i512 [ %t42, %block_0_40e21d ], [ %t55, %block_0_40e228 ], [ %t75, %block_0_40e234 ]
  ; r26 := (trunc r21 32)
  %t28 = trunc i64 %t23 to i32
  ; r27 := (bv_add r26 (0x1 : bv 32))
  %t29 = add i32 %t28, 1
  ; r28 := (uext r27 64)
  %t30 = zext i32 %t29 to i64
  ; r29 := (bv_add r18 (0x38 : bv 64))
  %t31 = add i64 %t20, 56
  ; r30 := (trunc r17 32)
  %t32 = trunc i64 %t19 to i32
  ; r31 := (eq r27 r30)
  %t33 = icmp eq i32 %t29, %t32
  br i1 %t33, label %block_0_40e23d, label %block_0_40e21d
block_0_40e21d:
  %t34 = phi i64 [ %t10, %block_0_40e1eb ], [ %t19, %block_0_40e210 ]
  %t35 = phi i64 [ %t17, %block_0_40e1eb ], [ %t31, %block_0_40e210 ]
  %t36 = phi i64 [ %t11, %block_0_40e1eb ], [ %t21, %block_0_40e210 ]
  %t37 = phi i64 [ %t12, %block_0_40e1eb ], [ %t22, %block_0_40e210 ]
  %t38 = phi i64 [ %t13, %block_0_40e1eb ], [ %t30, %block_0_40e210 ]
  %t39 = phi i64 [ 4294967297, %block_0_40e1eb ], [ %t24, %block_0_40e210 ]
  %t40 = phi i64 [ 8589934591, %block_0_40e1eb ], [ %t25, %block_0_40e210 ]
  %t41 = phi i64 [ %t18, %block_0_40e1eb ], [ %t26, %block_0_40e210 ]
  %t42 = phi i512 [ %t14, %block_0_40e1eb ], [ %t27, %block_0_40e210 ]
  ; r41 := (read r33 (bv 64))
  %t43 = inttoptr i64 %t35 to i64*
  %t44 = load i64, i64* %t43
  ; r42 := (bv_and r41 r38)
  %t45 = and i64 %t44, %t40
  ; r43 := (eq r42 r37)
  %t46 = icmp eq i64 %t45, %t39
  br i1 %t46, label %block_0_40e228, label %block_0_40e210
block_0_40e228:
  %t47 = phi i64 [ %t34, %block_0_40e21d ]
  %t48 = phi i64 [ %t35, %block_0_40e21d ]
  %t49 = phi i64 [ %t36, %block_0_40e21d ]
  %t50 = phi i64 [ %t37, %block_0_40e21d ]
  %t51 = phi i64 [ %t38, %block_0_40e21d ]
  %t52 = phi i64 [ %t39, %block_0_40e21d ]
  %t53 = phi i64 [ %t40, %block_0_40e21d ]
  %t54 = phi i64 [ %t41, %block_0_40e21d ]
  %t55 = phi i512 [ %t42, %block_0_40e21d ]
  ; r53 := (read r47 (bv 64))
  %t56 = inttoptr i64 %t50 to i64*
  %t57 = load i64, i64* %t56
  ; r54 := (bv_add r45 (0x10 : bv 64))
  %t58 = add i64 %t48, 16
  ; r55 := (read r54 (bv 64))
  %t59 = inttoptr i64 %t58 to i64*
  %t60 = load i64, i64* %t59
  ; r56 := (bv_add r53 r55)
  %t61 = add i64 %t57, %t60
  ; r57 := (eq r56 r46)
  %t62 = icmp eq i64 %t61, %t49
  ; r58 := (bv_ule r46 r56)
  %t63 = icmp ule i64 %t49, %t61
  ; r59 := (not r57)
  %t64 = icmp eq i1 %t62, 0
  ; r60 := (and r58 r59)
  %t65 = and i1 %t63, %t64
  br i1 %t65, label %block_0_40e210, label %block_0_40e234
block_0_40e234:
  %t66 = phi i64 [ %t61, %block_0_40e228 ]
  %t67 = phi i64 [ %t47, %block_0_40e228 ]
  %t68 = phi i64 [ %t48, %block_0_40e228 ]
  %t69 = phi i64 [ %t49, %block_0_40e228 ]
  %t70 = phi i64 [ %t50, %block_0_40e228 ]
  %t71 = phi i64 [ %t51, %block_0_40e228 ]
  %t72 = phi i64 [ %t52, %block_0_40e228 ]
  %t73 = phi i64 [ %t53, %block_0_40e228 ]
  %t74 = phi i64 [ %t54, %block_0_40e228 ]
  %t75 = phi i512 [ %t55, %block_0_40e228 ]
  ; r71 := (bv_add r63 (0x28 : bv 64))
  %t76 = add i64 %t68, 40
  ; r72 := (read r71 (bv 64))
  %t77 = inttoptr i64 %t76 to i64*
  %t78 = load i64, i64* %t77
  ; r73 := (bv_add r61 r72)
  %t79 = add i64 %t66, %t78
  ; r74 := (bv_ult r69 r73)
  %t80 = icmp ult i64 %t74, %t79
  br i1 %t80, label %block_0_40e23d, label %block_0_40e210
block_0_40e23d:
  %t81 = phi i64 [ %t4, %block_0_40e1e0 ], [ %t19, %block_0_40e210 ], [ %t67, %block_0_40e234 ]
  %t82 = phi i64 [ %arg2, %block_0_40e1e0 ], [ %t31, %block_0_40e210 ], [ %t68, %block_0_40e234 ]
  %t83 = phi i64 [ 0, %block_0_40e1e0 ], [ %t30, %block_0_40e210 ], [ %t71, %block_0_40e234 ]
  %t84 = phi i512 [ %t8, %block_0_40e1e0 ], [ %t27, %block_0_40e210 ], [ %t75, %block_0_40e234 ]
  ; r79 := (trunc r77 32)
  %t85 = trunc i64 %t83 to i32
  ; r80 := (trunc r75 32)
  %t86 = trunc i64 %t81 to i32
  ; r81 := (eq r79 r80)
  %t87 = icmp eq i32 %t85, %t86
  ; r82 := (mux r81 (0x0 : bv 8) (0x1 : bv 8))
  %t88 = select i1 %t87, i8 0, i8 1
  ; r83 := (uext r82 64)
  %t89 = zext i8 %t88 to i64
  ; r84 := (bitcast r78 (vec 8 double))
  %t90 = bitcast i512 %t84 to <8 x double>
  ; r85 := (tuple r83 r76 r84)
  %t91 = insertvalue { i64, i64, <8 x double> } undef, i64 %t89, 0
  %t92 = insertvalue { i64, i64, <8 x double> } %t91, i64 %t82, 1
  %t93 = insertvalue { i64, i64, <8 x double> } %t92, <8 x double> %t90, 2
  ret { i64, i64, <8 x double> } %t93
}
define void @_rtld_error() {
block_0_40e2c0:
  ret void
}
define void @dladdr() {
block_0_40e2d0:
  ; call _rtld_error()
  call void () @_rtld_error()
  br label %block_0_40e2e0
block_0_40e2e0:
  ret void
}
define void @dlclose() {
block_0_40e2f0:
  ; call _rtld_error()
  call void () @_rtld_error()
  br label %block_0_40e300
block_0_40e300:
  ret void
}
define void @dlerror() {
block_0_40e310:
  ret void
}
define void @dlopen() {
block_0_40e340:
  ; call _rtld_error()
  call void () @_rtld_error()
  br label %block_0_40e350
block_0_40e350:
  ret void
}
define void @dlsym() {
block_0_40e360:
  ; call _rtld_error()
  call void () @_rtld_error()
  br label %block_0_40e370
block_0_40e370:
  ret void
}
define void @dlfunc() {
block_0_40e380:
  ; call _rtld_error()
  call void () @_rtld_error()
  br label %block_0_40e390
block_0_40e390:
  ret void
}
define void @dlvsym() {
block_0_40e3a0:
  ; call _rtld_error()
  call void () @_rtld_error()
  br label %block_0_40e3b0
block_0_40e3b0:
  ret void
}
define void @dlinfo() {
block_0_40e3c0:
  ; call _rtld_error()
  call void () @_rtld_error()
  br label %block_0_40e3d0
block_0_40e3d0:
  ret void
}
define void @_rtld_thread_init() {
block_0_40e3e0:
  call void () @_rtld_error()
  ret void
}
define void @dl_iterate_phdr() {
block_0_40e3f0:
  ; call _rtld_error()
  call void () @_rtld_error()
  br label %block_0_40e400
block_0_40e400:
  ret void
}
define void @_rtld_atfork_pre() {
block_0_40e410:
  ret void
}
define void @_rtld_atfork_post() {
block_0_40e420:
  ret void
}
define { i64, i64, <8 x double> } @_rtld_addr_phdr(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40e430:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (tuple (0x0 : bv 64) arg2 r1)
  %t2 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t3 = insertvalue { i64, i64, <8 x double> } %t2, i64 %arg2, 1
  %t4 = insertvalue { i64, i64, <8 x double> } %t3, <8 x double> %t1, 2
  ret { i64, i64, <8 x double> } %t4
}
define i64 @_rtld_get_stack_prot() {
block_0_40e440:
  ret i64 7
}
define { i64, i64, <8 x double> } @__swbuf(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40e510:
  ; r0 := (bv_add arg1 (0x28 : bv 64))
  %t0 = add i64 %arg1, 40
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (trunc arg0 32)
  %t3 = trunc i64 %arg0 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (bv_add arg1 (0xc : bv 64))
  %t5 = add i64 %arg1, 12
  ; write r4 r1
  %t6 = inttoptr i64 %t5 to i32*
  store i32 %t2, i32* %t6
  ; r5 := (bv_add arg1 (0x10 : bv 64))
  %t7 = add i64 %arg1, 16
  ; r6 := (read r5 (bv 16))
  %t8 = inttoptr i64 %t7 to i16*
  %t9 = load i16, i16* %t8
  ; r7 := (sext r6 32)
  %t10 = sext i16 %t9 to i32
  ; r8 := (uext r7 64)
  %t11 = zext i32 %t10 to i64
  ; r9 := (trunc r6 8)
  %t12 = trunc i16 %t9 to i8
  ; r10 := (bv_and r9 (0x8 : bv 8))
  %t13 = and i8 %t12, 8
  ; r11 := (eq r10 (0x0 : bv 8))
  %t14 = icmp eq i8 %t13, 0
  ; r12 := (bitcast arg6 (bv 512))
  %t15 = bitcast <8 x double> %arg6 to i512
  ; r13 := (bitcast arg7 (bv 512))
  %t16 = bitcast <8 x double> %arg7 to i512
  ; r14 := (bitcast arg8 (bv 512))
  %t17 = bitcast <8 x double> %arg8 to i512
  ; r15 := (bitcast arg9 (bv 512))
  %t18 = bitcast <8 x double> %arg9 to i512
  ; r16 := (bitcast arg10 (bv 512))
  %t19 = bitcast <8 x double> %arg10 to i512
  ; r17 := (bitcast arg11 (bv 512))
  %t20 = bitcast <8 x double> %arg11 to i512
  ; r18 := (bitcast arg12 (bv 512))
  %t21 = bitcast <8 x double> %arg12 to i512
  ; r19 := (bitcast arg13 (bv 512))
  %t22 = bitcast <8 x double> %arg13 to i512
  ; r20 := (bitcast arg6 (bv 512))
  %t23 = bitcast <8 x double> %arg6 to i512
  ; r21 := (bitcast arg7 (bv 512))
  %t24 = bitcast <8 x double> %arg7 to i512
  ; r22 := (bitcast arg8 (bv 512))
  %t25 = bitcast <8 x double> %arg8 to i512
  ; r23 := (bitcast arg9 (bv 512))
  %t26 = bitcast <8 x double> %arg9 to i512
  ; r24 := (bitcast arg10 (bv 512))
  %t27 = bitcast <8 x double> %arg10 to i512
  ; r25 := (bitcast arg11 (bv 512))
  %t28 = bitcast <8 x double> %arg11 to i512
  ; r26 := (bitcast arg12 (bv 512))
  %t29 = bitcast <8 x double> %arg12 to i512
  ; r27 := (bitcast arg13 (bv 512))
  %t30 = bitcast <8 x double> %arg13 to i512
  br i1 %t14, label %block_0_40e5c5, label %block_0_40e53b
block_0_40e53b:
  %t31 = phi i64 [ %t11, %block_0_40e510 ]
  %t32 = phi i64 [ %arg3, %block_0_40e510 ]
  %t33 = phi i64 [ %arg2, %block_0_40e510 ]
  %t34 = phi i64 [ %arg1, %block_0_40e510 ]
  %t35 = phi i64 [ %arg4, %block_0_40e510 ]
  %t36 = phi i64 [ %arg5, %block_0_40e510 ]
  %t37 = phi i64 [ %t4, %block_0_40e510 ]
  %t38 = phi i512 [ %t23, %block_0_40e510 ]
  %t39 = phi i512 [ %t24, %block_0_40e510 ]
  %t40 = phi i512 [ %t25, %block_0_40e510 ]
  %t41 = phi i512 [ %t26, %block_0_40e510 ]
  %t42 = phi i512 [ %t27, %block_0_40e510 ]
  %t43 = phi i512 [ %t28, %block_0_40e510 ]
  %t44 = phi i512 [ %t29, %block_0_40e510 ]
  %t45 = phi i512 [ %t30, %block_0_40e510 ]
  ; r43 := (bv_add r31 (0x18 : bv 64))
  %t46 = add i64 %t34, 24
  ; r44 := (read r43 (bv 64))
  %t47 = inttoptr i64 %t46 to i64*
  %t48 = load i64, i64* %t47
  ; r45 := (eq r44 (0x0 : bv 64))
  %t49 = icmp eq i64 %t48, 0
  br i1 %t49, label %block_0_40e5c0, label %block_0_40e546
block_0_40e546:
  %t50 = phi i64 [ %t32, %block_0_40e53b ], [ %t249, %block_0_40e5c0 ], [ %t296, %block_0_40e5cd ]
  %t51 = phi i64 [ %t34, %block_0_40e53b ], [ %t251, %block_0_40e5c0 ], [ %t298, %block_0_40e5cd ]
  %t52 = phi i64 [ %t34, %block_0_40e53b ], [ %t251, %block_0_40e5c0 ], [ %t299, %block_0_40e5cd ]
  %t53 = phi i64 [ %t35, %block_0_40e53b ], [ %t252, %block_0_40e5c0 ], [ %t300, %block_0_40e5cd ]
  %t54 = phi i64 [ %t36, %block_0_40e53b ], [ %t253, %block_0_40e5c0 ], [ %t301, %block_0_40e5cd ]
  %t55 = phi i64 [ %t37, %block_0_40e53b ], [ %t254, %block_0_40e5c0 ], [ %t302, %block_0_40e5cd ]
  %t56 = phi i512 [ %t38, %block_0_40e53b ], [ %t255, %block_0_40e5c0 ], [ %t303, %block_0_40e5cd ]
  %t57 = phi i512 [ %t39, %block_0_40e53b ], [ %t256, %block_0_40e5c0 ], [ %t304, %block_0_40e5cd ]
  %t58 = phi i512 [ %t40, %block_0_40e53b ], [ %t257, %block_0_40e5c0 ], [ %t305, %block_0_40e5cd ]
  %t59 = phi i512 [ %t41, %block_0_40e53b ], [ %t258, %block_0_40e5c0 ], [ %t306, %block_0_40e5cd ]
  %t60 = phi i512 [ %t42, %block_0_40e53b ], [ %t259, %block_0_40e5c0 ], [ %t307, %block_0_40e5cd ]
  %t61 = phi i512 [ %t43, %block_0_40e53b ], [ %t260, %block_0_40e5c0 ], [ %t308, %block_0_40e5cd ]
  %t62 = phi i512 [ %t44, %block_0_40e53b ], [ %t261, %block_0_40e5c0 ], [ %t309, %block_0_40e5cd ]
  %t63 = phi i512 [ %t45, %block_0_40e53b ], [ %t262, %block_0_40e5c0 ], [ %t310, %block_0_40e5cd ]
  ; r60 := (bv_add r47 (0xac : bv 64))
  %t64 = add i64 %t51, 172
  ; r61 := (read r60 (bv 32))
  %t65 = inttoptr i64 %t64 to i32*
  %t66 = load i32, i32* %t65
  ; r62 := (eq r61 (0x0 : bv 32))
  %t67 = icmp eq i32 %t66, 0
  br i1 %t67, label %block_0_40e592, label %block_0_40e550
block_0_40e550:
  %t68 = phi i64 [ %t50, %block_0_40e546 ], [ %t179, %block_0_40e592 ]
  %t69 = phi i64 [ %t51, %block_0_40e546 ], [ %t180, %block_0_40e592 ]
  %t70 = phi i64 [ %t52, %block_0_40e546 ], [ %t181, %block_0_40e592 ]
  %t71 = phi i64 [ %t53, %block_0_40e546 ], [ %t182, %block_0_40e592 ]
  %t72 = phi i64 [ %t54, %block_0_40e546 ], [ %t183, %block_0_40e592 ]
  %t73 = phi i64 [ %t55, %block_0_40e546 ], [ %t184, %block_0_40e592 ]
  %t74 = phi i512 [ %t56, %block_0_40e546 ], [ %t185, %block_0_40e592 ]
  %t75 = phi i512 [ %t57, %block_0_40e546 ], [ %t186, %block_0_40e592 ]
  %t76 = phi i512 [ %t58, %block_0_40e546 ], [ %t187, %block_0_40e592 ]
  %t77 = phi i512 [ %t59, %block_0_40e546 ], [ %t188, %block_0_40e592 ]
  %t78 = phi i512 [ %t60, %block_0_40e546 ], [ %t189, %block_0_40e592 ]
  %t79 = phi i512 [ %t61, %block_0_40e546 ], [ %t190, %block_0_40e592 ]
  %t80 = phi i512 [ %t62, %block_0_40e546 ], [ %t191, %block_0_40e592 ]
  %t81 = phi i512 [ %t63, %block_0_40e546 ], [ %t192, %block_0_40e592 ]
  ; r77 := (read r64 (bv 64))
  %t82 = inttoptr i64 %t69 to i64*
  %t83 = load i64, i64* %t82
  ; r78 := (trunc r77 32)
  %t84 = trunc i64 %t83 to i32
  ; r79 := (bv_add r64 (0x18 : bv 64))
  %t85 = add i64 %t69, 24
  ; r80 := (read r79 (bv 32))
  %t86 = inttoptr i64 %t85 to i32*
  %t87 = load i32, i32* %t86
  ; r81 := (bv_sub r78 r80)
  %t88 = sub i32 %t84, %t87
  ; r82 := (uext r81 64)
  %t89 = zext i32 %t88 to i64
  ; r83 := (bv_add r64 (0x20 : bv 64))
  %t90 = add i64 %t69, 32
  ; r84 := (read r83 (bv 32))
  %t91 = inttoptr i64 %t90 to i32*
  %t92 = load i32, i32* %t91
  ; r85 := (ssbb_overflows r81 r84 false)
  %t93 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t88, i32 %t92)
  %t94 = extractvalue { i32, i1 } %t93, 1
  ; r86 := (bv_sub r81 r84)
  %t95 = sub i32 %t88, %t92
  ; r87 := (bv_slt r86 (0x0 : bv 32))
  %t96 = icmp slt i32 %t95, 0
  ; r88 := (eq r87 r85)
  %t97 = icmp eq i1 %t96, %t94
  br i1 %t97, label %block_0_40e5d8, label %block_0_40e55d
block_0_40e55d:
  %t98 = phi i64 [ %t83, %block_0_40e550 ]
  %t99 = phi i64 [ %t68, %block_0_40e550 ]
  %t100 = phi i64 [ %t89, %block_0_40e550 ]
  %t101 = phi i64 [ %t69, %block_0_40e550 ]
  %t102 = phi i64 [ %t70, %block_0_40e550 ]
  %t103 = phi i64 [ %t71, %block_0_40e550 ]
  %t104 = phi i64 [ %t72, %block_0_40e550 ]
  %t105 = phi i64 [ %t73, %block_0_40e550 ]
  %t106 = phi i512 [ %t74, %block_0_40e550 ]
  %t107 = phi i512 [ %t75, %block_0_40e550 ]
  %t108 = phi i512 [ %t76, %block_0_40e550 ]
  %t109 = phi i512 [ %t77, %block_0_40e550 ]
  %t110 = phi i512 [ %t78, %block_0_40e550 ]
  %t111 = phi i512 [ %t79, %block_0_40e550 ]
  %t112 = phi i512 [ %t80, %block_0_40e550 ]
  %t113 = phi i512 [ %t81, %block_0_40e550 ]
  ; r105 := (trunc r91 32)
  %t114 = trunc i64 %t100 to i32
  ; r106 := (bv_add r105 (0x1 : bv 32))
  %t115 = add i32 %t114, 1
  ; r107 := (uext r106 64)
  %t116 = zext i32 %t115 to i64
  br label %block_0_40e560
block_0_40e560:
  %t117 = phi i64 [ %t98, %block_0_40e55d ], [ %t376, %block_0_40e5e9 ]
  %t118 = phi i64 [ %t99, %block_0_40e55d ], [ %t361, %block_0_40e5e9 ]
  %t119 = phi i64 [ %t116, %block_0_40e55d ], [ 1, %block_0_40e5e9 ]
  %t120 = phi i64 [ %t101, %block_0_40e55d ], [ %t362, %block_0_40e5e9 ]
  %t121 = phi i64 [ %t102, %block_0_40e55d ], [ %t363, %block_0_40e5e9 ]
  %t122 = phi i64 [ %t103, %block_0_40e55d ], [ %t364, %block_0_40e5e9 ]
  %t123 = phi i64 [ %t104, %block_0_40e55d ], [ %t365, %block_0_40e5e9 ]
  %t124 = phi i64 [ %t105, %block_0_40e55d ], [ %t366, %block_0_40e5e9 ]
  %t125 = phi i512 [ %t106, %block_0_40e55d ], [ %t367, %block_0_40e5e9 ]
  %t126 = phi i512 [ %t107, %block_0_40e55d ], [ %t368, %block_0_40e5e9 ]
  %t127 = phi i512 [ %t108, %block_0_40e55d ], [ %t369, %block_0_40e5e9 ]
  %t128 = phi i512 [ %t109, %block_0_40e55d ], [ %t370, %block_0_40e5e9 ]
  %t129 = phi i512 [ %t110, %block_0_40e55d ], [ %t371, %block_0_40e5e9 ]
  %t130 = phi i512 [ %t111, %block_0_40e55d ], [ %t372, %block_0_40e5e9 ]
  %t131 = phi i512 [ %t112, %block_0_40e55d ], [ %t373, %block_0_40e5e9 ]
  %t132 = phi i512 [ %t113, %block_0_40e55d ], [ %t374, %block_0_40e5e9 ]
  ; r124 := (bv_add r111 (0xc : bv 64))
  %t133 = add i64 %t120, 12
  ; r125 := (read r124 (bv 32))
  %t134 = inttoptr i64 %t133 to i32*
  %t135 = load i32, i32* %t134
  ; r126 := (read r124 (bv 32))
  %t136 = inttoptr i64 %t133 to i32*
  %t137 = load i32, i32* %t136
  ; r127 := (bv_add r125 (0xffffffff : bv 32))
  %t138 = add i32 %t135, 4294967295
  ; write r124 r127
  %t139 = inttoptr i64 %t133 to i32*
  store i32 %t138, i32* %t139
  ; r128 := (trunc r115 8)
  %t140 = trunc i64 %t124 to i8
  ; write r108 r128
  %t141 = inttoptr i64 %t117 to i8*
  store i8 %t140, i8* %t141
  ; r129 := (bv_add r108 (0x1 : bv 64))
  %t142 = add i64 %t117, 1
  ; r130 := (bv_add r111 (0x20 : bv 64))
  %t143 = add i64 %t120, 32
  ; r131 := (read r130 (bv 32))
  %t144 = inttoptr i64 %t143 to i32*
  %t145 = load i32, i32* %t144
  ; r132 := (trunc r110 32)
  %t146 = trunc i64 %t119 to i32
  ; r133 := (eq r131 r132)
  %t147 = icmp eq i32 %t145, %t146
  ; r134 := (uext r128 64)
  %t148 = zext i8 %t140 to i64
  ; write r111 r129
  %t149 = inttoptr i64 %t120 to i64*
  store i64 %t142, i64* %t149
  br i1 %t147, label %block_0_40e5a5, label %block_0_40e577
block_0_40e577:
  %t150 = phi i64 [ %t118, %block_0_40e560 ]
  %t151 = phi i64 [ %t119, %block_0_40e560 ]
  %t152 = phi i64 [ %t120, %block_0_40e560 ]
  %t153 = phi i64 [ %t148, %block_0_40e560 ]
  %t154 = phi i64 [ %t121, %block_0_40e560 ]
  %t155 = phi i64 [ %t122, %block_0_40e560 ]
  %t156 = phi i64 [ %t123, %block_0_40e560 ]
  %t157 = phi i512 [ %t125, %block_0_40e560 ]
  %t158 = phi i512 [ %t126, %block_0_40e560 ]
  %t159 = phi i512 [ %t127, %block_0_40e560 ]
  %t160 = phi i512 [ %t128, %block_0_40e560 ]
  %t161 = phi i512 [ %t129, %block_0_40e560 ]
  %t162 = phi i512 [ %t130, %block_0_40e560 ]
  %t163 = phi i512 [ %t131, %block_0_40e560 ]
  %t164 = phi i512 [ %t132, %block_0_40e560 ]
  ; r150 := (bv_add r137 (0x10 : bv 64))
  %t165 = add i64 %t152, 16
  ; r151 := (read r150 (bv 8))
  %t166 = inttoptr i64 %t165 to i8*
  %t167 = load i8, i8* %t166
  ; r152 := (bv_and r151 (0x1 : bv 8))
  %t168 = and i8 %t167, 1
  ; r153 := (eq r152 (0x0 : bv 8))
  %t169 = icmp eq i8 %t168, 0
  br i1 %t169, label %block_0_40e57d, label %block_0_40e5a0
block_0_40e57d:
  %t170 = phi i64 [ %t151, %block_0_40e577 ], [ %t196, %block_0_40e5a0 ], [ %t241, %block_0_40e5ad ], [ %t246, %block_0_40e5b2 ]
  %t171 = phi i64 [ %t153, %block_0_40e577 ], [ %t198, %block_0_40e5a0 ], [ %t242, %block_0_40e5ad ], [ 4294967295, %block_0_40e5b2 ]
  %t172 = phi i512 [ %t157, %block_0_40e577 ], [ %t202, %block_0_40e5a0 ], [ %t243, %block_0_40e5ad ], [ %t247, %block_0_40e5b2 ]
  ; r157 := (trunc r155 32)
  %t173 = trunc i64 %t171 to i32
  ; r158 := (uext r157 64)
  %t174 = zext i32 %t173 to i64
  ; r159 := (bitcast r156 (vec 8 double))
  %t175 = bitcast i512 %t172 to <8 x double>
  ; r160 := (tuple r158 r154 r159)
  %t176 = insertvalue { i64, i64, <8 x double> } undef, i64 %t174, 0
  %t177 = insertvalue { i64, i64, <8 x double> } %t176, i64 %t170, 1
  %t178 = insertvalue { i64, i64, <8 x double> } %t177, <8 x double> %t175, 2
  ret { i64, i64, <8 x double> } %t178
block_0_40e592:
  %t179 = phi i64 [ %t50, %block_0_40e546 ]
  %t180 = phi i64 [ %t51, %block_0_40e546 ]
  %t181 = phi i64 [ %t52, %block_0_40e546 ]
  %t182 = phi i64 [ %t53, %block_0_40e546 ]
  %t183 = phi i64 [ %t54, %block_0_40e546 ]
  %t184 = phi i64 [ %t55, %block_0_40e546 ]
  %t185 = phi i512 [ %t56, %block_0_40e546 ]
  %t186 = phi i512 [ %t57, %block_0_40e546 ]
  %t187 = phi i512 [ %t58, %block_0_40e546 ]
  %t188 = phi i512 [ %t59, %block_0_40e546 ]
  %t189 = phi i512 [ %t60, %block_0_40e546 ]
  %t190 = phi i512 [ %t61, %block_0_40e546 ]
  %t191 = phi i512 [ %t62, %block_0_40e546 ]
  %t192 = phi i512 [ %t63, %block_0_40e546 ]
  ; r175 := (bv_add r162 (0xac : bv 64))
  %t193 = add i64 %t180, 172
  ; write r175 (0xffffffff : bv 32)
  %t194 = inttoptr i64 %t193 to i32*
  store i32 4294967295, i32* %t194
  br label %block_0_40e550
block_0_40e5a0:
  %t195 = phi i64 [ %t150, %block_0_40e577 ]
  %t196 = phi i64 [ %t151, %block_0_40e577 ]
  %t197 = phi i64 [ %t152, %block_0_40e577 ]
  %t198 = phi i64 [ %t153, %block_0_40e577 ]
  %t199 = phi i64 [ %t154, %block_0_40e577 ]
  %t200 = phi i64 [ %t155, %block_0_40e577 ]
  %t201 = phi i64 [ %t156, %block_0_40e577 ]
  %t202 = phi i512 [ %t157, %block_0_40e577 ]
  %t203 = phi i512 [ %t158, %block_0_40e577 ]
  %t204 = phi i512 [ %t159, %block_0_40e577 ]
  %t205 = phi i512 [ %t160, %block_0_40e577 ]
  %t206 = phi i512 [ %t161, %block_0_40e577 ]
  %t207 = phi i512 [ %t162, %block_0_40e577 ]
  %t208 = phi i512 [ %t163, %block_0_40e577 ]
  %t209 = phi i512 [ %t164, %block_0_40e577 ]
  ; r191 := (trunc r179 32)
  %t210 = trunc i64 %t198 to i32
  ; r192 := (eq r191 (0xa : bv 32))
  %t211 = icmp eq i32 %t210, 10
  br i1 %t211, label %block_0_40e5a5, label %block_0_40e57d
block_0_40e5a5:
  %t212 = phi i64 [ %t118, %block_0_40e560 ], [ %t195, %block_0_40e5a0 ]
  %t213 = phi i64 [ %t119, %block_0_40e560 ], [ %t196, %block_0_40e5a0 ]
  %t214 = phi i64 [ %t120, %block_0_40e560 ], [ %t197, %block_0_40e5a0 ]
  %t215 = phi i64 [ %t148, %block_0_40e560 ], [ %t198, %block_0_40e5a0 ]
  %t216 = phi i64 [ %t121, %block_0_40e560 ], [ %t199, %block_0_40e5a0 ]
  %t217 = phi i64 [ %t122, %block_0_40e560 ], [ %t200, %block_0_40e5a0 ]
  %t218 = phi i64 [ %t123, %block_0_40e560 ], [ %t201, %block_0_40e5a0 ]
  %t219 = phi i512 [ %t125, %block_0_40e560 ], [ %t202, %block_0_40e5a0 ]
  %t220 = phi i512 [ %t126, %block_0_40e560 ], [ %t203, %block_0_40e5a0 ]
  %t221 = phi i512 [ %t127, %block_0_40e560 ], [ %t204, %block_0_40e5a0 ]
  %t222 = phi i512 [ %t128, %block_0_40e560 ], [ %t205, %block_0_40e5a0 ]
  %t223 = phi i512 [ %t129, %block_0_40e560 ], [ %t206, %block_0_40e5a0 ]
  %t224 = phi i512 [ %t130, %block_0_40e560 ], [ %t207, %block_0_40e5a0 ]
  %t225 = phi i512 [ %t131, %block_0_40e560 ], [ %t208, %block_0_40e5a0 ]
  %t226 = phi i512 [ %t132, %block_0_40e560 ], [ %t209, %block_0_40e5a0 ]
  ; r208 := (bitcast r200 (vec 8 double))
  %t227 = bitcast i512 %t219 to <8 x double>
  ; r209 := (bitcast r201 (vec 8 double))
  %t228 = bitcast i512 %t220 to <8 x double>
  ; r210 := (bitcast r202 (vec 8 double))
  %t229 = bitcast i512 %t221 to <8 x double>
  ; r211 := (bitcast r203 (vec 8 double))
  %t230 = bitcast i512 %t222 to <8 x double>
  ; r212 := (bitcast r204 (vec 8 double))
  %t231 = bitcast i512 %t223 to <8 x double>
  ; r213 := (bitcast r205 (vec 8 double))
  %t232 = bitcast i512 %t224 to <8 x double>
  ; r214 := (bitcast r206 (vec 8 double))
  %t233 = bitcast i512 %t225 to <8 x double>
  ; r215 := (bitcast r207 (vec 8 double))
  %t234 = bitcast i512 %t226 to <8 x double>
  ; r216 := call __fflush(r195, r197, r194, r193, r198, r199, r208, r209, r210, r211, r212, r213, r214, r215)
  %t235 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__fflush(i64 %t214, i64 %t216, i64 %t213, i64 %t212, i64 %t217, i64 %t218, <8 x double> %t227, <8 x double> %t228, <8 x double> %t229, <8 x double> %t230, <8 x double> %t231, <8 x double> %t232, <8 x double> %t233, <8 x double> %t234)
  ; r217 := (tuple_field r216 0)
  %t236 = extractvalue { i64, i64, <8 x double> } %t235, 0
  ; r218 := (tuple_field r216 1)
  %t237 = extractvalue { i64, i64, <8 x double> } %t235, 1
  ; r219 := (tuple_field r216 2)
  %t238 = extractvalue { i64, i64, <8 x double> } %t235, 2
  ; r220 := (bitcast r219 (bv 512))
  %t239 = bitcast <8 x double> %t238 to i512
  br label %block_0_40e5ad
block_0_40e5ad:
  %t240 = phi i64 [ %t236, %block_0_40e5a5 ]
  %t241 = phi i64 [ %t237, %block_0_40e5a5 ]
  %t242 = phi i64 [ %t215, %block_0_40e5a5 ]
  %t243 = phi i512 [ %t239, %block_0_40e5a5 ]
  ; r225 := (trunc r221 32)
  %t244 = trunc i64 %t240 to i32
  ; r226 := (eq r225 (0x0 : bv 32))
  %t245 = icmp eq i32 %t244, 0
  br i1 %t245, label %block_0_40e57d, label %block_0_40e5b2
block_0_40e5b2:
  %t246 = phi i64 [ %t241, %block_0_40e5ad ], [ %t313, %block_0_40e5d6 ], [ %t345, %block_0_40e5e5 ]
  %t247 = phi i512 [ %t243, %block_0_40e5ad ], [ %t314, %block_0_40e5d6 ], [ %t351, %block_0_40e5e5 ]
  br label %block_0_40e57d
block_0_40e5c0:
  %t248 = phi i64 [ %t31, %block_0_40e53b ]
  %t249 = phi i64 [ %t32, %block_0_40e53b ]
  %t250 = phi i64 [ %t33, %block_0_40e53b ]
  %t251 = phi i64 [ %t34, %block_0_40e53b ]
  %t252 = phi i64 [ %t35, %block_0_40e53b ]
  %t253 = phi i64 [ %t36, %block_0_40e53b ]
  %t254 = phi i64 [ %t37, %block_0_40e53b ]
  %t255 = phi i512 [ %t38, %block_0_40e53b ]
  %t256 = phi i512 [ %t39, %block_0_40e53b ]
  %t257 = phi i512 [ %t40, %block_0_40e53b ]
  %t258 = phi i512 [ %t41, %block_0_40e53b ]
  %t259 = phi i512 [ %t42, %block_0_40e53b ]
  %t260 = phi i512 [ %t43, %block_0_40e53b ]
  %t261 = phi i512 [ %t44, %block_0_40e53b ]
  %t262 = phi i512 [ %t45, %block_0_40e53b ]
  ; r244 := (bv_shr r229 (0x8 : bv 64))
  %t263 = lshr i64 %t248, 8
  ; r245 := (trunc r244 8)
  %t264 = trunc i64 %t263 to i8
  ; r246 := (bv_and r245 (0x2 : bv 8))
  %t265 = and i8 %t264, 2
  ; r247 := (eq r246 (0x0 : bv 8))
  %t266 = icmp eq i8 %t265, 0
  br i1 %t266, label %block_0_40e5c5, label %block_0_40e546
block_0_40e5c5:
  %t267 = phi i64 [ %arg3, %block_0_40e510 ], [ %t249, %block_0_40e5c0 ]
  %t268 = phi i64 [ %arg2, %block_0_40e510 ], [ %t250, %block_0_40e5c0 ]
  %t269 = phi i64 [ %arg1, %block_0_40e510 ], [ %t251, %block_0_40e5c0 ]
  %t270 = phi i64 [ %arg1, %block_0_40e510 ], [ %t251, %block_0_40e5c0 ]
  %t271 = phi i64 [ %arg4, %block_0_40e510 ], [ %t252, %block_0_40e5c0 ]
  %t272 = phi i64 [ %arg5, %block_0_40e510 ], [ %t253, %block_0_40e5c0 ]
  %t273 = phi i64 [ %t4, %block_0_40e510 ], [ %t254, %block_0_40e5c0 ]
  %t274 = phi i512 [ %t15, %block_0_40e510 ], [ %t255, %block_0_40e5c0 ]
  %t275 = phi i512 [ %t16, %block_0_40e510 ], [ %t256, %block_0_40e5c0 ]
  %t276 = phi i512 [ %t17, %block_0_40e510 ], [ %t257, %block_0_40e5c0 ]
  %t277 = phi i512 [ %t18, %block_0_40e510 ], [ %t258, %block_0_40e5c0 ]
  %t278 = phi i512 [ %t19, %block_0_40e510 ], [ %t259, %block_0_40e5c0 ]
  %t279 = phi i512 [ %t20, %block_0_40e510 ], [ %t260, %block_0_40e5c0 ]
  %t280 = phi i512 [ %t21, %block_0_40e510 ], [ %t261, %block_0_40e5c0 ]
  %t281 = phi i512 [ %t22, %block_0_40e510 ], [ %t262, %block_0_40e5c0 ]
  ; r263 := (bitcast r255 (vec 8 double))
  %t282 = bitcast i512 %t274 to <8 x double>
  ; r264 := (bitcast r256 (vec 8 double))
  %t283 = bitcast i512 %t275 to <8 x double>
  ; r265 := (bitcast r257 (vec 8 double))
  %t284 = bitcast i512 %t276 to <8 x double>
  ; r266 := (bitcast r258 (vec 8 double))
  %t285 = bitcast i512 %t277 to <8 x double>
  ; r267 := (bitcast r259 (vec 8 double))
  %t286 = bitcast i512 %t278 to <8 x double>
  ; r268 := (bitcast r260 (vec 8 double))
  %t287 = bitcast i512 %t279 to <8 x double>
  ; r269 := (bitcast r261 (vec 8 double))
  %t288 = bitcast i512 %t280 to <8 x double>
  ; r270 := (bitcast r262 (vec 8 double))
  %t289 = bitcast i512 %t281 to <8 x double>
  ; r271 := call __swsetup(r250, r251, r249, r248, r252, r253, r263, r264, r265, r266, r267, r268, r269, r270)
  %t290 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__swsetup(i64 %t269, i64 %t270, i64 %t268, i64 %t267, i64 %t271, i64 %t272, <8 x double> %t282, <8 x double> %t283, <8 x double> %t284, <8 x double> %t285, <8 x double> %t286, <8 x double> %t287, <8 x double> %t288, <8 x double> %t289)
  ; r272 := (tuple_field r271 0)
  %t291 = extractvalue { i64, i64, <8 x double> } %t290, 0
  ; r273 := (tuple_field r271 1)
  %t292 = extractvalue { i64, i64, <8 x double> } %t290, 1
  ; r274 := (tuple_field r271 2)
  %t293 = extractvalue { i64, i64, <8 x double> } %t290, 2
  ; r275 := (bitcast r274 (bv 512))
  %t294 = bitcast <8 x double> %t293 to i512
  br label %block_0_40e5cd
block_0_40e5cd:
  %t295 = phi i64 [ %t291, %block_0_40e5c5 ]
  %t296 = phi i64 [ %t267, %block_0_40e5c5 ]
  %t297 = phi i64 [ %t292, %block_0_40e5c5 ]
  %t298 = phi i64 [ %t269, %block_0_40e5c5 ]
  %t299 = phi i64 [ %t270, %block_0_40e5c5 ]
  %t300 = phi i64 [ %t271, %block_0_40e5c5 ]
  %t301 = phi i64 [ %t272, %block_0_40e5c5 ]
  %t302 = phi i64 [ %t273, %block_0_40e5c5 ]
  %t303 = phi i512 [ %t294, %block_0_40e5c5 ]
  %t304 = phi i512 [ %t275, %block_0_40e5c5 ]
  %t305 = phi i512 [ %t276, %block_0_40e5c5 ]
  %t306 = phi i512 [ %t277, %block_0_40e5c5 ]
  %t307 = phi i512 [ %t278, %block_0_40e5c5 ]
  %t308 = phi i512 [ %t279, %block_0_40e5c5 ]
  %t309 = phi i512 [ %t280, %block_0_40e5c5 ]
  %t310 = phi i512 [ %t281, %block_0_40e5c5 ]
  ; r292 := (trunc r276 32)
  %t311 = trunc i64 %t295 to i32
  ; r293 := (eq r292 (0x0 : bv 32))
  %t312 = icmp eq i32 %t311, 0
  br i1 %t312, label %block_0_40e546, label %block_0_40e5d6
block_0_40e5d6:
  %t313 = phi i64 [ %t297, %block_0_40e5cd ]
  %t314 = phi i512 [ %t303, %block_0_40e5cd ]
  br label %block_0_40e5b2
block_0_40e5d8:
  %t315 = phi i64 [ %t68, %block_0_40e550 ]
  %t316 = phi i64 [ %t89, %block_0_40e550 ]
  %t317 = phi i64 [ %t69, %block_0_40e550 ]
  %t318 = phi i64 [ %t70, %block_0_40e550 ]
  %t319 = phi i64 [ %t71, %block_0_40e550 ]
  %t320 = phi i64 [ %t72, %block_0_40e550 ]
  %t321 = phi i64 [ %t73, %block_0_40e550 ]
  %t322 = phi i512 [ %t74, %block_0_40e550 ]
  %t323 = phi i512 [ %t75, %block_0_40e550 ]
  %t324 = phi i512 [ %t76, %block_0_40e550 ]
  %t325 = phi i512 [ %t77, %block_0_40e550 ]
  %t326 = phi i512 [ %t78, %block_0_40e550 ]
  %t327 = phi i512 [ %t79, %block_0_40e550 ]
  %t328 = phi i512 [ %t80, %block_0_40e550 ]
  %t329 = phi i512 [ %t81, %block_0_40e550 ]
  ; r311 := (bitcast r303 (vec 8 double))
  %t330 = bitcast i512 %t322 to <8 x double>
  ; r312 := (bitcast r304 (vec 8 double))
  %t331 = bitcast i512 %t323 to <8 x double>
  ; r313 := (bitcast r305 (vec 8 double))
  %t332 = bitcast i512 %t324 to <8 x double>
  ; r314 := (bitcast r306 (vec 8 double))
  %t333 = bitcast i512 %t325 to <8 x double>
  ; r315 := (bitcast r307 (vec 8 double))
  %t334 = bitcast i512 %t326 to <8 x double>
  ; r316 := (bitcast r308 (vec 8 double))
  %t335 = bitcast i512 %t327 to <8 x double>
  ; r317 := (bitcast r309 (vec 8 double))
  %t336 = bitcast i512 %t328 to <8 x double>
  ; r318 := (bitcast r310 (vec 8 double))
  %t337 = bitcast i512 %t329 to <8 x double>
  ; r319 := call __fflush(r298, r299, r297, r296, r300, r301, r311, r312, r313, r314, r315, r316, r317, r318)
  %t338 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__fflush(i64 %t317, i64 %t318, i64 %t316, i64 %t315, i64 %t319, i64 %t320, <8 x double> %t330, <8 x double> %t331, <8 x double> %t332, <8 x double> %t333, <8 x double> %t334, <8 x double> %t335, <8 x double> %t336, <8 x double> %t337)
  ; r320 := (tuple_field r319 0)
  %t339 = extractvalue { i64, i64, <8 x double> } %t338, 0
  ; r321 := (tuple_field r319 1)
  %t340 = extractvalue { i64, i64, <8 x double> } %t338, 1
  ; r322 := (tuple_field r319 2)
  %t341 = extractvalue { i64, i64, <8 x double> } %t338, 2
  ; r323 := (bitcast r322 (bv 512))
  %t342 = bitcast <8 x double> %t341 to i512
  br label %block_0_40e5e5
block_0_40e5e5:
  %t343 = phi i64 [ %t339, %block_0_40e5d8 ]
  %t344 = phi i64 [ %t315, %block_0_40e5d8 ]
  %t345 = phi i64 [ %t340, %block_0_40e5d8 ]
  %t346 = phi i64 [ %t317, %block_0_40e5d8 ]
  %t347 = phi i64 [ %t318, %block_0_40e5d8 ]
  %t348 = phi i64 [ %t319, %block_0_40e5d8 ]
  %t349 = phi i64 [ %t320, %block_0_40e5d8 ]
  %t350 = phi i64 [ %t321, %block_0_40e5d8 ]
  %t351 = phi i512 [ %t342, %block_0_40e5d8 ]
  %t352 = phi i512 [ %t323, %block_0_40e5d8 ]
  %t353 = phi i512 [ %t324, %block_0_40e5d8 ]
  %t354 = phi i512 [ %t325, %block_0_40e5d8 ]
  %t355 = phi i512 [ %t326, %block_0_40e5d8 ]
  %t356 = phi i512 [ %t327, %block_0_40e5d8 ]
  %t357 = phi i512 [ %t328, %block_0_40e5d8 ]
  %t358 = phi i512 [ %t329, %block_0_40e5d8 ]
  ; r340 := (trunc r324 32)
  %t359 = trunc i64 %t343 to i32
  ; r341 := (eq r340 (0x0 : bv 32))
  %t360 = icmp eq i32 %t359, 0
  br i1 %t360, label %block_0_40e5e9, label %block_0_40e5b2
block_0_40e5e9:
  %t361 = phi i64 [ %t344, %block_0_40e5e5 ]
  %t362 = phi i64 [ %t346, %block_0_40e5e5 ]
  %t363 = phi i64 [ %t347, %block_0_40e5e5 ]
  %t364 = phi i64 [ %t348, %block_0_40e5e5 ]
  %t365 = phi i64 [ %t349, %block_0_40e5e5 ]
  %t366 = phi i64 [ %t350, %block_0_40e5e5 ]
  %t367 = phi i512 [ %t351, %block_0_40e5e5 ]
  %t368 = phi i512 [ %t352, %block_0_40e5e5 ]
  %t369 = phi i512 [ %t353, %block_0_40e5e5 ]
  %t370 = phi i512 [ %t354, %block_0_40e5e5 ]
  %t371 = phi i512 [ %t355, %block_0_40e5e5 ]
  %t372 = phi i512 [ %t356, %block_0_40e5e5 ]
  %t373 = phi i512 [ %t357, %block_0_40e5e5 ]
  %t374 = phi i512 [ %t358, %block_0_40e5e5 ]
  ; r356 := (read r343 (bv 64))
  %t375 = inttoptr i64 %t362 to i64*
  %t376 = load i64, i64* %t375
  br label %block_0_40e560
}
define { i64, i64, <8 x double> } @strncpy(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40e6d0:
  ; r0 := (eq arg2 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg2, 0
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  ; r2 := (bitcast arg3 (bv 512))
  %t2 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_40e6ef, label %block_0_40e6d5
block_0_40e6d5:
  %t3 = phi i64 [ %arg2, %block_0_40e6d0 ]
  %t4 = phi i64 [ %arg1, %block_0_40e6d0 ]
  %t5 = phi i64 [ %arg0, %block_0_40e6d0 ]
  %t6 = phi i512 [ %t2, %block_0_40e6d0 ]
  br label %block_0_40e6d8
block_0_40e6d8:
  %t7 = phi i64 [ %t5, %block_0_40e6d5 ], [ %t18, %block_0_40e6e9 ]
  %t8 = phi i64 [ %t3, %block_0_40e6d5 ], [ %t23, %block_0_40e6e9 ]
  %t9 = phi i64 [ %t4, %block_0_40e6d5 ], [ %t20, %block_0_40e6e9 ]
  %t10 = phi i64 [ %t5, %block_0_40e6d5 ], [ %t21, %block_0_40e6e9 ]
  %t11 = phi i512 [ %t6, %block_0_40e6d5 ], [ %t22, %block_0_40e6e9 ]
  ; r12 := (read r9 (bv 8))
  %t12 = inttoptr i64 %t9 to i8*
  %t13 = load i8, i8* %t12
  ; r13 := (bv_add r9 (0x1 : bv 64))
  %t14 = add i64 %t9, 1
  ; write r7 r12
  %t15 = inttoptr i64 %t7 to i8*
  store i8 %t13, i8* %t15
  ; r14 := (bv_add r7 (0x1 : bv 64))
  %t16 = add i64 %t7, 1
  ; r15 := (eq r12 (0x0 : bv 8))
  %t17 = icmp eq i8 %t13, 0
  br i1 %t17, label %block_0_40e6f3, label %block_0_40e6e9
block_0_40e6e9:
  %t18 = phi i64 [ %t16, %block_0_40e6d8 ]
  %t19 = phi i64 [ %t8, %block_0_40e6d8 ]
  %t20 = phi i64 [ %t14, %block_0_40e6d8 ]
  %t21 = phi i64 [ %t10, %block_0_40e6d8 ]
  %t22 = phi i512 [ %t11, %block_0_40e6d8 ]
  ; r21 := (bv_add r17 (0xffffffffffffffff : bv 64))
  %t23 = add i64 %t19, 18446744073709551615
  ; r22 := (eq r17 (0x1 : bv 64))
  %t24 = icmp eq i64 %t19, 1
  br i1 %t24, label %block_0_40e6ef, label %block_0_40e6d8
block_0_40e6ef:
  %t25 = phi i64 [ %arg2, %block_0_40e6d0 ], [ %t23, %block_0_40e6e9 ], [ %t33, %block_0_40e6f3 ], [ %t45, %block_0_40e700 ], [ %t61, %block_0_40e71a ]
  %t26 = phi i64 [ %arg0, %block_0_40e6d0 ], [ %t21, %block_0_40e6e9 ], [ %t34, %block_0_40e6f3 ], [ %t46, %block_0_40e700 ], [ %t62, %block_0_40e71a ]
  %t27 = phi i512 [ %t1, %block_0_40e6d0 ], [ %t22, %block_0_40e6e9 ], [ %t35, %block_0_40e6f3 ], [ %t47, %block_0_40e700 ], [ %t63, %block_0_40e71a ]
  ; r26 := (bitcast r25 (vec 8 double))
  %t28 = bitcast i512 %t27 to <8 x double>
  ; r27 := (tuple r24 r23 r26)
  %t29 = insertvalue { i64, i64, <8 x double> } undef, i64 %t26, 0
  %t30 = insertvalue { i64, i64, <8 x double> } %t29, i64 %t25, 1
  %t31 = insertvalue { i64, i64, <8 x double> } %t30, <8 x double> %t28, 2
  ret { i64, i64, <8 x double> } %t31
block_0_40e6f3:
  %t32 = phi i64 [ %t16, %block_0_40e6d8 ]
  %t33 = phi i64 [ %t8, %block_0_40e6d8 ]
  %t34 = phi i64 [ %t10, %block_0_40e6d8 ]
  %t35 = phi i512 [ %t11, %block_0_40e6d8 ]
  ; r32 := (bv_add r29 (0xffffffffffffffff : bv 64))
  %t36 = add i64 %t33, 18446744073709551615
  ; r33 := (eq r29 (0x1 : bv 64))
  %t37 = icmp eq i64 %t33, 1
  br i1 %t37, label %block_0_40e6ef, label %block_0_40e6fc
block_0_40e6fc:
  %t38 = phi i64 [ %t36, %block_0_40e6f3 ]
  %t39 = phi i64 [ %t32, %block_0_40e6f3 ]
  %t40 = phi i64 [ %t33, %block_0_40e6f3 ]
  %t41 = phi i64 [ %t34, %block_0_40e6f3 ]
  %t42 = phi i512 [ %t35, %block_0_40e6f3 ]
  br label %block_0_40e700
block_0_40e700:
  %t43 = phi i64 [ %t38, %block_0_40e6fc ], [ %t59, %block_0_40e70d ]
  %t44 = phi i64 [ %t39, %block_0_40e6fc ], [ %t58, %block_0_40e70d ]
  %t45 = phi i64 [ %t40, %block_0_40e6fc ], [ %t54, %block_0_40e70d ]
  %t46 = phi i64 [ %t41, %block_0_40e6fc ], [ %t55, %block_0_40e70d ]
  %t47 = phi i512 [ %t42, %block_0_40e6fc ], [ %t56, %block_0_40e70d ]
  ; write r40 (0x0 : bv 8)
  %t48 = inttoptr i64 %t44 to i8*
  store i8 0, i8* %t48
  ; r44 := (bv_add r40 (0x1 : bv 64))
  %t49 = add i64 %t44, 1
  ; r45 := (bv_add r39 (0xffffffffffffffff : bv 64))
  %t50 = add i64 %t43, 18446744073709551615
  ; r46 := (eq r39 (0x1 : bv 64))
  %t51 = icmp eq i64 %t43, 1
  br i1 %t51, label %block_0_40e6ef, label %block_0_40e70d
block_0_40e70d:
  %t52 = phi i64 [ %t50, %block_0_40e700 ]
  %t53 = phi i64 [ %t49, %block_0_40e700 ]
  %t54 = phi i64 [ %t45, %block_0_40e700 ]
  %t55 = phi i64 [ %t46, %block_0_40e700 ]
  %t56 = phi i512 [ %t47, %block_0_40e700 ]
  ; write r48 (0x0 : bv 8)
  %t57 = inttoptr i64 %t53 to i8*
  store i8 0, i8* %t57
  ; r52 := (bv_add r48 (0x1 : bv 64))
  %t58 = add i64 %t53, 1
  ; r53 := (bv_add r47 (0xffffffffffffffff : bv 64))
  %t59 = add i64 %t52, 18446744073709551615
  ; r54 := (eq r47 (0x1 : bv 64))
  %t60 = icmp eq i64 %t52, 1
  br i1 %t60, label %block_0_40e71a, label %block_0_40e700
block_0_40e71a:
  %t61 = phi i64 [ %t54, %block_0_40e70d ]
  %t62 = phi i64 [ %t55, %block_0_40e70d ]
  %t63 = phi i512 [ %t56, %block_0_40e70d ]
  br label %block_0_40e6ef
}
define { i64, i64, <8 x double> } @strcat(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_40eb00:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  br label %block_0_40eb17
block_0_40eb17:
  %t1 = phi i64 [ %arg0, %block_0_40eb00 ], [ %t21, %block_0_40eb22 ]
  %t2 = phi i64 [ %arg2, %block_0_40eb00 ], [ %t22, %block_0_40eb22 ]
  %t3 = phi i64 [ %arg1, %block_0_40eb00 ], [ %t23, %block_0_40eb22 ]
  %t4 = phi i64 [ %arg0, %block_0_40eb00 ], [ %t28, %block_0_40eb22 ]
  %t5 = phi i64 [ 72340172838076673, %block_0_40eb00 ], [ %t25, %block_0_40eb22 ]
  %t6 = phi i64 [ 9259542123273814144, %block_0_40eb00 ], [ %t26, %block_0_40eb22 ]
  %t7 = phi i512 [ %t0, %block_0_40eb00 ], [ %t27, %block_0_40eb22 ]
  ; r8 := (trunc r4 8)
  %t8 = trunc i64 %t4 to i8
  ; r9 := (bv_and r8 (0x7 : bv 8))
  %t9 = and i8 %t8, 7
  ; r10 := (eq r9 (0x0 : bv 8))
  %t10 = icmp eq i8 %t9, 0
  br i1 %t10, label %block_0_40eb28, label %block_0_40eb1d
block_0_40eb1d:
  %t11 = phi i64 [ %t1, %block_0_40eb17 ]
  %t12 = phi i64 [ %t2, %block_0_40eb17 ]
  %t13 = phi i64 [ %t3, %block_0_40eb17 ]
  %t14 = phi i64 [ %t4, %block_0_40eb17 ]
  %t15 = phi i64 [ %t5, %block_0_40eb17 ]
  %t16 = phi i64 [ %t6, %block_0_40eb17 ]
  %t17 = phi i512 [ %t7, %block_0_40eb17 ]
  ; r18 := (read r14 (bv 8))
  %t18 = inttoptr i64 %t14 to i8*
  %t19 = load i8, i8* %t18
  ; r19 := (eq r18 (0x0 : bv 8))
  %t20 = icmp eq i8 %t19, 0
  br i1 %t20, label %block_0_40eb95, label %block_0_40eb22
block_0_40eb22:
  %t21 = phi i64 [ %t11, %block_0_40eb1d ]
  %t22 = phi i64 [ %t12, %block_0_40eb1d ]
  %t23 = phi i64 [ %t13, %block_0_40eb1d ]
  %t24 = phi i64 [ %t14, %block_0_40eb1d ]
  %t25 = phi i64 [ %t15, %block_0_40eb1d ]
  %t26 = phi i64 [ %t16, %block_0_40eb1d ]
  %t27 = phi i512 [ %t17, %block_0_40eb1d ]
  ; r27 := (bv_add r23 (0x1 : bv 64))
  %t28 = add i64 %t24, 1
  br label %block_0_40eb17
block_0_40eb28:
  %t29 = phi i64 [ %t1, %block_0_40eb17 ], [ %t29, %block_0_40eb28 ], [ %t174, %block_0_40eb8b ]
  %t30 = phi i64 [ %t3, %block_0_40eb17 ], [ %t30, %block_0_40eb28 ], [ %t176, %block_0_40eb8b ]
  %t31 = phi i64 [ %t4, %block_0_40eb17 ], [ %t37, %block_0_40eb28 ], [ %t177, %block_0_40eb8b ]
  %t32 = phi i64 [ %t5, %block_0_40eb17 ], [ %t32, %block_0_40eb28 ], [ %t178, %block_0_40eb8b ]
  %t33 = phi i64 [ %t6, %block_0_40eb17 ], [ %t33, %block_0_40eb28 ], [ %t179, %block_0_40eb8b ]
  %t34 = phi i512 [ %t7, %block_0_40eb17 ], [ %t34, %block_0_40eb28 ], [ %t180, %block_0_40eb8b ]
  ; r34 := (read r30 (bv 64))
  %t35 = inttoptr i64 %t31 to i64*
  %t36 = load i64, i64* %t35
  ; r35 := (bv_add r30 (0x8 : bv 64))
  %t37 = add i64 %t31, 8
  ; r36 := (bv_sub r34 r31)
  %t38 = sub i64 %t36, %t32
  ; r37 := (bv_and r36 r32)
  %t39 = and i64 %t38, %t33
  ; r38 := (eq r37 (0x0 : bv 64))
  %t40 = icmp eq i64 %t39, 0
  br i1 %t40, label %block_0_40eb28, label %block_0_40eb37
block_0_40eb37:
  %t41 = phi i64 [ %t29, %block_0_40eb28 ]
  %t42 = phi i64 [ %t38, %block_0_40eb28 ]
  %t43 = phi i64 [ %t30, %block_0_40eb28 ]
  %t44 = phi i64 [ %t37, %block_0_40eb28 ]
  %t45 = phi i64 [ %t32, %block_0_40eb28 ]
  %t46 = phi i64 [ %t33, %block_0_40eb28 ]
  %t47 = phi i512 [ %t34, %block_0_40eb28 ]
  ; r46 := (bv_add r42 (0xfffffffffffffff8 : bv 64))
  %t48 = add i64 %t44, 18446744073709551608
  ; r47 := (read r46 (bv 8))
  %t49 = inttoptr i64 %t48 to i8*
  %t50 = load i8, i8* %t49
  ; r48 := (eq r47 (0x0 : bv 8))
  %t51 = icmp eq i8 %t50, 0
  br i1 %t51, label %block_0_40eb3d, label %block_0_40eb43
block_0_40eb3d:
  %t52 = phi i64 [ %t41, %block_0_40eb37 ]
  %t53 = phi i64 [ %t42, %block_0_40eb37 ]
  %t54 = phi i64 [ %t43, %block_0_40eb37 ]
  %t55 = phi i64 [ %t44, %block_0_40eb37 ]
  %t56 = phi i64 [ %t45, %block_0_40eb37 ]
  %t57 = phi i64 [ %t46, %block_0_40eb37 ]
  %t58 = phi i512 [ %t47, %block_0_40eb37 ]
  ; r56 := (bv_add r52 (0xfffffffffffffff8 : bv 64))
  %t59 = add i64 %t55, 18446744073709551608
  br label %block_0_40eb95
block_0_40eb43:
  %t60 = phi i64 [ %t41, %block_0_40eb37 ]
  %t61 = phi i64 [ %t42, %block_0_40eb37 ]
  %t62 = phi i64 [ %t43, %block_0_40eb37 ]
  %t63 = phi i64 [ %t44, %block_0_40eb37 ]
  %t64 = phi i64 [ %t45, %block_0_40eb37 ]
  %t65 = phi i64 [ %t46, %block_0_40eb37 ]
  %t66 = phi i512 [ %t47, %block_0_40eb37 ]
  ; r64 := (bv_add r60 (0xfffffffffffffff9 : bv 64))
  %t67 = add i64 %t63, 18446744073709551609
  ; r65 := (read r64 (bv 8))
  %t68 = inttoptr i64 %t67 to i8*
  %t69 = load i8, i8* %t68
  ; r66 := (eq r65 (0x0 : bv 8))
  %t70 = icmp eq i8 %t69, 0
  br i1 %t70, label %block_0_40eb49, label %block_0_40eb4f
block_0_40eb49:
  %t71 = phi i64 [ %t60, %block_0_40eb43 ]
  %t72 = phi i64 [ %t61, %block_0_40eb43 ]
  %t73 = phi i64 [ %t62, %block_0_40eb43 ]
  %t74 = phi i64 [ %t63, %block_0_40eb43 ]
  %t75 = phi i64 [ %t64, %block_0_40eb43 ]
  %t76 = phi i64 [ %t65, %block_0_40eb43 ]
  %t77 = phi i512 [ %t66, %block_0_40eb43 ]
  ; r74 := (bv_add r70 (0xfffffffffffffff9 : bv 64))
  %t78 = add i64 %t74, 18446744073709551609
  br label %block_0_40eb95
block_0_40eb4f:
  %t79 = phi i64 [ %t60, %block_0_40eb43 ]
  %t80 = phi i64 [ %t61, %block_0_40eb43 ]
  %t81 = phi i64 [ %t62, %block_0_40eb43 ]
  %t82 = phi i64 [ %t63, %block_0_40eb43 ]
  %t83 = phi i64 [ %t64, %block_0_40eb43 ]
  %t84 = phi i64 [ %t65, %block_0_40eb43 ]
  %t85 = phi i512 [ %t66, %block_0_40eb43 ]
  ; r82 := (bv_add r78 (0xfffffffffffffffa : bv 64))
  %t86 = add i64 %t82, 18446744073709551610
  ; r83 := (read r82 (bv 8))
  %t87 = inttoptr i64 %t86 to i8*
  %t88 = load i8, i8* %t87
  ; r84 := (eq r83 (0x0 : bv 8))
  %t89 = icmp eq i8 %t88, 0
  br i1 %t89, label %block_0_40eb55, label %block_0_40eb5b
block_0_40eb55:
  %t90 = phi i64 [ %t79, %block_0_40eb4f ]
  %t91 = phi i64 [ %t80, %block_0_40eb4f ]
  %t92 = phi i64 [ %t81, %block_0_40eb4f ]
  %t93 = phi i64 [ %t82, %block_0_40eb4f ]
  %t94 = phi i64 [ %t83, %block_0_40eb4f ]
  %t95 = phi i64 [ %t84, %block_0_40eb4f ]
  %t96 = phi i512 [ %t85, %block_0_40eb4f ]
  ; r92 := (bv_add r88 (0xfffffffffffffffa : bv 64))
  %t97 = add i64 %t93, 18446744073709551610
  br label %block_0_40eb95
block_0_40eb5b:
  %t98 = phi i64 [ %t79, %block_0_40eb4f ]
  %t99 = phi i64 [ %t80, %block_0_40eb4f ]
  %t100 = phi i64 [ %t81, %block_0_40eb4f ]
  %t101 = phi i64 [ %t82, %block_0_40eb4f ]
  %t102 = phi i64 [ %t83, %block_0_40eb4f ]
  %t103 = phi i64 [ %t84, %block_0_40eb4f ]
  %t104 = phi i512 [ %t85, %block_0_40eb4f ]
  ; r100 := (bv_add r96 (0xfffffffffffffffb : bv 64))
  %t105 = add i64 %t101, 18446744073709551611
  ; r101 := (read r100 (bv 8))
  %t106 = inttoptr i64 %t105 to i8*
  %t107 = load i8, i8* %t106
  ; r102 := (eq r101 (0x0 : bv 8))
  %t108 = icmp eq i8 %t107, 0
  br i1 %t108, label %block_0_40eb61, label %block_0_40eb67
block_0_40eb61:
  %t109 = phi i64 [ %t98, %block_0_40eb5b ]
  %t110 = phi i64 [ %t99, %block_0_40eb5b ]
  %t111 = phi i64 [ %t100, %block_0_40eb5b ]
  %t112 = phi i64 [ %t101, %block_0_40eb5b ]
  %t113 = phi i64 [ %t102, %block_0_40eb5b ]
  %t114 = phi i64 [ %t103, %block_0_40eb5b ]
  %t115 = phi i512 [ %t104, %block_0_40eb5b ]
  ; r110 := (bv_add r106 (0xfffffffffffffffb : bv 64))
  %t116 = add i64 %t112, 18446744073709551611
  br label %block_0_40eb95
block_0_40eb67:
  %t117 = phi i64 [ %t98, %block_0_40eb5b ]
  %t118 = phi i64 [ %t99, %block_0_40eb5b ]
  %t119 = phi i64 [ %t100, %block_0_40eb5b ]
  %t120 = phi i64 [ %t101, %block_0_40eb5b ]
  %t121 = phi i64 [ %t102, %block_0_40eb5b ]
  %t122 = phi i64 [ %t103, %block_0_40eb5b ]
  %t123 = phi i512 [ %t104, %block_0_40eb5b ]
  ; r118 := (bv_add r114 (0xfffffffffffffffc : bv 64))
  %t124 = add i64 %t120, 18446744073709551612
  ; r119 := (read r118 (bv 8))
  %t125 = inttoptr i64 %t124 to i8*
  %t126 = load i8, i8* %t125
  ; r120 := (eq r119 (0x0 : bv 8))
  %t127 = icmp eq i8 %t126, 0
  br i1 %t127, label %block_0_40eb6d, label %block_0_40eb73
block_0_40eb6d:
  %t128 = phi i64 [ %t117, %block_0_40eb67 ]
  %t129 = phi i64 [ %t118, %block_0_40eb67 ]
  %t130 = phi i64 [ %t119, %block_0_40eb67 ]
  %t131 = phi i64 [ %t120, %block_0_40eb67 ]
  %t132 = phi i64 [ %t121, %block_0_40eb67 ]
  %t133 = phi i64 [ %t122, %block_0_40eb67 ]
  %t134 = phi i512 [ %t123, %block_0_40eb67 ]
  ; r128 := (bv_add r124 (0xfffffffffffffffc : bv 64))
  %t135 = add i64 %t131, 18446744073709551612
  br label %block_0_40eb95
block_0_40eb73:
  %t136 = phi i64 [ %t117, %block_0_40eb67 ]
  %t137 = phi i64 [ %t118, %block_0_40eb67 ]
  %t138 = phi i64 [ %t119, %block_0_40eb67 ]
  %t139 = phi i64 [ %t120, %block_0_40eb67 ]
  %t140 = phi i64 [ %t121, %block_0_40eb67 ]
  %t141 = phi i64 [ %t122, %block_0_40eb67 ]
  %t142 = phi i512 [ %t123, %block_0_40eb67 ]
  ; r136 := (bv_add r132 (0xfffffffffffffffd : bv 64))
  %t143 = add i64 %t139, 18446744073709551613
  ; r137 := (read r136 (bv 8))
  %t144 = inttoptr i64 %t143 to i8*
  %t145 = load i8, i8* %t144
  ; r138 := (eq r137 (0x0 : bv 8))
  %t146 = icmp eq i8 %t145, 0
  br i1 %t146, label %block_0_40eb79, label %block_0_40eb7f
block_0_40eb79:
  %t147 = phi i64 [ %t136, %block_0_40eb73 ]
  %t148 = phi i64 [ %t137, %block_0_40eb73 ]
  %t149 = phi i64 [ %t138, %block_0_40eb73 ]
  %t150 = phi i64 [ %t139, %block_0_40eb73 ]
  %t151 = phi i64 [ %t140, %block_0_40eb73 ]
  %t152 = phi i64 [ %t141, %block_0_40eb73 ]
  %t153 = phi i512 [ %t142, %block_0_40eb73 ]
  ; r146 := (bv_add r142 (0xfffffffffffffffd : bv 64))
  %t154 = add i64 %t150, 18446744073709551613
  br label %block_0_40eb95
block_0_40eb7f:
  %t155 = phi i64 [ %t136, %block_0_40eb73 ]
  %t156 = phi i64 [ %t137, %block_0_40eb73 ]
  %t157 = phi i64 [ %t138, %block_0_40eb73 ]
  %t158 = phi i64 [ %t139, %block_0_40eb73 ]
  %t159 = phi i64 [ %t140, %block_0_40eb73 ]
  %t160 = phi i64 [ %t141, %block_0_40eb73 ]
  %t161 = phi i512 [ %t142, %block_0_40eb73 ]
  ; r154 := (bv_add r150 (0xfffffffffffffffe : bv 64))
  %t162 = add i64 %t158, 18446744073709551614
  ; r155 := (read r154 (bv 8))
  %t163 = inttoptr i64 %t162 to i8*
  %t164 = load i8, i8* %t163
  ; r156 := (eq r155 (0x0 : bv 8))
  %t165 = icmp eq i8 %t164, 0
  br i1 %t165, label %block_0_40eb85, label %block_0_40eb8b
block_0_40eb85:
  %t166 = phi i64 [ %t155, %block_0_40eb7f ]
  %t167 = phi i64 [ %t156, %block_0_40eb7f ]
  %t168 = phi i64 [ %t157, %block_0_40eb7f ]
  %t169 = phi i64 [ %t158, %block_0_40eb7f ]
  %t170 = phi i64 [ %t159, %block_0_40eb7f ]
  %t171 = phi i64 [ %t160, %block_0_40eb7f ]
  %t172 = phi i512 [ %t161, %block_0_40eb7f ]
  ; r164 := (bv_add r160 (0xfffffffffffffffe : bv 64))
  %t173 = add i64 %t169, 18446744073709551614
  br label %block_0_40eb95
block_0_40eb8b:
  %t174 = phi i64 [ %t155, %block_0_40eb7f ]
  %t175 = phi i64 [ %t156, %block_0_40eb7f ]
  %t176 = phi i64 [ %t157, %block_0_40eb7f ]
  %t177 = phi i64 [ %t158, %block_0_40eb7f ]
  %t178 = phi i64 [ %t159, %block_0_40eb7f ]
  %t179 = phi i64 [ %t160, %block_0_40eb7f ]
  %t180 = phi i512 [ %t161, %block_0_40eb7f ]
  ; r172 := (bv_add r168 (0xffffffffffffffff : bv 64))
  %t181 = add i64 %t177, 18446744073709551615
  ; r173 := (read r172 (bv 8))
  %t182 = inttoptr i64 %t181 to i8*
  %t183 = load i8, i8* %t182
  ; r174 := (eq r173 (0x0 : bv 8))
  %t184 = icmp eq i8 %t183, 0
  br i1 %t184, label %block_0_40eb91, label %block_0_40eb28
block_0_40eb91:
  %t185 = phi i64 [ %t174, %block_0_40eb8b ]
  %t186 = phi i64 [ %t175, %block_0_40eb8b ]
  %t187 = phi i64 [ %t176, %block_0_40eb8b ]
  %t188 = phi i64 [ %t177, %block_0_40eb8b ]
  %t189 = phi i64 [ %t178, %block_0_40eb8b ]
  %t190 = phi i64 [ %t179, %block_0_40eb8b ]
  %t191 = phi i512 [ %t180, %block_0_40eb8b ]
  ; r182 := (bv_add r178 (0xffffffffffffffff : bv 64))
  %t192 = add i64 %t188, 18446744073709551615
  br label %block_0_40eb95
block_0_40eb95:
  %t193 = phi i64 [ %t11, %block_0_40eb1d ], [ %t52, %block_0_40eb3d ], [ %t71, %block_0_40eb49 ], [ %t90, %block_0_40eb55 ], [ %t109, %block_0_40eb61 ], [ %t128, %block_0_40eb6d ], [ %t147, %block_0_40eb79 ], [ %t166, %block_0_40eb85 ], [ %t185, %block_0_40eb91 ], [ %t203, %block_0_40eb9b ]
  %t194 = phi i64 [ %t12, %block_0_40eb1d ], [ %t53, %block_0_40eb3d ], [ %t72, %block_0_40eb49 ], [ %t91, %block_0_40eb55 ], [ %t110, %block_0_40eb61 ], [ %t129, %block_0_40eb6d ], [ %t148, %block_0_40eb79 ], [ %t167, %block_0_40eb85 ], [ %t186, %block_0_40eb91 ], [ %t214, %block_0_40eb9b ]
  %t195 = phi i64 [ %t13, %block_0_40eb1d ], [ %t54, %block_0_40eb3d ], [ %t73, %block_0_40eb49 ], [ %t92, %block_0_40eb55 ], [ %t111, %block_0_40eb61 ], [ %t130, %block_0_40eb6d ], [ %t149, %block_0_40eb79 ], [ %t168, %block_0_40eb85 ], [ %t187, %block_0_40eb91 ], [ %t215, %block_0_40eb9b ]
  %t196 = phi i64 [ %t14, %block_0_40eb1d ], [ %t59, %block_0_40eb3d ], [ %t78, %block_0_40eb49 ], [ %t97, %block_0_40eb55 ], [ %t116, %block_0_40eb61 ], [ %t135, %block_0_40eb6d ], [ %t154, %block_0_40eb79 ], [ %t173, %block_0_40eb85 ], [ %t192, %block_0_40eb91 ], [ %t217, %block_0_40eb9b ]
  %t197 = phi i64 [ %t15, %block_0_40eb1d ], [ %t56, %block_0_40eb3d ], [ %t75, %block_0_40eb49 ], [ %t94, %block_0_40eb55 ], [ %t113, %block_0_40eb61 ], [ %t132, %block_0_40eb6d ], [ %t151, %block_0_40eb79 ], [ %t170, %block_0_40eb85 ], [ %t189, %block_0_40eb91 ], [ %t207, %block_0_40eb9b ]
  %t198 = phi i64 [ %t16, %block_0_40eb1d ], [ %t57, %block_0_40eb3d ], [ %t76, %block_0_40eb49 ], [ %t95, %block_0_40eb55 ], [ %t114, %block_0_40eb61 ], [ %t133, %block_0_40eb6d ], [ %t152, %block_0_40eb79 ], [ %t171, %block_0_40eb85 ], [ %t190, %block_0_40eb91 ], [ %t208, %block_0_40eb9b ]
  %t199 = phi i512 [ %t17, %block_0_40eb1d ], [ %t58, %block_0_40eb3d ], [ %t77, %block_0_40eb49 ], [ %t96, %block_0_40eb55 ], [ %t115, %block_0_40eb61 ], [ %t134, %block_0_40eb6d ], [ %t153, %block_0_40eb79 ], [ %t172, %block_0_40eb85 ], [ %t191, %block_0_40eb91 ], [ %t209, %block_0_40eb9b ]
  ; r190 := (trunc r185 8)
  %t200 = trunc i64 %t195 to i8
  ; r191 := (bv_and r190 (0x7 : bv 8))
  %t201 = and i8 %t200, 7
  ; r192 := (eq r191 (0x0 : bv 8))
  %t202 = icmp eq i8 %t201, 0
  br i1 %t202, label %block_0_40ebb3, label %block_0_40eb9b
block_0_40eb9b:
  %t203 = phi i64 [ %t193, %block_0_40eb95 ]
  %t204 = phi i64 [ %t194, %block_0_40eb95 ]
  %t205 = phi i64 [ %t195, %block_0_40eb95 ]
  %t206 = phi i64 [ %t196, %block_0_40eb95 ]
  %t207 = phi i64 [ %t197, %block_0_40eb95 ]
  %t208 = phi i64 [ %t198, %block_0_40eb95 ]
  %t209 = phi i512 [ %t199, %block_0_40eb95 ]
  ; r200 := (read r195 (bv 8))
  %t210 = inttoptr i64 %t205 to i8*
  %t211 = load i8, i8* %t210
  ; r201 := (bv_and r194 (0xffffffffffffff00 : bv 64))
  %t212 = and i64 %t204, 18446744073709551360
  ; r202 := (uext r200 64)
  %t213 = zext i8 %t211 to i64
  ; r203 := (bv_or r201 r202)
  %t214 = or i64 %t212, %t213
  ; r204 := (bv_add r195 (0x1 : bv 64))
  %t215 = add i64 %t205, 1
  ; write r196 r200
  %t216 = inttoptr i64 %t206 to i8*
  store i8 %t211, i8* %t216
  ; r205 := (bv_add r196 (0x1 : bv 64))
  %t217 = add i64 %t206, 1
  ; r206 := (eq r200 (0x0 : bv 8))
  %t218 = icmp eq i8 %t211, 0
  br i1 %t218, label %block_0_40eba9, label %block_0_40eb95
block_0_40eba9:
  %t219 = phi i64 [ %t203, %block_0_40eb9b ]
  %t220 = phi i64 [ %t214, %block_0_40eb9b ]
  %t221 = phi i512 [ %t209, %block_0_40eb9b ]
  ; r210 := (bitcast r209 (vec 8 double))
  %t222 = bitcast i512 %t221 to <8 x double>
  ; r211 := (tuple r207 r208 r210)
  %t223 = insertvalue { i64, i64, <8 x double> } undef, i64 %t219, 0
  %t224 = insertvalue { i64, i64, <8 x double> } %t223, i64 %t220, 1
  %t225 = insertvalue { i64, i64, <8 x double> } %t224, <8 x double> %t222, 2
  ret { i64, i64, <8 x double> } %t225
block_0_40ebac:
  %t226 = phi i64 [ %t235, %block_0_40ebb3 ]
  %t227 = phi i64 [ %t242, %block_0_40ebb3 ]
  %t228 = phi i64 [ %t243, %block_0_40ebb3 ]
  %t229 = phi i64 [ %t237, %block_0_40ebb3 ]
  %t230 = phi i64 [ %t238, %block_0_40ebb3 ]
  %t231 = phi i64 [ %t239, %block_0_40ebb3 ]
  %t232 = phi i512 [ %t240, %block_0_40ebb3 ]
  ; write r215 r213
  %t233 = inttoptr i64 %t229 to i64*
  store i64 %t227, i64* %t233
  ; r219 := (bv_add r215 (0x8 : bv 64))
  %t234 = add i64 %t229, 8
  br label %block_0_40ebb3
block_0_40ebb3:
  %t235 = phi i64 [ %t193, %block_0_40eb95 ], [ %t226, %block_0_40ebac ], [ %t330, %block_0_40ec1c ]
  %t236 = phi i64 [ %t195, %block_0_40eb95 ], [ %t228, %block_0_40ebac ], [ %t332, %block_0_40ec1c ]
  %t237 = phi i64 [ %t196, %block_0_40eb95 ], [ %t234, %block_0_40ebac ], [ %t340, %block_0_40ec1c ]
  %t238 = phi i64 [ %t197, %block_0_40eb95 ], [ %t230, %block_0_40ebac ], [ %t334, %block_0_40ec1c ]
  %t239 = phi i64 [ %t198, %block_0_40eb95 ], [ %t231, %block_0_40ebac ], [ %t335, %block_0_40ec1c ]
  %t240 = phi i512 [ %t199, %block_0_40eb95 ], [ %t232, %block_0_40ebac ], [ %t336, %block_0_40ec1c ]
  ; r226 := (read r221 (bv 64))
  %t241 = inttoptr i64 %t236 to i64*
  %t242 = load i64, i64* %t241
  ; r227 := (bv_add r221 (0x8 : bv 64))
  %t243 = add i64 %t236, 8
  ; r228 := (bv_sub r226 r223)
  %t244 = sub i64 %t242, %t238
  ; r229 := (bv_and r228 r224)
  %t245 = and i64 %t244, %t239
  ; r230 := (eq r229 (0x0 : bv 64))
  %t246 = icmp eq i64 %t245, 0
  br i1 %t246, label %block_0_40ebac, label %block_0_40ebc5
block_0_40ebc5:
  %t247 = phi i64 [ %t235, %block_0_40ebb3 ]
  %t248 = phi i64 [ %t242, %block_0_40ebb3 ]
  %t249 = phi i64 [ %t243, %block_0_40ebb3 ]
  %t250 = phi i64 [ %t237, %block_0_40ebb3 ]
  %t251 = phi i64 [ %t238, %block_0_40ebb3 ]
  %t252 = phi i64 [ %t239, %block_0_40ebb3 ]
  %t253 = phi i512 [ %t240, %block_0_40ebb3 ]
  ; r238 := (trunc r232 8)
  %t254 = trunc i64 %t248 to i8
  ; write r234 r238
  %t255 = inttoptr i64 %t250 to i8*
  store i8 %t254, i8* %t255
  ; r239 := (bv_add r234 (0x1 : bv 64))
  %t256 = add i64 %t250, 1
  ; r240 := (eq r238 (0x0 : bv 8))
  %t257 = icmp eq i8 %t254, 0
  br i1 %t257, label %block_0_40ec29, label %block_0_40ebce
block_0_40ebce:
  %t258 = phi i64 [ %t247, %block_0_40ebc5 ]
  %t259 = phi i64 [ %t248, %block_0_40ebc5 ]
  %t260 = phi i64 [ %t249, %block_0_40ebc5 ]
  %t261 = phi i64 [ %t256, %block_0_40ebc5 ]
  %t262 = phi i64 [ %t251, %block_0_40ebc5 ]
  %t263 = phi i64 [ %t252, %block_0_40ebc5 ]
  %t264 = phi i512 [ %t253, %block_0_40ebc5 ]
  ; r248 := (bv_shr r242 (0x8 : bv 64))
  %t265 = lshr i64 %t259, 8
  ; r249 := (trunc r248 8)
  %t266 = trunc i64 %t265 to i8
  ; write r244 r249
  %t267 = inttoptr i64 %t261 to i8*
  store i8 %t266, i8* %t267
  ; r250 := (bv_add r244 (0x1 : bv 64))
  %t268 = add i64 %t261, 1
  ; r251 := (eq r249 (0x0 : bv 8))
  %t269 = icmp eq i8 %t266, 0
  br i1 %t269, label %block_0_40ec29, label %block_0_40ebdb
block_0_40ebdb:
  %t270 = phi i64 [ %t258, %block_0_40ebce ]
  %t271 = phi i64 [ %t265, %block_0_40ebce ]
  %t272 = phi i64 [ %t260, %block_0_40ebce ]
  %t273 = phi i64 [ %t268, %block_0_40ebce ]
  %t274 = phi i64 [ %t262, %block_0_40ebce ]
  %t275 = phi i64 [ %t263, %block_0_40ebce ]
  %t276 = phi i512 [ %t264, %block_0_40ebce ]
  ; r259 := (bv_shr r253 (0x8 : bv 64))
  %t277 = lshr i64 %t271, 8
  ; r260 := (trunc r259 8)
  %t278 = trunc i64 %t277 to i8
  ; write r255 r260
  %t279 = inttoptr i64 %t273 to i8*
  store i8 %t278, i8* %t279
  ; r261 := (bv_add r255 (0x1 : bv 64))
  %t280 = add i64 %t273, 1
  ; r262 := (eq r260 (0x0 : bv 8))
  %t281 = icmp eq i8 %t278, 0
  br i1 %t281, label %block_0_40ec29, label %block_0_40ebe8
block_0_40ebe8:
  %t282 = phi i64 [ %t270, %block_0_40ebdb ]
  %t283 = phi i64 [ %t277, %block_0_40ebdb ]
  %t284 = phi i64 [ %t272, %block_0_40ebdb ]
  %t285 = phi i64 [ %t280, %block_0_40ebdb ]
  %t286 = phi i64 [ %t274, %block_0_40ebdb ]
  %t287 = phi i64 [ %t275, %block_0_40ebdb ]
  %t288 = phi i512 [ %t276, %block_0_40ebdb ]
  ; r270 := (bv_shr r264 (0x8 : bv 64))
  %t289 = lshr i64 %t283, 8
  ; r271 := (trunc r270 8)
  %t290 = trunc i64 %t289 to i8
  ; write r266 r271
  %t291 = inttoptr i64 %t285 to i8*
  store i8 %t290, i8* %t291
  ; r272 := (bv_add r266 (0x1 : bv 64))
  %t292 = add i64 %t285, 1
  ; r273 := (eq r271 (0x0 : bv 8))
  %t293 = icmp eq i8 %t290, 0
  br i1 %t293, label %block_0_40ec29, label %block_0_40ebf5
block_0_40ebf5:
  %t294 = phi i64 [ %t282, %block_0_40ebe8 ]
  %t295 = phi i64 [ %t289, %block_0_40ebe8 ]
  %t296 = phi i64 [ %t284, %block_0_40ebe8 ]
  %t297 = phi i64 [ %t292, %block_0_40ebe8 ]
  %t298 = phi i64 [ %t286, %block_0_40ebe8 ]
  %t299 = phi i64 [ %t287, %block_0_40ebe8 ]
  %t300 = phi i512 [ %t288, %block_0_40ebe8 ]
  ; r281 := (bv_shr r275 (0x8 : bv 64))
  %t301 = lshr i64 %t295, 8
  ; r282 := (trunc r281 8)
  %t302 = trunc i64 %t301 to i8
  ; write r277 r282
  %t303 = inttoptr i64 %t297 to i8*
  store i8 %t302, i8* %t303
  ; r283 := (bv_add r277 (0x1 : bv 64))
  %t304 = add i64 %t297, 1
  ; r284 := (eq r282 (0x0 : bv 8))
  %t305 = icmp eq i8 %t302, 0
  br i1 %t305, label %block_0_40ec29, label %block_0_40ec02
block_0_40ec02:
  %t306 = phi i64 [ %t294, %block_0_40ebf5 ]
  %t307 = phi i64 [ %t301, %block_0_40ebf5 ]
  %t308 = phi i64 [ %t296, %block_0_40ebf5 ]
  %t309 = phi i64 [ %t304, %block_0_40ebf5 ]
  %t310 = phi i64 [ %t298, %block_0_40ebf5 ]
  %t311 = phi i64 [ %t299, %block_0_40ebf5 ]
  %t312 = phi i512 [ %t300, %block_0_40ebf5 ]
  ; r292 := (bv_shr r286 (0x8 : bv 64))
  %t313 = lshr i64 %t307, 8
  ; r293 := (trunc r292 8)
  %t314 = trunc i64 %t313 to i8
  ; write r288 r293
  %t315 = inttoptr i64 %t309 to i8*
  store i8 %t314, i8* %t315
  ; r294 := (bv_add r288 (0x1 : bv 64))
  %t316 = add i64 %t309, 1
  ; r295 := (eq r293 (0x0 : bv 8))
  %t317 = icmp eq i8 %t314, 0
  br i1 %t317, label %block_0_40ec29, label %block_0_40ec0f
block_0_40ec0f:
  %t318 = phi i64 [ %t306, %block_0_40ec02 ]
  %t319 = phi i64 [ %t313, %block_0_40ec02 ]
  %t320 = phi i64 [ %t308, %block_0_40ec02 ]
  %t321 = phi i64 [ %t316, %block_0_40ec02 ]
  %t322 = phi i64 [ %t310, %block_0_40ec02 ]
  %t323 = phi i64 [ %t311, %block_0_40ec02 ]
  %t324 = phi i512 [ %t312, %block_0_40ec02 ]
  ; r303 := (bv_shr r297 (0x8 : bv 64))
  %t325 = lshr i64 %t319, 8
  ; r304 := (trunc r303 8)
  %t326 = trunc i64 %t325 to i8
  ; write r299 r304
  %t327 = inttoptr i64 %t321 to i8*
  store i8 %t326, i8* %t327
  ; r305 := (bv_add r299 (0x1 : bv 64))
  %t328 = add i64 %t321, 1
  ; r306 := (eq r304 (0x0 : bv 8))
  %t329 = icmp eq i8 %t326, 0
  br i1 %t329, label %block_0_40ec29, label %block_0_40ec1c
block_0_40ec1c:
  %t330 = phi i64 [ %t318, %block_0_40ec0f ]
  %t331 = phi i64 [ %t325, %block_0_40ec0f ]
  %t332 = phi i64 [ %t320, %block_0_40ec0f ]
  %t333 = phi i64 [ %t328, %block_0_40ec0f ]
  %t334 = phi i64 [ %t322, %block_0_40ec0f ]
  %t335 = phi i64 [ %t323, %block_0_40ec0f ]
  %t336 = phi i512 [ %t324, %block_0_40ec0f ]
  ; r314 := (bv_shr r308 (0x8 : bv 64))
  %t337 = lshr i64 %t331, 8
  ; r315 := (trunc r314 8)
  %t338 = trunc i64 %t337 to i8
  ; write r310 r315
  %t339 = inttoptr i64 %t333 to i8*
  store i8 %t338, i8* %t339
  ; r316 := (bv_add r310 (0x1 : bv 64))
  %t340 = add i64 %t333, 1
  ; r317 := (eq r315 (0x0 : bv 8))
  %t341 = icmp eq i8 %t338, 0
  br i1 %t341, label %block_0_40ec29, label %block_0_40ebb3
block_0_40ec29:
  %t342 = phi i64 [ %t247, %block_0_40ebc5 ], [ %t258, %block_0_40ebce ], [ %t270, %block_0_40ebdb ], [ %t282, %block_0_40ebe8 ], [ %t294, %block_0_40ebf5 ], [ %t306, %block_0_40ec02 ], [ %t318, %block_0_40ec0f ], [ %t330, %block_0_40ec1c ]
  %t343 = phi i64 [ %t248, %block_0_40ebc5 ], [ %t265, %block_0_40ebce ], [ %t277, %block_0_40ebdb ], [ %t289, %block_0_40ebe8 ], [ %t301, %block_0_40ebf5 ], [ %t313, %block_0_40ec02 ], [ %t325, %block_0_40ec0f ], [ %t337, %block_0_40ec1c ]
  %t344 = phi i512 [ %t253, %block_0_40ebc5 ], [ %t264, %block_0_40ebce ], [ %t276, %block_0_40ebdb ], [ %t288, %block_0_40ebe8 ], [ %t300, %block_0_40ebf5 ], [ %t312, %block_0_40ec02 ], [ %t324, %block_0_40ec0f ], [ %t336, %block_0_40ec1c ]
  ; r321 := (bitcast r320 (vec 8 double))
  %t345 = bitcast i512 %t344 to <8 x double>
  ; r322 := (tuple r318 r319 r321)
  %t346 = insertvalue { i64, i64, <8 x double> } undef, i64 %t342, 0
  %t347 = insertvalue { i64, i64, <8 x double> } %t346, i64 %t343, 1
  %t348 = insertvalue { i64, i64, <8 x double> } %t347, <8 x double> %t345, 2
  ret { i64, i64, <8 x double> } %t348
}
define { i64, <8 x double> } @grouping_init(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_40edd0:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (bitcast arg2 (bv 512))
  %t2 = bitcast <8 x double> %arg2 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := call localeconv(r3)
  %t4 = call { i64, <8 x double> } (<8 x double>) @localeconv(<8 x double> %t3)
  ; r5 := (tuple_field r4 0)
  %t5 = extractvalue { i64, <8 x double> } %t4, 0
  ; r6 := (tuple_field r4 1)
  %t6 = extractvalue { i64, <8 x double> } %t4, 1
  ; r7 := (bitcast r6 (bv 512))
  %t7 = bitcast <8 x double> %t6 to i512
  br label %block_0_40eddf
block_0_40eddf:
  %t8 = phi i64 [ %t5, %block_0_40edd0 ]
  %t9 = phi i64 [ %arg0, %block_0_40edd0 ]
  %t10 = phi i64 [ %t1, %block_0_40edd0 ]
  %t11 = phi i512 [ %t7, %block_0_40edd0 ]
  ; r12 := (bv_add r8 (0x10 : bv 64))
  %t12 = add i64 %t8, 16
  ; r13 := (read r12 (bv 64))
  %t13 = inttoptr i64 %t12 to i64*
  %t14 = load i64, i64* %t13
  ; r14 := (bv_add r9 (0x10 : bv 64))
  %t15 = add i64 %t9, 16
  ; write r14 r13
  %t16 = inttoptr i64 %t15 to i64*
  store i64 %t14, i64* %t16
  ; r15 := (bv_add r8 (0x8 : bv 64))
  %t17 = add i64 %t8, 8
  ; r16 := (read r15 (bv 64))
  %t18 = inttoptr i64 %t17 to i64*
  %t19 = load i64, i64* %t18
  ; write r9 r16
  %t20 = inttoptr i64 %t9 to i64*
  store i64 %t19, i64* %t20
  ; r17 := (bitcast r11 (vec 8 double))
  %t21 = bitcast i512 %t11 to <8 x double>
  ; r18 := call strlen(r16, r17)
  %t22 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t19, <8 x double> %t21)
  ; r19 := (tuple_field r18 0)
  %t23 = extractvalue { i64, i64, <8 x double> } %t22, 0
  ; r20 := (tuple_field r18 1)
  %t24 = extractvalue { i64, i64, <8 x double> } %t22, 1
  ; r21 := (tuple_field r18 2)
  %t25 = extractvalue { i64, i64, <8 x double> } %t22, 2
  ; r22 := (bitcast r21 (bv 512))
  %t26 = bitcast <8 x double> %t25 to i512
  br label %block_0_40edf4
block_0_40edf4:
  %t27 = phi i64 [ %t23, %block_0_40eddf ]
  %t28 = phi i64 [ %t14, %block_0_40eddf ]
  %t29 = phi i64 [ %t9, %block_0_40eddf ]
  %t30 = phi i64 [ %t10, %block_0_40eddf ]
  %t31 = phi i512 [ %t26, %block_0_40eddf ]
  ; r28 := (bv_add r25 (0x20 : bv 64))
  %t32 = add i64 %t29, 32
  ; write r28 (0x0 : bv 32)
  %t33 = inttoptr i64 %t32 to i32*
  store i32 0, i32* %t33
  ; r29 := (trunc r23 32)
  %t34 = trunc i64 %t27 to i32
  ; r30 := (bv_add r25 (0x8 : bv 64))
  %t35 = add i64 %t29, 8
  ; write r30 r29
  %t36 = inttoptr i64 %t35 to i32*
  store i32 %t34, i32* %t36
  ; r31 := (bv_add r25 (0x1c : bv 64))
  %t37 = add i64 %t29, 28
  ; write r31 (0x0 : bv 32)
  %t38 = inttoptr i64 %t37 to i32*
  store i32 0, i32* %t38
  ; r32 := (trunc r26 32)
  %t39 = trunc i64 %t30 to i32
  ; r33 := (bv_add r25 (0x18 : bv 64))
  %t40 = add i64 %t29, 24
  ; write r33 r32
  %t41 = inttoptr i64 %t40 to i32*
  store i32 %t39, i32* %t41
  br label %block_0_40ee10
block_0_40ee10:
  %t42 = phi i64 [ %t28, %block_0_40edf4 ], [ %t119, %block_0_40ee51 ]
  %t43 = phi i64 [ %t29, %block_0_40edf4 ], [ %t120, %block_0_40ee51 ]
  %t44 = phi i512 [ %t31, %block_0_40edf4 ], [ %t121, %block_0_40ee51 ]
  ; r37 := (read r34 (bv 8))
  %t45 = inttoptr i64 %t42 to i8*
  %t46 = load i8, i8* %t45
  ; r38 := (uext r37 64)
  %t47 = zext i8 %t46 to i64
  ; r39 := (eq r37 (0x7f : bv 8))
  %t48 = icmp eq i8 %t46, 127
  br i1 %t48, label %block_0_40ee42, label %block_0_40ee18
block_0_40ee18:
  %t49 = phi i64 [ %t42, %block_0_40ee10 ], [ %t94, %block_0_40ee2d ]
  %t50 = phi i64 [ %t47, %block_0_40ee10 ], [ %t97, %block_0_40ee2d ]
  %t51 = phi i64 [ %t43, %block_0_40ee10 ], [ %t81, %block_0_40ee2d ]
  %t52 = phi i512 [ %t44, %block_0_40ee10 ], [ %t82, %block_0_40ee2d ]
  ; r44 := (bv_add r42 (0x18 : bv 64))
  %t53 = add i64 %t51, 24
  ; r45 := (read r44 (bv 32))
  %t54 = inttoptr i64 %t53 to i32*
  %t55 = load i32, i32* %t54
  ; r46 := (uext r45 64)
  %t56 = zext i32 %t55 to i64
  ; r47 := (trunc r41 8)
  %t57 = trunc i64 %t50 to i8
  ; r48 := (sext r47 32)
  %t58 = sext i8 %t57 to i32
  ; r49 := (uext r48 64)
  %t59 = zext i32 %t58 to i64
  ; r50 := (ssbb_overflows r45 r48 false)
  %t60 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t55, i32 %t58)
  %t61 = extractvalue { i32, i1 } %t60, 1
  ; r51 := (bv_sub r45 r48)
  %t62 = sub i32 %t55, %t58
  ; r52 := (bv_slt r51 (0x0 : bv 32))
  %t63 = icmp slt i32 %t62, 0
  ; r53 := (eq r45 r48)
  %t64 = icmp eq i32 %t55, %t58
  ; r54 := (xor r52 r50)
  %t65 = xor i1 %t63, %t61
  ; r55 := (or r53 r54)
  %t66 = or i1 %t64, %t65
  br i1 %t66, label %block_0_40ee42, label %block_0_40ee22
block_0_40ee22:
  %t67 = phi i64 [ %t56, %block_0_40ee18 ]
  %t68 = phi i64 [ %t49, %block_0_40ee18 ]
  %t69 = phi i64 [ %t59, %block_0_40ee18 ]
  %t70 = phi i64 [ %t51, %block_0_40ee18 ]
  %t71 = phi i512 [ %t52, %block_0_40ee18 ]
  ; r61 := (trunc r56 32)
  %t72 = trunc i64 %t67 to i32
  ; r62 := (trunc r58 32)
  %t73 = trunc i64 %t69 to i32
  ; r63 := (bv_sub r61 r62)
  %t74 = sub i32 %t72, %t73
  ; r64 := (bv_add r59 (0x18 : bv 64))
  %t75 = add i64 %t70, 24
  ; write r64 r63
  %t76 = inttoptr i64 %t75 to i32*
  store i32 %t74, i32* %t76
  ; r65 := (bv_add r57 (0x1 : bv 64))
  %t77 = add i64 %t68, 1
  ; r66 := (read r65 (bv 8))
  %t78 = inttoptr i64 %t77 to i8*
  %t79 = load i8, i8* %t78
  ; r67 := (eq r66 (0x0 : bv 8))
  %t80 = icmp eq i8 %t79, 0
  br i1 %t80, label %block_0_40ee51, label %block_0_40ee2d
block_0_40ee2d:
  %t81 = phi i64 [ %t70, %block_0_40ee22 ]
  %t82 = phi i512 [ %t71, %block_0_40ee22 ]
  ; r70 := (bv_add r68 (0x10 : bv 64))
  %t83 = add i64 %t81, 16
  ; r71 := (read r70 (bv 64))
  %t84 = inttoptr i64 %t83 to i64*
  %t85 = load i64, i64* %t84
  ; r72 := (bv_add r71 (0x1 : bv 64))
  %t86 = add i64 %t85, 1
  ; write r70 r72
  %t87 = inttoptr i64 %t83 to i64*
  store i64 %t86, i64* %t87
  ; r73 := (bv_add r68 (0x1c : bv 64))
  %t88 = add i64 %t81, 28
  ; r74 := (read r73 (bv 32))
  %t89 = inttoptr i64 %t88 to i32*
  %t90 = load i32, i32* %t89
  ; r75 := (bv_add r74 (0x1 : bv 32))
  %t91 = add i32 %t90, 1
  ; write r73 r75
  %t92 = inttoptr i64 %t88 to i32*
  store i32 %t91, i32* %t92
  ; r76 := (read r70 (bv 64))
  %t93 = inttoptr i64 %t83 to i64*
  %t94 = load i64, i64* %t93
  ; r77 := (read r76 (bv 8))
  %t95 = inttoptr i64 %t94 to i8*
  %t96 = load i8, i8* %t95
  ; r78 := (uext r77 64)
  %t97 = zext i8 %t96 to i64
  ; r79 := (eq r77 (0x7f : bv 8))
  %t98 = icmp eq i8 %t96, 127
  br i1 %t98, label %block_0_40ee42, label %block_0_40ee18
block_0_40ee42:
  %t99 = phi i64 [ %t43, %block_0_40ee10 ], [ %t51, %block_0_40ee18 ], [ %t81, %block_0_40ee2d ]
  %t100 = phi i512 [ %t44, %block_0_40ee10 ], [ %t52, %block_0_40ee18 ], [ %t82, %block_0_40ee2d ]
  ; r82 := (bv_add r80 (0x1c : bv 64))
  %t101 = add i64 %t99, 28
  ; r83 := (read r82 (bv 32))
  %t102 = inttoptr i64 %t101 to i32*
  %t103 = load i32, i32* %t102
  ; r84 := (bv_add r80 (0x20 : bv 64))
  %t104 = add i64 %t99, 32
  ; r85 := (read r84 (bv 32))
  %t105 = inttoptr i64 %t104 to i32*
  %t106 = load i32, i32* %t105
  ; r86 := (bv_add r83 r85)
  %t107 = add i32 %t103, %t106
  ; r87 := (bv_add r80 (0x8 : bv 64))
  %t108 = add i64 %t99, 8
  ; r88 := (read r87 (bv 32))
  %t109 = inttoptr i64 %t108 to i32*
  %t110 = load i32, i32* %t109
  ; r89 := (sext r88 64)
  %t111 = sext i32 %t110 to i64
  ; r90 := (sext r86 64)
  %t112 = sext i32 %t107 to i64
  ; r91 := (bv_mul r89 r90)
  %t113 = mul i64 %t111, %t112
  ; r92 := (trunc r91 32)
  %t114 = trunc i64 %t113 to i32
  ; r93 := (uext r92 64)
  %t115 = zext i32 %t114 to i64
  ; r94 := (bitcast r81 (vec 8 double))
  %t116 = bitcast i512 %t100 to <8 x double>
  ; r95 := (tuple r93 r94)
  %t117 = insertvalue { i64, <8 x double> } undef, i64 %t115, 0
  %t118 = insertvalue { i64, <8 x double> } %t117, <8 x double> %t116, 1
  ret { i64, <8 x double> } %t118
block_0_40ee51:
  %t119 = phi i64 [ %t68, %block_0_40ee22 ]
  %t120 = phi i64 [ %t70, %block_0_40ee22 ]
  %t121 = phi i512 [ %t71, %block_0_40ee22 ]
  ; r99 := (bv_add r97 (0x20 : bv 64))
  %t122 = add i64 %t120, 32
  ; r100 := (read r99 (bv 32))
  %t123 = inttoptr i64 %t122 to i32*
  %t124 = load i32, i32* %t123
  ; r101 := (bv_add r100 (0x1 : bv 32))
  %t125 = add i32 %t124, 1
  ; write r99 r101
  %t126 = inttoptr i64 %t122 to i32*
  store i32 %t125, i32* %t126
  br label %block_0_40ee10
}
define void @__ultoa(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_40ee60:
  ; r0 := (trunc arg2 32)
  %t0 = trunc i64 %arg2 to i32
  ; r1 := (eq r0 (0xa : bv 32))
  %t1 = icmp eq i32 %t0, 10
  ; r2 := (bitcast arg6 (bv 512))
  %t2 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg7 (bv 512))
  %t3 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t5 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t6 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t7 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t8 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t9 = bitcast <8 x double> %arg13 to i512
  br i1 %t1, label %block_0_40eed6, label %block_0_40ee69
block_0_40ee69:
  %t10 = phi i64 [ %arg3, %block_0_40ee60 ]
  %t11 = phi i64 [ %arg2, %block_0_40ee60 ]
  %t12 = phi i64 [ %arg1, %block_0_40ee60 ]
  %t13 = phi i64 [ %arg0, %block_0_40ee60 ]
  %t14 = phi i64 [ %arg4, %block_0_40ee60 ]
  %t15 = phi i64 [ %arg5, %block_0_40ee60 ]
  %t16 = phi i512 [ %t2, %block_0_40ee60 ]
  %t17 = phi i512 [ %t3, %block_0_40ee60 ]
  %t18 = phi i512 [ %t4, %block_0_40ee60 ]
  %t19 = phi i512 [ %t5, %block_0_40ee60 ]
  %t20 = phi i512 [ %t6, %block_0_40ee60 ]
  %t21 = phi i512 [ %t7, %block_0_40ee60 ]
  %t22 = phi i512 [ %t8, %block_0_40ee60 ]
  %t23 = phi i512 [ %t9, %block_0_40ee60 ]
  ; r24 := (trunc r11 32)
  %t24 = trunc i64 %t11 to i32
  ; r25 := (eq r24 (0x10 : bv 32))
  %t25 = icmp eq i32 %t24, 16
  br i1 %t25, label %block_0_40eeb0, label %block_0_40ee6e
block_0_40ee6e:
  %t26 = phi i64 [ %t10, %block_0_40ee69 ]
  %t27 = phi i64 [ %t11, %block_0_40ee69 ]
  %t28 = phi i64 [ %t12, %block_0_40ee69 ]
  %t29 = phi i64 [ %t13, %block_0_40ee69 ]
  %t30 = phi i64 [ %t14, %block_0_40ee69 ]
  %t31 = phi i64 [ %t15, %block_0_40ee69 ]
  %t32 = phi i512 [ %t16, %block_0_40ee69 ]
  %t33 = phi i512 [ %t17, %block_0_40ee69 ]
  %t34 = phi i512 [ %t18, %block_0_40ee69 ]
  %t35 = phi i512 [ %t19, %block_0_40ee69 ]
  %t36 = phi i512 [ %t20, %block_0_40ee69 ]
  %t37 = phi i512 [ %t21, %block_0_40ee69 ]
  %t38 = phi i512 [ %t22, %block_0_40ee69 ]
  %t39 = phi i512 [ %t23, %block_0_40ee69 ]
  ; r40 := (trunc r27 32)
  %t40 = trunc i64 %t27 to i32
  ; r41 := (eq r40 (0x8 : bv 32))
  %t41 = icmp eq i32 %t40, 8
  br i1 %t41, label %block_0_40ee78, label %block_0_40ee73
block_0_40ee73:
  %t42 = phi i64 [ %t26, %block_0_40ee6e ]
  %t43 = phi i64 [ %t27, %block_0_40ee6e ]
  %t44 = phi i64 [ %t28, %block_0_40ee6e ]
  %t45 = phi i64 [ %t29, %block_0_40ee6e ]
  %t46 = phi i64 [ %t30, %block_0_40ee6e ]
  %t47 = phi i64 [ %t31, %block_0_40ee6e ]
  %t48 = phi i512 [ %t32, %block_0_40ee6e ]
  %t49 = phi i512 [ %t33, %block_0_40ee6e ]
  %t50 = phi i512 [ %t34, %block_0_40ee6e ]
  %t51 = phi i512 [ %t35, %block_0_40ee6e ]
  %t52 = phi i512 [ %t36, %block_0_40ee6e ]
  %t53 = phi i512 [ %t37, %block_0_40ee6e ]
  %t54 = phi i512 [ %t38, %block_0_40ee6e ]
  %t55 = phi i512 [ %t39, %block_0_40ee6e ]
  ; r56 := (bitcast r48 (vec 8 double))
  %t56 = bitcast i512 %t48 to <8 x double>
  ; r57 := (bitcast r49 (vec 8 double))
  %t57 = bitcast i512 %t49 to <8 x double>
  ; r58 := (bitcast r50 (vec 8 double))
  %t58 = bitcast i512 %t50 to <8 x double>
  ; r59 := (bitcast r51 (vec 8 double))
  %t59 = bitcast i512 %t51 to <8 x double>
  ; r60 := (bitcast r52 (vec 8 double))
  %t60 = bitcast i512 %t52 to <8 x double>
  ; r61 := (bitcast r53 (vec 8 double))
  %t61 = bitcast i512 %t53 to <8 x double>
  ; r62 := (bitcast r54 (vec 8 double))
  %t62 = bitcast i512 %t54 to <8 x double>
  ; r63 := (bitcast r55 (vec 8 double))
  %t63 = bitcast i512 %t55 to <8 x double>
  ; r64 := call abort(r45, r44, r43, r42, r46, r47, r56, r57, r58, r59, r60, r61, r62, r63)
  %t64 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @abort(i64 %t45, i64 %t44, i64 %t43, i64 %t42, i64 %t46, i64 %t47, <8 x double> %t56, <8 x double> %t57, <8 x double> %t58, <8 x double> %t59, <8 x double> %t60, <8 x double> %t61, <8 x double> %t62, <8 x double> %t63)
  ; r65 := (tuple_field r64 0)
  %t65 = extractvalue { i64, i64, <8 x double> } %t64, 0
  ; r66 := (tuple_field r64 1)
  %t66 = extractvalue { i64, i64, <8 x double> } %t64, 1
  ; r67 := (tuple_field r64 2)
  %t67 = extractvalue { i64, i64, <8 x double> } %t64, 2
  ; r68 := (bitcast r67 (bv 512))
  %t68 = bitcast <8 x double> %t67 to i512
  br label %block_0_40ee78
block_0_40ee78:
  %t69 = phi i64 [ %t26, %block_0_40ee6e ], [ %t42, %block_0_40ee73 ]
  %t70 = phi i64 [ %t28, %block_0_40ee6e ], [ %t44, %block_0_40ee73 ]
  %t71 = phi i64 [ %t29, %block_0_40ee6e ], [ %t45, %block_0_40ee73 ]
  br label %block_0_40ee80
block_0_40ee80:
  %t72 = phi i64 [ %t69, %block_0_40ee78 ], [ %t72, %block_0_40ee80 ]
  %t73 = phi i64 [ %t71, %block_0_40ee78 ], [ %t76, %block_0_40ee80 ]
  %t74 = phi i64 [ %t70, %block_0_40ee78 ], [ %t78, %block_0_40ee80 ]
  ; r75 := (trunc r73 32)
  %t75 = trunc i64 %t73 to i32
  ; r76 := (bv_shr r73 (0x3 : bv 64))
  %t76 = lshr i64 %t73, 3
  ; r77 := (eq r76 (0x0 : bv 64))
  %t77 = icmp eq i64 %t76, 0
  ; r78 := (bv_add r74 (0xffffffffffffffff : bv 64))
  %t78 = add i64 %t74, 18446744073709551615
  ; r79 := (bv_and r75 (0x7 : bv 32))
  %t79 = and i32 %t75, 7
  ; r80 := (bv_add r79 (0x30 : bv 32))
  %t80 = add i32 %t79, 48
  ; r81 := (trunc r80 8)
  %t81 = trunc i32 %t80 to i8
  ; r82 := (uext r80 64)
  %t82 = zext i32 %t80 to i64
  ; write r78 r81
  %t83 = inttoptr i64 %t78 to i8*
  store i8 %t81, i8* %t83
  br i1 %t77, label %block_0_40ee98, label %block_0_40ee80
block_0_40ee98:
  %t84 = phi i64 [ %t82, %block_0_40ee80 ]
  %t85 = phi i64 [ %t72, %block_0_40ee80 ]
  %t86 = phi i64 [ %t78, %block_0_40ee80 ]
  ; r86 := (trunc r84 32)
  %t87 = trunc i64 %t85 to i32
  ; r87 := (eq r86 (0x0 : bv 32))
  %t88 = icmp eq i32 %t87, 0
  br i1 %t88, label %block_0_40eea8, label %block_0_40ee9c
block_0_40ee9c:
  %t89 = phi i64 [ %t84, %block_0_40ee98 ]
  %t90 = phi i64 [ %t86, %block_0_40ee98 ]
  ; r90 := (trunc r88 8)
  %t91 = trunc i64 %t89 to i8
  ; r91 := (eq r90 (0x30 : bv 8))
  %t92 = icmp eq i8 %t91, 48
  br i1 %t92, label %block_0_40eea8, label %block_0_40eea0
block_0_40eea0:
  %t93 = phi i64 [ %t90, %block_0_40ee9c ]
  ; r93 := (bv_add r92 (0xffffffffffffffff : bv 64))
  %t94 = add i64 %t93, 18446744073709551615
  ; write r93 (0x30 : bv 8)
  %t95 = inttoptr i64 %t94 to i8*
  store i8 48, i8* %t95
  br label %block_0_40eea8
block_0_40eea8:
  ret void
block_0_40eeb0:
  %t96 = phi i64 [ %t12, %block_0_40ee69 ]
  %t97 = phi i64 [ %t13, %block_0_40ee69 ]
  %t98 = phi i64 [ %t14, %block_0_40ee69 ]
  br label %block_0_40eeb3
block_0_40eeb3:
  %t99 = phi i64 [ %t97, %block_0_40eeb0 ], [ %t102, %block_0_40eeb3 ]
  %t100 = phi i64 [ %t98, %block_0_40eeb0 ], [ %t100, %block_0_40eeb3 ]
  %t101 = phi i64 [ %t96, %block_0_40eeb0 ], [ %t104, %block_0_40eeb3 ]
  ; r100 := (bv_shr r97 (0x4 : bv 64))
  %t102 = lshr i64 %t99, 4
  ; r101 := (eq r100 (0x0 : bv 64))
  %t103 = icmp eq i64 %t102, 0
  ; r102 := (bv_add r99 (0xffffffffffffffff : bv 64))
  %t104 = add i64 %t101, 18446744073709551615
  ; r103 := (trunc r97 32)
  %t105 = trunc i64 %t99 to i32
  ; r104 := (bv_and r103 (0xf : bv 32))
  %t106 = and i32 %t105, 15
  ; r105 := (uext r104 64)
  %t107 = zext i32 %t106 to i64
  ; r106 := (bv_add r105 r98)
  %t108 = add i64 %t107, %t100
  ; r107 := (read r106 (bv 8))
  %t109 = inttoptr i64 %t108 to i8*
  %t110 = load i8, i8* %t109
  ; write r102 r107
  %t111 = inttoptr i64 %t104 to i8*
  store i8 %t110, i8* %t111
  br i1 %t103, label %block_0_40eece, label %block_0_40eeb3
block_0_40eece:
  ret void
block_0_40eed6:
  %t112 = phi i64 [ %arg1, %block_0_40ee60 ]
  %t113 = phi i64 [ %arg0, %block_0_40ee60 ]
  ; r110 := (bv_ult r109 (0x9 : bv 64))
  %t114 = icmp ult i64 %t113, 9
  ; r111 := (eq r109 (0x9 : bv 64))
  %t115 = icmp eq i64 %t113, 9
  ; r112 := (or r110 r111)
  %t116 = or i1 %t114, %t115
  br i1 %t116, label %block_0_40ef29, label %block_0_40eedc
block_0_40eedc:
  %t117 = phi i64 [ %t112, %block_0_40eed6 ]
  %t118 = phi i64 [ %t113, %block_0_40eed6 ]
  ; r115 := (bv_slt r114 (0x0 : bv 64))
  %t119 = icmp slt i64 %t118, 0
  br i1 %t119, label %block_0_40ef3b, label %block_0_40eee7
block_0_40eee7:
  %t120 = phi i64 [ %t118, %block_0_40eedc ], [ %t155, %block_0_40ef3b ]
  %t121 = phi i64 [ %t117, %block_0_40eedc ], [ %t150, %block_0_40ef3b ]
  br label %block_0_40eef1
block_0_40eef1:
  %t122 = phi i64 [ %t120, %block_0_40eee7 ], [ %t133, %block_0_40eef1 ]
  %t123 = phi i64 [ 7378697629483820647, %block_0_40eee7 ], [ %t123, %block_0_40eef1 ]
  %t124 = phi i64 [ %t121, %block_0_40eee7 ], [ %t125, %block_0_40eef1 ]
  ; r121 := (bv_add r120 (0xffffffffffffffff : bv 64))
  %t125 = add i64 %t124, 18446744073709551615
  ; r122 := (sext r118 128)
  %t126 = sext i64 %t122 to i128
  ; r123 := (sext r119 128)
  %t127 = sext i64 %t123 to i128
  ; r124 := (bv_mul r122 r123)
  %t128 = mul i128 %t126, %t127
  ; r125 := (bv_shr r124 (0x40 : bv 128))
  %t129 = lshr i128 %t128, 64
  ; r126 := (trunc r125 64)
  %t130 = trunc i128 %t129 to i64
  ; r127 := (bv_sar r118 (0x3f : bv 64))
  %t131 = ashr i64 %t122, 63
  ; r128 := (bv_sar r126 (0x2 : bv 64))
  %t132 = ashr i64 %t130, 2
  ; r129 := (bv_sub r128 r127)
  %t133 = sub i64 %t132, %t131
  ; r130 := (eq r128 r127)
  %t134 = icmp eq i64 %t132, %t131
  ; r131 := (bv_mul (0x4 : bv 64) r129)
  %t135 = mul i64 4, %t133
  ; r132 := (bv_add r129 r131)
  %t136 = add i64 %t133, %t135
  ; r133 := (bv_add r132 r132)
  %t137 = add i64 %t136, %t136
  ; r134 := (bv_sub r118 r133)
  %t138 = sub i64 %t122, %t137
  ; r135 := (bv_add r134 (0x30 : bv 64))
  %t139 = add i64 %t138, 48
  ; r136 := (trunc r135 8)
  %t140 = trunc i64 %t139 to i8
  ; write r121 r136
  %t141 = inttoptr i64 %t125 to i8*
  store i8 %t140, i8* %t141
  br i1 %t134, label %block_0_40ef21, label %block_0_40eef1
block_0_40ef21:
  ret void
block_0_40ef29:
  %t142 = phi i64 [ %t112, %block_0_40eed6 ]
  %t143 = phi i64 [ %t113, %block_0_40eed6 ]
  ; r139 := (bv_add r138 (0x30 : bv 64))
  %t144 = add i64 %t143, 48
  ; r140 := (bv_add r137 (0xffffffffffffffff : bv 64))
  %t145 = add i64 %t142, 18446744073709551615
  ; r141 := (trunc r139 8)
  %t146 = trunc i64 %t144 to i8
  ; write r140 r141
  %t147 = inttoptr i64 %t145 to i8*
  store i8 %t146, i8* %t147
  ret void
block_0_40ef3b:
  %t148 = phi i64 [ %t118, %block_0_40eedc ]
  %t149 = phi i64 [ %t117, %block_0_40eedc ]
  ; r144 := (bv_add r143 (0xffffffffffffffff : bv 64))
  %t150 = add i64 %t149, 18446744073709551615
  ; r145 := (uext r142 128)
  %t151 = zext i64 %t148 to i128
  ; r146 := (bv_mul r145 (0xcccccccccccccccd : bv 128))
  %t152 = mul i128 %t151, 14757395258967641293
  ; r147 := (bv_shr r146 (0x40 : bv 128))
  %t153 = lshr i128 %t152, 64
  ; r148 := (trunc r147 64)
  %t154 = trunc i128 %t153 to i64
  ; r149 := (bv_shr r148 (0x3 : bv 64))
  %t155 = lshr i64 %t154, 3
  ; r150 := (bv_mul (0x4 : bv 64) r149)
  %t156 = mul i64 4, %t155
  ; r151 := (bv_add r149 r150)
  %t157 = add i64 %t155, %t156
  ; r152 := (bv_add r151 r151)
  %t158 = add i64 %t157, %t157
  ; r153 := (bv_sub r142 r152)
  %t159 = sub i64 %t148, %t158
  ; r154 := (bv_add r153 (0x30 : bv 64))
  %t160 = add i64 %t159, 48
  ; r155 := (trunc r154 8)
  %t161 = trunc i64 %t160 to i8
  ; write r144 r155
  %t162 = inttoptr i64 %t150 to i8*
  store i8 %t161, i8* %t162
  br label %block_0_40eee7
}
define { i64, i64, <8 x double> } @vfprintf(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_412660:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  ; r11 := (bitcast arg6 (bv 512))
  %t12 = bitcast <8 x double> %arg6 to i512
  ; r12 := (bitcast arg7 (bv 512))
  %t13 = bitcast <8 x double> %arg7 to i512
  ; r13 := (bitcast arg8 (bv 512))
  %t14 = bitcast <8 x double> %arg8 to i512
  ; r14 := (bitcast arg9 (bv 512))
  %t15 = bitcast <8 x double> %arg9 to i512
  ; r15 := (bitcast arg10 (bv 512))
  %t16 = bitcast <8 x double> %arg10 to i512
  ; r16 := (bitcast arg11 (bv 512))
  %t17 = bitcast <8 x double> %arg11 to i512
  ; r17 := (bitcast arg12 (bv 512))
  %t18 = bitcast <8 x double> %arg12 to i512
  ; r18 := (bitcast arg13 (bv 512))
  %t19 = bitcast <8 x double> %arg13 to i512
  br i1 %t3, label %block_0_412686, label %block_0_4126f0
block_0_412686:
  %t20 = phi i64 [ %arg3, %block_0_412660 ], [ %t226, %block_0_4126f5 ]
  %t21 = phi i64 [ %arg0, %block_0_412660 ], [ %t227, %block_0_4126f5 ]
  %t22 = phi i64 [ %arg2, %block_0_412660 ], [ %t228, %block_0_4126f5 ]
  %t23 = phi i64 [ %arg1, %block_0_412660 ], [ %t229, %block_0_4126f5 ]
  %t24 = phi i64 [ %arg4, %block_0_412660 ], [ %t230, %block_0_4126f5 ]
  %t25 = phi i64 [ %arg5, %block_0_412660 ], [ %t231, %block_0_4126f5 ]
  %t26 = phi i64 [ %arg1, %block_0_412660 ], [ %t232, %block_0_4126f5 ]
  %t27 = phi i512 [ %t4, %block_0_412660 ], [ %t233, %block_0_4126f5 ]
  %t28 = phi i512 [ %t5, %block_0_412660 ], [ %t234, %block_0_4126f5 ]
  %t29 = phi i512 [ %t6, %block_0_412660 ], [ %t235, %block_0_4126f5 ]
  %t30 = phi i512 [ %t7, %block_0_412660 ], [ %t236, %block_0_4126f5 ]
  %t31 = phi i512 [ %t8, %block_0_412660 ], [ %t237, %block_0_4126f5 ]
  %t32 = phi i512 [ %t9, %block_0_412660 ], [ %t238, %block_0_4126f5 ]
  %t33 = phi i512 [ %t10, %block_0_412660 ], [ %t239, %block_0_4126f5 ]
  %t34 = phi i512 [ %t11, %block_0_412660 ], [ %t240, %block_0_4126f5 ]
  ; r34 := (bv_add r20 (0x10 : bv 64))
  %t35 = add i64 %t21, 16
  ; r35 := (read r34 (bv 16))
  %t36 = inttoptr i64 %t35 to i16*
  %t37 = load i16, i16* %t36
  ; r36 := (sext r35 32)
  %t38 = sext i16 %t37 to i32
  ; r37 := (bv_and r36 (0x1a : bv 32))
  %t39 = and i32 %t38, 26
  ; r38 := (eq r37 (0xa : bv 32))
  %t40 = icmp eq i32 %t39, 10
  br i1 %t40, label %block_0_4126d0, label %block_0_412692
block_0_412692:
  %t41 = phi i64 [ %t20, %block_0_412686 ], [ %t141, %block_0_4126d0 ]
  %t42 = phi i64 [ %t21, %block_0_412686 ], [ %t142, %block_0_4126d0 ]
  %t43 = phi i64 [ %t22, %block_0_412686 ], [ %t143, %block_0_4126d0 ]
  %t44 = phi i64 [ %t23, %block_0_412686 ], [ %t144, %block_0_4126d0 ]
  %t45 = phi i64 [ %t24, %block_0_412686 ], [ %t145, %block_0_4126d0 ]
  %t46 = phi i64 [ %t25, %block_0_412686 ], [ %t146, %block_0_4126d0 ]
  %t47 = phi i64 [ %t26, %block_0_412686 ], [ %t147, %block_0_4126d0 ]
  %t48 = phi i512 [ %t27, %block_0_412686 ], [ %t148, %block_0_4126d0 ]
  %t49 = phi i512 [ %t28, %block_0_412686 ], [ %t149, %block_0_4126d0 ]
  %t50 = phi i512 [ %t29, %block_0_412686 ], [ %t150, %block_0_4126d0 ]
  %t51 = phi i512 [ %t30, %block_0_412686 ], [ %t151, %block_0_4126d0 ]
  %t52 = phi i512 [ %t31, %block_0_412686 ], [ %t152, %block_0_4126d0 ]
  %t53 = phi i512 [ %t32, %block_0_412686 ], [ %t153, %block_0_4126d0 ]
  %t54 = phi i512 [ %t33, %block_0_412686 ], [ %t154, %block_0_4126d0 ]
  %t55 = phi i512 [ %t34, %block_0_412686 ], [ %t155, %block_0_4126d0 ]
  ; r54 := (bitcast r46 (vec 8 double))
  %t56 = bitcast i512 %t48 to <8 x double>
  ; r55 := (bitcast r47 (vec 8 double))
  %t57 = bitcast i512 %t49 to <8 x double>
  ; r56 := (bitcast r48 (vec 8 double))
  %t58 = bitcast i512 %t50 to <8 x double>
  ; r57 := (bitcast r49 (vec 8 double))
  %t59 = bitcast i512 %t51 to <8 x double>
  ; r58 := (bitcast r50 (vec 8 double))
  %t60 = bitcast i512 %t52 to <8 x double>
  ; r59 := (bitcast r51 (vec 8 double))
  %t61 = bitcast i512 %t53 to <8 x double>
  ; r60 := (bitcast r52 (vec 8 double))
  %t62 = bitcast i512 %t54 to <8 x double>
  ; r61 := (bitcast r53 (vec 8 double))
  %t63 = bitcast i512 %t55 to <8 x double>
  ; r62 := call __vfprintf(r40, r45, r41, r39, r43, r44, r54, r55, r56, r57, r58, r59, r60, r61)
  %t64 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__vfprintf(i64 %t42, i64 %t47, i64 %t43, i64 %t41, i64 %t45, i64 %t46, <8 x double> %t56, <8 x double> %t57, <8 x double> %t58, <8 x double> %t59, <8 x double> %t60, <8 x double> %t61, <8 x double> %t62, <8 x double> %t63)
  ; r63 := (tuple_field r62 0)
  %t65 = extractvalue { i64, i64, <8 x double> } %t64, 0
  ; r64 := (tuple_field r62 1)
  %t66 = extractvalue { i64, i64, <8 x double> } %t64, 1
  ; r65 := (tuple_field r62 2)
  %t67 = extractvalue { i64, i64, <8 x double> } %t64, 2
  ; r66 := (bitcast r65 (bv 512))
  %t68 = bitcast <8 x double> %t67 to i512
  br label %block_0_4126a0
block_0_4126a0:
  %t69 = phi i64 [ %t65, %block_0_412692 ]
  %t70 = phi i64 [ %t41, %block_0_412692 ]
  %t71 = phi i64 [ %t66, %block_0_412692 ]
  %t72 = phi i64 [ %t42, %block_0_412692 ]
  %t73 = phi i64 [ %t44, %block_0_412692 ]
  %t74 = phi i64 [ %t45, %block_0_412692 ]
  %t75 = phi i64 [ %t46, %block_0_412692 ]
  %t76 = phi i512 [ %t68, %block_0_412692 ]
  %t77 = phi i512 [ %t49, %block_0_412692 ]
  %t78 = phi i512 [ %t50, %block_0_412692 ]
  %t79 = phi i512 [ %t51, %block_0_412692 ]
  %t80 = phi i512 [ %t52, %block_0_412692 ]
  %t81 = phi i512 [ %t53, %block_0_412692 ]
  %t82 = phi i512 [ %t54, %block_0_412692 ]
  %t83 = phi i512 [ %t55, %block_0_412692 ]
  ; r82 := (trunc r67 32)
  %t84 = trunc i64 %t69 to i32
  ; r83 := (uext r82 64)
  %t85 = zext i32 %t84 to i64
  br label %block_0_4126a2
block_0_4126a2:
  %t86 = phi i64 [ %t70, %block_0_4126a0 ], [ %t182, %block_0_4126e5 ]
  %t87 = phi i64 [ %t71, %block_0_4126a0 ], [ %t183, %block_0_4126e5 ]
  %t88 = phi i64 [ %t72, %block_0_4126a0 ], [ %t184, %block_0_4126e5 ]
  %t89 = phi i64 [ %t85, %block_0_4126a0 ], [ %t197, %block_0_4126e5 ]
  %t90 = phi i64 [ %t73, %block_0_4126a0 ], [ %t185, %block_0_4126e5 ]
  %t91 = phi i64 [ %t74, %block_0_4126a0 ], [ %t186, %block_0_4126e5 ]
  %t92 = phi i64 [ %t75, %block_0_4126a0 ], [ %t187, %block_0_4126e5 ]
  %t93 = phi i512 [ %t76, %block_0_4126a0 ], [ %t188, %block_0_4126e5 ]
  %t94 = phi i512 [ %t77, %block_0_4126a0 ], [ %t189, %block_0_4126e5 ]
  %t95 = phi i512 [ %t78, %block_0_4126a0 ], [ %t190, %block_0_4126e5 ]
  %t96 = phi i512 [ %t79, %block_0_4126a0 ], [ %t191, %block_0_4126e5 ]
  %t97 = phi i512 [ %t80, %block_0_4126a0 ], [ %t192, %block_0_4126e5 ]
  %t98 = phi i512 [ %t81, %block_0_4126a0 ], [ %t193, %block_0_4126e5 ]
  %t99 = phi i512 [ %t82, %block_0_4126a0 ], [ %t194, %block_0_4126e5 ]
  %t100 = phi i512 [ %t83, %block_0_4126a0 ], [ %t195, %block_0_4126e5 ]
  ; r99 := (read (0x6356e8 : bv 64) (bv 32))
  %t101 = inttoptr i64 6510312 to i32*
  %t102 = load i32, i32* %t101
  ; r100 := (eq r99 (0x0 : bv 32))
  %t103 = icmp eq i32 %t102, 0
  br i1 %t103, label %block_0_4126b4, label %block_0_4126ac
block_0_4126ac:
  %t104 = phi i64 [ %t86, %block_0_4126a2 ]
  %t105 = phi i64 [ %t87, %block_0_4126a2 ]
  %t106 = phi i64 [ %t88, %block_0_4126a2 ]
  %t107 = phi i64 [ %t89, %block_0_4126a2 ]
  %t108 = phi i64 [ %t90, %block_0_4126a2 ]
  %t109 = phi i64 [ %t91, %block_0_4126a2 ]
  %t110 = phi i64 [ %t92, %block_0_4126a2 ]
  %t111 = phi i512 [ %t93, %block_0_4126a2 ]
  %t112 = phi i512 [ %t94, %block_0_4126a2 ]
  %t113 = phi i512 [ %t95, %block_0_4126a2 ]
  %t114 = phi i512 [ %t96, %block_0_4126a2 ]
  %t115 = phi i512 [ %t97, %block_0_4126a2 ]
  %t116 = phi i512 [ %t98, %block_0_4126a2 ]
  %t117 = phi i512 [ %t99, %block_0_4126a2 ]
  %t118 = phi i512 [ %t100, %block_0_4126a2 ]
  ; r116 := (bitcast r108 (vec 8 double))
  %t119 = bitcast i512 %t111 to <8 x double>
  ; r117 := (bitcast r109 (vec 8 double))
  %t120 = bitcast i512 %t112 to <8 x double>
  ; r118 := (bitcast r110 (vec 8 double))
  %t121 = bitcast i512 %t113 to <8 x double>
  ; r119 := (bitcast r111 (vec 8 double))
  %t122 = bitcast i512 %t114 to <8 x double>
  ; r120 := (bitcast r112 (vec 8 double))
  %t123 = bitcast i512 %t115 to <8 x double>
  ; r121 := (bitcast r113 (vec 8 double))
  %t124 = bitcast i512 %t116 to <8 x double>
  ; r122 := (bitcast r114 (vec 8 double))
  %t125 = bitcast i512 %t117 to <8 x double>
  ; r123 := (bitcast r115 (vec 8 double))
  %t126 = bitcast i512 %t118 to <8 x double>
  ; r124 := call funlockfile(r103, r105, r102, r101, r106, r107, r116, r117, r118, r119, r120, r121, r122, r123)
  %t127 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @funlockfile(i64 %t106, i64 %t108, i64 %t105, i64 %t104, i64 %t109, i64 %t110, <8 x double> %t119, <8 x double> %t120, <8 x double> %t121, <8 x double> %t122, <8 x double> %t123, <8 x double> %t124, <8 x double> %t125, <8 x double> %t126)
  ; r125 := (tuple_field r124 0)
  %t128 = extractvalue { i64, i64, <8 x double> } %t127, 0
  ; r126 := (tuple_field r124 1)
  %t129 = extractvalue { i64, i64, <8 x double> } %t127, 1
  ; r127 := (tuple_field r124 2)
  %t130 = extractvalue { i64, i64, <8 x double> } %t127, 2
  ; r128 := (bitcast r127 (bv 512))
  %t131 = bitcast <8 x double> %t130 to i512
  br label %block_0_4126b4
block_0_4126b4:
  %t132 = phi i64 [ %t87, %block_0_4126a2 ], [ %t129, %block_0_4126ac ]
  %t133 = phi i64 [ %t89, %block_0_4126a2 ], [ %t107, %block_0_4126ac ]
  %t134 = phi i512 [ %t93, %block_0_4126a2 ], [ %t131, %block_0_4126ac ]
  ; r132 := (trunc r130 32)
  %t135 = trunc i64 %t133 to i32
  ; r133 := (uext r132 64)
  %t136 = zext i32 %t135 to i64
  ; r134 := (bitcast r131 (vec 8 double))
  %t137 = bitcast i512 %t134 to <8 x double>
  ; r135 := (tuple r133 r129 r134)
  %t138 = insertvalue { i64, i64, <8 x double> } undef, i64 %t136, 0
  %t139 = insertvalue { i64, i64, <8 x double> } %t138, i64 %t132, 1
  %t140 = insertvalue { i64, i64, <8 x double> } %t139, <8 x double> %t137, 2
  ret { i64, i64, <8 x double> } %t140
block_0_4126d0:
  %t141 = phi i64 [ %t20, %block_0_412686 ]
  %t142 = phi i64 [ %t21, %block_0_412686 ]
  %t143 = phi i64 [ %t22, %block_0_412686 ]
  %t144 = phi i64 [ %t23, %block_0_412686 ]
  %t145 = phi i64 [ %t24, %block_0_412686 ]
  %t146 = phi i64 [ %t25, %block_0_412686 ]
  %t147 = phi i64 [ %t26, %block_0_412686 ]
  %t148 = phi i512 [ %t27, %block_0_412686 ]
  %t149 = phi i512 [ %t28, %block_0_412686 ]
  %t150 = phi i512 [ %t29, %block_0_412686 ]
  %t151 = phi i512 [ %t30, %block_0_412686 ]
  %t152 = phi i512 [ %t31, %block_0_412686 ]
  %t153 = phi i512 [ %t32, %block_0_412686 ]
  %t154 = phi i512 [ %t33, %block_0_412686 ]
  %t155 = phi i512 [ %t34, %block_0_412686 ]
  ; r151 := (bv_add r137 (0x12 : bv 64))
  %t156 = add i64 %t142, 18
  ; r152 := (read r151 (bv 16))
  %t157 = inttoptr i64 %t156 to i16*
  %t158 = load i16, i16* %t157
  ; r153 := (bv_slt r152 (0x0 : bv 16))
  %t159 = icmp slt i16 %t158, 0
  br i1 %t159, label %block_0_412692, label %block_0_4126d7
block_0_4126d7:
  %t160 = phi i64 [ %t141, %block_0_4126d0 ]
  %t161 = phi i64 [ %t142, %block_0_4126d0 ]
  %t162 = phi i64 [ %t143, %block_0_4126d0 ]
  %t163 = phi i64 [ %t144, %block_0_4126d0 ]
  %t164 = phi i64 [ %t145, %block_0_4126d0 ]
  %t165 = phi i64 [ %t146, %block_0_4126d0 ]
  %t166 = phi i64 [ %t147, %block_0_4126d0 ]
  %t167 = phi i512 [ %t148, %block_0_4126d0 ]
  %t168 = phi i512 [ %t149, %block_0_4126d0 ]
  %t169 = phi i512 [ %t150, %block_0_4126d0 ]
  %t170 = phi i512 [ %t151, %block_0_4126d0 ]
  %t171 = phi i512 [ %t152, %block_0_4126d0 ]
  %t172 = phi i512 [ %t153, %block_0_4126d0 ]
  %t173 = phi i512 [ %t154, %block_0_4126d0 ]
  %t174 = phi i512 [ %t155, %block_0_4126d0 ]
  ; r169 := (bitcast r161 (vec 8 double))
  %t175 = bitcast i512 %t167 to <8 x double>
  ; r170 := call __sbprintf(r155, r160, r156, r169)
  %t176 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__sbprintf(i64 %t161, i64 %t166, i64 %t162, <8 x double> %t175)
  ; r171 := (tuple_field r170 0)
  %t177 = extractvalue { i64, i64, <8 x double> } %t176, 0
  ; r172 := (tuple_field r170 1)
  %t178 = extractvalue { i64, i64, <8 x double> } %t176, 1
  ; r173 := (tuple_field r170 2)
  %t179 = extractvalue { i64, i64, <8 x double> } %t176, 2
  ; r174 := (bitcast r173 (bv 512))
  %t180 = bitcast <8 x double> %t179 to i512
  br label %block_0_4126e5
block_0_4126e5:
  %t181 = phi i64 [ %t177, %block_0_4126d7 ]
  %t182 = phi i64 [ %t160, %block_0_4126d7 ]
  %t183 = phi i64 [ %t178, %block_0_4126d7 ]
  %t184 = phi i64 [ %t161, %block_0_4126d7 ]
  %t185 = phi i64 [ %t163, %block_0_4126d7 ]
  %t186 = phi i64 [ %t164, %block_0_4126d7 ]
  %t187 = phi i64 [ %t165, %block_0_4126d7 ]
  %t188 = phi i512 [ %t180, %block_0_4126d7 ]
  %t189 = phi i512 [ %t168, %block_0_4126d7 ]
  %t190 = phi i512 [ %t169, %block_0_4126d7 ]
  %t191 = phi i512 [ %t170, %block_0_4126d7 ]
  %t192 = phi i512 [ %t171, %block_0_4126d7 ]
  %t193 = phi i512 [ %t172, %block_0_4126d7 ]
  %t194 = phi i512 [ %t173, %block_0_4126d7 ]
  %t195 = phi i512 [ %t174, %block_0_4126d7 ]
  ; r190 := (trunc r175 32)
  %t196 = trunc i64 %t181 to i32
  ; r191 := (uext r190 64)
  %t197 = zext i32 %t196 to i64
  br label %block_0_4126a2
block_0_4126f0:
  %t198 = phi i64 [ %arg3, %block_0_412660 ]
  %t199 = phi i64 [ %t2, %block_0_412660 ]
  %t200 = phi i64 [ %arg0, %block_0_412660 ]
  %t201 = phi i64 [ %arg2, %block_0_412660 ]
  %t202 = phi i64 [ %arg1, %block_0_412660 ]
  %t203 = phi i64 [ %arg4, %block_0_412660 ]
  %t204 = phi i64 [ %arg5, %block_0_412660 ]
  %t205 = phi i512 [ %t12, %block_0_412660 ]
  %t206 = phi i512 [ %t13, %block_0_412660 ]
  %t207 = phi i512 [ %t14, %block_0_412660 ]
  %t208 = phi i512 [ %t15, %block_0_412660 ]
  %t209 = phi i512 [ %t16, %block_0_412660 ]
  %t210 = phi i512 [ %t17, %block_0_412660 ]
  %t211 = phi i512 [ %t18, %block_0_412660 ]
  %t212 = phi i512 [ %t19, %block_0_412660 ]
  ; r207 := (bitcast r199 (vec 8 double))
  %t213 = bitcast i512 %t205 to <8 x double>
  ; r208 := (bitcast r200 (vec 8 double))
  %t214 = bitcast i512 %t206 to <8 x double>
  ; r209 := (bitcast r201 (vec 8 double))
  %t215 = bitcast i512 %t207 to <8 x double>
  ; r210 := (bitcast r202 (vec 8 double))
  %t216 = bitcast i512 %t208 to <8 x double>
  ; r211 := (bitcast r203 (vec 8 double))
  %t217 = bitcast i512 %t209 to <8 x double>
  ; r212 := (bitcast r204 (vec 8 double))
  %t218 = bitcast i512 %t210 to <8 x double>
  ; r213 := (bitcast r205 (vec 8 double))
  %t219 = bitcast i512 %t211 to <8 x double>
  ; r214 := (bitcast r206 (vec 8 double))
  %t220 = bitcast i512 %t212 to <8 x double>
  ; r215 := call flockfile(r194, r196, r193, r192, r197, r198, r207, r208, r209, r210, r211, r212, r213, r214)
  %t221 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @flockfile(i64 %t200, i64 %t202, i64 %t199, i64 %t198, i64 %t203, i64 %t204, <8 x double> %t213, <8 x double> %t214, <8 x double> %t215, <8 x double> %t216, <8 x double> %t217, <8 x double> %t218, <8 x double> %t219, <8 x double> %t220)
  ; r216 := (tuple_field r215 0)
  %t222 = extractvalue { i64, i64, <8 x double> } %t221, 0
  ; r217 := (tuple_field r215 1)
  %t223 = extractvalue { i64, i64, <8 x double> } %t221, 1
  ; r218 := (tuple_field r215 2)
  %t224 = extractvalue { i64, i64, <8 x double> } %t221, 2
  ; r219 := (bitcast r218 (bv 512))
  %t225 = bitcast <8 x double> %t224 to i512
  br label %block_0_4126f5
block_0_4126f5:
  %t226 = phi i64 [ %t198, %block_0_4126f0 ]
  %t227 = phi i64 [ %t200, %block_0_4126f0 ]
  %t228 = phi i64 [ %t201, %block_0_4126f0 ]
  %t229 = phi i64 [ %t202, %block_0_4126f0 ]
  %t230 = phi i64 [ %t203, %block_0_4126f0 ]
  %t231 = phi i64 [ %t204, %block_0_4126f0 ]
  %t232 = phi i64 [ %t202, %block_0_4126f0 ]
  %t233 = phi i512 [ %t225, %block_0_4126f0 ]
  %t234 = phi i512 [ %t206, %block_0_4126f0 ]
  %t235 = phi i512 [ %t207, %block_0_4126f0 ]
  %t236 = phi i512 [ %t208, %block_0_4126f0 ]
  %t237 = phi i512 [ %t209, %block_0_4126f0 ]
  %t238 = phi i512 [ %t210, %block_0_4126f0 ]
  %t239 = phi i512 [ %t211, %block_0_4126f0 ]
  %t240 = phi i512 [ %t212, %block_0_4126f0 ]
  br label %block_0_412686
}
define void @_none_init(i64 %arg0) {
block_0_413a70:
  ; write (0x6301b0 : bv 64) (0x413ae0 : bv 64)
  %t0 = inttoptr i64 6488496 to i64*
  store i64 4274912, i64* %t0
  ; write (0x6301b8 : bv 64) (0x413ad0 : bv 64)
  %t1 = inttoptr i64 6488504 to i64*
  store i64 4274896, i64* %t1
  ; write (0x6301c0 : bv 64) (0x413c40 : bv 64)
  %t2 = inttoptr i64 6488512 to i64*
  store i64 4275264, i64* %t2
  ; write (0x6301c8 : bv 64) (0x413c00 : bv 64)
  %t3 = inttoptr i64 6488520 to i64*
  store i64 4275200, i64* %t3
  ; write (0x6301d0 : bv 64) (0x413b10 : bv 64)
  %t4 = inttoptr i64 6488528 to i64*
  store i64 4274960, i64* %t4
  ; write (0x631260 : bv 64) arg0
  %t5 = inttoptr i64 6492768 to i64*
  store i64 %arg0, i64* %t5
  ; write (0x6301a8 : bv 64) (0x1 : bv 32)
  %t6 = inttoptr i64 6488488 to i32*
  store i32 1, i32* %t6
  ; write (0x6301ac : bv 64) (0x100 : bv 32)
  %t7 = inttoptr i64 6488492 to i32*
  store i32 256, i32* %t7
  ret void
}
define void @_none_mbsinit() {
block_0_413ad0:
  ret void
}
define void @_none_mbrtowc(i64 %arg0, i64 %arg1, i64 %arg2) {
block_0_413ae0:
  ; r0 := (eq arg1 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg1, 0
  br i1 %t0, label %block_0_413b05, label %block_0_413ae7
block_0_413ae7:
  %t1 = phi i64 [ %arg2, %block_0_413ae0 ]
  %t2 = phi i64 [ %arg1, %block_0_413ae0 ]
  %t3 = phi i64 [ %arg0, %block_0_413ae0 ]
  ; r4 := (eq r1 (0x0 : bv 64))
  %t4 = icmp eq i64 %t1, 0
  br i1 %t4, label %block_0_413b05, label %block_0_413af3
block_0_413af3:
  %t5 = phi i64 [ %t2, %block_0_413ae7 ]
  %t6 = phi i64 [ %t3, %block_0_413ae7 ]
  ; r7 := (eq r6 (0x0 : bv 64))
  %t7 = icmp eq i64 %t6, 0
  br i1 %t7, label %block_0_413afd, label %block_0_413af8
block_0_413af8:
  %t8 = phi i64 [ %t5, %block_0_413af3 ]
  %t9 = phi i64 [ %t6, %block_0_413af3 ]
  ; r10 := (read r8 (bv 8))
  %t10 = inttoptr i64 %t8 to i8*
  %t11 = load i8, i8* %t10
  ; r11 := (uext r10 32)
  %t12 = zext i8 %t11 to i32
  ; write r9 r11
  %t13 = inttoptr i64 %t9 to i32*
  store i32 %t12, i32* %t13
  br label %block_0_413afd
block_0_413afd:
  %t14 = phi i64 [ %t5, %block_0_413af3 ], [ %t8, %block_0_413af8 ]
  ; r13 := (read r12 (bv 8))
  %t15 = inttoptr i64 %t14 to i8*
  %t16 = load i8, i8* %t15
  br label %block_0_413b05
block_0_413b05:
  ret void
}
define void @_none_wcsnrtombs(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_413b10:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg4 (bv 512))
  %t1 = bitcast <8 x double> %arg4 to i512
  ; r2 := (bitcast arg4 (bv 512))
  %t2 = bitcast <8 x double> %arg4 to i512
  br i1 %t0, label %block_0_413ba4, label %block_0_413b1d
block_0_413b1d:
  %t3 = phi i64 [ %arg3, %block_0_413b10 ]
  %t4 = phi i64 [ %arg2, %block_0_413b10 ]
  %t5 = phi i64 [ %arg1, %block_0_413b10 ]
  %t6 = phi i64 [ %arg0, %block_0_413b10 ]
  %t7 = phi i512 [ %t2, %block_0_413b10 ]
  ; r8 := (eq r3 (0x0 : bv 64))
  %t8 = icmp eq i64 %t3, 0
  ; r9 := (read r5 (bv 64))
  %t9 = inttoptr i64 %t5 to i64*
  %t10 = load i64, i64* %t9
  br i1 %t8, label %block_0_413be8, label %block_0_413b29
block_0_413b29:
  %t11 = phi i64 [ %t3, %block_0_413b1d ]
  %t12 = phi i64 [ %t4, %block_0_413b1d ]
  %t13 = phi i64 [ %t5, %block_0_413b1d ]
  %t14 = phi i64 [ %t6, %block_0_413b1d ]
  %t15 = phi i64 [ %t10, %block_0_413b1d ]
  %t16 = phi i512 [ %t7, %block_0_413b1d ]
  ; r16 := (eq r11 (0x0 : bv 64))
  %t17 = icmp eq i64 %t12, 0
  br i1 %t17, label %block_0_413be8, label %block_0_413b32
block_0_413b32:
  %t18 = phi i64 [ %t11, %block_0_413b29 ]
  %t19 = phi i64 [ %t12, %block_0_413b29 ]
  %t20 = phi i64 [ %t13, %block_0_413b29 ]
  %t21 = phi i64 [ %t14, %block_0_413b29 ]
  %t22 = phi i64 [ %t15, %block_0_413b29 ]
  %t23 = phi i512 [ %t16, %block_0_413b29 ]
  ; r23 := (read r21 (bv 32))
  %t24 = inttoptr i64 %t22 to i32*
  %t25 = load i32, i32* %t24
  ; r24 := (uext r23 64)
  %t26 = zext i32 %t25 to i64
  ; r25 := (eq r23 (0xff : bv 32))
  %t27 = icmp eq i32 %t25, 255
  ; r26 := (bv_ule (0xff : bv 32) r23)
  %t28 = icmp ule i32 255, %t25
  ; r27 := (not r25)
  %t29 = icmp eq i1 %t27, 0
  ; r28 := (and r26 r27)
  %t30 = and i1 %t28, %t29
  br i1 %t30, label %block_0_413b7f, label %block_0_413b3c
block_0_413b3c:
  %t31 = phi i64 [ %t26, %block_0_413b32 ]
  %t32 = phi i64 [ %t18, %block_0_413b32 ]
  %t33 = phi i64 [ %t19, %block_0_413b32 ]
  %t34 = phi i64 [ %t20, %block_0_413b32 ]
  %t35 = phi i64 [ %t21, %block_0_413b32 ]
  %t36 = phi i64 [ %t22, %block_0_413b32 ]
  %t37 = phi i512 [ %t23, %block_0_413b32 ]
  ; r36 := (trunc r29 8)
  %t38 = trunc i64 %t31 to i8
  ; r37 := (eq r36 (0x0 : bv 8))
  %t39 = icmp eq i8 %t38, 0
  ; write r33 r36
  %t40 = inttoptr i64 %t35 to i8*
  store i8 %t38, i8* %t40
  br i1 %t39, label %block_0_413b96, label %block_0_413b42
block_0_413b42:
  %t41 = phi i64 [ %t32, %block_0_413b3c ]
  %t42 = phi i64 [ %t33, %block_0_413b3c ]
  %t43 = phi i64 [ %t34, %block_0_413b3c ]
  %t44 = phi i64 [ %t35, %block_0_413b3c ]
  %t45 = phi i64 [ %t36, %block_0_413b3c ]
  %t46 = phi i512 [ %t37, %block_0_413b3c ]
  ; r44 := (bv_add r42 (0x4 : bv 64))
  %t47 = add i64 %t45, 4
  br label %block_0_413b6e
block_0_413b50:
  %t48 = phi i64 [ %t97, %block_0_413b6e ]
  %t49 = phi i64 [ %t91, %block_0_413b6e ]
  %t50 = phi i64 [ %t92, %block_0_413b6e ]
  %t51 = phi i64 [ %t93, %block_0_413b6e ]
  %t52 = phi i64 [ %t94, %block_0_413b6e ]
  %t53 = phi i64 [ %t95, %block_0_413b6e ]
  %t54 = phi i512 [ %t96, %block_0_413b6e ]
  ; r52 := (eq r45 r47)
  %t55 = icmp eq i64 %t48, %t50
  br i1 %t55, label %block_0_413b77, label %block_0_413b55
block_0_413b55:
  %t56 = phi i64 [ %t48, %block_0_413b50 ]
  %t57 = phi i64 [ %t49, %block_0_413b50 ]
  %t58 = phi i64 [ %t50, %block_0_413b50 ]
  %t59 = phi i64 [ %t51, %block_0_413b50 ]
  %t60 = phi i64 [ %t52, %block_0_413b50 ]
  %t61 = phi i64 [ %t53, %block_0_413b50 ]
  %t62 = phi i512 [ %t54, %block_0_413b50 ]
  ; r60 := (read r58 (bv 32))
  %t63 = inttoptr i64 %t61 to i32*
  %t64 = load i32, i32* %t63
  ; r61 := (uext r60 64)
  %t65 = zext i32 %t64 to i64
  ; r62 := (eq r60 (0xff : bv 32))
  %t66 = icmp eq i32 %t64, 255
  ; r63 := (bv_ule (0xff : bv 32) r60)
  %t67 = icmp ule i32 255, %t64
  ; r64 := (not r62)
  %t68 = icmp eq i1 %t66, 0
  ; r65 := (and r63 r64)
  %t69 = and i1 %t67, %t68
  br i1 %t69, label %block_0_413b7f, label %block_0_413b61
block_0_413b61:
  %t70 = phi i64 [ %t56, %block_0_413b55 ]
  %t71 = phi i64 [ %t57, %block_0_413b55 ]
  %t72 = phi i64 [ %t58, %block_0_413b55 ]
  %t73 = phi i64 [ %t59, %block_0_413b55 ]
  %t74 = phi i64 [ %t60, %block_0_413b55 ]
  %t75 = phi i64 [ %t65, %block_0_413b55 ]
  %t76 = phi i64 [ %t61, %block_0_413b55 ]
  %t77 = phi i512 [ %t62, %block_0_413b55 ]
  ; r74 := (trunc r71 8)
  %t78 = trunc i64 %t75 to i8
  ; r75 := (eq r74 (0x0 : bv 8))
  %t79 = icmp eq i8 %t78, 0
  ; r76 := (bv_add r66 r70)
  %t80 = add i64 %t70, %t74
  ; write r76 r74
  %t81 = inttoptr i64 %t80 to i8*
  store i8 %t78, i8* %t81
  br i1 %t79, label %block_0_413b98, label %block_0_413b6a
block_0_413b6a:
  %t82 = phi i64 [ %t70, %block_0_413b61 ]
  %t83 = phi i64 [ %t71, %block_0_413b61 ]
  %t84 = phi i64 [ %t72, %block_0_413b61 ]
  %t85 = phi i64 [ %t73, %block_0_413b61 ]
  %t86 = phi i64 [ %t74, %block_0_413b61 ]
  %t87 = phi i64 [ %t76, %block_0_413b61 ]
  %t88 = phi i512 [ %t77, %block_0_413b61 ]
  ; r84 := (bv_add r82 (0x4 : bv 64))
  %t89 = add i64 %t87, 4
  br label %block_0_413b6e
block_0_413b6e:
  %t90 = phi i64 [ 0, %block_0_413b42 ], [ %t82, %block_0_413b6a ]
  %t91 = phi i64 [ %t41, %block_0_413b42 ], [ %t83, %block_0_413b6a ]
  %t92 = phi i64 [ %t42, %block_0_413b42 ], [ %t84, %block_0_413b6a ]
  %t93 = phi i64 [ %t43, %block_0_413b42 ], [ %t85, %block_0_413b6a ]
  %t94 = phi i64 [ %t44, %block_0_413b42 ], [ %t86, %block_0_413b6a ]
  %t95 = phi i64 [ %t47, %block_0_413b42 ], [ %t89, %block_0_413b6a ]
  %t96 = phi i512 [ %t46, %block_0_413b42 ], [ %t88, %block_0_413b6a ]
  ; r92 := (bv_add r85 (0x1 : bv 64))
  %t97 = add i64 %t90, 1
  ; r93 := (eq r92 r86)
  %t98 = icmp eq i64 %t97, %t91
  br i1 %t98, label %block_0_413b77, label %block_0_413b50
block_0_413b77:
  %t99 = phi i64 [ %t51, %block_0_413b50 ], [ %t93, %block_0_413b6e ], [ %t175, %block_0_413be8 ]
  %t100 = phi i64 [ %t53, %block_0_413b50 ], [ %t95, %block_0_413b6e ], [ %t176, %block_0_413be8 ]
  ; write r94 r95
  %t101 = inttoptr i64 %t99 to i64*
  store i64 %t100, i64* %t101
  br label %block_0_413b7a
block_0_413b7a:
  ret void
block_0_413b7f:
  %t102 = phi i64 [ %t19, %block_0_413b32 ], [ %t58, %block_0_413b55 ], [ %t142, %block_0_413bbd ], [ %t156, %block_0_413bc8 ]
  %t103 = phi i64 [ %t20, %block_0_413b32 ], [ %t59, %block_0_413b55 ], [ %t141, %block_0_413bbd ], [ %t157, %block_0_413bc8 ]
  %t104 = phi i64 [ %t21, %block_0_413b32 ], [ %t60, %block_0_413b55 ], [ %t143, %block_0_413bbd ], [ %t158, %block_0_413bc8 ]
  %t105 = phi i512 [ %t23, %block_0_413b32 ], [ %t62, %block_0_413b55 ], [ %t144, %block_0_413bbd ], [ %t159, %block_0_413bc8 ]
  ; r100 := (bitcast r99 (vec 8 double))
  %t106 = bitcast i512 %t105 to <8 x double>
  ; r101 := call __error_unthreaded(r98, r97, r96, r100)
  %t107 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t104, i64 %t103, i64 %t102, <8 x double> %t106)
  ; r102 := (tuple_field r101 0)
  %t108 = extractvalue { i64, i64, <8 x double> } %t107, 0
  ; r103 := (tuple_field r101 1)
  %t109 = extractvalue { i64, i64, <8 x double> } %t107, 1
  ; r104 := (tuple_field r101 2)
  %t110 = extractvalue { i64, i64, <8 x double> } %t107, 2
  ; r105 := (bitcast r104 (bv 512))
  %t111 = bitcast <8 x double> %t110 to i512
  br label %block_0_413b84
block_0_413b84:
  %t112 = phi i64 [ %t108, %block_0_413b7f ]
  ; write r106 (0x56 : bv 32)
  %t113 = inttoptr i64 %t112 to i32*
  store i32 86, i32* %t113
  ret void
block_0_413b96:
  %t114 = phi i64 [ %t34, %block_0_413b3c ]
  br label %block_0_413b98
block_0_413b98:
  %t115 = phi i64 [ %t73, %block_0_413b61 ], [ %t114, %block_0_413b96 ]
  ; write r108 (0x0 : bv 64)
  %t116 = inttoptr i64 %t115 to i64*
  store i64 0, i64* %t116
  ret void
block_0_413ba4:
  %t117 = phi i64 [ %arg2, %block_0_413b10 ]
  %t118 = phi i64 [ %arg1, %block_0_413b10 ]
  %t119 = phi i64 [ %arg0, %block_0_413b10 ]
  %t120 = phi i512 [ %t1, %block_0_413b10 ]
  ; r113 := (eq r109 (0x0 : bv 64))
  %t121 = icmp eq i64 %t117, 0
  ; r114 := (read r110 (bv 64))
  %t122 = inttoptr i64 %t118 to i64*
  %t123 = load i64, i64* %t122
  br i1 %t121, label %block_0_413bec, label %block_0_413bac
block_0_413bac:
  %t124 = phi i64 [ %t117, %block_0_413ba4 ]
  %t125 = phi i64 [ %t123, %block_0_413ba4 ]
  %t126 = phi i64 [ %t119, %block_0_413ba4 ]
  %t127 = phi i512 [ %t120, %block_0_413ba4 ]
  ; r119 := (read r116 (bv 32))
  %t128 = inttoptr i64 %t125 to i32*
  %t129 = load i32, i32* %t128
  ; r120 := (uext r119 64)
  %t130 = zext i32 %t129 to i64
  ; r121 := (eq r119 (0x0 : bv 32))
  %t131 = icmp eq i32 %t129, 0
  br i1 %t131, label %block_0_413bec, label %block_0_413bb2
block_0_413bb2:
  %t132 = phi i64 [ %t130, %block_0_413bac ]
  %t133 = phi i64 [ %t124, %block_0_413bac ]
  %t134 = phi i64 [ %t125, %block_0_413bac ]
  %t135 = phi i64 [ %t126, %block_0_413bac ]
  %t136 = phi i512 [ %t127, %block_0_413bac ]
  ; r127 := (trunc r122 32)
  %t137 = trunc i64 %t132 to i32
  ; r128 := (bv_ult r127 (0xff : bv 32))
  %t138 = icmp ult i32 %t137, 255
  ; r129 := (eq r127 (0xff : bv 32))
  %t139 = icmp eq i32 %t137, 255
  ; r130 := (or r128 r129)
  %t140 = or i1 %t138, %t139
  br i1 %t140, label %block_0_413bd2, label %block_0_413bbd
block_0_413bbd:
  %t141 = phi i64 [ %t134, %block_0_413bb2 ]
  %t142 = phi i64 [ %t133, %block_0_413bb2 ]
  %t143 = phi i64 [ %t135, %block_0_413bb2 ]
  %t144 = phi i512 [ %t136, %block_0_413bb2 ]
  br label %block_0_413b7f
block_0_413bc2:
  %t145 = phi i64 [ %t172, %block_0_413bd2 ]
  %t146 = phi i64 [ %t173, %block_0_413bd2 ]
  %t147 = phi i64 [ %t169, %block_0_413bd2 ]
  %t148 = phi i64 [ %t170, %block_0_413bd2 ]
  %t149 = phi i512 [ %t171, %block_0_413bd2 ]
  ; r140 := (read r135 (bv 32))
  %t150 = inttoptr i64 %t145 to i32*
  %t151 = load i32, i32* %t150
  ; r141 := (uext r140 64)
  %t152 = zext i32 %t151 to i64
  ; r142 := (eq r140 (0x0 : bv 32))
  %t153 = icmp eq i32 %t151, 0
  br i1 %t153, label %block_0_413bdc, label %block_0_413bc8
block_0_413bc8:
  %t154 = phi i64 [ %t145, %block_0_413bc2 ]
  %t155 = phi i64 [ %t152, %block_0_413bc2 ]
  %t156 = phi i64 [ %t146, %block_0_413bc2 ]
  %t157 = phi i64 [ %t147, %block_0_413bc2 ]
  %t158 = phi i64 [ %t148, %block_0_413bc2 ]
  %t159 = phi i512 [ %t149, %block_0_413bc2 ]
  ; r149 := (trunc r144 32)
  %t160 = trunc i64 %t155 to i32
  ; r150 := (eq r149 (0xff : bv 32))
  %t161 = icmp eq i32 %t160, 255
  ; r151 := (trunc r143 32)
  %t162 = trunc i64 %t154 to i32
  ; r152 := (uext r151 64)
  %t163 = zext i32 %t162 to i64
  ; r153 := (bv_ule (0xff : bv 32) r149)
  %t164 = icmp ule i32 255, %t160
  ; r154 := (not r150)
  %t165 = icmp eq i1 %t161, 0
  ; r155 := (and r153 r154)
  %t166 = and i1 %t164, %t165
  br i1 %t166, label %block_0_413b7f, label %block_0_413bd2
block_0_413bd2:
  %t167 = phi i64 [ %t134, %block_0_413bb2 ], [ %t163, %block_0_413bc8 ]
  %t168 = phi i64 [ %t133, %block_0_413bb2 ], [ %t156, %block_0_413bc8 ]
  %t169 = phi i64 [ %t134, %block_0_413bb2 ], [ %t157, %block_0_413bc8 ]
  %t170 = phi i64 [ %t135, %block_0_413bb2 ], [ %t158, %block_0_413bc8 ]
  %t171 = phi i512 [ %t136, %block_0_413bb2 ], [ %t159, %block_0_413bc8 ]
  ; r161 := (bv_add r156 (0x4 : bv 64))
  %t172 = add i64 %t167, 4
  ; r162 := (bv_add r157 (0xffffffffffffffff : bv 64))
  %t173 = add i64 %t168, 18446744073709551615
  ; r163 := (eq r157 (0x1 : bv 64))
  %t174 = icmp eq i64 %t168, 1
  br i1 %t174, label %block_0_413bdc, label %block_0_413bc2
block_0_413bdc:
  ret void
block_0_413be8:
  %t175 = phi i64 [ %t5, %block_0_413b1d ], [ %t13, %block_0_413b29 ]
  %t176 = phi i64 [ %t10, %block_0_413b1d ], [ %t15, %block_0_413b29 ]
  br label %block_0_413b77
block_0_413bec:
  br label %block_0_413b7a
}
define void @_none_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_413c00:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_413c28, label %block_0_413c0e
block_0_413c0e:
  %t2 = phi i64 [ %arg2, %block_0_413c00 ]
  %t3 = phi i64 [ %arg1, %block_0_413c00 ]
  %t4 = phi i64 [ %arg0, %block_0_413c00 ]
  %t5 = phi i512 [ %t1, %block_0_413c00 ]
  ; r6 := (trunc r3 32)
  %t6 = trunc i64 %t3 to i32
  ; r7 := (bv_ult r6 (0xff : bv 32))
  %t7 = icmp ult i32 %t6, 255
  ; r8 := (eq r6 (0xff : bv 32))
  %t8 = icmp eq i32 %t6, 255
  ; r9 := (or r7 r8)
  %t9 = or i1 %t7, %t8
  br i1 %t9, label %block_0_413c2d, label %block_0_413c16
block_0_413c16:
  %t10 = phi i64 [ %t2, %block_0_413c0e ]
  %t11 = phi i64 [ %t3, %block_0_413c0e ]
  %t12 = phi i64 [ %t4, %block_0_413c0e ]
  %t13 = phi i512 [ %t5, %block_0_413c0e ]
  ; r14 := (bitcast r13 (vec 8 double))
  %t14 = bitcast i512 %t13 to <8 x double>
  ; r15 := call __error_unthreaded(r12, r11, r10, r14)
  %t15 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t12, i64 %t11, i64 %t10, <8 x double> %t14)
  ; r16 := (tuple_field r15 0)
  %t16 = extractvalue { i64, i64, <8 x double> } %t15, 0
  ; r17 := (tuple_field r15 1)
  %t17 = extractvalue { i64, i64, <8 x double> } %t15, 1
  ; r18 := (tuple_field r15 2)
  %t18 = extractvalue { i64, i64, <8 x double> } %t15, 2
  ; r19 := (bitcast r18 (bv 512))
  %t19 = bitcast <8 x double> %t18 to i512
  br label %block_0_413c1b
block_0_413c1b:
  %t20 = phi i64 [ %t16, %block_0_413c16 ]
  ; write r20 (0x56 : bv 32)
  %t21 = inttoptr i64 %t20 to i32*
  store i32 86, i32* %t21
  br label %block_0_413c28
block_0_413c28:
  ret void
block_0_413c2d:
  %t22 = phi i64 [ %t3, %block_0_413c0e ]
  %t23 = phi i64 [ %t4, %block_0_413c0e ]
  ; r23 := (trunc r21 8)
  %t24 = trunc i64 %t22 to i8
  ; write r22 r23
  %t25 = inttoptr i64 %t23 to i8*
  store i8 %t24, i8* %t25
  br label %block_0_413c28
}
define void @_none_mbsnrtowcs(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3) {
block_0_413c40:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  br i1 %t0, label %block_0_413cb9, label %block_0_413c4e
block_0_413c4e:
  %t1 = phi i64 [ %arg3, %block_0_413c40 ]
  %t2 = phi i64 [ %arg2, %block_0_413c40 ]
  %t3 = phi i64 [ %arg1, %block_0_413c40 ]
  %t4 = phi i64 [ %arg0, %block_0_413c40 ]
  ; r5 := (eq r1 (0x0 : bv 64))
  %t5 = icmp eq i64 %t1, 0
  ; r6 := (read r3 (bv 64))
  %t6 = inttoptr i64 %t3 to i64*
  %t7 = load i64, i64* %t6
  br i1 %t5, label %block_0_413cd3, label %block_0_413c56
block_0_413c56:
  %t8 = phi i64 [ %t1, %block_0_413c4e ]
  %t9 = phi i64 [ %t2, %block_0_413c4e ]
  %t10 = phi i64 [ %t3, %block_0_413c4e ]
  %t11 = phi i64 [ %t4, %block_0_413c4e ]
  %t12 = phi i64 [ %t7, %block_0_413c4e ]
  ; r12 := (eq r8 (0x0 : bv 64))
  %t13 = icmp eq i64 %t9, 0
  br i1 %t13, label %block_0_413cd3, label %block_0_413c5b
block_0_413c5b:
  %t14 = phi i64 [ %t8, %block_0_413c56 ]
  %t15 = phi i64 [ %t9, %block_0_413c56 ]
  %t16 = phi i64 [ %t10, %block_0_413c56 ]
  %t17 = phi i64 [ %t11, %block_0_413c56 ]
  %t18 = phi i64 [ %t12, %block_0_413c56 ]
  ; r18 := (read r17 (bv 8))
  %t19 = inttoptr i64 %t18 to i8*
  %t20 = load i8, i8* %t19
  ; r19 := (uext r18 32)
  %t21 = zext i8 %t20 to i32
  ; r20 := (eq r18 (0x0 : bv 8))
  %t22 = icmp eq i8 %t20, 0
  ; write r16 r19
  %t23 = inttoptr i64 %t17 to i32*
  store i32 %t21, i32* %t23
  br i1 %t22, label %block_0_413ca2, label %block_0_413c68
block_0_413c68:
  %t24 = phi i64 [ %t14, %block_0_413c5b ]
  %t25 = phi i64 [ %t15, %block_0_413c5b ]
  %t26 = phi i64 [ %t16, %block_0_413c5b ]
  %t27 = phi i64 [ %t17, %block_0_413c5b ]
  %t28 = phi i64 [ %t18, %block_0_413c5b ]
  ; r26 := (bv_add r25 (0x1 : bv 64))
  %t29 = add i64 %t28, 1
  br label %block_0_413c89
block_0_413c71:
  %t30 = phi i64 [ %t57, %block_0_413c89 ]
  %t31 = phi i64 [ %t58, %block_0_413c89 ]
  %t32 = phi i64 [ %t59, %block_0_413c89 ]
  %t33 = phi i64 [ %t60, %block_0_413c89 ]
  %t34 = phi i64 [ %t61, %block_0_413c89 ]
  %t35 = phi i64 [ %t63, %block_0_413c89 ]
  ; r33 := (eq r32 r28)
  %t36 = icmp eq i64 %t35, %t31
  br i1 %t36, label %block_0_413c92, label %block_0_413c76
block_0_413c76:
  %t37 = phi i64 [ %t30, %block_0_413c71 ]
  %t38 = phi i64 [ %t31, %block_0_413c71 ]
  %t39 = phi i64 [ %t32, %block_0_413c71 ]
  %t40 = phi i64 [ %t33, %block_0_413c71 ]
  %t41 = phi i64 [ %t34, %block_0_413c71 ]
  %t42 = phi i64 [ %t35, %block_0_413c71 ]
  ; r40 := (read r38 (bv 8))
  %t43 = inttoptr i64 %t41 to i8*
  %t44 = load i8, i8* %t43
  ; r41 := (uext r40 32)
  %t45 = zext i8 %t44 to i32
  ; r42 := (eq r40 (0x0 : bv 8))
  %t46 = icmp eq i8 %t44, 0
  ; r43 := (bv_mul (0x4 : bv 64) r39)
  %t47 = mul i64 4, %t42
  ; r44 := (bv_add r37 r43)
  %t48 = add i64 %t40, %t47
  ; write r44 r41
  %t49 = inttoptr i64 %t48 to i32*
  store i32 %t45, i32* %t49
  br i1 %t46, label %block_0_413ca5, label %block_0_413c85
block_0_413c85:
  %t50 = phi i64 [ %t37, %block_0_413c76 ]
  %t51 = phi i64 [ %t38, %block_0_413c76 ]
  %t52 = phi i64 [ %t39, %block_0_413c76 ]
  %t53 = phi i64 [ %t40, %block_0_413c76 ]
  %t54 = phi i64 [ %t41, %block_0_413c76 ]
  %t55 = phi i64 [ %t42, %block_0_413c76 ]
  ; r51 := (bv_add r49 (0x1 : bv 64))
  %t56 = add i64 %t54, 1
  br label %block_0_413c89
block_0_413c89:
  %t57 = phi i64 [ %t24, %block_0_413c68 ], [ %t50, %block_0_413c85 ]
  %t58 = phi i64 [ %t25, %block_0_413c68 ], [ %t51, %block_0_413c85 ]
  %t59 = phi i64 [ %t26, %block_0_413c68 ], [ %t52, %block_0_413c85 ]
  %t60 = phi i64 [ %t27, %block_0_413c68 ], [ %t53, %block_0_413c85 ]
  %t61 = phi i64 [ %t29, %block_0_413c68 ], [ %t56, %block_0_413c85 ]
  %t62 = phi i64 [ 0, %block_0_413c68 ], [ %t55, %block_0_413c85 ]
  ; r58 := (bv_add r57 (0x1 : bv 64))
  %t63 = add i64 %t62, 1
  ; r59 := (eq r58 r52)
  %t64 = icmp eq i64 %t63, %t57
  br i1 %t64, label %block_0_413c92, label %block_0_413c71
block_0_413c92:
  %t65 = phi i64 [ %t32, %block_0_413c71 ], [ %t59, %block_0_413c89 ], [ %t78, %block_0_413cd3 ]
  %t66 = phi i64 [ %t34, %block_0_413c71 ], [ %t61, %block_0_413c89 ], [ %t79, %block_0_413cd3 ]
  ; write r60 r61
  %t67 = inttoptr i64 %t65 to i64*
  store i64 %t66, i64* %t67
  br label %block_0_413c98
block_0_413c98:
  ret void
block_0_413ca2:
  %t68 = phi i64 [ %t16, %block_0_413c5b ]
  br label %block_0_413ca5
block_0_413ca5:
  %t69 = phi i64 [ %t39, %block_0_413c76 ], [ %t68, %block_0_413ca2 ]
  ; write r63 (0x0 : bv 64)
  %t70 = inttoptr i64 %t69 to i64*
  store i64 0, i64* %t70
  ret void
block_0_413cb9:
  %t71 = phi i64 [ %arg2, %block_0_413c40 ]
  %t72 = phi i64 [ %arg1, %block_0_413c40 ]
  ; r66 := (read r65 (bv 64))
  %t73 = inttoptr i64 %t72 to i64*
  %t74 = load i64, i64* %t73
  ; r67 := call memchr(r66, (0x0 : bv 64), r64)
  %t75 = call i64 (i64, i64, i64) @memchr(i64 %t74, i64 0, i64 %t71)
  br label %block_0_413cc6
block_0_413cc6:
  %t76 = phi i64 [ %t75, %block_0_413cb9 ]
  ; r69 := (eq r68 (0x0 : bv 64))
  %t77 = icmp eq i64 %t76, 0
  br i1 %t77, label %block_0_413c98, label %block_0_413ccb
block_0_413ccb:
  br label %block_0_413c98
block_0_413cd3:
  %t78 = phi i64 [ %t3, %block_0_413c4e ], [ %t10, %block_0_413c56 ]
  %t79 = phi i64 [ %t7, %block_0_413c4e ], [ %t12, %block_0_413c56 ]
  br label %block_0_413c92
}
define void @strnlen(i64 %arg0, i64 %arg1) {
block_0_413ce0:
  ; r0 := (eq arg1 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg1, 0
  br i1 %t0, label %block_0_413d04, label %block_0_413ce5
block_0_413ce5:
  %t1 = phi i64 [ %arg1, %block_0_413ce0 ]
  %t2 = phi i64 [ %arg0, %block_0_413ce0 ]
  ; r3 := (read r2 (bv 8))
  %t3 = inttoptr i64 %t2 to i8*
  %t4 = load i8, i8* %t3
  ; r4 := (eq r3 (0x0 : bv 8))
  %t5 = icmp eq i8 %t4, 0
  br i1 %t5, label %block_0_413cec, label %block_0_413cf6
block_0_413cec:
  br label %block_0_413d04
block_0_413cf0:
  %t6 = phi i64 [ %t16, %block_0_413cf6 ]
  %t7 = phi i64 [ %t14, %block_0_413cf6 ]
  %t8 = phi i64 [ %t15, %block_0_413cf6 ]
  ; r8 := (bv_add r5 r7)
  %t9 = add i64 %t6, %t8
  ; r9 := (read r8 (bv 8))
  %t10 = inttoptr i64 %t9 to i8*
  %t11 = load i8, i8* %t10
  ; r10 := (eq r9 (0x0 : bv 8))
  %t12 = icmp eq i8 %t11, 0
  br i1 %t12, label %block_0_413d06, label %block_0_413cf6
block_0_413cf6:
  %t13 = phi i64 [ 0, %block_0_413ce5 ], [ %t6, %block_0_413cf0 ]
  %t14 = phi i64 [ %t1, %block_0_413ce5 ], [ %t7, %block_0_413cf0 ]
  %t15 = phi i64 [ %t2, %block_0_413ce5 ], [ %t8, %block_0_413cf0 ]
  ; r14 := (bv_add r11 (0x1 : bv 64))
  %t16 = add i64 %t13, 1
  ; r15 := (eq r14 r12)
  %t17 = icmp eq i64 %t16, %t14
  br i1 %t17, label %block_0_413d02, label %block_0_413cf0
block_0_413d02:
  ret void
block_0_413d04:
  br label %block_0_413d06
block_0_413d06:
  ret void
}
define { i64, i64, <8 x double> } @__env_warnx(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_413d10:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call getprogname(r1)
  %t2 = call { i64, <8 x double> } (<8 x double>) @getprogname(<8 x double> %t1)
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, <8 x double> } %t2, 1
  ; r5 := (bitcast r4 (bv 512))
  %t5 = bitcast <8 x double> %t4 to i512
  br label %block_0_413d36
block_0_413d36:
  %t6 = phi i64 [ %t3, %block_0_413d10 ]
  %t7 = phi i64 [ %arg0, %block_0_413d10 ]
  %t8 = phi i64 [ %arg2, %block_0_413d10 ]
  %t9 = phi i64 [ %arg1, %block_0_413d10 ]
  %t10 = phi i512 [ %t5, %block_0_413d10 ]
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := call strlen(r6, r11)
  %t12 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t6, <8 x double> %t11)
  ; r13 := (tuple_field r12 0)
  %t13 = extractvalue { i64, i64, <8 x double> } %t12, 0
  ; r14 := (tuple_field r12 1)
  %t14 = extractvalue { i64, i64, <8 x double> } %t12, 1
  ; r15 := (tuple_field r12 2)
  %t15 = extractvalue { i64, i64, <8 x double> } %t12, 2
  ; r16 := (bitcast r15 (bv 512))
  %t16 = bitcast <8 x double> %t15 to i512
  br label %block_0_413d3e
block_0_413d3e:
  %t17 = phi i64 [ %t13, %block_0_413d36 ]
  %t18 = phi i64 [ %t7, %block_0_413d36 ]
  %t19 = phi i64 [ %t8, %block_0_413d36 ]
  %t20 = phi i64 [ %t9, %block_0_413d36 ]
  %t21 = phi i512 [ %t16, %block_0_413d36 ]
  ; r22 := (bitcast r21 (vec 8 double))
  %t22 = bitcast i512 %t21 to <8 x double>
  ; r23 := call getprogname(r22)
  %t23 = call { i64, <8 x double> } (<8 x double>) @getprogname(<8 x double> %t22)
  ; r24 := (tuple_field r23 0)
  %t24 = extractvalue { i64, <8 x double> } %t23, 0
  ; r25 := (tuple_field r23 1)
  %t25 = extractvalue { i64, <8 x double> } %t23, 1
  ; r26 := (bitcast r25 (bv 512))
  %t26 = bitcast <8 x double> %t25 to i512
  br label %block_0_413d46
block_0_413d46:
  %t27 = phi i64 [ %t24, %block_0_413d3e ]
  %t28 = phi i64 [ %t17, %block_0_413d3e ]
  %t29 = phi i64 [ %t18, %block_0_413d3e ]
  %t30 = phi i64 [ %t19, %block_0_413d3e ]
  %t31 = phi i64 [ %t20, %block_0_413d3e ]
  ; r32 := call __sys_write((0x2 : bv 64), r27, r28)
  %t32 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 %t27, i64 %t28)
  ; r33 := (tuple_field r32 0)
  %t33 = extractvalue { i64, i64, <8 x double> } %t32, 0
  ; r34 := (tuple_field r32 1)
  %t34 = extractvalue { i64, i64, <8 x double> } %t32, 1
  ; r35 := (tuple_field r32 2)
  %t35 = extractvalue { i64, i64, <8 x double> } %t32, 2
  ; r36 := (bitcast r35 (bv 512))
  %t36 = bitcast <8 x double> %t35 to i512
  br label %block_0_413d56
block_0_413d56:
  %t37 = phi i64 [ %t29, %block_0_413d46 ]
  %t38 = phi i64 [ %t30, %block_0_413d46 ]
  %t39 = phi i64 [ %t31, %block_0_413d46 ]
  ; r40 := call __sys_write((0x2 : bv 64), (0x428c88 : bv 64), (0x2 : bv 64))
  %t40 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 4361352, i64 2)
  ; r41 := (tuple_field r40 0)
  %t41 = extractvalue { i64, i64, <8 x double> } %t40, 0
  ; r42 := (tuple_field r40 1)
  %t42 = extractvalue { i64, i64, <8 x double> } %t40, 1
  ; r43 := (tuple_field r40 2)
  %t43 = extractvalue { i64, i64, <8 x double> } %t40, 2
  ; r44 := (bitcast r43 (bv 512))
  %t44 = bitcast <8 x double> %t43 to i512
  br label %block_0_413d6a
block_0_413d6a:
  %t45 = phi i64 [ %t37, %block_0_413d56 ]
  %t46 = phi i64 [ %t38, %block_0_413d56 ]
  %t47 = phi i64 [ %t39, %block_0_413d56 ]
  %t48 = phi i512 [ %t44, %block_0_413d56 ]
  ; r49 := (bitcast r48 (vec 8 double))
  %t49 = bitcast i512 %t48 to <8 x double>
  ; r50 := call strlen(r45, r49)
  %t50 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t45, <8 x double> %t49)
  ; r51 := (tuple_field r50 0)
  %t51 = extractvalue { i64, i64, <8 x double> } %t50, 0
  ; r52 := (tuple_field r50 1)
  %t52 = extractvalue { i64, i64, <8 x double> } %t50, 1
  ; r53 := (tuple_field r50 2)
  %t53 = extractvalue { i64, i64, <8 x double> } %t50, 2
  ; r54 := (bitcast r53 (bv 512))
  %t54 = bitcast <8 x double> %t53 to i512
  br label %block_0_413d72
block_0_413d72:
  %t55 = phi i64 [ %t51, %block_0_413d6a ]
  %t56 = phi i64 [ %t45, %block_0_413d6a ]
  %t57 = phi i64 [ %t46, %block_0_413d6a ]
  %t58 = phi i64 [ %t47, %block_0_413d6a ]
  ; r59 := call __sys_write((0x2 : bv 64), r56, r55)
  %t59 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 %t56, i64 %t55)
  ; r60 := (tuple_field r59 0)
  %t60 = extractvalue { i64, i64, <8 x double> } %t59, 0
  ; r61 := (tuple_field r59 1)
  %t61 = extractvalue { i64, i64, <8 x double> } %t59, 1
  ; r62 := (tuple_field r59 2)
  %t62 = extractvalue { i64, i64, <8 x double> } %t59, 2
  ; r63 := (bitcast r62 (bv 512))
  %t63 = bitcast <8 x double> %t62 to i512
  br label %block_0_413d82
block_0_413d82:
  %t64 = phi i64 [ %t57, %block_0_413d72 ]
  %t65 = phi i64 [ %t58, %block_0_413d72 ]
  ; r66 := call __sys_write((0x2 : bv 64), r65, r64)
  %t66 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 %t65, i64 %t64)
  ; r67 := (tuple_field r66 0)
  %t67 = extractvalue { i64, i64, <8 x double> } %t66, 0
  ; r68 := (tuple_field r66 1)
  %t68 = extractvalue { i64, i64, <8 x double> } %t66, 1
  ; r69 := (tuple_field r66 2)
  %t69 = extractvalue { i64, i64, <8 x double> } %t66, 2
  ; r70 := (bitcast r69 (bv 512))
  %t70 = bitcast <8 x double> %t69 to i512
  br label %block_0_413d92
block_0_413d92:
  %t71 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 2, i64 4361355, i64 1)
  ret { i64, i64, <8 x double> } %t71
}
define { i64, i64, <8 x double> } @__rebuild_environ(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_413dc0:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (read (0x63eeb8 : bv 64) (bv 32))
  %t2 = inttoptr i64 6549176 to i32*
  %t3 = load i32, i32* %t2
  ; r3 := (ssbb_overflows r2 r0 false)
  %t4 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t3, i32 %t0)
  %t5 = extractvalue { i32, i1 } %t4, 1
  ; r4 := (bv_sub r2 r0)
  %t6 = sub i32 %t3, %t0
  ; r5 := (bv_slt r4 (0x0 : bv 32))
  %t7 = icmp slt i32 %t6, 0
  ; r6 := (xor r5 r3)
  %t8 = xor i1 %t7, %t5
  ; r7 := (bitcast arg6 (bv 512))
  %t9 = bitcast <8 x double> %arg6 to i512
  ; r8 := (bitcast arg7 (bv 512))
  %t10 = bitcast <8 x double> %arg7 to i512
  ; r9 := (bitcast arg8 (bv 512))
  %t11 = bitcast <8 x double> %arg8 to i512
  ; r10 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r11 := (bitcast arg10 (bv 512))
  %t13 = bitcast <8 x double> %arg10 to i512
  ; r12 := (bitcast arg11 (bv 512))
  %t14 = bitcast <8 x double> %arg11 to i512
  ; r13 := (bitcast arg12 (bv 512))
  %t15 = bitcast <8 x double> %arg12 to i512
  ; r14 := (bitcast arg13 (bv 512))
  %t16 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast arg6 (bv 512))
  %t17 = bitcast <8 x double> %arg6 to i512
  br i1 %t8, label %block_0_413e4e, label %block_0_413dd0
block_0_413dd0:
  %t18 = phi i64 [ %arg2, %block_0_413dc0 ], [ %t148, %block_0_413e74 ]
  %t19 = phi i64 [ %t1, %block_0_413dc0 ], [ %t149, %block_0_413e74 ]
  %t20 = phi i512 [ %t17, %block_0_413dc0 ], [ %t151, %block_0_413e74 ]
  ; r19 := (read (0x63eea8 : bv 64) (bv 32))
  %t21 = inttoptr i64 6549160 to i32*
  %t22 = load i32, i32* %t21
  ; r20 := (uext r19 64)
  %t23 = zext i32 %t22 to i64
  ; r21 := (trunc r17 32)
  %t24 = trunc i64 %t19 to i32
  ; write (0x63eeac : bv 64) r21
  %t25 = inttoptr i64 6549164 to i32*
  store i32 %t24, i32* %t25
  ; r22 := (bv_add r19 (0xffffffff : bv 32))
  %t26 = add i32 %t22, 4294967295
  ; r23 := (bv_slt r22 (0x0 : bv 32))
  %t27 = icmp slt i32 %t26, 0
  ; r24 := (uext r22 64)
  %t28 = zext i32 %t26 to i64
  br i1 %t27, label %block_0_413e43, label %block_0_413de3
block_0_413de3:
  %t29 = phi i64 [ %t28, %block_0_413dd0 ]
  %t30 = phi i64 [ %t18, %block_0_413dd0 ]
  %t31 = phi i64 [ %t23, %block_0_413dd0 ]
  %t32 = phi i512 [ %t20, %block_0_413dd0 ]
  ; r29 := (trunc r25 32)
  %t33 = trunc i64 %t29 to i32
  ; r30 := (sext r29 64)
  %t34 = sext i32 %t33 to i64
  ; r31 := (read (0x63eeb0 : bv 64) (bv 64))
  %t35 = inttoptr i64 6549168 to i64*
  %t36 = load i64, i64* %t35
  ; r32 := (bv_mul (0x4 : bv 64) r30)
  %t37 = mul i64 4, %t34
  ; r33 := (bv_add r30 r32)
  %t38 = add i64 %t34, %t37
  ; r34 := (bv_mul (0x8 : bv 64) r33)
  %t39 = mul i64 8, %t38
  ; r35 := (read (0x63eea0 : bv 64) (bv 64))
  %t40 = inttoptr i64 6549152 to i64*
  %t41 = load i64, i64* %t40
  ; r36 := (bv_add r34 r35)
  %t42 = add i64 %t39, %t41
  br label %block_0_413e04
block_0_413e04:
  %t43 = phi i64 [ %t42, %block_0_413de3 ], [ %t80, %block_0_413e19 ]
  %t44 = phi i64 [ %t30, %block_0_413de3 ], [ %t71, %block_0_413e19 ]
  %t45 = phi i64 [ 0, %block_0_413de3 ], [ %t79, %block_0_413e19 ]
  %t46 = phi i64 [ %t31, %block_0_413de3 ], [ %t73, %block_0_413e19 ]
  %t47 = phi i64 [ 0, %block_0_413de3 ], [ %t74, %block_0_413e19 ]
  %t48 = phi i64 [ %t36, %block_0_413de3 ], [ %t75, %block_0_413e19 ]
  %t49 = phi i512 [ %t32, %block_0_413de3 ], [ %t76, %block_0_413e19 ]
  ; r44 := (bv_add r37 (0x20 : bv 64))
  %t50 = add i64 %t43, 32
  ; r45 := (read r44 (bv 8))
  %t51 = inttoptr i64 %t50 to i8*
  %t52 = load i8, i8* %t51
  ; r46 := (eq r45 (0x0 : bv 8))
  %t53 = icmp eq i8 %t52, 0
  br i1 %t53, label %block_0_413e19, label %block_0_413e0a
block_0_413e0a:
  %t54 = phi i64 [ %t43, %block_0_413e04 ]
  %t55 = phi i64 [ %t45, %block_0_413e04 ]
  %t56 = phi i64 [ %t46, %block_0_413e04 ]
  %t57 = phi i64 [ %t47, %block_0_413e04 ]
  %t58 = phi i64 [ %t48, %block_0_413e04 ]
  %t59 = phi i512 [ %t49, %block_0_413e04 ]
  ; r53 := (bv_add r47 (0x10 : bv 64))
  %t60 = add i64 %t54, 16
  ; r54 := (read r53 (bv 64))
  %t61 = inttoptr i64 %t60 to i64*
  %t62 = load i64, i64* %t61
  ; r55 := (trunc r50 32)
  %t63 = trunc i64 %t57 to i32
  ; r56 := (sext r55 64)
  %t64 = sext i32 %t63 to i64
  ; r57 := (bv_add r55 (0x1 : bv 32))
  %t65 = add i32 %t63, 1
  ; r58 := (uext r57 64)
  %t66 = zext i32 %t65 to i64
  ; r59 := (bv_mul (0x8 : bv 64) r56)
  %t67 = mul i64 8, %t64
  ; r60 := (bv_add r51 r59)
  %t68 = add i64 %t58, %t67
  ; write r60 r54
  %t69 = inttoptr i64 %t68 to i64*
  store i64 %t62, i64* %t69
  br label %block_0_413e19
block_0_413e19:
  %t70 = phi i64 [ %t43, %block_0_413e04 ], [ %t54, %block_0_413e0a ]
  %t71 = phi i64 [ %t44, %block_0_413e04 ], [ %t64, %block_0_413e0a ]
  %t72 = phi i64 [ %t45, %block_0_413e04 ], [ %t55, %block_0_413e0a ]
  %t73 = phi i64 [ %t46, %block_0_413e04 ], [ %t56, %block_0_413e0a ]
  %t74 = phi i64 [ %t47, %block_0_413e04 ], [ %t66, %block_0_413e0a ]
  %t75 = phi i64 [ %t48, %block_0_413e04 ], [ %t58, %block_0_413e0a ]
  %t76 = phi i512 [ %t49, %block_0_413e04 ], [ %t59, %block_0_413e0a ]
  ; r68 := (trunc r63 32)
  %t77 = trunc i64 %t72 to i32
  ; r69 := (bv_add r68 (0x1 : bv 32))
  %t78 = add i32 %t77, 1
  ; r70 := (uext r69 64)
  %t79 = zext i32 %t78 to i64
  ; r71 := (bv_add r61 (0xffffffffffffffd8 : bv 64))
  %t80 = add i64 %t70, 18446744073709551576
  ; r72 := (trunc r64 32)
  %t81 = trunc i64 %t73 to i32
  ; r73 := (eq r69 r72)
  %t82 = icmp eq i32 %t78, %t81
  br i1 %t82, label %block_0_413e24, label %block_0_413e04
block_0_413e24:
  %t83 = phi i64 [ %t71, %block_0_413e19 ]
  %t84 = phi i64 [ %t74, %block_0_413e19 ]
  %t85 = phi i64 [ %t75, %block_0_413e19 ]
  %t86 = phi i512 [ %t76, %block_0_413e19 ]
  ; r78 := (trunc r75 32)
  %t87 = trunc i64 %t84 to i32
  ; r79 := (sext r78 64)
  %t88 = sext i32 %t87 to i64
  ; r80 := (bv_shl r79 (0x3 : bv 64))
  %t89 = shl i64 %t88, 3
  br label %block_0_413e2b
block_0_413e2b:
  %t90 = phi i64 [ %t89, %block_0_413e24 ], [ 0, %block_0_413e43 ]
  %t91 = phi i64 [ %t83, %block_0_413e24 ], [ %t104, %block_0_413e43 ]
  %t92 = phi i64 [ %t85, %block_0_413e24 ], [ %t107, %block_0_413e43 ]
  %t93 = phi i512 [ %t86, %block_0_413e24 ], [ %t105, %block_0_413e43 ]
  ; r85 := (bv_add r83 r81)
  %t94 = add i64 %t92, %t90
  ; write r85 (0x0 : bv 64)
  %t95 = inttoptr i64 %t94 to i64*
  store i64 0, i64* %t95
  ; write (0x641e20 : bv 64) r83
  %t96 = inttoptr i64 6561312 to i64*
  store i64 %t92, i64* %t96
  br label %block_0_413e3c
block_0_413e3c:
  %t97 = phi i64 [ 0, %block_0_413e2b ], [ 4294967295, %block_0_413e67 ]
  %t98 = phi i64 [ %t91, %block_0_413e2b ], [ %t143, %block_0_413e67 ]
  %t99 = phi i512 [ %t93, %block_0_413e2b ], [ %t146, %block_0_413e67 ]
  ; r89 := (bitcast r88 (vec 8 double))
  %t100 = bitcast i512 %t99 to <8 x double>
  ; r90 := (tuple r86 r87 r89)
  %t101 = insertvalue { i64, i64, <8 x double> } undef, i64 %t97, 0
  %t102 = insertvalue { i64, i64, <8 x double> } %t101, i64 %t98, 1
  %t103 = insertvalue { i64, i64, <8 x double> } %t102, <8 x double> %t100, 2
  ret { i64, i64, <8 x double> } %t103
block_0_413e43:
  %t104 = phi i64 [ %t18, %block_0_413dd0 ]
  %t105 = phi i512 [ %t20, %block_0_413dd0 ]
  ; r93 := (read (0x63eeb0 : bv 64) (bv 64))
  %t106 = inttoptr i64 6549168 to i64*
  %t107 = load i64, i64* %t106
  br label %block_0_413e2b
block_0_413e4e:
  %t108 = phi i64 [ %arg3, %block_0_413dc0 ]
  %t109 = phi i64 [ %arg2, %block_0_413dc0 ]
  %t110 = phi i64 [ %t1, %block_0_413dc0 ]
  %t111 = phi i64 [ %arg4, %block_0_413dc0 ]
  %t112 = phi i64 [ %arg5, %block_0_413dc0 ]
  %t113 = phi i512 [ %t9, %block_0_413dc0 ]
  %t114 = phi i512 [ %t10, %block_0_413dc0 ]
  %t115 = phi i512 [ %t11, %block_0_413dc0 ]
  %t116 = phi i512 [ %t12, %block_0_413dc0 ]
  %t117 = phi i512 [ %t13, %block_0_413dc0 ]
  %t118 = phi i512 [ %t14, %block_0_413dc0 ]
  %t119 = phi i512 [ %t15, %block_0_413dc0 ]
  %t120 = phi i512 [ %t16, %block_0_413dc0 ]
  ; r107 := (bv_add r96 r96)
  %t121 = add i64 %t110, %t110
  ; r108 := (trunc r107 32)
  %t122 = trunc i64 %t121 to i32
  ; r109 := (uext r108 64)
  %t123 = zext i32 %t122 to i64
  ; r110 := (read (0x63eeb0 : bv 64) (bv 64))
  %t124 = inttoptr i64 6549168 to i64*
  %t125 = load i64, i64* %t124
  ; r111 := (bv_add r109 (0x1 : bv 64))
  %t126 = add i64 %t123, 1
  ; r112 := (trunc r111 32)
  %t127 = trunc i64 %t126 to i32
  ; r113 := (sext r112 64)
  %t128 = sext i32 %t127 to i64
  ; r114 := (bv_shl r113 (0x3 : bv 64))
  %t129 = shl i64 %t128, 3
  ; r115 := (bitcast r99 (vec 8 double))
  %t130 = bitcast i512 %t113 to <8 x double>
  ; r116 := (bitcast r100 (vec 8 double))
  %t131 = bitcast i512 %t114 to <8 x double>
  ; r117 := (bitcast r101 (vec 8 double))
  %t132 = bitcast i512 %t115 to <8 x double>
  ; r118 := (bitcast r102 (vec 8 double))
  %t133 = bitcast i512 %t116 to <8 x double>
  ; r119 := (bitcast r103 (vec 8 double))
  %t134 = bitcast i512 %t117 to <8 x double>
  ; r120 := (bitcast r104 (vec 8 double))
  %t135 = bitcast i512 %t118 to <8 x double>
  ; r121 := (bitcast r105 (vec 8 double))
  %t136 = bitcast i512 %t119 to <8 x double>
  ; r122 := (bitcast r106 (vec 8 double))
  %t137 = bitcast i512 %t120 to <8 x double>
  ; r123 := call realloc(r110, r114, r95, r94, r97, r98, r115, r116, r117, r118, r119, r120, r121, r122)
  %t138 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @realloc(i64 %t125, i64 %t129, i64 %t109, i64 %t108, i64 %t111, i64 %t112, <8 x double> %t130, <8 x double> %t131, <8 x double> %t132, <8 x double> %t133, <8 x double> %t134, <8 x double> %t135, <8 x double> %t136, <8 x double> %t137)
  ; r124 := (tuple_field r123 0)
  %t139 = extractvalue { i64, i64, <8 x double> } %t138, 0
  ; r125 := (tuple_field r123 1)
  %t140 = extractvalue { i64, i64, <8 x double> } %t138, 1
  ; r126 := (tuple_field r123 2)
  %t141 = extractvalue { i64, i64, <8 x double> } %t138, 2
  ; r127 := (bitcast r126 (bv 512))
  %t142 = bitcast <8 x double> %t141 to i512
  br label %block_0_413e67
block_0_413e67:
  %t143 = phi i64 [ %t139, %block_0_413e4e ]
  %t144 = phi i64 [ %t110, %block_0_413e4e ]
  %t145 = phi i64 [ %t123, %block_0_413e4e ]
  %t146 = phi i512 [ %t142, %block_0_413e4e ]
  ; r132 := (eq r128 (0x0 : bv 64))
  %t147 = icmp eq i64 %t143, 0
  br i1 %t147, label %block_0_413e3c, label %block_0_413e74
block_0_413e74:
  %t148 = phi i64 [ %t143, %block_0_413e67 ]
  %t149 = phi i64 [ %t144, %block_0_413e67 ]
  %t150 = phi i64 [ %t145, %block_0_413e67 ]
  %t151 = phi i512 [ %t146, %block_0_413e67 ]
  ; r137 := (trunc r135 32)
  %t152 = trunc i64 %t150 to i32
  ; write (0x63eeb8 : bv 64) r137
  %t153 = inttoptr i64 6549176 to i32*
  store i32 %t152, i32* %t153
  ; write (0x63eeb0 : bv 64) r133
  %t154 = inttoptr i64 6549168 to i64*
  store i64 %t148, i64* %t154
  br label %block_0_413dd0
}
define void @__clean_env_destructor(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_414020:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call __clean_env((0x1 : bv 64), arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__clean_env(i64 1, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define { i64, i64, <8 x double> } @__merge_environ(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_414530:
  ; r0 := (read (0x63eeb0 : bv 64) (bv 64))
  %t0 = inttoptr i64 6549168 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (eq r0 (0x0 : bv 64))
  %t2 = icmp eq i64 %t1, 0
  ; r2 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_414615, label %block_0_414546
block_0_414546:
  %t12 = phi i64 [ %t1, %block_0_414530 ]
  %t13 = phi i64 [ %arg3, %block_0_414530 ]
  %t14 = phi i64 [ %arg2, %block_0_414530 ]
  %t15 = phi i64 [ %arg1, %block_0_414530 ]
  %t16 = phi i64 [ %arg0, %block_0_414530 ]
  %t17 = phi i64 [ %arg4, %block_0_414530 ]
  %t18 = phi i64 [ %arg5, %block_0_414530 ]
  %t19 = phi i512 [ %t4, %block_0_414530 ]
  %t20 = phi i512 [ %t5, %block_0_414530 ]
  %t21 = phi i512 [ %t6, %block_0_414530 ]
  %t22 = phi i512 [ %t7, %block_0_414530 ]
  %t23 = phi i512 [ %t8, %block_0_414530 ]
  %t24 = phi i512 [ %t9, %block_0_414530 ]
  %t25 = phi i512 [ %t10, %block_0_414530 ]
  %t26 = phi i512 [ %t11, %block_0_414530 ]
  ; r26 := (read (0x641e20 : bv 64) (bv 64))
  %t27 = inttoptr i64 6561312 to i64*
  %t28 = load i64, i64* %t27
  ; r27 := (eq r11 r26)
  %t29 = icmp eq i64 %t12, %t28
  br i1 %t29, label %block_0_414601, label %block_0_414553
block_0_414553:
  %t30 = phi i64 [ %t14, %block_0_414546 ]
  %t31 = phi i64 [ %t15, %block_0_414546 ]
  %t32 = phi i64 [ %t16, %block_0_414546 ]
  %t33 = phi i64 [ %t17, %block_0_414546 ]
  %t34 = phi i64 [ %t18, %block_0_414546 ]
  %t35 = phi i512 [ %t19, %block_0_414546 ]
  %t36 = phi i512 [ %t20, %block_0_414546 ]
  %t37 = phi i512 [ %t21, %block_0_414546 ]
  %t38 = phi i512 [ %t22, %block_0_414546 ]
  %t39 = phi i512 [ %t23, %block_0_414546 ]
  %t40 = phi i512 [ %t24, %block_0_414546 ]
  %t41 = phi i512 [ %t25, %block_0_414546 ]
  %t42 = phi i512 [ %t26, %block_0_414546 ]
  ; r41 := (read (0x63eeac : bv 64) (bv 32))
  %t43 = inttoptr i64 6549164 to i32*
  %t44 = load i32, i32* %t43
  ; r42 := (uext r41 64)
  %t45 = zext i32 %t44 to i64
  ; r43 := (bv_slt r41 (0x0 : bv 32))
  %t46 = icmp slt i32 %t44, 0
  ; r44 := (eq r41 (0x0 : bv 32))
  %t47 = icmp eq i32 %t44, 0
  ; r45 := (or r44 r43)
  %t48 = or i1 %t47, %t46
  br i1 %t48, label %block_0_41456f, label %block_0_41455d
block_0_41455d:
  %t49 = phi i64 [ %t45, %block_0_414553 ], [ %t210, %block_0_41460b ]
  %t50 = phi i64 [ %t30, %block_0_414553 ], [ %t211, %block_0_41460b ]
  %t51 = phi i64 [ %t31, %block_0_414553 ], [ %t212, %block_0_41460b ]
  %t52 = phi i64 [ %t32, %block_0_414553 ], [ %t213, %block_0_41460b ]
  %t53 = phi i64 [ %t33, %block_0_414553 ], [ %t214, %block_0_41460b ]
  %t54 = phi i64 [ %t34, %block_0_414553 ], [ %t215, %block_0_41460b ]
  %t55 = phi i512 [ %t35, %block_0_414553 ], [ %t216, %block_0_41460b ]
  %t56 = phi i512 [ %t36, %block_0_414553 ], [ %t217, %block_0_41460b ]
  %t57 = phi i512 [ %t37, %block_0_414553 ], [ %t218, %block_0_41460b ]
  %t58 = phi i512 [ %t38, %block_0_414553 ], [ %t219, %block_0_41460b ]
  %t59 = phi i512 [ %t39, %block_0_414553 ], [ %t220, %block_0_41460b ]
  %t60 = phi i512 [ %t40, %block_0_414553 ], [ %t221, %block_0_41460b ]
  %t61 = phi i512 [ %t41, %block_0_414553 ], [ %t222, %block_0_41460b ]
  %t62 = phi i512 [ %t42, %block_0_414553 ], [ %t223, %block_0_41460b ]
  ; write (0x63eec0 : bv 64) (0x0 : bv 64)
  %t63 = inttoptr i64 6549184 to i64*
  store i64 0, i64* %t63
  ; r60 := (bitcast r52 (vec 8 double))
  %t64 = bitcast i512 %t55 to <8 x double>
  ; r61 := (bitcast r53 (vec 8 double))
  %t65 = bitcast i512 %t56 to <8 x double>
  ; r62 := (bitcast r54 (vec 8 double))
  %t66 = bitcast i512 %t57 to <8 x double>
  ; r63 := (bitcast r55 (vec 8 double))
  %t67 = bitcast i512 %t58 to <8 x double>
  ; r64 := (bitcast r56 (vec 8 double))
  %t68 = bitcast i512 %t59 to <8 x double>
  ; r65 := (bitcast r57 (vec 8 double))
  %t69 = bitcast i512 %t60 to <8 x double>
  ; r66 := (bitcast r58 (vec 8 double))
  %t70 = bitcast i512 %t61 to <8 x double>
  ; r67 := (bitcast r59 (vec 8 double))
  %t71 = bitcast i512 %t62 to <8 x double>
  ; r68 := call __clean_env((0x0 : bv 64), r48, r47, r46, r50, r51, r60, r61, r62, r63, r64, r65, r66, r67)
  %t72 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__clean_env(i64 0, i64 %t51, i64 %t50, i64 %t49, i64 %t53, i64 %t54, <8 x double> %t64, <8 x double> %t65, <8 x double> %t66, <8 x double> %t67, <8 x double> %t68, <8 x double> %t69, <8 x double> %t70, <8 x double> %t71)
  ; r69 := (tuple_field r68 0)
  %t73 = extractvalue { i64, i64, <8 x double> } %t72, 0
  ; r70 := (tuple_field r68 1)
  %t74 = extractvalue { i64, i64, <8 x double> } %t72, 1
  ; r71 := (tuple_field r68 2)
  %t75 = extractvalue { i64, i64, <8 x double> } %t72, 2
  ; r72 := (bitcast r71 (bv 512))
  %t76 = bitcast <8 x double> %t75 to i512
  br label %block_0_41456f
block_0_41456f:
  %t77 = phi i64 [ %t30, %block_0_414553 ], [ %t74, %block_0_41455d ]
  %t78 = phi i64 [ %t31, %block_0_414553 ], [ %t51, %block_0_41455d ]
  %t79 = phi i64 [ %t32, %block_0_414553 ], [ %t52, %block_0_41455d ]
  %t80 = phi i512 [ %t35, %block_0_414553 ], [ %t76, %block_0_41455d ]
  ; r77 := (read (0x641e20 : bv 64) (bv 64))
  %t81 = inttoptr i64 6561312 to i64*
  %t82 = load i64, i64* %t81
  ; r78 := (eq r77 (0x0 : bv 64))
  %t83 = icmp eq i64 %t82, 0
  ; write (0x63eec0 : bv 64) r77
  %t84 = inttoptr i64 6549184 to i64*
  store i64 %t82, i64* %t84
  br i1 %t83, label %block_0_414615, label %block_0_414586
block_0_414586:
  %t85 = phi i64 [ %t82, %block_0_41456f ]
  %t86 = phi i64 [ %t77, %block_0_41456f ]
  %t87 = phi i64 [ %t78, %block_0_41456f ]
  %t88 = phi i64 [ %t79, %block_0_41456f ]
  %t89 = phi i512 [ %t80, %block_0_41456f ]
  ; r84 := (read r79 (bv 64))
  %t90 = inttoptr i64 %t85 to i64*
  %t91 = load i64, i64* %t90
  ; r85 := (eq r84 (0x0 : bv 64))
  %t92 = icmp eq i64 %t91, 0
  br i1 %t92, label %block_0_414615, label %block_0_414592
block_0_414592:
  %t93 = phi i64 [ %t85, %block_0_414586 ]
  %t94 = phi i64 [ %t91, %block_0_414586 ]
  %t95 = phi i64 [ %t87, %block_0_414586 ]
  %t96 = phi i64 [ %t88, %block_0_414586 ]
  %t97 = phi i512 [ %t89, %block_0_414586 ]
  br label %block_0_4145c0
block_0_414597:
  %t98 = phi i64 [ %t140, %block_0_4145cd ]
  %t99 = phi i64 [ %t141, %block_0_4145cd ]
  %t100 = phi i64 [ %t142, %block_0_4145cd ]
  %t101 = phi i64 [ %t143, %block_0_4145cd ]
  %t102 = phi i64 [ %t144, %block_0_4145cd ]
  %t103 = phi i512 [ %t145, %block_0_4145cd ]
  ; r97 := (bv_add r91 (0x1 : bv 64))
  %t104 = add i64 %t98, 1
  ; r98 := (bv_sub r91 r92)
  %t105 = sub i64 %t98, %t99
  ; r99 := (bitcast r96 (vec 8 double))
  %t106 = bitcast i512 %t103 to <8 x double>
  ; r100 := call __setenv(r92, r98, r97, (0x1 : bv 64), r99)
  %t107 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, <8 x double>) @__setenv(i64 %t99, i64 %t105, i64 %t104, i64 1, <8 x double> %t106)
  ; r101 := (tuple_field r100 0)
  %t108 = extractvalue { i64, i64, <8 x double> } %t107, 0
  ; r102 := (tuple_field r100 1)
  %t109 = extractvalue { i64, i64, <8 x double> } %t107, 1
  ; r103 := (tuple_field r100 2)
  %t110 = extractvalue { i64, i64, <8 x double> } %t107, 2
  ; r104 := (bitcast r103 (bv 512))
  %t111 = bitcast <8 x double> %t110 to i512
  br label %block_0_4145ae
block_0_4145ae:
  %t112 = phi i64 [ %t108, %block_0_414597 ]
  %t113 = phi i64 [ %t109, %block_0_414597 ]
  %t114 = phi i64 [ %t100, %block_0_414597 ]
  %t115 = phi i64 [ %t101, %block_0_414597 ]
  %t116 = phi i64 [ %t102, %block_0_414597 ]
  %t117 = phi i512 [ %t111, %block_0_414597 ]
  ; r111 := (trunc r105 32)
  %t118 = trunc i64 %t112 to i32
  ; r112 := (eq r111 (0xffffffff : bv 32))
  %t119 = icmp eq i32 %t118, 4294967295
  br i1 %t119, label %block_0_4145fa, label %block_0_4145b3
block_0_4145b3:
  %t120 = phi i64 [ %t113, %block_0_4145ae ]
  %t121 = phi i64 [ %t114, %block_0_4145ae ]
  %t122 = phi i64 [ %t115, %block_0_4145ae ]
  %t123 = phi i64 [ %t116, %block_0_4145ae ]
  %t124 = phi i512 [ %t117, %block_0_4145ae ]
  ; r118 := (bv_add r114 (0x8 : bv 64))
  %t125 = add i64 %t121, 8
  ; r119 := (read r118 (bv 64))
  %t126 = inttoptr i64 %t125 to i64*
  %t127 = load i64, i64* %t126
  ; r120 := (eq r119 (0x0 : bv 64))
  %t128 = icmp eq i64 %t127, 0
  br i1 %t128, label %block_0_414615, label %block_0_4145c0
block_0_4145c0:
  %t129 = phi i64 [ %t94, %block_0_414592 ], [ %t127, %block_0_4145b3 ]
  %t130 = phi i64 [ %t93, %block_0_414592 ], [ %t125, %block_0_4145b3 ]
  %t131 = phi i64 [ %t95, %block_0_414592 ], [ %t122, %block_0_4145b3 ]
  %t132 = phi i64 [ %t96, %block_0_414592 ], [ %t123, %block_0_4145b3 ]
  %t133 = phi i512 [ %t97, %block_0_414592 ], [ %t124, %block_0_4145b3 ]
  ; r126 := (bitcast r125 (vec 8 double))
  %t134 = bitcast i512 %t133 to <8 x double>
  ; r127 := call strchr(r121, (0x3d : bv 64), r126)
  %t135 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @strchr(i64 %t129, i64 61, <8 x double> %t134)
  ; r128 := (tuple_field r127 0)
  %t136 = extractvalue { i64, i64, <8 x double> } %t135, 0
  ; r129 := (tuple_field r127 1)
  %t137 = extractvalue { i64, i64, <8 x double> } %t135, 1
  ; r130 := (tuple_field r127 2)
  %t138 = extractvalue { i64, i64, <8 x double> } %t135, 2
  ; r131 := (bitcast r130 (bv 512))
  %t139 = bitcast <8 x double> %t138 to i512
  br label %block_0_4145cd
block_0_4145cd:
  %t140 = phi i64 [ %t136, %block_0_4145c0 ]
  %t141 = phi i64 [ %t129, %block_0_4145c0 ]
  %t142 = phi i64 [ %t130, %block_0_4145c0 ]
  %t143 = phi i64 [ %t131, %block_0_4145c0 ]
  %t144 = phi i64 [ %t132, %block_0_4145c0 ]
  %t145 = phi i512 [ %t139, %block_0_4145c0 ]
  ; r138 := (eq r132 (0x0 : bv 64))
  %t146 = icmp eq i64 %t140, 0
  br i1 %t146, label %block_0_4145d2, label %block_0_414597
block_0_4145d2:
  %t147 = phi i64 [ %t141, %block_0_4145cd ]
  %t148 = phi i64 [ %t143, %block_0_4145cd ]
  %t149 = phi i64 [ %t144, %block_0_4145cd ]
  %t150 = phi i512 [ %t145, %block_0_4145cd ]
  ; r143 := (bitcast r142 (vec 8 double))
  %t151 = bitcast i512 %t150 to <8 x double>
  ; r144 := call strlen(r139, r143)
  %t152 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t147, <8 x double> %t151)
  ; r145 := (tuple_field r144 0)
  %t153 = extractvalue { i64, i64, <8 x double> } %t152, 0
  ; r146 := (tuple_field r144 1)
  %t154 = extractvalue { i64, i64, <8 x double> } %t152, 1
  ; r147 := (tuple_field r144 2)
  %t155 = extractvalue { i64, i64, <8 x double> } %t152, 2
  ; r148 := (bitcast r147 (bv 512))
  %t156 = bitcast <8 x double> %t155 to i512
  br label %block_0_4145da
block_0_4145da:
  %t157 = phi i64 [ %t153, %block_0_4145d2 ]
  %t158 = phi i64 [ %t147, %block_0_4145d2 ]
  %t159 = phi i64 [ %t148, %block_0_4145d2 ]
  %t160 = phi i64 [ %t149, %block_0_4145d2 ]
  %t161 = phi i512 [ %t156, %block_0_4145d2 ]
  ; r154 := (bitcast r153 (vec 8 double))
  %t162 = bitcast i512 %t161 to <8 x double>
  ; r155 := call __env_warnx((0x428c60 : bv 64), r150, r149, r154)
  %t163 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__env_warnx(i64 4361312, i64 %t158, i64 %t157, <8 x double> %t162)
  ; r156 := (tuple_field r155 0)
  %t164 = extractvalue { i64, i64, <8 x double> } %t163, 0
  ; r157 := (tuple_field r155 1)
  %t165 = extractvalue { i64, i64, <8 x double> } %t163, 1
  ; r158 := (tuple_field r155 2)
  %t166 = extractvalue { i64, i64, <8 x double> } %t163, 2
  ; r159 := (bitcast r158 (bv 512))
  %t167 = bitcast <8 x double> %t166 to i512
  br label %block_0_4145ea
block_0_4145ea:
  %t168 = phi i64 [ %t165, %block_0_4145da ]
  %t169 = phi i64 [ %t159, %block_0_4145da ]
  %t170 = phi i64 [ %t160, %block_0_4145da ]
  %t171 = phi i512 [ %t167, %block_0_4145da ]
  ; r164 := (bitcast r163 (vec 8 double))
  %t172 = bitcast i512 %t171 to <8 x double>
  ; r165 := call __error_unthreaded(r162, r161, r160, r164)
  %t173 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t170, i64 %t169, i64 %t168, <8 x double> %t172)
  ; r166 := (tuple_field r165 0)
  %t174 = extractvalue { i64, i64, <8 x double> } %t173, 0
  ; r167 := (tuple_field r165 1)
  %t175 = extractvalue { i64, i64, <8 x double> } %t173, 1
  ; r168 := (tuple_field r165 2)
  %t176 = extractvalue { i64, i64, <8 x double> } %t173, 2
  ; r169 := (bitcast r168 (bv 512))
  %t177 = bitcast <8 x double> %t176 to i512
  br label %block_0_4145ef
block_0_4145ef:
  %t178 = phi i64 [ %t174, %block_0_4145ea ]
  %t179 = phi i64 [ %t175, %block_0_4145ea ]
  %t180 = phi i512 [ %t177, %block_0_4145ea ]
  ; write r170 (0xe : bv 32)
  %t181 = inttoptr i64 %t178 to i32*
  store i32 14, i32* %t181
  br label %block_0_4145fa
block_0_4145fa:
  %t182 = phi i64 [ %t112, %block_0_4145ae ], [ 4294967295, %block_0_4145ef ]
  %t183 = phi i64 [ %t113, %block_0_4145ae ], [ %t179, %block_0_4145ef ]
  %t184 = phi i512 [ %t117, %block_0_4145ae ], [ %t180, %block_0_4145ef ]
  ; r176 := (bitcast r175 (vec 8 double))
  %t185 = bitcast i512 %t184 to <8 x double>
  ; r177 := (tuple r173 r174 r176)
  %t186 = insertvalue { i64, i64, <8 x double> } undef, i64 %t182, 0
  %t187 = insertvalue { i64, i64, <8 x double> } %t186, i64 %t183, 1
  %t188 = insertvalue { i64, i64, <8 x double> } %t187, <8 x double> %t185, 2
  ret { i64, i64, <8 x double> } %t188
block_0_414601:
  %t189 = phi i64 [ %t12, %block_0_414546 ]
  %t190 = phi i64 [ %t13, %block_0_414546 ]
  %t191 = phi i64 [ %t14, %block_0_414546 ]
  %t192 = phi i64 [ %t16, %block_0_414546 ]
  %t193 = phi i64 [ %t17, %block_0_414546 ]
  %t194 = phi i64 [ %t18, %block_0_414546 ]
  %t195 = phi i512 [ %t19, %block_0_414546 ]
  %t196 = phi i512 [ %t20, %block_0_414546 ]
  %t197 = phi i512 [ %t21, %block_0_414546 ]
  %t198 = phi i512 [ %t22, %block_0_414546 ]
  %t199 = phi i512 [ %t23, %block_0_414546 ]
  %t200 = phi i512 [ %t24, %block_0_414546 ]
  %t201 = phi i512 [ %t25, %block_0_414546 ]
  %t202 = phi i512 [ %t26, %block_0_414546 ]
  ; r192 := (read (0x63eeac : bv 64) (bv 32))
  %t203 = inttoptr i64 6549164 to i32*
  %t204 = load i32, i32* %t203
  ; r193 := (uext r192 64)
  %t205 = zext i32 %t204 to i64
  ; r194 := (bv_slt r192 (0x0 : bv 32))
  %t206 = icmp slt i32 %t204, 0
  ; r195 := (eq r192 (0x0 : bv 32))
  %t207 = icmp eq i32 %t204, 0
  ; r196 := (or r195 r194)
  %t208 = or i1 %t207, %t206
  br i1 %t208, label %block_0_414615, label %block_0_41460b
block_0_41460b:
  %t209 = phi i64 [ %t189, %block_0_414601 ]
  %t210 = phi i64 [ %t190, %block_0_414601 ]
  %t211 = phi i64 [ %t191, %block_0_414601 ]
  %t212 = phi i64 [ %t205, %block_0_414601 ]
  %t213 = phi i64 [ %t192, %block_0_414601 ]
  %t214 = phi i64 [ %t193, %block_0_414601 ]
  %t215 = phi i64 [ %t194, %block_0_414601 ]
  %t216 = phi i512 [ %t195, %block_0_414601 ]
  %t217 = phi i512 [ %t196, %block_0_414601 ]
  %t218 = phi i512 [ %t197, %block_0_414601 ]
  %t219 = phi i512 [ %t198, %block_0_414601 ]
  %t220 = phi i512 [ %t199, %block_0_414601 ]
  %t221 = phi i512 [ %t200, %block_0_414601 ]
  %t222 = phi i512 [ %t201, %block_0_414601 ]
  %t223 = phi i512 [ %t202, %block_0_414601 ]
  ; r212 := (read r197 (bv 64))
  %t224 = inttoptr i64 %t209 to i64*
  %t225 = load i64, i64* %t224
  ; r213 := (eq r212 (0x0 : bv 64))
  %t226 = icmp eq i64 %t225, 0
  br i1 %t226, label %block_0_41455d, label %block_0_414615
block_0_414615:
  %t227 = phi i64 [ %arg2, %block_0_414530 ], [ %t77, %block_0_41456f ], [ %t86, %block_0_414586 ], [ %t120, %block_0_4145b3 ], [ %t191, %block_0_414601 ], [ %t211, %block_0_41460b ]
  %t228 = phi i512 [ %t3, %block_0_414530 ], [ %t80, %block_0_41456f ], [ %t89, %block_0_414586 ], [ %t124, %block_0_4145b3 ], [ %t195, %block_0_414601 ], [ %t216, %block_0_41460b ]
  ; r216 := (bitcast r215 (vec 8 double))
  %t229 = bitcast i512 %t228 to <8 x double>
  ; r217 := (tuple (0x0 : bv 64) r214 r216)
  %t230 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t231 = insertvalue { i64, i64, <8 x double> } %t230, i64 %t227, 1
  %t232 = insertvalue { i64, i64, <8 x double> } %t231, <8 x double> %t229, 2
  ret { i64, i64, <8 x double> } %t232
}
define { i64, i64, <8 x double> } @getenv(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_414aa0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  ; r2 := (bitcast arg3 (bv 512))
  %t2 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_414afa, label %block_0_414aca
block_0_414aca:
  %t3 = phi i64 [ %arg2, %block_0_414aa0 ]
  %t4 = phi i64 [ %arg0, %block_0_414aa0 ]
  %t5 = phi i64 [ %arg1, %block_0_414aa0 ]
  %t6 = phi i512 [ %t2, %block_0_414aa0 ]
  ; r7 := (read r4 (bv 8))
  %t7 = inttoptr i64 %t4 to i8*
  %t8 = load i8, i8* %t7
  ; r8 := (uext r7 64)
  %t9 = zext i8 %t8 to i64
  ; r9 := (eq r7 (0x0 : bv 8))
  %t10 = icmp eq i8 %t8, 0
  br i1 %t10, label %block_0_414afa, label %block_0_414ad1
block_0_414ad1:
  %t11 = phi i64 [ %t9, %block_0_414aca ]
  %t12 = phi i64 [ %t4, %block_0_414aca ]
  %t13 = phi i64 [ %t5, %block_0_414aca ]
  %t14 = phi i512 [ %t6, %block_0_414aca ]
  ; r14 := (trunc r10 8)
  %t15 = trunc i64 %t11 to i8
  ; r15 := (eq r14 (0x3d : bv 8))
  %t16 = icmp eq i8 %t15, 61
  br i1 %t16, label %block_0_414ad8, label %block_0_414ae4
block_0_414ad8:
  %t17 = phi i64 [ %t12, %block_0_414ad1 ]
  %t18 = phi i64 [ %t13, %block_0_414ad1 ]
  %t19 = phi i512 [ %t14, %block_0_414ad1 ]
  br label %block_0_414afa
block_0_414ae0:
  %t20 = phi i64 [ %t36, %block_0_414ae4 ]
  %t21 = phi i64 [ %t33, %block_0_414ae4 ]
  %t22 = phi i64 [ %t29, %block_0_414ae4 ]
  %t23 = phi i64 [ %t30, %block_0_414ae4 ]
  %t24 = phi i64 [ %t31, %block_0_414ae4 ]
  %t25 = phi i512 [ %t32, %block_0_414ae4 ]
  ; r25 := (trunc r19 8)
  %t26 = trunc i64 %t20 to i8
  ; r26 := (eq r25 (0x3d : bv 8))
  %t27 = icmp eq i8 %t26, 61
  br i1 %t27, label %block_0_414afa, label %block_0_414ae4
block_0_414ae4:
  %t28 = phi i64 [ %t12, %block_0_414ad1 ], [ %t21, %block_0_414ae0 ]
  %t29 = phi i64 [ %t12, %block_0_414ad1 ], [ %t22, %block_0_414ae0 ]
  %t30 = phi i64 [ %t13, %block_0_414ad1 ], [ %t23, %block_0_414ae0 ]
  %t31 = phi i64 [ %t12, %block_0_414ad1 ], [ %t24, %block_0_414ae0 ]
  %t32 = phi i512 [ %t14, %block_0_414ad1 ], [ %t25, %block_0_414ae0 ]
  ; r32 := (bv_add r27 (0x1 : bv 64))
  %t33 = add i64 %t28, 1
  ; r33 := (read r32 (bv 8))
  %t34 = inttoptr i64 %t33 to i8*
  %t35 = load i8, i8* %t34
  ; r34 := (uext r33 64)
  %t36 = zext i8 %t35 to i64
  ; r35 := (eq r33 (0x0 : bv 8))
  %t37 = icmp eq i8 %t35, 0
  br i1 %t37, label %block_0_414af2, label %block_0_414ae0
block_0_414af2:
  %t38 = phi i64 [ %t33, %block_0_414ae4 ]
  %t39 = phi i64 [ %t29, %block_0_414ae4 ]
  %t40 = phi i64 [ %t30, %block_0_414ae4 ]
  %t41 = phi i64 [ %t31, %block_0_414ae4 ]
  %t42 = phi i512 [ %t32, %block_0_414ae4 ]
  ; r41 := (bv_sub r36 r37)
  %t43 = sub i64 %t38, %t39
  ; r42 := (eq r36 r37)
  %t44 = icmp eq i64 %t38, %t39
  br i1 %t44, label %block_0_414afa, label %block_0_414b2a
block_0_414afa:
  %t45 = phi i64 [ %arg2, %block_0_414aa0 ], [ %t3, %block_0_414aca ], [ %t17, %block_0_414ad8 ], [ %t21, %block_0_414ae0 ], [ %t38, %block_0_414af2 ]
  %t46 = phi i64 [ %arg1, %block_0_414aa0 ], [ %t5, %block_0_414aca ], [ %t18, %block_0_414ad8 ], [ %t23, %block_0_414ae0 ], [ %t40, %block_0_414af2 ]
  %t47 = phi i64 [ %arg0, %block_0_414aa0 ], [ %t4, %block_0_414aca ], [ %t17, %block_0_414ad8 ], [ %t24, %block_0_414ae0 ], [ %t41, %block_0_414af2 ]
  %t48 = phi i512 [ %t1, %block_0_414aa0 ], [ %t6, %block_0_414aca ], [ %t19, %block_0_414ad8 ], [ %t25, %block_0_414ae0 ], [ %t42, %block_0_414af2 ]
  ; r47 := (bitcast r46 (vec 8 double))
  %t49 = bitcast i512 %t48 to <8 x double>
  ; r48 := call __error_unthreaded(r45, r44, r43, r47)
  %t50 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t47, i64 %t46, i64 %t45, <8 x double> %t49)
  ; r49 := (tuple_field r48 0)
  %t51 = extractvalue { i64, i64, <8 x double> } %t50, 0
  ; r50 := (tuple_field r48 1)
  %t52 = extractvalue { i64, i64, <8 x double> } %t50, 1
  ; r51 := (tuple_field r48 2)
  %t53 = extractvalue { i64, i64, <8 x double> } %t50, 2
  ; r52 := (bitcast r51 (bv 512))
  %t54 = bitcast <8 x double> %t53 to i512
  br label %block_0_414aff
block_0_414aff:
  %t55 = phi i64 [ %t51, %block_0_414afa ]
  %t56 = phi i64 [ %t52, %block_0_414afa ]
  %t57 = phi i512 [ %t54, %block_0_414afa ]
  ; write r53 (0x16 : bv 32)
  %t58 = inttoptr i64 %t55 to i32*
  store i32 22, i32* %t58
  br label %block_0_414b07
block_0_414b07:
  %t59 = phi i64 [ 0, %block_0_414aff ], [ 0, %block_0_414b36 ], [ 0, %block_0_414b81 ], [ %t256, %block_0_414be4 ], [ %t300, %block_0_414c0c ]
  %t60 = phi i64 [ %t56, %block_0_414aff ], [ %t73, %block_0_414b36 ], [ %t144, %block_0_414b81 ], [ %t251, %block_0_414be4 ], [ %t295, %block_0_414c0c ]
  %t61 = phi i512 [ %t57, %block_0_414aff ], [ %t74, %block_0_414b36 ], [ %t145, %block_0_414b81 ], [ %t254, %block_0_414be4 ], [ %t297, %block_0_414c0c ]
  ; r59 := (bitcast r58 (vec 8 double))
  %t62 = bitcast i512 %t61 to <8 x double>
  ; r60 := (tuple r56 r57 r59)
  %t63 = insertvalue { i64, i64, <8 x double> } undef, i64 %t59, 0
  %t64 = insertvalue { i64, i64, <8 x double> } %t63, i64 %t60, 1
  %t65 = insertvalue { i64, i64, <8 x double> } %t64, <8 x double> %t62, 2
  ret { i64, i64, <8 x double> } %t65
block_0_414b2a:
  %t66 = phi i64 [ %t38, %block_0_414af2 ]
  %t67 = phi i64 [ %t39, %block_0_414af2 ]
  %t68 = phi i64 [ %t43, %block_0_414af2 ]
  %t69 = phi i512 [ %t42, %block_0_414af2 ]
  ; r65 := (read (0x641e20 : bv 64) (bv 64))
  %t70 = inttoptr i64 6561312 to i64*
  %t71 = load i64, i64* %t70
  ; r66 := (eq r65 (0x0 : bv 64))
  %t72 = icmp eq i64 %t71, 0
  br i1 %t72, label %block_0_414b36, label %block_0_414b3a
block_0_414b36:
  %t73 = phi i64 [ %t66, %block_0_414b2a ], [ %t76, %block_0_414b3a ], [ %t146, %block_0_414b85 ], [ %t189, %block_0_414baf ]
  %t74 = phi i512 [ %t69, %block_0_414b2a ], [ %t79, %block_0_414b3a ], [ %t149, %block_0_414b85 ], [ %t195, %block_0_414baf ]
  br label %block_0_414b07
block_0_414b3a:
  %t75 = phi i64 [ %t71, %block_0_414b2a ]
  %t76 = phi i64 [ %t66, %block_0_414b2a ]
  %t77 = phi i64 [ %t67, %block_0_414b2a ]
  %t78 = phi i64 [ %t68, %block_0_414b2a ]
  %t79 = phi i512 [ %t69, %block_0_414b2a ]
  ; r74 := (read r69 (bv 64))
  %t80 = inttoptr i64 %t75 to i64*
  %t81 = load i64, i64* %t80
  ; r75 := (eq r74 (0x0 : bv 64))
  %t82 = icmp eq i64 %t81, 0
  br i1 %t82, label %block_0_414b36, label %block_0_414b42
block_0_414b42:
  %t83 = phi i64 [ %t75, %block_0_414b3a ]
  %t84 = phi i64 [ %t77, %block_0_414b3a ]
  %t85 = phi i64 [ %t78, %block_0_414b3a ]
  %t86 = phi i64 [ %t81, %block_0_414b3a ]
  %t87 = phi i512 [ %t79, %block_0_414b3a ]
  ; r81 := (read (0x63eea0 : bv 64) (bv 64))
  %t88 = inttoptr i64 6549152 to i64*
  %t89 = load i64, i64* %t88
  ; r82 := (eq r81 (0x0 : bv 64))
  %t90 = icmp eq i64 %t89, 0
  br i1 %t90, label %block_0_414b57, label %block_0_414b4e
block_0_414b4e:
  %t91 = phi i64 [ %t83, %block_0_414b42 ]
  %t92 = phi i64 [ %t89, %block_0_414b42 ]
  %t93 = phi i64 [ %t84, %block_0_414b42 ]
  %t94 = phi i64 [ %t85, %block_0_414b42 ]
  %t95 = phi i64 [ %t86, %block_0_414b42 ]
  %t96 = phi i512 [ %t87, %block_0_414b42 ]
  ; r89 := (read (0x63eeb0 : bv 64) (bv 64))
  %t97 = inttoptr i64 6549168 to i64*
  %t98 = load i64, i64* %t97
  ; r90 := (eq r83 r89)
  %t99 = icmp eq i64 %t91, %t98
  br i1 %t99, label %block_0_414b85, label %block_0_414b57
block_0_414b57:
  %t100 = phi i64 [ %t83, %block_0_414b42 ], [ %t91, %block_0_414b4e ]
  %t101 = phi i64 [ %t84, %block_0_414b42 ], [ %t93, %block_0_414b4e ]
  %t102 = phi i64 [ %t85, %block_0_414b42 ], [ %t94, %block_0_414b4e ]
  %t103 = phi i64 [ %t86, %block_0_414b42 ], [ %t95, %block_0_414b4e ]
  %t104 = phi i512 [ %t87, %block_0_414b42 ], [ %t96, %block_0_414b4e ]
  br label %block_0_414b5a
block_0_414b5a:
  %t105 = phi i64 [ %t101, %block_0_414b57 ], [ %t136, %block_0_414b74 ]
  %t106 = phi i64 [ %t100, %block_0_414b57 ], [ %t140, %block_0_414b74 ]
  %t107 = phi i64 [ %t102, %block_0_414b57 ], [ %t138, %block_0_414b74 ]
  %t108 = phi i64 [ %t103, %block_0_414b57 ], [ %t142, %block_0_414b74 ]
  %t109 = phi i512 [ %t104, %block_0_414b57 ], [ %t139, %block_0_414b74 ]
  ; r101 := (bitcast r100 (vec 8 double))
  %t110 = bitcast i512 %t109 to <8 x double>
  ; r102 := call strncmp(r99, r96, r98, r101)
  %t111 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strncmp(i64 %t108, i64 %t105, i64 %t107, <8 x double> %t110)
  ; r103 := (tuple_field r102 0)
  %t112 = extractvalue { i64, i64, <8 x double> } %t111, 0
  ; r104 := (tuple_field r102 1)
  %t113 = extractvalue { i64, i64, <8 x double> } %t111, 1
  ; r105 := (tuple_field r102 2)
  %t114 = extractvalue { i64, i64, <8 x double> } %t111, 2
  ; r106 := (bitcast r105 (bv 512))
  %t115 = bitcast <8 x double> %t114 to i512
  br label %block_0_414b68
block_0_414b68:
  %t116 = phi i64 [ %t112, %block_0_414b5a ]
  %t117 = phi i64 [ %t113, %block_0_414b5a ]
  %t118 = phi i64 [ %t105, %block_0_414b5a ]
  %t119 = phi i64 [ %t106, %block_0_414b5a ]
  %t120 = phi i64 [ %t107, %block_0_414b5a ]
  %t121 = phi i64 [ %t108, %block_0_414b5a ]
  %t122 = phi i512 [ %t115, %block_0_414b5a ]
  ; r114 := (trunc r107 32)
  %t123 = trunc i64 %t116 to i32
  ; r115 := (eq r114 (0x0 : bv 32))
  %t124 = icmp eq i32 %t123, 0
  br i1 %t124, label %block_0_414b6c, label %block_0_414b74
block_0_414b6c:
  %t125 = phi i64 [ %t117, %block_0_414b68 ]
  %t126 = phi i64 [ %t118, %block_0_414b68 ]
  %t127 = phi i64 [ %t119, %block_0_414b68 ]
  %t128 = phi i64 [ %t120, %block_0_414b68 ]
  %t129 = phi i64 [ %t121, %block_0_414b68 ]
  %t130 = phi i512 [ %t122, %block_0_414b68 ]
  ; r122 := (bv_add r120 r119)
  %t131 = add i64 %t129, %t128
  ; r123 := (read r122 (bv 8))
  %t132 = inttoptr i64 %t131 to i8*
  %t133 = load i8, i8* %t132
  ; r124 := (eq r123 (0x3d : bv 8))
  %t134 = icmp eq i8 %t133, 61
  br i1 %t134, label %block_0_414be4, label %block_0_414b74
block_0_414b74:
  %t135 = phi i64 [ %t117, %block_0_414b68 ], [ %t125, %block_0_414b6c ]
  %t136 = phi i64 [ %t118, %block_0_414b68 ], [ %t126, %block_0_414b6c ]
  %t137 = phi i64 [ %t119, %block_0_414b68 ], [ %t127, %block_0_414b6c ]
  %t138 = phi i64 [ %t120, %block_0_414b68 ], [ %t128, %block_0_414b6c ]
  %t139 = phi i512 [ %t122, %block_0_414b68 ], [ %t130, %block_0_414b6c ]
  ; r130 := (bv_add r127 (0x8 : bv 64))
  %t140 = add i64 %t137, 8
  ; r131 := (read r130 (bv 64))
  %t141 = inttoptr i64 %t140 to i64*
  %t142 = load i64, i64* %t141
  ; r132 := (eq r131 (0x0 : bv 64))
  %t143 = icmp eq i64 %t142, 0
  br i1 %t143, label %block_0_414b81, label %block_0_414b5a
block_0_414b81:
  %t144 = phi i64 [ %t135, %block_0_414b74 ]
  %t145 = phi i512 [ %t139, %block_0_414b74 ]
  br label %block_0_414b07
block_0_414b85:
  %t146 = phi i64 [ %t92, %block_0_414b4e ]
  %t147 = phi i64 [ %t93, %block_0_414b4e ]
  %t148 = phi i64 [ %t94, %block_0_414b4e ]
  %t149 = phi i512 [ %t96, %block_0_414b4e ]
  ; r139 := (read (0x63eea8 : bv 64) (bv 32))
  %t150 = inttoptr i64 6549160 to i32*
  %t151 = load i32, i32* %t150
  ; r140 := (uext r139 64)
  %t152 = zext i32 %t151 to i64
  ; r141 := (bv_add r139 (0xffffffff : bv 32))
  %t153 = add i32 %t151, 4294967295
  ; r142 := (bv_slt r141 (0x0 : bv 32))
  %t154 = icmp slt i32 %t153, 0
  ; r143 := (uext r141 64)
  %t155 = zext i32 %t153 to i64
  br i1 %t154, label %block_0_414b36, label %block_0_414b94
block_0_414b94:
  %t156 = phi i64 [ %t155, %block_0_414b85 ]
  %t157 = phi i64 [ %t146, %block_0_414b85 ]
  %t158 = phi i64 [ %t147, %block_0_414b85 ]
  %t159 = phi i64 [ %t148, %block_0_414b85 ]
  %t160 = phi i64 [ %t152, %block_0_414b85 ]
  %t161 = phi i512 [ %t149, %block_0_414b85 ]
  ; r150 := (trunc r144 32)
  %t162 = trunc i64 %t156 to i32
  ; r151 := (sext r150 64)
  %t163 = sext i32 %t162 to i64
  ; r152 := (bv_mul (0x4 : bv 64) r151)
  %t164 = mul i64 4, %t163
  ; r153 := (bv_add r151 r152)
  %t165 = add i64 %t163, %t164
  ; r154 := (bv_mul (0x8 : bv 64) r153)
  %t166 = mul i64 8, %t165
  ; r155 := (bv_add r145 r154)
  %t167 = add i64 %t157, %t166
  br label %block_0_414bc0
block_0_414ba3:
  %t168 = phi i64 [ %t202, %block_0_414bc0 ]
  %t169 = phi i64 [ %t203, %block_0_414bc0 ]
  %t170 = phi i64 [ %t204, %block_0_414bc0 ]
  %t171 = phi i64 [ %t205, %block_0_414bc0 ]
  %t172 = phi i64 [ %t206, %block_0_414bc0 ]
  %t173 = phi i64 [ %t207, %block_0_414bc0 ]
  %t174 = phi i512 [ %t208, %block_0_414bc0 ]
  ; r163 := (bv_add r158 (0x20 : bv 64))
  %t175 = add i64 %t170, 32
  ; r164 := (read r163 (bv 8))
  %t176 = inttoptr i64 %t175 to i8*
  %t177 = load i8, i8* %t176
  ; r165 := (eq r164 (0x0 : bv 8))
  %t178 = icmp eq i8 %t177, 0
  br i1 %t178, label %block_0_414baf, label %block_0_414ba9
block_0_414ba9:
  %t179 = phi i64 [ %t168, %block_0_414ba3 ]
  %t180 = phi i64 [ %t169, %block_0_414ba3 ]
  %t181 = phi i64 [ %t170, %block_0_414ba3 ]
  %t182 = phi i64 [ %t171, %block_0_414ba3 ]
  %t183 = phi i64 [ %t172, %block_0_414ba3 ]
  %t184 = phi i64 [ %t173, %block_0_414ba3 ]
  %t185 = phi i512 [ %t174, %block_0_414ba3 ]
  ; r173 := (read r168 (bv 64))
  %t186 = inttoptr i64 %t181 to i64*
  %t187 = load i64, i64* %t186
  ; r174 := (eq r173 r169)
  %t188 = icmp eq i64 %t187, %t182
  br i1 %t188, label %block_0_414bee, label %block_0_414baf
block_0_414baf:
  %t189 = phi i64 [ %t168, %block_0_414ba3 ], [ %t179, %block_0_414ba9 ], [ %t229, %block_0_414bd8 ], [ %t239, %block_0_414bdc ], [ %t273, %block_0_414c00 ], [ %t283, %block_0_414c04 ]
  %t190 = phi i64 [ %t169, %block_0_414ba3 ], [ %t180, %block_0_414ba9 ], [ %t230, %block_0_414bd8 ], [ %t240, %block_0_414bdc ], [ %t274, %block_0_414c00 ], [ %t284, %block_0_414c04 ]
  %t191 = phi i64 [ %t170, %block_0_414ba3 ], [ %t181, %block_0_414ba9 ], [ %t231, %block_0_414bd8 ], [ %t241, %block_0_414bdc ], [ %t275, %block_0_414c00 ], [ %t285, %block_0_414c04 ]
  %t192 = phi i64 [ %t171, %block_0_414ba3 ], [ %t182, %block_0_414ba9 ], [ %t232, %block_0_414bd8 ], [ %t242, %block_0_414bdc ], [ %t276, %block_0_414c00 ], [ %t286, %block_0_414c04 ]
  %t193 = phi i64 [ %t172, %block_0_414ba3 ], [ %t183, %block_0_414ba9 ], [ %t234, %block_0_414bd8 ], [ %t244, %block_0_414bdc ], [ %t278, %block_0_414c00 ], [ %t288, %block_0_414c04 ]
  %t194 = phi i64 [ %t173, %block_0_414ba3 ], [ %t184, %block_0_414ba9 ], [ %t235, %block_0_414bd8 ], [ %t245, %block_0_414bdc ], [ %t279, %block_0_414c00 ], [ %t289, %block_0_414c04 ]
  %t195 = phi i512 [ %t174, %block_0_414ba3 ], [ %t185, %block_0_414ba9 ], [ %t236, %block_0_414bd8 ], [ %t246, %block_0_414bdc ], [ %t280, %block_0_414c00 ], [ %t290, %block_0_414c04 ]
  ; r182 := (trunc r179 32)
  %t196 = trunc i64 %t193 to i32
  ; r183 := (bv_add r182 (0x1 : bv 32))
  %t197 = add i32 %t196, 1
  ; r184 := (uext r183 64)
  %t198 = zext i32 %t197 to i64
  ; r185 := (bv_add r177 (0xffffffffffffffd8 : bv 64))
  %t199 = add i64 %t191, 18446744073709551576
  ; r186 := (trunc r180 32)
  %t200 = trunc i64 %t194 to i32
  ; r187 := (eq r183 r186)
  %t201 = icmp eq i32 %t197, %t200
  br i1 %t201, label %block_0_414b36, label %block_0_414bc0
block_0_414bc0:
  %t202 = phi i64 [ %t157, %block_0_414b94 ], [ %t189, %block_0_414baf ]
  %t203 = phi i64 [ %t158, %block_0_414b94 ], [ %t190, %block_0_414baf ]
  %t204 = phi i64 [ %t167, %block_0_414b94 ], [ %t199, %block_0_414baf ]
  %t205 = phi i64 [ %t159, %block_0_414b94 ], [ %t192, %block_0_414baf ]
  %t206 = phi i64 [ 0, %block_0_414b94 ], [ %t198, %block_0_414baf ]
  %t207 = phi i64 [ %t160, %block_0_414b94 ], [ %t194, %block_0_414baf ]
  %t208 = phi i512 [ %t161, %block_0_414b94 ], [ %t195, %block_0_414baf ]
  ; r195 := (bv_add r190 (0x21 : bv 64))
  %t209 = add i64 %t204, 33
  ; r196 := (read r195 (bv 8))
  %t210 = inttoptr i64 %t209 to i8*
  %t211 = load i8, i8* %t210
  ; r197 := (eq r196 (0x0 : bv 8))
  %t212 = icmp eq i8 %t211, 0
  br i1 %t212, label %block_0_414ba3, label %block_0_414bc6
block_0_414bc6:
  %t213 = phi i64 [ %t203, %block_0_414bc0 ]
  %t214 = phi i64 [ %t204, %block_0_414bc0 ]
  %t215 = phi i64 [ %t205, %block_0_414bc0 ]
  %t216 = phi i64 [ %t206, %block_0_414bc0 ]
  %t217 = phi i64 [ %t207, %block_0_414bc0 ]
  %t218 = phi i512 [ %t208, %block_0_414bc0 ]
  ; r204 := (bv_add r199 (0x10 : bv 64))
  %t219 = add i64 %t214, 16
  ; r205 := (read r204 (bv 64))
  %t220 = inttoptr i64 %t219 to i64*
  %t221 = load i64, i64* %t220
  ; r206 := (bitcast r203 (vec 8 double))
  %t222 = bitcast i512 %t218 to <8 x double>
  ; r207 := call strncmp(r205, r198, r200, r206)
  %t223 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strncmp(i64 %t221, i64 %t213, i64 %t215, <8 x double> %t222)
  ; r208 := (tuple_field r207 0)
  %t224 = extractvalue { i64, i64, <8 x double> } %t223, 0
  ; r209 := (tuple_field r207 1)
  %t225 = extractvalue { i64, i64, <8 x double> } %t223, 1
  ; r210 := (tuple_field r207 2)
  %t226 = extractvalue { i64, i64, <8 x double> } %t223, 2
  ; r211 := (bitcast r210 (bv 512))
  %t227 = bitcast <8 x double> %t226 to i512
  br label %block_0_414bd8
block_0_414bd8:
  %t228 = phi i64 [ %t224, %block_0_414bc6 ]
  %t229 = phi i64 [ %t225, %block_0_414bc6 ]
  %t230 = phi i64 [ %t213, %block_0_414bc6 ]
  %t231 = phi i64 [ %t214, %block_0_414bc6 ]
  %t232 = phi i64 [ %t215, %block_0_414bc6 ]
  %t233 = phi i64 [ %t221, %block_0_414bc6 ]
  %t234 = phi i64 [ %t216, %block_0_414bc6 ]
  %t235 = phi i64 [ %t217, %block_0_414bc6 ]
  %t236 = phi i512 [ %t227, %block_0_414bc6 ]
  ; r221 := (trunc r212 32)
  %t237 = trunc i64 %t228 to i32
  ; r222 := (eq r221 (0x0 : bv 32))
  %t238 = icmp eq i32 %t237, 0
  br i1 %t238, label %block_0_414bdc, label %block_0_414baf
block_0_414bdc:
  %t239 = phi i64 [ %t229, %block_0_414bd8 ]
  %t240 = phi i64 [ %t230, %block_0_414bd8 ]
  %t241 = phi i64 [ %t231, %block_0_414bd8 ]
  %t242 = phi i64 [ %t232, %block_0_414bd8 ]
  %t243 = phi i64 [ %t233, %block_0_414bd8 ]
  %t244 = phi i64 [ %t234, %block_0_414bd8 ]
  %t245 = phi i64 [ %t235, %block_0_414bd8 ]
  %t246 = phi i512 [ %t236, %block_0_414bd8 ]
  ; r231 := (bv_add r227 r226)
  %t247 = add i64 %t243, %t242
  ; r232 := (read r231 (bv 8))
  %t248 = inttoptr i64 %t247 to i8*
  %t249 = load i8, i8* %t248
  ; r233 := (eq r232 (0x3d : bv 8))
  %t250 = icmp eq i8 %t249, 61
  br i1 %t250, label %block_0_414be4, label %block_0_414baf
block_0_414be4:
  %t251 = phi i64 [ %t125, %block_0_414b6c ], [ %t239, %block_0_414bdc ]
  %t252 = phi i64 [ %t128, %block_0_414b6c ], [ %t242, %block_0_414bdc ]
  %t253 = phi i64 [ %t129, %block_0_414b6c ], [ %t243, %block_0_414bdc ]
  %t254 = phi i512 [ %t130, %block_0_414b6c ], [ %t246, %block_0_414bdc ]
  ; r238 := (bv_add r235 r236)
  %t255 = add i64 %t252, %t253
  ; r239 := (bv_add r238 (0x1 : bv 64))
  %t256 = add i64 %t255, 1
  br label %block_0_414b07
block_0_414bee:
  %t257 = phi i64 [ %t180, %block_0_414ba9 ]
  %t258 = phi i64 [ %t181, %block_0_414ba9 ]
  %t259 = phi i64 [ %t182, %block_0_414ba9 ]
  %t260 = phi i64 [ %t183, %block_0_414ba9 ]
  %t261 = phi i64 [ %t184, %block_0_414ba9 ]
  %t262 = phi i512 [ %t185, %block_0_414ba9 ]
  ; r246 := (bv_add r241 (0x10 : bv 64))
  %t263 = add i64 %t258, 16
  ; r247 := (read r246 (bv 64))
  %t264 = inttoptr i64 %t263 to i64*
  %t265 = load i64, i64* %t264
  ; r248 := (bitcast r245 (vec 8 double))
  %t266 = bitcast i512 %t262 to <8 x double>
  ; r249 := call strncmp(r247, r240, r242, r248)
  %t267 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strncmp(i64 %t265, i64 %t257, i64 %t259, <8 x double> %t266)
  ; r250 := (tuple_field r249 0)
  %t268 = extractvalue { i64, i64, <8 x double> } %t267, 0
  ; r251 := (tuple_field r249 1)
  %t269 = extractvalue { i64, i64, <8 x double> } %t267, 1
  ; r252 := (tuple_field r249 2)
  %t270 = extractvalue { i64, i64, <8 x double> } %t267, 2
  ; r253 := (bitcast r252 (bv 512))
  %t271 = bitcast <8 x double> %t270 to i512
  br label %block_0_414c00
block_0_414c00:
  %t272 = phi i64 [ %t268, %block_0_414bee ]
  %t273 = phi i64 [ %t269, %block_0_414bee ]
  %t274 = phi i64 [ %t257, %block_0_414bee ]
  %t275 = phi i64 [ %t258, %block_0_414bee ]
  %t276 = phi i64 [ %t259, %block_0_414bee ]
  %t277 = phi i64 [ %t265, %block_0_414bee ]
  %t278 = phi i64 [ %t260, %block_0_414bee ]
  %t279 = phi i64 [ %t261, %block_0_414bee ]
  %t280 = phi i512 [ %t271, %block_0_414bee ]
  ; r263 := (trunc r254 32)
  %t281 = trunc i64 %t272 to i32
  ; r264 := (eq r263 (0x0 : bv 32))
  %t282 = icmp eq i32 %t281, 0
  br i1 %t282, label %block_0_414c04, label %block_0_414baf
block_0_414c04:
  %t283 = phi i64 [ %t273, %block_0_414c00 ]
  %t284 = phi i64 [ %t274, %block_0_414c00 ]
  %t285 = phi i64 [ %t275, %block_0_414c00 ]
  %t286 = phi i64 [ %t276, %block_0_414c00 ]
  %t287 = phi i64 [ %t277, %block_0_414c00 ]
  %t288 = phi i64 [ %t278, %block_0_414c00 ]
  %t289 = phi i64 [ %t279, %block_0_414c00 ]
  %t290 = phi i512 [ %t280, %block_0_414c00 ]
  ; r273 := (bv_add r269 r268)
  %t291 = add i64 %t287, %t286
  ; r274 := (read r273 (bv 8))
  %t292 = inttoptr i64 %t291 to i8*
  %t293 = load i8, i8* %t292
  ; r275 := (eq r274 (0x3d : bv 8))
  %t294 = icmp eq i8 %t293, 61
  br i1 %t294, label %block_0_414c0c, label %block_0_414baf
block_0_414c0c:
  %t295 = phi i64 [ %t283, %block_0_414c04 ]
  %t296 = phi i64 [ %t285, %block_0_414c04 ]
  %t297 = phi i512 [ %t290, %block_0_414c04 ]
  ; r279 := (bv_add r277 (0x18 : bv 64))
  %t298 = add i64 %t296, 24
  ; r280 := (read r279 (bv 64))
  %t299 = inttoptr i64 %t298 to i64*
  %t300 = load i64, i64* %t299
  br label %block_0_414b07
}
define { i64, i64, <8 x double> } @strcpy(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_4165a0:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call stpcpy(arg0, arg1, arg2, r1)
  %t2 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @stpcpy(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %t1)
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, i64, <8 x double> } %t2, 1
  ; r5 := (tuple_field r2 2)
  %t5 = extractvalue { i64, i64, <8 x double> } %t2, 2
  ; r6 := (bitcast r5 (bv 512))
  %t6 = bitcast <8 x double> %t5 to i512
  br label %block_0_4165a9
block_0_4165a9:
  %t7 = phi i64 [ %t4, %block_0_4165a0 ]
  %t8 = phi i64 [ %arg0, %block_0_4165a0 ]
  %t9 = phi i512 [ %t6, %block_0_4165a0 ]
  ; r10 := (bitcast r9 (vec 8 double))
  %t10 = bitcast i512 %t9 to <8 x double>
  ; r11 := (tuple r8 r7 r10)
  %t11 = insertvalue { i64, i64, <8 x double> } undef, i64 %t8, 0
  %t12 = insertvalue { i64, i64, <8 x double> } %t11, i64 %t7, 1
  %t13 = insertvalue { i64, i64, <8 x double> } %t12, <8 x double> %t10, 2
  ret { i64, i64, <8 x double> } %t13
}
define { i64, i64, <8 x double> } @stpcpy(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_4165b0:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  br label %block_0_4165c4
block_0_4165c4:
  %t1 = phi i64 [ %arg2, %block_0_4165b0 ], [ %t20, %block_0_4165ca ]
  %t2 = phi i64 [ %arg1, %block_0_4165b0 ], [ %t21, %block_0_4165ca ]
  %t3 = phi i64 [ %arg0, %block_0_4165b0 ], [ %t23, %block_0_4165ca ]
  %t4 = phi i64 [ 72340172838076673, %block_0_4165b0 ], [ %t13, %block_0_4165ca ]
  %t5 = phi i64 [ 9259542123273814144, %block_0_4165b0 ], [ %t14, %block_0_4165ca ]
  %t6 = phi i512 [ %t0, %block_0_4165b0 ], [ %t15, %block_0_4165ca ]
  ; r7 := (trunc r2 8)
  %t7 = trunc i64 %t2 to i8
  ; r8 := (bv_and r7 (0x7 : bv 8))
  %t8 = and i8 %t7, 7
  ; r9 := (eq r8 (0x0 : bv 8))
  %t9 = icmp eq i8 %t8, 0
  br i1 %t9, label %block_0_4165e7, label %block_0_4165ca
block_0_4165ca:
  %t10 = phi i64 [ %t1, %block_0_4165c4 ]
  %t11 = phi i64 [ %t2, %block_0_4165c4 ]
  %t12 = phi i64 [ %t3, %block_0_4165c4 ]
  %t13 = phi i64 [ %t4, %block_0_4165c4 ]
  %t14 = phi i64 [ %t5, %block_0_4165c4 ]
  %t15 = phi i512 [ %t6, %block_0_4165c4 ]
  ; r16 := (read r11 (bv 8))
  %t16 = inttoptr i64 %t11 to i8*
  %t17 = load i8, i8* %t16
  ; r17 := (bv_and r10 (0xffffffffffffff00 : bv 64))
  %t18 = and i64 %t10, 18446744073709551360
  ; r18 := (uext r16 64)
  %t19 = zext i8 %t17 to i64
  ; r19 := (bv_or r17 r18)
  %t20 = or i64 %t18, %t19
  ; r20 := (bv_add r11 (0x1 : bv 64))
  %t21 = add i64 %t11, 1
  ; write r12 r16
  %t22 = inttoptr i64 %t12 to i8*
  store i8 %t17, i8* %t22
  ; r21 := (bv_add r12 (0x1 : bv 64))
  %t23 = add i64 %t12, 1
  ; r22 := (eq r16 (0x0 : bv 8))
  %t24 = icmp eq i8 %t17, 0
  br i1 %t24, label %block_0_4165d8, label %block_0_4165c4
block_0_4165d8:
  %t25 = phi i64 [ %t20, %block_0_4165ca ]
  %t26 = phi i64 [ %t23, %block_0_4165ca ]
  %t27 = phi i512 [ %t15, %block_0_4165ca ]
  ; r26 := (bv_add r24 (0xffffffffffffffff : bv 64))
  %t28 = add i64 %t26, 18446744073709551615
  ; r27 := (bitcast r25 (vec 8 double))
  %t29 = bitcast i512 %t27 to <8 x double>
  ; r28 := (tuple r26 r23 r27)
  %t30 = insertvalue { i64, i64, <8 x double> } undef, i64 %t28, 0
  %t31 = insertvalue { i64, i64, <8 x double> } %t30, i64 %t25, 1
  %t32 = insertvalue { i64, i64, <8 x double> } %t31, <8 x double> %t29, 2
  ret { i64, i64, <8 x double> } %t32
block_0_4165e0:
  %t33 = phi i64 [ %t47, %block_0_4165e7 ]
  %t34 = phi i64 [ %t48, %block_0_4165e7 ]
  %t35 = phi i64 [ %t42, %block_0_4165e7 ]
  %t36 = phi i64 [ %t43, %block_0_4165e7 ]
  %t37 = phi i64 [ %t44, %block_0_4165e7 ]
  %t38 = phi i512 [ %t45, %block_0_4165e7 ]
  ; write r31 r29
  %t39 = inttoptr i64 %t35 to i64*
  store i64 %t33, i64* %t39
  ; r35 := (bv_add r31 (0x8 : bv 64))
  %t40 = add i64 %t35, 8
  br label %block_0_4165e7
block_0_4165e7:
  %t41 = phi i64 [ %t2, %block_0_4165c4 ], [ %t34, %block_0_4165e0 ], [ %t128, %block_0_41664d ]
  %t42 = phi i64 [ %t3, %block_0_4165c4 ], [ %t40, %block_0_4165e0 ], [ %t137, %block_0_41664d ]
  %t43 = phi i64 [ %t4, %block_0_4165c4 ], [ %t36, %block_0_4165e0 ], [ %t130, %block_0_41664d ]
  %t44 = phi i64 [ %t5, %block_0_4165c4 ], [ %t37, %block_0_4165e0 ], [ %t131, %block_0_41664d ]
  %t45 = phi i512 [ %t6, %block_0_4165c4 ], [ %t38, %block_0_4165e0 ], [ %t132, %block_0_41664d ]
  ; r41 := (read r36 (bv 64))
  %t46 = inttoptr i64 %t41 to i64*
  %t47 = load i64, i64* %t46
  ; r42 := (bv_add r36 (0x8 : bv 64))
  %t48 = add i64 %t41, 8
  ; r43 := (bv_sub r41 r38)
  %t49 = sub i64 %t47, %t43
  ; r44 := (bv_and r43 r39)
  %t50 = and i64 %t49, %t44
  ; r45 := (eq r44 (0x0 : bv 64))
  %t51 = icmp eq i64 %t50, 0
  br i1 %t51, label %block_0_4165e0, label %block_0_4165f9
block_0_4165f9:
  %t52 = phi i64 [ %t47, %block_0_4165e7 ]
  %t53 = phi i64 [ %t48, %block_0_4165e7 ]
  %t54 = phi i64 [ %t42, %block_0_4165e7 ]
  %t55 = phi i64 [ %t43, %block_0_4165e7 ]
  %t56 = phi i64 [ %t44, %block_0_4165e7 ]
  %t57 = phi i512 [ %t45, %block_0_4165e7 ]
  ; r52 := (trunc r46 8)
  %t58 = trunc i64 %t52 to i8
  ; write r48 r52
  %t59 = inttoptr i64 %t54 to i8*
  store i8 %t58, i8* %t59
  ; r53 := (eq r52 (0x0 : bv 8))
  %t60 = icmp eq i8 %t58, 0
  br i1 %t60, label %block_0_416660, label %block_0_4165ff
block_0_4165ff:
  %t61 = phi i64 [ %t52, %block_0_4165f9 ]
  %t62 = phi i64 [ %t53, %block_0_4165f9 ]
  %t63 = phi i64 [ %t54, %block_0_4165f9 ]
  %t64 = phi i64 [ %t55, %block_0_4165f9 ]
  %t65 = phi i64 [ %t56, %block_0_4165f9 ]
  %t66 = phi i512 [ %t57, %block_0_4165f9 ]
  ; r60 := (bv_add r56 (0x1 : bv 64))
  %t67 = add i64 %t63, 1
  ; r61 := (bv_shr r54 (0x8 : bv 64))
  %t68 = lshr i64 %t61, 8
  ; r62 := (trunc r61 8)
  %t69 = trunc i64 %t68 to i8
  ; write r60 r62
  %t70 = inttoptr i64 %t67 to i8*
  store i8 %t69, i8* %t70
  ; r63 := (eq r62 (0x0 : bv 8))
  %t71 = icmp eq i8 %t69, 0
  br i1 %t71, label %block_0_416660, label %block_0_41660c
block_0_41660c:
  %t72 = phi i64 [ %t68, %block_0_4165ff ]
  %t73 = phi i64 [ %t62, %block_0_4165ff ]
  %t74 = phi i64 [ %t67, %block_0_4165ff ]
  %t75 = phi i64 [ %t64, %block_0_4165ff ]
  %t76 = phi i64 [ %t65, %block_0_4165ff ]
  %t77 = phi i512 [ %t66, %block_0_4165ff ]
  ; r70 := (bv_add r66 (0x1 : bv 64))
  %t78 = add i64 %t74, 1
  ; r71 := (bv_shr r64 (0x8 : bv 64))
  %t79 = lshr i64 %t72, 8
  ; r72 := (trunc r71 8)
  %t80 = trunc i64 %t79 to i8
  ; write r70 r72
  %t81 = inttoptr i64 %t78 to i8*
  store i8 %t80, i8* %t81
  ; r73 := (eq r72 (0x0 : bv 8))
  %t82 = icmp eq i8 %t80, 0
  br i1 %t82, label %block_0_416660, label %block_0_416619
block_0_416619:
  %t83 = phi i64 [ %t79, %block_0_41660c ]
  %t84 = phi i64 [ %t73, %block_0_41660c ]
  %t85 = phi i64 [ %t78, %block_0_41660c ]
  %t86 = phi i64 [ %t75, %block_0_41660c ]
  %t87 = phi i64 [ %t76, %block_0_41660c ]
  %t88 = phi i512 [ %t77, %block_0_41660c ]
  ; r80 := (bv_add r76 (0x1 : bv 64))
  %t89 = add i64 %t85, 1
  ; r81 := (bv_shr r74 (0x8 : bv 64))
  %t90 = lshr i64 %t83, 8
  ; r82 := (trunc r81 8)
  %t91 = trunc i64 %t90 to i8
  ; write r80 r82
  %t92 = inttoptr i64 %t89 to i8*
  store i8 %t91, i8* %t92
  ; r83 := (eq r82 (0x0 : bv 8))
  %t93 = icmp eq i8 %t91, 0
  br i1 %t93, label %block_0_416660, label %block_0_416626
block_0_416626:
  %t94 = phi i64 [ %t90, %block_0_416619 ]
  %t95 = phi i64 [ %t84, %block_0_416619 ]
  %t96 = phi i64 [ %t89, %block_0_416619 ]
  %t97 = phi i64 [ %t86, %block_0_416619 ]
  %t98 = phi i64 [ %t87, %block_0_416619 ]
  %t99 = phi i512 [ %t88, %block_0_416619 ]
  ; r90 := (bv_add r86 (0x1 : bv 64))
  %t100 = add i64 %t96, 1
  ; r91 := (bv_shr r84 (0x8 : bv 64))
  %t101 = lshr i64 %t94, 8
  ; r92 := (trunc r91 8)
  %t102 = trunc i64 %t101 to i8
  ; write r90 r92
  %t103 = inttoptr i64 %t100 to i8*
  store i8 %t102, i8* %t103
  ; r93 := (eq r92 (0x0 : bv 8))
  %t104 = icmp eq i8 %t102, 0
  br i1 %t104, label %block_0_416660, label %block_0_416633
block_0_416633:
  %t105 = phi i64 [ %t101, %block_0_416626 ]
  %t106 = phi i64 [ %t95, %block_0_416626 ]
  %t107 = phi i64 [ %t100, %block_0_416626 ]
  %t108 = phi i64 [ %t97, %block_0_416626 ]
  %t109 = phi i64 [ %t98, %block_0_416626 ]
  %t110 = phi i512 [ %t99, %block_0_416626 ]
  ; r100 := (bv_add r96 (0x1 : bv 64))
  %t111 = add i64 %t107, 1
  ; r101 := (bv_shr r94 (0x8 : bv 64))
  %t112 = lshr i64 %t105, 8
  ; r102 := (trunc r101 8)
  %t113 = trunc i64 %t112 to i8
  ; write r100 r102
  %t114 = inttoptr i64 %t111 to i8*
  store i8 %t113, i8* %t114
  ; r103 := (eq r102 (0x0 : bv 8))
  %t115 = icmp eq i8 %t113, 0
  br i1 %t115, label %block_0_416660, label %block_0_416640
block_0_416640:
  %t116 = phi i64 [ %t112, %block_0_416633 ]
  %t117 = phi i64 [ %t106, %block_0_416633 ]
  %t118 = phi i64 [ %t111, %block_0_416633 ]
  %t119 = phi i64 [ %t108, %block_0_416633 ]
  %t120 = phi i64 [ %t109, %block_0_416633 ]
  %t121 = phi i512 [ %t110, %block_0_416633 ]
  ; r110 := (bv_add r106 (0x1 : bv 64))
  %t122 = add i64 %t118, 1
  ; r111 := (bv_shr r104 (0x8 : bv 64))
  %t123 = lshr i64 %t116, 8
  ; r112 := (trunc r111 8)
  %t124 = trunc i64 %t123 to i8
  ; write r110 r112
  %t125 = inttoptr i64 %t122 to i8*
  store i8 %t124, i8* %t125
  ; r113 := (eq r112 (0x0 : bv 8))
  %t126 = icmp eq i8 %t124, 0
  br i1 %t126, label %block_0_416660, label %block_0_41664d
block_0_41664d:
  %t127 = phi i64 [ %t123, %block_0_416640 ]
  %t128 = phi i64 [ %t117, %block_0_416640 ]
  %t129 = phi i64 [ %t122, %block_0_416640 ]
  %t130 = phi i64 [ %t119, %block_0_416640 ]
  %t131 = phi i64 [ %t120, %block_0_416640 ]
  %t132 = phi i512 [ %t121, %block_0_416640 ]
  ; r120 := (bv_add r116 (0x1 : bv 64))
  %t133 = add i64 %t129, 1
  ; r121 := (bv_shr r114 (0x8 : bv 64))
  %t134 = lshr i64 %t127, 8
  ; r122 := (trunc r121 8)
  %t135 = trunc i64 %t134 to i8
  ; write r120 r122
  %t136 = inttoptr i64 %t133 to i8*
  store i8 %t135, i8* %t136
  ; r123 := (bv_add r116 (0x2 : bv 64))
  %t137 = add i64 %t129, 2
  ; r124 := (eq r122 (0x0 : bv 8))
  %t138 = icmp eq i8 %t135, 0
  br i1 %t138, label %block_0_41665d, label %block_0_4165e7
block_0_41665d:
  %t139 = phi i64 [ %t134, %block_0_41664d ]
  %t140 = phi i64 [ %t137, %block_0_41664d ]
  %t141 = phi i512 [ %t132, %block_0_41664d ]
  ; r128 := (bv_add r126 (0xffffffffffffffff : bv 64))
  %t142 = add i64 %t140, 18446744073709551615
  br label %block_0_416660
block_0_416660:
  %t143 = phi i64 [ %t52, %block_0_4165f9 ], [ %t68, %block_0_4165ff ], [ %t79, %block_0_41660c ], [ %t90, %block_0_416619 ], [ %t101, %block_0_416626 ], [ %t112, %block_0_416633 ], [ %t123, %block_0_416640 ], [ %t139, %block_0_41665d ]
  %t144 = phi i64 [ %t54, %block_0_4165f9 ], [ %t67, %block_0_4165ff ], [ %t78, %block_0_41660c ], [ %t89, %block_0_416619 ], [ %t100, %block_0_416626 ], [ %t111, %block_0_416633 ], [ %t122, %block_0_416640 ], [ %t142, %block_0_41665d ]
  %t145 = phi i512 [ %t57, %block_0_4165f9 ], [ %t66, %block_0_4165ff ], [ %t77, %block_0_41660c ], [ %t88, %block_0_416619 ], [ %t99, %block_0_416626 ], [ %t110, %block_0_416633 ], [ %t121, %block_0_416640 ], [ %t141, %block_0_41665d ]
  ; r132 := (bitcast r131 (vec 8 double))
  %t146 = bitcast i512 %t145 to <8 x double>
  ; r133 := (tuple r130 r129 r132)
  %t147 = insertvalue { i64, i64, <8 x double> } undef, i64 %t144, 0
  %t148 = insertvalue { i64, i64, <8 x double> } %t147, i64 %t143, 1
  %t149 = insertvalue { i64, i64, <8 x double> } %t148, <8 x double> %t146, 2
  ret { i64, i64, <8 x double> } %t149
}
define { i64, <8 x double> } @getprogname(<8 x double> %arg0) {
block_0_4166e0:
  ; r0 := (read (0x630040 : bv 64) (bv 64))
  %t0 = inttoptr i64 6488128 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (bitcast arg0 (bv 512))
  %t2 = bitcast <8 x double> %arg0 to i512
  ; r2 := (bitcast r1 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r3 := (tuple r0 r2)
  %t4 = insertvalue { i64, <8 x double> } undef, i64 %t1, 0
  %t5 = insertvalue { i64, <8 x double> } %t4, <8 x double> %t3, 1
  ret { i64, <8 x double> } %t5
}
define void @__fpclassifyf(<8 x double> %arg0) {
block_0_4166f0:
  ; r0 := (bitcast arg0 (bv 512))
  %t0 = bitcast <8 x double> %arg0 to i512
  ; r1 := (trunc r0 32)
  %t1 = trunc i512 %t0 to i32
  ; r2 := (bv_shr r1 (0x10 : bv 32))
  %t2 = lshr i32 %t1, 16
  ; r3 := (uext r2 64)
  %t3 = zext i32 %t2 to i64
  ; r4 := (trunc r2 16)
  %t4 = trunc i32 %t2 to i16
  ; r5 := (bv_and r4 (0x7f80 : bv 16))
  %t5 = and i16 %t4, 32640
  ; r6 := (eq r5 (0x0 : bv 16))
  %t6 = icmp eq i16 %t5, 0
  ; r7 := (bv_and r3 (0xffffffffffff0000 : bv 64))
  %t7 = and i64 %t3, 18446744073709486080
  ; r8 := (uext r5 64)
  %t8 = zext i16 %t5 to i64
  ; r9 := (bv_or r7 r8)
  %t9 = or i64 %t7, %t8
  br i1 %t6, label %block_0_416708, label %block_0_416720
block_0_416708:
  ret void
block_0_416720:
  %t10 = phi i64 [ %t9, %block_0_4166f0 ]
  ; r11 := (trunc r10 16)
  %t11 = trunc i64 %t10 to i16
  ; r12 := (eq r11 (0x7f80 : bv 16))
  %t12 = icmp eq i16 %t11, 32640
  br i1 %t12, label %block_0_41672c, label %block_0_41673a
block_0_41672c:
  br label %block_0_41673a
block_0_41673a:
  ret void
}
define { i64, i64, <8 x double> } @__fpclassifyd(<8 x double> %arg0) {
block_0_416740:
  ; r0 := (bitcast arg0 (bv 512))
  %t0 = bitcast <8 x double> %arg0 to i512
  ; r1 := (trunc r0 64)
  %t1 = trunc i512 %t0 to i64
  ; r2 := (bv_shr r1 (0x30 : bv 64))
  %t2 = lshr i64 %t1, 48
  ; r3 := (trunc r2 32)
  %t3 = trunc i64 %t2 to i32
  ; r4 := (uext r3 64)
  %t4 = zext i32 %t3 to i64
  ; r5 := (trunc r2 16)
  %t5 = trunc i64 %t2 to i16
  ; r6 := (bv_and r5 (0x7ff0 : bv 16))
  %t6 = and i16 %t5, 32752
  ; r7 := (eq r6 (0x0 : bv 16))
  %t7 = icmp eq i16 %t6, 0
  ; r8 := (bv_and r4 (0xffffffffffff0000 : bv 64))
  %t8 = and i64 %t4, 18446744073709486080
  ; r9 := (uext r6 64)
  %t9 = zext i16 %t6 to i64
  ; r10 := (bv_or r8 r9)
  %t10 = or i64 %t8, %t9
  ; r11 := (bitcast arg0 (bv 512))
  %t11 = bitcast <8 x double> %arg0 to i512
  ; r12 := (bitcast arg0 (bv 512))
  %t12 = bitcast <8 x double> %arg0 to i512
  br i1 %t7, label %block_0_41675b, label %block_0_416775
block_0_41675b:
  %t13 = phi i64 [ %t1, %block_0_416740 ]
  %t14 = phi i512 [ %t11, %block_0_416740 ]
  ; r15 := (bv_shr r13 (0x20 : bv 64))
  %t15 = lshr i64 %t13, 32
  ; r16 := (trunc r15 32)
  %t16 = trunc i64 %t15 to i32
  ; r17 := (bv_and r16 (0xfffff : bv 32))
  %t17 = and i32 %t16, 1048575
  ; r18 := (trunc r13 32)
  %t18 = trunc i64 %t13 to i32
  ; r19 := (bv_or r17 r18)
  %t19 = or i32 %t17, %t18
  ; r20 := (bv_ult r19 (0x1 : bv 32))
  %t20 = icmp ult i32 %t19, 1
  ; r21 := (mux r20 (0x1 : bv 32) (0x0 : bv 32))
  %t21 = select i1 %t20, i32 1, i32 0
  ; r22 := (bv_add r19 r21)
  %t22 = add i32 %t19, %t21
  ; r23 := (bv_sub r19 r22)
  %t23 = sub i32 %t19, %t22
  ; r24 := (bv_and r23 (0x8 : bv 32))
  %t24 = and i32 %t23, 8
  ; r25 := (bv_add r24 (0x8 : bv 32))
  %t25 = add i32 %t24, 8
  ; r26 := (uext r25 64)
  %t26 = zext i32 %t25 to i64
  ; r27 := (bitcast r14 (vec 8 double))
  %t27 = bitcast i512 %t14 to <8 x double>
  ; r28 := (tuple r26 r13 r27)
  %t28 = insertvalue { i64, i64, <8 x double> } undef, i64 %t26, 0
  %t29 = insertvalue { i64, i64, <8 x double> } %t28, i64 %t13, 1
  %t30 = insertvalue { i64, i64, <8 x double> } %t29, <8 x double> %t27, 2
  ret { i64, i64, <8 x double> } %t30
block_0_416775:
  %t31 = phi i64 [ %t10, %block_0_416740 ]
  %t32 = phi i64 [ %t1, %block_0_416740 ]
  %t33 = phi i512 [ %t12, %block_0_416740 ]
  ; r32 := (trunc r29 16)
  %t34 = trunc i64 %t31 to i16
  ; r33 := (eq r32 (0x7ff0 : bv 16))
  %t35 = icmp eq i16 %t34, 32752
  br i1 %t35, label %block_0_416781, label %block_0_416797
block_0_416781:
  %t36 = phi i64 [ %t32, %block_0_416775 ]
  %t37 = phi i512 [ %t33, %block_0_416775 ]
  ; r36 := (bv_shr r34 (0x20 : bv 64))
  %t38 = lshr i64 %t36, 32
  ; r37 := (trunc r36 32)
  %t39 = trunc i64 %t38 to i32
  ; r38 := (bv_and r37 (0xfffff : bv 32))
  %t40 = and i32 %t39, 1048575
  ; r39 := (trunc r34 32)
  %t41 = trunc i64 %t36 to i32
  ; r40 := (bv_or r38 r39)
  %t42 = or i32 %t40, %t41
  ; r41 := (bv_ult r40 (0x1 : bv 32))
  %t43 = icmp ult i32 %t42, 1
  ; r42 := (mux r41 (0x1 : bv 32) (0x0 : bv 32))
  %t44 = select i1 %t43, i32 1, i32 0
  ; r43 := (bv_add r40 r42)
  %t45 = add i32 %t42, %t44
  ; r44 := (bv_sub r40 r43)
  %t46 = sub i32 %t42, %t45
  ; r45 := (bv_add r44 (0x2 : bv 32))
  %t47 = add i32 %t46, 2
  ; r46 := (uext r45 64)
  %t48 = zext i32 %t47 to i64
  br label %block_0_416797
block_0_416797:
  %t49 = phi i64 [ 4, %block_0_416775 ], [ %t48, %block_0_416781 ]
  %t50 = phi i64 [ %t32, %block_0_416775 ], [ %t36, %block_0_416781 ]
  %t51 = phi i512 [ %t33, %block_0_416775 ], [ %t37, %block_0_416781 ]
  ; r50 := (bitcast r49 (vec 8 double))
  %t52 = bitcast i512 %t51 to <8 x double>
  ; r51 := (tuple r47 r48 r50)
  %t53 = insertvalue { i64, i64, <8 x double> } undef, i64 %t49, 0
  %t54 = insertvalue { i64, i64, <8 x double> } %t53, i64 %t50, 1
  %t55 = insertvalue { i64, i64, <8 x double> } %t54, <8 x double> %t52, 2
  ret { i64, i64, <8 x double> } %t55
}
define { i64, i64, <8 x double> } @strncmp(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_416800:
  ; r0 := (eq arg2 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg2, 0
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  ; r2 := (bitcast arg3 (bv 512))
  %t2 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_416805, label %block_0_41680b
block_0_416805:
  %t3 = phi i512 [ %t1, %block_0_416800 ]
  br label %block_0_416823
block_0_416807:
  %t4 = phi i64 [ %t31, %block_0_41681d ]
  %t5 = phi i64 [ %t28, %block_0_41681d ]
  %t6 = phi i64 [ %t29, %block_0_41681d ]
  %t7 = phi i512 [ %t30, %block_0_41681d ]
  ; r8 := (bv_add r6 (0x1 : bv 64))
  %t8 = add i64 %t6, 1
  br label %block_0_41680b
block_0_41680b:
  %t9 = phi i64 [ %arg2, %block_0_416800 ], [ %t4, %block_0_416807 ]
  %t10 = phi i64 [ %arg1, %block_0_416800 ], [ %t5, %block_0_416807 ]
  %t11 = phi i64 [ %arg0, %block_0_416800 ], [ %t8, %block_0_416807 ]
  %t12 = phi i512 [ %t2, %block_0_416800 ], [ %t7, %block_0_416807 ]
  ; r13 := (read r10 (bv 8))
  %t13 = inttoptr i64 %t10 to i8*
  %t14 = load i8, i8* %t13
  ; r14 := (read r11 (bv 8))
  %t15 = inttoptr i64 %t11 to i8*
  %t16 = load i8, i8* %t15
  ; r15 := (uext r14 64)
  %t17 = zext i8 %t16 to i64
  ; r16 := (bv_add r10 (0x1 : bv 64))
  %t18 = add i64 %t10, 1
  ; r17 := (eq r14 r13)
  %t19 = icmp eq i8 %t16, %t14
  br i1 %t19, label %block_0_416819, label %block_0_416828
block_0_416819:
  %t20 = phi i64 [ %t17, %block_0_41680b ]
  %t21 = phi i64 [ %t9, %block_0_41680b ]
  %t22 = phi i64 [ %t18, %block_0_41680b ]
  %t23 = phi i64 [ %t11, %block_0_41680b ]
  %t24 = phi i512 [ %t12, %block_0_41680b ]
  ; r23 := (trunc r18 8)
  %t25 = trunc i64 %t20 to i8
  ; r24 := (eq r23 (0x0 : bv 8))
  %t26 = icmp eq i8 %t25, 0
  br i1 %t26, label %block_0_416823, label %block_0_41681d
block_0_41681d:
  %t27 = phi i64 [ %t21, %block_0_416819 ]
  %t28 = phi i64 [ %t22, %block_0_416819 ]
  %t29 = phi i64 [ %t23, %block_0_416819 ]
  %t30 = phi i512 [ %t24, %block_0_416819 ]
  ; r29 := (bv_add r25 (0xffffffffffffffff : bv 64))
  %t31 = add i64 %t27, 18446744073709551615
  ; r30 := (eq r25 (0x1 : bv 64))
  %t32 = icmp eq i64 %t27, 1
  br i1 %t32, label %block_0_416823, label %block_0_416807
block_0_416823:
  %t33 = phi i512 [ %t3, %block_0_416805 ], [ %t24, %block_0_416819 ], [ %t30, %block_0_41681d ]
  ; r32 := (bitcast r31 (vec 8 double))
  %t34 = bitcast i512 %t33 to <8 x double>
  ; r33 := (tuple (0x0 : bv 64) (0x0 : bv 64) r32)
  %t35 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t36 = insertvalue { i64, i64, <8 x double> } %t35, i64 0, 1
  %t37 = insertvalue { i64, i64, <8 x double> } %t36, <8 x double> %t34, 2
  ret { i64, i64, <8 x double> } %t37
block_0_416828:
  %t38 = phi i64 [ %t17, %block_0_41680b ]
  %t39 = phi i64 [ %t18, %block_0_41680b ]
  %t40 = phi i512 [ %t12, %block_0_41680b ]
  ; r37 := (bv_add r35 (0xffffffffffffffff : bv 64))
  %t41 = add i64 %t39, 18446744073709551615
  ; r38 := (read r37 (bv 8))
  %t42 = inttoptr i64 %t41 to i8*
  %t43 = load i8, i8* %t42
  ; r39 := (uext r38 32)
  %t44 = zext i8 %t43 to i32
  ; r40 := (trunc r34 8)
  %t45 = trunc i64 %t38 to i8
  ; r41 := (uext r40 32)
  %t46 = zext i8 %t45 to i32
  ; r42 := (bv_sub r41 r39)
  %t47 = sub i32 %t46, %t44
  ; r43 := (uext r42 64)
  %t48 = zext i32 %t47 to i64
  ; r44 := (bitcast r36 (vec 8 double))
  %t49 = bitcast i512 %t40 to <8 x double>
  ; r45 := (tuple r43 r43 r44)
  %t50 = insertvalue { i64, i64, <8 x double> } undef, i64 %t48, 0
  %t51 = insertvalue { i64, i64, <8 x double> } %t50, i64 %t48, 1
  %t52 = insertvalue { i64, i64, <8 x double> } %t51, <8 x double> %t49, 2
  ret { i64, i64, <8 x double> } %t52
}
define { i64, i64, <8 x double> } @strlen(i64 %arg0, <8 x double> %arg1) {
block_0_416840:
  ; r0 := (bv_and arg0 (0xfffffffffffffff8 : bv 64))
  %t0 = and i64 %arg0, 18446744073709551608
  ; r1 := (read r0 (bv 64))
  %t1 = inttoptr i64 %t0 to i64*
  %t2 = load i64, i64* %t1
  ; r2 := (bv_add r0 (0x8 : bv 64))
  %t3 = add i64 %t0, 8
  ; r3 := (bv_add r1 (0xfefefefefefefeff : bv 64))
  %t4 = add i64 %t2, 18374403900871474943
  ; r4 := (bv_complement r1)
  %t5 = xor i64 %t2, -1
  ; r5 := (bv_and r3 r4)
  %t6 = and i64 %t4, %t5
  ; r6 := (bv_and r5 (0x8080808080808080 : bv 64))
  %t7 = and i64 %t6, 9259542123273814144
  ; r7 := (eq r6 (0x0 : bv 64))
  %t8 = icmp eq i64 %t7, 0
  ; r8 := (bitcast arg1 (bv 512))
  %t9 = bitcast <8 x double> %arg1 to i512
  ; r9 := (bitcast arg1 (bv 512))
  %t10 = bitcast <8 x double> %arg1 to i512
  br i1 %t8, label %block_0_416892, label %block_0_416871
block_0_416871:
  %t11 = phi i64 [ %t3, %block_0_416840 ]
  %t12 = phi i64 [ 9259542123273814144, %block_0_416840 ]
  %t13 = phi i64 [ %arg0, %block_0_416840 ]
  %t14 = phi i512 [ %t10, %block_0_416840 ]
  ; r14 := (bv_ult r12 r10)
  %t15 = icmp ult i64 %t13, %t11
  br i1 %t15, label %block_0_416876, label %block_0_416892
block_0_416876:
  %t16 = phi i64 [ %t11, %block_0_416871 ]
  %t17 = phi i64 [ %t12, %block_0_416871 ]
  %t18 = phi i64 [ %t13, %block_0_416871 ]
  %t19 = phi i512 [ %t14, %block_0_416871 ]
  ; r19 := (read r17 (bv 8))
  %t20 = inttoptr i64 %t18 to i8*
  %t21 = load i8, i8* %t20
  ; r20 := (eq r19 (0x0 : bv 8))
  %t22 = icmp eq i8 %t21, 0
  br i1 %t22, label %block_0_4168fa, label %block_0_41687d
block_0_41687d:
  %t23 = phi i64 [ %t16, %block_0_416876 ]
  %t24 = phi i64 [ %t17, %block_0_416876 ]
  %t25 = phi i64 [ %t18, %block_0_416876 ]
  %t26 = phi i512 [ %t19, %block_0_416876 ]
  br label %block_0_416887
block_0_416882:
  %t27 = phi i64 [ %t43, %block_0_416887 ]
  %t28 = phi i64 [ %t36, %block_0_416887 ]
  %t29 = phi i64 [ %t37, %block_0_416887 ]
  %t30 = phi i64 [ %t38, %block_0_416887 ]
  %t31 = phi i512 [ %t39, %block_0_416887 ]
  ; r30 := (read r25 (bv 8))
  %t32 = inttoptr i64 %t27 to i8*
  %t33 = load i8, i8* %t32
  ; r31 := (eq r30 (0x0 : bv 8))
  %t34 = icmp eq i8 %t33, 0
  br i1 %t34, label %block_0_4168f6, label %block_0_416887
block_0_416887:
  %t35 = phi i64 [ %t25, %block_0_41687d ], [ %t27, %block_0_416882 ]
  %t36 = phi i64 [ %t23, %block_0_41687d ], [ %t28, %block_0_416882 ]
  %t37 = phi i64 [ %t24, %block_0_41687d ], [ %t29, %block_0_416882 ]
  %t38 = phi i64 [ %t25, %block_0_41687d ], [ %t30, %block_0_416882 ]
  %t39 = phi i512 [ %t26, %block_0_41687d ], [ %t31, %block_0_416882 ]
  ; r37 := (bv_add r32 (0x1 : bv 64))
  %t40 = add i64 %t35, 1
  ; r38 := (bv_ult r37 r33)
  %t41 = icmp ult i64 %t40, %t36
  ; r39 := (trunc r37 32)
  %t42 = trunc i64 %t40 to i32
  ; r40 := (uext r39 64)
  %t43 = zext i32 %t42 to i64
  br i1 %t41, label %block_0_416882, label %block_0_416892
block_0_416892:
  %t44 = phi i64 [ %t3, %block_0_416840 ], [ %t11, %block_0_416871 ], [ %t36, %block_0_416887 ]
  %t45 = phi i64 [ %arg0, %block_0_416840 ], [ %t13, %block_0_416871 ], [ %t38, %block_0_416887 ]
  %t46 = phi i512 [ %t9, %block_0_416840 ], [ %t14, %block_0_416871 ], [ %t39, %block_0_416887 ]
  br label %block_0_4168dc
block_0_4168a8:
  %t47 = phi i64 [ %t135, %block_0_4168ee ]
  %t48 = phi i64 [ %t136, %block_0_4168ee ]
  %t49 = phi i64 [ %t137, %block_0_4168ee ]
  %t50 = phi i64 [ %t138, %block_0_4168ee ]
  %t51 = phi i64 [ %t139, %block_0_4168ee ]
  %t52 = phi i512 [ %t140, %block_0_4168ee ]
  ; r50 := (bv_add r44 (0x1 : bv 64))
  %t53 = add i64 %t47, 1
  ; r51 := (read r50 (bv 8))
  %t54 = inttoptr i64 %t53 to i8*
  %t55 = load i8, i8* %t54
  ; r52 := (eq r51 (0x0 : bv 8))
  %t56 = icmp eq i8 %t55, 0
  br i1 %t56, label %block_0_4168fc, label %block_0_4168ae
block_0_4168ae:
  %t57 = phi i64 [ %t47, %block_0_4168a8 ]
  %t58 = phi i64 [ %t48, %block_0_4168a8 ]
  %t59 = phi i64 [ %t49, %block_0_4168a8 ]
  %t60 = phi i64 [ %t50, %block_0_4168a8 ]
  %t61 = phi i64 [ %t51, %block_0_4168a8 ]
  %t62 = phi i512 [ %t52, %block_0_4168a8 ]
  ; r59 := (bv_add r53 (0x2 : bv 64))
  %t63 = add i64 %t57, 2
  ; r60 := (read r59 (bv 8))
  %t64 = inttoptr i64 %t63 to i8*
  %t65 = load i8, i8* %t64
  ; r61 := (eq r60 (0x0 : bv 8))
  %t66 = icmp eq i8 %t65, 0
  br i1 %t66, label %block_0_416904, label %block_0_4168b4
block_0_4168b4:
  %t67 = phi i64 [ %t57, %block_0_4168ae ]
  %t68 = phi i64 [ %t58, %block_0_4168ae ]
  %t69 = phi i64 [ %t59, %block_0_4168ae ]
  %t70 = phi i64 [ %t60, %block_0_4168ae ]
  %t71 = phi i64 [ %t61, %block_0_4168ae ]
  %t72 = phi i512 [ %t62, %block_0_4168ae ]
  ; r68 := (bv_add r62 (0x3 : bv 64))
  %t73 = add i64 %t67, 3
  ; r69 := (read r68 (bv 8))
  %t74 = inttoptr i64 %t73 to i8*
  %t75 = load i8, i8* %t74
  ; r70 := (eq r69 (0x0 : bv 8))
  %t76 = icmp eq i8 %t75, 0
  br i1 %t76, label %block_0_41690c, label %block_0_4168ba
block_0_4168ba:
  %t77 = phi i64 [ %t67, %block_0_4168b4 ]
  %t78 = phi i64 [ %t68, %block_0_4168b4 ]
  %t79 = phi i64 [ %t69, %block_0_4168b4 ]
  %t80 = phi i64 [ %t70, %block_0_4168b4 ]
  %t81 = phi i64 [ %t71, %block_0_4168b4 ]
  %t82 = phi i512 [ %t72, %block_0_4168b4 ]
  ; r77 := (bv_add r71 (0x4 : bv 64))
  %t83 = add i64 %t77, 4
  ; r78 := (read r77 (bv 8))
  %t84 = inttoptr i64 %t83 to i8*
  %t85 = load i8, i8* %t84
  ; r79 := (eq r78 (0x0 : bv 8))
  %t86 = icmp eq i8 %t85, 0
  br i1 %t86, label %block_0_416914, label %block_0_4168c2
block_0_4168c2:
  %t87 = phi i64 [ %t77, %block_0_4168ba ]
  %t88 = phi i64 [ %t78, %block_0_4168ba ]
  %t89 = phi i64 [ %t79, %block_0_4168ba ]
  %t90 = phi i64 [ %t80, %block_0_4168ba ]
  %t91 = phi i64 [ %t81, %block_0_4168ba ]
  %t92 = phi i512 [ %t82, %block_0_4168ba ]
  ; r86 := (bv_add r80 (0x5 : bv 64))
  %t93 = add i64 %t87, 5
  ; r87 := (read r86 (bv 8))
  %t94 = inttoptr i64 %t93 to i8*
  %t95 = load i8, i8* %t94
  ; r88 := (eq r87 (0x0 : bv 8))
  %t96 = icmp eq i8 %t95, 0
  br i1 %t96, label %block_0_41691c, label %block_0_4168c8
block_0_4168c8:
  %t97 = phi i64 [ %t87, %block_0_4168c2 ]
  %t98 = phi i64 [ %t88, %block_0_4168c2 ]
  %t99 = phi i64 [ %t89, %block_0_4168c2 ]
  %t100 = phi i64 [ %t90, %block_0_4168c2 ]
  %t101 = phi i64 [ %t91, %block_0_4168c2 ]
  %t102 = phi i512 [ %t92, %block_0_4168c2 ]
  ; r95 := (bv_add r89 (0x6 : bv 64))
  %t103 = add i64 %t97, 6
  ; r96 := (read r95 (bv 8))
  %t104 = inttoptr i64 %t103 to i8*
  %t105 = load i8, i8* %t104
  ; r97 := (eq r96 (0x0 : bv 8))
  %t106 = icmp eq i8 %t105, 0
  br i1 %t106, label %block_0_416924, label %block_0_4168d2
block_0_4168d2:
  %t107 = phi i64 [ %t97, %block_0_4168c8 ]
  %t108 = phi i64 [ %t98, %block_0_4168c8 ]
  %t109 = phi i64 [ %t99, %block_0_4168c8 ]
  %t110 = phi i64 [ %t100, %block_0_4168c8 ]
  %t111 = phi i64 [ %t101, %block_0_4168c8 ]
  %t112 = phi i512 [ %t102, %block_0_4168c8 ]
  ; r104 := (bv_add r98 (0x7 : bv 64))
  %t113 = add i64 %t107, 7
  ; r105 := (read r104 (bv 8))
  %t114 = inttoptr i64 %t113 to i8*
  %t115 = load i8, i8* %t114
  ; r106 := (eq r105 (0x0 : bv 8))
  %t116 = icmp eq i8 %t115, 0
  br i1 %t116, label %block_0_41692c, label %block_0_4168d8
block_0_4168d8:
  %t117 = phi i64 [ %t107, %block_0_4168d2 ], [ %t123, %block_0_4168dc ]
  %t118 = phi i64 [ %t109, %block_0_4168d2 ], [ %t124, %block_0_4168dc ]
  %t119 = phi i64 [ %t110, %block_0_4168d2 ], [ %t125, %block_0_4168dc ]
  %t120 = phi i64 [ %t111, %block_0_4168d2 ], [ %t126, %block_0_4168dc ]
  %t121 = phi i512 [ %t112, %block_0_4168d2 ], [ %t127, %block_0_4168dc ]
  ; r112 := (bv_add r107 (0x8 : bv 64))
  %t122 = add i64 %t117, 8
  br label %block_0_4168dc
block_0_4168dc:
  %t123 = phi i64 [ %t44, %block_0_416892 ], [ %t122, %block_0_4168d8 ]
  %t124 = phi i64 [ 9259542123273814144, %block_0_416892 ], [ %t118, %block_0_4168d8 ]
  %t125 = phi i64 [ %t45, %block_0_416892 ], [ %t119, %block_0_4168d8 ]
  %t126 = phi i64 [ 18374403900871474943, %block_0_416892 ], [ %t120, %block_0_4168d8 ]
  %t127 = phi i512 [ %t46, %block_0_416892 ], [ %t121, %block_0_4168d8 ]
  ; r118 := (read r113 (bv 64))
  %t128 = inttoptr i64 %t123 to i64*
  %t129 = load i64, i64* %t128
  ; r119 := (bv_add r118 r116)
  %t130 = add i64 %t129, %t126
  ; r120 := (bv_complement r118)
  %t131 = xor i64 %t129, -1
  ; r121 := (bv_and r119 r120)
  %t132 = and i64 %t130, %t131
  ; r122 := (bv_and r121 r114)
  %t133 = and i64 %t132, %t124
  ; r123 := (eq r122 (0x0 : bv 64))
  %t134 = icmp eq i64 %t133, 0
  br i1 %t134, label %block_0_4168d8, label %block_0_4168ee
block_0_4168ee:
  %t135 = phi i64 [ %t123, %block_0_4168dc ]
  %t136 = phi i64 [ %t132, %block_0_4168dc ]
  %t137 = phi i64 [ %t124, %block_0_4168dc ]
  %t138 = phi i64 [ %t125, %block_0_4168dc ]
  %t139 = phi i64 [ %t126, %block_0_4168dc ]
  %t140 = phi i512 [ %t127, %block_0_4168dc ]
  ; r130 := (read r124 (bv 8))
  %t141 = inttoptr i64 %t135 to i8*
  %t142 = load i8, i8* %t141
  ; r131 := (eq r130 (0x0 : bv 8))
  %t143 = icmp eq i8 %t142, 0
  br i1 %t143, label %block_0_4168f3, label %block_0_4168a8
block_0_4168f3:
  %t144 = phi i64 [ %t135, %block_0_4168ee ]
  %t145 = phi i64 [ %t136, %block_0_4168ee ]
  %t146 = phi i64 [ %t138, %block_0_4168ee ]
  %t147 = phi i512 [ %t140, %block_0_4168ee ]
  br label %block_0_4168f6
block_0_4168f6:
  %t148 = phi i64 [ %t27, %block_0_416882 ], [ %t144, %block_0_4168f3 ]
  %t149 = phi i64 [ %t29, %block_0_416882 ], [ %t145, %block_0_4168f3 ]
  %t150 = phi i64 [ %t30, %block_0_416882 ], [ %t146, %block_0_4168f3 ]
  %t151 = phi i512 [ %t31, %block_0_416882 ], [ %t147, %block_0_4168f3 ]
  ; r140 := (bv_sub r136 r138)
  %t152 = sub i64 %t148, %t150
  ; r141 := (bitcast r139 (vec 8 double))
  %t153 = bitcast i512 %t151 to <8 x double>
  ; r142 := (tuple r140 r137 r141)
  %t154 = insertvalue { i64, i64, <8 x double> } undef, i64 %t152, 0
  %t155 = insertvalue { i64, i64, <8 x double> } %t154, i64 %t149, 1
  %t156 = insertvalue { i64, i64, <8 x double> } %t155, <8 x double> %t153, 2
  ret { i64, i64, <8 x double> } %t156
block_0_4168fa:
  %t157 = phi i64 [ 0, %block_0_416876 ]
  %t158 = phi i64 [ %t17, %block_0_416876 ]
  %t159 = phi i512 [ %t19, %block_0_416876 ]
  ; r146 := (bitcast r145 (vec 8 double))
  %t160 = bitcast i512 %t159 to <8 x double>
  ; r147 := (tuple r143 r144 r146)
  %t161 = insertvalue { i64, i64, <8 x double> } undef, i64 %t157, 0
  %t162 = insertvalue { i64, i64, <8 x double> } %t161, i64 %t158, 1
  %t163 = insertvalue { i64, i64, <8 x double> } %t162, <8 x double> %t160, 2
  ret { i64, i64, <8 x double> } %t163
block_0_4168fc:
  %t164 = phi i64 [ %t47, %block_0_4168a8 ]
  %t165 = phi i64 [ %t48, %block_0_4168a8 ]
  %t166 = phi i64 [ %t50, %block_0_4168a8 ]
  %t167 = phi i512 [ %t52, %block_0_4168a8 ]
  ; r152 := (bv_sub r148 r150)
  %t168 = sub i64 %t164, %t166
  ; r153 := (bv_add r152 (0x1 : bv 64))
  %t169 = add i64 %t168, 1
  ; r154 := (bitcast r151 (vec 8 double))
  %t170 = bitcast i512 %t167 to <8 x double>
  ; r155 := (tuple r153 r149 r154)
  %t171 = insertvalue { i64, i64, <8 x double> } undef, i64 %t169, 0
  %t172 = insertvalue { i64, i64, <8 x double> } %t171, i64 %t165, 1
  %t173 = insertvalue { i64, i64, <8 x double> } %t172, <8 x double> %t170, 2
  ret { i64, i64, <8 x double> } %t173
block_0_416904:
  %t174 = phi i64 [ %t57, %block_0_4168ae ]
  %t175 = phi i64 [ %t58, %block_0_4168ae ]
  %t176 = phi i64 [ %t60, %block_0_4168ae ]
  %t177 = phi i512 [ %t62, %block_0_4168ae ]
  ; r160 := (bv_sub r156 r158)
  %t178 = sub i64 %t174, %t176
  ; r161 := (bv_add r160 (0x2 : bv 64))
  %t179 = add i64 %t178, 2
  ; r162 := (bitcast r159 (vec 8 double))
  %t180 = bitcast i512 %t177 to <8 x double>
  ; r163 := (tuple r161 r157 r162)
  %t181 = insertvalue { i64, i64, <8 x double> } undef, i64 %t179, 0
  %t182 = insertvalue { i64, i64, <8 x double> } %t181, i64 %t175, 1
  %t183 = insertvalue { i64, i64, <8 x double> } %t182, <8 x double> %t180, 2
  ret { i64, i64, <8 x double> } %t183
block_0_41690c:
  %t184 = phi i64 [ %t67, %block_0_4168b4 ]
  %t185 = phi i64 [ %t68, %block_0_4168b4 ]
  %t186 = phi i64 [ %t70, %block_0_4168b4 ]
  %t187 = phi i512 [ %t72, %block_0_4168b4 ]
  ; r168 := (bv_sub r164 r166)
  %t188 = sub i64 %t184, %t186
  ; r169 := (bv_add r168 (0x3 : bv 64))
  %t189 = add i64 %t188, 3
  ; r170 := (bitcast r167 (vec 8 double))
  %t190 = bitcast i512 %t187 to <8 x double>
  ; r171 := (tuple r169 r165 r170)
  %t191 = insertvalue { i64, i64, <8 x double> } undef, i64 %t189, 0
  %t192 = insertvalue { i64, i64, <8 x double> } %t191, i64 %t185, 1
  %t193 = insertvalue { i64, i64, <8 x double> } %t192, <8 x double> %t190, 2
  ret { i64, i64, <8 x double> } %t193
block_0_416914:
  %t194 = phi i64 [ %t77, %block_0_4168ba ]
  %t195 = phi i64 [ %t78, %block_0_4168ba ]
  %t196 = phi i64 [ %t80, %block_0_4168ba ]
  %t197 = phi i512 [ %t82, %block_0_4168ba ]
  ; r176 := (bv_sub r172 r174)
  %t198 = sub i64 %t194, %t196
  ; r177 := (bv_add r176 (0x4 : bv 64))
  %t199 = add i64 %t198, 4
  ; r178 := (bitcast r175 (vec 8 double))
  %t200 = bitcast i512 %t197 to <8 x double>
  ; r179 := (tuple r177 r173 r178)
  %t201 = insertvalue { i64, i64, <8 x double> } undef, i64 %t199, 0
  %t202 = insertvalue { i64, i64, <8 x double> } %t201, i64 %t195, 1
  %t203 = insertvalue { i64, i64, <8 x double> } %t202, <8 x double> %t200, 2
  ret { i64, i64, <8 x double> } %t203
block_0_41691c:
  %t204 = phi i64 [ %t87, %block_0_4168c2 ]
  %t205 = phi i64 [ %t88, %block_0_4168c2 ]
  %t206 = phi i64 [ %t90, %block_0_4168c2 ]
  %t207 = phi i512 [ %t92, %block_0_4168c2 ]
  ; r184 := (bv_sub r180 r182)
  %t208 = sub i64 %t204, %t206
  ; r185 := (bv_add r184 (0x5 : bv 64))
  %t209 = add i64 %t208, 5
  ; r186 := (bitcast r183 (vec 8 double))
  %t210 = bitcast i512 %t207 to <8 x double>
  ; r187 := (tuple r185 r181 r186)
  %t211 = insertvalue { i64, i64, <8 x double> } undef, i64 %t209, 0
  %t212 = insertvalue { i64, i64, <8 x double> } %t211, i64 %t205, 1
  %t213 = insertvalue { i64, i64, <8 x double> } %t212, <8 x double> %t210, 2
  ret { i64, i64, <8 x double> } %t213
block_0_416924:
  %t214 = phi i64 [ %t97, %block_0_4168c8 ]
  %t215 = phi i64 [ %t98, %block_0_4168c8 ]
  %t216 = phi i64 [ %t100, %block_0_4168c8 ]
  %t217 = phi i512 [ %t102, %block_0_4168c8 ]
  ; r192 := (bv_sub r188 r190)
  %t218 = sub i64 %t214, %t216
  ; r193 := (bv_add r192 (0x6 : bv 64))
  %t219 = add i64 %t218, 6
  ; r194 := (bitcast r191 (vec 8 double))
  %t220 = bitcast i512 %t217 to <8 x double>
  ; r195 := (tuple r193 r189 r194)
  %t221 = insertvalue { i64, i64, <8 x double> } undef, i64 %t219, 0
  %t222 = insertvalue { i64, i64, <8 x double> } %t221, i64 %t215, 1
  %t223 = insertvalue { i64, i64, <8 x double> } %t222, <8 x double> %t220, 2
  ret { i64, i64, <8 x double> } %t223
block_0_41692c:
  %t224 = phi i64 [ %t107, %block_0_4168d2 ]
  %t225 = phi i64 [ %t108, %block_0_4168d2 ]
  %t226 = phi i64 [ %t110, %block_0_4168d2 ]
  %t227 = phi i512 [ %t112, %block_0_4168d2 ]
  ; r200 := (bv_sub r196 r198)
  %t228 = sub i64 %t224, %t226
  ; r201 := (bv_add r200 (0x7 : bv 64))
  %t229 = add i64 %t228, 7
  ; r202 := (bitcast r199 (vec 8 double))
  %t230 = bitcast i512 %t227 to <8 x double>
  ; r203 := (tuple r201 r197 r202)
  %t231 = insertvalue { i64, i64, <8 x double> } undef, i64 %t229, 0
  %t232 = insertvalue { i64, i64, <8 x double> } %t231, i64 %t225, 1
  %t233 = insertvalue { i64, i64, <8 x double> } %t232, <8 x double> %t230, 2
  ret { i64, i64, <8 x double> } %t233
}
define { i64, i64, <8 x double> } @strchr(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_416940:
  ; r0 := (read arg0 (bv 8))
  %t0 = inttoptr i64 %arg0 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i8 %t1 to i64
  ; r2 := (trunc arg1 32)
  %t3 = trunc i64 %arg1 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (trunc arg1 8)
  %t5 = trunc i64 %arg1 to i8
  ; r5 := (eq r0 r4)
  %t6 = icmp eq i8 %t1, %t5
  ; r6 := (bitcast arg2 (bv 512))
  %t7 = bitcast <8 x double> %arg2 to i512
  ; r7 := (bitcast arg2 (bv 512))
  %t8 = bitcast <8 x double> %arg2 to i512
  br i1 %t6, label %block_0_41694a, label %block_0_41695b
block_0_41694a:
  %t9 = phi i64 [ %t4, %block_0_416940 ]
  %t10 = phi i64 [ %arg0, %block_0_416940 ]
  %t11 = phi i512 [ %t7, %block_0_416940 ]
  br label %block_0_416965
block_0_416950:
  %t12 = phi i64 [ %t22, %block_0_41695b ]
  %t13 = phi i64 [ %t23, %block_0_41695b ]
  %t14 = phi i512 [ %t24, %block_0_41695b ]
  ; r14 := (bv_add r12 (0x1 : bv 64))
  %t15 = add i64 %t13, 1
  ; r15 := (read r14 (bv 8))
  %t16 = inttoptr i64 %t15 to i8*
  %t17 = load i8, i8* %t16
  ; r16 := (uext r15 64)
  %t18 = zext i8 %t17 to i64
  ; r17 := (trunc r11 8)
  %t19 = trunc i64 %t12 to i8
  ; r18 := (eq r15 r17)
  %t20 = icmp eq i8 %t17, %t19
  br i1 %t20, label %block_0_416965, label %block_0_41695b
block_0_41695b:
  %t21 = phi i64 [ %t2, %block_0_416940 ], [ %t18, %block_0_416950 ]
  %t22 = phi i64 [ %t4, %block_0_416940 ], [ %t12, %block_0_416950 ]
  %t23 = phi i64 [ %arg0, %block_0_416940 ], [ %t15, %block_0_416950 ]
  %t24 = phi i512 [ %t8, %block_0_416940 ], [ %t14, %block_0_416950 ]
  ; r23 := (trunc r19 8)
  %t25 = trunc i64 %t21 to i8
  ; r24 := (eq r23 (0x0 : bv 8))
  %t26 = icmp eq i8 %t25, 0
  br i1 %t26, label %block_0_416962, label %block_0_416950
block_0_416962:
  %t27 = phi i64 [ %t22, %block_0_41695b ]
  %t28 = phi i512 [ %t24, %block_0_41695b ]
  ; r27 := (bitcast r26 (vec 8 double))
  %t29 = bitcast i512 %t28 to <8 x double>
  ; r28 := (tuple (0x0 : bv 64) r25 r27)
  %t30 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t31 = insertvalue { i64, i64, <8 x double> } %t30, i64 %t27, 1
  %t32 = insertvalue { i64, i64, <8 x double> } %t31, <8 x double> %t29, 2
  ret { i64, i64, <8 x double> } %t32
block_0_416965:
  %t33 = phi i64 [ %t9, %block_0_41694a ], [ %t12, %block_0_416950 ]
  %t34 = phi i64 [ %t10, %block_0_41694a ], [ %t15, %block_0_416950 ]
  %t35 = phi i512 [ %t11, %block_0_41694a ], [ %t14, %block_0_416950 ]
  ; r32 := (bitcast r31 (vec 8 double))
  %t36 = bitcast i512 %t35 to <8 x double>
  ; r33 := (tuple r30 r29 r32)
  %t37 = insertvalue { i64, i64, <8 x double> } undef, i64 %t34, 0
  %t38 = insertvalue { i64, i64, <8 x double> } %t37, i64 %t33, 1
  %t39 = insertvalue { i64, i64, <8 x double> } %t38, <8 x double> %t36, 2
  ret { i64, i64, <8 x double> } %t39
}
define { i64, <8 x double> } @__quorem_D2A(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_417e80:
  ; r0 := (bv_add arg1 (0x14 : bv 64))
  %t0 = add i64 %arg1, 20
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (uext r1 64)
  %t3 = zext i32 %t2 to i64
  ; r3 := (bv_add arg0 (0x14 : bv 64))
  %t4 = add i64 %arg0, 20
  ; r4 := (read r3 (bv 32))
  %t5 = inttoptr i64 %t4 to i32*
  %t6 = load i32, i32* %t5
  ; r5 := (ssbb_overflows r1 r4 false)
  %t7 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t2, i32 %t6)
  %t8 = extractvalue { i32, i1 } %t7, 1
  ; r6 := (bv_sub r1 r4)
  %t9 = sub i32 %t2, %t6
  ; r7 := (bv_slt r6 (0x0 : bv 32))
  %t10 = icmp slt i32 %t9, 0
  ; r8 := (eq r1 r4)
  %t11 = icmp eq i32 %t2, %t6
  ; r9 := (not r8)
  %t12 = icmp eq i1 %t11, 0
  ; r10 := (eq r7 r5)
  %t13 = icmp eq i1 %t10, %t8
  ; r11 := (and r9 r10)
  %t14 = and i1 %t12, %t13
  ; r12 := (bitcast arg2 (bv 512))
  %t15 = bitcast <8 x double> %arg2 to i512
  ; r13 := (bitcast arg2 (bv 512))
  %t16 = bitcast <8 x double> %arg2 to i512
  br i1 %t14, label %block_0_417f5e, label %block_0_417e9f
block_0_417e9f:
  %t17 = phi i64 [ %t3, %block_0_417e80 ]
  %t18 = phi i64 [ %arg1, %block_0_417e80 ]
  %t19 = phi i64 [ %arg0, %block_0_417e80 ]
  %t20 = phi i512 [ %t16, %block_0_417e80 ]
  ; r18 := (bv_add r14 (0xffffffffffffffff : bv 64))
  %t21 = add i64 %t17, 18446744073709551615
  ; r19 := (trunc r18 32)
  %t22 = trunc i64 %t21 to i32
  ; r20 := (uext r19 64)
  %t23 = zext i32 %t22 to i64
  ; r21 := (bv_add r15 (0x18 : bv 64))
  %t24 = add i64 %t18, 24
  ; r22 := (bv_add r16 (0x18 : bv 64))
  %t25 = add i64 %t19, 24
  ; r23 := (sext r19 64)
  %t26 = sext i32 %t22 to i64
  ; r24 := (bv_mul (0x4 : bv 64) r23)
  %t27 = mul i64 4, %t26
  ; r25 := (bv_add r16 r24)
  %t28 = add i64 %t19, %t27
  ; r26 := (bv_add r25 (0x18 : bv 64))
  %t29 = add i64 %t28, 24
  ; r27 := (read r26 (bv 32))
  %t30 = inttoptr i64 %t29 to i32*
  %t31 = load i32, i32* %t30
  ; r28 := (bv_add r15 r24)
  %t32 = add i64 %t18, %t27
  ; r29 := (bv_add r28 (0x18 : bv 64))
  %t33 = add i64 %t32, 24
  ; r30 := (read r29 (bv 32))
  %t34 = inttoptr i64 %t33 to i32*
  %t35 = load i32, i32* %t34
  ; r31 := (bv_add r30 (0x1 : bv 32))
  %t36 = add i32 %t35, 1
  ; r32 := (div 32 (0x0 : bv 32) r27 r31)
  %t37 = call { i32, i32 } (i32, i32, i32) asm sideeffect "div $4", "={ax},={dx},{dx},{ax},r,~{flags}"(i32 0, i32 %t31, i32 %t36)
  ; r33 := (tuple_field r32 0)
  %t38 = extractvalue { i32, i32 } %t37, 0
  ; r34 := (uext r33 64)
  %t39 = zext i32 %t38 to i64
  ; r35 := (eq r33 (0x0 : bv 32))
  %t40 = icmp eq i32 %t38, 0
  br i1 %t40, label %block_0_417ed4, label %block_0_417f6d
block_0_417ed4:
  %t41 = phi i64 [ %t24, %block_0_417e9f ], [ %t234, %block_0_417fb6 ], [ %t317, %block_0_417ff2 ]
  %t42 = phi i64 [ %t23, %block_0_417e9f ], [ %t235, %block_0_417fb6 ], [ %t318, %block_0_417ff2 ]
  %t43 = phi i64 [ %t18, %block_0_417e9f ], [ %t236, %block_0_417fb6 ], [ %t319, %block_0_417ff2 ]
  %t44 = phi i64 [ %t19, %block_0_417e9f ], [ %t238, %block_0_417fb6 ], [ %t320, %block_0_417ff2 ]
  %t45 = phi i64 [ %t25, %block_0_417e9f ], [ %t239, %block_0_417fb6 ], [ %t321, %block_0_417ff2 ]
  %t46 = phi i64 [ %t33, %block_0_417e9f ], [ %t240, %block_0_417fb6 ], [ %t322, %block_0_417ff2 ]
  %t47 = phi i64 [ %t39, %block_0_417e9f ], [ %t241, %block_0_417fb6 ], [ %t323, %block_0_417ff2 ]
  %t48 = phi i512 [ %t20, %block_0_417e9f ], [ %t242, %block_0_417fb6 ], [ %t324, %block_0_417ff2 ]
  %t49 = phi i32 [ %t38, %block_0_417e9f ], [ %t243, %block_0_417fb6 ], [ %t325, %block_0_417ff2 ]
  ; r45 := (bitcast r43 (vec 8 double))
  %t50 = bitcast i512 %t48 to <8 x double>
  ; r46 := call __cmp_D2A(r39, r38, r45)
  %t51 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @__cmp_D2A(i64 %t44, i64 %t43, <8 x double> %t50)
  ; r47 := (tuple_field r46 0)
  %t52 = extractvalue { i64, i64, <8 x double> } %t51, 0
  ; r48 := (tuple_field r46 1)
  %t53 = extractvalue { i64, i64, <8 x double> } %t51, 1
  ; r49 := (tuple_field r46 2)
  %t54 = extractvalue { i64, i64, <8 x double> } %t51, 2
  ; r50 := (bitcast r49 (bv 512))
  %t55 = bitcast <8 x double> %t54 to i512
  br label %block_0_417edc
block_0_417edc:
  %t56 = phi i64 [ %t52, %block_0_417ed4 ]
  %t57 = phi i64 [ %t41, %block_0_417ed4 ]
  %t58 = phi i64 [ %t42, %block_0_417ed4 ]
  %t59 = phi i64 [ %t44, %block_0_417ed4 ]
  %t60 = phi i64 [ %t45, %block_0_417ed4 ]
  %t61 = phi i64 [ %t46, %block_0_417ed4 ]
  %t62 = phi i64 [ %t47, %block_0_417ed4 ]
  %t63 = phi i512 [ %t55, %block_0_417ed4 ]
  %t64 = phi i32 [ %t49, %block_0_417ed4 ]
  ; r60 := (trunc r51 32)
  %t65 = trunc i64 %t56 to i32
  ; r61 := (bv_slt r60 (0x0 : bv 32))
  %t66 = icmp slt i32 %t65, 0
  br i1 %t66, label %block_0_417f5b, label %block_0_417ee0
block_0_417ee0:
  %t67 = phi i64 [ %t57, %block_0_417edc ]
  %t68 = phi i64 [ %t58, %block_0_417edc ]
  %t69 = phi i64 [ %t59, %block_0_417edc ]
  %t70 = phi i64 [ %t60, %block_0_417edc ]
  %t71 = phi i64 [ %t61, %block_0_417edc ]
  %t72 = phi i512 [ %t63, %block_0_417edc ]
  %t73 = phi i32 [ %t64, %block_0_417edc ]
  ; r69 := (bv_add r68 (0x1 : bv 32))
  %t74 = add i32 %t73, 1
  ; r70 := (uext r69 64)
  %t75 = zext i32 %t74 to i64
  br label %block_0_417ef0
block_0_417ef0:
  %t76 = phi i64 [ %t70, %block_0_417ee0 ], [ %t101, %block_0_417ef0 ]
  %t77 = phi i64 [ %t67, %block_0_417ee0 ], [ %t92, %block_0_417ef0 ]
  %t78 = phi i64 [ %t68, %block_0_417ee0 ], [ %t78, %block_0_417ef0 ]
  %t79 = phi i64 [ 0, %block_0_417ee0 ], [ %t105, %block_0_417ef0 ]
  %t80 = phi i64 [ 0, %block_0_417ee0 ], [ %t97, %block_0_417ef0 ]
  %t81 = phi i64 [ %t69, %block_0_417ee0 ], [ %t81, %block_0_417ef0 ]
  %t82 = phi i64 [ %t70, %block_0_417ee0 ], [ %t82, %block_0_417ef0 ]
  %t83 = phi i64 [ %t71, %block_0_417ee0 ], [ %t83, %block_0_417ef0 ]
  %t84 = phi i64 [ %t75, %block_0_417ee0 ], [ %t84, %block_0_417ef0 ]
  %t85 = phi i512 [ %t72, %block_0_417ee0 ], [ %t85, %block_0_417ef0 ]
  ; r81 := (read r72 (bv 32))
  %t86 = inttoptr i64 %t77 to i32*
  %t87 = load i32, i32* %t86
  ; r82 := (uext r81 64)
  %t88 = zext i32 %t87 to i64
  ; r83 := (read r71 (bv 32))
  %t89 = inttoptr i64 %t76 to i32*
  %t90 = load i32, i32* %t89
  ; r84 := (uext r83 64)
  %t91 = zext i32 %t90 to i64
  ; r85 := (bv_add r72 (0x4 : bv 64))
  %t92 = add i64 %t77, 4
  ; r86 := (bv_add r75 r82)
  %t93 = add i64 %t80, %t88
  ; r87 := (trunc r86 32)
  %t94 = trunc i64 %t93 to i32
  ; r88 := (uext r87 64)
  %t95 = zext i32 %t94 to i64
  ; r89 := (bv_sub r84 r88)
  %t96 = sub i64 %t91, %t95
  ; r90 := (bv_shr r86 (0x20 : bv 64))
  %t97 = lshr i64 %t93, 32
  ; r91 := (bv_sub r89 r74)
  %t98 = sub i64 %t96, %t79
  ; r92 := (trunc r91 32)
  %t99 = trunc i64 %t98 to i32
  ; write r71 r92
  %t100 = inttoptr i64 %t76 to i32*
  store i32 %t99, i32* %t100
  ; r93 := (bv_add r71 (0x4 : bv 64))
  %t101 = add i64 %t76, 4
  ; r94 := (bv_shr r91 (0x20 : bv 64))
  %t102 = lshr i64 %t98, 32
  ; r95 := (trunc r94 32)
  %t103 = trunc i64 %t102 to i32
  ; r96 := (bv_and r95 (0x1 : bv 32))
  %t104 = and i32 %t103, 1
  ; r97 := (uext r96 64)
  %t105 = zext i32 %t104 to i64
  ; r98 := (bv_ult r78 r85)
  %t106 = icmp ult i64 %t83, %t92
  br i1 %t106, label %block_0_417f21, label %block_0_417ef0
block_0_417f21:
  %t107 = phi i64 [ %t78, %block_0_417ef0 ]
  %t108 = phi i64 [ %t81, %block_0_417ef0 ]
  %t109 = phi i64 [ %t82, %block_0_417ef0 ]
  %t110 = phi i64 [ %t84, %block_0_417ef0 ]
  %t111 = phi i512 [ %t85, %block_0_417ef0 ]
  ; r104 := (trunc r99 32)
  %t112 = trunc i64 %t107 to i32
  ; r105 := (sext r104 64)
  %t113 = sext i32 %t112 to i64
  ; r106 := (bv_mul (0x4 : bv 64) r105)
  %t114 = mul i64 4, %t113
  ; r107 := (bv_add r100 r106)
  %t115 = add i64 %t108, %t114
  ; r108 := (bv_add r107 (0x18 : bv 64))
  %t116 = add i64 %t115, 24
  ; r109 := (read r108 (bv 32))
  %t117 = inttoptr i64 %t116 to i32*
  %t118 = load i32, i32* %t117
  ; r110 := (eq r109 (0x0 : bv 32))
  %t119 = icmp eq i32 %t118, 0
  br i1 %t119, label %block_0_417f2d, label %block_0_417f5b
block_0_417f2d:
  %t120 = phi i64 [ %t113, %block_0_417f21 ]
  %t121 = phi i64 [ %t107, %block_0_417f21 ]
  %t122 = phi i64 [ %t108, %block_0_417f21 ]
  %t123 = phi i64 [ %t109, %block_0_417f21 ]
  %t124 = phi i64 [ %t110, %block_0_417f21 ]
  %t125 = phi i512 [ %t111, %block_0_417f21 ]
  ; r117 := (bv_mul (0x4 : bv 64) r111)
  %t126 = mul i64 4, %t120
  ; r118 := (bv_add r113 r117)
  %t127 = add i64 %t122, %t126
  ; r119 := (bv_add r118 (0x10 : bv 64))
  %t128 = add i64 %t127, 16
  ; r120 := (bv_add r118 (0x14 : bv 64))
  %t129 = add i64 %t127, 20
  ; r121 := (bv_ult r114 r120)
  %t130 = icmp ult i64 %t123, %t129
  br i1 %t130, label %block_0_417f3b, label %block_0_417f56
block_0_417f3b:
  %t131 = phi i64 [ %t129, %block_0_417f2d ]
  %t132 = phi i64 [ %t128, %block_0_417f2d ]
  %t133 = phi i64 [ %t121, %block_0_417f2d ]
  %t134 = phi i64 [ %t122, %block_0_417f2d ]
  %t135 = phi i64 [ %t123, %block_0_417f2d ]
  %t136 = phi i64 [ %t124, %block_0_417f2d ]
  %t137 = phi i512 [ %t125, %block_0_417f2d ]
  ; r129 := (bv_add r123 (0x4 : bv 64))
  %t138 = add i64 %t132, 4
  ; r130 := (read r129 (bv 32))
  %t139 = inttoptr i64 %t138 to i32*
  %t140 = load i32, i32* %t139
  ; r131 := (eq r130 (0x0 : bv 32))
  %t141 = icmp eq i32 %t140, 0
  br i1 %t141, label %block_0_417f4a, label %block_0_417f42
block_0_417f42:
  %t142 = phi i64 [ %t133, %block_0_417f3b ]
  %t143 = phi i64 [ %t134, %block_0_417f3b ]
  %t144 = phi i64 [ %t136, %block_0_417f3b ]
  %t145 = phi i512 [ %t137, %block_0_417f3b ]
  br label %block_0_417f56
block_0_417f44:
  %t146 = phi i64 [ %t161, %block_0_417f4a ]
  %t147 = phi i64 [ %t164, %block_0_417f4a ]
  %t148 = phi i64 [ %t157, %block_0_417f4a ]
  %t149 = phi i64 [ %t158, %block_0_417f4a ]
  %t150 = phi i64 [ %t159, %block_0_417f4a ]
  %t151 = phi i512 [ %t160, %block_0_417f4a ]
  ; r142 := (read r136 (bv 32))
  %t152 = inttoptr i64 %t146 to i32*
  %t153 = load i32, i32* %t152
  ; r143 := (eq r142 (0x0 : bv 32))
  %t154 = icmp eq i32 %t153, 0
  br i1 %t154, label %block_0_417f4a, label %block_0_417f56
block_0_417f4a:
  %t155 = phi i64 [ %t131, %block_0_417f3b ], [ %t146, %block_0_417f44 ]
  %t156 = phi i64 [ %t133, %block_0_417f3b ], [ %t147, %block_0_417f44 ]
  %t157 = phi i64 [ %t134, %block_0_417f3b ], [ %t148, %block_0_417f44 ]
  %t158 = phi i64 [ %t135, %block_0_417f3b ], [ %t149, %block_0_417f44 ]
  %t159 = phi i64 [ %t136, %block_0_417f3b ], [ %t150, %block_0_417f44 ]
  %t160 = phi i512 [ %t137, %block_0_417f3b ], [ %t151, %block_0_417f44 ]
  ; r150 := (bv_add r144 (0xfffffffffffffffc : bv 64))
  %t161 = add i64 %t155, 18446744073709551612
  ; r151 := (trunc r145 32)
  %t162 = trunc i64 %t156 to i32
  ; r152 := (bv_add r151 (0xffffffff : bv 32))
  %t163 = add i32 %t162, 4294967295
  ; r153 := (uext r152 64)
  %t164 = zext i32 %t163 to i64
  ; r154 := (bv_ult r147 r150)
  %t165 = icmp ult i64 %t158, %t161
  br i1 %t165, label %block_0_417f44, label %block_0_417f56
block_0_417f56:
  %t166 = phi i64 [ %t121, %block_0_417f2d ], [ %t142, %block_0_417f42 ], [ %t147, %block_0_417f44 ], [ %t164, %block_0_417f4a ]
  %t167 = phi i64 [ %t122, %block_0_417f2d ], [ %t143, %block_0_417f42 ], [ %t148, %block_0_417f44 ], [ %t157, %block_0_417f4a ]
  %t168 = phi i64 [ %t124, %block_0_417f2d ], [ %t144, %block_0_417f42 ], [ %t150, %block_0_417f44 ], [ %t159, %block_0_417f4a ]
  %t169 = phi i512 [ %t125, %block_0_417f2d ], [ %t145, %block_0_417f42 ], [ %t151, %block_0_417f44 ], [ %t160, %block_0_417f4a ]
  ; r159 := (trunc r155 32)
  %t170 = trunc i64 %t166 to i32
  ; r160 := (bv_add r156 (0x14 : bv 64))
  %t171 = add i64 %t167, 20
  ; write r160 r159
  %t172 = inttoptr i64 %t171 to i32*
  store i32 %t170, i32* %t172
  br label %block_0_417f5b
block_0_417f5b:
  %t173 = phi i64 [ %t62, %block_0_417edc ], [ %t110, %block_0_417f21 ], [ %t168, %block_0_417f56 ]
  %t174 = phi i512 [ %t63, %block_0_417edc ], [ %t111, %block_0_417f21 ], [ %t169, %block_0_417f56 ]
  ; r163 := (trunc r161 32)
  %t175 = trunc i64 %t173 to i32
  ; r164 := (uext r163 64)
  %t176 = zext i32 %t175 to i64
  br label %block_0_417f5e
block_0_417f5e:
  %t177 = phi i64 [ 0, %block_0_417e80 ], [ %t176, %block_0_417f5b ]
  %t178 = phi i512 [ %t15, %block_0_417e80 ], [ %t174, %block_0_417f5b ]
  ; r167 := (bitcast r166 (vec 8 double))
  %t179 = bitcast i512 %t178 to <8 x double>
  ; r168 := (tuple r165 r167)
  %t180 = insertvalue { i64, <8 x double> } undef, i64 %t177, 0
  %t181 = insertvalue { i64, <8 x double> } %t180, <8 x double> %t179, 1
  ret { i64, <8 x double> } %t181
block_0_417f6d:
  %t182 = phi i64 [ %t39, %block_0_417e9f ]
  %t183 = phi i64 [ %t24, %block_0_417e9f ]
  %t184 = phi i64 [ %t23, %block_0_417e9f ]
  %t185 = phi i64 [ %t18, %block_0_417e9f ]
  %t186 = phi i64 [ %t19, %block_0_417e9f ]
  %t187 = phi i64 [ %t26, %block_0_417e9f ]
  %t188 = phi i64 [ %t25, %block_0_417e9f ]
  %t189 = phi i64 [ %t33, %block_0_417e9f ]
  %t190 = phi i512 [ %t20, %block_0_417e9f ]
  %t191 = phi i32 [ %t38, %block_0_417e9f ]
  ; r179 := (trunc r169 32)
  %t192 = trunc i64 %t182 to i32
  ; r180 := (uext r179 64)
  %t193 = zext i32 %t192 to i64
  br label %block_0_417f80
block_0_417f80:
  %t194 = phi i64 [ %t183, %block_0_417f6d ], [ %t215, %block_0_417f80 ]
  %t195 = phi i64 [ %t183, %block_0_417f6d ], [ %t195, %block_0_417f80 ]
  %t196 = phi i64 [ %t184, %block_0_417f6d ], [ %t196, %block_0_417f80 ]
  %t197 = phi i64 [ %t185, %block_0_417f6d ], [ %t197, %block_0_417f80 ]
  %t198 = phi i64 [ %t188, %block_0_417f6d ], [ %t228, %block_0_417f80 ]
  %t199 = phi i64 [ 0, %block_0_417f6d ], [ %t232, %block_0_417f80 ]
  %t200 = phi i64 [ 0, %block_0_417f6d ], [ %t224, %block_0_417f80 ]
  %t201 = phi i64 [ %t187, %block_0_417f6d ], [ %t201, %block_0_417f80 ]
  %t202 = phi i64 [ %t193, %block_0_417f6d ], [ %t202, %block_0_417f80 ]
  %t203 = phi i64 [ %t186, %block_0_417f6d ], [ %t203, %block_0_417f80 ]
  %t204 = phi i64 [ %t188, %block_0_417f6d ], [ %t204, %block_0_417f80 ]
  %t205 = phi i64 [ %t189, %block_0_417f6d ], [ %t205, %block_0_417f80 ]
  %t206 = phi i64 [ %t182, %block_0_417f6d ], [ %t206, %block_0_417f80 ]
  %t207 = phi i512 [ %t190, %block_0_417f6d ], [ %t207, %block_0_417f80 ]
  %t208 = phi i32 [ %t191, %block_0_417f6d ], [ %t208, %block_0_417f80 ]
  ; r196 := (read r181 (bv 32))
  %t209 = inttoptr i64 %t194 to i32*
  %t210 = load i32, i32* %t209
  ; r197 := (uext r196 64)
  %t211 = zext i32 %t210 to i64
  ; r198 := (read r185 (bv 32))
  %t212 = inttoptr i64 %t198 to i32*
  %t213 = load i32, i32* %t212
  ; r199 := (uext r198 64)
  %t214 = zext i32 %t213 to i64
  ; r200 := (bv_add r181 (0x4 : bv 64))
  %t215 = add i64 %t194, 4
  ; r201 := (sext r189 128)
  %t216 = sext i64 %t202 to i128
  ; r202 := (sext r197 128)
  %t217 = sext i64 %t211 to i128
  ; r203 := (bv_mul r201 r202)
  %t218 = mul i128 %t216, %t217
  ; r204 := (trunc r203 64)
  %t219 = trunc i128 %t218 to i64
  ; r205 := (bv_add r187 r204)
  %t220 = add i64 %t200, %t219
  ; r206 := (trunc r205 32)
  %t221 = trunc i64 %t220 to i32
  ; r207 := (uext r206 64)
  %t222 = zext i32 %t221 to i64
  ; r208 := (bv_sub r199 r207)
  %t223 = sub i64 %t214, %t222
  ; r209 := (bv_shr r205 (0x20 : bv 64))
  %t224 = lshr i64 %t220, 32
  ; r210 := (bv_sub r208 r186)
  %t225 = sub i64 %t223, %t199
  ; r211 := (trunc r210 32)
  %t226 = trunc i64 %t225 to i32
  ; write r185 r211
  %t227 = inttoptr i64 %t198 to i32*
  store i32 %t226, i32* %t227
  ; r212 := (bv_add r185 (0x4 : bv 64))
  %t228 = add i64 %t198, 4
  ; r213 := (bv_shr r210 (0x20 : bv 64))
  %t229 = lshr i64 %t225, 32
  ; r214 := (trunc r213 32)
  %t230 = trunc i64 %t229 to i32
  ; r215 := (bv_and r214 (0x1 : bv 32))
  %t231 = and i32 %t230, 1
  ; r216 := (uext r215 64)
  %t232 = zext i32 %t231 to i64
  ; r217 := (bv_ult r192 r200)
  %t233 = icmp ult i64 %t205, %t215
  br i1 %t233, label %block_0_417fb6, label %block_0_417f80
block_0_417fb6:
  %t234 = phi i64 [ %t195, %block_0_417f80 ]
  %t235 = phi i64 [ %t196, %block_0_417f80 ]
  %t236 = phi i64 [ %t197, %block_0_417f80 ]
  %t237 = phi i64 [ %t201, %block_0_417f80 ]
  %t238 = phi i64 [ %t203, %block_0_417f80 ]
  %t239 = phi i64 [ %t204, %block_0_417f80 ]
  %t240 = phi i64 [ %t205, %block_0_417f80 ]
  %t241 = phi i64 [ %t206, %block_0_417f80 ]
  %t242 = phi i512 [ %t207, %block_0_417f80 ]
  %t243 = phi i32 [ %t208, %block_0_417f80 ]
  ; r228 := (bv_mul (0x4 : bv 64) r221)
  %t244 = mul i64 4, %t237
  ; r229 := (bv_add r222 r228)
  %t245 = add i64 %t238, %t244
  ; r230 := (bv_add r229 (0x18 : bv 64))
  %t246 = add i64 %t245, 24
  ; r231 := (read r230 (bv 32))
  %t247 = inttoptr i64 %t246 to i32*
  %t248 = load i32, i32* %t247
  ; r232 := (eq r231 (0x0 : bv 32))
  %t249 = icmp eq i32 %t248, 0
  br i1 %t249, label %block_0_417fc4, label %block_0_417ed4
block_0_417fc4:
  %t250 = phi i64 [ %t234, %block_0_417fb6 ]
  %t251 = phi i64 [ %t235, %block_0_417fb6 ]
  %t252 = phi i64 [ %t236, %block_0_417fb6 ]
  %t253 = phi i64 [ %t237, %block_0_417fb6 ]
  %t254 = phi i64 [ %t238, %block_0_417fb6 ]
  %t255 = phi i64 [ %t239, %block_0_417fb6 ]
  %t256 = phi i64 [ %t240, %block_0_417fb6 ]
  %t257 = phi i64 [ %t241, %block_0_417fb6 ]
  %t258 = phi i512 [ %t242, %block_0_417fb6 ]
  %t259 = phi i32 [ %t243, %block_0_417fb6 ]
  ; r243 := (bv_mul (0x4 : bv 64) r236)
  %t260 = mul i64 4, %t253
  ; r244 := (bv_add r237 r243)
  %t261 = add i64 %t254, %t260
  ; r245 := (bv_add r244 (0x10 : bv 64))
  %t262 = add i64 %t261, 16
  ; r246 := (bv_add r244 (0x14 : bv 64))
  %t263 = add i64 %t261, 20
  ; r247 := (bv_ult r238 r246)
  %t264 = icmp ult i64 %t255, %t263
  br i1 %t264, label %block_0_417fd2, label %block_0_417ff2
block_0_417fd2:
  %t265 = phi i64 [ %t263, %block_0_417fc4 ]
  %t266 = phi i64 [ %t262, %block_0_417fc4 ]
  %t267 = phi i64 [ %t250, %block_0_417fc4 ]
  %t268 = phi i64 [ %t251, %block_0_417fc4 ]
  %t269 = phi i64 [ %t252, %block_0_417fc4 ]
  %t270 = phi i64 [ %t254, %block_0_417fc4 ]
  %t271 = phi i64 [ %t255, %block_0_417fc4 ]
  %t272 = phi i64 [ %t256, %block_0_417fc4 ]
  %t273 = phi i64 [ %t257, %block_0_417fc4 ]
  %t274 = phi i512 [ %t258, %block_0_417fc4 ]
  %t275 = phi i32 [ %t259, %block_0_417fc4 ]
  ; r259 := (bv_add r249 (0x4 : bv 64))
  %t276 = add i64 %t266, 4
  ; r260 := (read r259 (bv 32))
  %t277 = inttoptr i64 %t276 to i32*
  %t278 = load i32, i32* %t277
  ; r261 := (eq r260 (0x0 : bv 32))
  %t279 = icmp eq i32 %t278, 0
  br i1 %t279, label %block_0_417fe6, label %block_0_417fdb
block_0_417fdb:
  %t280 = phi i64 [ %t267, %block_0_417fd2 ]
  %t281 = phi i64 [ %t268, %block_0_417fd2 ]
  %t282 = phi i64 [ %t269, %block_0_417fd2 ]
  %t283 = phi i64 [ %t270, %block_0_417fd2 ]
  %t284 = phi i64 [ %t271, %block_0_417fd2 ]
  %t285 = phi i64 [ %t272, %block_0_417fd2 ]
  %t286 = phi i64 [ %t273, %block_0_417fd2 ]
  %t287 = phi i512 [ %t274, %block_0_417fd2 ]
  %t288 = phi i32 [ %t275, %block_0_417fd2 ]
  br label %block_0_417ff2
block_0_417fe0:
  %t289 = phi i64 [ %t312, %block_0_417fe6 ]
  %t290 = phi i64 [ %t303, %block_0_417fe6 ]
  %t291 = phi i64 [ %t315, %block_0_417fe6 ]
  %t292 = phi i64 [ %t305, %block_0_417fe6 ]
  %t293 = phi i64 [ %t306, %block_0_417fe6 ]
  %t294 = phi i64 [ %t307, %block_0_417fe6 ]
  %t295 = phi i64 [ %t308, %block_0_417fe6 ]
  %t296 = phi i64 [ %t309, %block_0_417fe6 ]
  %t297 = phi i512 [ %t310, %block_0_417fe6 ]
  %t298 = phi i32 [ %t311, %block_0_417fe6 ]
  ; r281 := (read r271 (bv 32))
  %t299 = inttoptr i64 %t289 to i32*
  %t300 = load i32, i32* %t299
  ; r282 := (eq r281 (0x0 : bv 32))
  %t301 = icmp eq i32 %t300, 0
  br i1 %t301, label %block_0_417fe6, label %block_0_417ff2
block_0_417fe6:
  %t302 = phi i64 [ %t265, %block_0_417fd2 ], [ %t289, %block_0_417fe0 ]
  %t303 = phi i64 [ %t267, %block_0_417fd2 ], [ %t290, %block_0_417fe0 ]
  %t304 = phi i64 [ %t268, %block_0_417fd2 ], [ %t291, %block_0_417fe0 ]
  %t305 = phi i64 [ %t269, %block_0_417fd2 ], [ %t292, %block_0_417fe0 ]
  %t306 = phi i64 [ %t270, %block_0_417fd2 ], [ %t293, %block_0_417fe0 ]
  %t307 = phi i64 [ %t271, %block_0_417fd2 ], [ %t294, %block_0_417fe0 ]
  %t308 = phi i64 [ %t272, %block_0_417fd2 ], [ %t295, %block_0_417fe0 ]
  %t309 = phi i64 [ %t273, %block_0_417fd2 ], [ %t296, %block_0_417fe0 ]
  %t310 = phi i512 [ %t274, %block_0_417fd2 ], [ %t297, %block_0_417fe0 ]
  %t311 = phi i32 [ %t275, %block_0_417fd2 ], [ %t298, %block_0_417fe0 ]
  ; r293 := (bv_add r283 (0xfffffffffffffffc : bv 64))
  %t312 = add i64 %t302, 18446744073709551612
  ; r294 := (trunc r285 32)
  %t313 = trunc i64 %t304 to i32
  ; r295 := (bv_add r294 (0xffffffff : bv 32))
  %t314 = add i32 %t313, 4294967295
  ; r296 := (uext r295 64)
  %t315 = zext i32 %t314 to i64
  ; r297 := (bv_ult r288 r293)
  %t316 = icmp ult i64 %t307, %t312
  br i1 %t316, label %block_0_417fe0, label %block_0_417ff2
block_0_417ff2:
  %t317 = phi i64 [ %t250, %block_0_417fc4 ], [ %t280, %block_0_417fdb ], [ %t290, %block_0_417fe0 ], [ %t303, %block_0_417fe6 ]
  %t318 = phi i64 [ %t251, %block_0_417fc4 ], [ %t281, %block_0_417fdb ], [ %t291, %block_0_417fe0 ], [ %t315, %block_0_417fe6 ]
  %t319 = phi i64 [ %t252, %block_0_417fc4 ], [ %t282, %block_0_417fdb ], [ %t292, %block_0_417fe0 ], [ %t305, %block_0_417fe6 ]
  %t320 = phi i64 [ %t254, %block_0_417fc4 ], [ %t283, %block_0_417fdb ], [ %t293, %block_0_417fe0 ], [ %t306, %block_0_417fe6 ]
  %t321 = phi i64 [ %t255, %block_0_417fc4 ], [ %t284, %block_0_417fdb ], [ %t294, %block_0_417fe0 ], [ %t307, %block_0_417fe6 ]
  %t322 = phi i64 [ %t256, %block_0_417fc4 ], [ %t285, %block_0_417fdb ], [ %t295, %block_0_417fe0 ], [ %t308, %block_0_417fe6 ]
  %t323 = phi i64 [ %t257, %block_0_417fc4 ], [ %t286, %block_0_417fdb ], [ %t296, %block_0_417fe0 ], [ %t309, %block_0_417fe6 ]
  %t324 = phi i512 [ %t258, %block_0_417fc4 ], [ %t287, %block_0_417fdb ], [ %t297, %block_0_417fe0 ], [ %t310, %block_0_417fe6 ]
  %t325 = phi i32 [ %t259, %block_0_417fc4 ], [ %t288, %block_0_417fdb ], [ %t298, %block_0_417fe0 ], [ %t311, %block_0_417fe6 ]
  ; r307 := (trunc r299 32)
  %t326 = trunc i64 %t318 to i32
  ; r308 := (bv_add r301 (0x14 : bv 64))
  %t327 = add i64 %t320, 20
  ; write r308 r307
  %t328 = inttoptr i64 %t327 to i32*
  store i32 %t326, i32* %t328
  br label %block_0_417ed4
}
define { i64, i64, <8 x double> } @__freedtoa(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_418000:
  ; r0 := (bv_add arg0 (0xfffffffffffffffc : bv 64))
  %t0 = add i64 %arg0, 18446744073709551612
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (uext r1 64)
  %t3 = zext i32 %t2 to i64
  ; r3 := (trunc r1 8)
  %t4 = trunc i32 %t2 to i8
  ; r4 := (bv_and r3 (0x1f : bv 8))
  %t5 = and i8 %t4, 31
  ; r5 := (eq r4 (0x0 : bv 8))
  %t6 = icmp eq i8 %t5, 0
  ; r6 := (uext r4 32)
  %t7 = zext i8 %t5 to i32
  ; r7 := (bv_shl (0x1 : bv 32) r6)
  %t8 = shl i32 1, %t7
  ; r8 := (mux r5 (0x1 : bv 32) r7)
  %t9 = select i1 %t6, i32 1, i32 %t8
  ; r9 := (bv_add arg0 (0x4 : bv 64))
  %t10 = add i64 %arg0, 4
  ; write r9 r1
  %t11 = inttoptr i64 %t10 to i32*
  store i32 %t2, i32* %t11
  ; r10 := (bv_add arg0 (0x8 : bv 64))
  %t12 = add i64 %arg0, 8
  ; write r10 r8
  %t13 = inttoptr i64 %t12 to i32*
  store i32 %t9, i32* %t13
  ; r11 := (bitcast arg6 (bv 512))
  %t14 = bitcast <8 x double> %arg6 to i512
  ; r12 := (bitcast r11 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r13 := (bitcast arg7 (bv 512))
  %t16 = bitcast <8 x double> %arg7 to i512
  ; r14 := (bitcast r13 (vec 8 double))
  %t17 = bitcast i512 %t16 to <8 x double>
  ; r15 := (bitcast arg8 (bv 512))
  %t18 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast r15 (vec 8 double))
  %t19 = bitcast i512 %t18 to <8 x double>
  ; r17 := (bitcast arg9 (bv 512))
  %t20 = bitcast <8 x double> %arg9 to i512
  ; r18 := (bitcast r17 (vec 8 double))
  %t21 = bitcast i512 %t20 to <8 x double>
  ; r19 := (bitcast arg10 (bv 512))
  %t22 = bitcast <8 x double> %arg10 to i512
  ; r20 := (bitcast r19 (vec 8 double))
  %t23 = bitcast i512 %t22 to <8 x double>
  ; r21 := (bitcast arg11 (bv 512))
  %t24 = bitcast <8 x double> %arg11 to i512
  ; r22 := (bitcast r21 (vec 8 double))
  %t25 = bitcast i512 %t24 to <8 x double>
  ; r23 := (bitcast arg12 (bv 512))
  %t26 = bitcast <8 x double> %arg12 to i512
  ; r24 := (bitcast r23 (vec 8 double))
  %t27 = bitcast i512 %t26 to <8 x double>
  ; r25 := (bitcast arg13 (bv 512))
  %t28 = bitcast <8 x double> %arg13 to i512
  ; r26 := (bitcast r25 (vec 8 double))
  %t29 = bitcast i512 %t28 to <8 x double>
  %t30 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__Bfree_D2A(i64 %t0, i64 %arg1, i64 %t0, i64 %t3, i64 %arg4, i64 %arg5, <8 x double> %t15, <8 x double> %t17, <8 x double> %t19, <8 x double> %t21, <8 x double> %t23, <8 x double> %t25, <8 x double> %t27, <8 x double> %t29)
  ret { i64, i64, <8 x double> } %t30
}
define { i64, i64, <8 x double> } @__rv_alloc_D2A(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_418020:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (sext r0 64)
  %t1 = sext i32 %t0 to i64
  ; r2 := (bv_ult r1 (0x1b : bv 64))
  %t2 = icmp ult i64 %t1, 27
  ; r3 := (eq r1 (0x1b : bv 64))
  %t3 = icmp eq i64 %t1, 27
  ; r4 := (or r2 r3)
  %t4 = or i1 %t2, %t3
  ; r5 := (bitcast arg6 (bv 512))
  %t5 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t6 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t7 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t8 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t9 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast arg12 (bv 512))
  %t11 = bitcast <8 x double> %arg12 to i512
  ; r12 := (bitcast arg13 (bv 512))
  %t12 = bitcast <8 x double> %arg13 to i512
  ; r13 := (bitcast arg6 (bv 512))
  %t13 = bitcast <8 x double> %arg6 to i512
  ; r14 := (bitcast arg7 (bv 512))
  %t14 = bitcast <8 x double> %arg7 to i512
  ; r15 := (bitcast arg8 (bv 512))
  %t15 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast arg9 (bv 512))
  %t16 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast arg10 (bv 512))
  %t17 = bitcast <8 x double> %arg10 to i512
  ; r18 := (bitcast arg11 (bv 512))
  %t18 = bitcast <8 x double> %arg11 to i512
  ; r19 := (bitcast arg12 (bv 512))
  %t19 = bitcast <8 x double> %arg12 to i512
  ; r20 := (bitcast arg13 (bv 512))
  %t20 = bitcast <8 x double> %arg13 to i512
  br i1 %t4, label %block_0_418042, label %block_0_41802c
block_0_41802c:
  %t21 = phi i64 [ %t1, %block_0_418020 ]
  %t22 = phi i64 [ 0, %block_0_418020 ]
  %t23 = phi i64 [ %arg1, %block_0_418020 ]
  %t24 = phi i64 [ %arg4, %block_0_418020 ]
  %t25 = phi i64 [ %arg5, %block_0_418020 ]
  %t26 = phi i512 [ %t13, %block_0_418020 ]
  %t27 = phi i512 [ %t14, %block_0_418020 ]
  %t28 = phi i512 [ %t15, %block_0_418020 ]
  %t29 = phi i512 [ %t16, %block_0_418020 ]
  %t30 = phi i512 [ %t17, %block_0_418020 ]
  %t31 = phi i512 [ %t18, %block_0_418020 ]
  %t32 = phi i512 [ %t19, %block_0_418020 ]
  %t33 = phi i512 [ %t20, %block_0_418020 ]
  br label %block_0_418031
block_0_418031:
  %t34 = phi i64 [ %t21, %block_0_41802c ], [ %t34, %block_0_418031 ]
  %t35 = phi i64 [ 4, %block_0_41802c ], [ %t50, %block_0_418031 ]
  %t36 = phi i64 [ %t22, %block_0_41802c ], [ %t53, %block_0_418031 ]
  %t37 = phi i64 [ %t23, %block_0_41802c ], [ %t37, %block_0_418031 ]
  %t38 = phi i64 [ %t24, %block_0_41802c ], [ %t38, %block_0_418031 ]
  %t39 = phi i64 [ %t25, %block_0_41802c ], [ %t39, %block_0_418031 ]
  %t40 = phi i512 [ %t26, %block_0_41802c ], [ %t40, %block_0_418031 ]
  %t41 = phi i512 [ %t27, %block_0_41802c ], [ %t41, %block_0_418031 ]
  %t42 = phi i512 [ %t28, %block_0_41802c ], [ %t42, %block_0_418031 ]
  %t43 = phi i512 [ %t29, %block_0_41802c ], [ %t43, %block_0_418031 ]
  %t44 = phi i512 [ %t30, %block_0_41802c ], [ %t44, %block_0_418031 ]
  %t45 = phi i512 [ %t31, %block_0_41802c ], [ %t45, %block_0_418031 ]
  %t46 = phi i512 [ %t32, %block_0_41802c ], [ %t46, %block_0_418031 ]
  %t47 = phi i512 [ %t33, %block_0_41802c ], [ %t47, %block_0_418031 ]
  ; r48 := (trunc r35 32)
  %t48 = trunc i64 %t35 to i32
  ; r49 := (bv_add r48 r48)
  %t49 = add i32 %t48, %t48
  ; r50 := (uext r49 64)
  %t50 = zext i32 %t49 to i64
  ; r51 := (trunc r36 32)
  %t51 = trunc i64 %t36 to i32
  ; r52 := (bv_add r51 (0x1 : bv 32))
  %t52 = add i32 %t51, 1
  ; r53 := (uext r52 64)
  %t53 = zext i32 %t52 to i64
  ; r54 := (sext r49 64)
  %t54 = sext i32 %t49 to i64
  ; r55 := (bv_add r54 (0x18 : bv 64))
  %t55 = add i64 %t54, 24
  ; r56 := (bv_ult r55 r34)
  %t56 = icmp ult i64 %t55, %t34
  ; r57 := (eq r55 r34)
  %t57 = icmp eq i64 %t55, %t34
  ; r58 := (or r56 r57)
  %t58 = or i1 %t56, %t57
  br i1 %t58, label %block_0_418031, label %block_0_418042
block_0_418042:
  %t59 = phi i64 [ %t1, %block_0_418020 ], [ %t34, %block_0_418031 ]
  %t60 = phi i64 [ %arg2, %block_0_418020 ], [ %t50, %block_0_418031 ]
  %t61 = phi i64 [ 0, %block_0_418020 ], [ %t53, %block_0_418031 ]
  %t62 = phi i64 [ %arg1, %block_0_418020 ], [ %t37, %block_0_418031 ]
  %t63 = phi i64 [ %arg4, %block_0_418020 ], [ %t38, %block_0_418031 ]
  %t64 = phi i64 [ %arg5, %block_0_418020 ], [ %t39, %block_0_418031 ]
  %t65 = phi i512 [ %t5, %block_0_418020 ], [ %t40, %block_0_418031 ]
  %t66 = phi i512 [ %t6, %block_0_418020 ], [ %t41, %block_0_418031 ]
  %t67 = phi i512 [ %t7, %block_0_418020 ], [ %t42, %block_0_418031 ]
  %t68 = phi i512 [ %t8, %block_0_418020 ], [ %t43, %block_0_418031 ]
  %t69 = phi i512 [ %t9, %block_0_418020 ], [ %t44, %block_0_418031 ]
  %t70 = phi i512 [ %t10, %block_0_418020 ], [ %t45, %block_0_418031 ]
  %t71 = phi i512 [ %t11, %block_0_418020 ], [ %t46, %block_0_418031 ]
  %t72 = phi i512 [ %t12, %block_0_418020 ], [ %t47, %block_0_418031 ]
  ; r73 := (trunc r61 32)
  %t73 = trunc i64 %t61 to i32
  ; r74 := (uext r73 64)
  %t74 = zext i32 %t73 to i64
  ; r75 := (bitcast r65 (vec 8 double))
  %t75 = bitcast i512 %t65 to <8 x double>
  ; r76 := (bitcast r66 (vec 8 double))
  %t76 = bitcast i512 %t66 to <8 x double>
  ; r77 := (bitcast r67 (vec 8 double))
  %t77 = bitcast i512 %t67 to <8 x double>
  ; r78 := (bitcast r68 (vec 8 double))
  %t78 = bitcast i512 %t68 to <8 x double>
  ; r79 := (bitcast r69 (vec 8 double))
  %t79 = bitcast i512 %t69 to <8 x double>
  ; r80 := (bitcast r70 (vec 8 double))
  %t80 = bitcast i512 %t70 to <8 x double>
  ; r81 := (bitcast r71 (vec 8 double))
  %t81 = bitcast i512 %t71 to <8 x double>
  ; r82 := (bitcast r72 (vec 8 double))
  %t82 = bitcast i512 %t72 to <8 x double>
  ; r83 := call __Balloc_D2A(r74, r62, r60, r59, r63, r64, r75, r76, r77, r78, r79, r80, r81, r82)
  %t83 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__Balloc_D2A(i64 %t74, i64 %t62, i64 %t60, i64 %t59, i64 %t63, i64 %t64, <8 x double> %t75, <8 x double> %t76, <8 x double> %t77, <8 x double> %t78, <8 x double> %t79, <8 x double> %t80, <8 x double> %t81, <8 x double> %t82)
  ; r84 := (tuple_field r83 0)
  %t84 = extractvalue { i64, i64, <8 x double> } %t83, 0
  ; r85 := (tuple_field r83 1)
  %t85 = extractvalue { i64, i64, <8 x double> } %t83, 1
  ; r86 := (tuple_field r83 2)
  %t86 = extractvalue { i64, i64, <8 x double> } %t83, 2
  ; r87 := (bitcast r86 (bv 512))
  %t87 = bitcast <8 x double> %t86 to i512
  br label %block_0_418049
block_0_418049:
  %t88 = phi i64 [ %t84, %block_0_418042 ]
  %t89 = phi i64 [ %t85, %block_0_418042 ]
  %t90 = phi i64 [ %t61, %block_0_418042 ]
  %t91 = phi i512 [ %t87, %block_0_418042 ]
  ; r92 := (trunc r90 32)
  %t92 = trunc i64 %t90 to i32
  ; write r88 r92
  %t93 = inttoptr i64 %t88 to i32*
  store i32 %t92, i32* %t93
  ; r93 := (bv_add r88 (0x4 : bv 64))
  %t94 = add i64 %t88, 4
  ; r94 := (bitcast r91 (vec 8 double))
  %t95 = bitcast i512 %t91 to <8 x double>
  ; r95 := (tuple r93 r89 r94)
  %t96 = insertvalue { i64, i64, <8 x double> } undef, i64 %t94, 0
  %t97 = insertvalue { i64, i64, <8 x double> } %t96, i64 %t89, 1
  %t98 = insertvalue { i64, i64, <8 x double> } %t97, <8 x double> %t95, 2
  ret { i64, i64, <8 x double> } %t98
}
define { i64, <8 x double> } @__nrv_alloc_D2A(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_418060:
  ; r0 := (trunc arg2 32)
  %t0 = trunc i64 %arg2 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (bitcast arg6 (bv 512))
  %t2 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg9 (bv 512))
  %t8 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg11 (bv 512))
  %t12 = bitcast <8 x double> %arg11 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg12 (bv 512))
  %t14 = bitcast <8 x double> %arg12 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := (bitcast arg13 (bv 512))
  %t16 = bitcast <8 x double> %arg13 to i512
  ; r17 := (bitcast r16 (vec 8 double))
  %t17 = bitcast i512 %t16 to <8 x double>
  ; r18 := call __rv_alloc_D2A(r1, arg1, arg2, arg3, arg4, arg5, r3, r5, r7, r9, r11, r13, r15, r17)
  %t18 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__rv_alloc_D2A(i64 %t1, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15, <8 x double> %t17)
  ; r19 := (tuple_field r18 0)
  %t19 = extractvalue { i64, i64, <8 x double> } %t18, 0
  ; r20 := (tuple_field r18 1)
  %t20 = extractvalue { i64, i64, <8 x double> } %t18, 1
  ; r21 := (tuple_field r18 2)
  %t21 = extractvalue { i64, i64, <8 x double> } %t18, 2
  ; r22 := (bitcast r21 (bv 512))
  %t22 = bitcast <8 x double> %t21 to i512
  br label %block_0_418073
block_0_418073:
  %t23 = phi i64 [ %t19, %block_0_418060 ]
  %t24 = phi i64 [ %arg0, %block_0_418060 ]
  %t25 = phi i64 [ %arg1, %block_0_418060 ]
  %t26 = phi i512 [ %t22, %block_0_418060 ]
  ; r27 := (read r24 (bv 8))
  %t27 = inttoptr i64 %t24 to i8*
  %t28 = load i8, i8* %t27
  ; r28 := (eq r27 (0x0 : bv 8))
  %t29 = icmp eq i8 %t28, 0
  ; write r23 r27
  %t30 = inttoptr i64 %t23 to i8*
  store i8 %t28, i8* %t30
  br i1 %t29, label %block_0_418097, label %block_0_418082
block_0_418082:
  %t31 = phi i64 [ %t23, %block_0_418073 ]
  %t32 = phi i64 [ %t24, %block_0_418073 ]
  %t33 = phi i64 [ %t25, %block_0_418073 ]
  %t34 = phi i512 [ %t26, %block_0_418073 ]
  br label %block_0_418085
block_0_418085:
  %t35 = phi i64 [ %t31, %block_0_418082 ], [ %t35, %block_0_418085 ]
  %t36 = phi i64 [ %t31, %block_0_418082 ], [ %t43, %block_0_418085 ]
  %t37 = phi i64 [ %t33, %block_0_418082 ], [ %t37, %block_0_418085 ]
  %t38 = phi i64 [ %t32, %block_0_418082 ], [ %t40, %block_0_418085 ]
  %t39 = phi i512 [ %t34, %block_0_418082 ], [ %t39, %block_0_418085 ]
  ; r38 := (bv_add r36 (0x1 : bv 64))
  %t40 = add i64 %t38, 1
  ; r39 := (read r38 (bv 8))
  %t41 = inttoptr i64 %t40 to i8*
  %t42 = load i8, i8* %t41
  ; r40 := (bv_add r34 (0x1 : bv 64))
  %t43 = add i64 %t36, 1
  ; r41 := (eq r39 (0x0 : bv 8))
  %t44 = icmp eq i8 %t42, 0
  ; write r40 r39
  %t45 = inttoptr i64 %t43 to i8*
  store i8 %t42, i8* %t45
  br i1 %t44, label %block_0_418097, label %block_0_418085
block_0_418097:
  %t46 = phi i64 [ %t23, %block_0_418073 ], [ %t35, %block_0_418085 ]
  %t47 = phi i64 [ %t23, %block_0_418073 ], [ %t43, %block_0_418085 ]
  %t48 = phi i64 [ %t25, %block_0_418073 ], [ %t37, %block_0_418085 ]
  %t49 = phi i512 [ %t26, %block_0_418073 ], [ %t39, %block_0_418085 ]
  ; r46 := (eq r44 (0x0 : bv 64))
  %t50 = icmp eq i64 %t48, 0
  br i1 %t50, label %block_0_4180a0, label %block_0_41809c
block_0_41809c:
  %t51 = phi i64 [ %t46, %block_0_418097 ]
  %t52 = phi i64 [ %t47, %block_0_418097 ]
  %t53 = phi i64 [ %t48, %block_0_418097 ]
  %t54 = phi i512 [ %t49, %block_0_418097 ]
  ; write r49 r48
  %t55 = inttoptr i64 %t53 to i64*
  store i64 %t52, i64* %t55
  br label %block_0_4180a0
block_0_4180a0:
  %t56 = phi i64 [ %t46, %block_0_418097 ], [ %t51, %block_0_41809c ]
  %t57 = phi i512 [ %t49, %block_0_418097 ], [ %t54, %block_0_41809c ]
  ; r53 := (bitcast r52 (vec 8 double))
  %t58 = bitcast i512 %t57 to <8 x double>
  ; r54 := (tuple r51 r53)
  %t59 = insertvalue { i64, <8 x double> } undef, i64 %t56, 0
  %t60 = insertvalue { i64, <8 x double> } %t59, <8 x double> %t58, 1
  ret { i64, <8 x double> } %t60
}
define void @__rshift_D2A(i64 %arg0, i64 %arg1) {
block_0_418100:
  ; r0 := (bv_add arg0 (0x14 : bv 64))
  %t0 = add i64 %arg0, 20
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (uext r1 64)
  %t3 = zext i32 %t2 to i64
  ; r3 := (trunc arg1 32)
  %t4 = trunc i64 %arg1 to i32
  ; r4 := (bv_add arg0 (0x18 : bv 64))
  %t5 = add i64 %arg0, 24
  ; r5 := (bv_sar r3 (0x5 : bv 32))
  %t6 = ashr i32 %t4, 5
  ; r6 := (uext r5 64)
  %t7 = zext i32 %t6 to i64
  ; r7 := (ssbb_overflows r5 r1 false)
  %t8 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t6, i32 %t2)
  %t9 = extractvalue { i32, i1 } %t8, 1
  ; r8 := (bv_sub r5 r1)
  %t10 = sub i32 %t6, %t2
  ; r9 := (bv_slt r8 (0x0 : bv 32))
  %t11 = icmp slt i32 %t10, 0
  ; r10 := (eq r9 r7)
  %t12 = icmp eq i1 %t11, %t9
  br i1 %t12, label %block_0_418170, label %block_0_418114
block_0_418114:
  %t13 = phi i64 [ %t3, %block_0_418100 ]
  %t14 = phi i64 [ %t7, %block_0_418100 ]
  %t15 = phi i64 [ %arg1, %block_0_418100 ]
  %t16 = phi i64 [ %arg0, %block_0_418100 ]
  %t17 = phi i64 [ %t5, %block_0_418100 ]
  ; r16 := (trunc r11 32)
  %t18 = trunc i64 %t13 to i32
  ; r17 := (sext r16 64)
  %t19 = sext i32 %t18 to i64
  ; r18 := (trunc r12 32)
  %t20 = trunc i64 %t14 to i32
  ; r19 := (sext r18 64)
  %t21 = sext i32 %t20 to i64
  ; r20 := (trunc r13 32)
  %t22 = trunc i64 %t15 to i32
  ; r21 := (bv_and r20 (0x1f : bv 32))
  %t23 = and i32 %t22, 31
  ; r22 := (eq r21 (0x0 : bv 32))
  %t24 = icmp eq i32 %t23, 0
  ; r23 := (uext r21 64)
  %t25 = zext i32 %t23 to i64
  ; r24 := (bv_mul (0x4 : bv 64) r17)
  %t26 = mul i64 4, %t19
  ; r25 := (bv_add r14 r24)
  %t27 = add i64 %t16, %t26
  ; r26 := (bv_add r25 (0x18 : bv 64))
  %t28 = add i64 %t27, 24
  ; r27 := (bv_mul (0x4 : bv 64) r19)
  %t29 = mul i64 4, %t21
  ; r28 := (bv_add r14 r27)
  %t30 = add i64 %t16, %t29
  ; r29 := (bv_add r28 (0x10 : bv 64))
  %t31 = add i64 %t30, 16
  ; r30 := (bv_add r28 (0x18 : bv 64))
  %t32 = add i64 %t30, 24
  br i1 %t24, label %block_0_41819d, label %block_0_41812c
block_0_41812c:
  %t33 = phi i64 [ %t31, %block_0_418114 ]
  %t34 = phi i64 [ %t21, %block_0_418114 ]
  %t35 = phi i64 [ %t25, %block_0_418114 ]
  %t36 = phi i64 [ %t16, %block_0_418114 ]
  %t37 = phi i64 [ %t17, %block_0_418114 ]
  %t38 = phi i64 [ %t28, %block_0_418114 ]
  ; r37 := (bv_mul (0x4 : bv 64) r32)
  %t39 = mul i64 4, %t34
  ; r38 := (bv_add r34 r37)
  %t40 = add i64 %t36, %t39
  ; r39 := (bv_add r38 (0x18 : bv 64))
  %t41 = add i64 %t40, 24
  ; r40 := (read r39 (bv 32))
  %t42 = inttoptr i64 %t41 to i32*
  %t43 = load i32, i32* %t42
  ; r41 := (bv_add r31 (0xc : bv 64))
  %t44 = add i64 %t33, 12
  ; r42 := (trunc r33 32)
  %t45 = trunc i64 %t35 to i32
  ; r43 := (bv_sub (0x20 : bv 32) r42)
  %t46 = sub i32 32, %t45
  ; r44 := (uext r43 64)
  %t47 = zext i32 %t46 to i64
  ; r45 := (trunc r33 8)
  %t48 = trunc i64 %t35 to i8
  ; r46 := (bv_and r45 (0x1f : bv 8))
  %t49 = and i8 %t48, 31
  ; r47 := (eq r46 (0x0 : bv 8))
  %t50 = icmp eq i8 %t49, 0
  ; r48 := (uext r46 32)
  %t51 = zext i8 %t49 to i32
  ; r49 := (bv_shr r40 r48)
  %t52 = lshr i32 %t43, %t51
  ; r50 := (mux r47 r40 r49)
  %t53 = select i1 %t50, i32 %t43, i32 %t52
  ; r51 := (uext r50 64)
  %t54 = zext i32 %t53 to i64
  ; r52 := (bv_ult r36 r41)
  %t55 = icmp ult i64 %t38, %t44
  ; r53 := (eq r36 r41)
  %t56 = icmp eq i64 %t38, %t44
  ; r54 := (or r52 r53)
  %t57 = or i1 %t55, %t56
  br i1 %t57, label %block_0_418165, label %block_0_418146
block_0_418146:
  %t58 = phi i64 [ %t54, %block_0_41812c ], [ %t87, %block_0_418146 ]
  %t59 = phi i64 [ %t44, %block_0_41812c ], [ %t79, %block_0_418146 ]
  %t60 = phi i64 [ %t35, %block_0_41812c ], [ %t60, %block_0_418146 ]
  %t61 = phi i64 [ %t36, %block_0_41812c ], [ %t61, %block_0_418146 ]
  %t62 = phi i64 [ %t37, %block_0_41812c ], [ %t80, %block_0_418146 ]
  %t63 = phi i64 [ %t38, %block_0_41812c ], [ %t63, %block_0_418146 ]
  %t64 = phi i64 [ %t47, %block_0_41812c ], [ %t64, %block_0_418146 ]
  %t65 = phi i64 [ %t37, %block_0_41812c ], [ %t65, %block_0_418146 ]
  ; r63 := (read r56 (bv 32))
  %t66 = inttoptr i64 %t59 to i32*
  %t67 = load i32, i32* %t66
  ; r64 := (trunc r61 8)
  %t68 = trunc i64 %t64 to i8
  ; r65 := (bv_and r64 (0x1f : bv 8))
  %t69 = and i8 %t68, 31
  ; r66 := (eq r65 (0x0 : bv 8))
  %t70 = icmp eq i8 %t69, 0
  ; r67 := (uext r65 32)
  %t71 = zext i8 %t69 to i32
  ; r68 := (bv_shl r63 r67)
  %t72 = shl i32 %t67, %t71
  ; r69 := (mux r66 r63 r68)
  %t73 = select i1 %t70, i32 %t67, i32 %t72
  ; r70 := (trunc r55 32)
  %t74 = trunc i64 %t58 to i32
  ; r71 := (bv_or r70 r69)
  %t75 = or i32 %t74, %t73
  ; write r59 r71
  %t76 = inttoptr i64 %t62 to i32*
  store i32 %t75, i32* %t76
  ; r72 := (read r56 (bv 32))
  %t77 = inttoptr i64 %t59 to i32*
  %t78 = load i32, i32* %t77
  ; r73 := (bv_add r56 (0x4 : bv 64))
  %t79 = add i64 %t59, 4
  ; r74 := (bv_add r59 (0x4 : bv 64))
  %t80 = add i64 %t62, 4
  ; r75 := (trunc r57 8)
  %t81 = trunc i64 %t60 to i8
  ; r76 := (bv_and r75 (0x1f : bv 8))
  %t82 = and i8 %t81, 31
  ; r77 := (eq r76 (0x0 : bv 8))
  %t83 = icmp eq i8 %t82, 0
  ; r78 := (uext r76 32)
  %t84 = zext i8 %t82 to i32
  ; r79 := (bv_shr r72 r78)
  %t85 = lshr i32 %t78, %t84
  ; r80 := (mux r77 r72 r79)
  %t86 = select i1 %t83, i32 %t78, i32 %t85
  ; r81 := (uext r80 64)
  %t87 = zext i32 %t86 to i64
  ; r82 := (eq r60 r73)
  %t88 = icmp eq i64 %t63, %t79
  ; r83 := (bv_ule r73 r60)
  %t89 = icmp ule i64 %t79, %t63
  ; r84 := (not r82)
  %t90 = icmp eq i1 %t88, 0
  ; r85 := (and r83 r84)
  %t91 = and i1 %t89, %t90
  br i1 %t91, label %block_0_418146, label %block_0_418165
block_0_418165:
  %t92 = phi i64 [ %t54, %block_0_41812c ], [ %t87, %block_0_418146 ]
  %t93 = phi i64 [ %t36, %block_0_41812c ], [ %t61, %block_0_418146 ]
  %t94 = phi i64 [ %t37, %block_0_41812c ], [ %t80, %block_0_418146 ]
  %t95 = phi i64 [ %t37, %block_0_41812c ], [ %t65, %block_0_418146 ]
  ; r90 := (trunc r86 32)
  %t96 = trunc i64 %t92 to i32
  ; r91 := (eq r90 (0x0 : bv 32))
  %t97 = icmp eq i32 %t96, 0
  ; write r88 r90
  %t98 = inttoptr i64 %t94 to i32*
  store i32 %t96, i32* %t98
  br i1 %t97, label %block_0_41816c, label %block_0_4181a4
block_0_41816c:
  %t99 = phi i64 [ %t93, %block_0_418165 ]
  %t100 = phi i64 [ %t94, %block_0_418165 ]
  %t101 = phi i64 [ %t95, %block_0_418165 ]
  br label %block_0_418170
block_0_418170:
  %t102 = phi i64 [ %arg0, %block_0_418100 ], [ %t99, %block_0_41816c ], [ %t133, %block_0_4181a2 ], [ %t136, %block_0_4181a4 ]
  %t103 = phi i64 [ %t5, %block_0_418100 ], [ %t100, %block_0_41816c ], [ %t134, %block_0_4181a2 ], [ %t139, %block_0_4181a4 ]
  %t104 = phi i64 [ %t5, %block_0_418100 ], [ %t101, %block_0_41816c ], [ %t135, %block_0_4181a2 ], [ %t138, %block_0_4181a4 ]
  ; r98 := (bv_sub r96 r97)
  %t105 = sub i64 %t103, %t104
  ; r99 := (bv_sar r98 (0x2 : bv 64))
  %t106 = ashr i64 %t105, 2
  ; r100 := (trunc r99 32)
  %t107 = trunc i64 %t106 to i32
  ; r101 := (eq r100 (0x0 : bv 32))
  %t108 = icmp eq i32 %t107, 0
  ; r102 := (bv_add r95 (0x14 : bv 64))
  %t109 = add i64 %t102, 20
  ; write r102 r100
  %t110 = inttoptr i64 %t109 to i32*
  store i32 %t107, i32* %t110
  br i1 %t108, label %block_0_418181, label %block_0_418188
block_0_418181:
  %t111 = phi i64 [ %t102, %block_0_418170 ]
  ; r104 := (bv_add r103 (0x18 : bv 64))
  %t112 = add i64 %t111, 24
  ; write r104 (0x0 : bv 32)
  %t113 = inttoptr i64 %t112 to i32*
  store i32 0, i32* %t113
  br label %block_0_418188
block_0_418188:
  ret void
block_0_418190:
  %t114 = phi i64 [ %t124, %block_0_41819d ]
  %t115 = phi i64 [ %t125, %block_0_41819d ]
  %t116 = phi i64 [ %t126, %block_0_41819d ]
  %t117 = phi i64 [ %t127, %block_0_41819d ]
  %t118 = phi i64 [ %t128, %block_0_41819d ]
  ; r110 := (read r105 (bv 32))
  %t119 = inttoptr i64 %t114 to i32*
  %t120 = load i32, i32* %t119
  ; r111 := (bv_add r105 (0x4 : bv 64))
  %t121 = add i64 %t114, 4
  ; write r107 r110
  %t122 = inttoptr i64 %t116 to i32*
  store i32 %t120, i32* %t122
  ; r112 := (bv_add r107 (0x4 : bv 64))
  %t123 = add i64 %t116, 4
  br label %block_0_41819d
block_0_41819d:
  %t124 = phi i64 [ %t32, %block_0_418114 ], [ %t121, %block_0_418190 ]
  %t125 = phi i64 [ %t16, %block_0_418114 ], [ %t115, %block_0_418190 ]
  %t126 = phi i64 [ %t17, %block_0_418114 ], [ %t123, %block_0_418190 ]
  %t127 = phi i64 [ %t28, %block_0_418114 ], [ %t117, %block_0_418190 ]
  %t128 = phi i64 [ %t17, %block_0_418114 ], [ %t118, %block_0_418190 ]
  ; r118 := (eq r116 r113)
  %t129 = icmp eq i64 %t127, %t124
  ; r119 := (bv_ule r113 r116)
  %t130 = icmp ule i64 %t124, %t127
  ; r120 := (not r118)
  %t131 = icmp eq i1 %t129, 0
  ; r121 := (and r119 r120)
  %t132 = and i1 %t130, %t131
  br i1 %t132, label %block_0_418190, label %block_0_4181a2
block_0_4181a2:
  %t133 = phi i64 [ %t125, %block_0_41819d ]
  %t134 = phi i64 [ %t126, %block_0_41819d ]
  %t135 = phi i64 [ %t128, %block_0_41819d ]
  br label %block_0_418170
block_0_4181a4:
  %t136 = phi i64 [ %t93, %block_0_418165 ]
  %t137 = phi i64 [ %t94, %block_0_418165 ]
  %t138 = phi i64 [ %t95, %block_0_418165 ]
  ; r128 := (bv_add r126 (0x4 : bv 64))
  %t139 = add i64 %t137, 4
  br label %block_0_418170
}
define { i64, i64, <8 x double> } @__lo0bits_D2A(i64 %arg0, <8 x double> %arg1) {
block_0_4182b0:
  ; r0 := (read arg0 (bv 32))
  %t0 = inttoptr i64 %arg0 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (trunc r0 8)
  %t3 = trunc i32 %t1 to i8
  ; r3 := (bv_and r2 (0x7 : bv 8))
  %t4 = and i8 %t3, 7
  ; r4 := (eq r3 (0x0 : bv 8))
  %t5 = icmp eq i8 %t4, 0
  ; r5 := (bitcast arg1 (bv 512))
  %t6 = bitcast <8 x double> %arg1 to i512
  ; r6 := (bitcast arg1 (bv 512))
  %t7 = bitcast <8 x double> %arg1 to i512
  br i1 %t5, label %block_0_4182d0, label %block_0_4182b7
block_0_4182b7:
  %t8 = phi i64 [ %t2, %block_0_4182b0 ]
  %t9 = phi i64 [ %arg0, %block_0_4182b0 ]
  %t10 = phi i512 [ %t7, %block_0_4182b0 ]
  ; r10 := (trunc r7 8)
  %t11 = trunc i64 %t8 to i8
  ; r11 := (bv_and r10 (0x1 : bv 8))
  %t12 = and i8 %t11, 1
  ; r12 := (eq r11 (0x0 : bv 8))
  %t13 = icmp eq i8 %t12, 0
  br i1 %t13, label %block_0_4182be, label %block_0_41830a
block_0_4182be:
  %t14 = phi i64 [ 0, %block_0_4182b7 ]
  %t15 = phi i64 [ %t8, %block_0_4182b7 ]
  %t16 = phi i64 [ %t9, %block_0_4182b7 ]
  %t17 = phi i512 [ %t10, %block_0_4182b7 ]
  ; r17 := (trunc r14 8)
  %t18 = trunc i64 %t15 to i8
  ; r18 := (bv_and r17 (0x2 : bv 8))
  %t19 = and i8 %t18, 2
  ; r19 := (eq r18 (0x0 : bv 8))
  %t20 = icmp eq i8 %t19, 0
  br i1 %t20, label %block_0_4182c3, label %block_0_418316
block_0_4182c3:
  %t21 = phi i64 [ %t15, %block_0_4182be ]
  %t22 = phi i64 [ %t16, %block_0_4182be ]
  %t23 = phi i512 [ %t17, %block_0_4182be ]
  ; r23 := (trunc r20 32)
  %t24 = trunc i64 %t21 to i32
  ; r24 := (bv_shr r23 (0x2 : bv 32))
  %t25 = lshr i32 %t24, 2
  ; r25 := (uext r24 64)
  %t26 = zext i32 %t25 to i64
  ; write r21 r24
  %t27 = inttoptr i64 %t22 to i32*
  store i32 %t25, i32* %t27
  ; r26 := (bitcast r22 (vec 8 double))
  %t28 = bitcast i512 %t23 to <8 x double>
  ; r27 := (tuple (0x2 : bv 64) r25 r26)
  %t29 = insertvalue { i64, i64, <8 x double> } undef, i64 2, 0
  %t30 = insertvalue { i64, i64, <8 x double> } %t29, i64 %t26, 1
  %t31 = insertvalue { i64, i64, <8 x double> } %t30, <8 x double> %t28, 2
  ret { i64, i64, <8 x double> } %t31
block_0_4182d0:
  %t32 = phi i64 [ %t2, %block_0_4182b0 ]
  %t33 = phi i64 [ %arg0, %block_0_4182b0 ]
  %t34 = phi i512 [ %t6, %block_0_4182b0 ]
  ; r31 := (trunc r28 16)
  %t35 = trunc i64 %t32 to i16
  ; r32 := (eq r31 (0x0 : bv 16))
  %t36 = icmp eq i16 %t35, 0
  br i1 %t36, label %block_0_4182d7, label %block_0_4182dc
block_0_4182d7:
  %t37 = phi i64 [ 0, %block_0_4182d0 ]
  %t38 = phi i64 [ %t32, %block_0_4182d0 ]
  %t39 = phi i64 [ %t33, %block_0_4182d0 ]
  %t40 = phi i512 [ %t34, %block_0_4182d0 ]
  ; r37 := (trunc r34 32)
  %t41 = trunc i64 %t38 to i32
  ; r38 := (bv_shr r37 (0x10 : bv 32))
  %t42 = lshr i32 %t41, 16
  ; r39 := (uext r38 64)
  %t43 = zext i32 %t42 to i64
  ; r40 := (bv_and r33 (0xffffffffffffff00 : bv 64))
  %t44 = and i64 %t37, 18446744073709551360
  ; r41 := (bv_or r40 (0x10 : bv 64))
  %t45 = or i64 %t44, 16
  br label %block_0_4182dc
block_0_4182dc:
  %t46 = phi i64 [ 0, %block_0_4182d0 ], [ %t45, %block_0_4182d7 ]
  %t47 = phi i64 [ %t32, %block_0_4182d0 ], [ %t43, %block_0_4182d7 ]
  %t48 = phi i64 [ %t33, %block_0_4182d0 ], [ %t39, %block_0_4182d7 ]
  %t49 = phi i512 [ %t34, %block_0_4182d0 ], [ %t40, %block_0_4182d7 ]
  ; r46 := (trunc r43 8)
  %t50 = trunc i64 %t47 to i8
  ; r47 := (eq r46 (0x0 : bv 8))
  %t51 = icmp eq i8 %t50, 0
  br i1 %t51, label %block_0_4182e0, label %block_0_4182e6
block_0_4182e0:
  %t52 = phi i64 [ %t46, %block_0_4182dc ]
  %t53 = phi i64 [ %t47, %block_0_4182dc ]
  %t54 = phi i64 [ %t48, %block_0_4182dc ]
  %t55 = phi i512 [ %t49, %block_0_4182dc ]
  ; r52 := (trunc r48 32)
  %t56 = trunc i64 %t52 to i32
  ; r53 := (bv_add r52 (0x8 : bv 32))
  %t57 = add i32 %t56, 8
  ; r54 := (uext r53 64)
  %t58 = zext i32 %t57 to i64
  ; r55 := (trunc r49 32)
  %t59 = trunc i64 %t53 to i32
  ; r56 := (bv_shr r55 (0x8 : bv 32))
  %t60 = lshr i32 %t59, 8
  ; r57 := (uext r56 64)
  %t61 = zext i32 %t60 to i64
  br label %block_0_4182e6
block_0_4182e6:
  %t62 = phi i64 [ %t46, %block_0_4182dc ], [ %t58, %block_0_4182e0 ]
  %t63 = phi i64 [ %t47, %block_0_4182dc ], [ %t61, %block_0_4182e0 ]
  %t64 = phi i64 [ %t48, %block_0_4182dc ], [ %t54, %block_0_4182e0 ]
  %t65 = phi i512 [ %t49, %block_0_4182dc ], [ %t55, %block_0_4182e0 ]
  ; r62 := (trunc r59 8)
  %t66 = trunc i64 %t63 to i8
  ; r63 := (bv_and r62 (0xf : bv 8))
  %t67 = and i8 %t66, 15
  ; r64 := (eq r63 (0x0 : bv 8))
  %t68 = icmp eq i8 %t67, 0
  br i1 %t68, label %block_0_4182eb, label %block_0_4182f1
block_0_4182eb:
  %t69 = phi i64 [ %t62, %block_0_4182e6 ]
  %t70 = phi i64 [ %t63, %block_0_4182e6 ]
  %t71 = phi i64 [ %t64, %block_0_4182e6 ]
  %t72 = phi i512 [ %t65, %block_0_4182e6 ]
  ; r69 := (trunc r65 32)
  %t73 = trunc i64 %t69 to i32
  ; r70 := (bv_add r69 (0x4 : bv 32))
  %t74 = add i32 %t73, 4
  ; r71 := (uext r70 64)
  %t75 = zext i32 %t74 to i64
  ; r72 := (trunc r66 32)
  %t76 = trunc i64 %t70 to i32
  ; r73 := (bv_shr r72 (0x4 : bv 32))
  %t77 = lshr i32 %t76, 4
  ; r74 := (uext r73 64)
  %t78 = zext i32 %t77 to i64
  br label %block_0_4182f1
block_0_4182f1:
  %t79 = phi i64 [ %t62, %block_0_4182e6 ], [ %t75, %block_0_4182eb ]
  %t80 = phi i64 [ %t63, %block_0_4182e6 ], [ %t78, %block_0_4182eb ]
  %t81 = phi i64 [ %t64, %block_0_4182e6 ], [ %t71, %block_0_4182eb ]
  %t82 = phi i512 [ %t65, %block_0_4182e6 ], [ %t72, %block_0_4182eb ]
  ; r79 := (trunc r76 8)
  %t83 = trunc i64 %t80 to i8
  ; r80 := (bv_and r79 (0x3 : bv 8))
  %t84 = and i8 %t83, 3
  ; r81 := (eq r80 (0x0 : bv 8))
  %t85 = icmp eq i8 %t84, 0
  br i1 %t85, label %block_0_4182f6, label %block_0_4182fc
block_0_4182f6:
  %t86 = phi i64 [ %t79, %block_0_4182f1 ]
  %t87 = phi i64 [ %t80, %block_0_4182f1 ]
  %t88 = phi i64 [ %t81, %block_0_4182f1 ]
  %t89 = phi i512 [ %t82, %block_0_4182f1 ]
  ; r86 := (trunc r82 32)
  %t90 = trunc i64 %t86 to i32
  ; r87 := (bv_add r86 (0x2 : bv 32))
  %t91 = add i32 %t90, 2
  ; r88 := (uext r87 64)
  %t92 = zext i32 %t91 to i64
  ; r89 := (trunc r83 32)
  %t93 = trunc i64 %t87 to i32
  ; r90 := (bv_shr r89 (0x2 : bv 32))
  %t94 = lshr i32 %t93, 2
  ; r91 := (uext r90 64)
  %t95 = zext i32 %t94 to i64
  br label %block_0_4182fc
block_0_4182fc:
  %t96 = phi i64 [ %t79, %block_0_4182f1 ], [ %t92, %block_0_4182f6 ]
  %t97 = phi i64 [ %t80, %block_0_4182f1 ], [ %t95, %block_0_4182f6 ]
  %t98 = phi i64 [ %t81, %block_0_4182f1 ], [ %t88, %block_0_4182f6 ]
  %t99 = phi i512 [ %t82, %block_0_4182f1 ], [ %t89, %block_0_4182f6 ]
  ; r96 := (trunc r93 8)
  %t100 = trunc i64 %t97 to i8
  ; r97 := (bv_and r96 (0x1 : bv 8))
  %t101 = and i8 %t100, 1
  ; r98 := (eq r97 (0x0 : bv 8))
  %t102 = icmp eq i8 %t101, 0
  br i1 %t102, label %block_0_418301, label %block_0_418308
block_0_418301:
  %t103 = phi i64 [ %t96, %block_0_4182fc ]
  %t104 = phi i64 [ %t97, %block_0_4182fc ]
  %t105 = phi i64 [ %t98, %block_0_4182fc ]
  %t106 = phi i512 [ %t99, %block_0_4182fc ]
  ; r103 := (trunc r100 32)
  %t107 = trunc i64 %t104 to i32
  ; r104 := (bv_shr r103 (0x1 : bv 32))
  %t108 = lshr i32 %t107, 1
  ; r105 := (eq r104 (0x0 : bv 32))
  %t109 = icmp eq i32 %t108, 0
  ; r106 := (uext r104 64)
  %t110 = zext i32 %t108 to i64
  br i1 %t109, label %block_0_418310, label %block_0_418305
block_0_418305:
  %t111 = phi i64 [ %t103, %block_0_418301 ]
  %t112 = phi i64 [ %t110, %block_0_418301 ]
  %t113 = phi i64 [ %t105, %block_0_418301 ]
  %t114 = phi i512 [ %t106, %block_0_418301 ]
  ; r111 := (trunc r107 32)
  %t115 = trunc i64 %t111 to i32
  ; r112 := (bv_add r111 (0x1 : bv 32))
  %t116 = add i32 %t115, 1
  ; r113 := (uext r112 64)
  %t117 = zext i32 %t116 to i64
  br label %block_0_418308
block_0_418308:
  %t118 = phi i64 [ %t96, %block_0_4182fc ], [ %t117, %block_0_418305 ]
  %t119 = phi i64 [ %t97, %block_0_4182fc ], [ %t112, %block_0_418305 ]
  %t120 = phi i64 [ %t98, %block_0_4182fc ], [ %t113, %block_0_418305 ]
  %t121 = phi i512 [ %t99, %block_0_4182fc ], [ %t114, %block_0_418305 ]
  ; r118 := (trunc r115 32)
  %t122 = trunc i64 %t119 to i32
  ; write r116 r118
  %t123 = inttoptr i64 %t120 to i32*
  store i32 %t122, i32* %t123
  br label %block_0_41830a
block_0_41830a:
  %t124 = phi i64 [ 0, %block_0_4182b7 ], [ %t118, %block_0_418308 ]
  %t125 = phi i64 [ %t8, %block_0_4182b7 ], [ %t119, %block_0_418308 ]
  %t126 = phi i512 [ %t10, %block_0_4182b7 ], [ %t121, %block_0_418308 ]
  ; r122 := (bitcast r121 (vec 8 double))
  %t127 = bitcast i512 %t126 to <8 x double>
  ; r123 := (tuple r119 r120 r122)
  %t128 = insertvalue { i64, i64, <8 x double> } undef, i64 %t124, 0
  %t129 = insertvalue { i64, i64, <8 x double> } %t128, i64 %t125, 1
  %t130 = insertvalue { i64, i64, <8 x double> } %t129, <8 x double> %t127, 2
  ret { i64, i64, <8 x double> } %t130
block_0_418310:
  %t131 = phi i64 [ %t110, %block_0_418301 ]
  %t132 = phi i512 [ %t106, %block_0_418301 ]
  ; r126 := (bitcast r125 (vec 8 double))
  %t133 = bitcast i512 %t132 to <8 x double>
  ; r127 := (tuple (0x20 : bv 64) r124 r126)
  %t134 = insertvalue { i64, i64, <8 x double> } undef, i64 32, 0
  %t135 = insertvalue { i64, i64, <8 x double> } %t134, i64 %t131, 1
  %t136 = insertvalue { i64, i64, <8 x double> } %t135, <8 x double> %t133, 2
  ret { i64, i64, <8 x double> } %t136
block_0_418316:
  %t137 = phi i64 [ %t14, %block_0_4182be ]
  %t138 = phi i64 [ %t15, %block_0_4182be ]
  %t139 = phi i64 [ %t16, %block_0_4182be ]
  %t140 = phi i512 [ %t17, %block_0_4182be ]
  ; r132 := (trunc r129 32)
  %t141 = trunc i64 %t138 to i32
  ; r133 := (bv_shr r132 (0x1 : bv 32))
  %t142 = lshr i32 %t141, 1
  ; r134 := (uext r133 64)
  %t143 = zext i32 %t142 to i64
  ; r135 := (bv_and r128 (0xffffffffffffff00 : bv 64))
  %t144 = and i64 %t137, 18446744073709551360
  ; r136 := (bv_or r135 (0x1 : bv 64))
  %t145 = or i64 %t144, 1
  ; write r130 r133
  %t146 = inttoptr i64 %t139 to i32*
  store i32 %t142, i32* %t146
  ; r137 := (bitcast r131 (vec 8 double))
  %t147 = bitcast i512 %t140 to <8 x double>
  ; r138 := (tuple r136 r134 r137)
  %t148 = insertvalue { i64, i64, <8 x double> } undef, i64 %t145, 0
  %t149 = insertvalue { i64, i64, <8 x double> } %t148, i64 %t143, 1
  %t150 = insertvalue { i64, i64, <8 x double> } %t149, <8 x double> %t147, 2
  ret { i64, i64, <8 x double> } %t150
}
define { i64, <8 x double> } @__hi0bits_D2A(i64 %arg0, <8 x double> %arg1) {
block_0_418320:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (bv_and r0 (0xffff0000 : bv 32))
  %t1 = and i32 %t0, 4294901760
  ; r2 := (eq r1 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg1 (bv 512))
  %t3 = bitcast <8 x double> %arg1 to i512
  ; r4 := (bitcast arg1 (bv 512))
  %t4 = bitcast <8 x double> %arg1 to i512
  br i1 %t2, label %block_0_41832a, label %block_0_41832f
block_0_41832a:
  %t5 = phi i64 [ 0, %block_0_418320 ]
  %t6 = phi i64 [ %arg0, %block_0_418320 ]
  %t7 = phi i512 [ %t3, %block_0_418320 ]
  ; r8 := (trunc r6 32)
  %t8 = trunc i64 %t6 to i32
  ; r9 := (bv_shl r8 (0x10 : bv 32))
  %t9 = shl i32 %t8, 16
  ; r10 := (uext r9 64)
  %t10 = zext i32 %t9 to i64
  ; r11 := (bv_and r5 (0xffffffffffffff00 : bv 64))
  %t11 = and i64 %t5, 18446744073709551360
  ; r12 := (bv_or r11 (0x10 : bv 64))
  %t12 = or i64 %t11, 16
  br label %block_0_41832f
block_0_41832f:
  %t13 = phi i64 [ 0, %block_0_418320 ], [ %t12, %block_0_41832a ]
  %t14 = phi i64 [ %arg0, %block_0_418320 ], [ %t10, %block_0_41832a ]
  %t15 = phi i512 [ %t4, %block_0_418320 ], [ %t7, %block_0_41832a ]
  ; r16 := (trunc r14 32)
  %t16 = trunc i64 %t14 to i32
  ; r17 := (bv_and r16 (0xff000000 : bv 32))
  %t17 = and i32 %t16, 4278190080
  ; r18 := (eq r17 (0x0 : bv 32))
  %t18 = icmp eq i32 %t17, 0
  br i1 %t18, label %block_0_418337, label %block_0_41833d
block_0_418337:
  %t19 = phi i64 [ %t13, %block_0_41832f ]
  %t20 = phi i64 [ %t14, %block_0_41832f ]
  %t21 = phi i512 [ %t15, %block_0_41832f ]
  ; r22 := (trunc r19 32)
  %t22 = trunc i64 %t19 to i32
  ; r23 := (bv_add r22 (0x8 : bv 32))
  %t23 = add i32 %t22, 8
  ; r24 := (uext r23 64)
  %t24 = zext i32 %t23 to i64
  ; r25 := (trunc r20 32)
  %t25 = trunc i64 %t20 to i32
  ; r26 := (bv_shl r25 (0x8 : bv 32))
  %t26 = shl i32 %t25, 8
  ; r27 := (uext r26 64)
  %t27 = zext i32 %t26 to i64
  br label %block_0_41833d
block_0_41833d:
  %t28 = phi i64 [ %t13, %block_0_41832f ], [ %t24, %block_0_418337 ]
  %t29 = phi i64 [ %t14, %block_0_41832f ], [ %t27, %block_0_418337 ]
  %t30 = phi i512 [ %t15, %block_0_41832f ], [ %t21, %block_0_418337 ]
  ; r31 := (trunc r29 32)
  %t31 = trunc i64 %t29 to i32
  ; r32 := (bv_and r31 (0xf0000000 : bv 32))
  %t32 = and i32 %t31, 4026531840
  ; r33 := (eq r32 (0x0 : bv 32))
  %t33 = icmp eq i32 %t32, 0
  br i1 %t33, label %block_0_418345, label %block_0_41834b
block_0_418345:
  %t34 = phi i64 [ %t28, %block_0_41833d ]
  %t35 = phi i64 [ %t29, %block_0_41833d ]
  %t36 = phi i512 [ %t30, %block_0_41833d ]
  ; r37 := (trunc r34 32)
  %t37 = trunc i64 %t34 to i32
  ; r38 := (bv_add r37 (0x4 : bv 32))
  %t38 = add i32 %t37, 4
  ; r39 := (uext r38 64)
  %t39 = zext i32 %t38 to i64
  ; r40 := (trunc r35 32)
  %t40 = trunc i64 %t35 to i32
  ; r41 := (bv_shl r40 (0x4 : bv 32))
  %t41 = shl i32 %t40, 4
  ; r42 := (uext r41 64)
  %t42 = zext i32 %t41 to i64
  br label %block_0_41834b
block_0_41834b:
  %t43 = phi i64 [ %t28, %block_0_41833d ], [ %t39, %block_0_418345 ]
  %t44 = phi i64 [ %t29, %block_0_41833d ], [ %t42, %block_0_418345 ]
  %t45 = phi i512 [ %t30, %block_0_41833d ], [ %t36, %block_0_418345 ]
  ; r46 := (trunc r44 32)
  %t46 = trunc i64 %t44 to i32
  ; r47 := (bv_and r46 (0xc0000000 : bv 32))
  %t47 = and i32 %t46, 3221225472
  ; r48 := (eq r47 (0x0 : bv 32))
  %t48 = icmp eq i32 %t47, 0
  br i1 %t48, label %block_0_418353, label %block_0_418359
block_0_418353:
  %t49 = phi i64 [ %t43, %block_0_41834b ]
  %t50 = phi i64 [ %t44, %block_0_41834b ]
  %t51 = phi i512 [ %t45, %block_0_41834b ]
  ; r52 := (trunc r49 32)
  %t52 = trunc i64 %t49 to i32
  ; r53 := (bv_add r52 (0x2 : bv 32))
  %t53 = add i32 %t52, 2
  ; r54 := (uext r53 64)
  %t54 = zext i32 %t53 to i64
  ; r55 := (trunc r50 32)
  %t55 = trunc i64 %t50 to i32
  ; r56 := (bv_shl r55 (0x2 : bv 32))
  %t56 = shl i32 %t55, 2
  ; r57 := (uext r56 64)
  %t57 = zext i32 %t56 to i64
  br label %block_0_418359
block_0_418359:
  %t58 = phi i64 [ %t43, %block_0_41834b ], [ %t54, %block_0_418353 ]
  %t59 = phi i64 [ %t44, %block_0_41834b ], [ %t57, %block_0_418353 ]
  %t60 = phi i512 [ %t45, %block_0_41834b ], [ %t51, %block_0_418353 ]
  ; r61 := (trunc r59 32)
  %t61 = trunc i64 %t59 to i32
  ; r62 := (bv_slt r61 (0x0 : bv 32))
  %t62 = icmp slt i32 %t61, 0
  br i1 %t62, label %block_0_41836e, label %block_0_41835d
block_0_41835d:
  %t63 = phi i64 [ %t58, %block_0_418359 ]
  %t64 = phi i64 [ %t59, %block_0_418359 ]
  %t65 = phi i512 [ %t60, %block_0_418359 ]
  ; r66 := (bv_add r63 (0x1 : bv 64))
  %t66 = add i64 %t63, 1
  ; r67 := (trunc r66 32)
  %t67 = trunc i64 %t66 to i32
  ; r68 := (trunc r64 32)
  %t68 = trunc i64 %t64 to i32
  ; r69 := (bv_and r68 (0x40000000 : bv 32))
  %t69 = and i32 %t68, 1073741824
  ; r70 := (eq r69 (0x0 : bv 32))
  %t70 = icmp eq i32 %t69, 0
  ; r71 := (mux r70 (0x20 : bv 32) r67)
  %t71 = select i1 %t70, i32 32, i32 %t67
  ; r72 := (uext r71 64)
  %t72 = zext i32 %t71 to i64
  br label %block_0_41836e
block_0_41836e:
  %t73 = phi i64 [ %t58, %block_0_418359 ], [ %t72, %block_0_41835d ]
  %t74 = phi i512 [ %t60, %block_0_418359 ], [ %t65, %block_0_41835d ]
  ; r75 := (trunc r73 32)
  %t75 = trunc i64 %t73 to i32
  ; r76 := (uext r75 64)
  %t76 = zext i32 %t75 to i64
  ; r77 := (bitcast r74 (vec 8 double))
  %t77 = bitcast i512 %t74 to <8 x double>
  ; r78 := (tuple r76 r77)
  %t78 = insertvalue { i64, <8 x double> } undef, i64 %t76, 0
  %t79 = insertvalue { i64, <8 x double> } %t78, <8 x double> %t77, 1
  ret { i64, <8 x double> } %t79
}
define { i64, i64, <8 x double> } @__cmp_D2A(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_418380:
  ; r0 := (bv_add arg0 (0x14 : bv 64))
  %t0 = add i64 %arg0, 20
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (bv_add arg1 (0x14 : bv 64))
  %t3 = add i64 %arg1, 20
  ; r3 := (read r2 (bv 32))
  %t4 = inttoptr i64 %t3 to i32*
  %t5 = load i32, i32* %t4
  ; r4 := (uext r3 64)
  %t6 = zext i32 %t5 to i64
  ; r5 := (bv_sub r1 r3)
  %t7 = sub i32 %t2, %t5
  ; r6 := (eq r1 r3)
  %t8 = icmp eq i32 %t2, %t5
  ; r7 := (uext r5 64)
  %t9 = zext i32 %t7 to i64
  ; r8 := (bitcast arg2 (bv 512))
  %t10 = bitcast <8 x double> %arg2 to i512
  ; r9 := (bitcast arg2 (bv 512))
  %t11 = bitcast <8 x double> %arg2 to i512
  br i1 %t8, label %block_0_41838e, label %block_0_4183be
block_0_41838e:
  %t12 = phi i64 [ %t6, %block_0_418380 ]
  %t13 = phi i64 [ %arg1, %block_0_418380 ]
  %t14 = phi i64 [ %arg0, %block_0_418380 ]
  %t15 = phi i64 [ %t9, %block_0_418380 ]
  %t16 = phi i512 [ %t10, %block_0_418380 ]
  ; r15 := (trunc r10 32)
  %t17 = trunc i64 %t12 to i32
  ; r16 := (sext r15 64)
  %t18 = sext i32 %t17 to i64
  ; r17 := (bv_add r12 (0x18 : bv 64))
  %t19 = add i64 %t14, 24
  ; r18 := (bv_mul (0x4 : bv 64) r16)
  %t20 = mul i64 4, %t18
  ; r19 := (bv_add r18 (0x10 : bv 64))
  %t21 = add i64 %t20, 16
  ; r20 := (bv_add r12 r19)
  %t22 = add i64 %t14, %t21
  ; r21 := (bv_add r20 (0x8 : bv 64))
  %t23 = add i64 %t22, 8
  ; r22 := (bv_add r11 r19)
  %t24 = add i64 %t13, %t21
  ; r23 := (bv_add r22 (0x8 : bv 64))
  %t25 = add i64 %t24, 8
  br label %block_0_4183a7
block_0_4183a7:
  %t26 = phi i64 [ %t25, %block_0_41838e ], [ %t46, %block_0_4183b1 ]
  %t27 = phi i64 [ %t23, %block_0_41838e ], [ %t45, %block_0_4183b1 ]
  %t28 = phi i64 [ %t19, %block_0_41838e ], [ %t42, %block_0_4183b1 ]
  %t29 = phi i64 [ %t15, %block_0_41838e ], [ %t43, %block_0_4183b1 ]
  %t30 = phi i512 [ %t16, %block_0_41838e ], [ %t44, %block_0_4183b1 ]
  ; r29 := (bv_add r25 (0xfffffffffffffffc : bv 64))
  %t31 = add i64 %t27, 18446744073709551612
  ; r30 := (read r29 (bv 32))
  %t32 = inttoptr i64 %t31 to i32*
  %t33 = load i32, i32* %t32
  ; r31 := (uext r30 64)
  %t34 = zext i32 %t33 to i64
  ; r32 := (bv_add r24 (0xfffffffffffffffc : bv 64))
  %t35 = add i64 %t26, 18446744073709551612
  ; r33 := (read r32 (bv 32))
  %t36 = inttoptr i64 %t35 to i32*
  %t37 = load i32, i32* %t36
  ; r34 := (uext r33 64)
  %t38 = zext i32 %t37 to i64
  ; r35 := (eq r30 r33)
  %t39 = icmp eq i32 %t33, %t37
  br i1 %t39, label %block_0_4183b1, label %block_0_4183c2
block_0_4183b1:
  %t40 = phi i64 [ %t26, %block_0_4183a7 ]
  %t41 = phi i64 [ %t27, %block_0_4183a7 ]
  %t42 = phi i64 [ %t28, %block_0_4183a7 ]
  %t43 = phi i64 [ %t29, %block_0_4183a7 ]
  %t44 = phi i512 [ %t30, %block_0_4183a7 ]
  ; r41 := (bv_add r37 (0xfffffffffffffffc : bv 64))
  %t45 = add i64 %t41, 18446744073709551612
  ; r42 := (bv_add r36 (0xfffffffffffffffc : bv 64))
  %t46 = add i64 %t40, 18446744073709551612
  ; r43 := (bv_ult r38 r41)
  %t47 = icmp ult i64 %t42, %t45
  br i1 %t47, label %block_0_4183a7, label %block_0_4183be
block_0_4183be:
  %t48 = phi i64 [ %t6, %block_0_418380 ], [ %t45, %block_0_4183b1 ]
  %t49 = phi i64 [ %t9, %block_0_418380 ], [ %t43, %block_0_4183b1 ]
  %t50 = phi i512 [ %t11, %block_0_418380 ], [ %t44, %block_0_4183b1 ]
  ; r47 := (trunc r45 32)
  %t51 = trunc i64 %t49 to i32
  ; r48 := (uext r47 64)
  %t52 = zext i32 %t51 to i64
  ; r49 := (bitcast r46 (vec 8 double))
  %t53 = bitcast i512 %t50 to <8 x double>
  ; r50 := (tuple r48 r44 r49)
  %t54 = insertvalue { i64, i64, <8 x double> } undef, i64 %t52, 0
  %t55 = insertvalue { i64, i64, <8 x double> } %t54, i64 %t48, 1
  %t56 = insertvalue { i64, i64, <8 x double> } %t55, <8 x double> %t53, 2
  ret { i64, i64, <8 x double> } %t56
block_0_4183c2:
  %t57 = phi i64 [ %t38, %block_0_4183a7 ]
  %t58 = phi i64 [ %t27, %block_0_4183a7 ]
  %t59 = phi i64 [ %t34, %block_0_4183a7 ]
  %t60 = phi i64 [ %t29, %block_0_4183a7 ]
  %t61 = phi i512 [ %t30, %block_0_4183a7 ]
  ; r56 := (trunc r53 32)
  %t62 = trunc i64 %t59 to i32
  ; r57 := (trunc r51 32)
  %t63 = trunc i64 %t57 to i32
  ; r58 := (bv_ult r56 r57)
  %t64 = icmp ult i32 %t62, %t63
  ; r59 := (trunc r54 32)
  %t65 = trunc i64 %t60 to i32
  ; r60 := (mux r58 (0x1 : bv 32) (0x0 : bv 32))
  %t66 = select i1 %t64, i32 1, i32 0
  ; r61 := (bv_add r59 r60)
  %t67 = add i32 %t65, %t66
  ; r62 := (bv_sub r59 r61)
  %t68 = sub i32 %t65, %t67
  ; r63 := (bv_or r62 (0x1 : bv 32))
  %t69 = or i32 %t68, 1
  ; r64 := (uext r63 64)
  %t70 = zext i32 %t69 to i64
  ; r65 := (bitcast r55 (vec 8 double))
  %t71 = bitcast i512 %t61 to <8 x double>
  ; r66 := (tuple r64 r52 r65)
  %t72 = insertvalue { i64, i64, <8 x double> } undef, i64 %t70, 0
  %t73 = insertvalue { i64, i64, <8 x double> } %t72, i64 %t58, 1
  %t74 = insertvalue { i64, i64, <8 x double> } %t73, <8 x double> %t71, 2
  ret { i64, i64, <8 x double> } %t74
}
define void @__b2d_D2A(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_4183d0:
  ; r0 := (bv_add arg0 (0x18 : bv 64))
  %t0 = add i64 %arg0, 24
  ; r1 := (bv_add arg0 (0x14 : bv 64))
  %t1 = add i64 %arg0, 20
  ; r2 := (read r1 (bv 32))
  %t2 = inttoptr i64 %t1 to i32*
  %t3 = load i32, i32* %t2
  ; r3 := (sext r2 64)
  %t4 = sext i32 %t3 to i64
  ; r4 := (bv_mul (0x4 : bv 64) r3)
  %t5 = mul i64 4, %t4
  ; r5 := (bv_add arg0 r4)
  %t6 = add i64 %arg0, %t5
  ; r6 := (bv_add r5 (0x10 : bv 64))
  %t7 = add i64 %t6, 16
  ; r7 := (bv_add r5 (0x14 : bv 64))
  %t8 = add i64 %t6, 20
  ; r8 := (read r7 (bv 32))
  %t9 = inttoptr i64 %t8 to i32*
  %t10 = load i32, i32* %t9
  ; r9 := (uext r8 64)
  %t11 = zext i32 %t10 to i64
  ; r10 := (bitcast arg2 (bv 512))
  %t12 = bitcast <8 x double> %arg2 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r12 := call __hi0bits_D2A(r9, r11)
  %t14 = call { i64, <8 x double> } (i64, <8 x double>) @__hi0bits_D2A(i64 %t11, <8 x double> %t13)
  ; r13 := (tuple_field r12 0)
  %t15 = extractvalue { i64, <8 x double> } %t14, 0
  ; r14 := (tuple_field r12 1)
  %t16 = extractvalue { i64, <8 x double> } %t14, 1
  ; r15 := (bitcast r14 (bv 512))
  %t17 = bitcast <8 x double> %t16 to i512
  br label %block_0_41840d
block_0_41840d:
  %t18 = phi i64 [ %t15, %block_0_4183d0 ]
  %t19 = phi i64 [ %arg1, %block_0_4183d0 ]
  %t20 = phi i64 [ %t7, %block_0_4183d0 ]
  %t21 = phi i64 [ %t8, %block_0_4183d0 ]
  %t22 = phi i64 [ %t0, %block_0_4183d0 ]
  ; r21 := (trunc r16 32)
  %t23 = trunc i64 %t18 to i32
  ; r22 := (uext r21 64)
  %t24 = zext i32 %t23 to i64
  ; r23 := (bv_sub (0x20 : bv 32) r21)
  %t25 = sub i32 32, %t23
  ; r24 := (ssbb_overflows r21 (0xa : bv 32) false)
  %t26 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t23, i32 10)
  %t27 = extractvalue { i32, i1 } %t26, 1
  ; r25 := (bv_add r21 (0xfffffff6 : bv 32))
  %t28 = add i32 %t23, 4294967286
  ; r26 := (bv_slt r25 (0x0 : bv 32))
  %t29 = icmp slt i32 %t28, 0
  ; r27 := (eq r21 (0xa : bv 32))
  %t30 = icmp eq i32 %t23, 10
  ; write r17 r23
  %t31 = inttoptr i64 %t19 to i32*
  store i32 %t25, i32* %t31
  ; r28 := (not r27)
  %t32 = icmp eq i1 %t30, 0
  ; r29 := (eq r26 r24)
  %t33 = icmp eq i1 %t29, %t27
  ; r30 := (and r28 r29)
  %t34 = and i1 %t32, %t33
  br i1 %t34, label %block_0_418490, label %block_0_41841d
block_0_41841d:
  %t35 = phi i64 [ %t21, %block_0_41840d ]
  %t36 = phi i64 [ %t22, %block_0_41840d ]
  ; r33 := (bv_ult r32 r31)
  %t37 = icmp ult i64 %t36, %t35
  br i1 %t37, label %block_0_418514, label %block_0_418446
block_0_418446:
  br label %block_0_418464
block_0_418464:
  ret void
block_0_418490:
  %t38 = phi i64 [ %t24, %block_0_41840d ]
  %t39 = phi i64 [ %t20, %block_0_41840d ]
  %t40 = phi i64 [ %t21, %block_0_41840d ]
  %t41 = phi i64 [ %t22, %block_0_41840d ]
  ; r38 := (bv_ult r37 r36)
  %t42 = icmp ult i64 %t41, %t40
  br i1 %t42, label %block_0_418507, label %block_0_418497
block_0_418497:
  %t43 = phi i64 [ %t38, %block_0_418490 ]
  %t44 = phi i64 [ %t40, %block_0_418490 ]
  %t45 = phi i64 [ %t41, %block_0_418490 ]
  ; r42 := (trunc r39 32)
  %t46 = trunc i64 %t43 to i32
  ; r43 := (eq r42 (0xb : bv 32))
  %t47 = icmp eq i32 %t46, 11
  br i1 %t47, label %block_0_4184f0, label %block_0_41849c
block_0_41849c:
  %t48 = phi i64 [ %t44, %block_0_418497 ], [ %t61, %block_0_418512 ]
  %t49 = phi i64 [ %t45, %block_0_418497 ], [ %t62, %block_0_418512 ]
  ; r46 := (eq r44 r45)
  %t50 = icmp eq i64 %t48, %t49
  ; r47 := (bv_ule r45 r44)
  %t51 = icmp ule i64 %t49, %t48
  ; r48 := (not r46)
  %t52 = icmp eq i1 %t50, 0
  ; r49 := (and r47 r48)
  %t53 = and i1 %t51, %t52
  br i1 %t53, label %block_0_418520, label %block_0_4184cd
block_0_4184cd:
  br label %block_0_418464
block_0_4184f0:
  br label %block_0_418464
block_0_418507:
  %t54 = phi i64 [ %t38, %block_0_418490 ]
  %t55 = phi i64 [ %t39, %block_0_418490 ]
  %t56 = phi i64 [ %t41, %block_0_418490 ]
  ; r53 := (trunc r50 32)
  %t57 = trunc i64 %t54 to i32
  ; r54 := (eq r53 (0xb : bv 32))
  %t58 = icmp eq i32 %t57, 11
  ; r55 := (read r51 (bv 32))
  %t59 = inttoptr i64 %t55 to i32*
  %t60 = load i32, i32* %t59
  br i1 %t58, label %block_0_4184f0, label %block_0_418512
block_0_418512:
  %t61 = phi i64 [ %t55, %block_0_418507 ]
  %t62 = phi i64 [ %t56, %block_0_418507 ]
  br label %block_0_41849c
block_0_418514:
  %t63 = phi i64 [ %t35, %block_0_41841d ]
  ; r59 := (bv_add r58 (0xfffffffffffffffc : bv 64))
  %t64 = add i64 %t63, 18446744073709551612
  ; r60 := (read r59 (bv 32))
  %t65 = inttoptr i64 %t64 to i32*
  %t66 = load i32, i32* %t65
  br label %block_0_418446
block_0_418520:
  %t67 = phi i64 [ %t48, %block_0_41849c ]
  ; r62 := (bv_add r61 (0xfffffffffffffffc : bv 64))
  %t68 = add i64 %t67, 18446744073709551612
  ; r63 := (read r62 (bv 32))
  %t69 = inttoptr i64 %t68 to i32*
  %t70 = load i32, i32* %t69
  br label %block_0_4184cd
}
define void @__strcp_D2A(i64 %arg0, i64 %arg1) {
block_0_418530:
  ; r0 := (read arg1 (bv 8))
  %t0 = inttoptr i64 %arg1 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (eq r0 (0x0 : bv 8))
  %t2 = icmp eq i8 %t1, 0
  ; write arg0 r0
  %t3 = inttoptr i64 %arg0 to i8*
  store i8 %t1, i8* %t3
  br i1 %t2, label %block_0_418552, label %block_0_418539
block_0_418539:
  %t4 = phi i64 [ %arg1, %block_0_418530 ]
  %t5 = phi i64 [ %arg0, %block_0_418530 ]
  br label %block_0_418540
block_0_418540:
  %t6 = phi i64 [ %t4, %block_0_418539 ], [ %t8, %block_0_418540 ]
  %t7 = phi i64 [ %t5, %block_0_418539 ], [ %t11, %block_0_418540 ]
  ; r6 := (bv_add r4 (0x1 : bv 64))
  %t8 = add i64 %t6, 1
  ; r7 := (read r6 (bv 8))
  %t9 = inttoptr i64 %t8 to i8*
  %t10 = load i8, i8* %t9
  ; r8 := (bv_add r5 (0x1 : bv 64))
  %t11 = add i64 %t7, 1
  ; r9 := (eq r7 (0x0 : bv 8))
  %t12 = icmp eq i8 %t10, 0
  ; write r8 r7
  %t13 = inttoptr i64 %t11 to i8*
  store i8 %t10, i8* %t13
  br i1 %t12, label %block_0_418552, label %block_0_418540
block_0_418552:
  ret void
}
define { i64, i64, <8 x double> } @__Balloc_D2A(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_4185e0:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (read (0x6356e8 : bv 64) (bv 32))
  %t2 = inttoptr i64 6510312 to i32*
  %t3 = load i32, i32* %t2
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (eq r2 (0x0 : bv 32))
  %t5 = icmp eq i32 %t3, 0
  ; r5 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t9 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg11 (bv 512))
  %t11 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r12 := (bitcast arg13 (bv 512))
  %t13 = bitcast <8 x double> %arg13 to i512
  ; r13 := (bitcast arg6 (bv 512))
  %t14 = bitcast <8 x double> %arg6 to i512
  ; r14 := (bitcast arg7 (bv 512))
  %t15 = bitcast <8 x double> %arg7 to i512
  ; r15 := (bitcast arg8 (bv 512))
  %t16 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast arg9 (bv 512))
  %t17 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast arg10 (bv 512))
  %t18 = bitcast <8 x double> %arg10 to i512
  ; r18 := (bitcast arg11 (bv 512))
  %t19 = bitcast <8 x double> %arg11 to i512
  ; r19 := (bitcast arg12 (bv 512))
  %t20 = bitcast <8 x double> %arg12 to i512
  ; r20 := (bitcast arg13 (bv 512))
  %t21 = bitcast <8 x double> %arg13 to i512
  br i1 %t5, label %block_0_418603, label %block_0_4186a0
block_0_418603:
  %t22 = phi i64 [ %t1, %block_0_4185e0 ], [ %t256, %block_0_4186aa ]
  %t23 = phi i64 [ %t4, %block_0_4185e0 ], [ %t257, %block_0_4186aa ]
  %t24 = phi i64 [ %arg4, %block_0_4185e0 ], [ %t258, %block_0_4186aa ]
  %t25 = phi i64 [ %arg5, %block_0_4185e0 ], [ %t259, %block_0_4186aa ]
  %t26 = phi i512 [ %t6, %block_0_4185e0 ], [ %t260, %block_0_4186aa ]
  %t27 = phi i512 [ %t7, %block_0_4185e0 ], [ %t261, %block_0_4186aa ]
  %t28 = phi i512 [ %t8, %block_0_4185e0 ], [ %t262, %block_0_4186aa ]
  %t29 = phi i512 [ %t9, %block_0_4185e0 ], [ %t263, %block_0_4186aa ]
  %t30 = phi i512 [ %t10, %block_0_4185e0 ], [ %t264, %block_0_4186aa ]
  %t31 = phi i512 [ %t11, %block_0_4185e0 ], [ %t265, %block_0_4186aa ]
  %t32 = phi i512 [ %t12, %block_0_4185e0 ], [ %t266, %block_0_4186aa ]
  %t33 = phi i512 [ %t13, %block_0_4185e0 ], [ %t267, %block_0_4186aa ]
  ; r33 := (trunc r21 32)
  %t34 = trunc i64 %t22 to i32
  ; r34 := (ssbb_overflows r33 (0x9 : bv 32) false)
  %t35 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t34, i32 9)
  %t36 = extractvalue { i32, i1 } %t35, 1
  ; r35 := (bv_add r33 (0xfffffff7 : bv 32))
  %t37 = add i32 %t34, 4294967287
  ; r36 := (bv_slt r35 (0x0 : bv 32))
  %t38 = icmp slt i32 %t37, 0
  ; r37 := (eq r33 (0x9 : bv 32))
  %t39 = icmp eq i32 %t34, 9
  ; r38 := (not r37)
  %t40 = icmp eq i1 %t39, 0
  ; r39 := (eq r36 r34)
  %t41 = icmp eq i1 %t38, %t36
  ; r40 := (and r38 r39)
  %t42 = and i1 %t40, %t41
  br i1 %t42, label %block_0_418630, label %block_0_418608
block_0_418608:
  %t43 = phi i64 [ %t22, %block_0_418603 ]
  %t44 = phi i64 [ %t23, %block_0_418603 ]
  %t45 = phi i64 [ %t24, %block_0_418603 ]
  %t46 = phi i64 [ %t25, %block_0_418603 ]
  %t47 = phi i512 [ %t26, %block_0_418603 ]
  %t48 = phi i512 [ %t27, %block_0_418603 ]
  %t49 = phi i512 [ %t28, %block_0_418603 ]
  %t50 = phi i512 [ %t29, %block_0_418603 ]
  %t51 = phi i512 [ %t30, %block_0_418603 ]
  %t52 = phi i512 [ %t31, %block_0_418603 ]
  %t53 = phi i512 [ %t32, %block_0_418603 ]
  %t54 = phi i512 [ %t33, %block_0_418603 ]
  ; r53 := (trunc r41 32)
  %t55 = trunc i64 %t43 to i32
  ; r54 := (sext r53 64)
  %t56 = sext i32 %t55 to i64
  ; r55 := (bv_mul (0x8 : bv 64) r54)
  %t57 = mul i64 8, %t56
  ; r56 := (bv_add r55 (0x63eee0 : bv 64))
  %t58 = add i64 %t57, 6549216
  ; r57 := (read r56 (bv 64))
  %t59 = inttoptr i64 %t58 to i64*
  %t60 = load i64, i64* %t59
  ; r58 := (eq r57 (0x0 : bv 64))
  %t61 = icmp eq i64 %t60, 0
  br i1 %t61, label %block_0_4186af, label %block_0_41861c
block_0_41861c:
  %t62 = phi i64 [ %t56, %block_0_418608 ]
  %t63 = phi i64 [ %t60, %block_0_418608 ]
  %t64 = phi i64 [ %t44, %block_0_418608 ]
  %t65 = phi i64 [ %t45, %block_0_418608 ]
  %t66 = phi i64 [ %t46, %block_0_418608 ]
  %t67 = phi i512 [ %t47, %block_0_418608 ]
  %t68 = phi i512 [ %t48, %block_0_418608 ]
  %t69 = phi i512 [ %t49, %block_0_418608 ]
  %t70 = phi i512 [ %t50, %block_0_418608 ]
  %t71 = phi i512 [ %t51, %block_0_418608 ]
  %t72 = phi i512 [ %t52, %block_0_418608 ]
  %t73 = phi i512 [ %t53, %block_0_418608 ]
  %t74 = phi i512 [ %t54, %block_0_418608 ]
  ; r72 := (read r60 (bv 64))
  %t75 = inttoptr i64 %t63 to i64*
  %t76 = load i64, i64* %t75
  ; r73 := (bv_mul (0x8 : bv 64) r59)
  %t77 = mul i64 8, %t62
  ; r74 := (bv_add r73 (0x63eee0 : bv 64))
  %t78 = add i64 %t77, 6549216
  ; write r74 r72
  %t79 = inttoptr i64 %t78 to i64*
  store i64 %t76, i64* %t79
  br label %block_0_418667
block_0_418630:
  %t80 = phi i64 [ %t22, %block_0_418603 ]
  %t81 = phi i64 [ %t23, %block_0_418603 ]
  %t82 = phi i64 [ %t24, %block_0_418603 ]
  %t83 = phi i64 [ %t25, %block_0_418603 ]
  %t84 = phi i512 [ %t26, %block_0_418603 ]
  %t85 = phi i512 [ %t27, %block_0_418603 ]
  %t86 = phi i512 [ %t28, %block_0_418603 ]
  %t87 = phi i512 [ %t29, %block_0_418603 ]
  %t88 = phi i512 [ %t30, %block_0_418603 ]
  %t89 = phi i512 [ %t31, %block_0_418603 ]
  %t90 = phi i512 [ %t32, %block_0_418603 ]
  %t91 = phi i512 [ %t33, %block_0_418603 ]
  ; r87 := (trunc r75 32)
  %t92 = trunc i64 %t80 to i32
  ; r88 := (uext r87 64)
  %t93 = zext i32 %t92 to i64
  ; r89 := (trunc r75 8)
  %t94 = trunc i64 %t80 to i8
  ; r90 := (bv_and r89 (0x1f : bv 8))
  %t95 = and i8 %t94, 31
  ; r91 := (eq r90 (0x0 : bv 8))
  %t96 = icmp eq i8 %t95, 0
  ; r92 := (uext r90 32)
  %t97 = zext i8 %t95 to i32
  ; r93 := (bv_shl (0x1 : bv 32) r92)
  %t98 = shl i32 1, %t97
  ; r94 := (mux r91 (0x1 : bv 32) r93)
  %t99 = select i1 %t96, i32 1, i32 %t98
  ; r95 := (uext r94 64)
  %t100 = zext i32 %t99 to i64
  ; r96 := (bv_add r95 (0xffffffffffffffff : bv 64))
  %t101 = add i64 %t100, 18446744073709551615
  ; r97 := (trunc r96 32)
  %t102 = trunc i64 %t101 to i32
  ; r98 := (sext r97 64)
  %t103 = sext i32 %t102 to i64
  ; r99 := (bv_mul (0x4 : bv 64) r98)
  %t104 = mul i64 4, %t103
  ; r100 := (bv_add r99 (0x27 : bv 64))
  %t105 = add i64 %t104, 39
  ; r101 := (bv_shr r100 (0x3 : bv 64))
  %t106 = lshr i64 %t105, 3
  ; r102 := (trunc r101 32)
  %t107 = trunc i64 %t106 to i32
  ; r103 := (uext r102 64)
  %t108 = zext i32 %t107 to i64
  br label %block_0_418650
block_0_418650:
  %t109 = phi i64 [ %t93, %block_0_418630 ], [ %t288, %block_0_4186af ]
  %t110 = phi i64 [ %t108, %block_0_418630 ], [ %t296, %block_0_4186af ]
  %t111 = phi i64 [ %t80, %block_0_418630 ], [ %t268, %block_0_4186af ]
  %t112 = phi i64 [ %t81, %block_0_418630 ], [ %t269, %block_0_4186af ]
  %t113 = phi i64 [ %t82, %block_0_418630 ], [ %t270, %block_0_4186af ]
  %t114 = phi i64 [ %t83, %block_0_418630 ], [ %t271, %block_0_4186af ]
  %t115 = phi i64 [ %t100, %block_0_418630 ], [ %t286, %block_0_4186af ]
  %t116 = phi i512 [ %t84, %block_0_418630 ], [ %t272, %block_0_4186af ]
  %t117 = phi i512 [ %t85, %block_0_418630 ], [ %t273, %block_0_4186af ]
  %t118 = phi i512 [ %t86, %block_0_418630 ], [ %t274, %block_0_4186af ]
  %t119 = phi i512 [ %t87, %block_0_418630 ], [ %t275, %block_0_4186af ]
  %t120 = phi i512 [ %t88, %block_0_418630 ], [ %t276, %block_0_4186af ]
  %t121 = phi i512 [ %t89, %block_0_418630 ], [ %t277, %block_0_4186af ]
  %t122 = phi i512 [ %t90, %block_0_418630 ], [ %t278, %block_0_4186af ]
  %t123 = phi i512 [ %t91, %block_0_418630 ], [ %t279, %block_0_4186af ]
  ; r119 := (bv_mul (0x8 : bv 64) r105)
  %t124 = mul i64 8, %t110
  ; r120 := (bitcast r111 (vec 8 double))
  %t125 = bitcast i512 %t116 to <8 x double>
  ; r121 := (bitcast r112 (vec 8 double))
  %t126 = bitcast i512 %t117 to <8 x double>
  ; r122 := (bitcast r113 (vec 8 double))
  %t127 = bitcast i512 %t118 to <8 x double>
  ; r123 := (bitcast r114 (vec 8 double))
  %t128 = bitcast i512 %t119 to <8 x double>
  ; r124 := (bitcast r115 (vec 8 double))
  %t129 = bitcast i512 %t120 to <8 x double>
  ; r125 := (bitcast r116 (vec 8 double))
  %t130 = bitcast i512 %t121 to <8 x double>
  ; r126 := (bitcast r117 (vec 8 double))
  %t131 = bitcast i512 %t122 to <8 x double>
  ; r127 := (bitcast r118 (vec 8 double))
  %t132 = bitcast i512 %t123 to <8 x double>
  ; r128 := call malloc(r119, r107, r105, r104, r108, r109, r120, r121, r122, r123, r124, r125, r126, r127)
  %t133 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @malloc(i64 %t124, i64 %t112, i64 %t110, i64 %t109, i64 %t113, i64 %t114, <8 x double> %t125, <8 x double> %t126, <8 x double> %t127, <8 x double> %t128, <8 x double> %t129, <8 x double> %t130, <8 x double> %t131, <8 x double> %t132)
  ; r129 := (tuple_field r128 0)
  %t134 = extractvalue { i64, i64, <8 x double> } %t133, 0
  ; r130 := (tuple_field r128 1)
  %t135 = extractvalue { i64, i64, <8 x double> } %t133, 1
  ; r131 := (tuple_field r128 2)
  %t136 = extractvalue { i64, i64, <8 x double> } %t133, 2
  ; r132 := (bitcast r131 (bv 512))
  %t137 = bitcast <8 x double> %t136 to i512
  br label %block_0_41865d
block_0_41865d:
  %t138 = phi i64 [ %t134, %block_0_418650 ]
  %t139 = phi i64 [ %t135, %block_0_418650 ]
  %t140 = phi i64 [ %t111, %block_0_418650 ]
  %t141 = phi i64 [ %t112, %block_0_418650 ]
  %t142 = phi i64 [ %t113, %block_0_418650 ]
  %t143 = phi i64 [ %t114, %block_0_418650 ]
  %t144 = phi i64 [ %t115, %block_0_418650 ]
  %t145 = phi i512 [ %t137, %block_0_418650 ]
  %t146 = phi i512 [ %t117, %block_0_418650 ]
  %t147 = phi i512 [ %t118, %block_0_418650 ]
  %t148 = phi i512 [ %t119, %block_0_418650 ]
  %t149 = phi i512 [ %t120, %block_0_418650 ]
  %t150 = phi i512 [ %t121, %block_0_418650 ]
  %t151 = phi i512 [ %t122, %block_0_418650 ]
  %t152 = phi i512 [ %t123, %block_0_418650 ]
  br label %block_0_418660
block_0_418660:
  %t153 = phi i64 [ %t139, %block_0_41865d ], [ %t305, %block_0_4186f3 ]
  %t154 = phi i64 [ %t138, %block_0_41865d ], [ %t304, %block_0_4186f3 ]
  %t155 = phi i64 [ %t140, %block_0_41865d ], [ %t306, %block_0_4186f3 ]
  %t156 = phi i64 [ %t141, %block_0_41865d ], [ %t307, %block_0_4186f3 ]
  %t157 = phi i64 [ %t142, %block_0_41865d ], [ %t308, %block_0_4186f3 ]
  %t158 = phi i64 [ %t143, %block_0_41865d ], [ %t309, %block_0_4186f3 ]
  %t159 = phi i64 [ %t144, %block_0_41865d ], [ %t310, %block_0_4186f3 ]
  %t160 = phi i512 [ %t145, %block_0_41865d ], [ %t311, %block_0_4186f3 ]
  %t161 = phi i512 [ %t146, %block_0_41865d ], [ %t312, %block_0_4186f3 ]
  %t162 = phi i512 [ %t147, %block_0_41865d ], [ %t313, %block_0_4186f3 ]
  %t163 = phi i512 [ %t148, %block_0_41865d ], [ %t314, %block_0_4186f3 ]
  %t164 = phi i512 [ %t149, %block_0_41865d ], [ %t315, %block_0_4186f3 ]
  %t165 = phi i512 [ %t150, %block_0_41865d ], [ %t316, %block_0_4186f3 ]
  %t166 = phi i512 [ %t151, %block_0_41865d ], [ %t317, %block_0_4186f3 ]
  %t167 = phi i512 [ %t152, %block_0_41865d ], [ %t318, %block_0_4186f3 ]
  ; r163 := (trunc r150 32)
  %t168 = trunc i64 %t155 to i32
  ; r164 := (bv_add r149 (0x8 : bv 64))
  %t169 = add i64 %t154, 8
  ; write r164 r163
  %t170 = inttoptr i64 %t169 to i32*
  store i32 %t168, i32* %t170
  ; r165 := (trunc r154 32)
  %t171 = trunc i64 %t159 to i32
  ; r166 := (bv_add r149 (0xc : bv 64))
  %t172 = add i64 %t154, 12
  ; write r166 r165
  %t173 = inttoptr i64 %t172 to i32*
  store i32 %t171, i32* %t173
  br label %block_0_418667
block_0_418667:
  %t174 = phi i64 [ %t62, %block_0_41861c ], [ %t153, %block_0_418660 ]
  %t175 = phi i64 [ %t63, %block_0_41861c ], [ %t154, %block_0_418660 ]
  %t176 = phi i64 [ %t64, %block_0_41861c ], [ %t156, %block_0_418660 ]
  %t177 = phi i64 [ %t65, %block_0_41861c ], [ %t157, %block_0_418660 ]
  %t178 = phi i64 [ %t66, %block_0_41861c ], [ %t158, %block_0_418660 ]
  %t179 = phi i512 [ %t67, %block_0_41861c ], [ %t160, %block_0_418660 ]
  %t180 = phi i512 [ %t68, %block_0_41861c ], [ %t161, %block_0_418660 ]
  %t181 = phi i512 [ %t69, %block_0_41861c ], [ %t162, %block_0_418660 ]
  %t182 = phi i512 [ %t70, %block_0_41861c ], [ %t163, %block_0_418660 ]
  %t183 = phi i512 [ %t71, %block_0_41861c ], [ %t164, %block_0_418660 ]
  %t184 = phi i512 [ %t72, %block_0_41861c ], [ %t165, %block_0_418660 ]
  %t185 = phi i512 [ %t73, %block_0_41861c ], [ %t166, %block_0_418660 ]
  %t186 = phi i512 [ %t74, %block_0_41861c ], [ %t167, %block_0_418660 ]
  ; r180 := (read (0x6356e8 : bv 64) (bv 32))
  %t187 = inttoptr i64 6510312 to i32*
  %t188 = load i32, i32* %t187
  ; r181 := (uext r180 64)
  %t189 = zext i32 %t188 to i64
  ; r182 := (eq r180 (0x0 : bv 32))
  %t190 = icmp eq i32 %t188, 0
  br i1 %t190, label %block_0_41867b, label %block_0_418671
block_0_418671:
  %t191 = phi i64 [ %t189, %block_0_418667 ]
  %t192 = phi i64 [ %t174, %block_0_418667 ]
  %t193 = phi i64 [ %t175, %block_0_418667 ]
  %t194 = phi i64 [ %t176, %block_0_418667 ]
  %t195 = phi i64 [ %t177, %block_0_418667 ]
  %t196 = phi i64 [ %t178, %block_0_418667 ]
  %t197 = phi i512 [ %t179, %block_0_418667 ]
  %t198 = phi i512 [ %t180, %block_0_418667 ]
  %t199 = phi i512 [ %t181, %block_0_418667 ]
  %t200 = phi i512 [ %t182, %block_0_418667 ]
  %t201 = phi i512 [ %t183, %block_0_418667 ]
  %t202 = phi i512 [ %t184, %block_0_418667 ]
  %t203 = phi i512 [ %t185, %block_0_418667 ]
  %t204 = phi i512 [ %t186, %block_0_418667 ]
  ; r197 := (bitcast r189 (vec 8 double))
  %t205 = bitcast i512 %t197 to <8 x double>
  ; r198 := (bitcast r190 (vec 8 double))
  %t206 = bitcast i512 %t198 to <8 x double>
  ; r199 := (bitcast r191 (vec 8 double))
  %t207 = bitcast i512 %t199 to <8 x double>
  ; r200 := (bitcast r192 (vec 8 double))
  %t208 = bitcast i512 %t200 to <8 x double>
  ; r201 := (bitcast r193 (vec 8 double))
  %t209 = bitcast i512 %t201 to <8 x double>
  ; r202 := (bitcast r194 (vec 8 double))
  %t210 = bitcast i512 %t202 to <8 x double>
  ; r203 := (bitcast r195 (vec 8 double))
  %t211 = bitcast i512 %t203 to <8 x double>
  ; r204 := (bitcast r196 (vec 8 double))
  %t212 = bitcast i512 %t204 to <8 x double>
  ; r205 := call pthread_mutex_unlock_int((0x640d00 : bv 64), r186, r184, r183, r187, r188, r197, r198, r199, r200, r201, r202, r203, r204)
  %t213 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6556928, i64 %t194, i64 %t192, i64 %t191, i64 %t195, i64 %t196, <8 x double> %t205, <8 x double> %t206, <8 x double> %t207, <8 x double> %t208, <8 x double> %t209, <8 x double> %t210, <8 x double> %t211, <8 x double> %t212)
  ; r206 := (tuple_field r205 0)
  %t214 = extractvalue { i64, i64, <8 x double> } %t213, 0
  ; r207 := (tuple_field r205 1)
  %t215 = extractvalue { i64, i64, <8 x double> } %t213, 1
  ; r208 := (tuple_field r205 2)
  %t216 = extractvalue { i64, i64, <8 x double> } %t213, 2
  ; r209 := (bitcast r208 (bv 512))
  %t217 = bitcast <8 x double> %t216 to i512
  br label %block_0_41867b
block_0_41867b:
  %t218 = phi i64 [ %t174, %block_0_418667 ], [ %t215, %block_0_418671 ]
  %t219 = phi i64 [ %t175, %block_0_418667 ], [ %t193, %block_0_418671 ]
  %t220 = phi i512 [ %t179, %block_0_418667 ], [ %t217, %block_0_418671 ]
  ; r213 := (bv_add r211 (0x14 : bv 64))
  %t221 = add i64 %t219, 20
  ; write r213 (0x0 : bv 32)
  %t222 = inttoptr i64 %t221 to i32*
  store i32 0, i32* %t222
  ; r214 := (bv_add r211 (0x10 : bv 64))
  %t223 = add i64 %t219, 16
  ; write r214 (0x0 : bv 32)
  %t224 = inttoptr i64 %t223 to i32*
  store i32 0, i32* %t224
  ; r215 := (bitcast r212 (vec 8 double))
  %t225 = bitcast i512 %t220 to <8 x double>
  ; r216 := (tuple r211 r210 r215)
  %t226 = insertvalue { i64, i64, <8 x double> } undef, i64 %t219, 0
  %t227 = insertvalue { i64, i64, <8 x double> } %t226, i64 %t218, 1
  %t228 = insertvalue { i64, i64, <8 x double> } %t227, <8 x double> %t225, 2
  ret { i64, i64, <8 x double> } %t228
block_0_4186a0:
  %t229 = phi i64 [ %arg3, %block_0_4185e0 ]
  %t230 = phi i64 [ %arg2, %block_0_4185e0 ]
  %t231 = phi i64 [ %t1, %block_0_4185e0 ]
  %t232 = phi i64 [ %t4, %block_0_4185e0 ]
  %t233 = phi i64 [ %arg4, %block_0_4185e0 ]
  %t234 = phi i64 [ %arg5, %block_0_4185e0 ]
  %t235 = phi i512 [ %t14, %block_0_4185e0 ]
  %t236 = phi i512 [ %t15, %block_0_4185e0 ]
  %t237 = phi i512 [ %t16, %block_0_4185e0 ]
  %t238 = phi i512 [ %t17, %block_0_4185e0 ]
  %t239 = phi i512 [ %t18, %block_0_4185e0 ]
  %t240 = phi i512 [ %t19, %block_0_4185e0 ]
  %t241 = phi i512 [ %t20, %block_0_4185e0 ]
  %t242 = phi i512 [ %t21, %block_0_4185e0 ]
  ; r231 := (bitcast r223 (vec 8 double))
  %t243 = bitcast i512 %t235 to <8 x double>
  ; r232 := (bitcast r224 (vec 8 double))
  %t244 = bitcast i512 %t236 to <8 x double>
  ; r233 := (bitcast r225 (vec 8 double))
  %t245 = bitcast i512 %t237 to <8 x double>
  ; r234 := (bitcast r226 (vec 8 double))
  %t246 = bitcast i512 %t238 to <8 x double>
  ; r235 := (bitcast r227 (vec 8 double))
  %t247 = bitcast i512 %t239 to <8 x double>
  ; r236 := (bitcast r228 (vec 8 double))
  %t248 = bitcast i512 %t240 to <8 x double>
  ; r237 := (bitcast r229 (vec 8 double))
  %t249 = bitcast i512 %t241 to <8 x double>
  ; r238 := (bitcast r230 (vec 8 double))
  %t250 = bitcast i512 %t242 to <8 x double>
  ; r239 := call pthread_mutex_lock_int((0x640d00 : bv 64), r220, r218, r217, r221, r222, r231, r232, r233, r234, r235, r236, r237, r238)
  %t251 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6556928, i64 %t232, i64 %t230, i64 %t229, i64 %t233, i64 %t234, <8 x double> %t243, <8 x double> %t244, <8 x double> %t245, <8 x double> %t246, <8 x double> %t247, <8 x double> %t248, <8 x double> %t249, <8 x double> %t250)
  ; r240 := (tuple_field r239 0)
  %t252 = extractvalue { i64, i64, <8 x double> } %t251, 0
  ; r241 := (tuple_field r239 1)
  %t253 = extractvalue { i64, i64, <8 x double> } %t251, 1
  ; r242 := (tuple_field r239 2)
  %t254 = extractvalue { i64, i64, <8 x double> } %t251, 2
  ; r243 := (bitcast r242 (bv 512))
  %t255 = bitcast <8 x double> %t254 to i512
  br label %block_0_4186aa
block_0_4186aa:
  %t256 = phi i64 [ %t231, %block_0_4186a0 ]
  %t257 = phi i64 [ %t232, %block_0_4186a0 ]
  %t258 = phi i64 [ %t233, %block_0_4186a0 ]
  %t259 = phi i64 [ %t234, %block_0_4186a0 ]
  %t260 = phi i512 [ %t255, %block_0_4186a0 ]
  %t261 = phi i512 [ %t236, %block_0_4186a0 ]
  %t262 = phi i512 [ %t237, %block_0_4186a0 ]
  %t263 = phi i512 [ %t238, %block_0_4186a0 ]
  %t264 = phi i512 [ %t239, %block_0_4186a0 ]
  %t265 = phi i512 [ %t240, %block_0_4186a0 ]
  %t266 = phi i512 [ %t241, %block_0_4186a0 ]
  %t267 = phi i512 [ %t242, %block_0_4186a0 ]
  br label %block_0_418603
block_0_4186af:
  %t268 = phi i64 [ %t43, %block_0_418608 ]
  %t269 = phi i64 [ %t44, %block_0_418608 ]
  %t270 = phi i64 [ %t45, %block_0_418608 ]
  %t271 = phi i64 [ %t46, %block_0_418608 ]
  %t272 = phi i512 [ %t47, %block_0_418608 ]
  %t273 = phi i512 [ %t48, %block_0_418608 ]
  %t274 = phi i512 [ %t49, %block_0_418608 ]
  %t275 = phi i512 [ %t50, %block_0_418608 ]
  %t276 = phi i512 [ %t51, %block_0_418608 ]
  %t277 = phi i512 [ %t52, %block_0_418608 ]
  %t278 = phi i512 [ %t53, %block_0_418608 ]
  %t279 = phi i512 [ %t54, %block_0_418608 ]
  ; r268 := (trunc r256 8)
  %t280 = trunc i64 %t268 to i8
  ; r269 := (bv_and r268 (0x1f : bv 8))
  %t281 = and i8 %t280, 31
  ; r270 := (eq r269 (0x0 : bv 8))
  %t282 = icmp eq i8 %t281, 0
  ; r271 := (uext r269 32)
  %t283 = zext i8 %t281 to i32
  ; r272 := (bv_shl (0x1 : bv 32) r271)
  %t284 = shl i32 1, %t283
  ; r273 := (mux r270 (0x1 : bv 32) r272)
  %t285 = select i1 %t282, i32 1, i32 %t284
  ; r274 := (uext r273 64)
  %t286 = zext i32 %t285 to i64
  ; r275 := (read (0x631268 : bv 64) (bv 64))
  %t287 = inttoptr i64 6492776 to i64*
  %t288 = load i64, i64* %t287
  ; r276 := (bv_add r274 (0xffffffffffffffff : bv 64))
  %t289 = add i64 %t286, 18446744073709551615
  ; r277 := (trunc r276 32)
  %t290 = trunc i64 %t289 to i32
  ; r278 := (sext r277 64)
  %t291 = sext i32 %t290 to i64
  ; r279 := (bv_mul (0x4 : bv 64) r278)
  %t292 = mul i64 4, %t291
  ; r280 := (bv_add r279 (0x27 : bv 64))
  %t293 = add i64 %t292, 39
  ; r281 := (bv_shr r280 (0x3 : bv 64))
  %t294 = lshr i64 %t293, 3
  ; r282 := (trunc r281 32)
  %t295 = trunc i64 %t294 to i32
  ; r283 := (uext r282 64)
  %t296 = zext i32 %t295 to i64
  ; r284 := (bv_add r275 (0xffffffffff9c10c0 : bv 64))
  %t297 = add i64 %t288, 18446744073703002304
  ; r285 := (bv_sar r284 (0x3 : bv 64))
  %t298 = ashr i64 %t297, 3
  ; r286 := (bv_add r283 r285)
  %t299 = add i64 %t296, %t298
  ; r287 := (eq r286 (0x120 : bv 64))
  %t300 = icmp eq i64 %t299, 288
  ; r288 := (bv_ule (0x120 : bv 64) r286)
  %t301 = icmp ule i64 288, %t299
  ; r289 := (not r287)
  %t302 = icmp eq i1 %t300, 0
  ; r290 := (and r288 r289)
  %t303 = and i1 %t301, %t302
  br i1 %t303, label %block_0_418650, label %block_0_4186f3
block_0_4186f3:
  %t304 = phi i64 [ %t288, %block_0_4186af ]
  %t305 = phi i64 [ %t296, %block_0_4186af ]
  %t306 = phi i64 [ %t268, %block_0_4186af ]
  %t307 = phi i64 [ %t269, %block_0_4186af ]
  %t308 = phi i64 [ %t270, %block_0_4186af ]
  %t309 = phi i64 [ %t271, %block_0_4186af ]
  %t310 = phi i64 [ %t286, %block_0_4186af ]
  %t311 = phi i512 [ %t272, %block_0_4186af ]
  %t312 = phi i512 [ %t273, %block_0_4186af ]
  %t313 = phi i512 [ %t274, %block_0_4186af ]
  %t314 = phi i512 [ %t275, %block_0_4186af ]
  %t315 = phi i512 [ %t276, %block_0_4186af ]
  %t316 = phi i512 [ %t277, %block_0_4186af ]
  %t317 = phi i512 [ %t278, %block_0_4186af ]
  %t318 = phi i512 [ %t279, %block_0_4186af ]
  ; r306 := (bv_mul (0x8 : bv 64) r292)
  %t319 = mul i64 8, %t305
  ; r307 := (bv_add r291 r306)
  %t320 = add i64 %t304, %t319
  ; write (0x631268 : bv 64) r307
  %t321 = inttoptr i64 6492776 to i64*
  store i64 %t320, i64* %t321
  br label %block_0_418660
}
define { i64, i64, <8 x double> } @__lshift_D2A(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_418970:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (bv_add arg0 (0x14 : bv 64))
  %t2 = add i64 %arg0, 20
  ; r3 := (read r2 (bv 32))
  %t3 = inttoptr i64 %t2 to i32*
  %t4 = load i32, i32* %t3
  ; r4 := (bv_add r3 (0x1 : bv 32))
  %t5 = add i32 %t4, 1
  ; r5 := (uext r4 64)
  %t6 = zext i32 %t5 to i64
  ; r6 := (bv_sar r0 (0x5 : bv 32))
  %t7 = ashr i32 %t0, 5
  ; r7 := (uext r6 64)
  %t8 = zext i32 %t7 to i64
  ; r8 := (bv_add arg0 (0x8 : bv 64))
  %t9 = add i64 %arg0, 8
  ; r9 := (read r8 (bv 32))
  %t10 = inttoptr i64 %t9 to i32*
  %t11 = load i32, i32* %t10
  ; r10 := (uext r9 64)
  %t12 = zext i32 %t11 to i64
  ; r11 := (bv_add r5 r7)
  %t13 = add i64 %t6, %t8
  ; r12 := (trunc r11 32)
  %t14 = trunc i64 %t13 to i32
  ; r13 := (uext r12 64)
  %t15 = zext i32 %t14 to i64
  ; r14 := (bv_add arg0 (0xc : bv 64))
  %t16 = add i64 %arg0, 12
  ; r15 := (read r14 (bv 32))
  %t17 = inttoptr i64 %t16 to i32*
  %t18 = load i32, i32* %t17
  ; r16 := (uext r15 64)
  %t19 = zext i32 %t18 to i64
  ; r17 := (ssbb_overflows r12 r15 false)
  %t20 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t14, i32 %t18)
  %t21 = extractvalue { i32, i1 } %t20, 1
  ; r18 := (bv_sub r12 r15)
  %t22 = sub i32 %t14, %t18
  ; r19 := (bv_slt r18 (0x0 : bv 32))
  %t23 = icmp slt i32 %t22, 0
  ; r20 := (eq r12 r15)
  %t24 = icmp eq i32 %t14, %t18
  ; r21 := (xor r19 r17)
  %t25 = xor i1 %t23, %t21
  ; r22 := (or r20 r21)
  %t26 = or i1 %t24, %t25
  ; r23 := (bitcast arg6 (bv 512))
  %t27 = bitcast <8 x double> %arg6 to i512
  ; r24 := (bitcast arg7 (bv 512))
  %t28 = bitcast <8 x double> %arg7 to i512
  ; r25 := (bitcast arg8 (bv 512))
  %t29 = bitcast <8 x double> %arg8 to i512
  ; r26 := (bitcast arg9 (bv 512))
  %t30 = bitcast <8 x double> %arg9 to i512
  ; r27 := (bitcast arg10 (bv 512))
  %t31 = bitcast <8 x double> %arg10 to i512
  ; r28 := (bitcast arg11 (bv 512))
  %t32 = bitcast <8 x double> %arg11 to i512
  ; r29 := (bitcast arg12 (bv 512))
  %t33 = bitcast <8 x double> %arg12 to i512
  ; r30 := (bitcast arg13 (bv 512))
  %t34 = bitcast <8 x double> %arg13 to i512
  ; r31 := (bitcast arg6 (bv 512))
  %t35 = bitcast <8 x double> %arg6 to i512
  ; r32 := (bitcast arg7 (bv 512))
  %t36 = bitcast <8 x double> %arg7 to i512
  ; r33 := (bitcast arg8 (bv 512))
  %t37 = bitcast <8 x double> %arg8 to i512
  ; r34 := (bitcast arg9 (bv 512))
  %t38 = bitcast <8 x double> %arg9 to i512
  ; r35 := (bitcast arg10 (bv 512))
  %t39 = bitcast <8 x double> %arg10 to i512
  ; r36 := (bitcast arg11 (bv 512))
  %t40 = bitcast <8 x double> %arg11 to i512
  ; r37 := (bitcast arg12 (bv 512))
  %t41 = bitcast <8 x double> %arg12 to i512
  ; r38 := (bitcast arg13 (bv 512))
  %t42 = bitcast <8 x double> %arg13 to i512
  br i1 %t26, label %block_0_4189a9, label %block_0_41899a
block_0_41899a:
  %t43 = phi i64 [ %t19, %block_0_418970 ]
  %t44 = phi i64 [ %arg3, %block_0_418970 ]
  %t45 = phi i64 [ %arg2, %block_0_418970 ]
  %t46 = phi i64 [ %t8, %block_0_418970 ]
  %t47 = phi i64 [ %t15, %block_0_418970 ]
  %t48 = phi i64 [ %arg1, %block_0_418970 ]
  %t49 = phi i64 [ %t12, %block_0_418970 ]
  %t50 = phi i64 [ %arg4, %block_0_418970 ]
  %t51 = phi i64 [ %arg5, %block_0_418970 ]
  %t52 = phi i64 [ %arg0, %block_0_418970 ]
  %t53 = phi i64 [ %t1, %block_0_418970 ]
  %t54 = phi i512 [ %t35, %block_0_418970 ]
  %t55 = phi i512 [ %t36, %block_0_418970 ]
  %t56 = phi i512 [ %t37, %block_0_418970 ]
  %t57 = phi i512 [ %t38, %block_0_418970 ]
  %t58 = phi i512 [ %t39, %block_0_418970 ]
  %t59 = phi i512 [ %t40, %block_0_418970 ]
  %t60 = phi i512 [ %t41, %block_0_418970 ]
  %t61 = phi i512 [ %t42, %block_0_418970 ]
  br label %block_0_4189a0
block_0_4189a0:
  %t62 = phi i64 [ %t43, %block_0_41899a ], [ %t83, %block_0_4189a0 ]
  %t63 = phi i64 [ %t44, %block_0_41899a ], [ %t63, %block_0_4189a0 ]
  %t64 = phi i64 [ %t45, %block_0_41899a ], [ %t64, %block_0_4189a0 ]
  %t65 = phi i64 [ %t46, %block_0_41899a ], [ %t65, %block_0_4189a0 ]
  %t66 = phi i64 [ %t47, %block_0_41899a ], [ %t66, %block_0_4189a0 ]
  %t67 = phi i64 [ %t48, %block_0_41899a ], [ %t67, %block_0_4189a0 ]
  %t68 = phi i64 [ %t49, %block_0_41899a ], [ %t86, %block_0_4189a0 ]
  %t69 = phi i64 [ %t50, %block_0_41899a ], [ %t69, %block_0_4189a0 ]
  %t70 = phi i64 [ %t51, %block_0_41899a ], [ %t70, %block_0_4189a0 ]
  %t71 = phi i64 [ %t52, %block_0_41899a ], [ %t71, %block_0_4189a0 ]
  %t72 = phi i64 [ %t53, %block_0_41899a ], [ %t72, %block_0_4189a0 ]
  %t73 = phi i512 [ %t54, %block_0_41899a ], [ %t73, %block_0_4189a0 ]
  %t74 = phi i512 [ %t55, %block_0_41899a ], [ %t74, %block_0_4189a0 ]
  %t75 = phi i512 [ %t56, %block_0_41899a ], [ %t75, %block_0_4189a0 ]
  %t76 = phi i512 [ %t57, %block_0_41899a ], [ %t76, %block_0_4189a0 ]
  %t77 = phi i512 [ %t58, %block_0_41899a ], [ %t77, %block_0_4189a0 ]
  %t78 = phi i512 [ %t59, %block_0_41899a ], [ %t78, %block_0_4189a0 ]
  %t79 = phi i512 [ %t60, %block_0_41899a ], [ %t79, %block_0_4189a0 ]
  %t80 = phi i512 [ %t61, %block_0_41899a ], [ %t80, %block_0_4189a0 ]
  ; r77 := (trunc r58 32)
  %t81 = trunc i64 %t62 to i32
  ; r78 := (bv_add r77 r77)
  %t82 = add i32 %t81, %t81
  ; r79 := (uext r78 64)
  %t83 = zext i32 %t82 to i64
  ; r80 := (trunc r64 32)
  %t84 = trunc i64 %t68 to i32
  ; r81 := (bv_add r80 (0x1 : bv 32))
  %t85 = add i32 %t84, 1
  ; r82 := (uext r81 64)
  %t86 = zext i32 %t85 to i64
  ; r83 := (trunc r62 32)
  %t87 = trunc i64 %t66 to i32
  ; r84 := (ssbb_overflows r83 r78 false)
  %t88 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t87, i32 %t82)
  %t89 = extractvalue { i32, i1 } %t88, 1
  ; r85 := (bv_sub r83 r78)
  %t90 = sub i32 %t87, %t82
  ; r86 := (bv_slt r85 (0x0 : bv 32))
  %t91 = icmp slt i32 %t90, 0
  ; r87 := (eq r83 r78)
  %t92 = icmp eq i32 %t87, %t82
  ; r88 := (not r87)
  %t93 = icmp eq i1 %t92, 0
  ; r89 := (eq r86 r84)
  %t94 = icmp eq i1 %t91, %t89
  ; r90 := (and r88 r89)
  %t95 = and i1 %t93, %t94
  br i1 %t95, label %block_0_4189a0, label %block_0_4189a9
block_0_4189a9:
  %t96 = phi i64 [ %arg3, %block_0_418970 ], [ %t63, %block_0_4189a0 ]
  %t97 = phi i64 [ %arg2, %block_0_418970 ], [ %t64, %block_0_4189a0 ]
  %t98 = phi i64 [ %t8, %block_0_418970 ], [ %t65, %block_0_4189a0 ]
  %t99 = phi i64 [ %t15, %block_0_418970 ], [ %t66, %block_0_4189a0 ]
  %t100 = phi i64 [ %arg1, %block_0_418970 ], [ %t67, %block_0_4189a0 ]
  %t101 = phi i64 [ %t12, %block_0_418970 ], [ %t86, %block_0_4189a0 ]
  %t102 = phi i64 [ %arg4, %block_0_418970 ], [ %t69, %block_0_4189a0 ]
  %t103 = phi i64 [ %arg5, %block_0_418970 ], [ %t70, %block_0_4189a0 ]
  %t104 = phi i64 [ %arg0, %block_0_418970 ], [ %t71, %block_0_4189a0 ]
  %t105 = phi i64 [ %t1, %block_0_418970 ], [ %t72, %block_0_4189a0 ]
  %t106 = phi i512 [ %t27, %block_0_418970 ], [ %t73, %block_0_4189a0 ]
  %t107 = phi i512 [ %t28, %block_0_418970 ], [ %t74, %block_0_4189a0 ]
  %t108 = phi i512 [ %t29, %block_0_418970 ], [ %t75, %block_0_4189a0 ]
  %t109 = phi i512 [ %t30, %block_0_418970 ], [ %t76, %block_0_4189a0 ]
  %t110 = phi i512 [ %t31, %block_0_418970 ], [ %t77, %block_0_4189a0 ]
  %t111 = phi i512 [ %t32, %block_0_418970 ], [ %t78, %block_0_4189a0 ]
  %t112 = phi i512 [ %t33, %block_0_418970 ], [ %t79, %block_0_4189a0 ]
  %t113 = phi i512 [ %t34, %block_0_418970 ], [ %t80, %block_0_4189a0 ]
  ; r109 := (bitcast r101 (vec 8 double))
  %t114 = bitcast i512 %t106 to <8 x double>
  ; r110 := (bitcast r102 (vec 8 double))
  %t115 = bitcast i512 %t107 to <8 x double>
  ; r111 := (bitcast r103 (vec 8 double))
  %t116 = bitcast i512 %t108 to <8 x double>
  ; r112 := (bitcast r104 (vec 8 double))
  %t117 = bitcast i512 %t109 to <8 x double>
  ; r113 := (bitcast r105 (vec 8 double))
  %t118 = bitcast i512 %t110 to <8 x double>
  ; r114 := (bitcast r106 (vec 8 double))
  %t119 = bitcast i512 %t111 to <8 x double>
  ; r115 := (bitcast r107 (vec 8 double))
  %t120 = bitcast i512 %t112 to <8 x double>
  ; r116 := (bitcast r108 (vec 8 double))
  %t121 = bitcast i512 %t113 to <8 x double>
  ; r117 := call __Balloc_D2A(r96, r95, r92, r91, r97, r98, r109, r110, r111, r112, r113, r114, r115, r116)
  %t122 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__Balloc_D2A(i64 %t101, i64 %t100, i64 %t97, i64 %t96, i64 %t102, i64 %t103, <8 x double> %t114, <8 x double> %t115, <8 x double> %t116, <8 x double> %t117, <8 x double> %t118, <8 x double> %t119, <8 x double> %t120, <8 x double> %t121)
  ; r118 := (tuple_field r117 0)
  %t123 = extractvalue { i64, i64, <8 x double> } %t122, 0
  ; r119 := (tuple_field r117 1)
  %t124 = extractvalue { i64, i64, <8 x double> } %t122, 1
  ; r120 := (tuple_field r117 2)
  %t125 = extractvalue { i64, i64, <8 x double> } %t122, 2
  ; r121 := (bitcast r120 (bv 512))
  %t126 = bitcast <8 x double> %t125 to i512
  br label %block_0_4189ae
block_0_4189ae:
  %t127 = phi i64 [ %t123, %block_0_4189a9 ]
  %t128 = phi i64 [ %t96, %block_0_4189a9 ]
  %t129 = phi i64 [ %t98, %block_0_4189a9 ]
  %t130 = phi i64 [ %t99, %block_0_4189a9 ]
  %t131 = phi i64 [ %t100, %block_0_4189a9 ]
  %t132 = phi i64 [ %t102, %block_0_4189a9 ]
  %t133 = phi i64 [ %t104, %block_0_4189a9 ]
  %t134 = phi i64 [ %t105, %block_0_4189a9 ]
  %t135 = phi i512 [ %t126, %block_0_4189a9 ]
  %t136 = phi i512 [ %t107, %block_0_4189a9 ]
  %t137 = phi i512 [ %t108, %block_0_4189a9 ]
  %t138 = phi i512 [ %t109, %block_0_4189a9 ]
  %t139 = phi i512 [ %t110, %block_0_4189a9 ]
  %t140 = phi i512 [ %t111, %block_0_4189a9 ]
  %t141 = phi i512 [ %t112, %block_0_4189a9 ]
  %t142 = phi i512 [ %t113, %block_0_4189a9 ]
  ; r138 := (trunc r124 32)
  %t143 = trunc i64 %t129 to i32
  ; r139 := (bv_slt r138 (0x0 : bv 32))
  %t144 = icmp slt i32 %t143, 0
  ; r140 := (eq r138 (0x0 : bv 32))
  %t145 = icmp eq i32 %t143, 0
  ; r141 := (bv_add r122 (0x18 : bv 64))
  %t146 = add i64 %t127, 24
  ; r142 := (or r140 r139)
  %t147 = or i1 %t145, %t144
  br i1 %t147, label %block_0_4189da, label %block_0_4189b9
block_0_4189b9:
  %t148 = phi i64 [ %t127, %block_0_4189ae ]
  %t149 = phi i64 [ %t128, %block_0_4189ae ]
  %t150 = phi i64 [ %t129, %block_0_4189ae ]
  %t151 = phi i64 [ %t130, %block_0_4189ae ]
  %t152 = phi i64 [ %t131, %block_0_4189ae ]
  %t153 = phi i64 [ %t132, %block_0_4189ae ]
  %t154 = phi i64 [ %t146, %block_0_4189ae ]
  %t155 = phi i64 [ %t133, %block_0_4189ae ]
  %t156 = phi i64 [ %t134, %block_0_4189ae ]
  %t157 = phi i512 [ %t135, %block_0_4189ae ]
  %t158 = phi i512 [ %t136, %block_0_4189ae ]
  %t159 = phi i512 [ %t137, %block_0_4189ae ]
  %t160 = phi i512 [ %t138, %block_0_4189ae ]
  %t161 = phi i512 [ %t139, %block_0_4189ae ]
  %t162 = phi i512 [ %t140, %block_0_4189ae ]
  %t163 = phi i512 [ %t141, %block_0_4189ae ]
  %t164 = phi i512 [ %t142, %block_0_4189ae ]
  br label %block_0_4189c0
block_0_4189c0:
  %t165 = phi i64 [ 0, %block_0_4189b9 ], [ %t185, %block_0_4189c0 ]
  %t166 = phi i64 [ %t149, %block_0_4189b9 ], [ %t166, %block_0_4189c0 ]
  %t167 = phi i64 [ %t150, %block_0_4189b9 ], [ %t167, %block_0_4189c0 ]
  %t168 = phi i64 [ %t151, %block_0_4189b9 ], [ %t168, %block_0_4189c0 ]
  %t169 = phi i64 [ %t152, %block_0_4189b9 ], [ %t169, %block_0_4189c0 ]
  %t170 = phi i64 [ %t153, %block_0_4189b9 ], [ %t170, %block_0_4189c0 ]
  %t171 = phi i64 [ %t154, %block_0_4189b9 ], [ %t187, %block_0_4189c0 ]
  %t172 = phi i64 [ %t155, %block_0_4189b9 ], [ %t172, %block_0_4189c0 ]
  %t173 = phi i64 [ %t156, %block_0_4189b9 ], [ %t173, %block_0_4189c0 ]
  %t174 = phi i64 [ %t148, %block_0_4189b9 ], [ %t174, %block_0_4189c0 ]
  %t175 = phi i512 [ %t157, %block_0_4189b9 ], [ %t175, %block_0_4189c0 ]
  %t176 = phi i512 [ %t158, %block_0_4189b9 ], [ %t176, %block_0_4189c0 ]
  %t177 = phi i512 [ %t159, %block_0_4189b9 ], [ %t177, %block_0_4189c0 ]
  %t178 = phi i512 [ %t160, %block_0_4189b9 ], [ %t178, %block_0_4189c0 ]
  %t179 = phi i512 [ %t161, %block_0_4189b9 ], [ %t179, %block_0_4189c0 ]
  %t180 = phi i512 [ %t162, %block_0_4189b9 ], [ %t180, %block_0_4189c0 ]
  %t181 = phi i512 [ %t163, %block_0_4189b9 ], [ %t181, %block_0_4189c0 ]
  %t182 = phi i512 [ %t164, %block_0_4189b9 ], [ %t182, %block_0_4189c0 ]
  ; r178 := (trunc r160 32)
  %t183 = trunc i64 %t165 to i32
  ; r179 := (bv_add r178 (0x1 : bv 32))
  %t184 = add i32 %t183, 1
  ; r180 := (uext r179 64)
  %t185 = zext i32 %t184 to i64
  ; write r166 (0x0 : bv 32)
  %t186 = inttoptr i64 %t171 to i32*
  store i32 0, i32* %t186
  ; r181 := (bv_add r166 (0x4 : bv 64))
  %t187 = add i64 %t171, 4
  ; r182 := (trunc r162 32)
  %t188 = trunc i64 %t167 to i32
  ; r183 := (eq r179 r182)
  %t189 = icmp eq i32 %t184, %t188
  br i1 %t189, label %block_0_4189d2, label %block_0_4189c0
block_0_4189d2:
  %t190 = phi i64 [ %t166, %block_0_4189c0 ]
  %t191 = phi i64 [ %t167, %block_0_4189c0 ]
  %t192 = phi i64 [ %t168, %block_0_4189c0 ]
  %t193 = phi i64 [ %t169, %block_0_4189c0 ]
  %t194 = phi i64 [ %t170, %block_0_4189c0 ]
  %t195 = phi i64 [ %t172, %block_0_4189c0 ]
  %t196 = phi i64 [ %t173, %block_0_4189c0 ]
  %t197 = phi i64 [ %t174, %block_0_4189c0 ]
  %t198 = phi i512 [ %t175, %block_0_4189c0 ]
  %t199 = phi i512 [ %t176, %block_0_4189c0 ]
  %t200 = phi i512 [ %t177, %block_0_4189c0 ]
  %t201 = phi i512 [ %t178, %block_0_4189c0 ]
  %t202 = phi i512 [ %t179, %block_0_4189c0 ]
  %t203 = phi i512 [ %t180, %block_0_4189c0 ]
  %t204 = phi i512 [ %t181, %block_0_4189c0 ]
  %t205 = phi i512 [ %t182, %block_0_4189c0 ]
  ; r200 := (bv_add r185 (0xffffffffffffffff : bv 64))
  %t206 = add i64 %t191, 18446744073709551615
  ; r201 := (trunc r200 32)
  %t207 = trunc i64 %t206 to i32
  ; r202 := (uext r201 64)
  %t208 = zext i32 %t207 to i64
  ; r203 := (bv_mul (0x4 : bv 64) r202)
  %t209 = mul i64 4, %t208
  ; r204 := (bv_add r191 r203)
  %t210 = add i64 %t197, %t209
  ; r205 := (bv_add r204 (0x1c : bv 64))
  %t211 = add i64 %t210, 28
  br label %block_0_4189da
block_0_4189da:
  %t212 = phi i64 [ %t128, %block_0_4189ae ], [ %t190, %block_0_4189d2 ]
  %t213 = phi i64 [ %t130, %block_0_4189ae ], [ %t192, %block_0_4189d2 ]
  %t214 = phi i64 [ %t131, %block_0_4189ae ], [ %t193, %block_0_4189d2 ]
  %t215 = phi i64 [ %t132, %block_0_4189ae ], [ %t194, %block_0_4189d2 ]
  %t216 = phi i64 [ %t146, %block_0_4189ae ], [ %t211, %block_0_4189d2 ]
  %t217 = phi i64 [ %t133, %block_0_4189ae ], [ %t195, %block_0_4189d2 ]
  %t218 = phi i64 [ %t134, %block_0_4189ae ], [ %t196, %block_0_4189d2 ]
  %t219 = phi i64 [ %t127, %block_0_4189ae ], [ %t197, %block_0_4189d2 ]
  %t220 = phi i512 [ %t135, %block_0_4189ae ], [ %t198, %block_0_4189d2 ]
  %t221 = phi i512 [ %t136, %block_0_4189ae ], [ %t199, %block_0_4189d2 ]
  %t222 = phi i512 [ %t137, %block_0_4189ae ], [ %t200, %block_0_4189d2 ]
  %t223 = phi i512 [ %t138, %block_0_4189ae ], [ %t201, %block_0_4189d2 ]
  %t224 = phi i512 [ %t139, %block_0_4189ae ], [ %t202, %block_0_4189d2 ]
  %t225 = phi i512 [ %t140, %block_0_4189ae ], [ %t203, %block_0_4189d2 ]
  %t226 = phi i512 [ %t141, %block_0_4189ae ], [ %t204, %block_0_4189d2 ]
  %t227 = phi i512 [ %t142, %block_0_4189ae ], [ %t205, %block_0_4189d2 ]
  ; r222 := (bv_add r211 (0x14 : bv 64))
  %t228 = add i64 %t217, 20
  ; r223 := (read r222 (bv 32))
  %t229 = inttoptr i64 %t228 to i32*
  %t230 = load i32, i32* %t229
  ; r224 := (sext r223 64)
  %t231 = sext i32 %t230 to i64
  ; r225 := (trunc r212 32)
  %t232 = trunc i64 %t218 to i32
  ; r226 := (bv_add r211 (0x18 : bv 64))
  %t233 = add i64 %t217, 24
  ; r227 := (bv_and r225 (0x1f : bv 32))
  %t234 = and i32 %t232, 31
  ; r228 := (eq r227 (0x0 : bv 32))
  %t235 = icmp eq i32 %t234, 0
  ; r229 := (uext r227 64)
  %t236 = zext i32 %t234 to i64
  ; r230 := (bv_mul (0x4 : bv 64) r224)
  %t237 = mul i64 4, %t231
  ; r231 := (bv_add r211 r230)
  %t238 = add i64 %t217, %t237
  ; r232 := (bv_add r231 (0x18 : bv 64))
  %t239 = add i64 %t238, 24
  br i1 %t235, label %block_0_418a45, label %block_0_4189f2
block_0_4189f2:
  %t240 = phi i64 [ %t233, %block_0_4189da ]
  %t241 = phi i64 [ %t213, %block_0_4189da ]
  %t242 = phi i64 [ %t239, %block_0_4189da ]
  %t243 = phi i64 [ %t236, %block_0_4189da ]
  %t244 = phi i64 [ %t216, %block_0_4189da ]
  %t245 = phi i64 [ %t217, %block_0_4189da ]
  %t246 = phi i64 [ %t219, %block_0_4189da ]
  %t247 = phi i512 [ %t220, %block_0_4189da ]
  %t248 = phi i512 [ %t221, %block_0_4189da ]
  %t249 = phi i512 [ %t222, %block_0_4189da ]
  %t250 = phi i512 [ %t223, %block_0_4189da ]
  %t251 = phi i512 [ %t224, %block_0_4189da ]
  %t252 = phi i512 [ %t225, %block_0_4189da ]
  %t253 = phi i512 [ %t226, %block_0_4189da ]
  %t254 = phi i512 [ %t227, %block_0_4189da ]
  ; r248 := (trunc r236 32)
  %t255 = trunc i64 %t243 to i32
  ; r249 := (bv_sub (0x20 : bv 32) r248)
  %t256 = sub i32 32, %t255
  ; r250 := (uext r249 64)
  %t257 = zext i32 %t256 to i64
  br label %block_0_418a00
block_0_418a00:
  %t258 = phi i64 [ %t240, %block_0_4189f2 ], [ %t290, %block_0_418a00 ]
  %t259 = phi i64 [ %t241, %block_0_4189f2 ], [ %t259, %block_0_418a00 ]
  %t260 = phi i64 [ 0, %block_0_4189f2 ], [ %t298, %block_0_418a00 ]
  %t261 = phi i64 [ %t242, %block_0_4189f2 ], [ %t261, %block_0_418a00 ]
  %t262 = phi i64 [ %t257, %block_0_4189f2 ], [ %t262, %block_0_418a00 ]
  %t263 = phi i64 [ %t243, %block_0_4189f2 ], [ %t263, %block_0_418a00 ]
  %t264 = phi i64 [ %t244, %block_0_4189f2 ], [ %t291, %block_0_418a00 ]
  %t265 = phi i64 [ %t245, %block_0_4189f2 ], [ %t265, %block_0_418a00 ]
  %t266 = phi i64 [ %t246, %block_0_4189f2 ], [ %t266, %block_0_418a00 ]
  %t267 = phi i512 [ %t247, %block_0_4189f2 ], [ %t267, %block_0_418a00 ]
  %t268 = phi i512 [ %t248, %block_0_4189f2 ], [ %t268, %block_0_418a00 ]
  %t269 = phi i512 [ %t249, %block_0_4189f2 ], [ %t269, %block_0_418a00 ]
  %t270 = phi i512 [ %t250, %block_0_4189f2 ], [ %t270, %block_0_418a00 ]
  %t271 = phi i512 [ %t251, %block_0_4189f2 ], [ %t271, %block_0_418a00 ]
  %t272 = phi i512 [ %t252, %block_0_4189f2 ], [ %t272, %block_0_418a00 ]
  %t273 = phi i512 [ %t253, %block_0_4189f2 ], [ %t273, %block_0_418a00 ]
  %t274 = phi i512 [ %t254, %block_0_4189f2 ], [ %t274, %block_0_418a00 ]
  ; r268 := (read r251 (bv 32))
  %t275 = inttoptr i64 %t258 to i32*
  %t276 = load i32, i32* %t275
  ; r269 := (trunc r256 8)
  %t277 = trunc i64 %t263 to i8
  ; r270 := (bv_and r269 (0x1f : bv 8))
  %t278 = and i8 %t277, 31
  ; r271 := (eq r270 (0x0 : bv 8))
  %t279 = icmp eq i8 %t278, 0
  ; r272 := (uext r270 32)
  %t280 = zext i8 %t278 to i32
  ; r273 := (bv_shl r268 r272)
  %t281 = shl i32 %t276, %t280
  ; r274 := (mux r271 r268 r273)
  %t282 = select i1 %t279, i32 %t276, i32 %t281
  ; r275 := (trunc r255 32)
  %t283 = trunc i64 %t262 to i32
  ; r276 := (uext r275 64)
  %t284 = zext i32 %t283 to i64
  ; r277 := (trunc r253 32)
  %t285 = trunc i64 %t260 to i32
  ; r278 := (bv_or r277 r274)
  %t286 = or i32 %t285, %t282
  ; write r257 r278
  %t287 = inttoptr i64 %t264 to i32*
  store i32 %t286, i32* %t287
  ; r279 := (read r251 (bv 32))
  %t288 = inttoptr i64 %t258 to i32*
  %t289 = load i32, i32* %t288
  ; r280 := (bv_add r251 (0x4 : bv 64))
  %t290 = add i64 %t258, 4
  ; r281 := (bv_add r257 (0x4 : bv 64))
  %t291 = add i64 %t264, 4
  ; r282 := (trunc r255 8)
  %t292 = trunc i64 %t262 to i8
  ; r283 := (bv_and r282 (0x1f : bv 8))
  %t293 = and i8 %t292, 31
  ; r284 := (eq r283 (0x0 : bv 8))
  %t294 = icmp eq i8 %t293, 0
  ; r285 := (uext r283 32)
  %t295 = zext i8 %t293 to i32
  ; r286 := (bv_shr r279 r285)
  %t296 = lshr i32 %t289, %t295
  ; r287 := (mux r284 r279 r286)
  %t297 = select i1 %t294, i32 %t289, i32 %t296
  ; r288 := (uext r287 64)
  %t298 = zext i32 %t297 to i64
  ; r289 := (eq r254 r280)
  %t299 = icmp eq i64 %t261, %t290
  ; r290 := (bv_ule r280 r254)
  %t300 = icmp ule i64 %t290, %t261
  ; r291 := (not r289)
  %t301 = icmp eq i1 %t299, 0
  ; r292 := (and r290 r291)
  %t302 = and i1 %t300, %t301
  br i1 %t302, label %block_0_418a00, label %block_0_418a20
block_0_418a20:
  %t303 = phi i64 [ %t284, %block_0_418a00 ]
  %t304 = phi i64 [ %t290, %block_0_418a00 ]
  %t305 = phi i64 [ %t259, %block_0_418a00 ]
  %t306 = phi i64 [ %t298, %block_0_418a00 ]
  %t307 = phi i64 [ %t262, %block_0_418a00 ]
  %t308 = phi i64 [ %t263, %block_0_418a00 ]
  %t309 = phi i64 [ %t291, %block_0_418a00 ]
  %t310 = phi i64 [ %t265, %block_0_418a00 ]
  %t311 = phi i64 [ %t266, %block_0_418a00 ]
  %t312 = phi i512 [ %t267, %block_0_418a00 ]
  %t313 = phi i512 [ %t268, %block_0_418a00 ]
  %t314 = phi i512 [ %t269, %block_0_418a00 ]
  %t315 = phi i512 [ %t270, %block_0_418a00 ]
  %t316 = phi i512 [ %t271, %block_0_418a00 ]
  %t317 = phi i512 [ %t272, %block_0_418a00 ]
  %t318 = phi i512 [ %t273, %block_0_418a00 ]
  %t319 = phi i512 [ %t274, %block_0_418a00 ]
  ; r310 := (trunc r296 32)
  %t320 = trunc i64 %t306 to i32
  ; r311 := (eq r310 (0x0 : bv 32))
  %t321 = icmp eq i32 %t320, 0
  ; write r299 r310
  %t322 = inttoptr i64 %t309 to i32*
  store i32 %t320, i32* %t322
  br i1 %t321, label %block_0_418a2a, label %block_0_418a27
block_0_418a27:
  %t323 = phi i64 [ %t303, %block_0_418a20 ]
  %t324 = phi i64 [ %t304, %block_0_418a20 ]
  %t325 = phi i64 [ %t305, %block_0_418a20 ]
  %t326 = phi i64 [ %t306, %block_0_418a20 ]
  %t327 = phi i64 [ %t307, %block_0_418a20 ]
  %t328 = phi i64 [ %t308, %block_0_418a20 ]
  %t329 = phi i64 [ %t310, %block_0_418a20 ]
  %t330 = phi i64 [ %t311, %block_0_418a20 ]
  %t331 = phi i512 [ %t312, %block_0_418a20 ]
  %t332 = phi i512 [ %t313, %block_0_418a20 ]
  %t333 = phi i512 [ %t314, %block_0_418a20 ]
  %t334 = phi i512 [ %t315, %block_0_418a20 ]
  %t335 = phi i512 [ %t316, %block_0_418a20 ]
  %t336 = phi i512 [ %t317, %block_0_418a20 ]
  %t337 = phi i512 [ %t318, %block_0_418a20 ]
  %t338 = phi i512 [ %t319, %block_0_418a20 ]
  ; r328 := (trunc r314 32)
  %t339 = trunc i64 %t325 to i32
  ; r329 := (bv_add r328 (0x1 : bv 32))
  %t340 = add i32 %t339, 1
  ; r330 := (uext r329 64)
  %t341 = zext i32 %t340 to i64
  br label %block_0_418a2a
block_0_418a2a:
  %t342 = phi i64 [ %t303, %block_0_418a20 ], [ %t323, %block_0_418a27 ], [ %t409, %block_0_418a57 ]
  %t343 = phi i64 [ %t304, %block_0_418a20 ], [ %t324, %block_0_418a27 ], [ %t410, %block_0_418a57 ]
  %t344 = phi i64 [ %t305, %block_0_418a20 ], [ %t341, %block_0_418a27 ], [ %t411, %block_0_418a57 ]
  %t345 = phi i64 [ %t306, %block_0_418a20 ], [ %t326, %block_0_418a27 ], [ %t412, %block_0_418a57 ]
  %t346 = phi i64 [ %t307, %block_0_418a20 ], [ %t327, %block_0_418a27 ], [ %t413, %block_0_418a57 ]
  %t347 = phi i64 [ %t308, %block_0_418a20 ], [ %t328, %block_0_418a27 ], [ %t414, %block_0_418a57 ]
  %t348 = phi i64 [ %t310, %block_0_418a20 ], [ %t329, %block_0_418a27 ], [ %t415, %block_0_418a57 ]
  %t349 = phi i64 [ %t311, %block_0_418a20 ], [ %t330, %block_0_418a27 ], [ %t416, %block_0_418a57 ]
  %t350 = phi i512 [ %t312, %block_0_418a20 ], [ %t331, %block_0_418a27 ], [ %t417, %block_0_418a57 ]
  %t351 = phi i512 [ %t313, %block_0_418a20 ], [ %t332, %block_0_418a27 ], [ %t418, %block_0_418a57 ]
  %t352 = phi i512 [ %t314, %block_0_418a20 ], [ %t333, %block_0_418a27 ], [ %t419, %block_0_418a57 ]
  %t353 = phi i512 [ %t315, %block_0_418a20 ], [ %t334, %block_0_418a27 ], [ %t420, %block_0_418a57 ]
  %t354 = phi i512 [ %t316, %block_0_418a20 ], [ %t335, %block_0_418a27 ], [ %t421, %block_0_418a57 ]
  %t355 = phi i512 [ %t317, %block_0_418a20 ], [ %t336, %block_0_418a27 ], [ %t422, %block_0_418a57 ]
  %t356 = phi i512 [ %t318, %block_0_418a20 ], [ %t337, %block_0_418a27 ], [ %t423, %block_0_418a57 ]
  %t357 = phi i512 [ %t319, %block_0_418a20 ], [ %t338, %block_0_418a27 ], [ %t424, %block_0_418a57 ]
  ; r347 := (bv_add r333 (0xffffffffffffffff : bv 64))
  %t358 = add i64 %t344, 18446744073709551615
  ; r348 := (trunc r347 32)
  %t359 = trunc i64 %t358 to i32
  ; r349 := (bv_add r338 (0x14 : bv 64))
  %t360 = add i64 %t349, 20
  ; write r349 r348
  %t361 = inttoptr i64 %t360 to i32*
  store i32 %t359, i32* %t361
  ; r350 := (bitcast r339 (vec 8 double))
  %t362 = bitcast i512 %t350 to <8 x double>
  ; r351 := (bitcast r340 (vec 8 double))
  %t363 = bitcast i512 %t351 to <8 x double>
  ; r352 := (bitcast r341 (vec 8 double))
  %t364 = bitcast i512 %t352 to <8 x double>
  ; r353 := (bitcast r342 (vec 8 double))
  %t365 = bitcast i512 %t353 to <8 x double>
  ; r354 := (bitcast r343 (vec 8 double))
  %t366 = bitcast i512 %t354 to <8 x double>
  ; r355 := (bitcast r344 (vec 8 double))
  %t367 = bitcast i512 %t355 to <8 x double>
  ; r356 := (bitcast r345 (vec 8 double))
  %t368 = bitcast i512 %t356 to <8 x double>
  ; r357 := (bitcast r346 (vec 8 double))
  %t369 = bitcast i512 %t357 to <8 x double>
  ; r358 := call __Bfree_D2A(r337, r334, r332, r331, r335, r336, r350, r351, r352, r353, r354, r355, r356, r357)
  %t370 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__Bfree_D2A(i64 %t348, i64 %t345, i64 %t343, i64 %t342, i64 %t346, i64 %t347, <8 x double> %t362, <8 x double> %t363, <8 x double> %t364, <8 x double> %t365, <8 x double> %t366, <8 x double> %t367, <8 x double> %t368, <8 x double> %t369)
  ; r359 := (tuple_field r358 0)
  %t371 = extractvalue { i64, i64, <8 x double> } %t370, 0
  ; r360 := (tuple_field r358 1)
  %t372 = extractvalue { i64, i64, <8 x double> } %t370, 1
  ; r361 := (tuple_field r358 2)
  %t373 = extractvalue { i64, i64, <8 x double> } %t370, 2
  ; r362 := (bitcast r361 (bv 512))
  %t374 = bitcast <8 x double> %t373 to i512
  br label %block_0_418a39
block_0_418a39:
  %t375 = phi i64 [ %t372, %block_0_418a2a ]
  %t376 = phi i64 [ %t349, %block_0_418a2a ]
  %t377 = phi i512 [ %t374, %block_0_418a2a ]
  ; r366 := (bitcast r365 (vec 8 double))
  %t378 = bitcast i512 %t377 to <8 x double>
  ; r367 := (tuple r364 r363 r366)
  %t379 = insertvalue { i64, i64, <8 x double> } undef, i64 %t376, 0
  %t380 = insertvalue { i64, i64, <8 x double> } %t379, i64 %t375, 1
  %t381 = insertvalue { i64, i64, <8 x double> } %t380, <8 x double> %t378, 2
  ret { i64, i64, <8 x double> } %t381
block_0_418a45:
  %t382 = phi i64 [ %t212, %block_0_4189da ], [ %t382, %block_0_418a45 ]
  %t383 = phi i64 [ %t233, %block_0_4189da ], [ %t402, %block_0_418a45 ]
  %t384 = phi i64 [ %t213, %block_0_4189da ], [ %t384, %block_0_418a45 ]
  %t385 = phi i64 [ %t214, %block_0_4189da ], [ %t385, %block_0_418a45 ]
  %t386 = phi i64 [ %t239, %block_0_4189da ], [ %t386, %block_0_418a45 ]
  %t387 = phi i64 [ %t215, %block_0_4189da ], [ %t387, %block_0_418a45 ]
  %t388 = phi i64 [ %t236, %block_0_4189da ], [ %t388, %block_0_418a45 ]
  %t389 = phi i64 [ %t216, %block_0_4189da ], [ %t404, %block_0_418a45 ]
  %t390 = phi i64 [ %t217, %block_0_4189da ], [ %t390, %block_0_418a45 ]
  %t391 = phi i64 [ %t219, %block_0_4189da ], [ %t391, %block_0_418a45 ]
  %t392 = phi i512 [ %t220, %block_0_4189da ], [ %t392, %block_0_418a45 ]
  %t393 = phi i512 [ %t221, %block_0_4189da ], [ %t393, %block_0_418a45 ]
  %t394 = phi i512 [ %t222, %block_0_4189da ], [ %t394, %block_0_418a45 ]
  %t395 = phi i512 [ %t223, %block_0_4189da ], [ %t395, %block_0_418a45 ]
  %t396 = phi i512 [ %t224, %block_0_4189da ], [ %t396, %block_0_418a45 ]
  %t397 = phi i512 [ %t225, %block_0_4189da ], [ %t397, %block_0_418a45 ]
  %t398 = phi i512 [ %t226, %block_0_4189da ], [ %t398, %block_0_418a45 ]
  %t399 = phi i512 [ %t227, %block_0_4189da ], [ %t399, %block_0_418a45 ]
  ; r386 := (read r369 (bv 32))
  %t400 = inttoptr i64 %t383 to i32*
  %t401 = load i32, i32* %t400
  ; r387 := (bv_add r369 (0x4 : bv 64))
  %t402 = add i64 %t383, 4
  ; write r375 r386
  %t403 = inttoptr i64 %t389 to i32*
  store i32 %t401, i32* %t403
  ; r388 := (bv_add r375 (0x4 : bv 64))
  %t404 = add i64 %t389, 4
  ; r389 := (eq r372 r387)
  %t405 = icmp eq i64 %t386, %t402
  ; r390 := (bv_ule r387 r372)
  %t406 = icmp ule i64 %t402, %t386
  ; r391 := (not r389)
  %t407 = icmp eq i1 %t405, 0
  ; r392 := (and r390 r391)
  %t408 = and i1 %t406, %t407
  br i1 %t408, label %block_0_418a45, label %block_0_418a57
block_0_418a57:
  %t409 = phi i64 [ %t382, %block_0_418a45 ]
  %t410 = phi i64 [ %t402, %block_0_418a45 ]
  %t411 = phi i64 [ %t384, %block_0_418a45 ]
  %t412 = phi i64 [ %t385, %block_0_418a45 ]
  %t413 = phi i64 [ %t387, %block_0_418a45 ]
  %t414 = phi i64 [ %t388, %block_0_418a45 ]
  %t415 = phi i64 [ %t390, %block_0_418a45 ]
  %t416 = phi i64 [ %t391, %block_0_418a45 ]
  %t417 = phi i512 [ %t392, %block_0_418a45 ]
  %t418 = phi i512 [ %t393, %block_0_418a45 ]
  %t419 = phi i512 [ %t394, %block_0_418a45 ]
  %t420 = phi i512 [ %t395, %block_0_418a45 ]
  %t421 = phi i512 [ %t396, %block_0_418a45 ]
  %t422 = phi i512 [ %t397, %block_0_418a45 ]
  %t423 = phi i512 [ %t398, %block_0_418a45 ]
  %t424 = phi i512 [ %t399, %block_0_418a45 ]
  br label %block_0_418a2a
}
define { i64, i64, <8 x double> } @__mult_D2A(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_418a60:
  ; r0 := (bv_add arg0 (0x14 : bv 64))
  %t0 = add i64 %arg0, 20
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (uext r1 64)
  %t3 = zext i32 %t2 to i64
  ; r3 := (bv_add arg1 (0x14 : bv 64))
  %t4 = add i64 %arg1, 20
  ; r4 := (read r3 (bv 32))
  %t5 = inttoptr i64 %t4 to i32*
  %t6 = load i32, i32* %t5
  ; r5 := (uext r4 64)
  %t7 = zext i32 %t6 to i64
  ; r6 := (ssbb_overflows r1 r4 false)
  %t8 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t2, i32 %t6)
  %t9 = extractvalue { i32, i1 } %t8, 1
  ; r7 := (bv_sub r1 r4)
  %t10 = sub i32 %t2, %t6
  ; r8 := (bv_slt r7 (0x0 : bv 32))
  %t11 = icmp slt i32 %t10, 0
  ; r9 := (eq r8 r6)
  %t12 = icmp eq i1 %t11, %t9
  ; r10 := (bitcast arg6 (bv 512))
  %t13 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t14 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t15 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t16 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t17 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t18 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t19 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t20 = bitcast <8 x double> %arg13 to i512
  ; r18 := (bitcast arg6 (bv 512))
  %t21 = bitcast <8 x double> %arg6 to i512
  ; r19 := (bitcast arg7 (bv 512))
  %t22 = bitcast <8 x double> %arg7 to i512
  ; r20 := (bitcast arg8 (bv 512))
  %t23 = bitcast <8 x double> %arg8 to i512
  ; r21 := (bitcast arg9 (bv 512))
  %t24 = bitcast <8 x double> %arg9 to i512
  ; r22 := (bitcast arg10 (bv 512))
  %t25 = bitcast <8 x double> %arg10 to i512
  ; r23 := (bitcast arg11 (bv 512))
  %t26 = bitcast <8 x double> %arg11 to i512
  ; r24 := (bitcast arg12 (bv 512))
  %t27 = bitcast <8 x double> %arg12 to i512
  ; r25 := (bitcast arg13 (bv 512))
  %t28 = bitcast <8 x double> %arg13 to i512
  br i1 %t12, label %block_0_418b7d, label %block_0_418a85
block_0_418a85:
  %t29 = phi i64 [ %arg3, %block_0_418a60 ]
  %t30 = phi i64 [ %arg2, %block_0_418a60 ]
  %t31 = phi i64 [ %arg1, %block_0_418a60 ]
  %t32 = phi i64 [ %arg0, %block_0_418a60 ]
  %t33 = phi i64 [ %arg4, %block_0_418a60 ]
  %t34 = phi i64 [ %arg5, %block_0_418a60 ]
  %t35 = phi i64 [ %t7, %block_0_418a60 ]
  %t36 = phi i64 [ %t3, %block_0_418a60 ]
  %t37 = phi i512 [ %t21, %block_0_418a60 ]
  %t38 = phi i512 [ %t22, %block_0_418a60 ]
  %t39 = phi i512 [ %t23, %block_0_418a60 ]
  %t40 = phi i512 [ %t24, %block_0_418a60 ]
  %t41 = phi i512 [ %t25, %block_0_418a60 ]
  %t42 = phi i512 [ %t26, %block_0_418a60 ]
  %t43 = phi i512 [ %t27, %block_0_418a60 ]
  %t44 = phi i512 [ %t28, %block_0_418a60 ]
  br label %block_0_418a8b
block_0_418a8b:
  %t45 = phi i64 [ %t29, %block_0_418a85 ], [ %t315, %block_0_418b7d ]
  %t46 = phi i64 [ %t30, %block_0_418a85 ], [ %t316, %block_0_418b7d ]
  %t47 = phi i64 [ %t31, %block_0_418a85 ], [ %t317, %block_0_418b7d ]
  %t48 = phi i64 [ %t33, %block_0_418a85 ], [ %t319, %block_0_418b7d ]
  %t49 = phi i64 [ %t34, %block_0_418a85 ], [ %t320, %block_0_418b7d ]
  %t50 = phi i64 [ %t31, %block_0_418a85 ], [ %t318, %block_0_418b7d ]
  %t51 = phi i64 [ %t35, %block_0_418a85 ], [ %t332, %block_0_418b7d ]
  %t52 = phi i64 [ %t36, %block_0_418a85 ], [ %t334, %block_0_418b7d ]
  %t53 = phi i64 [ %t32, %block_0_418a85 ], [ %t317, %block_0_418b7d ]
  %t54 = phi i512 [ %t37, %block_0_418a85 ], [ %t323, %block_0_418b7d ]
  %t55 = phi i512 [ %t38, %block_0_418a85 ], [ %t324, %block_0_418b7d ]
  %t56 = phi i512 [ %t39, %block_0_418a85 ], [ %t325, %block_0_418b7d ]
  %t57 = phi i512 [ %t40, %block_0_418a85 ], [ %t326, %block_0_418b7d ]
  %t58 = phi i512 [ %t41, %block_0_418a85 ], [ %t327, %block_0_418b7d ]
  %t59 = phi i512 [ %t42, %block_0_418a85 ], [ %t328, %block_0_418b7d ]
  %t60 = phi i512 [ %t43, %block_0_418a85 ], [ %t329, %block_0_418b7d ]
  %t61 = phi i512 [ %t44, %block_0_418a85 ], [ %t330, %block_0_418b7d ]
  ; r59 := (bv_add r49 r48)
  %t62 = add i64 %t52, %t51
  ; r60 := (trunc r59 32)
  %t63 = trunc i64 %t62 to i32
  ; r61 := (uext r60 64)
  %t64 = zext i32 %t63 to i64
  ; r62 := (bv_add r47 (0xc : bv 64))
  %t65 = add i64 %t50, 12
  ; r63 := (read r62 (bv 32))
  %t66 = inttoptr i64 %t65 to i32*
  %t67 = load i32, i32* %t66
  ; r64 := (ssbb_overflows r60 r63 false)
  %t68 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t63, i32 %t67)
  %t69 = extractvalue { i32, i1 } %t68, 1
  ; r65 := (bv_sub r60 r63)
  %t70 = sub i32 %t63, %t67
  ; r66 := (bv_slt r65 (0x0 : bv 32))
  %t71 = icmp slt i32 %t70, 0
  ; r67 := (eq r60 r63)
  %t72 = icmp eq i32 %t63, %t67
  ; r68 := (not r67)
  %t73 = icmp eq i1 %t72, 0
  ; r69 := (eq r66 r64)
  %t74 = icmp eq i1 %t71, %t69
  ; r70 := (and r68 r69)
  %t75 = and i1 %t73, %t74
  ; r71 := (mux r70 (0x1 : bv 8) (0x0 : bv 8))
  %t76 = select i1 %t75, i8 1, i8 0
  ; r72 := (bv_add r47 (0x8 : bv 64))
  %t77 = add i64 %t50, 8
  ; r73 := (read r72 (bv 32))
  %t78 = inttoptr i64 %t77 to i32*
  %t79 = load i32, i32* %t78
  ; r74 := (uext r71 32)
  %t80 = zext i8 %t76 to i32
  ; r75 := (bv_add r74 r73)
  %t81 = add i32 %t80, %t79
  ; r76 := (uext r75 64)
  %t82 = zext i32 %t81 to i64
  ; r77 := (bitcast r51 (vec 8 double))
  %t83 = bitcast i512 %t54 to <8 x double>
  ; r78 := (bitcast r52 (vec 8 double))
  %t84 = bitcast i512 %t55 to <8 x double>
  ; r79 := (bitcast r53 (vec 8 double))
  %t85 = bitcast i512 %t56 to <8 x double>
  ; r80 := (bitcast r54 (vec 8 double))
  %t86 = bitcast i512 %t57 to <8 x double>
  ; r81 := (bitcast r55 (vec 8 double))
  %t87 = bitcast i512 %t58 to <8 x double>
  ; r82 := (bitcast r56 (vec 8 double))
  %t88 = bitcast i512 %t59 to <8 x double>
  ; r83 := (bitcast r57 (vec 8 double))
  %t89 = bitcast i512 %t60 to <8 x double>
  ; r84 := (bitcast r58 (vec 8 double))
  %t90 = bitcast i512 %t61 to <8 x double>
  ; r85 := call __Balloc_D2A(r76, r44, r43, r42, r45, r46, r77, r78, r79, r80, r81, r82, r83, r84)
  %t91 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__Balloc_D2A(i64 %t82, i64 %t47, i64 %t46, i64 %t45, i64 %t48, i64 %t49, <8 x double> %t83, <8 x double> %t84, <8 x double> %t85, <8 x double> %t86, <8 x double> %t87, <8 x double> %t88, <8 x double> %t89, <8 x double> %t90)
  ; r86 := (tuple_field r85 0)
  %t92 = extractvalue { i64, i64, <8 x double> } %t91, 0
  ; r87 := (tuple_field r85 1)
  %t93 = extractvalue { i64, i64, <8 x double> } %t91, 1
  ; r88 := (tuple_field r85 2)
  %t94 = extractvalue { i64, i64, <8 x double> } %t91, 2
  ; r89 := (bitcast r88 (bv 512))
  %t95 = bitcast <8 x double> %t94 to i512
  br label %block_0_418aa4
block_0_418aa4:
  %t96 = phi i64 [ %t92, %block_0_418a8b ]
  %t97 = phi i64 [ %t64, %block_0_418a8b ]
  %t98 = phi i64 [ %t50, %block_0_418a8b ]
  %t99 = phi i64 [ %t51, %block_0_418a8b ]
  %t100 = phi i64 [ %t52, %block_0_418a8b ]
  %t101 = phi i64 [ %t53, %block_0_418a8b ]
  %t102 = phi i512 [ %t95, %block_0_418a8b ]
  ; r97 := (trunc r91 32)
  %t103 = trunc i64 %t97 to i32
  ; r98 := (sext r97 64)
  %t104 = sext i32 %t103 to i64
  ; r99 := (bv_add r90 (0x18 : bv 64))
  %t105 = add i64 %t96, 24
  ; r100 := (bv_mul (0x4 : bv 64) r98)
  %t106 = mul i64 4, %t104
  ; r101 := (bv_add r90 r100)
  %t107 = add i64 %t96, %t106
  ; r102 := (bv_add r101 (0x18 : bv 64))
  %t108 = add i64 %t107, 24
  ; r103 := (bv_ult r99 r102)
  %t109 = icmp ult i64 %t105, %t108
  br i1 %t109, label %block_0_418ac0, label %block_0_418ad2
block_0_418ac0:
  %t110 = phi i64 [ %t96, %block_0_418aa4 ]
  %t111 = phi i64 [ %t105, %block_0_418aa4 ]
  %t112 = phi i64 [ %t97, %block_0_418aa4 ]
  %t113 = phi i64 [ %t108, %block_0_418aa4 ]
  %t114 = phi i64 [ %t98, %block_0_418aa4 ]
  %t115 = phi i64 [ %t99, %block_0_418aa4 ]
  %t116 = phi i64 [ %t100, %block_0_418aa4 ]
  %t117 = phi i64 [ %t101, %block_0_418aa4 ]
  %t118 = phi i512 [ %t102, %block_0_418aa4 ]
  br label %block_0_418ac3
block_0_418ac3:
  %t119 = phi i64 [ %t111, %block_0_418ac0 ], [ %t130, %block_0_418ac3 ]
  %t120 = phi i64 [ %t111, %block_0_418ac0 ], [ %t120, %block_0_418ac3 ]
  %t121 = phi i64 [ %t112, %block_0_418ac0 ], [ %t121, %block_0_418ac3 ]
  %t122 = phi i64 [ %t113, %block_0_418ac0 ], [ %t122, %block_0_418ac3 ]
  %t123 = phi i64 [ %t114, %block_0_418ac0 ], [ %t123, %block_0_418ac3 ]
  %t124 = phi i64 [ %t115, %block_0_418ac0 ], [ %t124, %block_0_418ac3 ]
  %t125 = phi i64 [ %t116, %block_0_418ac0 ], [ %t125, %block_0_418ac3 ]
  %t126 = phi i64 [ %t117, %block_0_418ac0 ], [ %t126, %block_0_418ac3 ]
  %t127 = phi i512 [ %t118, %block_0_418ac0 ], [ %t127, %block_0_418ac3 ]
  %t128 = phi i64 [ %t110, %block_0_418ac0 ], [ %t128, %block_0_418ac3 ]
  ; write r113 (0x0 : bv 32)
  %t129 = inttoptr i64 %t119 to i32*
  store i32 0, i32* %t129
  ; r123 := (bv_add r113 (0x4 : bv 64))
  %t130 = add i64 %t119, 4
  ; r124 := (eq r116 r123)
  %t131 = icmp eq i64 %t122, %t130
  ; r125 := (bv_ule r123 r116)
  %t132 = icmp ule i64 %t130, %t122
  ; r126 := (not r124)
  %t133 = icmp eq i1 %t131, 0
  ; r127 := (and r125 r126)
  %t134 = and i1 %t132, %t133
  br i1 %t134, label %block_0_418ac3, label %block_0_418ad2
block_0_418ad2:
  %t135 = phi i64 [ %t105, %block_0_418aa4 ], [ %t120, %block_0_418ac3 ]
  %t136 = phi i64 [ %t97, %block_0_418aa4 ], [ %t121, %block_0_418ac3 ]
  %t137 = phi i64 [ %t108, %block_0_418aa4 ], [ %t122, %block_0_418ac3 ]
  %t138 = phi i64 [ %t98, %block_0_418aa4 ], [ %t123, %block_0_418ac3 ]
  %t139 = phi i64 [ %t99, %block_0_418aa4 ], [ %t124, %block_0_418ac3 ]
  %t140 = phi i64 [ %t100, %block_0_418aa4 ], [ %t125, %block_0_418ac3 ]
  %t141 = phi i64 [ %t101, %block_0_418aa4 ], [ %t126, %block_0_418ac3 ]
  %t142 = phi i512 [ %t102, %block_0_418aa4 ], [ %t127, %block_0_418ac3 ]
  %t143 = phi i64 [ %t96, %block_0_418aa4 ], [ %t128, %block_0_418ac3 ]
  ; r137 := (trunc r132 32)
  %t144 = trunc i64 %t139 to i32
  ; r138 := (sext r137 64)
  %t145 = sext i32 %t144 to i64
  ; r139 := (bv_add r134 (0x18 : bv 64))
  %t146 = add i64 %t141, 24
  ; r140 := (bv_mul (0x4 : bv 64) r138)
  %t147 = mul i64 4, %t145
  ; r141 := (bv_add r131 r140)
  %t148 = add i64 %t138, %t147
  ; r142 := (bv_add r141 (0x18 : bv 64))
  %t149 = add i64 %t148, 24
  ; r143 := (trunc r133 32)
  %t150 = trunc i64 %t140 to i32
  ; r144 := (sext r143 64)
  %t151 = sext i32 %t150 to i64
  ; r145 := (bv_mul (0x4 : bv 64) r144)
  %t152 = mul i64 4, %t151
  ; r146 := (bv_add r134 r145)
  %t153 = add i64 %t141, %t152
  ; r147 := (bv_add r146 (0x18 : bv 64))
  %t154 = add i64 %t153, 24
  ; r148 := (bv_ult r139 r147)
  %t155 = icmp ult i64 %t146, %t154
  br i1 %t155, label %block_0_418aeb, label %block_0_418b43
block_0_418aeb:
  %t156 = phi i64 [ %t135, %block_0_418ad2 ]
  %t157 = phi i64 [ %t136, %block_0_418ad2 ]
  %t158 = phi i64 [ %t137, %block_0_418ad2 ]
  %t159 = phi i64 [ %t149, %block_0_418ad2 ]
  %t160 = phi i64 [ %t146, %block_0_418ad2 ]
  %t161 = phi i64 [ %t138, %block_0_418ad2 ]
  %t162 = phi i64 [ %t154, %block_0_418ad2 ]
  %t163 = phi i512 [ %t142, %block_0_418ad2 ]
  %t164 = phi i64 [ %t143, %block_0_418ad2 ]
  ; r158 := (bv_add r154 (0x18 : bv 64))
  %t165 = add i64 %t161, 24
  br label %block_0_418af2
block_0_418af2:
  %t166 = phi i64 [ %t156, %block_0_418aeb ], [ %t254, %block_0_418b3d ]
  %t167 = phi i64 [ %t157, %block_0_418aeb ], [ %t255, %block_0_418b3d ]
  %t168 = phi i64 [ %t158, %block_0_418aeb ], [ %t256, %block_0_418b3d ]
  %t169 = phi i64 [ %t156, %block_0_418aeb ], [ %t264, %block_0_418b3d ]
  %t170 = phi i64 [ %t159, %block_0_418aeb ], [ %t258, %block_0_418b3d ]
  %t171 = phi i64 [ %t160, %block_0_418aeb ], [ %t259, %block_0_418b3d ]
  %t172 = phi i64 [ %t165, %block_0_418aeb ], [ %t260, %block_0_418b3d ]
  %t173 = phi i64 [ %t162, %block_0_418aeb ], [ %t261, %block_0_418b3d ]
  %t174 = phi i512 [ %t163, %block_0_418aeb ], [ %t262, %block_0_418b3d ]
  %t175 = phi i64 [ %t164, %block_0_418aeb ], [ %t263, %block_0_418b3d ]
  ; r169 := (read r164 (bv 32))
  %t176 = inttoptr i64 %t171 to i32*
  %t177 = load i32, i32* %t176
  ; r170 := (uext r169 64)
  %t178 = zext i32 %t177 to i64
  ; r171 := (bv_add r164 (0x4 : bv 64))
  %t179 = add i64 %t171, 4
  ; r172 := (eq r169 (0x0 : bv 32))
  %t180 = icmp eq i32 %t177, 0
  br i1 %t180, label %block_0_418b38, label %block_0_418afd
block_0_418afd:
  %t181 = phi i64 [ %t178, %block_0_418af2 ]
  %t182 = phi i64 [ %t167, %block_0_418af2 ]
  %t183 = phi i64 [ %t168, %block_0_418af2 ]
  %t184 = phi i64 [ %t169, %block_0_418af2 ]
  %t185 = phi i64 [ %t170, %block_0_418af2 ]
  %t186 = phi i64 [ %t179, %block_0_418af2 ]
  %t187 = phi i64 [ %t172, %block_0_418af2 ]
  %t188 = phi i64 [ %t173, %block_0_418af2 ]
  %t189 = phi i512 [ %t174, %block_0_418af2 ]
  %t190 = phi i64 [ %t175, %block_0_418af2 ]
  ; r183 := (trunc r173 32)
  %t191 = trunc i64 %t181 to i32
  ; r184 := (uext r183 64)
  %t192 = zext i32 %t191 to i64
  br label %block_0_418b10
block_0_418b10:
  %t193 = phi i64 [ %t184, %block_0_418afd ], [ %t221, %block_0_418b10 ]
  %t194 = phi i64 [ %t182, %block_0_418afd ], [ %t194, %block_0_418b10 ]
  %t195 = phi i64 [ %t183, %block_0_418afd ], [ %t195, %block_0_418b10 ]
  %t196 = phi i64 [ %t184, %block_0_418afd ], [ %t196, %block_0_418b10 ]
  %t197 = phi i64 [ %t185, %block_0_418afd ], [ %t197, %block_0_418b10 ]
  %t198 = phi i64 [ %t187, %block_0_418afd ], [ %t212, %block_0_418b10 ]
  %t199 = phi i64 [ 0, %block_0_418afd ], [ %t222, %block_0_418b10 ]
  %t200 = phi i64 [ %t192, %block_0_418afd ], [ %t200, %block_0_418b10 ]
  %t201 = phi i64 [ %t186, %block_0_418afd ], [ %t201, %block_0_418b10 ]
  %t202 = phi i64 [ %t187, %block_0_418afd ], [ %t202, %block_0_418b10 ]
  %t203 = phi i64 [ %t188, %block_0_418afd ], [ %t203, %block_0_418b10 ]
  %t204 = phi i512 [ %t189, %block_0_418afd ], [ %t204, %block_0_418b10 ]
  %t205 = phi i64 [ %t190, %block_0_418afd ], [ %t205, %block_0_418b10 ]
  ; r198 := (read r190 (bv 32))
  %t206 = inttoptr i64 %t198 to i32*
  %t207 = load i32, i32* %t206
  ; r199 := (uext r198 64)
  %t208 = zext i32 %t207 to i64
  ; r200 := (read r185 (bv 32))
  %t209 = inttoptr i64 %t193 to i32*
  %t210 = load i32, i32* %t209
  ; r201 := (uext r200 64)
  %t211 = zext i32 %t210 to i64
  ; r202 := (bv_add r190 (0x4 : bv 64))
  %t212 = add i64 %t198, 4
  ; r203 := (sext r192 128)
  %t213 = sext i64 %t200 to i128
  ; r204 := (sext r199 128)
  %t214 = sext i64 %t208 to i128
  ; r205 := (bv_mul r203 r204)
  %t215 = mul i128 %t213, %t214
  ; r206 := (trunc r205 64)
  %t216 = trunc i128 %t215 to i64
  ; r207 := (bv_add r206 r201)
  %t217 = add i64 %t216, %t211
  ; r208 := (bv_add r207 r191)
  %t218 = add i64 %t217, %t199
  ; r209 := (trunc r208 32)
  %t219 = trunc i64 %t218 to i32
  ; write r185 r209
  %t220 = inttoptr i64 %t193 to i32*
  store i32 %t219, i32* %t220
  ; r210 := (bv_add r185 (0x4 : bv 64))
  %t221 = add i64 %t193, 4
  ; r211 := (bv_shr r208 (0x20 : bv 64))
  %t222 = lshr i64 %t218, 32
  ; r212 := (eq r189 r202)
  %t223 = icmp eq i64 %t197, %t212
  ; r213 := (bv_ule r202 r189)
  %t224 = icmp ule i64 %t212, %t197
  ; r214 := (not r212)
  %t225 = icmp eq i1 %t223, 0
  ; r215 := (and r213 r214)
  %t226 = and i1 %t224, %t225
  br i1 %t226, label %block_0_418b10, label %block_0_418b35
block_0_418b35:
  %t227 = phi i64 [ %t221, %block_0_418b10 ]
  %t228 = phi i64 [ %t211, %block_0_418b10 ]
  %t229 = phi i64 [ %t194, %block_0_418b10 ]
  %t230 = phi i64 [ %t195, %block_0_418b10 ]
  %t231 = phi i64 [ %t196, %block_0_418b10 ]
  %t232 = phi i64 [ %t197, %block_0_418b10 ]
  %t233 = phi i64 [ %t222, %block_0_418b10 ]
  %t234 = phi i64 [ %t201, %block_0_418b10 ]
  %t235 = phi i64 [ %t202, %block_0_418b10 ]
  %t236 = phi i64 [ %t203, %block_0_418b10 ]
  %t237 = phi i512 [ %t204, %block_0_418b10 ]
  %t238 = phi i64 [ %t205, %block_0_418b10 ]
  ; r228 := (trunc r222 32)
  %t239 = trunc i64 %t233 to i32
  ; write r216 r228
  %t240 = inttoptr i64 %t227 to i32*
  store i32 %t239, i32* %t240
  br label %block_0_418b38
block_0_418b38:
  %t241 = phi i64 [ %t166, %block_0_418af2 ], [ %t228, %block_0_418b35 ]
  %t242 = phi i64 [ %t167, %block_0_418af2 ], [ %t229, %block_0_418b35 ]
  %t243 = phi i64 [ %t168, %block_0_418af2 ], [ %t230, %block_0_418b35 ]
  %t244 = phi i64 [ %t169, %block_0_418af2 ], [ %t231, %block_0_418b35 ]
  %t245 = phi i64 [ %t170, %block_0_418af2 ], [ %t232, %block_0_418b35 ]
  %t246 = phi i64 [ %t179, %block_0_418af2 ], [ %t234, %block_0_418b35 ]
  %t247 = phi i64 [ %t172, %block_0_418af2 ], [ %t235, %block_0_418b35 ]
  %t248 = phi i64 [ %t173, %block_0_418af2 ], [ %t236, %block_0_418b35 ]
  %t249 = phi i512 [ %t174, %block_0_418af2 ], [ %t237, %block_0_418b35 ]
  %t250 = phi i64 [ %t175, %block_0_418af2 ], [ %t238, %block_0_418b35 ]
  ; r239 := (bv_ult r236 r234)
  %t251 = icmp ult i64 %t248, %t246
  ; r240 := (eq r236 r234)
  %t252 = icmp eq i64 %t248, %t246
  ; r241 := (or r239 r240)
  %t253 = or i1 %t251, %t252
  br i1 %t253, label %block_0_418b43, label %block_0_418b3d
block_0_418b3d:
  %t254 = phi i64 [ %t241, %block_0_418b38 ]
  %t255 = phi i64 [ %t242, %block_0_418b38 ]
  %t256 = phi i64 [ %t243, %block_0_418b38 ]
  %t257 = phi i64 [ %t244, %block_0_418b38 ]
  %t258 = phi i64 [ %t245, %block_0_418b38 ]
  %t259 = phi i64 [ %t246, %block_0_418b38 ]
  %t260 = phi i64 [ %t247, %block_0_418b38 ]
  %t261 = phi i64 [ %t248, %block_0_418b38 ]
  %t262 = phi i512 [ %t249, %block_0_418b38 ]
  %t263 = phi i64 [ %t250, %block_0_418b38 ]
  ; r252 := (bv_add r245 (0x4 : bv 64))
  %t264 = add i64 %t257, 4
  br label %block_0_418af2
block_0_418b43:
  %t265 = phi i64 [ %t135, %block_0_418ad2 ], [ %t241, %block_0_418b38 ]
  %t266 = phi i64 [ %t136, %block_0_418ad2 ], [ %t242, %block_0_418b38 ]
  %t267 = phi i64 [ %t137, %block_0_418ad2 ], [ %t243, %block_0_418b38 ]
  %t268 = phi i512 [ %t142, %block_0_418ad2 ], [ %t249, %block_0_418b38 ]
  %t269 = phi i64 [ %t143, %block_0_418ad2 ], [ %t250, %block_0_418b38 ]
  ; r258 := (trunc r254 32)
  %t270 = trunc i64 %t266 to i32
  ; r259 := (bv_slt r258 (0x0 : bv 32))
  %t271 = icmp slt i32 %t270, 0
  ; r260 := (eq r258 (0x0 : bv 32))
  %t272 = icmp eq i32 %t270, 0
  ; r261 := (or r260 r259)
  %t273 = or i1 %t272, %t271
  br i1 %t273, label %block_0_418b67, label %block_0_418b47
block_0_418b47:
  %t274 = phi i64 [ %t265, %block_0_418b43 ]
  %t275 = phi i64 [ %t266, %block_0_418b43 ]
  %t276 = phi i64 [ %t267, %block_0_418b43 ]
  %t277 = phi i512 [ %t268, %block_0_418b43 ]
  %t278 = phi i64 [ %t269, %block_0_418b43 ]
  ; r267 := (bv_add r264 (0xfffffffffffffffc : bv 64))
  %t279 = add i64 %t276, 18446744073709551612
  ; r268 := (read r267 (bv 32))
  %t280 = inttoptr i64 %t279 to i32*
  %t281 = load i32, i32* %t280
  ; r269 := (eq r268 (0x0 : bv 32))
  %t282 = icmp eq i32 %t281, 0
  br i1 %t282, label %block_0_418b52, label %block_0_418b67
block_0_418b52:
  %t283 = phi i64 [ %t275, %block_0_418b47 ]
  %t284 = phi i64 [ %t276, %block_0_418b47 ]
  %t285 = phi i512 [ %t277, %block_0_418b47 ]
  %t286 = phi i64 [ %t278, %block_0_418b47 ]
  br label %block_0_418b62
block_0_418b57:
  %t287 = phi i64 [ %t296, %block_0_418b62 ]
  %t288 = phi i64 [ %t303, %block_0_418b62 ]
  %t289 = phi i512 [ %t298, %block_0_418b62 ]
  %t290 = phi i64 [ %t299, %block_0_418b62 ]
  ; r278 := (bv_add r274 (0xfffffffffffffff8 : bv 64))
  %t291 = add i64 %t287, 18446744073709551608
  ; r279 := (read r278 (bv 32))
  %t292 = inttoptr i64 %t291 to i32*
  %t293 = load i32, i32* %t292
  ; r280 := (bv_add r274 (0xfffffffffffffffc : bv 64))
  %t294 = add i64 %t287, 18446744073709551612
  ; r281 := (eq r279 (0x0 : bv 32))
  %t295 = icmp eq i32 %t293, 0
  br i1 %t295, label %block_0_418b62, label %block_0_418b67
block_0_418b62:
  %t296 = phi i64 [ %t284, %block_0_418b52 ], [ %t294, %block_0_418b57 ]
  %t297 = phi i64 [ %t283, %block_0_418b52 ], [ %t288, %block_0_418b57 ]
  %t298 = phi i512 [ %t285, %block_0_418b52 ], [ %t289, %block_0_418b57 ]
  %t299 = phi i64 [ %t286, %block_0_418b52 ], [ %t290, %block_0_418b57 ]
  ; r286 := (trunc r283 32)
  %t300 = trunc i64 %t297 to i32
  ; r287 := (bv_add r286 (0xffffffff : bv 32))
  %t301 = add i32 %t300, 4294967295
  ; r288 := (eq r286 (0x1 : bv 32))
  %t302 = icmp eq i32 %t300, 1
  ; r289 := (uext r287 64)
  %t303 = zext i32 %t301 to i64
  br i1 %t302, label %block_0_418b67, label %block_0_418b57
block_0_418b67:
  %t304 = phi i64 [ %t265, %block_0_418b43 ], [ %t274, %block_0_418b47 ], [ %t294, %block_0_418b57 ], [ %t296, %block_0_418b62 ]
  %t305 = phi i64 [ %t266, %block_0_418b43 ], [ %t275, %block_0_418b47 ], [ %t288, %block_0_418b57 ], [ %t303, %block_0_418b62 ]
  %t306 = phi i512 [ %t268, %block_0_418b43 ], [ %t277, %block_0_418b47 ], [ %t289, %block_0_418b57 ], [ %t298, %block_0_418b62 ]
  %t307 = phi i64 [ %t269, %block_0_418b43 ], [ %t278, %block_0_418b47 ], [ %t290, %block_0_418b57 ], [ %t299, %block_0_418b62 ]
  ; r294 := (trunc r291 32)
  %t308 = trunc i64 %t305 to i32
  ; r295 := (bv_add r293 (0x14 : bv 64))
  %t309 = add i64 %t307, 20
  ; write r295 r294
  %t310 = inttoptr i64 %t309 to i32*
  store i32 %t308, i32* %t310
  ; r296 := (bitcast r292 (vec 8 double))
  %t311 = bitcast i512 %t306 to <8 x double>
  ; r297 := (tuple r293 r290 r296)
  %t312 = insertvalue { i64, i64, <8 x double> } undef, i64 %t307, 0
  %t313 = insertvalue { i64, i64, <8 x double> } %t312, i64 %t304, 1
  %t314 = insertvalue { i64, i64, <8 x double> } %t313, <8 x double> %t311, 2
  ret { i64, i64, <8 x double> } %t314
block_0_418b7d:
  %t315 = phi i64 [ %arg3, %block_0_418a60 ]
  %t316 = phi i64 [ %arg2, %block_0_418a60 ]
  %t317 = phi i64 [ %arg1, %block_0_418a60 ]
  %t318 = phi i64 [ %arg0, %block_0_418a60 ]
  %t319 = phi i64 [ %arg4, %block_0_418a60 ]
  %t320 = phi i64 [ %arg5, %block_0_418a60 ]
  %t321 = phi i64 [ %t7, %block_0_418a60 ]
  %t322 = phi i64 [ %t3, %block_0_418a60 ]
  %t323 = phi i512 [ %t13, %block_0_418a60 ]
  %t324 = phi i512 [ %t14, %block_0_418a60 ]
  %t325 = phi i512 [ %t15, %block_0_418a60 ]
  %t326 = phi i512 [ %t16, %block_0_418a60 ]
  %t327 = phi i512 [ %t17, %block_0_418a60 ]
  %t328 = phi i512 [ %t18, %block_0_418a60 ]
  %t329 = phi i512 [ %t19, %block_0_418a60 ]
  %t330 = phi i512 [ %t20, %block_0_418a60 ]
  ; r314 := (trunc r305 32)
  %t331 = trunc i64 %t322 to i32
  ; r315 := (uext r314 64)
  %t332 = zext i32 %t331 to i64
  ; r316 := (trunc r304 32)
  %t333 = trunc i64 %t321 to i32
  ; r317 := (uext r316 64)
  %t334 = zext i32 %t333 to i64
  br label %block_0_418a8b
}
define { i64, i64, <8 x double> } @__i2b_D2A(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_418b90:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (bitcast arg6 (bv 512))
  %t2 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg9 (bv 512))
  %t8 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg11 (bv 512))
  %t12 = bitcast <8 x double> %arg11 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg12 (bv 512))
  %t14 = bitcast <8 x double> %arg12 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := (bitcast arg13 (bv 512))
  %t16 = bitcast <8 x double> %arg13 to i512
  ; r17 := (bitcast r16 (vec 8 double))
  %t17 = bitcast i512 %t16 to <8 x double>
  ; r18 := call __Balloc_D2A((0x1 : bv 64), arg1, arg2, arg3, arg4, arg5, r3, r5, r7, r9, r11, r13, r15, r17)
  %t18 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__Balloc_D2A(i64 1, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15, <8 x double> %t17)
  ; r19 := (tuple_field r18 0)
  %t19 = extractvalue { i64, i64, <8 x double> } %t18, 0
  ; r20 := (tuple_field r18 1)
  %t20 = extractvalue { i64, i64, <8 x double> } %t18, 1
  ; r21 := (tuple_field r18 2)
  %t21 = extractvalue { i64, i64, <8 x double> } %t18, 2
  ; r22 := (bitcast r21 (bv 512))
  %t22 = bitcast <8 x double> %t21 to i512
  br label %block_0_418b9d
block_0_418b9d:
  %t23 = phi i64 [ %t19, %block_0_418b90 ]
  %t24 = phi i64 [ %t20, %block_0_418b90 ]
  %t25 = phi i64 [ %t1, %block_0_418b90 ]
  %t26 = phi i512 [ %t22, %block_0_418b90 ]
  ; r27 := (trunc r25 32)
  %t27 = trunc i64 %t25 to i32
  ; r28 := (bv_add r23 (0x18 : bv 64))
  %t28 = add i64 %t23, 24
  ; write r28 r27
  %t29 = inttoptr i64 %t28 to i32*
  store i32 %t27, i32* %t29
  ; r29 := (bv_add r23 (0x14 : bv 64))
  %t30 = add i64 %t23, 20
  ; write r29 (0x1 : bv 32)
  %t31 = inttoptr i64 %t30 to i32*
  store i32 1, i32* %t31
  ; r30 := (bitcast r26 (vec 8 double))
  %t32 = bitcast i512 %t26 to <8 x double>
  ; r31 := (tuple r23 r24 r30)
  %t33 = insertvalue { i64, i64, <8 x double> } undef, i64 %t23, 0
  %t34 = insertvalue { i64, i64, <8 x double> } %t33, i64 %t24, 1
  %t35 = insertvalue { i64, i64, <8 x double> } %t34, <8 x double> %t32, 2
  ret { i64, i64, <8 x double> } %t35
}
define { i64, i64, <8 x double> } @__pow5mult_D2A(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_418c50:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (bv_and r0 (0x3 : bv 32))
  %t2 = and i32 %t0, 3
  ; r3 := (eq r2 (0x0 : bv 32))
  %t3 = icmp eq i32 %t2, 0
  ; r4 := (uext r2 64)
  %t4 = zext i32 %t2 to i64
  ; r5 := (bitcast arg6 (bv 512))
  %t5 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t6 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t7 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t8 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t9 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast arg12 (bv 512))
  %t11 = bitcast <8 x double> %arg12 to i512
  ; r12 := (bitcast arg13 (bv 512))
  %t12 = bitcast <8 x double> %arg13 to i512
  ; r13 := (bitcast arg6 (bv 512))
  %t13 = bitcast <8 x double> %arg6 to i512
  ; r14 := (bitcast arg7 (bv 512))
  %t14 = bitcast <8 x double> %arg7 to i512
  ; r15 := (bitcast arg8 (bv 512))
  %t15 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast arg9 (bv 512))
  %t16 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast arg10 (bv 512))
  %t17 = bitcast <8 x double> %arg10 to i512
  ; r18 := (bitcast arg11 (bv 512))
  %t18 = bitcast <8 x double> %arg11 to i512
  ; r19 := (bitcast arg12 (bv 512))
  %t19 = bitcast <8 x double> %arg12 to i512
  ; r20 := (bitcast arg13 (bv 512))
  %t20 = bitcast <8 x double> %arg13 to i512
  br i1 %t3, label %block_0_418c6a, label %block_0_418d20
block_0_418c6a:
  %t21 = phi i64 [ %arg3, %block_0_418c50 ], [ %t467, %block_0_418d30 ]
  %t22 = phi i64 [ %arg2, %block_0_418c50 ], [ %t468, %block_0_418d30 ]
  %t23 = phi i64 [ %t1, %block_0_418c50 ], [ %t469, %block_0_418d30 ]
  %t24 = phi i64 [ %arg1, %block_0_418c50 ], [ %t470, %block_0_418d30 ]
  %t25 = phi i64 [ %arg4, %block_0_418c50 ], [ %t471, %block_0_418d30 ]
  %t26 = phi i64 [ %arg5, %block_0_418c50 ], [ %t472, %block_0_418d30 ]
  %t27 = phi i64 [ %arg0, %block_0_418c50 ], [ %t466, %block_0_418d30 ]
  %t28 = phi i512 [ %t5, %block_0_418c50 ], [ %t473, %block_0_418d30 ]
  %t29 = phi i512 [ %t6, %block_0_418c50 ], [ %t474, %block_0_418d30 ]
  %t30 = phi i512 [ %t7, %block_0_418c50 ], [ %t475, %block_0_418d30 ]
  %t31 = phi i512 [ %t8, %block_0_418c50 ], [ %t476, %block_0_418d30 ]
  %t32 = phi i512 [ %t9, %block_0_418c50 ], [ %t477, %block_0_418d30 ]
  %t33 = phi i512 [ %t10, %block_0_418c50 ], [ %t478, %block_0_418d30 ]
  %t34 = phi i512 [ %t11, %block_0_418c50 ], [ %t479, %block_0_418d30 ]
  %t35 = phi i512 [ %t12, %block_0_418c50 ], [ %t480, %block_0_418d30 ]
  ; r36 := (trunc r23 32)
  %t36 = trunc i64 %t23 to i32
  ; r37 := (bv_sar r36 (0x2 : bv 32))
  %t37 = ashr i32 %t36, 2
  ; r38 := (eq r37 (0x0 : bv 32))
  %t38 = icmp eq i32 %t37, 0
  ; r39 := (uext r37 64)
  %t39 = zext i32 %t37 to i64
  br i1 %t38, label %block_0_418cc0, label %block_0_418c76
block_0_418c76:
  %t40 = phi i64 [ %t21, %block_0_418c6a ]
  %t41 = phi i64 [ %t22, %block_0_418c6a ]
  %t42 = phi i64 [ %t24, %block_0_418c6a ]
  %t43 = phi i64 [ %t25, %block_0_418c6a ]
  %t44 = phi i64 [ %t26, %block_0_418c6a ]
  %t45 = phi i64 [ %t39, %block_0_418c6a ]
  %t46 = phi i64 [ %t27, %block_0_418c6a ]
  %t47 = phi i512 [ %t28, %block_0_418c6a ]
  %t48 = phi i512 [ %t29, %block_0_418c6a ]
  %t49 = phi i512 [ %t30, %block_0_418c6a ]
  %t50 = phi i512 [ %t31, %block_0_418c6a ]
  %t51 = phi i512 [ %t32, %block_0_418c6a ]
  %t52 = phi i512 [ %t33, %block_0_418c6a ]
  %t53 = phi i512 [ %t34, %block_0_418c6a ]
  %t54 = phi i512 [ %t35, %block_0_418c6a ]
  ; r55 := (read (0x63f840 : bv 64) (bv 64))
  %t55 = inttoptr i64 6551616 to i64*
  %t56 = load i64, i64* %t55
  ; r56 := (eq r55 (0x0 : bv 64))
  %t57 = icmp eq i64 %t56, 0
  br i1 %t57, label %block_0_418c82, label %block_0_418c98
block_0_418c82:
  %t58 = phi i64 [ %t40, %block_0_418c76 ]
  %t59 = phi i64 [ %t41, %block_0_418c76 ]
  %t60 = phi i64 [ %t42, %block_0_418c76 ]
  %t61 = phi i64 [ %t43, %block_0_418c76 ]
  %t62 = phi i64 [ %t44, %block_0_418c76 ]
  %t63 = phi i64 [ %t45, %block_0_418c76 ]
  %t64 = phi i64 [ %t46, %block_0_418c76 ]
  %t65 = phi i512 [ %t47, %block_0_418c76 ]
  %t66 = phi i512 [ %t48, %block_0_418c76 ]
  %t67 = phi i512 [ %t49, %block_0_418c76 ]
  %t68 = phi i512 [ %t50, %block_0_418c76 ]
  %t69 = phi i512 [ %t51, %block_0_418c76 ]
  %t70 = phi i512 [ %t52, %block_0_418c76 ]
  %t71 = phi i512 [ %t53, %block_0_418c76 ]
  %t72 = phi i512 [ %t54, %block_0_418c76 ]
  br label %block_0_418d38
block_0_418c87:
  %t73 = phi i64 [ %t128, %block_0_418c98 ]
  %t74 = phi i64 [ %t129, %block_0_418c98 ]
  %t75 = phi i64 [ %t130, %block_0_418c98 ]
  %t76 = phi i64 [ %t131, %block_0_418c98 ]
  %t77 = phi i64 [ %t132, %block_0_418c98 ]
  %t78 = phi i64 [ %t133, %block_0_418c98 ]
  %t79 = phi i64 [ %t134, %block_0_418c98 ]
  %t80 = phi i64 [ %t135, %block_0_418c98 ]
  %t81 = phi i512 [ %t136, %block_0_418c98 ]
  %t82 = phi i512 [ %t137, %block_0_418c98 ]
  %t83 = phi i512 [ %t138, %block_0_418c98 ]
  %t84 = phi i512 [ %t139, %block_0_418c98 ]
  %t85 = phi i512 [ %t140, %block_0_418c98 ]
  %t86 = phi i512 [ %t141, %block_0_418c98 ]
  %t87 = phi i512 [ %t142, %block_0_418c98 ]
  %t88 = phi i512 [ %t143, %block_0_418c98 ]
  ; r88 := (trunc r78 32)
  %t89 = trunc i64 %t79 to i32
  ; r89 := (bv_sar r88 (0x1 : bv 32))
  %t90 = ashr i32 %t89, 1
  ; r90 := (eq r89 (0x0 : bv 32))
  %t91 = icmp eq i32 %t90, 0
  ; r91 := (uext r89 64)
  %t92 = zext i32 %t90 to i64
  br i1 %t91, label %block_0_418cc0, label %block_0_418c8c
block_0_418c8c:
  %t93 = phi i64 [ %t73, %block_0_418c87 ], [ %t206, %block_0_418cb4 ]
  %t94 = phi i64 [ %t74, %block_0_418c87 ], [ %t207, %block_0_418cb4 ]
  %t95 = phi i64 [ %t75, %block_0_418c87 ], [ %t209, %block_0_418cb4 ]
  %t96 = phi i64 [ %t76, %block_0_418c87 ], [ %t210, %block_0_418cb4 ]
  %t97 = phi i64 [ %t77, %block_0_418c87 ], [ %t211, %block_0_418cb4 ]
  %t98 = phi i64 [ %t78, %block_0_418c87 ], [ %t212, %block_0_418cb4 ]
  %t99 = phi i64 [ %t92, %block_0_418c87 ], [ %t225, %block_0_418cb4 ]
  %t100 = phi i64 [ %t80, %block_0_418c87 ], [ %t208, %block_0_418cb4 ]
  %t101 = phi i512 [ %t81, %block_0_418c87 ], [ %t214, %block_0_418cb4 ]
  %t102 = phi i512 [ %t82, %block_0_418c87 ], [ %t215, %block_0_418cb4 ]
  %t103 = phi i512 [ %t83, %block_0_418c87 ], [ %t216, %block_0_418cb4 ]
  %t104 = phi i512 [ %t84, %block_0_418c87 ], [ %t217, %block_0_418cb4 ]
  %t105 = phi i512 [ %t85, %block_0_418c87 ], [ %t218, %block_0_418cb4 ]
  %t106 = phi i512 [ %t86, %block_0_418c87 ], [ %t219, %block_0_418cb4 ]
  %t107 = phi i512 [ %t87, %block_0_418c87 ], [ %t220, %block_0_418cb4 ]
  %t108 = phi i512 [ %t88, %block_0_418c87 ], [ %t221, %block_0_418cb4 ]
  ; r108 := (read r94 (bv 64))
  %t109 = inttoptr i64 %t95 to i64*
  %t110 = load i64, i64* %t109
  ; r109 := (eq r108 (0x0 : bv 64))
  %t111 = icmp eq i64 %t110, 0
  br i1 %t111, label %block_0_418cd0, label %block_0_418c95
block_0_418c95:
  %t112 = phi i64 [ %t93, %block_0_418c8c ], [ %t303, %block_0_418cf3 ], [ %t351, %block_0_418d09 ]
  %t113 = phi i64 [ %t94, %block_0_418c8c ], [ %t304, %block_0_418cf3 ], [ %t352, %block_0_418d09 ]
  %t114 = phi i64 [ %t110, %block_0_418c8c ], [ %t305, %block_0_418cf3 ], [ %t353, %block_0_418d09 ]
  %t115 = phi i64 [ %t96, %block_0_418c8c ], [ %t306, %block_0_418cf3 ], [ %t354, %block_0_418d09 ]
  %t116 = phi i64 [ %t97, %block_0_418c8c ], [ %t307, %block_0_418cf3 ], [ %t355, %block_0_418d09 ]
  %t117 = phi i64 [ %t98, %block_0_418c8c ], [ %t308, %block_0_418cf3 ], [ %t356, %block_0_418d09 ]
  %t118 = phi i64 [ %t99, %block_0_418c8c ], [ %t309, %block_0_418cf3 ], [ %t357, %block_0_418d09 ]
  %t119 = phi i64 [ %t100, %block_0_418c8c ], [ %t310, %block_0_418cf3 ], [ %t358, %block_0_418d09 ]
  %t120 = phi i512 [ %t101, %block_0_418c8c ], [ %t311, %block_0_418cf3 ], [ %t359, %block_0_418d09 ]
  %t121 = phi i512 [ %t102, %block_0_418c8c ], [ %t312, %block_0_418cf3 ], [ %t360, %block_0_418d09 ]
  %t122 = phi i512 [ %t103, %block_0_418c8c ], [ %t313, %block_0_418cf3 ], [ %t361, %block_0_418d09 ]
  %t123 = phi i512 [ %t104, %block_0_418c8c ], [ %t314, %block_0_418cf3 ], [ %t362, %block_0_418d09 ]
  %t124 = phi i512 [ %t105, %block_0_418c8c ], [ %t315, %block_0_418cf3 ], [ %t363, %block_0_418d09 ]
  %t125 = phi i512 [ %t106, %block_0_418c8c ], [ %t316, %block_0_418cf3 ], [ %t364, %block_0_418d09 ]
  %t126 = phi i512 [ %t107, %block_0_418c8c ], [ %t317, %block_0_418cf3 ], [ %t365, %block_0_418d09 ]
  %t127 = phi i512 [ %t108, %block_0_418c8c ], [ %t318, %block_0_418cf3 ], [ %t366, %block_0_418d09 ]
  br label %block_0_418c98
block_0_418c98:
  %t128 = phi i64 [ %t40, %block_0_418c76 ], [ %t112, %block_0_418c95 ], [ %t545, %block_0_418d5d ], [ %t593, %block_0_418d75 ]
  %t129 = phi i64 [ %t41, %block_0_418c76 ], [ %t113, %block_0_418c95 ], [ %t546, %block_0_418d5d ], [ %t594, %block_0_418d75 ]
  %t130 = phi i64 [ %t56, %block_0_418c76 ], [ %t114, %block_0_418c95 ], [ %t547, %block_0_418d5d ], [ %t595, %block_0_418d75 ]
  %t131 = phi i64 [ %t42, %block_0_418c76 ], [ %t115, %block_0_418c95 ], [ %t548, %block_0_418d5d ], [ %t596, %block_0_418d75 ]
  %t132 = phi i64 [ %t43, %block_0_418c76 ], [ %t116, %block_0_418c95 ], [ %t549, %block_0_418d5d ], [ %t597, %block_0_418d75 ]
  %t133 = phi i64 [ %t44, %block_0_418c76 ], [ %t117, %block_0_418c95 ], [ %t550, %block_0_418d5d ], [ %t598, %block_0_418d75 ]
  %t134 = phi i64 [ %t45, %block_0_418c76 ], [ %t118, %block_0_418c95 ], [ %t551, %block_0_418d5d ], [ %t599, %block_0_418d75 ]
  %t135 = phi i64 [ %t46, %block_0_418c76 ], [ %t119, %block_0_418c95 ], [ %t552, %block_0_418d5d ], [ %t600, %block_0_418d75 ]
  %t136 = phi i512 [ %t47, %block_0_418c76 ], [ %t120, %block_0_418c95 ], [ %t553, %block_0_418d5d ], [ %t601, %block_0_418d75 ]
  %t137 = phi i512 [ %t48, %block_0_418c76 ], [ %t121, %block_0_418c95 ], [ %t554, %block_0_418d5d ], [ %t602, %block_0_418d75 ]
  %t138 = phi i512 [ %t49, %block_0_418c76 ], [ %t122, %block_0_418c95 ], [ %t555, %block_0_418d5d ], [ %t603, %block_0_418d75 ]
  %t139 = phi i512 [ %t50, %block_0_418c76 ], [ %t123, %block_0_418c95 ], [ %t556, %block_0_418d5d ], [ %t604, %block_0_418d75 ]
  %t140 = phi i512 [ %t51, %block_0_418c76 ], [ %t124, %block_0_418c95 ], [ %t557, %block_0_418d5d ], [ %t605, %block_0_418d75 ]
  %t141 = phi i512 [ %t52, %block_0_418c76 ], [ %t125, %block_0_418c95 ], [ %t558, %block_0_418d5d ], [ %t606, %block_0_418d75 ]
  %t142 = phi i512 [ %t53, %block_0_418c76 ], [ %t126, %block_0_418c95 ], [ %t559, %block_0_418d5d ], [ %t607, %block_0_418d75 ]
  %t143 = phi i512 [ %t54, %block_0_418c76 ], [ %t127, %block_0_418c95 ], [ %t560, %block_0_418d5d ], [ %t608, %block_0_418d75 ]
  ; r142 := (trunc r132 8)
  %t144 = trunc i64 %t134 to i8
  ; r143 := (bv_and r142 (0x1 : bv 8))
  %t145 = and i8 %t144, 1
  ; r144 := (eq r143 (0x0 : bv 8))
  %t146 = icmp eq i8 %t145, 0
  br i1 %t146, label %block_0_418c87, label %block_0_418c9e
block_0_418c9e:
  %t147 = phi i64 [ %t128, %block_0_418c98 ]
  %t148 = phi i64 [ %t129, %block_0_418c98 ]
  %t149 = phi i64 [ %t130, %block_0_418c98 ]
  %t150 = phi i64 [ %t131, %block_0_418c98 ]
  %t151 = phi i64 [ %t132, %block_0_418c98 ]
  %t152 = phi i64 [ %t133, %block_0_418c98 ]
  %t153 = phi i64 [ %t134, %block_0_418c98 ]
  %t154 = phi i64 [ %t135, %block_0_418c98 ]
  %t155 = phi i512 [ %t136, %block_0_418c98 ]
  %t156 = phi i512 [ %t137, %block_0_418c98 ]
  %t157 = phi i512 [ %t138, %block_0_418c98 ]
  %t158 = phi i512 [ %t139, %block_0_418c98 ]
  %t159 = phi i512 [ %t140, %block_0_418c98 ]
  %t160 = phi i512 [ %t141, %block_0_418c98 ]
  %t161 = phi i512 [ %t142, %block_0_418c98 ]
  %t162 = phi i512 [ %t143, %block_0_418c98 ]
  ; r161 := (bitcast r153 (vec 8 double))
  %t163 = bitcast i512 %t155 to <8 x double>
  ; r162 := (bitcast r154 (vec 8 double))
  %t164 = bitcast i512 %t156 to <8 x double>
  ; r163 := (bitcast r155 (vec 8 double))
  %t165 = bitcast i512 %t157 to <8 x double>
  ; r164 := (bitcast r156 (vec 8 double))
  %t166 = bitcast i512 %t158 to <8 x double>
  ; r165 := (bitcast r157 (vec 8 double))
  %t167 = bitcast i512 %t159 to <8 x double>
  ; r166 := (bitcast r158 (vec 8 double))
  %t168 = bitcast i512 %t160 to <8 x double>
  ; r167 := (bitcast r159 (vec 8 double))
  %t169 = bitcast i512 %t161 to <8 x double>
  ; r168 := (bitcast r160 (vec 8 double))
  %t170 = bitcast i512 %t162 to <8 x double>
  ; r169 := call __mult_D2A(r152, r147, r146, r145, r149, r150, r161, r162, r163, r164, r165, r166, r167, r168)
  %t171 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__mult_D2A(i64 %t154, i64 %t149, i64 %t148, i64 %t147, i64 %t151, i64 %t152, <8 x double> %t163, <8 x double> %t164, <8 x double> %t165, <8 x double> %t166, <8 x double> %t167, <8 x double> %t168, <8 x double> %t169, <8 x double> %t170)
  ; r170 := (tuple_field r169 0)
  %t172 = extractvalue { i64, i64, <8 x double> } %t171, 0
  ; r171 := (tuple_field r169 1)
  %t173 = extractvalue { i64, i64, <8 x double> } %t171, 1
  ; r172 := (tuple_field r169 2)
  %t174 = extractvalue { i64, i64, <8 x double> } %t171, 2
  ; r173 := (bitcast r172 (bv 512))
  %t175 = bitcast <8 x double> %t174 to i512
  br label %block_0_418ca9
block_0_418ca9:
  %t176 = phi i64 [ %t172, %block_0_418c9e ]
  %t177 = phi i64 [ %t147, %block_0_418c9e ]
  %t178 = phi i64 [ %t173, %block_0_418c9e ]
  %t179 = phi i64 [ %t149, %block_0_418c9e ]
  %t180 = phi i64 [ %t150, %block_0_418c9e ]
  %t181 = phi i64 [ %t151, %block_0_418c9e ]
  %t182 = phi i64 [ %t152, %block_0_418c9e ]
  %t183 = phi i64 [ %t153, %block_0_418c9e ]
  %t184 = phi i64 [ %t154, %block_0_418c9e ]
  %t185 = phi i512 [ %t175, %block_0_418c9e ]
  %t186 = phi i512 [ %t156, %block_0_418c9e ]
  %t187 = phi i512 [ %t157, %block_0_418c9e ]
  %t188 = phi i512 [ %t158, %block_0_418c9e ]
  %t189 = phi i512 [ %t159, %block_0_418c9e ]
  %t190 = phi i512 [ %t160, %block_0_418c9e ]
  %t191 = phi i512 [ %t161, %block_0_418c9e ]
  %t192 = phi i512 [ %t162, %block_0_418c9e ]
  ; r191 := (bitcast r183 (vec 8 double))
  %t193 = bitcast i512 %t185 to <8 x double>
  ; r192 := (bitcast r184 (vec 8 double))
  %t194 = bitcast i512 %t186 to <8 x double>
  ; r193 := (bitcast r185 (vec 8 double))
  %t195 = bitcast i512 %t187 to <8 x double>
  ; r194 := (bitcast r186 (vec 8 double))
  %t196 = bitcast i512 %t188 to <8 x double>
  ; r195 := (bitcast r187 (vec 8 double))
  %t197 = bitcast i512 %t189 to <8 x double>
  ; r196 := (bitcast r188 (vec 8 double))
  %t198 = bitcast i512 %t190 to <8 x double>
  ; r197 := (bitcast r189 (vec 8 double))
  %t199 = bitcast i512 %t191 to <8 x double>
  ; r198 := (bitcast r190 (vec 8 double))
  %t200 = bitcast i512 %t192 to <8 x double>
  ; r199 := call __Bfree_D2A(r182, r178, r176, r175, r179, r180, r191, r192, r193, r194, r195, r196, r197, r198)
  %t201 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__Bfree_D2A(i64 %t184, i64 %t180, i64 %t178, i64 %t177, i64 %t181, i64 %t182, <8 x double> %t193, <8 x double> %t194, <8 x double> %t195, <8 x double> %t196, <8 x double> %t197, <8 x double> %t198, <8 x double> %t199, <8 x double> %t200)
  ; r200 := (tuple_field r199 0)
  %t202 = extractvalue { i64, i64, <8 x double> } %t201, 0
  ; r201 := (tuple_field r199 1)
  %t203 = extractvalue { i64, i64, <8 x double> } %t201, 1
  ; r202 := (tuple_field r199 2)
  %t204 = extractvalue { i64, i64, <8 x double> } %t201, 2
  ; r203 := (bitcast r202 (bv 512))
  %t205 = bitcast <8 x double> %t204 to i512
  br label %block_0_418cb4
block_0_418cb4:
  %t206 = phi i64 [ %t177, %block_0_418ca9 ]
  %t207 = phi i64 [ %t203, %block_0_418ca9 ]
  %t208 = phi i64 [ %t176, %block_0_418ca9 ]
  %t209 = phi i64 [ %t179, %block_0_418ca9 ]
  %t210 = phi i64 [ %t180, %block_0_418ca9 ]
  %t211 = phi i64 [ %t181, %block_0_418ca9 ]
  %t212 = phi i64 [ %t182, %block_0_418ca9 ]
  %t213 = phi i64 [ %t183, %block_0_418ca9 ]
  %t214 = phi i512 [ %t205, %block_0_418ca9 ]
  %t215 = phi i512 [ %t186, %block_0_418ca9 ]
  %t216 = phi i512 [ %t187, %block_0_418ca9 ]
  %t217 = phi i512 [ %t188, %block_0_418ca9 ]
  %t218 = phi i512 [ %t189, %block_0_418ca9 ]
  %t219 = phi i512 [ %t190, %block_0_418ca9 ]
  %t220 = phi i512 [ %t191, %block_0_418ca9 ]
  %t221 = phi i512 [ %t192, %block_0_418ca9 ]
  ; r220 := (trunc r211 32)
  %t222 = trunc i64 %t213 to i32
  ; r221 := (bv_sar r220 (0x1 : bv 32))
  %t223 = ashr i32 %t222, 1
  ; r222 := (eq r221 (0x0 : bv 32))
  %t224 = icmp eq i32 %t223, 0
  ; r223 := (uext r221 64)
  %t225 = zext i32 %t223 to i64
  br i1 %t224, label %block_0_418cbc, label %block_0_418c8c
block_0_418cbc:
  %t226 = phi i64 [ %t207, %block_0_418cb4 ]
  %t227 = phi i64 [ %t208, %block_0_418cb4 ]
  %t228 = phi i512 [ %t214, %block_0_418cb4 ]
  br label %block_0_418cc0
block_0_418cc0:
  %t229 = phi i64 [ %t22, %block_0_418c6a ], [ %t74, %block_0_418c87 ], [ %t226, %block_0_418cbc ]
  %t230 = phi i64 [ %t27, %block_0_418c6a ], [ %t80, %block_0_418c87 ], [ %t227, %block_0_418cbc ]
  %t231 = phi i512 [ %t28, %block_0_418c6a ], [ %t81, %block_0_418c87 ], [ %t228, %block_0_418cbc ]
  ; r230 := (bitcast r229 (vec 8 double))
  %t232 = bitcast i512 %t231 to <8 x double>
  ; r231 := (tuple r228 r227 r230)
  %t233 = insertvalue { i64, i64, <8 x double> } undef, i64 %t230, 0
  %t234 = insertvalue { i64, i64, <8 x double> } %t233, i64 %t229, 1
  %t235 = insertvalue { i64, i64, <8 x double> } %t234, <8 x double> %t232, 2
  ret { i64, i64, <8 x double> } %t235
block_0_418cd0:
  %t236 = phi i64 [ %t93, %block_0_418c8c ]
  %t237 = phi i64 [ %t94, %block_0_418c8c ]
  %t238 = phi i64 [ %t95, %block_0_418c8c ]
  %t239 = phi i64 [ %t96, %block_0_418c8c ]
  %t240 = phi i64 [ %t97, %block_0_418c8c ]
  %t241 = phi i64 [ %t98, %block_0_418c8c ]
  %t242 = phi i64 [ %t99, %block_0_418c8c ]
  %t243 = phi i64 [ %t100, %block_0_418c8c ]
  %t244 = phi i512 [ %t101, %block_0_418c8c ]
  %t245 = phi i512 [ %t102, %block_0_418c8c ]
  %t246 = phi i512 [ %t103, %block_0_418c8c ]
  %t247 = phi i512 [ %t104, %block_0_418c8c ]
  %t248 = phi i512 [ %t105, %block_0_418c8c ]
  %t249 = phi i512 [ %t106, %block_0_418c8c ]
  %t250 = phi i512 [ %t107, %block_0_418c8c ]
  %t251 = phi i512 [ %t108, %block_0_418c8c ]
  ; r248 := (read (0x6356e8 : bv 64) (bv 32))
  %t252 = inttoptr i64 6510312 to i32*
  %t253 = load i32, i32* %t252
  ; r249 := (eq r248 (0x0 : bv 32))
  %t254 = icmp eq i32 %t253, 0
  br i1 %t254, label %block_0_418cda, label %block_0_418d0b
block_0_418cda:
  %t255 = phi i64 [ %t236, %block_0_418cd0 ], [ %t415, %block_0_418d1e ]
  %t256 = phi i64 [ %t237, %block_0_418cd0 ], [ %t416, %block_0_418d1e ]
  %t257 = phi i64 [ %t238, %block_0_418cd0 ], [ %t417, %block_0_418d1e ]
  %t258 = phi i64 [ %t239, %block_0_418cd0 ], [ %t418, %block_0_418d1e ]
  %t259 = phi i64 [ %t240, %block_0_418cd0 ], [ %t419, %block_0_418d1e ]
  %t260 = phi i64 [ %t241, %block_0_418cd0 ], [ %t420, %block_0_418d1e ]
  %t261 = phi i64 [ %t242, %block_0_418cd0 ], [ %t421, %block_0_418d1e ]
  %t262 = phi i64 [ %t243, %block_0_418cd0 ], [ %t422, %block_0_418d1e ]
  %t263 = phi i512 [ %t244, %block_0_418cd0 ], [ %t423, %block_0_418d1e ]
  %t264 = phi i512 [ %t245, %block_0_418cd0 ], [ %t424, %block_0_418d1e ]
  %t265 = phi i512 [ %t246, %block_0_418cd0 ], [ %t425, %block_0_418d1e ]
  %t266 = phi i512 [ %t247, %block_0_418cd0 ], [ %t426, %block_0_418d1e ]
  %t267 = phi i512 [ %t248, %block_0_418cd0 ], [ %t427, %block_0_418d1e ]
  %t268 = phi i512 [ %t249, %block_0_418cd0 ], [ %t428, %block_0_418d1e ]
  %t269 = phi i512 [ %t250, %block_0_418cd0 ], [ %t429, %block_0_418d1e ]
  %t270 = phi i512 [ %t251, %block_0_418cd0 ], [ %t430, %block_0_418d1e ]
  ; r266 := (bitcast r258 (vec 8 double))
  %t271 = bitcast i512 %t263 to <8 x double>
  ; r267 := (bitcast r259 (vec 8 double))
  %t272 = bitcast i512 %t264 to <8 x double>
  ; r268 := (bitcast r260 (vec 8 double))
  %t273 = bitcast i512 %t265 to <8 x double>
  ; r269 := (bitcast r261 (vec 8 double))
  %t274 = bitcast i512 %t266 to <8 x double>
  ; r270 := (bitcast r262 (vec 8 double))
  %t275 = bitcast i512 %t267 to <8 x double>
  ; r271 := (bitcast r263 (vec 8 double))
  %t276 = bitcast i512 %t268 to <8 x double>
  ; r272 := (bitcast r264 (vec 8 double))
  %t277 = bitcast i512 %t269 to <8 x double>
  ; r273 := (bitcast r265 (vec 8 double))
  %t278 = bitcast i512 %t270 to <8 x double>
  ; r274 := call __mult_D2A(r252, r252, r251, r250, r254, r255, r266, r267, r268, r269, r270, r271, r272, r273)
  %t279 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__mult_D2A(i64 %t257, i64 %t257, i64 %t256, i64 %t255, i64 %t259, i64 %t260, <8 x double> %t271, <8 x double> %t272, <8 x double> %t273, <8 x double> %t274, <8 x double> %t275, <8 x double> %t276, <8 x double> %t277, <8 x double> %t278)
  ; r275 := (tuple_field r274 0)
  %t280 = extractvalue { i64, i64, <8 x double> } %t279, 0
  ; r276 := (tuple_field r274 1)
  %t281 = extractvalue { i64, i64, <8 x double> } %t279, 1
  ; r277 := (tuple_field r274 2)
  %t282 = extractvalue { i64, i64, <8 x double> } %t279, 2
  ; r278 := (bitcast r277 (bv 512))
  %t283 = bitcast <8 x double> %t282 to i512
  br label %block_0_418ce5
block_0_418ce5:
  %t284 = phi i64 [ %t280, %block_0_418cda ]
  %t285 = phi i64 [ %t255, %block_0_418cda ]
  %t286 = phi i64 [ %t281, %block_0_418cda ]
  %t287 = phi i64 [ %t257, %block_0_418cda ]
  %t288 = phi i64 [ %t258, %block_0_418cda ]
  %t289 = phi i64 [ %t259, %block_0_418cda ]
  %t290 = phi i64 [ %t260, %block_0_418cda ]
  %t291 = phi i64 [ %t261, %block_0_418cda ]
  %t292 = phi i64 [ %t262, %block_0_418cda ]
  %t293 = phi i512 [ %t283, %block_0_418cda ]
  %t294 = phi i512 [ %t264, %block_0_418cda ]
  %t295 = phi i512 [ %t265, %block_0_418cda ]
  %t296 = phi i512 [ %t266, %block_0_418cda ]
  %t297 = phi i512 [ %t267, %block_0_418cda ]
  %t298 = phi i512 [ %t268, %block_0_418cda ]
  %t299 = phi i512 [ %t269, %block_0_418cda ]
  %t300 = phi i512 [ %t270, %block_0_418cda ]
  ; write r282 r279
  %t301 = inttoptr i64 %t287 to i64*
  store i64 %t284, i64* %t301
  ; write r279 (0x0 : bv 64)
  %t302 = inttoptr i64 %t284 to i64*
  store i64 0, i64* %t302
  br label %block_0_418cf3
block_0_418cf3:
  %t303 = phi i64 [ %t285, %block_0_418ce5 ], [ %t396, %block_0_418d15 ]
  %t304 = phi i64 [ %t286, %block_0_418ce5 ], [ %t397, %block_0_418d15 ]
  %t305 = phi i64 [ %t284, %block_0_418ce5 ], [ %t413, %block_0_418d15 ]
  %t306 = phi i64 [ %t288, %block_0_418ce5 ], [ %t399, %block_0_418d15 ]
  %t307 = phi i64 [ %t289, %block_0_418ce5 ], [ %t400, %block_0_418d15 ]
  %t308 = phi i64 [ %t290, %block_0_418ce5 ], [ %t401, %block_0_418d15 ]
  %t309 = phi i64 [ %t291, %block_0_418ce5 ], [ %t402, %block_0_418d15 ]
  %t310 = phi i64 [ %t292, %block_0_418ce5 ], [ %t403, %block_0_418d15 ]
  %t311 = phi i512 [ %t293, %block_0_418ce5 ], [ %t404, %block_0_418d15 ]
  %t312 = phi i512 [ %t294, %block_0_418ce5 ], [ %t405, %block_0_418d15 ]
  %t313 = phi i512 [ %t295, %block_0_418ce5 ], [ %t406, %block_0_418d15 ]
  %t314 = phi i512 [ %t296, %block_0_418ce5 ], [ %t407, %block_0_418d15 ]
  %t315 = phi i512 [ %t297, %block_0_418ce5 ], [ %t408, %block_0_418d15 ]
  %t316 = phi i512 [ %t298, %block_0_418ce5 ], [ %t409, %block_0_418d15 ]
  %t317 = phi i512 [ %t299, %block_0_418ce5 ], [ %t410, %block_0_418d15 ]
  %t318 = phi i512 [ %t300, %block_0_418ce5 ], [ %t411, %block_0_418d15 ]
  ; r312 := (read (0x6356e8 : bv 64) (bv 32))
  %t319 = inttoptr i64 6510312 to i32*
  %t320 = load i32, i32* %t319
  ; r313 := (eq r312 (0x0 : bv 32))
  %t321 = icmp eq i32 %t320, 0
  br i1 %t321, label %block_0_418c95, label %block_0_418cff
block_0_418cff:
  %t322 = phi i64 [ %t303, %block_0_418cf3 ]
  %t323 = phi i64 [ %t304, %block_0_418cf3 ]
  %t324 = phi i64 [ %t305, %block_0_418cf3 ]
  %t325 = phi i64 [ %t306, %block_0_418cf3 ]
  %t326 = phi i64 [ %t307, %block_0_418cf3 ]
  %t327 = phi i64 [ %t308, %block_0_418cf3 ]
  %t328 = phi i64 [ %t309, %block_0_418cf3 ]
  %t329 = phi i64 [ %t310, %block_0_418cf3 ]
  %t330 = phi i512 [ %t311, %block_0_418cf3 ]
  %t331 = phi i512 [ %t312, %block_0_418cf3 ]
  %t332 = phi i512 [ %t313, %block_0_418cf3 ]
  %t333 = phi i512 [ %t314, %block_0_418cf3 ]
  %t334 = phi i512 [ %t315, %block_0_418cf3 ]
  %t335 = phi i512 [ %t316, %block_0_418cf3 ]
  %t336 = phi i512 [ %t317, %block_0_418cf3 ]
  %t337 = phi i512 [ %t318, %block_0_418cf3 ]
  ; r330 := (bitcast r322 (vec 8 double))
  %t338 = bitcast i512 %t330 to <8 x double>
  ; r331 := (bitcast r323 (vec 8 double))
  %t339 = bitcast i512 %t331 to <8 x double>
  ; r332 := (bitcast r324 (vec 8 double))
  %t340 = bitcast i512 %t332 to <8 x double>
  ; r333 := (bitcast r325 (vec 8 double))
  %t341 = bitcast i512 %t333 to <8 x double>
  ; r334 := (bitcast r326 (vec 8 double))
  %t342 = bitcast i512 %t334 to <8 x double>
  ; r335 := (bitcast r327 (vec 8 double))
  %t343 = bitcast i512 %t335 to <8 x double>
  ; r336 := (bitcast r328 (vec 8 double))
  %t344 = bitcast i512 %t336 to <8 x double>
  ; r337 := (bitcast r329 (vec 8 double))
  %t345 = bitcast i512 %t337 to <8 x double>
  ; r338 := call pthread_mutex_unlock_int((0x640d08 : bv 64), r317, r315, r314, r318, r319, r330, r331, r332, r333, r334, r335, r336, r337)
  %t346 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6556936, i64 %t325, i64 %t323, i64 %t322, i64 %t326, i64 %t327, <8 x double> %t338, <8 x double> %t339, <8 x double> %t340, <8 x double> %t341, <8 x double> %t342, <8 x double> %t343, <8 x double> %t344, <8 x double> %t345)
  ; r339 := (tuple_field r338 0)
  %t347 = extractvalue { i64, i64, <8 x double> } %t346, 0
  ; r340 := (tuple_field r338 1)
  %t348 = extractvalue { i64, i64, <8 x double> } %t346, 1
  ; r341 := (tuple_field r338 2)
  %t349 = extractvalue { i64, i64, <8 x double> } %t346, 2
  ; r342 := (bitcast r341 (bv 512))
  %t350 = bitcast <8 x double> %t349 to i512
  br label %block_0_418d09
block_0_418d09:
  %t351 = phi i64 [ %t322, %block_0_418cff ]
  %t352 = phi i64 [ %t348, %block_0_418cff ]
  %t353 = phi i64 [ %t324, %block_0_418cff ]
  %t354 = phi i64 [ %t325, %block_0_418cff ]
  %t355 = phi i64 [ %t326, %block_0_418cff ]
  %t356 = phi i64 [ %t327, %block_0_418cff ]
  %t357 = phi i64 [ %t328, %block_0_418cff ]
  %t358 = phi i64 [ %t329, %block_0_418cff ]
  %t359 = phi i512 [ %t350, %block_0_418cff ]
  %t360 = phi i512 [ %t331, %block_0_418cff ]
  %t361 = phi i512 [ %t332, %block_0_418cff ]
  %t362 = phi i512 [ %t333, %block_0_418cff ]
  %t363 = phi i512 [ %t334, %block_0_418cff ]
  %t364 = phi i512 [ %t335, %block_0_418cff ]
  %t365 = phi i512 [ %t336, %block_0_418cff ]
  %t366 = phi i512 [ %t337, %block_0_418cff ]
  br label %block_0_418c95
block_0_418d0b:
  %t367 = phi i64 [ %t236, %block_0_418cd0 ]
  %t368 = phi i64 [ %t237, %block_0_418cd0 ]
  %t369 = phi i64 [ %t238, %block_0_418cd0 ]
  %t370 = phi i64 [ %t239, %block_0_418cd0 ]
  %t371 = phi i64 [ %t240, %block_0_418cd0 ]
  %t372 = phi i64 [ %t241, %block_0_418cd0 ]
  %t373 = phi i64 [ %t242, %block_0_418cd0 ]
  %t374 = phi i64 [ %t243, %block_0_418cd0 ]
  %t375 = phi i512 [ %t244, %block_0_418cd0 ]
  %t376 = phi i512 [ %t245, %block_0_418cd0 ]
  %t377 = phi i512 [ %t246, %block_0_418cd0 ]
  %t378 = phi i512 [ %t247, %block_0_418cd0 ]
  %t379 = phi i512 [ %t248, %block_0_418cd0 ]
  %t380 = phi i512 [ %t249, %block_0_418cd0 ]
  %t381 = phi i512 [ %t250, %block_0_418cd0 ]
  %t382 = phi i512 [ %t251, %block_0_418cd0 ]
  ; r375 := (bitcast r367 (vec 8 double))
  %t383 = bitcast i512 %t375 to <8 x double>
  ; r376 := (bitcast r368 (vec 8 double))
  %t384 = bitcast i512 %t376 to <8 x double>
  ; r377 := (bitcast r369 (vec 8 double))
  %t385 = bitcast i512 %t377 to <8 x double>
  ; r378 := (bitcast r370 (vec 8 double))
  %t386 = bitcast i512 %t378 to <8 x double>
  ; r379 := (bitcast r371 (vec 8 double))
  %t387 = bitcast i512 %t379 to <8 x double>
  ; r380 := (bitcast r372 (vec 8 double))
  %t388 = bitcast i512 %t380 to <8 x double>
  ; r381 := (bitcast r373 (vec 8 double))
  %t389 = bitcast i512 %t381 to <8 x double>
  ; r382 := (bitcast r374 (vec 8 double))
  %t390 = bitcast i512 %t382 to <8 x double>
  ; r383 := call pthread_mutex_lock_int((0x640d08 : bv 64), r362, r360, r359, r363, r364, r375, r376, r377, r378, r379, r380, r381, r382)
  %t391 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6556936, i64 %t370, i64 %t368, i64 %t367, i64 %t371, i64 %t372, <8 x double> %t383, <8 x double> %t384, <8 x double> %t385, <8 x double> %t386, <8 x double> %t387, <8 x double> %t388, <8 x double> %t389, <8 x double> %t390)
  ; r384 := (tuple_field r383 0)
  %t392 = extractvalue { i64, i64, <8 x double> } %t391, 0
  ; r385 := (tuple_field r383 1)
  %t393 = extractvalue { i64, i64, <8 x double> } %t391, 1
  ; r386 := (tuple_field r383 2)
  %t394 = extractvalue { i64, i64, <8 x double> } %t391, 2
  ; r387 := (bitcast r386 (bv 512))
  %t395 = bitcast <8 x double> %t394 to i512
  br label %block_0_418d15
block_0_418d15:
  %t396 = phi i64 [ %t367, %block_0_418d0b ]
  %t397 = phi i64 [ %t393, %block_0_418d0b ]
  %t398 = phi i64 [ %t369, %block_0_418d0b ]
  %t399 = phi i64 [ %t370, %block_0_418d0b ]
  %t400 = phi i64 [ %t371, %block_0_418d0b ]
  %t401 = phi i64 [ %t372, %block_0_418d0b ]
  %t402 = phi i64 [ %t373, %block_0_418d0b ]
  %t403 = phi i64 [ %t374, %block_0_418d0b ]
  %t404 = phi i512 [ %t395, %block_0_418d0b ]
  %t405 = phi i512 [ %t376, %block_0_418d0b ]
  %t406 = phi i512 [ %t377, %block_0_418d0b ]
  %t407 = phi i512 [ %t378, %block_0_418d0b ]
  %t408 = phi i512 [ %t379, %block_0_418d0b ]
  %t409 = phi i512 [ %t380, %block_0_418d0b ]
  %t410 = phi i512 [ %t381, %block_0_418d0b ]
  %t411 = phi i512 [ %t382, %block_0_418d0b ]
  ; r404 := (read r390 (bv 64))
  %t412 = inttoptr i64 %t398 to i64*
  %t413 = load i64, i64* %t412
  ; r405 := (eq r404 (0x0 : bv 64))
  %t414 = icmp eq i64 %t413, 0
  br i1 %t414, label %block_0_418d1e, label %block_0_418cf3
block_0_418d1e:
  %t415 = phi i64 [ %t396, %block_0_418d15 ]
  %t416 = phi i64 [ %t397, %block_0_418d15 ]
  %t417 = phi i64 [ %t398, %block_0_418d15 ]
  %t418 = phi i64 [ %t399, %block_0_418d15 ]
  %t419 = phi i64 [ %t400, %block_0_418d15 ]
  %t420 = phi i64 [ %t401, %block_0_418d15 ]
  %t421 = phi i64 [ %t402, %block_0_418d15 ]
  %t422 = phi i64 [ %t403, %block_0_418d15 ]
  %t423 = phi i512 [ %t404, %block_0_418d15 ]
  %t424 = phi i512 [ %t405, %block_0_418d15 ]
  %t425 = phi i512 [ %t406, %block_0_418d15 ]
  %t426 = phi i512 [ %t407, %block_0_418d15 ]
  %t427 = phi i512 [ %t408, %block_0_418d15 ]
  %t428 = phi i512 [ %t409, %block_0_418d15 ]
  %t429 = phi i512 [ %t410, %block_0_418d15 ]
  %t430 = phi i512 [ %t411, %block_0_418d15 ]
  br label %block_0_418cda
block_0_418d20:
  %t431 = phi i64 [ %t4, %block_0_418c50 ]
  %t432 = phi i64 [ %arg3, %block_0_418c50 ]
  %t433 = phi i64 [ %t1, %block_0_418c50 ]
  %t434 = phi i64 [ %arg1, %block_0_418c50 ]
  %t435 = phi i64 [ %arg0, %block_0_418c50 ]
  %t436 = phi i64 [ %arg4, %block_0_418c50 ]
  %t437 = phi i64 [ %arg5, %block_0_418c50 ]
  %t438 = phi i512 [ %t13, %block_0_418c50 ]
  %t439 = phi i512 [ %t14, %block_0_418c50 ]
  %t440 = phi i512 [ %t15, %block_0_418c50 ]
  %t441 = phi i512 [ %t16, %block_0_418c50 ]
  %t442 = phi i512 [ %t17, %block_0_418c50 ]
  %t443 = phi i512 [ %t18, %block_0_418c50 ]
  %t444 = phi i512 [ %t19, %block_0_418c50 ]
  %t445 = phi i512 [ %t20, %block_0_418c50 ]
  ; r437 := (trunc r422 32)
  %t446 = trunc i64 %t431 to i32
  ; r438 := (sext r437 64)
  %t447 = sext i32 %t446 to i64
  ; r439 := (bv_mul (0x4 : bv 64) r438)
  %t448 = mul i64 4, %t447
  ; r440 := (bv_add r439 (0x428fb4 : bv 64))
  %t449 = add i64 %t448, 4362164
  ; r441 := (read r440 (bv 32))
  %t450 = inttoptr i64 %t449 to i32*
  %t451 = load i32, i32* %t450
  ; r442 := (uext r441 64)
  %t452 = zext i32 %t451 to i64
  ; r443 := (bitcast r429 (vec 8 double))
  %t453 = bitcast i512 %t438 to <8 x double>
  ; r444 := (bitcast r430 (vec 8 double))
  %t454 = bitcast i512 %t439 to <8 x double>
  ; r445 := (bitcast r431 (vec 8 double))
  %t455 = bitcast i512 %t440 to <8 x double>
  ; r446 := (bitcast r432 (vec 8 double))
  %t456 = bitcast i512 %t441 to <8 x double>
  ; r447 := (bitcast r433 (vec 8 double))
  %t457 = bitcast i512 %t442 to <8 x double>
  ; r448 := (bitcast r434 (vec 8 double))
  %t458 = bitcast i512 %t443 to <8 x double>
  ; r449 := (bitcast r435 (vec 8 double))
  %t459 = bitcast i512 %t444 to <8 x double>
  ; r450 := (bitcast r436 (vec 8 double))
  %t460 = bitcast i512 %t445 to <8 x double>
  ; r451 := call __multadd_D2A(r426, r442, (0x0 : bv 64), r423, r427, r428, r443, r444, r445, r446, r447, r448, r449, r450)
  %t461 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__multadd_D2A(i64 %t435, i64 %t452, i64 0, i64 %t432, i64 %t436, i64 %t437, <8 x double> %t453, <8 x double> %t454, <8 x double> %t455, <8 x double> %t456, <8 x double> %t457, <8 x double> %t458, <8 x double> %t459, <8 x double> %t460)
  ; r452 := (tuple_field r451 0)
  %t462 = extractvalue { i64, i64, <8 x double> } %t461, 0
  ; r453 := (tuple_field r451 1)
  %t463 = extractvalue { i64, i64, <8 x double> } %t461, 1
  ; r454 := (tuple_field r451 2)
  %t464 = extractvalue { i64, i64, <8 x double> } %t461, 2
  ; r455 := (bitcast r454 (bv 512))
  %t465 = bitcast <8 x double> %t464 to i512
  br label %block_0_418d30
block_0_418d30:
  %t466 = phi i64 [ %t462, %block_0_418d20 ]
  %t467 = phi i64 [ %t432, %block_0_418d20 ]
  %t468 = phi i64 [ %t463, %block_0_418d20 ]
  %t469 = phi i64 [ %t433, %block_0_418d20 ]
  %t470 = phi i64 [ %t434, %block_0_418d20 ]
  %t471 = phi i64 [ %t436, %block_0_418d20 ]
  %t472 = phi i64 [ %t437, %block_0_418d20 ]
  %t473 = phi i512 [ %t465, %block_0_418d20 ]
  %t474 = phi i512 [ %t439, %block_0_418d20 ]
  %t475 = phi i512 [ %t440, %block_0_418d20 ]
  %t476 = phi i512 [ %t441, %block_0_418d20 ]
  %t477 = phi i512 [ %t442, %block_0_418d20 ]
  %t478 = phi i512 [ %t443, %block_0_418d20 ]
  %t479 = phi i512 [ %t444, %block_0_418d20 ]
  %t480 = phi i512 [ %t445, %block_0_418d20 ]
  br label %block_0_418c6a
block_0_418d38:
  %t481 = phi i64 [ %t58, %block_0_418c82 ]
  %t482 = phi i64 [ %t59, %block_0_418c82 ]
  %t483 = phi i64 [ %t60, %block_0_418c82 ]
  %t484 = phi i64 [ %t61, %block_0_418c82 ]
  %t485 = phi i64 [ %t62, %block_0_418c82 ]
  %t486 = phi i64 [ %t63, %block_0_418c82 ]
  %t487 = phi i64 [ %t64, %block_0_418c82 ]
  %t488 = phi i512 [ %t65, %block_0_418c82 ]
  %t489 = phi i512 [ %t66, %block_0_418c82 ]
  %t490 = phi i512 [ %t67, %block_0_418c82 ]
  %t491 = phi i512 [ %t68, %block_0_418c82 ]
  %t492 = phi i512 [ %t69, %block_0_418c82 ]
  %t493 = phi i512 [ %t70, %block_0_418c82 ]
  %t494 = phi i512 [ %t71, %block_0_418c82 ]
  %t495 = phi i512 [ %t72, %block_0_418c82 ]
  ; r486 := (read (0x6356e8 : bv 64) (bv 32))
  %t496 = inttoptr i64 6510312 to i32*
  %t497 = load i32, i32* %t496
  ; r487 := (eq r486 (0x0 : bv 32))
  %t498 = icmp eq i32 %t497, 0
  br i1 %t498, label %block_0_418d42, label %block_0_418d7a
block_0_418d42:
  %t499 = phi i64 [ %t481, %block_0_418d38 ], [ %t655, %block_0_418d90 ]
  %t500 = phi i64 [ %t482, %block_0_418d38 ], [ %t656, %block_0_418d90 ]
  %t501 = phi i64 [ %t483, %block_0_418d38 ], [ %t657, %block_0_418d90 ]
  %t502 = phi i64 [ %t484, %block_0_418d38 ], [ %t658, %block_0_418d90 ]
  %t503 = phi i64 [ %t485, %block_0_418d38 ], [ %t659, %block_0_418d90 ]
  %t504 = phi i64 [ %t486, %block_0_418d38 ], [ %t660, %block_0_418d90 ]
  %t505 = phi i64 [ %t487, %block_0_418d38 ], [ %t661, %block_0_418d90 ]
  %t506 = phi i512 [ %t488, %block_0_418d38 ], [ %t662, %block_0_418d90 ]
  %t507 = phi i512 [ %t489, %block_0_418d38 ], [ %t663, %block_0_418d90 ]
  %t508 = phi i512 [ %t490, %block_0_418d38 ], [ %t664, %block_0_418d90 ]
  %t509 = phi i512 [ %t491, %block_0_418d38 ], [ %t665, %block_0_418d90 ]
  %t510 = phi i512 [ %t492, %block_0_418d38 ], [ %t666, %block_0_418d90 ]
  %t511 = phi i512 [ %t493, %block_0_418d38 ], [ %t667, %block_0_418d90 ]
  %t512 = phi i512 [ %t494, %block_0_418d38 ], [ %t668, %block_0_418d90 ]
  %t513 = phi i512 [ %t495, %block_0_418d38 ], [ %t669, %block_0_418d90 ]
  ; r503 := (bitcast r495 (vec 8 double))
  %t514 = bitcast i512 %t506 to <8 x double>
  ; r504 := (bitcast r496 (vec 8 double))
  %t515 = bitcast i512 %t507 to <8 x double>
  ; r505 := (bitcast r497 (vec 8 double))
  %t516 = bitcast i512 %t508 to <8 x double>
  ; r506 := (bitcast r498 (vec 8 double))
  %t517 = bitcast i512 %t509 to <8 x double>
  ; r507 := (bitcast r499 (vec 8 double))
  %t518 = bitcast i512 %t510 to <8 x double>
  ; r508 := (bitcast r500 (vec 8 double))
  %t519 = bitcast i512 %t511 to <8 x double>
  ; r509 := (bitcast r501 (vec 8 double))
  %t520 = bitcast i512 %t512 to <8 x double>
  ; r510 := (bitcast r502 (vec 8 double))
  %t521 = bitcast i512 %t513 to <8 x double>
  ; r511 := call __i2b_D2A((0x271 : bv 64), r490, r489, r488, r491, r492, r503, r504, r505, r506, r507, r508, r509, r510)
  %t522 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__i2b_D2A(i64 625, i64 %t501, i64 %t500, i64 %t499, i64 %t502, i64 %t503, <8 x double> %t514, <8 x double> %t515, <8 x double> %t516, <8 x double> %t517, <8 x double> %t518, <8 x double> %t519, <8 x double> %t520, <8 x double> %t521)
  ; r512 := (tuple_field r511 0)
  %t523 = extractvalue { i64, i64, <8 x double> } %t522, 0
  ; r513 := (tuple_field r511 1)
  %t524 = extractvalue { i64, i64, <8 x double> } %t522, 1
  ; r514 := (tuple_field r511 2)
  %t525 = extractvalue { i64, i64, <8 x double> } %t522, 2
  ; r515 := (bitcast r514 (bv 512))
  %t526 = bitcast <8 x double> %t525 to i512
  br label %block_0_418d4c
block_0_418d4c:
  %t527 = phi i64 [ %t523, %block_0_418d42 ]
  %t528 = phi i64 [ %t499, %block_0_418d42 ]
  %t529 = phi i64 [ %t524, %block_0_418d42 ]
  %t530 = phi i64 [ %t501, %block_0_418d42 ]
  %t531 = phi i64 [ %t502, %block_0_418d42 ]
  %t532 = phi i64 [ %t503, %block_0_418d42 ]
  %t533 = phi i64 [ %t504, %block_0_418d42 ]
  %t534 = phi i64 [ %t505, %block_0_418d42 ]
  %t535 = phi i512 [ %t526, %block_0_418d42 ]
  %t536 = phi i512 [ %t507, %block_0_418d42 ]
  %t537 = phi i512 [ %t508, %block_0_418d42 ]
  %t538 = phi i512 [ %t509, %block_0_418d42 ]
  %t539 = phi i512 [ %t510, %block_0_418d42 ]
  %t540 = phi i512 [ %t511, %block_0_418d42 ]
  %t541 = phi i512 [ %t512, %block_0_418d42 ]
  %t542 = phi i512 [ %t513, %block_0_418d42 ]
  ; write (0x63f840 : bv 64) r516
  %t543 = inttoptr i64 6551616 to i64*
  store i64 %t527, i64* %t543
  ; write r516 (0x0 : bv 64)
  %t544 = inttoptr i64 %t527 to i64*
  store i64 0, i64* %t544
  br label %block_0_418d5d
block_0_418d5d:
  %t545 = phi i64 [ %t528, %block_0_418d4c ], [ %t637, %block_0_418d84 ]
  %t546 = phi i64 [ %t529, %block_0_418d4c ], [ %t638, %block_0_418d84 ]
  %t547 = phi i64 [ %t527, %block_0_418d4c ], [ %t653, %block_0_418d84 ]
  %t548 = phi i64 [ %t530, %block_0_418d4c ], [ %t639, %block_0_418d84 ]
  %t549 = phi i64 [ %t531, %block_0_418d4c ], [ %t640, %block_0_418d84 ]
  %t550 = phi i64 [ %t532, %block_0_418d4c ], [ %t641, %block_0_418d84 ]
  %t551 = phi i64 [ %t533, %block_0_418d4c ], [ %t642, %block_0_418d84 ]
  %t552 = phi i64 [ %t534, %block_0_418d4c ], [ %t643, %block_0_418d84 ]
  %t553 = phi i512 [ %t535, %block_0_418d4c ], [ %t644, %block_0_418d84 ]
  %t554 = phi i512 [ %t536, %block_0_418d4c ], [ %t645, %block_0_418d84 ]
  %t555 = phi i512 [ %t537, %block_0_418d4c ], [ %t646, %block_0_418d84 ]
  %t556 = phi i512 [ %t538, %block_0_418d4c ], [ %t647, %block_0_418d84 ]
  %t557 = phi i512 [ %t539, %block_0_418d4c ], [ %t648, %block_0_418d84 ]
  %t558 = phi i512 [ %t540, %block_0_418d4c ], [ %t649, %block_0_418d84 ]
  %t559 = phi i512 [ %t541, %block_0_418d4c ], [ %t650, %block_0_418d84 ]
  %t560 = phi i512 [ %t542, %block_0_418d4c ], [ %t651, %block_0_418d84 ]
  ; r548 := (read (0x6356e8 : bv 64) (bv 32))
  %t561 = inttoptr i64 6510312 to i32*
  %t562 = load i32, i32* %t561
  ; r549 := (eq r548 (0x0 : bv 32))
  %t563 = icmp eq i32 %t562, 0
  br i1 %t563, label %block_0_418c98, label %block_0_418d6b
block_0_418d6b:
  %t564 = phi i64 [ %t545, %block_0_418d5d ]
  %t565 = phi i64 [ %t546, %block_0_418d5d ]
  %t566 = phi i64 [ %t547, %block_0_418d5d ]
  %t567 = phi i64 [ %t548, %block_0_418d5d ]
  %t568 = phi i64 [ %t549, %block_0_418d5d ]
  %t569 = phi i64 [ %t550, %block_0_418d5d ]
  %t570 = phi i64 [ %t551, %block_0_418d5d ]
  %t571 = phi i64 [ %t552, %block_0_418d5d ]
  %t572 = phi i512 [ %t553, %block_0_418d5d ]
  %t573 = phi i512 [ %t554, %block_0_418d5d ]
  %t574 = phi i512 [ %t555, %block_0_418d5d ]
  %t575 = phi i512 [ %t556, %block_0_418d5d ]
  %t576 = phi i512 [ %t557, %block_0_418d5d ]
  %t577 = phi i512 [ %t558, %block_0_418d5d ]
  %t578 = phi i512 [ %t559, %block_0_418d5d ]
  %t579 = phi i512 [ %t560, %block_0_418d5d ]
  ; r566 := (bitcast r558 (vec 8 double))
  %t580 = bitcast i512 %t572 to <8 x double>
  ; r567 := (bitcast r559 (vec 8 double))
  %t581 = bitcast i512 %t573 to <8 x double>
  ; r568 := (bitcast r560 (vec 8 double))
  %t582 = bitcast i512 %t574 to <8 x double>
  ; r569 := (bitcast r561 (vec 8 double))
  %t583 = bitcast i512 %t575 to <8 x double>
  ; r570 := (bitcast r562 (vec 8 double))
  %t584 = bitcast i512 %t576 to <8 x double>
  ; r571 := (bitcast r563 (vec 8 double))
  %t585 = bitcast i512 %t577 to <8 x double>
  ; r572 := (bitcast r564 (vec 8 double))
  %t586 = bitcast i512 %t578 to <8 x double>
  ; r573 := (bitcast r565 (vec 8 double))
  %t587 = bitcast i512 %t579 to <8 x double>
  ; r574 := call pthread_mutex_unlock_int((0x640d08 : bv 64), r553, r551, r550, r554, r555, r566, r567, r568, r569, r570, r571, r572, r573)
  %t588 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 6556936, i64 %t567, i64 %t565, i64 %t564, i64 %t568, i64 %t569, <8 x double> %t580, <8 x double> %t581, <8 x double> %t582, <8 x double> %t583, <8 x double> %t584, <8 x double> %t585, <8 x double> %t586, <8 x double> %t587)
  ; r575 := (tuple_field r574 0)
  %t589 = extractvalue { i64, i64, <8 x double> } %t588, 0
  ; r576 := (tuple_field r574 1)
  %t590 = extractvalue { i64, i64, <8 x double> } %t588, 1
  ; r577 := (tuple_field r574 2)
  %t591 = extractvalue { i64, i64, <8 x double> } %t588, 2
  ; r578 := (bitcast r577 (bv 512))
  %t592 = bitcast <8 x double> %t591 to i512
  br label %block_0_418d75
block_0_418d75:
  %t593 = phi i64 [ %t564, %block_0_418d6b ]
  %t594 = phi i64 [ %t590, %block_0_418d6b ]
  %t595 = phi i64 [ %t566, %block_0_418d6b ]
  %t596 = phi i64 [ %t567, %block_0_418d6b ]
  %t597 = phi i64 [ %t568, %block_0_418d6b ]
  %t598 = phi i64 [ %t569, %block_0_418d6b ]
  %t599 = phi i64 [ %t570, %block_0_418d6b ]
  %t600 = phi i64 [ %t571, %block_0_418d6b ]
  %t601 = phi i512 [ %t592, %block_0_418d6b ]
  %t602 = phi i512 [ %t573, %block_0_418d6b ]
  %t603 = phi i512 [ %t574, %block_0_418d6b ]
  %t604 = phi i512 [ %t575, %block_0_418d6b ]
  %t605 = phi i512 [ %t576, %block_0_418d6b ]
  %t606 = phi i512 [ %t577, %block_0_418d6b ]
  %t607 = phi i512 [ %t578, %block_0_418d6b ]
  %t608 = phi i512 [ %t579, %block_0_418d6b ]
  br label %block_0_418c98
block_0_418d7a:
  %t609 = phi i64 [ %t481, %block_0_418d38 ]
  %t610 = phi i64 [ %t482, %block_0_418d38 ]
  %t611 = phi i64 [ %t483, %block_0_418d38 ]
  %t612 = phi i64 [ %t484, %block_0_418d38 ]
  %t613 = phi i64 [ %t485, %block_0_418d38 ]
  %t614 = phi i64 [ %t486, %block_0_418d38 ]
  %t615 = phi i64 [ %t487, %block_0_418d38 ]
  %t616 = phi i512 [ %t488, %block_0_418d38 ]
  %t617 = phi i512 [ %t489, %block_0_418d38 ]
  %t618 = phi i512 [ %t490, %block_0_418d38 ]
  %t619 = phi i512 [ %t491, %block_0_418d38 ]
  %t620 = phi i512 [ %t492, %block_0_418d38 ]
  %t621 = phi i512 [ %t493, %block_0_418d38 ]
  %t622 = phi i512 [ %t494, %block_0_418d38 ]
  %t623 = phi i512 [ %t495, %block_0_418d38 ]
  ; r610 := (bitcast r602 (vec 8 double))
  %t624 = bitcast i512 %t616 to <8 x double>
  ; r611 := (bitcast r603 (vec 8 double))
  %t625 = bitcast i512 %t617 to <8 x double>
  ; r612 := (bitcast r604 (vec 8 double))
  %t626 = bitcast i512 %t618 to <8 x double>
  ; r613 := (bitcast r605 (vec 8 double))
  %t627 = bitcast i512 %t619 to <8 x double>
  ; r614 := (bitcast r606 (vec 8 double))
  %t628 = bitcast i512 %t620 to <8 x double>
  ; r615 := (bitcast r607 (vec 8 double))
  %t629 = bitcast i512 %t621 to <8 x double>
  ; r616 := (bitcast r608 (vec 8 double))
  %t630 = bitcast i512 %t622 to <8 x double>
  ; r617 := (bitcast r609 (vec 8 double))
  %t631 = bitcast i512 %t623 to <8 x double>
  ; r618 := call pthread_mutex_lock_int((0x640d08 : bv 64), r597, r596, r595, r598, r599, r610, r611, r612, r613, r614, r615, r616, r617)
  %t632 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 6556936, i64 %t611, i64 %t610, i64 %t609, i64 %t612, i64 %t613, <8 x double> %t624, <8 x double> %t625, <8 x double> %t626, <8 x double> %t627, <8 x double> %t628, <8 x double> %t629, <8 x double> %t630, <8 x double> %t631)
  ; r619 := (tuple_field r618 0)
  %t633 = extractvalue { i64, i64, <8 x double> } %t632, 0
  ; r620 := (tuple_field r618 1)
  %t634 = extractvalue { i64, i64, <8 x double> } %t632, 1
  ; r621 := (tuple_field r618 2)
  %t635 = extractvalue { i64, i64, <8 x double> } %t632, 2
  ; r622 := (bitcast r621 (bv 512))
  %t636 = bitcast <8 x double> %t635 to i512
  br label %block_0_418d84
block_0_418d84:
  %t637 = phi i64 [ %t609, %block_0_418d7a ]
  %t638 = phi i64 [ %t634, %block_0_418d7a ]
  %t639 = phi i64 [ %t611, %block_0_418d7a ]
  %t640 = phi i64 [ %t612, %block_0_418d7a ]
  %t641 = phi i64 [ %t613, %block_0_418d7a ]
  %t642 = phi i64 [ %t614, %block_0_418d7a ]
  %t643 = phi i64 [ %t615, %block_0_418d7a ]
  %t644 = phi i512 [ %t636, %block_0_418d7a ]
  %t645 = phi i512 [ %t617, %block_0_418d7a ]
  %t646 = phi i512 [ %t618, %block_0_418d7a ]
  %t647 = phi i512 [ %t619, %block_0_418d7a ]
  %t648 = phi i512 [ %t620, %block_0_418d7a ]
  %t649 = phi i512 [ %t621, %block_0_418d7a ]
  %t650 = phi i512 [ %t622, %block_0_418d7a ]
  %t651 = phi i512 [ %t623, %block_0_418d7a ]
  ; r638 := (read (0x63f840 : bv 64) (bv 64))
  %t652 = inttoptr i64 6551616 to i64*
  %t653 = load i64, i64* %t652
  ; r639 := (eq r638 (0x0 : bv 64))
  %t654 = icmp eq i64 %t653, 0
  br i1 %t654, label %block_0_418d90, label %block_0_418d5d
block_0_418d90:
  %t655 = phi i64 [ %t637, %block_0_418d84 ]
  %t656 = phi i64 [ %t638, %block_0_418d84 ]
  %t657 = phi i64 [ %t639, %block_0_418d84 ]
  %t658 = phi i64 [ %t640, %block_0_418d84 ]
  %t659 = phi i64 [ %t641, %block_0_418d84 ]
  %t660 = phi i64 [ %t642, %block_0_418d84 ]
  %t661 = phi i64 [ %t643, %block_0_418d84 ]
  %t662 = phi i512 [ %t644, %block_0_418d84 ]
  %t663 = phi i512 [ %t645, %block_0_418d84 ]
  %t664 = phi i512 [ %t646, %block_0_418d84 ]
  %t665 = phi i512 [ %t647, %block_0_418d84 ]
  %t666 = phi i512 [ %t648, %block_0_418d84 ]
  %t667 = phi i512 [ %t649, %block_0_418d84 ]
  %t668 = phi i512 [ %t650, %block_0_418d84 ]
  %t669 = phi i512 [ %t651, %block_0_418d84 ]
  br label %block_0_418d42
}
define <8 x double> @sigemptyset(i64 %arg0, <8 x double> %arg1) {
block_0_4192a0:
  ; write arg0 (0x0 : bv 32)
  %t0 = inttoptr i64 %arg0 to i32*
  store i32 0, i32* %t0
  ; r0 := (bv_add arg0 (0x4 : bv 64))
  %t1 = add i64 %arg0, 4
  ; write r0 (0x0 : bv 32)
  %t2 = inttoptr i64 %t1 to i32*
  store i32 0, i32* %t2
  ; r1 := (bv_add arg0 (0x8 : bv 64))
  %t3 = add i64 %arg0, 8
  ; write r1 (0x0 : bv 32)
  %t4 = inttoptr i64 %t3 to i32*
  store i32 0, i32* %t4
  ; r2 := (bv_add arg0 (0xc : bv 64))
  %t5 = add i64 %arg0, 12
  ; write r2 (0x0 : bv 32)
  %t6 = inttoptr i64 %t5 to i32*
  store i32 0, i32* %t6
  ; r3 := (bitcast arg1 (bv 512))
  %t7 = bitcast <8 x double> %arg1 to i512
  ; r4 := (bitcast r3 (vec 8 double))
  %t8 = bitcast i512 %t7 to <8 x double>
  ret <8 x double> %t8
}
define { i64, i64, <8 x double> } @sigfillset(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_4192c0:
  ; write arg0 (0xffffffff : bv 32)
  %t0 = inttoptr i64 %arg0 to i32*
  store i32 4294967295, i32* %t0
  ; r0 := (bv_add arg0 (0x4 : bv 64))
  %t1 = add i64 %arg0, 4
  ; write r0 (0xffffffff : bv 32)
  %t2 = inttoptr i64 %t1 to i32*
  store i32 4294967295, i32* %t2
  ; r1 := (bv_add arg0 (0x8 : bv 64))
  %t3 = add i64 %arg0, 8
  ; write r1 (0xffffffff : bv 32)
  %t4 = inttoptr i64 %t3 to i32*
  store i32 4294967295, i32* %t4
  ; r2 := (bv_add arg0 (0xc : bv 64))
  %t5 = add i64 %arg0, 12
  ; write r2 (0xffffffff : bv 32)
  %t6 = inttoptr i64 %t5 to i32*
  store i32 4294967295, i32* %t6
  ; r3 := (bitcast arg3 (bv 512))
  %t7 = bitcast <8 x double> %arg3 to i512
  ; r4 := (bitcast r3 (vec 8 double))
  %t8 = bitcast i512 %t7 to <8 x double>
  ; r5 := (tuple (0x0 : bv 64) arg2 r4)
  %t9 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t10 = insertvalue { i64, i64, <8 x double> } %t9, i64 %arg2, 1
  %t11 = insertvalue { i64, i64, <8 x double> } %t10, <8 x double> %t8, 2
  ret { i64, i64, <8 x double> } %t11
}
define i64 @sigismember(i64 %arg0, i64 %arg1, <8 x double> %arg2) {
block_0_4192e0:
  ; r0 := (bv_add arg1 (0xffffffffffffffff : bv 64))
  %t0 = add i64 %arg1, 18446744073709551615
  ; r1 := (trunc r0 32)
  %t1 = trunc i64 %t0 to i32
  ; r2 := (uext r1 64)
  %t2 = zext i32 %t1 to i64
  ; r3 := (eq r1 (0x7f : bv 32))
  %t3 = icmp eq i32 %t1, 127
  ; r4 := (bv_ule (0x7f : bv 32) r1)
  %t4 = icmp ule i32 127, %t1
  ; r5 := (not r3)
  %t5 = icmp eq i1 %t3, 0
  ; r6 := (and r4 r5)
  %t6 = and i1 %t4, %t5
  ; r7 := (bitcast arg2 (bv 512))
  %t7 = bitcast <8 x double> %arg2 to i512
  br i1 %t6, label %block_0_41930c, label %block_0_4192ec
block_0_4192ec:
  %t8 = phi i64 [ %t2, %block_0_4192e0 ]
  %t9 = phi i64 [ %arg0, %block_0_4192e0 ]
  ; r10 := (trunc r8 32)
  %t10 = trunc i64 %t8 to i32
  ; r11 := (bv_sar r10 (0x5 : bv 32))
  %t11 = ashr i32 %t10, 5
  ; r12 := (trunc r8 8)
  %t12 = trunc i64 %t8 to i8
  ; r13 := (bv_and r12 (0x1f : bv 8))
  %t13 = and i8 %t12, 31
  ; r14 := (sext r11 64)
  %t14 = sext i32 %t11 to i64
  ; r15 := (eq r13 (0x0 : bv 8))
  %t15 = icmp eq i8 %t13, 0
  ; r16 := (uext r13 32)
  %t16 = zext i8 %t13 to i32
  ; r17 := (bv_shl (0x1 : bv 32) r16)
  %t17 = shl i32 1, %t16
  ; r18 := (mux r15 (0x1 : bv 32) r17)
  %t18 = select i1 %t15, i32 1, i32 %t17
  ; r19 := (bv_mul (0x4 : bv 64) r14)
  %t19 = mul i64 4, %t14
  ; r20 := (bv_add r9 r19)
  %t20 = add i64 %t9, %t19
  ; r21 := (read r20 (bv 32))
  %t21 = inttoptr i64 %t20 to i32*
  %t22 = load i32, i32* %t21
  ; r22 := (bv_and r21 r18)
  %t23 = and i32 %t22, %t18
  ; r23 := (eq r22 (0x0 : bv 32))
  %t24 = icmp eq i32 %t23, 0
  ; r24 := (mux r23 (0x0 : bv 8) (0x1 : bv 8))
  %t25 = select i1 %t24, i8 0, i8 1
  ; r25 := (uext r24 64)
  %t26 = zext i8 %t25 to i64
  br label %block_0_419307
block_0_419307:
  %t27 = phi i64 [ %t26, %block_0_4192ec ], [ 4294967295, %block_0_419311 ]
  ret i64 %t27
block_0_41930c:
  %t28 = phi i64 [ %t2, %block_0_4192e0 ]
  %t29 = phi i64 [ %arg1, %block_0_4192e0 ]
  %t30 = phi i64 [ %arg0, %block_0_4192e0 ]
  %t31 = phi i512 [ %t7, %block_0_4192e0 ]
  ; r31 := (bitcast r30 (vec 8 double))
  %t32 = bitcast i512 %t31 to <8 x double>
  ; r32 := call __error_unthreaded(r29, r28, r27, r31)
  %t33 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t30, i64 %t29, i64 %t28, <8 x double> %t32)
  ; r33 := (tuple_field r32 0)
  %t34 = extractvalue { i64, i64, <8 x double> } %t33, 0
  ; r34 := (tuple_field r32 1)
  %t35 = extractvalue { i64, i64, <8 x double> } %t33, 1
  ; r35 := (tuple_field r32 2)
  %t36 = extractvalue { i64, i64, <8 x double> } %t33, 2
  ; r36 := (bitcast r35 (bv 512))
  %t37 = bitcast <8 x double> %t36 to i512
  br label %block_0_419311
block_0_419311:
  %t38 = phi i64 [ %t34, %block_0_41930c ]
  ; write r37 (0x16 : bv 32)
  %t39 = inttoptr i64 %t38 to i32*
  store i32 22, i32* %t39
  br label %block_0_419307
}
define void @sigdelset(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_419320:
  ; r0 := (bv_add arg1 (0xffffffffffffffff : bv 64))
  %t0 = add i64 %arg1, 18446744073709551615
  ; r1 := (trunc r0 32)
  %t1 = trunc i64 %t0 to i32
  ; r2 := (uext r1 64)
  %t2 = zext i32 %t1 to i64
  ; r3 := (eq r1 (0x7f : bv 32))
  %t3 = icmp eq i32 %t1, 127
  ; r4 := (bv_ule (0x7f : bv 32) r1)
  %t4 = icmp ule i32 127, %t1
  ; r5 := (not r3)
  %t5 = icmp eq i1 %t3, 0
  ; r6 := (and r4 r5)
  %t6 = and i1 %t4, %t5
  ; r7 := (bitcast arg3 (bv 512))
  %t7 = bitcast <8 x double> %arg3 to i512
  br i1 %t6, label %block_0_419348, label %block_0_41932c
block_0_41932c:
  %t8 = phi i64 [ %t2, %block_0_419320 ]
  %t9 = phi i64 [ %arg0, %block_0_419320 ]
  ; r10 := (trunc r8 32)
  %t10 = trunc i64 %t8 to i32
  ; r11 := (trunc r8 8)
  %t11 = trunc i64 %t8 to i8
  ; r12 := (bv_and r11 (0x1f : bv 8))
  %t12 = and i8 %t11, 31
  ; r13 := (bv_sar r10 (0x5 : bv 32))
  %t13 = ashr i32 %t10, 5
  ; r14 := (uext r12 32)
  %t14 = zext i8 %t12 to i32
  ; r15 := (bv_and r14 (0x1f : bv 32))
  %t15 = and i32 %t14, 31
  ; r16 := (bv_shl (0xfffffffe : bv 32) r15)
  %t16 = shl i32 4294967294, %t15
  ; r17 := (bv_sub (0x20 : bv 32) r15)
  %t17 = sub i32 32, %t15
  ; r18 := (bv_shr (0xfffffffe : bv 32) r17)
  %t18 = lshr i32 4294967294, %t17
  ; r19 := (bv_or r16 r18)
  %t19 = or i32 %t16, %t18
  ; r20 := (sext r13 64)
  %t20 = sext i32 %t13 to i64
  ; r21 := (bv_mul (0x4 : bv 64) r20)
  %t21 = mul i64 4, %t20
  ; r22 := (bv_add r9 r21)
  %t22 = add i64 %t9, %t21
  ; r23 := (read r22 (bv 32))
  %t23 = inttoptr i64 %t22 to i32*
  %t24 = load i32, i32* %t23
  ; r24 := (bv_and r23 r19)
  %t25 = and i32 %t24, %t19
  ; write r22 r24
  %t26 = inttoptr i64 %t22 to i32*
  store i32 %t25, i32* %t26
  br label %block_0_419343
block_0_419343:
  ret void
block_0_419348:
  %t27 = phi i64 [ %arg2, %block_0_419320 ]
  %t28 = phi i64 [ %arg1, %block_0_419320 ]
  %t29 = phi i64 [ %arg0, %block_0_419320 ]
  %t30 = phi i512 [ %t7, %block_0_419320 ]
  ; r29 := (bitcast r28 (vec 8 double))
  %t31 = bitcast i512 %t30 to <8 x double>
  ; r30 := call __error_unthreaded(r27, r26, r25, r29)
  %t32 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t29, i64 %t28, i64 %t27, <8 x double> %t31)
  ; r31 := (tuple_field r30 0)
  %t33 = extractvalue { i64, i64, <8 x double> } %t32, 0
  ; r32 := (tuple_field r30 1)
  %t34 = extractvalue { i64, i64, <8 x double> } %t32, 1
  ; r33 := (tuple_field r30 2)
  %t35 = extractvalue { i64, i64, <8 x double> } %t32, 2
  ; r34 := (bitcast r33 (bv 512))
  %t36 = bitcast <8 x double> %t35 to i512
  br label %block_0_41934d
block_0_41934d:
  %t37 = phi i64 [ %t33, %block_0_419348 ]
  ; write r35 (0x16 : bv 32)
  %t38 = inttoptr i64 %t37 to i32*
  store i32 22, i32* %t38
  br label %block_0_419343
}
define void @sigaddset(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_419360:
  ; r0 := (bv_add arg1 (0xffffffffffffffff : bv 64))
  %t0 = add i64 %arg1, 18446744073709551615
  ; r1 := (trunc r0 32)
  %t1 = trunc i64 %t0 to i32
  ; r2 := (uext r1 64)
  %t2 = zext i32 %t1 to i64
  ; r3 := (eq r1 (0x7f : bv 32))
  %t3 = icmp eq i32 %t1, 127
  ; r4 := (bv_ule (0x7f : bv 32) r1)
  %t4 = icmp ule i32 127, %t1
  ; r5 := (not r3)
  %t5 = icmp eq i1 %t3, 0
  ; r6 := (and r4 r5)
  %t6 = and i1 %t4, %t5
  ; r7 := (bitcast arg3 (bv 512))
  %t7 = bitcast <8 x double> %arg3 to i512
  br i1 %t6, label %block_0_419388, label %block_0_41936c
block_0_41936c:
  %t8 = phi i64 [ %t2, %block_0_419360 ]
  %t9 = phi i64 [ %arg0, %block_0_419360 ]
  ; r10 := (trunc r8 32)
  %t10 = trunc i64 %t8 to i32
  ; r11 := (trunc r8 8)
  %t11 = trunc i64 %t8 to i8
  ; r12 := (bv_and r11 (0x1f : bv 8))
  %t12 = and i8 %t11, 31
  ; r13 := (bv_sar r10 (0x5 : bv 32))
  %t13 = ashr i32 %t10, 5
  ; r14 := (eq r12 (0x0 : bv 8))
  %t14 = icmp eq i8 %t12, 0
  ; r15 := (uext r12 32)
  %t15 = zext i8 %t12 to i32
  ; r16 := (bv_shl (0x1 : bv 32) r15)
  %t16 = shl i32 1, %t15
  ; r17 := (mux r14 (0x1 : bv 32) r16)
  %t17 = select i1 %t14, i32 1, i32 %t16
  ; r18 := (sext r13 64)
  %t18 = sext i32 %t13 to i64
  ; r19 := (bv_mul (0x4 : bv 64) r18)
  %t19 = mul i64 4, %t18
  ; r20 := (bv_add r9 r19)
  %t20 = add i64 %t9, %t19
  ; r21 := (read r20 (bv 32))
  %t21 = inttoptr i64 %t20 to i32*
  %t22 = load i32, i32* %t21
  ; r22 := (bv_or r21 r17)
  %t23 = or i32 %t22, %t17
  ; write r20 r22
  %t24 = inttoptr i64 %t20 to i32*
  store i32 %t23, i32* %t24
  br label %block_0_419383
block_0_419383:
  ret void
block_0_419388:
  %t25 = phi i64 [ %arg2, %block_0_419360 ]
  %t26 = phi i64 [ %arg1, %block_0_419360 ]
  %t27 = phi i64 [ %arg0, %block_0_419360 ]
  %t28 = phi i512 [ %t7, %block_0_419360 ]
  ; r27 := (bitcast r26 (vec 8 double))
  %t29 = bitcast i512 %t28 to <8 x double>
  ; r28 := call __error_unthreaded(r25, r24, r23, r27)
  %t30 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t27, i64 %t26, i64 %t25, <8 x double> %t29)
  ; r29 := (tuple_field r28 0)
  %t31 = extractvalue { i64, i64, <8 x double> } %t30, 0
  ; r30 := (tuple_field r28 1)
  %t32 = extractvalue { i64, i64, <8 x double> } %t30, 1
  ; r31 := (tuple_field r28 2)
  %t33 = extractvalue { i64, i64, <8 x double> } %t30, 2
  ; r32 := (bitcast r31 (bv 512))
  %t34 = bitcast <8 x double> %t33 to i512
  br label %block_0_41938d
block_0_41938d:
  %t35 = phi i64 [ %t31, %block_0_419388 ]
  ; write r33 (0x16 : bv 32)
  %t36 = inttoptr i64 %t35 to i32*
  store i32 22, i32* %t36
  br label %block_0_419383
}
define { i64, i64, <8 x double> } @raise(i64 %arg0) {
block_0_4193a0:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := call __sys_getpid()
  %t2 = call { i64, i64, <8 x double> } () @__sys_getpid()
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, i64, <8 x double> } %t2, 1
  ; r5 := (tuple_field r2 2)
  %t5 = extractvalue { i64, i64, <8 x double> } %t2, 2
  ; r6 := (bitcast r5 (bv 512))
  %t6 = bitcast <8 x double> %t5 to i512
  br label %block_0_4193a8
block_0_4193a8:
  %t7 = phi i64 [ %t3, %block_0_4193a0 ]
  %t8 = phi i64 [ %t1, %block_0_4193a0 ]
  ; r9 := (trunc r8 32)
  %t9 = trunc i64 %t8 to i32
  ; r10 := (uext r9 64)
  %t10 = zext i32 %t9 to i64
  ; r11 := (trunc r7 32)
  %t11 = trunc i64 %t7 to i32
  ; r12 := (uext r11 64)
  %t12 = zext i32 %t11 to i64
  %t13 = call { i64, i64, <8 x double> } (i64, i64) @__sys_kill(i64 %t12, i64 %t10)
  ret { i64, i64, <8 x double> } %t13
}
define i64 @memchr(i64 %arg0, i64 %arg1, i64 %arg2) {
block_0_419440:
  ; r0 := (eq arg2 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg2, 0
  br i1 %t0, label %block_0_419458, label %block_0_419445
block_0_419445:
  %t1 = phi i64 [ %arg2, %block_0_419440 ]
  %t2 = phi i64 [ %arg1, %block_0_419440 ]
  %t3 = phi i64 [ %arg0, %block_0_419440 ]
  ; r4 := (trunc r2 32)
  %t4 = trunc i64 %t2 to i32
  ; r5 := (uext r4 64)
  %t5 = zext i32 %t4 to i64
  br label %block_0_419447
block_0_419447:
  %t6 = phi i64 [ %t5, %block_0_419445 ], [ %t14, %block_0_419452 ]
  %t7 = phi i64 [ %t1, %block_0_419445 ], [ %t17, %block_0_419452 ]
  %t8 = phi i64 [ %t3, %block_0_419445 ], [ %t16, %block_0_419452 ]
  ; r9 := (read r8 (bv 8))
  %t9 = inttoptr i64 %t8 to i8*
  %t10 = load i8, i8* %t9
  ; r10 := (bv_add r8 (0x1 : bv 64))
  %t11 = add i64 %t8, 1
  ; r11 := (trunc r6 8)
  %t12 = trunc i64 %t6 to i8
  ; r12 := (eq r9 r11)
  %t13 = icmp eq i8 %t10, %t12
  br i1 %t13, label %block_0_41945b, label %block_0_419452
block_0_419452:
  %t14 = phi i64 [ %t6, %block_0_419447 ]
  %t15 = phi i64 [ %t7, %block_0_419447 ]
  %t16 = phi i64 [ %t11, %block_0_419447 ]
  ; r16 := (bv_add r14 (0xffffffffffffffff : bv 64))
  %t17 = add i64 %t15, 18446744073709551615
  ; r17 := (eq r14 (0x1 : bv 64))
  %t18 = icmp eq i64 %t15, 1
  br i1 %t18, label %block_0_419458, label %block_0_419447
block_0_419458:
  ret i64 0
block_0_41945b:
  %t19 = phi i64 [ %t11, %block_0_419447 ]
  ; r19 := (bv_add r18 (0xffffffffffffffff : bv 64))
  %t20 = add i64 %t19, 18446744073709551615
  ret i64 %t20
}
define { i64, i64, <8 x double> } @__swsetup(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419470:
  ; r0 := (read (0x641e50 : bv 64) (bv 32))
  %t0 = inttoptr i64 6561360 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg6 (bv 512))
  %t3 = bitcast <8 x double> %arg6 to i512
  ; r3 := (bitcast arg7 (bv 512))
  %t4 = bitcast <8 x double> %arg7 to i512
  ; r4 := (bitcast arg8 (bv 512))
  %t5 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r6 := (bitcast arg10 (bv 512))
  %t7 = bitcast <8 x double> %arg10 to i512
  ; r7 := (bitcast arg11 (bv 512))
  %t8 = bitcast <8 x double> %arg11 to i512
  ; r8 := (bitcast arg12 (bv 512))
  %t9 = bitcast <8 x double> %arg12 to i512
  ; r9 := (bitcast arg13 (bv 512))
  %t10 = bitcast <8 x double> %arg13 to i512
  ; r10 := (bitcast arg6 (bv 512))
  %t11 = bitcast <8 x double> %arg6 to i512
  ; r11 := (bitcast arg7 (bv 512))
  %t12 = bitcast <8 x double> %arg7 to i512
  ; r12 := (bitcast arg8 (bv 512))
  %t13 = bitcast <8 x double> %arg8 to i512
  ; r13 := (bitcast arg9 (bv 512))
  %t14 = bitcast <8 x double> %arg9 to i512
  ; r14 := (bitcast arg10 (bv 512))
  %t15 = bitcast <8 x double> %arg10 to i512
  ; r15 := (bitcast arg11 (bv 512))
  %t16 = bitcast <8 x double> %arg11 to i512
  ; r16 := (bitcast arg12 (bv 512))
  %t17 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast arg13 (bv 512))
  %t18 = bitcast <8 x double> %arg13 to i512
  br i1 %t2, label %block_0_4194f7, label %block_0_41947e
block_0_41947e:
  %t19 = phi i64 [ %arg3, %block_0_419470 ], [ %t249, %block_0_4194fc ]
  %t20 = phi i64 [ %arg2, %block_0_419470 ], [ %t250, %block_0_4194fc ]
  %t21 = phi i64 [ %arg0, %block_0_419470 ], [ %t251, %block_0_4194fc ]
  %t22 = phi i64 [ %arg1, %block_0_419470 ], [ %t252, %block_0_4194fc ]
  %t23 = phi i64 [ %arg0, %block_0_419470 ], [ %t253, %block_0_4194fc ]
  %t24 = phi i64 [ %arg4, %block_0_419470 ], [ %t254, %block_0_4194fc ]
  %t25 = phi i64 [ %arg5, %block_0_419470 ], [ %t255, %block_0_4194fc ]
  %t26 = phi i512 [ %t11, %block_0_419470 ], [ %t256, %block_0_4194fc ]
  %t27 = phi i512 [ %t12, %block_0_419470 ], [ %t257, %block_0_4194fc ]
  %t28 = phi i512 [ %t13, %block_0_419470 ], [ %t258, %block_0_4194fc ]
  %t29 = phi i512 [ %t14, %block_0_419470 ], [ %t259, %block_0_4194fc ]
  %t30 = phi i512 [ %t15, %block_0_419470 ], [ %t260, %block_0_4194fc ]
  %t31 = phi i512 [ %t16, %block_0_419470 ], [ %t261, %block_0_4194fc ]
  %t32 = phi i512 [ %t17, %block_0_419470 ], [ %t262, %block_0_4194fc ]
  %t33 = phi i512 [ %t18, %block_0_419470 ], [ %t263, %block_0_4194fc ]
  ; r33 := (bv_add r20 (0x10 : bv 64))
  %t34 = add i64 %t21, 16
  ; r34 := (read r33 (bv 16))
  %t35 = inttoptr i64 %t34 to i16*
  %t36 = load i16, i16* %t35
  ; r35 := (sext r34 32)
  %t37 = sext i16 %t36 to i32
  ; r36 := (uext r35 64)
  %t38 = zext i32 %t37 to i64
  ; r37 := (trunc r34 8)
  %t39 = trunc i16 %t36 to i8
  ; r38 := (bv_and r37 (0x8 : bv 8))
  %t40 = and i8 %t39, 8
  ; r39 := (eq r38 (0x0 : bv 8))
  %t41 = icmp eq i8 %t40, 0
  br i1 %t41, label %block_0_419486, label %block_0_4194c5
block_0_419486:
  %t42 = phi i64 [ %t38, %block_0_41947e ]
  %t43 = phi i64 [ %t19, %block_0_41947e ]
  %t44 = phi i64 [ %t20, %block_0_41947e ]
  %t45 = phi i64 [ %t21, %block_0_41947e ]
  %t46 = phi i64 [ %t22, %block_0_41947e ]
  %t47 = phi i64 [ %t23, %block_0_41947e ]
  %t48 = phi i64 [ %t24, %block_0_41947e ]
  %t49 = phi i64 [ %t25, %block_0_41947e ]
  %t50 = phi i512 [ %t26, %block_0_41947e ]
  %t51 = phi i512 [ %t27, %block_0_41947e ]
  %t52 = phi i512 [ %t28, %block_0_41947e ]
  %t53 = phi i512 [ %t29, %block_0_41947e ]
  %t54 = phi i512 [ %t30, %block_0_41947e ]
  %t55 = phi i512 [ %t31, %block_0_41947e ]
  %t56 = phi i512 [ %t32, %block_0_41947e ]
  %t57 = phi i512 [ %t33, %block_0_41947e ]
  ; r56 := (trunc r40 8)
  %t58 = trunc i64 %t42 to i8
  ; r57 := (bv_and r56 (0x10 : bv 8))
  %t59 = and i8 %t58, 16
  ; r58 := (eq r57 (0x0 : bv 8))
  %t60 = icmp eq i8 %t59, 0
  br i1 %t60, label %block_0_419508, label %block_0_41948a
block_0_41948a:
  %t61 = phi i64 [ %t42, %block_0_419486 ]
  %t62 = phi i64 [ %t43, %block_0_419486 ]
  %t63 = phi i64 [ %t44, %block_0_419486 ]
  %t64 = phi i64 [ %t45, %block_0_419486 ]
  %t65 = phi i64 [ %t46, %block_0_419486 ]
  %t66 = phi i64 [ %t48, %block_0_419486 ]
  %t67 = phi i64 [ %t49, %block_0_419486 ]
  %t68 = phi i512 [ %t50, %block_0_419486 ]
  %t69 = phi i512 [ %t51, %block_0_419486 ]
  %t70 = phi i512 [ %t52, %block_0_419486 ]
  %t71 = phi i512 [ %t53, %block_0_419486 ]
  %t72 = phi i512 [ %t54, %block_0_419486 ]
  %t73 = phi i512 [ %t55, %block_0_419486 ]
  %t74 = phi i512 [ %t56, %block_0_419486 ]
  %t75 = phi i512 [ %t57, %block_0_419486 ]
  ; r74 := (trunc r59 8)
  %t76 = trunc i64 %t61 to i8
  ; r75 := (bv_and r74 (0x4 : bv 8))
  %t77 = and i8 %t76, 4
  ; r76 := (eq r75 (0x0 : bv 8))
  %t78 = icmp eq i8 %t77, 0
  br i1 %t78, label %block_0_4194c0, label %block_0_41948e
block_0_41948e:
  %t79 = phi i64 [ %t62, %block_0_41948a ]
  %t80 = phi i64 [ %t63, %block_0_41948a ]
  %t81 = phi i64 [ %t64, %block_0_41948a ]
  %t82 = phi i64 [ %t65, %block_0_41948a ]
  %t83 = phi i64 [ %t66, %block_0_41948a ]
  %t84 = phi i64 [ %t67, %block_0_41948a ]
  %t85 = phi i512 [ %t68, %block_0_41948a ]
  %t86 = phi i512 [ %t69, %block_0_41948a ]
  %t87 = phi i512 [ %t70, %block_0_41948a ]
  %t88 = phi i512 [ %t71, %block_0_41948a ]
  %t89 = phi i512 [ %t72, %block_0_41948a ]
  %t90 = phi i512 [ %t73, %block_0_41948a ]
  %t91 = phi i512 [ %t74, %block_0_41948a ]
  %t92 = phi i512 [ %t75, %block_0_41948a ]
  ; r91 := (bv_add r79 (0x58 : bv 64))
  %t93 = add i64 %t81, 88
  ; r92 := (read r91 (bv 64))
  %t94 = inttoptr i64 %t93 to i64*
  %t95 = load i64, i64* %t94
  ; r93 := (eq r92 (0x0 : bv 64))
  %t96 = icmp eq i64 %t95, 0
  br i1 %t96, label %block_0_4194ad, label %block_0_419497
block_0_419497:
  %t97 = phi i64 [ %t79, %block_0_41948e ]
  %t98 = phi i64 [ %t80, %block_0_41948e ]
  %t99 = phi i64 [ %t81, %block_0_41948e ]
  %t100 = phi i64 [ %t82, %block_0_41948e ]
  %t101 = phi i64 [ %t95, %block_0_41948e ]
  %t102 = phi i64 [ %t83, %block_0_41948e ]
  %t103 = phi i64 [ %t84, %block_0_41948e ]
  %t104 = phi i512 [ %t85, %block_0_41948e ]
  %t105 = phi i512 [ %t86, %block_0_41948e ]
  %t106 = phi i512 [ %t87, %block_0_41948e ]
  %t107 = phi i512 [ %t88, %block_0_41948e ]
  %t108 = phi i512 [ %t89, %block_0_41948e ]
  %t109 = phi i512 [ %t90, %block_0_41948e ]
  %t110 = phi i512 [ %t91, %block_0_41948e ]
  %t111 = phi i512 [ %t92, %block_0_41948e ]
  ; r109 := (bv_add r96 (0x74 : bv 64))
  %t112 = add i64 %t99, 116
  ; r110 := (eq r98 r109)
  %t113 = icmp eq i64 %t101, %t112
  br i1 %t113, label %block_0_4194a5, label %block_0_4194a0
block_0_4194a0:
  %t114 = phi i64 [ %t97, %block_0_419497 ]
  %t115 = phi i64 [ %t98, %block_0_419497 ]
  %t116 = phi i64 [ %t99, %block_0_419497 ]
  %t117 = phi i64 [ %t100, %block_0_419497 ]
  %t118 = phi i64 [ %t101, %block_0_419497 ]
  %t119 = phi i64 [ %t102, %block_0_419497 ]
  %t120 = phi i64 [ %t103, %block_0_419497 ]
  %t121 = phi i512 [ %t104, %block_0_419497 ]
  %t122 = phi i512 [ %t105, %block_0_419497 ]
  %t123 = phi i512 [ %t106, %block_0_419497 ]
  %t124 = phi i512 [ %t107, %block_0_419497 ]
  %t125 = phi i512 [ %t108, %block_0_419497 ]
  %t126 = phi i512 [ %t109, %block_0_419497 ]
  %t127 = phi i512 [ %t110, %block_0_419497 ]
  %t128 = phi i512 [ %t111, %block_0_419497 ]
  ; r126 := (bitcast r118 (vec 8 double))
  %t129 = bitcast i512 %t121 to <8 x double>
  ; r127 := (bitcast r119 (vec 8 double))
  %t130 = bitcast i512 %t122 to <8 x double>
  ; r128 := (bitcast r120 (vec 8 double))
  %t131 = bitcast i512 %t123 to <8 x double>
  ; r129 := (bitcast r121 (vec 8 double))
  %t132 = bitcast i512 %t124 to <8 x double>
  ; r130 := (bitcast r122 (vec 8 double))
  %t133 = bitcast i512 %t125 to <8 x double>
  ; r131 := (bitcast r123 (vec 8 double))
  %t134 = bitcast i512 %t126 to <8 x double>
  ; r132 := (bitcast r124 (vec 8 double))
  %t135 = bitcast i512 %t127 to <8 x double>
  ; r133 := (bitcast r125 (vec 8 double))
  %t136 = bitcast i512 %t128 to <8 x double>
  ; r134 := call free(r115, r114, r112, r111, r116, r117, r126, r127, r128, r129, r130, r131, r132, r133)
  %t137 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t118, i64 %t117, i64 %t115, i64 %t114, i64 %t119, i64 %t120, <8 x double> %t129, <8 x double> %t130, <8 x double> %t131, <8 x double> %t132, <8 x double> %t133, <8 x double> %t134, <8 x double> %t135, <8 x double> %t136)
  ; r135 := (tuple_field r134 0)
  %t138 = extractvalue { i64, i64, <8 x double> } %t137, 0
  ; r136 := (tuple_field r134 1)
  %t139 = extractvalue { i64, i64, <8 x double> } %t137, 1
  ; r137 := (tuple_field r134 2)
  %t140 = extractvalue { i64, i64, <8 x double> } %t137, 2
  ; r138 := (bitcast r137 (bv 512))
  %t141 = bitcast <8 x double> %t140 to i512
  br label %block_0_4194a5
block_0_4194a5:
  %t142 = phi i64 [ %t98, %block_0_419497 ], [ %t139, %block_0_4194a0 ]
  %t143 = phi i64 [ %t99, %block_0_419497 ], [ %t116, %block_0_4194a0 ]
  %t144 = phi i64 [ %t100, %block_0_419497 ], [ %t117, %block_0_4194a0 ]
  %t145 = phi i512 [ %t104, %block_0_419497 ], [ %t141, %block_0_4194a0 ]
  ; r143 := (bv_add r140 (0x58 : bv 64))
  %t146 = add i64 %t143, 88
  ; write r143 (0x0 : bv 64)
  %t147 = inttoptr i64 %t146 to i64*
  store i64 0, i64* %t147
  br label %block_0_4194ad
block_0_4194ad:
  %t148 = phi i64 [ %t80, %block_0_41948e ], [ %t142, %block_0_4194a5 ]
  %t149 = phi i64 [ %t81, %block_0_41948e ], [ %t143, %block_0_4194a5 ]
  %t150 = phi i64 [ %t82, %block_0_41948e ], [ %t144, %block_0_4194a5 ]
  %t151 = phi i512 [ %t85, %block_0_41948e ], [ %t145, %block_0_4194a5 ]
  ; r148 := (bv_add r145 (0x18 : bv 64))
  %t152 = add i64 %t149, 24
  ; r149 := (read r148 (bv 64))
  %t153 = inttoptr i64 %t152 to i64*
  %t154 = load i64, i64* %t153
  ; r150 := (bv_add r145 (0x10 : bv 64))
  %t155 = add i64 %t149, 16
  ; r151 := (read r150 (bv 16))
  %t156 = inttoptr i64 %t155 to i16*
  %t157 = load i16, i16* %t156
  ; r152 := (bv_and r151 (0xffdb : bv 16))
  %t158 = and i16 %t157, 65499
  ; write r150 r152
  %t159 = inttoptr i64 %t155 to i16*
  store i16 %t158, i16* %t159
  ; r153 := (bv_add r145 (0x8 : bv 64))
  %t160 = add i64 %t149, 8
  ; write r153 (0x0 : bv 32)
  %t161 = inttoptr i64 %t160 to i32*
  store i32 0, i32* %t161
  ; write r145 r149
  %t162 = inttoptr i64 %t149 to i64*
  store i64 %t154, i64* %t162
  br label %block_0_4194c0
block_0_4194c0:
  %t163 = phi i64 [ %t63, %block_0_41948a ], [ %t148, %block_0_4194ad ]
  %t164 = phi i64 [ %t64, %block_0_41948a ], [ %t149, %block_0_4194ad ]
  %t165 = phi i64 [ %t65, %block_0_41948a ], [ %t150, %block_0_4194ad ]
  %t166 = phi i512 [ %t68, %block_0_41948a ], [ %t151, %block_0_4194ad ]
  ; r158 := (bv_add r155 (0x10 : bv 64))
  %t167 = add i64 %t164, 16
  ; r159 := (read r158 (bv 16))
  %t168 = inttoptr i64 %t167 to i16*
  %t169 = load i16, i16* %t168
  ; r160 := (bv_or r159 (0x8 : bv 16))
  %t170 = or i16 %t169, 8
  ; write r158 r160
  %t171 = inttoptr i64 %t167 to i16*
  store i16 %t170, i16* %t171
  br label %block_0_4194c5
block_0_4194c5:
  %t172 = phi i64 [ %t20, %block_0_41947e ], [ %t163, %block_0_4194c0 ]
  %t173 = phi i64 [ %t21, %block_0_41947e ], [ %t164, %block_0_4194c0 ]
  %t174 = phi i64 [ %t22, %block_0_41947e ], [ %t165, %block_0_4194c0 ]
  %t175 = phi i512 [ %t26, %block_0_41947e ], [ %t166, %block_0_4194c0 ]
  ; r165 := (bv_add r162 (0x18 : bv 64))
  %t176 = add i64 %t173, 24
  ; r166 := (read r165 (bv 64))
  %t177 = inttoptr i64 %t176 to i64*
  %t178 = load i64, i64* %t177
  ; r167 := (eq r166 (0x0 : bv 64))
  %t179 = icmp eq i64 %t178, 0
  br i1 %t179, label %block_0_4194fe, label %block_0_4194cc
block_0_4194cc:
  %t180 = phi i64 [ %t172, %block_0_4194c5 ], [ %t274, %block_0_419506 ]
  %t181 = phi i64 [ %t173, %block_0_4194c5 ], [ %t275, %block_0_419506 ]
  %t182 = phi i512 [ %t175, %block_0_4194c5 ], [ %t276, %block_0_419506 ]
  ; r171 := (bv_add r169 (0x10 : bv 64))
  %t183 = add i64 %t181, 16
  ; r172 := (read r171 (bv 16))
  %t184 = inttoptr i64 %t183 to i16*
  %t185 = load i16, i16* %t184
  ; r173 := (sext r172 32)
  %t186 = sext i16 %t185 to i32
  ; r174 := (uext r173 64)
  %t187 = zext i32 %t186 to i64
  ; r175 := (trunc r172 8)
  %t188 = trunc i16 %t185 to i8
  ; r176 := (bv_and r175 (0x1 : bv 8))
  %t189 = and i8 %t188, 1
  ; r177 := (eq r176 (0x0 : bv 8))
  %t190 = icmp eq i8 %t189, 0
  br i1 %t190, label %block_0_4194d4, label %block_0_4194e4
block_0_4194d4:
  %t191 = phi i64 [ %t187, %block_0_4194cc ]
  %t192 = phi i64 [ %t181, %block_0_4194cc ]
  %t193 = phi i512 [ %t182, %block_0_4194cc ]
  ; r181 := (trunc r178 8)
  %t194 = trunc i64 %t191 to i8
  ; r182 := (bv_and r181 (0x2 : bv 8))
  %t195 = and i8 %t194, 2
  ; r183 := (eq r182 (0x0 : bv 8))
  %t196 = icmp eq i8 %t195, 0
  br i1 %t196, label %block_0_4194da, label %block_0_4194dd
block_0_4194da:
  %t197 = phi i64 [ %t192, %block_0_4194d4 ]
  %t198 = phi i512 [ %t193, %block_0_4194d4 ]
  ; r186 := (bv_add r184 (0x20 : bv 64))
  %t199 = add i64 %t197, 32
  ; r187 := (read r186 (bv 32))
  %t200 = inttoptr i64 %t199 to i32*
  %t201 = load i32, i32* %t200
  ; r188 := (uext r187 64)
  %t202 = zext i32 %t201 to i64
  br label %block_0_4194dd
block_0_4194dd:
  %t203 = phi i64 [ 0, %block_0_4194d4 ], [ %t202, %block_0_4194da ]
  %t204 = phi i64 [ %t192, %block_0_4194d4 ], [ %t197, %block_0_4194da ]
  %t205 = phi i512 [ %t193, %block_0_4194d4 ], [ %t198, %block_0_4194da ]
  ; r192 := (trunc r189 32)
  %t206 = trunc i64 %t203 to i32
  ; r193 := (bv_add r190 (0xc : bv 64))
  %t207 = add i64 %t204, 12
  ; write r193 r192
  %t208 = inttoptr i64 %t207 to i32*
  store i32 %t206, i32* %t208
  ; r194 := (bitcast r191 (vec 8 double))
  %t209 = bitcast i512 %t205 to <8 x double>
  ; r195 := (tuple (0x0 : bv 64) r189 r194)
  %t210 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t211 = insertvalue { i64, i64, <8 x double> } %t210, i64 %t203, 1
  %t212 = insertvalue { i64, i64, <8 x double> } %t211, <8 x double> %t209, 2
  ret { i64, i64, <8 x double> } %t212
block_0_4194e4:
  %t213 = phi i64 [ %t180, %block_0_4194cc ]
  %t214 = phi i64 [ %t181, %block_0_4194cc ]
  %t215 = phi i512 [ %t182, %block_0_4194cc ]
  ; r199 := (bv_add r197 (0x20 : bv 64))
  %t216 = add i64 %t214, 32
  ; r200 := (read r199 (bv 32))
  %t217 = inttoptr i64 %t216 to i32*
  %t218 = load i32, i32* %t217
  ; r201 := (bv_add r197 (0xc : bv 64))
  %t219 = add i64 %t214, 12
  ; write r201 (0x0 : bv 32)
  %t220 = inttoptr i64 %t219 to i32*
  store i32 0, i32* %t220
  ; r202 := (bv_sub (0x0 : bv 32) r200)
  %t221 = sub i32 0, %t218
  ; r203 := (bv_add r197 (0x28 : bv 64))
  %t222 = add i64 %t214, 40
  ; write r203 r202
  %t223 = inttoptr i64 %t222 to i32*
  store i32 %t221, i32* %t223
  ; r204 := (bitcast r198 (vec 8 double))
  %t224 = bitcast i512 %t215 to <8 x double>
  ; r205 := (tuple (0x0 : bv 64) r196 r204)
  %t225 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t226 = insertvalue { i64, i64, <8 x double> } %t225, i64 %t213, 1
  %t227 = insertvalue { i64, i64, <8 x double> } %t226, <8 x double> %t224, 2
  ret { i64, i64, <8 x double> } %t227
block_0_4194f7:
  %t228 = phi i64 [ %arg3, %block_0_419470 ]
  %t229 = phi i64 [ %arg2, %block_0_419470 ]
  %t230 = phi i64 [ %arg0, %block_0_419470 ]
  %t231 = phi i64 [ %arg1, %block_0_419470 ]
  %t232 = phi i64 [ %arg0, %block_0_419470 ]
  %t233 = phi i64 [ %arg4, %block_0_419470 ]
  %t234 = phi i64 [ %arg5, %block_0_419470 ]
  %t235 = phi i512 [ %t3, %block_0_419470 ]
  %t236 = phi i512 [ %t4, %block_0_419470 ]
  %t237 = phi i512 [ %t5, %block_0_419470 ]
  %t238 = phi i512 [ %t6, %block_0_419470 ]
  %t239 = phi i512 [ %t7, %block_0_419470 ]
  %t240 = phi i512 [ %t8, %block_0_419470 ]
  %t241 = phi i512 [ %t9, %block_0_419470 ]
  %t242 = phi i512 [ %t10, %block_0_419470 ]
  ; r221 := (bitcast r213 (vec 8 double))
  %t243 = bitcast i512 %t235 to <8 x double>
  ; r222 := call __sinit(r210, r209, r207, r221)
  %t244 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__sinit(i64 %t232, i64 %t231, i64 %t229, <8 x double> %t243)
  ; r223 := (tuple_field r222 0)
  %t245 = extractvalue { i64, i64, <8 x double> } %t244, 0
  ; r224 := (tuple_field r222 1)
  %t246 = extractvalue { i64, i64, <8 x double> } %t244, 1
  ; r225 := (tuple_field r222 2)
  %t247 = extractvalue { i64, i64, <8 x double> } %t244, 2
  ; r226 := (bitcast r225 (bv 512))
  %t248 = bitcast <8 x double> %t247 to i512
  br label %block_0_4194fc
block_0_4194fc:
  %t249 = phi i64 [ %t228, %block_0_4194f7 ]
  %t250 = phi i64 [ %t246, %block_0_4194f7 ]
  %t251 = phi i64 [ %t230, %block_0_4194f7 ]
  %t252 = phi i64 [ %t231, %block_0_4194f7 ]
  %t253 = phi i64 [ %t232, %block_0_4194f7 ]
  %t254 = phi i64 [ %t233, %block_0_4194f7 ]
  %t255 = phi i64 [ %t234, %block_0_4194f7 ]
  %t256 = phi i512 [ %t248, %block_0_4194f7 ]
  %t257 = phi i512 [ %t236, %block_0_4194f7 ]
  %t258 = phi i512 [ %t237, %block_0_4194f7 ]
  %t259 = phi i512 [ %t238, %block_0_4194f7 ]
  %t260 = phi i512 [ %t239, %block_0_4194f7 ]
  %t261 = phi i512 [ %t240, %block_0_4194f7 ]
  %t262 = phi i512 [ %t241, %block_0_4194f7 ]
  %t263 = phi i512 [ %t242, %block_0_4194f7 ]
  br label %block_0_41947e
block_0_4194fe:
  %t264 = phi i64 [ %t172, %block_0_4194c5 ]
  %t265 = phi i64 [ %t173, %block_0_4194c5 ]
  %t266 = phi i64 [ %t174, %block_0_4194c5 ]
  %t267 = phi i512 [ %t175, %block_0_4194c5 ]
  ; r246 := (bitcast r245 (vec 8 double))
  %t268 = bitcast i512 %t267 to <8 x double>
  ; r247 := call __smakebuf(r243, r244, r242, r246)
  %t269 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__smakebuf(i64 %t265, i64 %t266, i64 %t264, <8 x double> %t268)
  ; r248 := (tuple_field r247 0)
  %t270 = extractvalue { i64, i64, <8 x double> } %t269, 0
  ; r249 := (tuple_field r247 1)
  %t271 = extractvalue { i64, i64, <8 x double> } %t269, 1
  ; r250 := (tuple_field r247 2)
  %t272 = extractvalue { i64, i64, <8 x double> } %t269, 2
  ; r251 := (bitcast r250 (bv 512))
  %t273 = bitcast <8 x double> %t272 to i512
  br label %block_0_419506
block_0_419506:
  %t274 = phi i64 [ %t271, %block_0_4194fe ]
  %t275 = phi i64 [ %t265, %block_0_4194fe ]
  %t276 = phi i512 [ %t273, %block_0_4194fe ]
  br label %block_0_4194cc
block_0_419508:
  %t277 = phi i64 [ %t44, %block_0_419486 ]
  %t278 = phi i64 [ %t45, %block_0_419486 ]
  %t279 = phi i64 [ %t46, %block_0_419486 ]
  %t280 = phi i64 [ %t47, %block_0_419486 ]
  %t281 = phi i512 [ %t50, %block_0_419486 ]
  ; r260 := (bitcast r259 (vec 8 double))
  %t282 = bitcast i512 %t281 to <8 x double>
  ; r261 := call __error_unthreaded(r258, r257, r255, r260)
  %t283 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t280, i64 %t279, i64 %t277, <8 x double> %t282)
  ; r262 := (tuple_field r261 0)
  %t284 = extractvalue { i64, i64, <8 x double> } %t283, 0
  ; r263 := (tuple_field r261 1)
  %t285 = extractvalue { i64, i64, <8 x double> } %t283, 1
  ; r264 := (tuple_field r261 2)
  %t286 = extractvalue { i64, i64, <8 x double> } %t283, 2
  ; r265 := (bitcast r264 (bv 512))
  %t287 = bitcast <8 x double> %t286 to i512
  br label %block_0_41950d
block_0_41950d:
  %t288 = phi i64 [ %t284, %block_0_419508 ]
  %t289 = phi i64 [ %t285, %block_0_419508 ]
  %t290 = phi i64 [ %t278, %block_0_419508 ]
  %t291 = phi i512 [ %t287, %block_0_419508 ]
  ; r270 := (bv_add r268 (0x10 : bv 64))
  %t292 = add i64 %t290, 16
  ; r271 := (read r270 (bv 16))
  %t293 = inttoptr i64 %t292 to i16*
  %t294 = load i16, i16* %t293
  ; r272 := (bv_or r271 (0x40 : bv 16))
  %t295 = or i16 %t294, 64
  ; write r270 r272
  %t296 = inttoptr i64 %t292 to i16*
  store i16 %t295, i16* %t296
  ; write r266 (0x9 : bv 32)
  %t297 = inttoptr i64 %t288 to i32*
  store i32 9, i32* %t297
  ; r273 := (bitcast r269 (vec 8 double))
  %t298 = bitcast i512 %t291 to <8 x double>
  ; r274 := (tuple (0xffffffff : bv 64) r267 r273)
  %t299 = insertvalue { i64, i64, <8 x double> } undef, i64 4294967295, 0
  %t300 = insertvalue { i64, i64, <8 x double> } %t299, i64 %t289, 1
  %t301 = insertvalue { i64, i64, <8 x double> } %t300, <8 x double> %t298, 2
  ret { i64, i64, <8 x double> } %t301
}
define void @_cleanup(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_4196c0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call _fwalk((0x419950 : bv 64), arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_fwalk(i64 4299088, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define { i64, i64, <8 x double> } @__sfp(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4, <8 x double> %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11) {
block_0_4197d0:
  ; r0 := (read (0x641e50 : bv 64) (bv 32))
  %t0 = inttoptr i64 6561360 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg4 (bv 512))
  %t4 = bitcast <8 x double> %arg4 to i512
  ; r4 := (bitcast arg5 (bv 512))
  %t5 = bitcast <8 x double> %arg5 to i512
  ; r5 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t9 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg11 (bv 512))
  %t11 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast arg4 (bv 512))
  %t12 = bitcast <8 x double> %arg4 to i512
  ; r12 := (bitcast arg5 (bv 512))
  %t13 = bitcast <8 x double> %arg5 to i512
  ; r13 := (bitcast arg6 (bv 512))
  %t14 = bitcast <8 x double> %arg6 to i512
  ; r14 := (bitcast arg7 (bv 512))
  %t15 = bitcast <8 x double> %arg7 to i512
  ; r15 := (bitcast arg8 (bv 512))
  %t16 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast arg9 (bv 512))
  %t17 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast arg10 (bv 512))
  %t18 = bitcast <8 x double> %arg10 to i512
  ; r18 := (bitcast arg11 (bv 512))
  %t19 = bitcast <8 x double> %arg11 to i512
  br i1 %t3, label %block_0_419914, label %block_0_4197e6
block_0_4197e6:
  %t20 = phi i64 [ %arg3, %block_0_4197d0 ], [ %t316, %block_0_419919 ]
  %t21 = phi i64 [ %arg2, %block_0_4197d0 ], [ %t317, %block_0_419919 ]
  %t22 = phi i64 [ %arg1, %block_0_4197d0 ], [ %t318, %block_0_419919 ]
  %t23 = phi i64 [ %t2, %block_0_4197d0 ], [ %t319, %block_0_419919 ]
  %t24 = phi i512 [ %t12, %block_0_4197d0 ], [ %t320, %block_0_419919 ]
  %t25 = phi i512 [ %t13, %block_0_4197d0 ], [ %t321, %block_0_419919 ]
  %t26 = phi i512 [ %t14, %block_0_4197d0 ], [ %t322, %block_0_419919 ]
  %t27 = phi i512 [ %t15, %block_0_4197d0 ], [ %t323, %block_0_419919 ]
  %t28 = phi i512 [ %t16, %block_0_4197d0 ], [ %t324, %block_0_419919 ]
  %t29 = phi i512 [ %t17, %block_0_4197d0 ], [ %t325, %block_0_419919 ]
  %t30 = phi i512 [ %t18, %block_0_4197d0 ], [ %t326, %block_0_419919 ]
  %t31 = phi i512 [ %t19, %block_0_4197d0 ], [ %t327, %block_0_419919 ]
  ; r31 := (read (0x6356e8 : bv 64) (bv 32))
  %t32 = inttoptr i64 6510312 to i32*
  %t33 = load i32, i32* %t32
  ; r32 := (uext r31 64)
  %t34 = zext i32 %t33 to i64
  ; r33 := (eq r31 (0x0 : bv 32))
  %t35 = icmp eq i32 %t33, 0
  br i1 %t35, label %block_0_4197f6, label %block_0_419905
block_0_4197f6:
  %t36 = phi i64 [ %t20, %block_0_4197e6 ], [ %t285, %block_0_41990f ]
  %t37 = phi i64 [ %t22, %block_0_4197e6 ], [ %t286, %block_0_41990f ]
  %t38 = phi i64 [ %t34, %block_0_4197e6 ], [ %t287, %block_0_41990f ]
  %t39 = phi i64 [ %t23, %block_0_4197e6 ], [ %t288, %block_0_41990f ]
  %t40 = phi i512 [ %t24, %block_0_4197e6 ], [ %t289, %block_0_41990f ]
  %t41 = phi i512 [ %t25, %block_0_4197e6 ], [ %t290, %block_0_41990f ]
  %t42 = phi i512 [ %t26, %block_0_4197e6 ], [ %t291, %block_0_41990f ]
  %t43 = phi i512 [ %t27, %block_0_4197e6 ], [ %t292, %block_0_41990f ]
  %t44 = phi i512 [ %t28, %block_0_4197e6 ], [ %t293, %block_0_41990f ]
  %t45 = phi i512 [ %t29, %block_0_4197e6 ], [ %t294, %block_0_41990f ]
  %t46 = phi i512 [ %t30, %block_0_4197e6 ], [ %t295, %block_0_41990f ]
  %t47 = phi i512 [ %t31, %block_0_4197e6 ], [ %t296, %block_0_41990f ]
  br label %block_0_4197fb
block_0_4197fb:
  %t48 = phi i64 [ %t36, %block_0_4197f6 ], [ %t185, %block_0_4198b7 ]
  %t49 = phi i64 [ 6492832, %block_0_4197f6 ], [ %t199, %block_0_4198b7 ]
  %t50 = phi i64 [ %t37, %block_0_4197f6 ], [ %t187, %block_0_4198b7 ]
  %t51 = phi i64 [ %t38, %block_0_4197f6 ], [ %t188, %block_0_4198b7 ]
  %t52 = phi i64 [ %t39, %block_0_4197f6 ], [ %t189, %block_0_4198b7 ]
  %t53 = phi i512 [ %t40, %block_0_4197f6 ], [ %t190, %block_0_4198b7 ]
  %t54 = phi i512 [ %t41, %block_0_4197f6 ], [ %t191, %block_0_4198b7 ]
  %t55 = phi i512 [ %t42, %block_0_4197f6 ], [ %t192, %block_0_4198b7 ]
  %t56 = phi i512 [ %t43, %block_0_4197f6 ], [ %t193, %block_0_4198b7 ]
  %t57 = phi i512 [ %t44, %block_0_4197f6 ], [ %t194, %block_0_4198b7 ]
  %t58 = phi i512 [ %t45, %block_0_4197f6 ], [ %t195, %block_0_4198b7 ]
  %t59 = phi i512 [ %t46, %block_0_4197f6 ], [ %t196, %block_0_4198b7 ]
  %t60 = phi i512 [ %t47, %block_0_4197f6 ], [ %t197, %block_0_4198b7 ]
  ; r59 := (bv_add r47 (0x8 : bv 64))
  %t61 = add i64 %t49, 8
  ; r60 := (read r59 (bv 32))
  %t62 = inttoptr i64 %t61 to i32*
  %t63 = load i32, i32* %t62
  ; r61 := (bv_add r47 (0x10 : bv 64))
  %t64 = add i64 %t49, 16
  ; r62 := (read r61 (bv 64))
  %t65 = inttoptr i64 %t64 to i64*
  %t66 = load i64, i64* %t65
  ; r63 := (bv_add r60 (0xffffffff : bv 32))
  %t67 = add i32 %t63, 4294967295
  ; r64 := (bv_slt r63 (0x0 : bv 32))
  %t68 = icmp slt i32 %t67, 0
  ; r65 := (uext r63 64)
  %t69 = zext i32 %t67 to i64
  br i1 %t68, label %block_0_419807, label %block_0_419823
block_0_419807:
  %t70 = phi i64 [ %t48, %block_0_4197fb ]
  %t71 = phi i64 [ %t49, %block_0_4197fb ]
  %t72 = phi i64 [ %t50, %block_0_4197fb ]
  %t73 = phi i64 [ %t51, %block_0_4197fb ]
  %t74 = phi i64 [ %t52, %block_0_4197fb ]
  %t75 = phi i512 [ %t53, %block_0_4197fb ]
  %t76 = phi i512 [ %t54, %block_0_4197fb ]
  %t77 = phi i512 [ %t55, %block_0_4197fb ]
  %t78 = phi i512 [ %t56, %block_0_4197fb ]
  %t79 = phi i512 [ %t57, %block_0_4197fb ]
  %t80 = phi i512 [ %t58, %block_0_4197fb ]
  %t81 = phi i512 [ %t59, %block_0_4197fb ]
  %t82 = phi i512 [ %t60, %block_0_4197fb ]
  br label %block_0_4198b7
block_0_419810:
  %t83 = phi i64 [ %t118, %block_0_419823 ]
  %t84 = phi i64 [ %t119, %block_0_419823 ]
  %t85 = phi i64 [ %t120, %block_0_419823 ]
  %t86 = phi i64 [ %t121, %block_0_419823 ]
  %t87 = phi i64 [ %t122, %block_0_419823 ]
  %t88 = phi i64 [ %t123, %block_0_419823 ]
  %t89 = phi i64 [ %t124, %block_0_419823 ]
  %t90 = phi i512 [ %t125, %block_0_419823 ]
  %t91 = phi i512 [ %t126, %block_0_419823 ]
  %t92 = phi i512 [ %t127, %block_0_419823 ]
  %t93 = phi i512 [ %t128, %block_0_419823 ]
  %t94 = phi i512 [ %t129, %block_0_419823 ]
  %t95 = phi i512 [ %t130, %block_0_419823 ]
  %t96 = phi i512 [ %t131, %block_0_419823 ]
  %t97 = phi i512 [ %t132, %block_0_419823 ]
  ; r94 := (trunc r79 32)
  %t98 = trunc i64 %t83 to i32
  ; r95 := (bv_add r94 (0xffffffff : bv 32))
  %t99 = add i32 %t98, 4294967295
  ; r96 := (uext r95 64)
  %t100 = zext i32 %t99 to i64
  ; r97 := (eq r94 (0x0 : bv 32))
  %t101 = icmp eq i32 %t98, 0
  br i1 %t101, label %block_0_4198b7, label %block_0_41981c
block_0_41981c:
  %t102 = phi i64 [ %t100, %block_0_419810 ]
  %t103 = phi i64 [ %t84, %block_0_419810 ]
  %t104 = phi i64 [ %t85, %block_0_419810 ]
  %t105 = phi i64 [ %t86, %block_0_419810 ]
  %t106 = phi i64 [ %t87, %block_0_419810 ]
  %t107 = phi i64 [ %t88, %block_0_419810 ]
  %t108 = phi i64 [ %t89, %block_0_419810 ]
  %t109 = phi i512 [ %t90, %block_0_419810 ]
  %t110 = phi i512 [ %t91, %block_0_419810 ]
  %t111 = phi i512 [ %t92, %block_0_419810 ]
  %t112 = phi i512 [ %t93, %block_0_419810 ]
  %t113 = phi i512 [ %t94, %block_0_419810 ]
  %t114 = phi i512 [ %t95, %block_0_419810 ]
  %t115 = phi i512 [ %t96, %block_0_419810 ]
  %t116 = phi i512 [ %t97, %block_0_419810 ]
  ; r113 := (bv_add r101 (0x130 : bv 64))
  %t117 = add i64 %t105, 304
  br label %block_0_419823
block_0_419823:
  %t118 = phi i64 [ %t69, %block_0_4197fb ], [ %t102, %block_0_41981c ]
  %t119 = phi i64 [ %t48, %block_0_4197fb ], [ %t103, %block_0_41981c ]
  %t120 = phi i64 [ %t49, %block_0_4197fb ], [ %t104, %block_0_41981c ]
  %t121 = phi i64 [ %t66, %block_0_4197fb ], [ %t117, %block_0_41981c ]
  %t122 = phi i64 [ %t50, %block_0_4197fb ], [ %t106, %block_0_41981c ]
  %t123 = phi i64 [ %t51, %block_0_4197fb ], [ %t107, %block_0_41981c ]
  %t124 = phi i64 [ %t52, %block_0_4197fb ], [ %t108, %block_0_41981c ]
  %t125 = phi i512 [ %t53, %block_0_4197fb ], [ %t109, %block_0_41981c ]
  %t126 = phi i512 [ %t54, %block_0_4197fb ], [ %t110, %block_0_41981c ]
  %t127 = phi i512 [ %t55, %block_0_4197fb ], [ %t111, %block_0_41981c ]
  %t128 = phi i512 [ %t56, %block_0_4197fb ], [ %t112, %block_0_41981c ]
  %t129 = phi i512 [ %t57, %block_0_4197fb ], [ %t113, %block_0_41981c ]
  %t130 = phi i512 [ %t58, %block_0_4197fb ], [ %t114, %block_0_41981c ]
  %t131 = phi i512 [ %t59, %block_0_4197fb ], [ %t115, %block_0_41981c ]
  %t132 = phi i512 [ %t60, %block_0_4197fb ], [ %t116, %block_0_41981c ]
  ; r129 := (bv_add r117 (0x10 : bv 64))
  %t133 = add i64 %t121, 16
  ; r130 := (read r129 (bv 16))
  %t134 = inttoptr i64 %t133 to i16*
  %t135 = load i16, i16* %t134
  ; r131 := (eq r130 (0x0 : bv 16))
  %t136 = icmp eq i16 %t135, 0
  br i1 %t136, label %block_0_41982a, label %block_0_419810
block_0_41982a:
  %t137 = phi i64 [ %t120, %block_0_419823 ], [ %t255, %block_0_4198eb ]
  %t138 = phi i64 [ %t121, %block_0_419823 ], [ %t263, %block_0_4198eb ]
  %t139 = phi i64 [ %t122, %block_0_419823 ], [ %t257, %block_0_4198eb ]
  %t140 = phi i512 [ %t125, %block_0_419823 ], [ %t258, %block_0_4198eb ]
  ; r136 := (read (0x6356e8 : bv 64) (bv 32))
  %t141 = inttoptr i64 6510312 to i32*
  %t142 = load i32, i32* %t141
  ; r137 := (bv_add r133 (0x10 : bv 64))
  %t143 = add i64 %t138, 16
  ; write r137 (0x1 : bv 16)
  %t144 = inttoptr i64 %t143 to i16*
  store i16 1, i16* %t144
  ; r138 := (eq r136 (0x0 : bv 32))
  %t145 = icmp eq i32 %t142, 0
  br i1 %t145, label %block_0_41983e, label %block_0_419925
block_0_41983e:
  %t146 = phi i64 [ %t138, %block_0_41982a ], [ %t338, %block_0_41992f ]
  %t147 = phi i512 [ %t140, %block_0_41982a ], [ %t339, %block_0_41992f ]
  ; r141 := (bv_add r139 (0xb0 : bv 64))
  %t148 = add i64 %t146, 176
  ; write r139 (0x0 : bv 64)
  %t149 = inttoptr i64 %t146 to i64*
  store i64 0, i64* %t149
  ; r142 := (bv_add r139 (0xc : bv 64))
  %t150 = add i64 %t146, 12
  ; write r142 (0x0 : bv 32)
  %t151 = inttoptr i64 %t150 to i32*
  store i32 0, i32* %t151
  ; r143 := (bv_add r139 (0x8 : bv 64))
  %t152 = add i64 %t146, 8
  ; write r143 (0x0 : bv 32)
  %t153 = inttoptr i64 %t152 to i32*
  store i32 0, i32* %t153
  ; r144 := (bv_add r139 (0x18 : bv 64))
  %t154 = add i64 %t146, 24
  ; write r144 (0x0 : bv 64)
  %t155 = inttoptr i64 %t154 to i64*
  store i64 0, i64* %t155
  ; r145 := (bv_add r139 (0x20 : bv 64))
  %t156 = add i64 %t146, 32
  ; write r145 (0x0 : bv 32)
  %t157 = inttoptr i64 %t156 to i32*
  store i32 0, i32* %t157
  ; r146 := (bv_add r139 (0x28 : bv 64))
  %t158 = add i64 %t146, 40
  ; write r146 (0x0 : bv 32)
  %t159 = inttoptr i64 %t158 to i32*
  store i32 0, i32* %t159
  ; r147 := (bv_add r139 (0x12 : bv 64))
  %t160 = add i64 %t146, 18
  ; write r147 (0xffff : bv 16)
  %t161 = inttoptr i64 %t160 to i16*
  store i16 65535, i16* %t161
  ; r148 := (bv_add r139 (0x58 : bv 64))
  %t162 = add i64 %t146, 88
  ; write r148 (0x0 : bv 64)
  %t163 = inttoptr i64 %t162 to i64*
  store i64 0, i64* %t163
  ; r149 := (bv_add r139 (0x60 : bv 64))
  %t164 = add i64 %t146, 96
  ; write r149 (0x0 : bv 32)
  %t165 = inttoptr i64 %t164 to i32*
  store i32 0, i32* %t165
  ; r150 := (bv_add r139 (0x78 : bv 64))
  %t166 = add i64 %t146, 120
  ; write r150 (0x0 : bv 64)
  %t167 = inttoptr i64 %t166 to i64*
  store i64 0, i64* %t167
  ; r151 := (bv_add r139 (0x80 : bv 64))
  %t168 = add i64 %t146, 128
  ; write r151 (0x0 : bv 32)
  %t169 = inttoptr i64 %t168 to i32*
  store i32 0, i32* %t169
  ; r152 := (bv_add r139 (0xac : bv 64))
  %t170 = add i64 %t146, 172
  ; write r152 (0x0 : bv 32)
  %t171 = inttoptr i64 %t170 to i32*
  store i32 0, i32* %t171
  ; r153 := (bitcast r140 (vec 8 double))
  %t172 = bitcast i512 %t147 to <8 x double>
  ; r154 := call memset(r141, (0x0 : bv 64), (0x80 : bv 64), r153)
  %t173 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @memset(i64 %t148, i64 0, i64 128, <8 x double> %t172)
  ; r155 := (tuple_field r154 0)
  %t174 = extractvalue { i64, i64, <8 x double> } %t173, 0
  ; r156 := (tuple_field r154 1)
  %t175 = extractvalue { i64, i64, <8 x double> } %t173, 1
  ; r157 := (tuple_field r154 2)
  %t176 = extractvalue { i64, i64, <8 x double> } %t173, 2
  ; r158 := (bitcast r157 (bv 512))
  %t177 = bitcast <8 x double> %t176 to i512
  br label %block_0_4198ad
block_0_4198ad:
  %t178 = phi i64 [ %t175, %block_0_41983e ], [ %t244, %block_0_4198d9 ]
  %t179 = phi i64 [ %t146, %block_0_41983e ], [ %t245, %block_0_4198d9 ]
  %t180 = phi i512 [ %t177, %block_0_41983e ], [ %t246, %block_0_4198d9 ]
  ; r162 := (bitcast r161 (vec 8 double))
  %t181 = bitcast i512 %t180 to <8 x double>
  ; r163 := (tuple r160 r159 r162)
  %t182 = insertvalue { i64, i64, <8 x double> } undef, i64 %t179, 0
  %t183 = insertvalue { i64, i64, <8 x double> } %t182, i64 %t178, 1
  %t184 = insertvalue { i64, i64, <8 x double> } %t183, <8 x double> %t181, 2
  ret { i64, i64, <8 x double> } %t184
block_0_4198b7:
  %t185 = phi i64 [ %t70, %block_0_419807 ], [ %t84, %block_0_419810 ]
  %t186 = phi i64 [ %t71, %block_0_419807 ], [ %t85, %block_0_419810 ]
  %t187 = phi i64 [ %t72, %block_0_419807 ], [ %t87, %block_0_419810 ]
  %t188 = phi i64 [ %t73, %block_0_419807 ], [ %t88, %block_0_419810 ]
  %t189 = phi i64 [ %t74, %block_0_419807 ], [ %t89, %block_0_419810 ]
  %t190 = phi i512 [ %t75, %block_0_419807 ], [ %t90, %block_0_419810 ]
  %t191 = phi i512 [ %t76, %block_0_419807 ], [ %t91, %block_0_419810 ]
  %t192 = phi i512 [ %t77, %block_0_419807 ], [ %t92, %block_0_419810 ]
  %t193 = phi i512 [ %t78, %block_0_419807 ], [ %t93, %block_0_419810 ]
  %t194 = phi i512 [ %t79, %block_0_419807 ], [ %t94, %block_0_419810 ]
  %t195 = phi i512 [ %t80, %block_0_419807 ], [ %t95, %block_0_419810 ]
  %t196 = phi i512 [ %t81, %block_0_419807 ], [ %t96, %block_0_419810 ]
  %t197 = phi i512 [ %t82, %block_0_419807 ], [ %t97, %block_0_419810 ]
  ; r177 := (read r165 (bv 64))
  %t198 = inttoptr i64 %t186 to i64*
  %t199 = load i64, i64* %t198
  ; r178 := (eq r177 (0x0 : bv 64))
  %t200 = icmp eq i64 %t199, 0
  br i1 %t200, label %block_0_4198c3, label %block_0_4197fb
block_0_4198c3:
  %t201 = phi i64 [ %t185, %block_0_4198b7 ]
  %t202 = phi i64 [ %t199, %block_0_4198b7 ]
  %t203 = phi i64 [ %t187, %block_0_4198b7 ]
  %t204 = phi i64 [ %t188, %block_0_4198b7 ]
  %t205 = phi i64 [ %t189, %block_0_4198b7 ]
  %t206 = phi i512 [ %t190, %block_0_4198b7 ]
  %t207 = phi i512 [ %t191, %block_0_4198b7 ]
  %t208 = phi i512 [ %t192, %block_0_4198b7 ]
  %t209 = phi i512 [ %t193, %block_0_4198b7 ]
  %t210 = phi i512 [ %t194, %block_0_4198b7 ]
  %t211 = phi i512 [ %t195, %block_0_4198b7 ]
  %t212 = phi i512 [ %t196, %block_0_4198b7 ]
  %t213 = phi i512 [ %t197, %block_0_4198b7 ]
  ; r192 := (read (0x6356e8 : bv 64) (bv 32))
  %t214 = inttoptr i64 6510312 to i32*
  %t215 = load i32, i32* %t214
  ; r193 := (eq r192 (0x0 : bv 32))
  %t216 = icmp eq i32 %t215, 0
  br i1 %t216, label %block_0_4198cd, label %block_0_419935
block_0_4198cd:
  %t217 = phi i64 [ %t201, %block_0_4198c3 ], [ %t359, %block_0_41993f ]
  %t218 = phi i64 [ %t202, %block_0_4198c3 ], [ %t360, %block_0_41993f ]
  %t219 = phi i64 [ %t203, %block_0_4198c3 ], [ %t361, %block_0_41993f ]
  %t220 = phi i64 [ %t204, %block_0_4198c3 ], [ %t362, %block_0_41993f ]
  %t221 = phi i64 [ %t205, %block_0_4198c3 ], [ %t363, %block_0_41993f ]
  %t222 = phi i512 [ %t206, %block_0_4198c3 ], [ %t364, %block_0_41993f ]
  %t223 = phi i512 [ %t207, %block_0_4198c3 ], [ %t365, %block_0_41993f ]
  %t224 = phi i512 [ %t208, %block_0_4198c3 ], [ %t366, %block_0_41993f ]
  %t225 = phi i512 [ %t209, %block_0_4198c3 ], [ %t367, %block_0_41993f ]
  %t226 = phi i512 [ %t210, %block_0_4198c3 ], [ %t368, %block_0_41993f ]
  %t227 = phi i512 [ %t211, %block_0_4198c3 ], [ %t369, %block_0_41993f ]
  %t228 = phi i512 [ %t212, %block_0_4198c3 ], [ %t370, %block_0_41993f ]
  %t229 = phi i512 [ %t213, %block_0_4198c3 ], [ %t371, %block_0_41993f ]
  ; r207 := (bitcast r199 (vec 8 double))
  %t230 = bitcast i512 %t222 to <8 x double>
  ; r208 := (bitcast r200 (vec 8 double))
  %t231 = bitcast i512 %t223 to <8 x double>
  ; r209 := (bitcast r201 (vec 8 double))
  %t232 = bitcast i512 %t224 to <8 x double>
  ; r210 := (bitcast r202 (vec 8 double))
  %t233 = bitcast i512 %t225 to <8 x double>
  ; r211 := (bitcast r203 (vec 8 double))
  %t234 = bitcast i512 %t226 to <8 x double>
  ; r212 := (bitcast r204 (vec 8 double))
  %t235 = bitcast i512 %t227 to <8 x double>
  ; r213 := (bitcast r205 (vec 8 double))
  %t236 = bitcast i512 %t228 to <8 x double>
  ; r214 := (bitcast r206 (vec 8 double))
  %t237 = bitcast i512 %t229 to <8 x double>
  ; r215 := call moreglue((0xa : bv 64), r196, r195, r194, r197, r198, r207, r208, r209, r210, r211, r212, r213, r214)
  %t238 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @moreglue(i64 10, i64 %t219, i64 %t218, i64 %t217, i64 %t220, i64 %t221, <8 x double> %t230, <8 x double> %t231, <8 x double> %t232, <8 x double> %t233, <8 x double> %t234, <8 x double> %t235, <8 x double> %t236, <8 x double> %t237)
  ; r216 := (tuple_field r215 0)
  %t239 = extractvalue { i64, i64, <8 x double> } %t238, 0
  ; r217 := (tuple_field r215 1)
  %t240 = extractvalue { i64, i64, <8 x double> } %t238, 1
  ; r218 := (tuple_field r215 2)
  %t241 = extractvalue { i64, i64, <8 x double> } %t238, 2
  ; r219 := (bitcast r218 (bv 512))
  %t242 = bitcast <8 x double> %t241 to i512
  br label %block_0_4198d9
block_0_4198d9:
  %t243 = phi i64 [ %t239, %block_0_4198cd ]
  %t244 = phi i64 [ %t240, %block_0_4198cd ]
  %t245 = phi i64 [ 0, %block_0_4198cd ]
  %t246 = phi i512 [ %t242, %block_0_4198cd ]
  ; r224 := (eq r220 (0x0 : bv 64))
  %t247 = icmp eq i64 %t243, 0
  br i1 %t247, label %block_0_4198ad, label %block_0_4198e1
block_0_4198e1:
  %t248 = phi i64 [ %t243, %block_0_4198d9 ]
  %t249 = phi i64 [ %t244, %block_0_4198d9 ]
  %t250 = phi i512 [ %t246, %block_0_4198d9 ]
  ; r228 := (read (0x6356e8 : bv 64) (bv 32))
  %t251 = inttoptr i64 6510312 to i32*
  %t252 = load i32, i32* %t251
  ; r229 := (uext r228 64)
  %t253 = zext i32 %t252 to i64
  ; r230 := (eq r228 (0x0 : bv 32))
  %t254 = icmp eq i32 %t252, 0
  br i1 %t254, label %block_0_4198eb, label %block_0_419942
block_0_4198eb:
  %t255 = phi i64 [ %t249, %block_0_4198e1 ], [ %t382, %block_0_41994c ]
  %t256 = phi i64 [ %t248, %block_0_4198e1 ], [ %t383, %block_0_41994c ]
  %t257 = phi i64 [ %t253, %block_0_4198e1 ], [ %t384, %block_0_41994c ]
  %t258 = phi i512 [ %t250, %block_0_4198e1 ], [ %t385, %block_0_41994c ]
  ; r235 := (read (0x6312b8 : bv 64) (bv 64))
  %t259 = inttoptr i64 6492856 to i64*
  %t260 = load i64, i64* %t259
  ; r236 := (bv_add r232 (0x10 : bv 64))
  %t261 = add i64 %t256, 16
  ; r237 := (read r236 (bv 64))
  %t262 = inttoptr i64 %t261 to i64*
  %t263 = load i64, i64* %t262
  ; write r235 r232
  %t264 = inttoptr i64 %t260 to i64*
  store i64 %t256, i64* %t264
  ; write (0x6312b8 : bv 64) r232
  %t265 = inttoptr i64 6492856 to i64*
  store i64 %t256, i64* %t265
  br label %block_0_41982a
block_0_419905:
  %t266 = phi i64 [ %t20, %block_0_4197e6 ]
  %t267 = phi i64 [ %t21, %block_0_4197e6 ]
  %t268 = phi i64 [ %t22, %block_0_4197e6 ]
  %t269 = phi i64 [ %t34, %block_0_4197e6 ]
  %t270 = phi i64 [ %t23, %block_0_4197e6 ]
  %t271 = phi i512 [ %t24, %block_0_4197e6 ]
  %t272 = phi i512 [ %t25, %block_0_4197e6 ]
  %t273 = phi i512 [ %t26, %block_0_4197e6 ]
  %t274 = phi i512 [ %t27, %block_0_4197e6 ]
  %t275 = phi i512 [ %t28, %block_0_4197e6 ]
  %t276 = phi i512 [ %t29, %block_0_4197e6 ]
  %t277 = phi i512 [ %t30, %block_0_4197e6 ]
  %t278 = phi i512 [ %t31, %block_0_4197e6 ]
  ; r251 := (bitcast r243 (vec 8 double))
  %t279 = bitcast i512 %t271 to <8 x double>
  ; r252 := call _spinlock_stub((0x63f860 : bv 64), r240, r239, r251)
  %t280 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6551648, i64 %t268, i64 %t267, <8 x double> %t279)
  ; r253 := (tuple_field r252 0)
  %t281 = extractvalue { i64, i64, <8 x double> } %t280, 0
  ; r254 := (tuple_field r252 1)
  %t282 = extractvalue { i64, i64, <8 x double> } %t280, 1
  ; r255 := (tuple_field r252 2)
  %t283 = extractvalue { i64, i64, <8 x double> } %t280, 2
  ; r256 := (bitcast r255 (bv 512))
  %t284 = bitcast <8 x double> %t283 to i512
  br label %block_0_41990f
block_0_41990f:
  %t285 = phi i64 [ %t266, %block_0_419905 ]
  %t286 = phi i64 [ %t268, %block_0_419905 ]
  %t287 = phi i64 [ %t269, %block_0_419905 ]
  %t288 = phi i64 [ %t270, %block_0_419905 ]
  %t289 = phi i512 [ %t284, %block_0_419905 ]
  %t290 = phi i512 [ %t272, %block_0_419905 ]
  %t291 = phi i512 [ %t273, %block_0_419905 ]
  %t292 = phi i512 [ %t274, %block_0_419905 ]
  %t293 = phi i512 [ %t275, %block_0_419905 ]
  %t294 = phi i512 [ %t276, %block_0_419905 ]
  %t295 = phi i512 [ %t277, %block_0_419905 ]
  %t296 = phi i512 [ %t278, %block_0_419905 ]
  br label %block_0_4197f6
block_0_419914:
  %t297 = phi i64 [ %arg3, %block_0_4197d0 ]
  %t298 = phi i64 [ %arg2, %block_0_4197d0 ]
  %t299 = phi i64 [ %arg1, %block_0_4197d0 ]
  %t300 = phi i64 [ %arg0, %block_0_4197d0 ]
  %t301 = phi i64 [ %t2, %block_0_4197d0 ]
  %t302 = phi i512 [ %t4, %block_0_4197d0 ]
  %t303 = phi i512 [ %t5, %block_0_4197d0 ]
  %t304 = phi i512 [ %t6, %block_0_4197d0 ]
  %t305 = phi i512 [ %t7, %block_0_4197d0 ]
  %t306 = phi i512 [ %t8, %block_0_4197d0 ]
  %t307 = phi i512 [ %t9, %block_0_4197d0 ]
  %t308 = phi i512 [ %t10, %block_0_4197d0 ]
  %t309 = phi i512 [ %t11, %block_0_4197d0 ]
  ; r282 := (bitcast r274 (vec 8 double))
  %t310 = bitcast i512 %t302 to <8 x double>
  ; r283 := call __sinit(r272, r271, r270, r282)
  %t311 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__sinit(i64 %t300, i64 %t299, i64 %t298, <8 x double> %t310)
  ; r284 := (tuple_field r283 0)
  %t312 = extractvalue { i64, i64, <8 x double> } %t311, 0
  ; r285 := (tuple_field r283 1)
  %t313 = extractvalue { i64, i64, <8 x double> } %t311, 1
  ; r286 := (tuple_field r283 2)
  %t314 = extractvalue { i64, i64, <8 x double> } %t311, 2
  ; r287 := (bitcast r286 (bv 512))
  %t315 = bitcast <8 x double> %t314 to i512
  br label %block_0_419919
block_0_419919:
  %t316 = phi i64 [ %t297, %block_0_419914 ]
  %t317 = phi i64 [ %t313, %block_0_419914 ]
  %t318 = phi i64 [ %t299, %block_0_419914 ]
  %t319 = phi i64 [ %t301, %block_0_419914 ]
  %t320 = phi i512 [ %t315, %block_0_419914 ]
  %t321 = phi i512 [ %t303, %block_0_419914 ]
  %t322 = phi i512 [ %t304, %block_0_419914 ]
  %t323 = phi i512 [ %t305, %block_0_419914 ]
  %t324 = phi i512 [ %t306, %block_0_419914 ]
  %t325 = phi i512 [ %t307, %block_0_419914 ]
  %t326 = phi i512 [ %t308, %block_0_419914 ]
  %t327 = phi i512 [ %t309, %block_0_419914 ]
  br label %block_0_4197e6
block_0_419925:
  %t328 = phi i64 [ %t137, %block_0_41982a ]
  %t329 = phi i64 [ %t138, %block_0_41982a ]
  %t330 = phi i64 [ %t139, %block_0_41982a ]
  %t331 = phi i512 [ %t140, %block_0_41982a ]
  ; r304 := (bitcast r303 (vec 8 double))
  %t332 = bitcast i512 %t331 to <8 x double>
  ; r305 := call _spinunlock_stub((0x63f860 : bv 64), r302, r300, r304)
  %t333 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6551648, i64 %t330, i64 %t328, <8 x double> %t332)
  ; r306 := (tuple_field r305 0)
  %t334 = extractvalue { i64, i64, <8 x double> } %t333, 0
  ; r307 := (tuple_field r305 1)
  %t335 = extractvalue { i64, i64, <8 x double> } %t333, 1
  ; r308 := (tuple_field r305 2)
  %t336 = extractvalue { i64, i64, <8 x double> } %t333, 2
  ; r309 := (bitcast r308 (bv 512))
  %t337 = bitcast <8 x double> %t336 to i512
  br label %block_0_41992f
block_0_41992f:
  %t338 = phi i64 [ %t329, %block_0_419925 ]
  %t339 = phi i512 [ %t337, %block_0_419925 ]
  br label %block_0_41983e
block_0_419935:
  %t340 = phi i64 [ %t201, %block_0_4198c3 ]
  %t341 = phi i64 [ %t202, %block_0_4198c3 ]
  %t342 = phi i64 [ %t203, %block_0_4198c3 ]
  %t343 = phi i64 [ %t204, %block_0_4198c3 ]
  %t344 = phi i64 [ %t205, %block_0_4198c3 ]
  %t345 = phi i512 [ %t206, %block_0_4198c3 ]
  %t346 = phi i512 [ %t207, %block_0_4198c3 ]
  %t347 = phi i512 [ %t208, %block_0_4198c3 ]
  %t348 = phi i512 [ %t209, %block_0_4198c3 ]
  %t349 = phi i512 [ %t210, %block_0_4198c3 ]
  %t350 = phi i512 [ %t211, %block_0_4198c3 ]
  %t351 = phi i512 [ %t212, %block_0_4198c3 ]
  %t352 = phi i512 [ %t213, %block_0_4198c3 ]
  ; r325 := (bitcast r317 (vec 8 double))
  %t353 = bitcast i512 %t345 to <8 x double>
  ; r326 := call _spinunlock_stub((0x63f860 : bv 64), r314, r313, r325)
  %t354 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinunlock_stub(i64 6551648, i64 %t342, i64 %t341, <8 x double> %t353)
  ; r327 := (tuple_field r326 0)
  %t355 = extractvalue { i64, i64, <8 x double> } %t354, 0
  ; r328 := (tuple_field r326 1)
  %t356 = extractvalue { i64, i64, <8 x double> } %t354, 1
  ; r329 := (tuple_field r326 2)
  %t357 = extractvalue { i64, i64, <8 x double> } %t354, 2
  ; r330 := (bitcast r329 (bv 512))
  %t358 = bitcast <8 x double> %t357 to i512
  br label %block_0_41993f
block_0_41993f:
  %t359 = phi i64 [ %t340, %block_0_419935 ]
  %t360 = phi i64 [ %t356, %block_0_419935 ]
  %t361 = phi i64 [ %t342, %block_0_419935 ]
  %t362 = phi i64 [ %t343, %block_0_419935 ]
  %t363 = phi i64 [ %t344, %block_0_419935 ]
  %t364 = phi i512 [ %t358, %block_0_419935 ]
  %t365 = phi i512 [ %t346, %block_0_419935 ]
  %t366 = phi i512 [ %t347, %block_0_419935 ]
  %t367 = phi i512 [ %t348, %block_0_419935 ]
  %t368 = phi i512 [ %t349, %block_0_419935 ]
  %t369 = phi i512 [ %t350, %block_0_419935 ]
  %t370 = phi i512 [ %t351, %block_0_419935 ]
  %t371 = phi i512 [ %t352, %block_0_419935 ]
  br label %block_0_4198cd
block_0_419942:
  %t372 = phi i64 [ %t248, %block_0_4198e1 ]
  %t373 = phi i64 [ %t249, %block_0_4198e1 ]
  %t374 = phi i64 [ %t253, %block_0_4198e1 ]
  %t375 = phi i512 [ %t250, %block_0_4198e1 ]
  ; r348 := (bitcast r347 (vec 8 double))
  %t376 = bitcast i512 %t375 to <8 x double>
  ; r349 := call _spinlock_stub((0x63f860 : bv 64), r346, r345, r348)
  %t377 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_spinlock_stub(i64 6551648, i64 %t374, i64 %t373, <8 x double> %t376)
  ; r350 := (tuple_field r349 0)
  %t378 = extractvalue { i64, i64, <8 x double> } %t377, 0
  ; r351 := (tuple_field r349 1)
  %t379 = extractvalue { i64, i64, <8 x double> } %t377, 1
  ; r352 := (tuple_field r349 2)
  %t380 = extractvalue { i64, i64, <8 x double> } %t377, 2
  ; r353 := (bitcast r352 (bv 512))
  %t381 = bitcast <8 x double> %t380 to i512
  br label %block_0_41994c
block_0_41994c:
  %t382 = phi i64 [ %t379, %block_0_419942 ]
  %t383 = phi i64 [ %t372, %block_0_419942 ]
  %t384 = phi i64 [ %t374, %block_0_419942 ]
  %t385 = phi i512 [ %t381, %block_0_419942 ]
  br label %block_0_4198eb
}
define { i64, i64, <8 x double> } @__sflush(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419950:
  ; r0 := (bv_add arg0 (0x10 : bv 64))
  %t0 = add i64 %arg0, 16
  ; r1 := (read r0 (bv 16))
  %t1 = inttoptr i64 %t0 to i16*
  %t2 = load i16, i16* %t1
  ; r2 := (sext r1 32)
  %t3 = sext i16 %t2 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (trunc r1 8)
  %t5 = trunc i16 %t2 to i8
  ; r5 := (bv_and r4 (0x8 : bv 8))
  %t6 = and i8 %t5, 8
  ; r6 := (eq r5 (0x0 : bv 8))
  %t7 = icmp eq i8 %t6, 0
  ; r7 := (bitcast arg6 (bv 512))
  %t8 = bitcast <8 x double> %arg6 to i512
  ; r8 := (bitcast arg6 (bv 512))
  %t9 = bitcast <8 x double> %arg6 to i512
  ; r9 := (bitcast arg7 (bv 512))
  %t10 = bitcast <8 x double> %arg7 to i512
  ; r10 := (bitcast arg8 (bv 512))
  %t11 = bitcast <8 x double> %arg8 to i512
  ; r11 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r12 := (bitcast arg10 (bv 512))
  %t13 = bitcast <8 x double> %arg10 to i512
  ; r13 := (bitcast arg11 (bv 512))
  %t14 = bitcast <8 x double> %arg11 to i512
  ; r14 := (bitcast arg12 (bv 512))
  %t15 = bitcast <8 x double> %arg12 to i512
  ; r15 := (bitcast arg13 (bv 512))
  %t16 = bitcast <8 x double> %arg13 to i512
  br i1 %t7, label %block_0_4199b2, label %block_0_419960
block_0_419960:
  %t17 = phi i64 [ %arg3, %block_0_419950 ]
  %t18 = phi i64 [ %t4, %block_0_419950 ]
  %t19 = phi i64 [ %arg0, %block_0_419950 ]
  %t20 = phi i64 [ %arg4, %block_0_419950 ]
  %t21 = phi i64 [ %arg5, %block_0_419950 ]
  %t22 = phi i512 [ %t9, %block_0_419950 ]
  %t23 = phi i512 [ %t10, %block_0_419950 ]
  %t24 = phi i512 [ %t11, %block_0_419950 ]
  %t25 = phi i512 [ %t12, %block_0_419950 ]
  %t26 = phi i512 [ %t13, %block_0_419950 ]
  %t27 = phi i512 [ %t14, %block_0_419950 ]
  %t28 = phi i512 [ %t15, %block_0_419950 ]
  %t29 = phi i512 [ %t16, %block_0_419950 ]
  ; r29 := (bv_add r18 (0x18 : bv 64))
  %t30 = add i64 %t19, 24
  ; r30 := (read r29 (bv 64))
  %t31 = inttoptr i64 %t30 to i64*
  %t32 = load i64, i64* %t31
  ; r31 := (eq r30 (0x0 : bv 64))
  %t33 = icmp eq i64 %t32, 0
  br i1 %t33, label %block_0_4199b2, label %block_0_419969
block_0_419969:
  %t34 = phi i64 [ %t17, %block_0_419960 ]
  %t35 = phi i64 [ %t18, %block_0_419960 ]
  %t36 = phi i64 [ %t32, %block_0_419960 ]
  %t37 = phi i64 [ %t19, %block_0_419960 ]
  %t38 = phi i64 [ %t20, %block_0_419960 ]
  %t39 = phi i64 [ %t21, %block_0_419960 ]
  %t40 = phi i512 [ %t22, %block_0_419960 ]
  %t41 = phi i512 [ %t23, %block_0_419960 ]
  %t42 = phi i512 [ %t24, %block_0_419960 ]
  %t43 = phi i512 [ %t25, %block_0_419960 ]
  %t44 = phi i512 [ %t26, %block_0_419960 ]
  %t45 = phi i512 [ %t27, %block_0_419960 ]
  %t46 = phi i512 [ %t28, %block_0_419960 ]
  %t47 = phi i512 [ %t29, %block_0_419960 ]
  ; r46 := (read r35 (bv 64))
  %t48 = inttoptr i64 %t37 to i64*
  %t49 = load i64, i64* %t48
  ; write r35 r34
  %t50 = inttoptr i64 %t37 to i64*
  store i64 %t36, i64* %t50
  ; r47 := (trunc r46 32)
  %t51 = trunc i64 %t49 to i32
  ; r48 := (trunc r34 32)
  %t52 = trunc i64 %t36 to i32
  ; r49 := (bv_sub r47 r48)
  %t53 = sub i32 %t51, %t52
  ; r50 := (uext r49 64)
  %t54 = zext i32 %t53 to i64
  ; r51 := (trunc r33 32)
  %t55 = trunc i64 %t35 to i32
  ; r52 := (bv_and r51 (0x3 : bv 32))
  %t56 = and i32 %t55, 3
  ; r53 := (eq r52 (0x0 : bv 32))
  %t57 = icmp eq i32 %t56, 0
  ; r54 := (uext r52 64)
  %t58 = zext i32 %t56 to i64
  br i1 %t57, label %block_0_4199b9, label %block_0_41997a
block_0_41997a:
  %t59 = phi i64 [ 0, %block_0_419969 ], [ %t212, %block_0_4199b9 ]
  %t60 = phi i64 [ %t34, %block_0_419969 ], [ %t194, %block_0_4199b9 ]
  %t61 = phi i64 [ %t58, %block_0_419969 ], [ %t195, %block_0_4199b9 ]
  %t62 = phi i64 [ %t54, %block_0_419969 ], [ %t196, %block_0_4199b9 ]
  %t63 = phi i64 [ %t36, %block_0_419969 ], [ %t197, %block_0_4199b9 ]
  %t64 = phi i64 [ %t38, %block_0_419969 ], [ %t199, %block_0_4199b9 ]
  %t65 = phi i64 [ %t39, %block_0_419969 ], [ %t200, %block_0_4199b9 ]
  %t66 = phi i64 [ %t37, %block_0_419969 ], [ %t198, %block_0_4199b9 ]
  %t67 = phi i512 [ %t40, %block_0_419969 ], [ %t201, %block_0_4199b9 ]
  %t68 = phi i512 [ %t41, %block_0_419969 ], [ %t202, %block_0_4199b9 ]
  %t69 = phi i512 [ %t42, %block_0_419969 ], [ %t203, %block_0_4199b9 ]
  %t70 = phi i512 [ %t43, %block_0_419969 ], [ %t204, %block_0_4199b9 ]
  %t71 = phi i512 [ %t44, %block_0_419969 ], [ %t205, %block_0_4199b9 ]
  %t72 = phi i512 [ %t45, %block_0_419969 ], [ %t206, %block_0_4199b9 ]
  %t73 = phi i512 [ %t46, %block_0_419969 ], [ %t207, %block_0_4199b9 ]
  %t74 = phi i512 [ %t47, %block_0_419969 ], [ %t208, %block_0_4199b9 ]
  ; r71 := (trunc r58 32)
  %t75 = trunc i64 %t62 to i32
  ; r72 := (eq r71 (0x0 : bv 32))
  %t76 = icmp eq i32 %t75, 0
  ; r73 := (trunc r55 32)
  %t77 = trunc i64 %t59 to i32
  ; r74 := (bv_add r62 (0xc : bv 64))
  %t78 = add i64 %t66, 12
  ; write r74 r73
  %t79 = inttoptr i64 %t78 to i32*
  store i32 %t77, i32* %t79
  ; r75 := (not r72)
  %t80 = icmp eq i1 %t76, 0
  ; r76 := (bv_sle (0x0 : bv 32) r71)
  %t81 = icmp sle i32 0, %t75
  ; r77 := (and r75 r76)
  %t82 = and i1 %t80, %t81
  br i1 %t82, label %block_0_419990, label %block_0_419983
block_0_419983:
  %t83 = phi i64 [ %t61, %block_0_41997a ]
  %t84 = phi i512 [ %t67, %block_0_41997a ]
  br label %block_0_4199b2
block_0_419985:
  %t85 = phi i64 [ %t155, %block_0_41999d ]
  %t86 = phi i64 [ %t156, %block_0_41999d ]
  %t87 = phi i64 [ %t157, %block_0_41999d ]
  %t88 = phi i64 [ %t158, %block_0_41999d ]
  %t89 = phi i64 [ %t159, %block_0_41999d ]
  %t90 = phi i64 [ %t160, %block_0_41999d ]
  %t91 = phi i64 [ %t161, %block_0_41999d ]
  %t92 = phi i64 [ %t162, %block_0_41999d ]
  %t93 = phi i512 [ %t163, %block_0_41999d ]
  %t94 = phi i512 [ %t164, %block_0_41999d ]
  %t95 = phi i512 [ %t165, %block_0_41999d ]
  %t96 = phi i512 [ %t166, %block_0_41999d ]
  %t97 = phi i512 [ %t167, %block_0_41999d ]
  %t98 = phi i512 [ %t168, %block_0_41999d ]
  %t99 = phi i512 [ %t169, %block_0_41999d ]
  %t100 = phi i512 [ %t170, %block_0_41999d ]
  ; r96 := (trunc r83 32)
  %t101 = trunc i64 %t88 to i32
  ; r97 := (trunc r80 32)
  %t102 = trunc i64 %t85 to i32
  ; r98 := (bv_sub r96 r97)
  %t103 = sub i32 %t101, %t102
  ; r99 := (bv_slt r98 (0x0 : bv 32))
  %t104 = icmp slt i32 %t103, 0
  ; r100 := (eq r96 r97)
  %t105 = icmp eq i32 %t101, %t102
  ; r101 := (uext r98 64)
  %t106 = zext i32 %t103 to i64
  ; r102 := (or r100 r99)
  %t107 = or i1 %t105, %t104
  br i1 %t107, label %block_0_4199b2, label %block_0_41998b
block_0_41998b:
  %t108 = phi i64 [ %t85, %block_0_419985 ]
  %t109 = phi i64 [ %t86, %block_0_419985 ]
  %t110 = phi i64 [ %t106, %block_0_419985 ]
  %t111 = phi i64 [ %t89, %block_0_419985 ]
  %t112 = phi i64 [ %t90, %block_0_419985 ]
  %t113 = phi i64 [ %t91, %block_0_419985 ]
  %t114 = phi i64 [ %t92, %block_0_419985 ]
  %t115 = phi i512 [ %t93, %block_0_419985 ]
  %t116 = phi i512 [ %t94, %block_0_419985 ]
  %t117 = phi i512 [ %t95, %block_0_419985 ]
  %t118 = phi i512 [ %t96, %block_0_419985 ]
  %t119 = phi i512 [ %t97, %block_0_419985 ]
  %t120 = phi i512 [ %t98, %block_0_419985 ]
  %t121 = phi i512 [ %t99, %block_0_419985 ]
  %t122 = phi i512 [ %t100, %block_0_419985 ]
  ; r118 := (trunc r103 32)
  %t123 = trunc i64 %t108 to i32
  ; r119 := (sext r118 64)
  %t124 = sext i32 %t123 to i64
  ; r120 := (bv_add r106 r119)
  %t125 = add i64 %t111, %t124
  br label %block_0_419990
block_0_419990:
  %t126 = phi i64 [ %t60, %block_0_41997a ], [ %t109, %block_0_41998b ]
  %t127 = phi i64 [ %t62, %block_0_41997a ], [ %t110, %block_0_41998b ]
  %t128 = phi i64 [ %t63, %block_0_41997a ], [ %t125, %block_0_41998b ]
  %t129 = phi i64 [ %t64, %block_0_41997a ], [ %t112, %block_0_41998b ]
  %t130 = phi i64 [ %t65, %block_0_41997a ], [ %t113, %block_0_41998b ]
  %t131 = phi i64 [ %t66, %block_0_41997a ], [ %t114, %block_0_41998b ]
  %t132 = phi i512 [ %t67, %block_0_41997a ], [ %t115, %block_0_41998b ]
  %t133 = phi i512 [ %t68, %block_0_41997a ], [ %t116, %block_0_41998b ]
  %t134 = phi i512 [ %t69, %block_0_41997a ], [ %t117, %block_0_41998b ]
  %t135 = phi i512 [ %t70, %block_0_41997a ], [ %t118, %block_0_41998b ]
  %t136 = phi i512 [ %t71, %block_0_41997a ], [ %t119, %block_0_41998b ]
  %t137 = phi i512 [ %t72, %block_0_41997a ], [ %t120, %block_0_41998b ]
  %t138 = phi i512 [ %t73, %block_0_41997a ], [ %t121, %block_0_41998b ]
  %t139 = phi i512 [ %t74, %block_0_41997a ], [ %t122, %block_0_41998b ]
  ; r135 := (trunc r122 32)
  %t140 = trunc i64 %t127 to i32
  ; r136 := (uext r135 64)
  %t141 = zext i32 %t140 to i64
  ; r137 := (bitcast r127 (vec 8 double))
  %t142 = bitcast i512 %t132 to <8 x double>
  ; r138 := (bitcast r128 (vec 8 double))
  %t143 = bitcast i512 %t133 to <8 x double>
  ; r139 := (bitcast r129 (vec 8 double))
  %t144 = bitcast i512 %t134 to <8 x double>
  ; r140 := (bitcast r130 (vec 8 double))
  %t145 = bitcast i512 %t135 to <8 x double>
  ; r141 := (bitcast r131 (vec 8 double))
  %t146 = bitcast i512 %t136 to <8 x double>
  ; r142 := (bitcast r132 (vec 8 double))
  %t147 = bitcast i512 %t137 to <8 x double>
  ; r143 := (bitcast r133 (vec 8 double))
  %t148 = bitcast i512 %t138 to <8 x double>
  ; r144 := (bitcast r134 (vec 8 double))
  %t149 = bitcast i512 %t139 to <8 x double>
  ; r145 := call _swrite(r126, r123, r136, r121, r124, r125, r137, r138, r139, r140, r141, r142, r143, r144)
  %t150 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_swrite(i64 %t131, i64 %t128, i64 %t141, i64 %t126, i64 %t129, i64 %t130, <8 x double> %t142, <8 x double> %t143, <8 x double> %t144, <8 x double> %t145, <8 x double> %t146, <8 x double> %t147, <8 x double> %t148, <8 x double> %t149)
  ; r146 := (tuple_field r145 0)
  %t151 = extractvalue { i64, i64, <8 x double> } %t150, 0
  ; r147 := (tuple_field r145 1)
  %t152 = extractvalue { i64, i64, <8 x double> } %t150, 1
  ; r148 := (tuple_field r145 2)
  %t153 = extractvalue { i64, i64, <8 x double> } %t150, 2
  ; r149 := (bitcast r148 (bv 512))
  %t154 = bitcast <8 x double> %t153 to i512
  br label %block_0_41999d
block_0_41999d:
  %t155 = phi i64 [ %t151, %block_0_419990 ]
  %t156 = phi i64 [ %t126, %block_0_419990 ]
  %t157 = phi i64 [ %t152, %block_0_419990 ]
  %t158 = phi i64 [ %t127, %block_0_419990 ]
  %t159 = phi i64 [ %t128, %block_0_419990 ]
  %t160 = phi i64 [ %t129, %block_0_419990 ]
  %t161 = phi i64 [ %t130, %block_0_419990 ]
  %t162 = phi i64 [ %t131, %block_0_419990 ]
  %t163 = phi i512 [ %t154, %block_0_419990 ]
  %t164 = phi i512 [ %t133, %block_0_419990 ]
  %t165 = phi i512 [ %t134, %block_0_419990 ]
  %t166 = phi i512 [ %t135, %block_0_419990 ]
  %t167 = phi i512 [ %t136, %block_0_419990 ]
  %t168 = phi i512 [ %t137, %block_0_419990 ]
  %t169 = phi i512 [ %t138, %block_0_419990 ]
  %t170 = phi i512 [ %t139, %block_0_419990 ]
  ; r166 := (trunc r150 32)
  %t171 = trunc i64 %t155 to i32
  ; r167 := (eq r166 (0x0 : bv 32))
  %t172 = icmp eq i32 %t171, 0
  ; r168 := (not r167)
  %t173 = icmp eq i1 %t172, 0
  ; r169 := (bv_sle (0x0 : bv 32) r166)
  %t174 = icmp sle i32 0, %t171
  ; r170 := (and r168 r169)
  %t175 = and i1 %t173, %t174
  br i1 %t175, label %block_0_419985, label %block_0_4199a1
block_0_4199a1:
  %t176 = phi i64 [ %t157, %block_0_41999d ]
  %t177 = phi i64 [ %t162, %block_0_41999d ]
  %t178 = phi i512 [ %t163, %block_0_41999d ]
  ; r174 := (bv_add r172 (0x10 : bv 64))
  %t179 = add i64 %t177, 16
  ; r175 := (read r174 (bv 16))
  %t180 = inttoptr i64 %t179 to i16*
  %t181 = load i16, i16* %t180
  ; r176 := (bv_or r175 (0x40 : bv 16))
  %t182 = or i16 %t181, 64
  ; write r174 r176
  %t183 = inttoptr i64 %t179 to i16*
  store i16 %t182, i16* %t183
  ; r177 := (bitcast r173 (vec 8 double))
  %t184 = bitcast i512 %t178 to <8 x double>
  ; r178 := (tuple (0xffffffff : bv 64) r171 r177)
  %t185 = insertvalue { i64, i64, <8 x double> } undef, i64 4294967295, 0
  %t186 = insertvalue { i64, i64, <8 x double> } %t185, i64 %t176, 1
  %t187 = insertvalue { i64, i64, <8 x double> } %t186, <8 x double> %t184, 2
  ret { i64, i64, <8 x double> } %t187
block_0_4199b2:
  %t188 = phi i64 [ %t4, %block_0_419950 ], [ %t18, %block_0_419960 ], [ %t83, %block_0_419983 ], [ %t87, %block_0_419985 ]
  %t189 = phi i512 [ %t8, %block_0_419950 ], [ %t22, %block_0_419960 ], [ %t84, %block_0_419983 ], [ %t93, %block_0_419985 ]
  ; r181 := (bitcast r180 (vec 8 double))
  %t190 = bitcast i512 %t189 to <8 x double>
  ; r182 := (tuple (0x0 : bv 64) r179 r181)
  %t191 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t192 = insertvalue { i64, i64, <8 x double> } %t191, i64 %t188, 1
  %t193 = insertvalue { i64, i64, <8 x double> } %t192, <8 x double> %t190, 2
  ret { i64, i64, <8 x double> } %t193
block_0_4199b9:
  %t194 = phi i64 [ %t34, %block_0_419969 ]
  %t195 = phi i64 [ %t58, %block_0_419969 ]
  %t196 = phi i64 [ %t54, %block_0_419969 ]
  %t197 = phi i64 [ %t36, %block_0_419969 ]
  %t198 = phi i64 [ %t37, %block_0_419969 ]
  %t199 = phi i64 [ %t38, %block_0_419969 ]
  %t200 = phi i64 [ %t39, %block_0_419969 ]
  %t201 = phi i512 [ %t40, %block_0_419969 ]
  %t202 = phi i512 [ %t41, %block_0_419969 ]
  %t203 = phi i512 [ %t42, %block_0_419969 ]
  %t204 = phi i512 [ %t43, %block_0_419969 ]
  %t205 = phi i512 [ %t44, %block_0_419969 ]
  %t206 = phi i512 [ %t45, %block_0_419969 ]
  %t207 = phi i512 [ %t46, %block_0_419969 ]
  %t208 = phi i512 [ %t47, %block_0_419969 ]
  ; r198 := (bv_add r187 (0x20 : bv 64))
  %t209 = add i64 %t198, 32
  ; r199 := (read r198 (bv 32))
  %t210 = inttoptr i64 %t209 to i32*
  %t211 = load i32, i32* %t210
  ; r200 := (uext r199 64)
  %t212 = zext i32 %t211 to i64
  br label %block_0_41997a
}
define { i64, i64, <8 x double> } @__fflush(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_4199c0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg6 (bv 512))
  %t1 = bitcast <8 x double> %arg6 to i512
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast arg8 (bv 512))
  %t3 = bitcast <8 x double> %arg8 to i512
  ; r4 := (bitcast arg9 (bv 512))
  %t4 = bitcast <8 x double> %arg9 to i512
  ; r5 := (bitcast arg10 (bv 512))
  %t5 = bitcast <8 x double> %arg10 to i512
  ; r6 := (bitcast arg11 (bv 512))
  %t6 = bitcast <8 x double> %arg11 to i512
  ; r7 := (bitcast arg12 (bv 512))
  %t7 = bitcast <8 x double> %arg12 to i512
  ; r8 := (bitcast arg13 (bv 512))
  %t8 = bitcast <8 x double> %arg13 to i512
  ; r9 := (bitcast arg6 (bv 512))
  %t9 = bitcast <8 x double> %arg6 to i512
  ; r10 := (bitcast arg7 (bv 512))
  %t10 = bitcast <8 x double> %arg7 to i512
  ; r11 := (bitcast arg8 (bv 512))
  %t11 = bitcast <8 x double> %arg8 to i512
  ; r12 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r13 := (bitcast arg10 (bv 512))
  %t13 = bitcast <8 x double> %arg10 to i512
  ; r14 := (bitcast arg11 (bv 512))
  %t14 = bitcast <8 x double> %arg11 to i512
  ; r15 := (bitcast arg12 (bv 512))
  %t15 = bitcast <8 x double> %arg12 to i512
  ; r16 := (bitcast arg13 (bv 512))
  %t16 = bitcast <8 x double> %arg13 to i512
  br i1 %t0, label %block_0_4199ef, label %block_0_4199c9
block_0_4199c9:
  %t17 = phi i64 [ %arg3, %block_0_4199c0 ]
  %t18 = phi i64 [ %arg2, %block_0_4199c0 ]
  %t19 = phi i64 [ %arg1, %block_0_4199c0 ]
  %t20 = phi i64 [ %arg0, %block_0_4199c0 ]
  %t21 = phi i64 [ %arg4, %block_0_4199c0 ]
  %t22 = phi i64 [ %arg5, %block_0_4199c0 ]
  %t23 = phi i512 [ %t9, %block_0_4199c0 ]
  %t24 = phi i512 [ %t10, %block_0_4199c0 ]
  %t25 = phi i512 [ %t11, %block_0_4199c0 ]
  %t26 = phi i512 [ %t12, %block_0_4199c0 ]
  %t27 = phi i512 [ %t13, %block_0_4199c0 ]
  %t28 = phi i512 [ %t14, %block_0_4199c0 ]
  %t29 = phi i512 [ %t15, %block_0_4199c0 ]
  %t30 = phi i512 [ %t16, %block_0_4199c0 ]
  ; r31 := (bv_add r20 (0x10 : bv 64))
  %t31 = add i64 %t20, 16
  ; r32 := (read r31 (bv 16))
  %t32 = inttoptr i64 %t31 to i16*
  %t33 = load i16, i16* %t32
  ; r33 := (trunc r32 8)
  %t34 = trunc i16 %t33 to i8
  ; r34 := (bv_and r33 (0x18 : bv 8))
  %t35 = and i8 %t34, 24
  ; r35 := (eq r34 (0x0 : bv 8))
  %t36 = icmp eq i8 %t35, 0
  br i1 %t36, label %block_0_4199d1, label %block_0_4199e6
block_0_4199d1:
  %t37 = phi i64 [ %t18, %block_0_4199c9 ]
  %t38 = phi i64 [ %t19, %block_0_4199c9 ]
  %t39 = phi i64 [ %t20, %block_0_4199c9 ]
  %t40 = phi i512 [ %t23, %block_0_4199c9 ]
  ; r40 := (bitcast r39 (vec 8 double))
  %t41 = bitcast i512 %t40 to <8 x double>
  ; r41 := call __error_unthreaded(r38, r37, r36, r40)
  %t42 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t39, i64 %t38, i64 %t37, <8 x double> %t41)
  ; r42 := (tuple_field r41 0)
  %t43 = extractvalue { i64, i64, <8 x double> } %t42, 0
  ; r43 := (tuple_field r41 1)
  %t44 = extractvalue { i64, i64, <8 x double> } %t42, 1
  ; r44 := (tuple_field r41 2)
  %t45 = extractvalue { i64, i64, <8 x double> } %t42, 2
  ; r45 := (bitcast r44 (bv 512))
  %t46 = bitcast <8 x double> %t45 to i512
  br label %block_0_4199d6
block_0_4199d6:
  %t47 = phi i64 [ %t43, %block_0_4199d1 ]
  %t48 = phi i64 [ %t44, %block_0_4199d1 ]
  %t49 = phi i512 [ %t46, %block_0_4199d1 ]
  ; write r46 (0x9 : bv 32)
  %t50 = inttoptr i64 %t47 to i32*
  store i32 9, i32* %t50
  ; r49 := (bitcast r48 (vec 8 double))
  %t51 = bitcast i512 %t49 to <8 x double>
  ; r50 := (tuple (0xffffffff : bv 64) r47 r49)
  %t52 = insertvalue { i64, i64, <8 x double> } undef, i64 4294967295, 0
  %t53 = insertvalue { i64, i64, <8 x double> } %t52, i64 %t48, 1
  %t54 = insertvalue { i64, i64, <8 x double> } %t53, <8 x double> %t51, 2
  ret { i64, i64, <8 x double> } %t54
block_0_4199e6:
  %t55 = phi i64 [ %t17, %block_0_4199c9 ]
  %t56 = phi i64 [ %t18, %block_0_4199c9 ]
  %t57 = phi i64 [ %t19, %block_0_4199c9 ]
  %t58 = phi i64 [ %t20, %block_0_4199c9 ]
  %t59 = phi i64 [ %t21, %block_0_4199c9 ]
  %t60 = phi i64 [ %t22, %block_0_4199c9 ]
  %t61 = phi i512 [ %t23, %block_0_4199c9 ]
  %t62 = phi i512 [ %t24, %block_0_4199c9 ]
  %t63 = phi i512 [ %t25, %block_0_4199c9 ]
  %t64 = phi i512 [ %t26, %block_0_4199c9 ]
  %t65 = phi i512 [ %t27, %block_0_4199c9 ]
  %t66 = phi i512 [ %t28, %block_0_4199c9 ]
  %t67 = phi i512 [ %t29, %block_0_4199c9 ]
  %t68 = phi i512 [ %t30, %block_0_4199c9 ]
  ; r65 := (bitcast r57 (vec 8 double))
  %t69 = bitcast i512 %t61 to <8 x double>
  ; r66 := (bitcast r58 (vec 8 double))
  %t70 = bitcast i512 %t62 to <8 x double>
  ; r67 := (bitcast r59 (vec 8 double))
  %t71 = bitcast i512 %t63 to <8 x double>
  ; r68 := (bitcast r60 (vec 8 double))
  %t72 = bitcast i512 %t64 to <8 x double>
  ; r69 := (bitcast r61 (vec 8 double))
  %t73 = bitcast i512 %t65 to <8 x double>
  ; r70 := (bitcast r62 (vec 8 double))
  %t74 = bitcast i512 %t66 to <8 x double>
  ; r71 := (bitcast r63 (vec 8 double))
  %t75 = bitcast i512 %t67 to <8 x double>
  ; r72 := (bitcast r64 (vec 8 double))
  %t76 = bitcast i512 %t68 to <8 x double>
  %t77 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__sflush(i64 %t58, i64 %t57, i64 %t56, i64 %t55, i64 %t59, i64 %t60, <8 x double> %t69, <8 x double> %t70, <8 x double> %t71, <8 x double> %t72, <8 x double> %t73, <8 x double> %t74, <8 x double> %t75, <8 x double> %t76)
  ret { i64, i64, <8 x double> } %t77
block_0_4199ef:
  %t78 = phi i64 [ %arg3, %block_0_4199c0 ]
  %t79 = phi i64 [ %arg2, %block_0_4199c0 ]
  %t80 = phi i64 [ %arg1, %block_0_4199c0 ]
  %t81 = phi i64 [ %arg4, %block_0_4199c0 ]
  %t82 = phi i64 [ %arg5, %block_0_4199c0 ]
  %t83 = phi i512 [ %t1, %block_0_4199c0 ]
  %t84 = phi i512 [ %t2, %block_0_4199c0 ]
  %t85 = phi i512 [ %t3, %block_0_4199c0 ]
  %t86 = phi i512 [ %t4, %block_0_4199c0 ]
  %t87 = phi i512 [ %t5, %block_0_4199c0 ]
  %t88 = phi i512 [ %t6, %block_0_4199c0 ]
  %t89 = phi i512 [ %t7, %block_0_4199c0 ]
  %t90 = phi i512 [ %t8, %block_0_4199c0 ]
  ; r86 := (bitcast r78 (vec 8 double))
  %t91 = bitcast i512 %t83 to <8 x double>
  ; r87 := (bitcast r79 (vec 8 double))
  %t92 = bitcast i512 %t84 to <8 x double>
  ; r88 := (bitcast r80 (vec 8 double))
  %t93 = bitcast i512 %t85 to <8 x double>
  ; r89 := (bitcast r81 (vec 8 double))
  %t94 = bitcast i512 %t86 to <8 x double>
  ; r90 := (bitcast r82 (vec 8 double))
  %t95 = bitcast i512 %t87 to <8 x double>
  ; r91 := (bitcast r83 (vec 8 double))
  %t96 = bitcast i512 %t88 to <8 x double>
  ; r92 := (bitcast r84 (vec 8 double))
  %t97 = bitcast i512 %t89 to <8 x double>
  ; r93 := (bitcast r85 (vec 8 double))
  %t98 = bitcast i512 %t90 to <8 x double>
  %t99 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_fwalk(i64 4299264, i64 %t80, i64 %t79, i64 %t78, i64 %t81, i64 %t82, <8 x double> %t91, <8 x double> %t92, <8 x double> %t93, <8 x double> %t94, <8 x double> %t95, <8 x double> %t96, <8 x double> %t97, <8 x double> %t98)
  ret { i64, i64, <8 x double> } %t99
}
define void @sflush_locked(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419a00:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  ; r11 := (bitcast arg6 (bv 512))
  %t12 = bitcast <8 x double> %arg6 to i512
  ; r12 := (bitcast arg7 (bv 512))
  %t13 = bitcast <8 x double> %arg7 to i512
  ; r13 := (bitcast arg8 (bv 512))
  %t14 = bitcast <8 x double> %arg8 to i512
  ; r14 := (bitcast arg9 (bv 512))
  %t15 = bitcast <8 x double> %arg9 to i512
  ; r15 := (bitcast arg10 (bv 512))
  %t16 = bitcast <8 x double> %arg10 to i512
  ; r16 := (bitcast arg11 (bv 512))
  %t17 = bitcast <8 x double> %arg11 to i512
  ; r17 := (bitcast arg12 (bv 512))
  %t18 = bitcast <8 x double> %arg12 to i512
  ; r18 := (bitcast arg13 (bv 512))
  %t19 = bitcast <8 x double> %arg13 to i512
  br i1 %t3, label %block_0_419a1b, label %block_0_419a48
block_0_419a1b:
  %t20 = phi i64 [ %arg3, %block_0_419a00 ], [ %t118, %block_0_419a4d ]
  %t21 = phi i64 [ %t2, %block_0_419a00 ], [ %t119, %block_0_419a4d ]
  %t22 = phi i64 [ %arg0, %block_0_419a00 ], [ %t120, %block_0_419a4d ]
  %t23 = phi i64 [ %arg1, %block_0_419a00 ], [ %t121, %block_0_419a4d ]
  %t24 = phi i64 [ %arg4, %block_0_419a00 ], [ %t122, %block_0_419a4d ]
  %t25 = phi i64 [ %arg5, %block_0_419a00 ], [ %t123, %block_0_419a4d ]
  %t26 = phi i512 [ %t4, %block_0_419a00 ], [ %t124, %block_0_419a4d ]
  %t27 = phi i512 [ %t5, %block_0_419a00 ], [ %t125, %block_0_419a4d ]
  %t28 = phi i512 [ %t6, %block_0_419a00 ], [ %t126, %block_0_419a4d ]
  %t29 = phi i512 [ %t7, %block_0_419a00 ], [ %t127, %block_0_419a4d ]
  %t30 = phi i512 [ %t8, %block_0_419a00 ], [ %t128, %block_0_419a4d ]
  %t31 = phi i512 [ %t9, %block_0_419a00 ], [ %t129, %block_0_419a4d ]
  %t32 = phi i512 [ %t10, %block_0_419a00 ], [ %t130, %block_0_419a4d ]
  %t33 = phi i512 [ %t11, %block_0_419a00 ], [ %t131, %block_0_419a4d ]
  ; r33 := (bitcast r25 (vec 8 double))
  %t34 = bitcast i512 %t26 to <8 x double>
  ; r34 := (bitcast r26 (vec 8 double))
  %t35 = bitcast i512 %t27 to <8 x double>
  ; r35 := (bitcast r27 (vec 8 double))
  %t36 = bitcast i512 %t28 to <8 x double>
  ; r36 := (bitcast r28 (vec 8 double))
  %t37 = bitcast i512 %t29 to <8 x double>
  ; r37 := (bitcast r29 (vec 8 double))
  %t38 = bitcast i512 %t30 to <8 x double>
  ; r38 := (bitcast r30 (vec 8 double))
  %t39 = bitcast i512 %t31 to <8 x double>
  ; r39 := (bitcast r31 (vec 8 double))
  %t40 = bitcast i512 %t32 to <8 x double>
  ; r40 := (bitcast r32 (vec 8 double))
  %t41 = bitcast i512 %t33 to <8 x double>
  ; r41 := call __sflush(r21, r22, r20, r19, r23, r24, r33, r34, r35, r36, r37, r38, r39, r40)
  %t42 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__sflush(i64 %t22, i64 %t23, i64 %t21, i64 %t20, i64 %t24, i64 %t25, <8 x double> %t34, <8 x double> %t35, <8 x double> %t36, <8 x double> %t37, <8 x double> %t38, <8 x double> %t39, <8 x double> %t40, <8 x double> %t41)
  ; r42 := (tuple_field r41 0)
  %t43 = extractvalue { i64, i64, <8 x double> } %t42, 0
  ; r43 := (tuple_field r41 1)
  %t44 = extractvalue { i64, i64, <8 x double> } %t42, 1
  ; r44 := (tuple_field r41 2)
  %t45 = extractvalue { i64, i64, <8 x double> } %t42, 2
  ; r45 := (bitcast r44 (bv 512))
  %t46 = bitcast <8 x double> %t45 to i512
  br label %block_0_419a23
block_0_419a23:
  %t47 = phi i64 [ %t20, %block_0_419a1b ]
  %t48 = phi i64 [ %t44, %block_0_419a1b ]
  %t49 = phi i64 [ %t22, %block_0_419a1b ]
  %t50 = phi i64 [ %t23, %block_0_419a1b ]
  %t51 = phi i64 [ %t24, %block_0_419a1b ]
  %t52 = phi i64 [ %t25, %block_0_419a1b ]
  %t53 = phi i512 [ %t46, %block_0_419a1b ]
  %t54 = phi i512 [ %t27, %block_0_419a1b ]
  %t55 = phi i512 [ %t28, %block_0_419a1b ]
  %t56 = phi i512 [ %t29, %block_0_419a1b ]
  %t57 = phi i512 [ %t30, %block_0_419a1b ]
  %t58 = phi i512 [ %t31, %block_0_419a1b ]
  %t59 = phi i512 [ %t32, %block_0_419a1b ]
  %t60 = phi i512 [ %t33, %block_0_419a1b ]
  ; r60 := (read (0x6356e8 : bv 64) (bv 32))
  %t61 = inttoptr i64 6510312 to i32*
  %t62 = load i32, i32* %t61
  ; r61 := (eq r60 (0x0 : bv 32))
  %t63 = icmp eq i32 %t62, 0
  br i1 %t63, label %block_0_419a37, label %block_0_419a2f
block_0_419a2f:
  %t64 = phi i64 [ %t47, %block_0_419a23 ]
  %t65 = phi i64 [ %t48, %block_0_419a23 ]
  %t66 = phi i64 [ %t49, %block_0_419a23 ]
  %t67 = phi i64 [ %t50, %block_0_419a23 ]
  %t68 = phi i64 [ %t51, %block_0_419a23 ]
  %t69 = phi i64 [ %t52, %block_0_419a23 ]
  %t70 = phi i512 [ %t53, %block_0_419a23 ]
  %t71 = phi i512 [ %t54, %block_0_419a23 ]
  %t72 = phi i512 [ %t55, %block_0_419a23 ]
  %t73 = phi i512 [ %t56, %block_0_419a23 ]
  %t74 = phi i512 [ %t57, %block_0_419a23 ]
  %t75 = phi i512 [ %t58, %block_0_419a23 ]
  %t76 = phi i512 [ %t59, %block_0_419a23 ]
  %t77 = phi i512 [ %t60, %block_0_419a23 ]
  ; r76 := (bitcast r68 (vec 8 double))
  %t78 = bitcast i512 %t70 to <8 x double>
  ; r77 := (bitcast r69 (vec 8 double))
  %t79 = bitcast i512 %t71 to <8 x double>
  ; r78 := (bitcast r70 (vec 8 double))
  %t80 = bitcast i512 %t72 to <8 x double>
  ; r79 := (bitcast r71 (vec 8 double))
  %t81 = bitcast i512 %t73 to <8 x double>
  ; r80 := (bitcast r72 (vec 8 double))
  %t82 = bitcast i512 %t74 to <8 x double>
  ; r81 := (bitcast r73 (vec 8 double))
  %t83 = bitcast i512 %t75 to <8 x double>
  ; r82 := (bitcast r74 (vec 8 double))
  %t84 = bitcast i512 %t76 to <8 x double>
  ; r83 := (bitcast r75 (vec 8 double))
  %t85 = bitcast i512 %t77 to <8 x double>
  ; r84 := call funlockfile(r64, r65, r63, r62, r66, r67, r76, r77, r78, r79, r80, r81, r82, r83)
  %t86 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @funlockfile(i64 %t66, i64 %t67, i64 %t65, i64 %t64, i64 %t68, i64 %t69, <8 x double> %t78, <8 x double> %t79, <8 x double> %t80, <8 x double> %t81, <8 x double> %t82, <8 x double> %t83, <8 x double> %t84, <8 x double> %t85)
  ; r85 := (tuple_field r84 0)
  %t87 = extractvalue { i64, i64, <8 x double> } %t86, 0
  ; r86 := (tuple_field r84 1)
  %t88 = extractvalue { i64, i64, <8 x double> } %t86, 1
  ; r87 := (tuple_field r84 2)
  %t89 = extractvalue { i64, i64, <8 x double> } %t86, 2
  ; r88 := (bitcast r87 (bv 512))
  %t90 = bitcast <8 x double> %t89 to i512
  br label %block_0_419a37
block_0_419a37:
  ret void
block_0_419a48:
  %t91 = phi i64 [ %arg3, %block_0_419a00 ]
  %t92 = phi i64 [ %t2, %block_0_419a00 ]
  %t93 = phi i64 [ %arg0, %block_0_419a00 ]
  %t94 = phi i64 [ %arg1, %block_0_419a00 ]
  %t95 = phi i64 [ %arg4, %block_0_419a00 ]
  %t96 = phi i64 [ %arg5, %block_0_419a00 ]
  %t97 = phi i512 [ %t12, %block_0_419a00 ]
  %t98 = phi i512 [ %t13, %block_0_419a00 ]
  %t99 = phi i512 [ %t14, %block_0_419a00 ]
  %t100 = phi i512 [ %t15, %block_0_419a00 ]
  %t101 = phi i512 [ %t16, %block_0_419a00 ]
  %t102 = phi i512 [ %t17, %block_0_419a00 ]
  %t103 = phi i512 [ %t18, %block_0_419a00 ]
  %t104 = phi i512 [ %t19, %block_0_419a00 ]
  ; r103 := (bitcast r95 (vec 8 double))
  %t105 = bitcast i512 %t97 to <8 x double>
  ; r104 := (bitcast r96 (vec 8 double))
  %t106 = bitcast i512 %t98 to <8 x double>
  ; r105 := (bitcast r97 (vec 8 double))
  %t107 = bitcast i512 %t99 to <8 x double>
  ; r106 := (bitcast r98 (vec 8 double))
  %t108 = bitcast i512 %t100 to <8 x double>
  ; r107 := (bitcast r99 (vec 8 double))
  %t109 = bitcast i512 %t101 to <8 x double>
  ; r108 := (bitcast r100 (vec 8 double))
  %t110 = bitcast i512 %t102 to <8 x double>
  ; r109 := (bitcast r101 (vec 8 double))
  %t111 = bitcast i512 %t103 to <8 x double>
  ; r110 := (bitcast r102 (vec 8 double))
  %t112 = bitcast i512 %t104 to <8 x double>
  ; r111 := call flockfile(r91, r92, r90, r89, r93, r94, r103, r104, r105, r106, r107, r108, r109, r110)
  %t113 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @flockfile(i64 %t93, i64 %t94, i64 %t92, i64 %t91, i64 %t95, i64 %t96, <8 x double> %t105, <8 x double> %t106, <8 x double> %t107, <8 x double> %t108, <8 x double> %t109, <8 x double> %t110, <8 x double> %t111, <8 x double> %t112)
  ; r112 := (tuple_field r111 0)
  %t114 = extractvalue { i64, i64, <8 x double> } %t113, 0
  ; r113 := (tuple_field r111 1)
  %t115 = extractvalue { i64, i64, <8 x double> } %t113, 1
  ; r114 := (tuple_field r111 2)
  %t116 = extractvalue { i64, i64, <8 x double> } %t113, 2
  ; r115 := (bitcast r114 (bv 512))
  %t117 = bitcast <8 x double> %t116 to i512
  br label %block_0_419a4d
block_0_419a4d:
  %t118 = phi i64 [ %t91, %block_0_419a48 ]
  %t119 = phi i64 [ %t115, %block_0_419a48 ]
  %t120 = phi i64 [ %t93, %block_0_419a48 ]
  %t121 = phi i64 [ %t94, %block_0_419a48 ]
  %t122 = phi i64 [ %t95, %block_0_419a48 ]
  %t123 = phi i64 [ %t96, %block_0_419a48 ]
  %t124 = phi i512 [ %t117, %block_0_419a48 ]
  %t125 = phi i512 [ %t98, %block_0_419a48 ]
  %t126 = phi i512 [ %t99, %block_0_419a48 ]
  %t127 = phi i512 [ %t100, %block_0_419a48 ]
  %t128 = phi i512 [ %t101, %block_0_419a48 ]
  %t129 = phi i512 [ %t102, %block_0_419a48 ]
  %t130 = phi i512 [ %t103, %block_0_419a48 ]
  %t131 = phi i512 [ %t104, %block_0_419a48 ]
  br label %block_0_419a1b
}
define <8 x double> @fflush(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419a50:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg6 (bv 512))
  %t1 = bitcast <8 x double> %arg6 to i512
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast arg8 (bv 512))
  %t3 = bitcast <8 x double> %arg8 to i512
  ; r4 := (bitcast arg9 (bv 512))
  %t4 = bitcast <8 x double> %arg9 to i512
  ; r5 := (bitcast arg10 (bv 512))
  %t5 = bitcast <8 x double> %arg10 to i512
  ; r6 := (bitcast arg11 (bv 512))
  %t6 = bitcast <8 x double> %arg11 to i512
  ; r7 := (bitcast arg12 (bv 512))
  %t7 = bitcast <8 x double> %arg12 to i512
  ; r8 := (bitcast arg13 (bv 512))
  %t8 = bitcast <8 x double> %arg13 to i512
  ; r9 := (bitcast arg6 (bv 512))
  %t9 = bitcast <8 x double> %arg6 to i512
  ; r10 := (bitcast arg7 (bv 512))
  %t10 = bitcast <8 x double> %arg7 to i512
  ; r11 := (bitcast arg8 (bv 512))
  %t11 = bitcast <8 x double> %arg8 to i512
  ; r12 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r13 := (bitcast arg10 (bv 512))
  %t13 = bitcast <8 x double> %arg10 to i512
  ; r14 := (bitcast arg11 (bv 512))
  %t14 = bitcast <8 x double> %arg11 to i512
  ; r15 := (bitcast arg12 (bv 512))
  %t15 = bitcast <8 x double> %arg12 to i512
  ; r16 := (bitcast arg13 (bv 512))
  %t16 = bitcast <8 x double> %arg13 to i512
  br i1 %t0, label %block_0_419ac2, label %block_0_419a66
block_0_419a66:
  %t17 = phi i64 [ %arg3, %block_0_419a50 ]
  %t18 = phi i64 [ %arg2, %block_0_419a50 ]
  %t19 = phi i64 [ %arg0, %block_0_419a50 ]
  %t20 = phi i64 [ %arg4, %block_0_419a50 ]
  %t21 = phi i64 [ %arg5, %block_0_419a50 ]
  %t22 = phi i512 [ %t9, %block_0_419a50 ]
  %t23 = phi i512 [ %t10, %block_0_419a50 ]
  %t24 = phi i512 [ %t11, %block_0_419a50 ]
  %t25 = phi i512 [ %t12, %block_0_419a50 ]
  %t26 = phi i512 [ %t13, %block_0_419a50 ]
  %t27 = phi i512 [ %t14, %block_0_419a50 ]
  %t28 = phi i512 [ %t15, %block_0_419a50 ]
  %t29 = phi i512 [ %t16, %block_0_419a50 ]
  ; r30 := (read (0x6356e8 : bv 64) (bv 32))
  %t30 = inttoptr i64 6510312 to i32*
  %t31 = load i32, i32* %t30
  ; r31 := (uext r30 64)
  %t32 = zext i32 %t31 to i64
  ; r32 := (eq r30 (0x0 : bv 32))
  %t33 = icmp eq i32 %t31, 0
  br i1 %t33, label %block_0_419a70, label %block_0_419ab7
block_0_419a70:
  %t34 = phi i64 [ %t17, %block_0_419a66 ], [ %t204, %block_0_419abc ]
  %t35 = phi i64 [ %t18, %block_0_419a66 ], [ %t205, %block_0_419abc ]
  %t36 = phi i64 [ %t19, %block_0_419a66 ], [ %t206, %block_0_419abc ]
  %t37 = phi i64 [ %t32, %block_0_419a66 ], [ %t207, %block_0_419abc ]
  %t38 = phi i64 [ %t19, %block_0_419a66 ], [ %t208, %block_0_419abc ]
  %t39 = phi i64 [ %t20, %block_0_419a66 ], [ %t209, %block_0_419abc ]
  %t40 = phi i64 [ %t21, %block_0_419a66 ], [ %t210, %block_0_419abc ]
  %t41 = phi i512 [ %t22, %block_0_419a66 ], [ %t211, %block_0_419abc ]
  %t42 = phi i512 [ %t23, %block_0_419a66 ], [ %t212, %block_0_419abc ]
  %t43 = phi i512 [ %t24, %block_0_419a66 ], [ %t213, %block_0_419abc ]
  %t44 = phi i512 [ %t25, %block_0_419a66 ], [ %t214, %block_0_419abc ]
  %t45 = phi i512 [ %t26, %block_0_419a66 ], [ %t215, %block_0_419abc ]
  %t46 = phi i512 [ %t27, %block_0_419a66 ], [ %t216, %block_0_419abc ]
  %t47 = phi i512 [ %t28, %block_0_419a66 ], [ %t217, %block_0_419abc ]
  %t48 = phi i512 [ %t29, %block_0_419a66 ], [ %t218, %block_0_419abc ]
  ; r48 := (bv_add r35 (0x10 : bv 64))
  %t49 = add i64 %t36, 16
  ; r49 := (read r48 (bv 16))
  %t50 = inttoptr i64 %t49 to i16*
  %t51 = load i16, i16* %t50
  ; r50 := (trunc r49 8)
  %t52 = trunc i16 %t51 to i8
  ; r51 := (bv_and r50 (0x18 : bv 8))
  %t53 = and i8 %t52, 24
  ; r52 := (eq r51 (0x0 : bv 8))
  %t54 = icmp eq i8 %t53, 0
  br i1 %t54, label %block_0_419aa5, label %block_0_419a78
block_0_419a78:
  %t55 = phi i64 [ %t34, %block_0_419a70 ]
  %t56 = phi i64 [ %t35, %block_0_419a70 ]
  %t57 = phi i64 [ %t36, %block_0_419a70 ]
  %t58 = phi i64 [ %t37, %block_0_419a70 ]
  %t59 = phi i64 [ %t39, %block_0_419a70 ]
  %t60 = phi i64 [ %t40, %block_0_419a70 ]
  %t61 = phi i512 [ %t41, %block_0_419a70 ]
  %t62 = phi i512 [ %t42, %block_0_419a70 ]
  %t63 = phi i512 [ %t43, %block_0_419a70 ]
  %t64 = phi i512 [ %t44, %block_0_419a70 ]
  %t65 = phi i512 [ %t45, %block_0_419a70 ]
  %t66 = phi i512 [ %t46, %block_0_419a70 ]
  %t67 = phi i512 [ %t47, %block_0_419a70 ]
  %t68 = phi i512 [ %t48, %block_0_419a70 ]
  ; r67 := (bitcast r59 (vec 8 double))
  %t69 = bitcast i512 %t61 to <8 x double>
  ; r68 := (bitcast r60 (vec 8 double))
  %t70 = bitcast i512 %t62 to <8 x double>
  ; r69 := (bitcast r61 (vec 8 double))
  %t71 = bitcast i512 %t63 to <8 x double>
  ; r70 := (bitcast r62 (vec 8 double))
  %t72 = bitcast i512 %t64 to <8 x double>
  ; r71 := (bitcast r63 (vec 8 double))
  %t73 = bitcast i512 %t65 to <8 x double>
  ; r72 := (bitcast r64 (vec 8 double))
  %t74 = bitcast i512 %t66 to <8 x double>
  ; r73 := (bitcast r65 (vec 8 double))
  %t75 = bitcast i512 %t67 to <8 x double>
  ; r74 := (bitcast r66 (vec 8 double))
  %t76 = bitcast i512 %t68 to <8 x double>
  ; r75 := call __sflush(r55, r56, r54, r53, r57, r58, r67, r68, r69, r70, r71, r72, r73, r74)
  %t77 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__sflush(i64 %t57, i64 %t58, i64 %t56, i64 %t55, i64 %t59, i64 %t60, <8 x double> %t69, <8 x double> %t70, <8 x double> %t71, <8 x double> %t72, <8 x double> %t73, <8 x double> %t74, <8 x double> %t75, <8 x double> %t76)
  ; r76 := (tuple_field r75 0)
  %t78 = extractvalue { i64, i64, <8 x double> } %t77, 0
  ; r77 := (tuple_field r75 1)
  %t79 = extractvalue { i64, i64, <8 x double> } %t77, 1
  ; r78 := (tuple_field r75 2)
  %t80 = extractvalue { i64, i64, <8 x double> } %t77, 2
  ; r79 := (bitcast r78 (bv 512))
  %t81 = bitcast <8 x double> %t80 to i512
  br label %block_0_419a80
block_0_419a80:
  %t82 = phi i64 [ %t79, %block_0_419a78 ]
  %t83 = phi i64 [ %t57, %block_0_419a78 ]
  %t84 = phi i64 [ %t58, %block_0_419a78 ]
  %t85 = phi i64 [ %t59, %block_0_419a78 ]
  %t86 = phi i64 [ %t60, %block_0_419a78 ]
  %t87 = phi i512 [ %t81, %block_0_419a78 ]
  %t88 = phi i512 [ %t62, %block_0_419a78 ]
  %t89 = phi i512 [ %t63, %block_0_419a78 ]
  %t90 = phi i512 [ %t64, %block_0_419a78 ]
  %t91 = phi i512 [ %t65, %block_0_419a78 ]
  %t92 = phi i512 [ %t66, %block_0_419a78 ]
  %t93 = phi i512 [ %t67, %block_0_419a78 ]
  %t94 = phi i512 [ %t68, %block_0_419a78 ]
  br label %block_0_419a82
block_0_419a82:
  %t95 = phi i64 [ %t82, %block_0_419a80 ], [ %t162, %block_0_419aaf ]
  %t96 = phi i64 [ %t83, %block_0_419a80 ], [ %t163, %block_0_419aaf ]
  %t97 = phi i64 [ %t84, %block_0_419a80 ], [ %t164, %block_0_419aaf ]
  %t98 = phi i64 [ %t85, %block_0_419a80 ], [ %t165, %block_0_419aaf ]
  %t99 = phi i64 [ %t86, %block_0_419a80 ], [ %t166, %block_0_419aaf ]
  %t100 = phi i512 [ %t87, %block_0_419a80 ], [ %t167, %block_0_419aaf ]
  %t101 = phi i512 [ %t88, %block_0_419a80 ], [ %t168, %block_0_419aaf ]
  %t102 = phi i512 [ %t89, %block_0_419a80 ], [ %t169, %block_0_419aaf ]
  %t103 = phi i512 [ %t90, %block_0_419a80 ], [ %t170, %block_0_419aaf ]
  %t104 = phi i512 [ %t91, %block_0_419a80 ], [ %t171, %block_0_419aaf ]
  %t105 = phi i512 [ %t92, %block_0_419a80 ], [ %t172, %block_0_419aaf ]
  %t106 = phi i512 [ %t93, %block_0_419a80 ], [ %t173, %block_0_419aaf ]
  %t107 = phi i512 [ %t94, %block_0_419a80 ], [ %t174, %block_0_419aaf ]
  ; r106 := (read (0x6356e8 : bv 64) (bv 32))
  %t108 = inttoptr i64 6510312 to i32*
  %t109 = load i32, i32* %t108
  ; r107 := (uext r106 64)
  %t110 = zext i32 %t109 to i64
  ; r108 := (eq r106 (0x0 : bv 32))
  %t111 = icmp eq i32 %t109, 0
  br i1 %t111, label %block_0_419a94, label %block_0_419a8c
block_0_419a8c:
  %t112 = phi i64 [ %t110, %block_0_419a82 ]
  %t113 = phi i64 [ %t95, %block_0_419a82 ]
  %t114 = phi i64 [ %t96, %block_0_419a82 ]
  %t115 = phi i64 [ %t97, %block_0_419a82 ]
  %t116 = phi i64 [ %t98, %block_0_419a82 ]
  %t117 = phi i64 [ %t99, %block_0_419a82 ]
  %t118 = phi i512 [ %t100, %block_0_419a82 ]
  %t119 = phi i512 [ %t101, %block_0_419a82 ]
  %t120 = phi i512 [ %t102, %block_0_419a82 ]
  %t121 = phi i512 [ %t103, %block_0_419a82 ]
  %t122 = phi i512 [ %t104, %block_0_419a82 ]
  %t123 = phi i512 [ %t105, %block_0_419a82 ]
  %t124 = phi i512 [ %t106, %block_0_419a82 ]
  %t125 = phi i512 [ %t107, %block_0_419a82 ]
  ; r123 := (bitcast r115 (vec 8 double))
  %t126 = bitcast i512 %t118 to <8 x double>
  ; r124 := (bitcast r116 (vec 8 double))
  %t127 = bitcast i512 %t119 to <8 x double>
  ; r125 := (bitcast r117 (vec 8 double))
  %t128 = bitcast i512 %t120 to <8 x double>
  ; r126 := (bitcast r118 (vec 8 double))
  %t129 = bitcast i512 %t121 to <8 x double>
  ; r127 := (bitcast r119 (vec 8 double))
  %t130 = bitcast i512 %t122 to <8 x double>
  ; r128 := (bitcast r120 (vec 8 double))
  %t131 = bitcast i512 %t123 to <8 x double>
  ; r129 := (bitcast r121 (vec 8 double))
  %t132 = bitcast i512 %t124 to <8 x double>
  ; r130 := (bitcast r122 (vec 8 double))
  %t133 = bitcast i512 %t125 to <8 x double>
  ; r131 := call funlockfile(r111, r112, r110, r109, r113, r114, r123, r124, r125, r126, r127, r128, r129, r130)
  %t134 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @funlockfile(i64 %t114, i64 %t115, i64 %t113, i64 %t112, i64 %t116, i64 %t117, <8 x double> %t126, <8 x double> %t127, <8 x double> %t128, <8 x double> %t129, <8 x double> %t130, <8 x double> %t131, <8 x double> %t132, <8 x double> %t133)
  ; r132 := (tuple_field r131 0)
  %t135 = extractvalue { i64, i64, <8 x double> } %t134, 0
  ; r133 := (tuple_field r131 1)
  %t136 = extractvalue { i64, i64, <8 x double> } %t134, 1
  ; r134 := (tuple_field r131 2)
  %t137 = extractvalue { i64, i64, <8 x double> } %t134, 2
  ; r135 := (bitcast r134 (bv 512))
  %t138 = bitcast <8 x double> %t137 to i512
  br label %block_0_419a94
block_0_419a94:
  %t139 = phi i512 [ %t100, %block_0_419a82 ], [ %t138, %block_0_419a8c ]
  ; r137 := (bitcast r136 (vec 8 double))
  %t140 = bitcast i512 %t139 to <8 x double>
  ret <8 x double> %t140
block_0_419aa5:
  %t141 = phi i64 [ %t35, %block_0_419a70 ]
  %t142 = phi i64 [ %t36, %block_0_419a70 ]
  %t143 = phi i64 [ %t37, %block_0_419a70 ]
  %t144 = phi i64 [ %t38, %block_0_419a70 ]
  %t145 = phi i64 [ %t39, %block_0_419a70 ]
  %t146 = phi i64 [ %t40, %block_0_419a70 ]
  %t147 = phi i512 [ %t41, %block_0_419a70 ]
  %t148 = phi i512 [ %t42, %block_0_419a70 ]
  %t149 = phi i512 [ %t43, %block_0_419a70 ]
  %t150 = phi i512 [ %t44, %block_0_419a70 ]
  %t151 = phi i512 [ %t45, %block_0_419a70 ]
  %t152 = phi i512 [ %t46, %block_0_419a70 ]
  %t153 = phi i512 [ %t47, %block_0_419a70 ]
  %t154 = phi i512 [ %t48, %block_0_419a70 ]
  ; r152 := (bitcast r144 (vec 8 double))
  %t155 = bitcast i512 %t147 to <8 x double>
  ; r153 := call __error_unthreaded(r141, r140, r138, r152)
  %t156 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t144, i64 %t143, i64 %t141, <8 x double> %t155)
  ; r154 := (tuple_field r153 0)
  %t157 = extractvalue { i64, i64, <8 x double> } %t156, 0
  ; r155 := (tuple_field r153 1)
  %t158 = extractvalue { i64, i64, <8 x double> } %t156, 1
  ; r156 := (tuple_field r153 2)
  %t159 = extractvalue { i64, i64, <8 x double> } %t156, 2
  ; r157 := (bitcast r156 (bv 512))
  %t160 = bitcast <8 x double> %t159 to i512
  br label %block_0_419aaf
block_0_419aaf:
  %t161 = phi i64 [ %t157, %block_0_419aa5 ]
  %t162 = phi i64 [ %t158, %block_0_419aa5 ]
  %t163 = phi i64 [ %t142, %block_0_419aa5 ]
  %t164 = phi i64 [ %t143, %block_0_419aa5 ]
  %t165 = phi i64 [ %t145, %block_0_419aa5 ]
  %t166 = phi i64 [ %t146, %block_0_419aa5 ]
  %t167 = phi i512 [ %t160, %block_0_419aa5 ]
  %t168 = phi i512 [ %t148, %block_0_419aa5 ]
  %t169 = phi i512 [ %t149, %block_0_419aa5 ]
  %t170 = phi i512 [ %t150, %block_0_419aa5 ]
  %t171 = phi i512 [ %t151, %block_0_419aa5 ]
  %t172 = phi i512 [ %t152, %block_0_419aa5 ]
  %t173 = phi i512 [ %t153, %block_0_419aa5 ]
  %t174 = phi i512 [ %t154, %block_0_419aa5 ]
  ; write r158 (0x9 : bv 32)
  %t175 = inttoptr i64 %t161 to i32*
  store i32 9, i32* %t175
  br label %block_0_419a82
block_0_419ab7:
  %t176 = phi i64 [ %t17, %block_0_419a66 ]
  %t177 = phi i64 [ %t18, %block_0_419a66 ]
  %t178 = phi i64 [ %t19, %block_0_419a66 ]
  %t179 = phi i64 [ %t32, %block_0_419a66 ]
  %t180 = phi i64 [ %t19, %block_0_419a66 ]
  %t181 = phi i64 [ %t20, %block_0_419a66 ]
  %t182 = phi i64 [ %t21, %block_0_419a66 ]
  %t183 = phi i512 [ %t22, %block_0_419a66 ]
  %t184 = phi i512 [ %t23, %block_0_419a66 ]
  %t185 = phi i512 [ %t24, %block_0_419a66 ]
  %t186 = phi i512 [ %t25, %block_0_419a66 ]
  %t187 = phi i512 [ %t26, %block_0_419a66 ]
  %t188 = phi i512 [ %t27, %block_0_419a66 ]
  %t189 = phi i512 [ %t28, %block_0_419a66 ]
  %t190 = phi i512 [ %t29, %block_0_419a66 ]
  ; r187 := (bitcast r179 (vec 8 double))
  %t191 = bitcast i512 %t183 to <8 x double>
  ; r188 := (bitcast r180 (vec 8 double))
  %t192 = bitcast i512 %t184 to <8 x double>
  ; r189 := (bitcast r181 (vec 8 double))
  %t193 = bitcast i512 %t185 to <8 x double>
  ; r190 := (bitcast r182 (vec 8 double))
  %t194 = bitcast i512 %t186 to <8 x double>
  ; r191 := (bitcast r183 (vec 8 double))
  %t195 = bitcast i512 %t187 to <8 x double>
  ; r192 := (bitcast r184 (vec 8 double))
  %t196 = bitcast i512 %t188 to <8 x double>
  ; r193 := (bitcast r185 (vec 8 double))
  %t197 = bitcast i512 %t189 to <8 x double>
  ; r194 := (bitcast r186 (vec 8 double))
  %t198 = bitcast i512 %t190 to <8 x double>
  ; r195 := call flockfile(r176, r175, r173, r172, r177, r178, r187, r188, r189, r190, r191, r192, r193, r194)
  %t199 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @flockfile(i64 %t180, i64 %t179, i64 %t177, i64 %t176, i64 %t181, i64 %t182, <8 x double> %t191, <8 x double> %t192, <8 x double> %t193, <8 x double> %t194, <8 x double> %t195, <8 x double> %t196, <8 x double> %t197, <8 x double> %t198)
  ; r196 := (tuple_field r195 0)
  %t200 = extractvalue { i64, i64, <8 x double> } %t199, 0
  ; r197 := (tuple_field r195 1)
  %t201 = extractvalue { i64, i64, <8 x double> } %t199, 1
  ; r198 := (tuple_field r195 2)
  %t202 = extractvalue { i64, i64, <8 x double> } %t199, 2
  ; r199 := (bitcast r198 (bv 512))
  %t203 = bitcast <8 x double> %t202 to i512
  br label %block_0_419abc
block_0_419abc:
  %t204 = phi i64 [ %t176, %block_0_419ab7 ]
  %t205 = phi i64 [ %t201, %block_0_419ab7 ]
  %t206 = phi i64 [ %t178, %block_0_419ab7 ]
  %t207 = phi i64 [ %t179, %block_0_419ab7 ]
  %t208 = phi i64 [ %t180, %block_0_419ab7 ]
  %t209 = phi i64 [ %t181, %block_0_419ab7 ]
  %t210 = phi i64 [ %t182, %block_0_419ab7 ]
  %t211 = phi i512 [ %t203, %block_0_419ab7 ]
  %t212 = phi i512 [ %t184, %block_0_419ab7 ]
  %t213 = phi i512 [ %t185, %block_0_419ab7 ]
  %t214 = phi i512 [ %t186, %block_0_419ab7 ]
  %t215 = phi i512 [ %t187, %block_0_419ab7 ]
  %t216 = phi i512 [ %t188, %block_0_419ab7 ]
  %t217 = phi i512 [ %t189, %block_0_419ab7 ]
  %t218 = phi i512 [ %t190, %block_0_419ab7 ]
  br label %block_0_419a70
block_0_419ac2:
  %t219 = phi i64 [ %arg3, %block_0_419a50 ]
  %t220 = phi i64 [ %arg2, %block_0_419a50 ]
  %t221 = phi i64 [ %arg1, %block_0_419a50 ]
  %t222 = phi i64 [ %arg4, %block_0_419a50 ]
  %t223 = phi i64 [ %arg5, %block_0_419a50 ]
  %t224 = phi i512 [ %t1, %block_0_419a50 ]
  %t225 = phi i512 [ %t2, %block_0_419a50 ]
  %t226 = phi i512 [ %t3, %block_0_419a50 ]
  %t227 = phi i512 [ %t4, %block_0_419a50 ]
  %t228 = phi i512 [ %t5, %block_0_419a50 ]
  %t229 = phi i512 [ %t6, %block_0_419a50 ]
  %t230 = phi i512 [ %t7, %block_0_419a50 ]
  %t231 = phi i512 [ %t8, %block_0_419a50 ]
  ; r228 := (bitcast r220 (vec 8 double))
  %t232 = bitcast i512 %t224 to <8 x double>
  ; r229 := (bitcast r221 (vec 8 double))
  %t233 = bitcast i512 %t225 to <8 x double>
  ; r230 := (bitcast r222 (vec 8 double))
  %t234 = bitcast i512 %t226 to <8 x double>
  ; r231 := (bitcast r223 (vec 8 double))
  %t235 = bitcast i512 %t227 to <8 x double>
  ; r232 := (bitcast r224 (vec 8 double))
  %t236 = bitcast i512 %t228 to <8 x double>
  ; r233 := (bitcast r225 (vec 8 double))
  %t237 = bitcast i512 %t229 to <8 x double>
  ; r234 := (bitcast r226 (vec 8 double))
  %t238 = bitcast i512 %t230 to <8 x double>
  ; r235 := (bitcast r227 (vec 8 double))
  %t239 = bitcast i512 %t231 to <8 x double>
  ; r236 := call _fwalk((0x419a00 : bv 64), r217, r216, r215, r218, r219, r228, r229, r230, r231, r232, r233, r234, r235)
  %t240 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_fwalk(i64 4299264, i64 %t221, i64 %t220, i64 %t219, i64 %t222, i64 %t223, <8 x double> %t232, <8 x double> %t233, <8 x double> %t234, <8 x double> %t235, <8 x double> %t236, <8 x double> %t237, <8 x double> %t238, <8 x double> %t239)
  ; r237 := (tuple_field r236 2)
  %t241 = extractvalue { i64, i64, <8 x double> } %t240, 2
  ret <8 x double> %t241
}
define { i64, i64, <8 x double> } @funlockfile(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419ae0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call pthread_self_int(arg0, arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_self_int(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ; r17 := (tuple_field r16 0)
  %t17 = extractvalue { i64, i64, <8 x double> } %t16, 0
  ; r18 := (tuple_field r16 1)
  %t18 = extractvalue { i64, i64, <8 x double> } %t16, 1
  ; r19 := (tuple_field r16 2)
  %t19 = extractvalue { i64, i64, <8 x double> } %t16, 2
  ; r20 := (bitcast r19 (bv 512))
  %t20 = bitcast <8 x double> %t19 to i512
  ; r21 := (bitcast arg7 (bv 512))
  %t21 = bitcast <8 x double> %arg7 to i512
  ; r22 := (bitcast arg8 (bv 512))
  %t22 = bitcast <8 x double> %arg8 to i512
  ; r23 := (bitcast arg9 (bv 512))
  %t23 = bitcast <8 x double> %arg9 to i512
  ; r24 := (bitcast arg10 (bv 512))
  %t24 = bitcast <8 x double> %arg10 to i512
  ; r25 := (bitcast arg11 (bv 512))
  %t25 = bitcast <8 x double> %arg11 to i512
  ; r26 := (bitcast arg12 (bv 512))
  %t26 = bitcast <8 x double> %arg12 to i512
  ; r27 := (bitcast arg13 (bv 512))
  %t27 = bitcast <8 x double> %arg13 to i512
  br label %block_0_419ae9
block_0_419ae9:
  %t28 = phi i64 [ %t17, %block_0_419ae0 ]
  %t29 = phi i64 [ %arg3, %block_0_419ae0 ]
  %t30 = phi i64 [ %t18, %block_0_419ae0 ]
  %t31 = phi i64 [ %arg0, %block_0_419ae0 ]
  %t32 = phi i64 [ %arg1, %block_0_419ae0 ]
  %t33 = phi i64 [ %arg4, %block_0_419ae0 ]
  %t34 = phi i64 [ %arg5, %block_0_419ae0 ]
  %t35 = phi i512 [ %t20, %block_0_419ae0 ]
  %t36 = phi i512 [ %t21, %block_0_419ae0 ]
  %t37 = phi i512 [ %t22, %block_0_419ae0 ]
  %t38 = phi i512 [ %t23, %block_0_419ae0 ]
  %t39 = phi i512 [ %t24, %block_0_419ae0 ]
  %t40 = phi i512 [ %t25, %block_0_419ae0 ]
  %t41 = phi i512 [ %t26, %block_0_419ae0 ]
  %t42 = phi i512 [ %t27, %block_0_419ae0 ]
  ; r43 := (bv_add r31 (0xa0 : bv 64))
  %t43 = add i64 %t31, 160
  ; r44 := (read r43 (bv 64))
  %t44 = inttoptr i64 %t43 to i64*
  %t45 = load i64, i64* %t44
  ; r45 := (eq r28 r44)
  %t46 = icmp eq i64 %t28, %t45
  br i1 %t46, label %block_0_419af4, label %block_0_419af2
block_0_419af2:
  %t47 = phi i64 [ %t28, %block_0_419ae9 ]
  %t48 = phi i64 [ %t30, %block_0_419ae9 ]
  %t49 = phi i512 [ %t35, %block_0_419ae9 ]
  ; r49 := (bitcast r48 (vec 8 double))
  %t50 = bitcast i512 %t49 to <8 x double>
  ; r50 := (tuple r46 r47 r49)
  %t51 = insertvalue { i64, i64, <8 x double> } undef, i64 %t47, 0
  %t52 = insertvalue { i64, i64, <8 x double> } %t51, i64 %t48, 1
  %t53 = insertvalue { i64, i64, <8 x double> } %t52, <8 x double> %t50, 2
  ret { i64, i64, <8 x double> } %t53
block_0_419af4:
  %t54 = phi i64 [ %t29, %block_0_419ae9 ]
  %t55 = phi i64 [ %t30, %block_0_419ae9 ]
  %t56 = phi i64 [ %t31, %block_0_419ae9 ]
  %t57 = phi i64 [ %t32, %block_0_419ae9 ]
  %t58 = phi i64 [ %t33, %block_0_419ae9 ]
  %t59 = phi i64 [ %t34, %block_0_419ae9 ]
  %t60 = phi i512 [ %t35, %block_0_419ae9 ]
  %t61 = phi i512 [ %t36, %block_0_419ae9 ]
  %t62 = phi i512 [ %t37, %block_0_419ae9 ]
  %t63 = phi i512 [ %t38, %block_0_419ae9 ]
  %t64 = phi i512 [ %t39, %block_0_419ae9 ]
  %t65 = phi i512 [ %t40, %block_0_419ae9 ]
  %t66 = phi i512 [ %t41, %block_0_419ae9 ]
  %t67 = phi i512 [ %t42, %block_0_419ae9 ]
  ; r65 := (bv_add r53 (0xa8 : bv 64))
  %t68 = add i64 %t56, 168
  ; r66 := (read r65 (bv 32))
  %t69 = inttoptr i64 %t68 to i32*
  %t70 = load i32, i32* %t69
  ; r67 := (uext r66 64)
  %t71 = zext i32 %t70 to i64
  ; r68 := (ssbb_overflows r66 (0x1 : bv 32) false)
  %t72 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t70, i32 1)
  %t73 = extractvalue { i32, i1 } %t72, 1
  ; r69 := (bv_add r66 (0xffffffff : bv 32))
  %t74 = add i32 %t70, 4294967295
  ; r70 := (bv_slt r69 (0x0 : bv 32))
  %t75 = icmp slt i32 %t74, 0
  ; r71 := (eq r66 (0x1 : bv 32))
  %t76 = icmp eq i32 %t70, 1
  ; r72 := (xor r70 r68)
  %t77 = xor i1 %t75, %t73
  ; r73 := (or r71 r72)
  %t78 = or i1 %t76, %t77
  br i1 %t78, label %block_0_419b0a, label %block_0_419aff
block_0_419aff:
  %t79 = phi i64 [ %t71, %block_0_419af4 ]
  %t80 = phi i64 [ %t55, %block_0_419af4 ]
  %t81 = phi i64 [ %t56, %block_0_419af4 ]
  %t82 = phi i512 [ %t60, %block_0_419af4 ]
  ; r78 := (trunc r74 32)
  %t83 = trunc i64 %t79 to i32
  ; r79 := (bv_add r78 (0xffffffff : bv 32))
  %t84 = add i32 %t83, 4294967295
  ; r80 := (uext r79 64)
  %t85 = zext i32 %t84 to i64
  ; r81 := (bv_add r76 (0xa8 : bv 64))
  %t86 = add i64 %t81, 168
  ; write r81 r79
  %t87 = inttoptr i64 %t86 to i32*
  store i32 %t84, i32* %t87
  ; r82 := (bitcast r77 (vec 8 double))
  %t88 = bitcast i512 %t82 to <8 x double>
  ; r83 := (tuple r80 r75 r82)
  %t89 = insertvalue { i64, i64, <8 x double> } undef, i64 %t85, 0
  %t90 = insertvalue { i64, i64, <8 x double> } %t89, i64 %t80, 1
  %t91 = insertvalue { i64, i64, <8 x double> } %t90, <8 x double> %t88, 2
  ret { i64, i64, <8 x double> } %t91
block_0_419b0a:
  %t92 = phi i64 [ %t54, %block_0_419af4 ]
  %t93 = phi i64 [ %t55, %block_0_419af4 ]
  %t94 = phi i64 [ %t56, %block_0_419af4 ]
  %t95 = phi i64 [ %t57, %block_0_419af4 ]
  %t96 = phi i64 [ %t58, %block_0_419af4 ]
  %t97 = phi i64 [ %t59, %block_0_419af4 ]
  %t98 = phi i512 [ %t60, %block_0_419af4 ]
  %t99 = phi i512 [ %t61, %block_0_419af4 ]
  %t100 = phi i512 [ %t62, %block_0_419af4 ]
  %t101 = phi i512 [ %t63, %block_0_419af4 ]
  %t102 = phi i512 [ %t64, %block_0_419af4 ]
  %t103 = phi i512 [ %t65, %block_0_419af4 ]
  %t104 = phi i512 [ %t66, %block_0_419af4 ]
  %t105 = phi i512 [ %t67, %block_0_419af4 ]
  ; r98 := (bv_add r86 (0xa8 : bv 64))
  %t106 = add i64 %t94, 168
  ; write r98 (0x0 : bv 32)
  %t107 = inttoptr i64 %t106 to i32*
  store i32 0, i32* %t107
  ; r99 := (bv_add r86 (0xa0 : bv 64))
  %t108 = add i64 %t94, 160
  ; write r99 (0x0 : bv 64)
  %t109 = inttoptr i64 %t108 to i64*
  store i64 0, i64* %t109
  ; r100 := (bv_add r86 (0x98 : bv 64))
  %t110 = add i64 %t94, 152
  ; r101 := (bitcast r90 (vec 8 double))
  %t111 = bitcast i512 %t98 to <8 x double>
  ; r102 := (bitcast r91 (vec 8 double))
  %t112 = bitcast i512 %t99 to <8 x double>
  ; r103 := (bitcast r92 (vec 8 double))
  %t113 = bitcast i512 %t100 to <8 x double>
  ; r104 := (bitcast r93 (vec 8 double))
  %t114 = bitcast i512 %t101 to <8 x double>
  ; r105 := (bitcast r94 (vec 8 double))
  %t115 = bitcast i512 %t102 to <8 x double>
  ; r106 := (bitcast r95 (vec 8 double))
  %t116 = bitcast i512 %t103 to <8 x double>
  ; r107 := (bitcast r96 (vec 8 double))
  %t117 = bitcast i512 %t104 to <8 x double>
  ; r108 := (bitcast r97 (vec 8 double))
  %t118 = bitcast i512 %t105 to <8 x double>
  %t119 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_unlock_int(i64 %t110, i64 %t95, i64 %t93, i64 %t92, i64 %t96, i64 %t97, <8 x double> %t111, <8 x double> %t112, <8 x double> %t113, <8 x double> %t114, <8 x double> %t115, <8 x double> %t116, <8 x double> %t117, <8 x double> %t118)
  ret { i64, i64, <8 x double> } %t119
}
define void @ftrylockfile(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419b30:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call pthread_self_int(arg0, arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_self_int(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ; r17 := (tuple_field r16 0)
  %t17 = extractvalue { i64, i64, <8 x double> } %t16, 0
  ; r18 := (tuple_field r16 1)
  %t18 = extractvalue { i64, i64, <8 x double> } %t16, 1
  ; r19 := (tuple_field r16 2)
  %t19 = extractvalue { i64, i64, <8 x double> } %t16, 2
  ; r20 := (bitcast r19 (bv 512))
  %t20 = bitcast <8 x double> %t19 to i512
  ; r21 := (bitcast arg7 (bv 512))
  %t21 = bitcast <8 x double> %arg7 to i512
  ; r22 := (bitcast arg8 (bv 512))
  %t22 = bitcast <8 x double> %arg8 to i512
  ; r23 := (bitcast arg9 (bv 512))
  %t23 = bitcast <8 x double> %arg9 to i512
  ; r24 := (bitcast arg10 (bv 512))
  %t24 = bitcast <8 x double> %arg10 to i512
  ; r25 := (bitcast arg11 (bv 512))
  %t25 = bitcast <8 x double> %arg11 to i512
  ; r26 := (bitcast arg12 (bv 512))
  %t26 = bitcast <8 x double> %arg12 to i512
  ; r27 := (bitcast arg13 (bv 512))
  %t27 = bitcast <8 x double> %arg13 to i512
  br label %block_0_419b46
block_0_419b46:
  %t28 = phi i64 [ %t17, %block_0_419b30 ]
  %t29 = phi i64 [ %arg3, %block_0_419b30 ]
  %t30 = phi i64 [ %t18, %block_0_419b30 ]
  %t31 = phi i64 [ %arg0, %block_0_419b30 ]
  %t32 = phi i64 [ %arg1, %block_0_419b30 ]
  %t33 = phi i64 [ %arg4, %block_0_419b30 ]
  %t34 = phi i64 [ %arg5, %block_0_419b30 ]
  %t35 = phi i512 [ %t20, %block_0_419b30 ]
  %t36 = phi i512 [ %t21, %block_0_419b30 ]
  %t37 = phi i512 [ %t22, %block_0_419b30 ]
  %t38 = phi i512 [ %t23, %block_0_419b30 ]
  %t39 = phi i512 [ %t24, %block_0_419b30 ]
  %t40 = phi i512 [ %t25, %block_0_419b30 ]
  %t41 = phi i512 [ %t26, %block_0_419b30 ]
  %t42 = phi i512 [ %t27, %block_0_419b30 ]
  ; r43 := (bv_add r31 (0xa0 : bv 64))
  %t43 = add i64 %t31, 160
  ; r44 := (read r43 (bv 64))
  %t44 = inttoptr i64 %t43 to i64*
  %t45 = load i64, i64* %t44
  ; r45 := (eq r28 r44)
  %t46 = icmp eq i64 %t28, %t45
  br i1 %t46, label %block_0_419b52, label %block_0_419b6c
block_0_419b52:
  %t47 = phi i64 [ %t31, %block_0_419b46 ]
  ; r47 := (bv_add r46 (0xa8 : bv 64))
  %t48 = add i64 %t47, 168
  ; r48 := (read r47 (bv 32))
  %t49 = inttoptr i64 %t48 to i32*
  %t50 = load i32, i32* %t49
  ; r49 := (bv_add r48 (0x1 : bv 32))
  %t51 = add i32 %t50, 1
  ; write r47 r49
  %t52 = inttoptr i64 %t48 to i32*
  store i32 %t51, i32* %t52
  br label %block_0_419b5b
block_0_419b5b:
  ret void
block_0_419b6c:
  %t53 = phi i64 [ %t28, %block_0_419b46 ]
  %t54 = phi i64 [ %t29, %block_0_419b46 ]
  %t55 = phi i64 [ %t30, %block_0_419b46 ]
  %t56 = phi i64 [ %t31, %block_0_419b46 ]
  %t57 = phi i64 [ %t32, %block_0_419b46 ]
  %t58 = phi i64 [ %t33, %block_0_419b46 ]
  %t59 = phi i64 [ %t34, %block_0_419b46 ]
  %t60 = phi i512 [ %t35, %block_0_419b46 ]
  %t61 = phi i512 [ %t36, %block_0_419b46 ]
  %t62 = phi i512 [ %t37, %block_0_419b46 ]
  %t63 = phi i512 [ %t38, %block_0_419b46 ]
  %t64 = phi i512 [ %t39, %block_0_419b46 ]
  %t65 = phi i512 [ %t40, %block_0_419b46 ]
  %t66 = phi i512 [ %t41, %block_0_419b46 ]
  %t67 = phi i512 [ %t42, %block_0_419b46 ]
  ; r65 := (bv_add r53 (0x98 : bv 64))
  %t68 = add i64 %t56, 152
  ; r66 := (bitcast r57 (vec 8 double))
  %t69 = bitcast i512 %t60 to <8 x double>
  ; r67 := (bitcast r58 (vec 8 double))
  %t70 = bitcast i512 %t61 to <8 x double>
  ; r68 := (bitcast r59 (vec 8 double))
  %t71 = bitcast i512 %t62 to <8 x double>
  ; r69 := (bitcast r60 (vec 8 double))
  %t72 = bitcast i512 %t63 to <8 x double>
  ; r70 := (bitcast r61 (vec 8 double))
  %t73 = bitcast i512 %t64 to <8 x double>
  ; r71 := (bitcast r62 (vec 8 double))
  %t74 = bitcast i512 %t65 to <8 x double>
  ; r72 := (bitcast r63 (vec 8 double))
  %t75 = bitcast i512 %t66 to <8 x double>
  ; r73 := (bitcast r64 (vec 8 double))
  %t76 = bitcast i512 %t67 to <8 x double>
  ; r74 := call pthread_mutex_trylock_int(r65, r54, r52, r51, r55, r56, r66, r67, r68, r69, r70, r71, r72, r73)
  %t77 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_trylock_int(i64 %t68, i64 %t57, i64 %t55, i64 %t54, i64 %t58, i64 %t59, <8 x double> %t69, <8 x double> %t70, <8 x double> %t71, <8 x double> %t72, <8 x double> %t73, <8 x double> %t74, <8 x double> %t75, <8 x double> %t76)
  ; r75 := (tuple_field r74 0)
  %t78 = extractvalue { i64, i64, <8 x double> } %t77, 0
  ; r76 := (tuple_field r74 1)
  %t79 = extractvalue { i64, i64, <8 x double> } %t77, 1
  ; r77 := (tuple_field r74 2)
  %t80 = extractvalue { i64, i64, <8 x double> } %t77, 2
  ; r78 := (bitcast r77 (bv 512))
  %t81 = bitcast <8 x double> %t80 to i512
  br label %block_0_419b78
block_0_419b78:
  %t82 = phi i64 [ %t78, %block_0_419b6c ]
  %t83 = phi i64 [ %t56, %block_0_419b6c ]
  %t84 = phi i64 [ %t53, %block_0_419b6c ]
  ; r82 := (trunc r79 32)
  %t85 = trunc i64 %t82 to i32
  ; r83 := (eq r82 (0x0 : bv 32))
  %t86 = icmp eq i32 %t85, 0
  br i1 %t86, label %block_0_419b81, label %block_0_419b5b
block_0_419b81:
  %t87 = phi i64 [ %t83, %block_0_419b78 ]
  %t88 = phi i64 [ %t84, %block_0_419b78 ]
  ; r86 := (bv_add r84 (0xa0 : bv 64))
  %t89 = add i64 %t87, 160
  ; write r86 r85
  %t90 = inttoptr i64 %t89 to i64*
  store i64 %t88, i64* %t90
  ; r87 := (bv_add r84 (0xa8 : bv 64))
  %t91 = add i64 %t87, 168
  ; write r87 (0x1 : bv 32)
  %t92 = inttoptr i64 %t91 to i32*
  store i32 1, i32* %t92
  br label %block_0_419b5b
}
define { i64, i64, <8 x double> } @flockfile(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419ba0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call pthread_self_int(arg0, arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_self_int(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ; r17 := (tuple_field r16 0)
  %t17 = extractvalue { i64, i64, <8 x double> } %t16, 0
  ; r18 := (tuple_field r16 1)
  %t18 = extractvalue { i64, i64, <8 x double> } %t16, 1
  ; r19 := (tuple_field r16 2)
  %t19 = extractvalue { i64, i64, <8 x double> } %t16, 2
  ; r20 := (bitcast r19 (bv 512))
  %t20 = bitcast <8 x double> %t19 to i512
  ; r21 := (bitcast arg7 (bv 512))
  %t21 = bitcast <8 x double> %arg7 to i512
  ; r22 := (bitcast arg8 (bv 512))
  %t22 = bitcast <8 x double> %arg8 to i512
  ; r23 := (bitcast arg9 (bv 512))
  %t23 = bitcast <8 x double> %arg9 to i512
  ; r24 := (bitcast arg10 (bv 512))
  %t24 = bitcast <8 x double> %arg10 to i512
  ; r25 := (bitcast arg11 (bv 512))
  %t25 = bitcast <8 x double> %arg11 to i512
  ; r26 := (bitcast arg12 (bv 512))
  %t26 = bitcast <8 x double> %arg12 to i512
  ; r27 := (bitcast arg13 (bv 512))
  %t27 = bitcast <8 x double> %arg13 to i512
  br label %block_0_419bb6
block_0_419bb6:
  %t28 = phi i64 [ %t17, %block_0_419ba0 ]
  %t29 = phi i64 [ %arg3, %block_0_419ba0 ]
  %t30 = phi i64 [ %t18, %block_0_419ba0 ]
  %t31 = phi i64 [ %arg0, %block_0_419ba0 ]
  %t32 = phi i64 [ %arg1, %block_0_419ba0 ]
  %t33 = phi i64 [ %arg4, %block_0_419ba0 ]
  %t34 = phi i64 [ %arg5, %block_0_419ba0 ]
  %t35 = phi i512 [ %t20, %block_0_419ba0 ]
  %t36 = phi i512 [ %t21, %block_0_419ba0 ]
  %t37 = phi i512 [ %t22, %block_0_419ba0 ]
  %t38 = phi i512 [ %t23, %block_0_419ba0 ]
  %t39 = phi i512 [ %t24, %block_0_419ba0 ]
  %t40 = phi i512 [ %t25, %block_0_419ba0 ]
  %t41 = phi i512 [ %t26, %block_0_419ba0 ]
  %t42 = phi i512 [ %t27, %block_0_419ba0 ]
  ; r43 := (bv_add r31 (0xa0 : bv 64))
  %t43 = add i64 %t31, 160
  ; r44 := (read r43 (bv 64))
  %t44 = inttoptr i64 %t43 to i64*
  %t45 = load i64, i64* %t44
  ; r45 := (eq r28 r44)
  %t46 = icmp eq i64 %t28, %t45
  br i1 %t46, label %block_0_419bf0, label %block_0_419bc2
block_0_419bc2:
  %t47 = phi i64 [ %t28, %block_0_419bb6 ]
  %t48 = phi i64 [ %t29, %block_0_419bb6 ]
  %t49 = phi i64 [ %t30, %block_0_419bb6 ]
  %t50 = phi i64 [ %t31, %block_0_419bb6 ]
  %t51 = phi i64 [ %t32, %block_0_419bb6 ]
  %t52 = phi i64 [ %t33, %block_0_419bb6 ]
  %t53 = phi i64 [ %t34, %block_0_419bb6 ]
  %t54 = phi i512 [ %t35, %block_0_419bb6 ]
  %t55 = phi i512 [ %t36, %block_0_419bb6 ]
  %t56 = phi i512 [ %t37, %block_0_419bb6 ]
  %t57 = phi i512 [ %t38, %block_0_419bb6 ]
  %t58 = phi i512 [ %t39, %block_0_419bb6 ]
  %t59 = phi i512 [ %t40, %block_0_419bb6 ]
  %t60 = phi i512 [ %t41, %block_0_419bb6 ]
  %t61 = phi i512 [ %t42, %block_0_419bb6 ]
  ; r61 := (bv_add r49 (0x98 : bv 64))
  %t62 = add i64 %t50, 152
  ; r62 := (bitcast r53 (vec 8 double))
  %t63 = bitcast i512 %t54 to <8 x double>
  ; r63 := (bitcast r54 (vec 8 double))
  %t64 = bitcast i512 %t55 to <8 x double>
  ; r64 := (bitcast r55 (vec 8 double))
  %t65 = bitcast i512 %t56 to <8 x double>
  ; r65 := (bitcast r56 (vec 8 double))
  %t66 = bitcast i512 %t57 to <8 x double>
  ; r66 := (bitcast r57 (vec 8 double))
  %t67 = bitcast i512 %t58 to <8 x double>
  ; r67 := (bitcast r58 (vec 8 double))
  %t68 = bitcast i512 %t59 to <8 x double>
  ; r68 := (bitcast r59 (vec 8 double))
  %t69 = bitcast i512 %t60 to <8 x double>
  ; r69 := (bitcast r60 (vec 8 double))
  %t70 = bitcast i512 %t61 to <8 x double>
  ; r70 := call pthread_mutex_lock_int(r61, r50, r48, r47, r51, r52, r62, r63, r64, r65, r66, r67, r68, r69)
  %t71 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_mutex_lock_int(i64 %t62, i64 %t51, i64 %t49, i64 %t48, i64 %t52, i64 %t53, <8 x double> %t63, <8 x double> %t64, <8 x double> %t65, <8 x double> %t66, <8 x double> %t67, <8 x double> %t68, <8 x double> %t69, <8 x double> %t70)
  ; r71 := (tuple_field r70 0)
  %t72 = extractvalue { i64, i64, <8 x double> } %t71, 0
  ; r72 := (tuple_field r70 1)
  %t73 = extractvalue { i64, i64, <8 x double> } %t71, 1
  ; r73 := (tuple_field r70 2)
  %t74 = extractvalue { i64, i64, <8 x double> } %t71, 2
  ; r74 := (bitcast r73 (bv 512))
  %t75 = bitcast <8 x double> %t74 to i512
  br label %block_0_419bce
block_0_419bce:
  %t76 = phi i64 [ %t72, %block_0_419bc2 ]
  %t77 = phi i64 [ %t73, %block_0_419bc2 ]
  %t78 = phi i64 [ %t50, %block_0_419bc2 ]
  %t79 = phi i64 [ %t47, %block_0_419bc2 ]
  %t80 = phi i512 [ %t75, %block_0_419bc2 ]
  ; r80 := (bv_add r77 (0xa0 : bv 64))
  %t81 = add i64 %t78, 160
  ; write r80 r78
  %t82 = inttoptr i64 %t81 to i64*
  store i64 %t79, i64* %t82
  ; r81 := (bv_add r77 (0xa8 : bv 64))
  %t83 = add i64 %t78, 168
  ; write r81 (0x1 : bv 32)
  %t84 = inttoptr i64 %t83 to i32*
  store i32 1, i32* %t84
  br label %block_0_419bdf
block_0_419bdf:
  %t85 = phi i64 [ %t76, %block_0_419bce ], [ %t92, %block_0_419bf0 ]
  %t86 = phi i64 [ %t77, %block_0_419bce ], [ %t93, %block_0_419bf0 ]
  %t87 = phi i512 [ %t80, %block_0_419bce ], [ %t95, %block_0_419bf0 ]
  ; r85 := (bitcast r84 (vec 8 double))
  %t88 = bitcast i512 %t87 to <8 x double>
  ; r86 := (tuple r82 r83 r85)
  %t89 = insertvalue { i64, i64, <8 x double> } undef, i64 %t85, 0
  %t90 = insertvalue { i64, i64, <8 x double> } %t89, i64 %t86, 1
  %t91 = insertvalue { i64, i64, <8 x double> } %t90, <8 x double> %t88, 2
  ret { i64, i64, <8 x double> } %t91
block_0_419bf0:
  %t92 = phi i64 [ %t28, %block_0_419bb6 ]
  %t93 = phi i64 [ %t30, %block_0_419bb6 ]
  %t94 = phi i64 [ %t31, %block_0_419bb6 ]
  %t95 = phi i512 [ %t35, %block_0_419bb6 ]
  ; r91 := (bv_add r89 (0xa8 : bv 64))
  %t96 = add i64 %t94, 168
  ; r92 := (read r91 (bv 32))
  %t97 = inttoptr i64 %t96 to i32*
  %t98 = load i32, i32* %t97
  ; r93 := (bv_add r92 (0x1 : bv 32))
  %t99 = add i32 %t98, 1
  ; write r91 r93
  %t100 = inttoptr i64 %t96 to i32*
  store i32 %t99, i32* %t100
  br label %block_0_419bdf
}
define void @_flockfile_debug_stub(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419c00:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call flockfile(arg0, arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @flockfile(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define void @_atomic_lock_stub() {
block_0_419c50:
  ret void
}
define void @_spinlock_debug_stub() {
block_0_419c80:
  ret void
}
define void @__sclose(i64 %arg0) {
block_0_419f40:
  ; r0 := (bv_add arg0 (0x12 : bv 64))
  %t0 = add i64 %arg0, 18
  ; r1 := (read r0 (bv 16))
  %t1 = inttoptr i64 %t0 to i16*
  %t2 = load i16, i16* %t1
  ; r2 := (sext r1 32)
  %t3 = sext i16 %t2 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := call __sys_close(r3)
  %t5 = call { i64, i64, <8 x double> } (i64) @__sys_close(i64 %t4)
  ret void
}
define void @__sseek(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_419f50:
  ; r0 := (bv_add arg0 (0x12 : bv 64))
  %t0 = add i64 %arg0, 18
  ; r1 := (read r0 (bv 16))
  %t1 = inttoptr i64 %t0 to i16*
  %t2 = load i16, i16* %t1
  ; r2 := (sext r1 32)
  %t3 = sext i16 %t2 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (bitcast arg6 (bv 512))
  %t5 = bitcast <8 x double> %arg6 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t6 = bitcast i512 %t5 to <8 x double>
  ; r6 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t8 = bitcast i512 %t7 to <8 x double>
  ; r8 := (bitcast arg8 (bv 512))
  %t9 = bitcast <8 x double> %arg8 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t10 = bitcast i512 %t9 to <8 x double>
  ; r10 := (bitcast arg9 (bv 512))
  %t11 = bitcast <8 x double> %arg9 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t12 = bitcast i512 %t11 to <8 x double>
  ; r12 := (bitcast arg10 (bv 512))
  %t13 = bitcast <8 x double> %arg10 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t14 = bitcast i512 %t13 to <8 x double>
  ; r14 := (bitcast arg11 (bv 512))
  %t15 = bitcast <8 x double> %arg11 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t16 = bitcast i512 %t15 to <8 x double>
  ; r16 := (bitcast arg12 (bv 512))
  %t17 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast r16 (vec 8 double))
  %t18 = bitcast i512 %t17 to <8 x double>
  ; r18 := (bitcast arg13 (bv 512))
  %t19 = bitcast <8 x double> %arg13 to i512
  ; r19 := (bitcast r18 (vec 8 double))
  %t20 = bitcast i512 %t19 to <8 x double>
  ; r20 := call lseek(r3, arg1, arg2, arg3, arg4, arg5, r5, r7, r9, r11, r13, r15, r17, r19)
  %t21 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @lseek(i64 %t4, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t6, <8 x double> %t8, <8 x double> %t10, <8 x double> %t12, <8 x double> %t14, <8 x double> %t16, <8 x double> %t18, <8 x double> %t20)
  ret void
}
define void @__swrite(i64 %arg0, i64 %arg1, i64 %arg2) {
block_0_419f60:
  ; r0 := (bv_add arg0 (0x12 : bv 64))
  %t0 = add i64 %arg0, 18
  ; r1 := (read r0 (bv 16))
  %t1 = inttoptr i64 %t0 to i16*
  %t2 = load i16, i16* %t1
  ; r2 := (sext r1 32)
  %t3 = sext i16 %t2 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (trunc arg2 32)
  %t5 = trunc i64 %arg2 to i32
  ; r5 := (sext r4 64)
  %t6 = sext i32 %t5 to i64
  ; r6 := call __sys_write(r3, arg1, r5)
  %t7 = call { i64, i64, <8 x double> } (i64, i64, i64) @__sys_write(i64 %t4, i64 %arg1, i64 %t6)
  ; r7 := (tuple_field r6 0)
  %t8 = extractvalue { i64, i64, <8 x double> } %t7, 0
  ; r8 := (tuple_field r6 1)
  %t9 = extractvalue { i64, i64, <8 x double> } %t7, 1
  ; r9 := (tuple_field r6 2)
  %t10 = extractvalue { i64, i64, <8 x double> } %t7, 2
  ; r10 := (bitcast r9 (bv 512))
  %t11 = bitcast <8 x double> %t10 to i512
  br label %block_0_419f70
block_0_419f70:
  ret void
}
define void @__sread(i64 %arg0, i64 %arg1, i64 %arg2) {
block_0_419f80:
  ; r0 := (bv_add arg0 (0x12 : bv 64))
  %t0 = add i64 %arg0, 18
  ; r1 := (read r0 (bv 16))
  %t1 = inttoptr i64 %t0 to i16*
  %t2 = load i16, i16* %t1
  ; r2 := (sext r1 32)
  %t3 = sext i16 %t2 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (trunc arg2 32)
  %t5 = trunc i64 %arg2 to i32
  ; r5 := (sext r4 64)
  %t6 = sext i32 %t5 to i64
  ; r6 := call __sys_read(r3, arg1, r5)
  %t7 = call i64 (i64, i64, i64) @__sys_read(i64 %t4, i64 %arg1, i64 %t6)
  br label %block_0_419f90
block_0_419f90:
  ret void
}
define void @cfgetospeed(i64 %arg0) {
block_0_419fa0:
  ; r0 := (bv_add arg0 (0x28 : bv 64))
  %t0 = add i64 %arg0, 40
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ret void
}
define void @cfgetispeed(i64 %arg0) {
block_0_419fb0:
  ; r0 := (bv_add arg0 (0x24 : bv 64))
  %t0 = add i64 %arg0, 36
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ret void
}
define void @cfsetospeed(i64 %arg0, i64 %arg1) {
block_0_419fc0:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (bv_add arg0 (0x28 : bv 64))
  %t1 = add i64 %arg0, 40
  ; write r1 r0
  %t2 = inttoptr i64 %t1 to i32*
  store i32 %t0, i32* %t2
  ret void
}
define void @cfsetispeed(i64 %arg0, i64 %arg1) {
block_0_419fd0:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (bv_add arg0 (0x24 : bv 64))
  %t1 = add i64 %arg0, 36
  ; write r1 r0
  %t2 = inttoptr i64 %t1 to i32*
  store i32 %t0, i32* %t2
  ret void
}
define void @cfsetspeed(i64 %arg0, i64 %arg1) {
block_0_419fe0:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (bv_add arg0 (0x28 : bv 64))
  %t1 = add i64 %arg0, 40
  ; write r1 r0
  %t2 = inttoptr i64 %t1 to i32*
  store i32 %t0, i32* %t2
  ; r2 := (bv_add arg0 (0x24 : bv 64))
  %t3 = add i64 %arg0, 36
  ; write r2 r0
  %t4 = inttoptr i64 %t3 to i32*
  store i32 %t0, i32* %t4
  ret void
}
define void @cfmakeraw(i64 %arg0) {
block_0_419ff0:
  ; r0 := (read arg0 (bv 32))
  %t0 = inttoptr i64 %arg0 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (bv_add arg0 (0x4 : bv 64))
  %t2 = add i64 %arg0, 4
  ; r2 := (read r1 (bv 32))
  %t3 = inttoptr i64 %t2 to i32*
  %t4 = load i32, i32* %t3
  ; r3 := (bv_and r2 (0xfffffffe : bv 32))
  %t5 = and i32 %t4, 4294967294
  ; write r1 r3
  %t6 = inttoptr i64 %t2 to i32*
  store i32 %t5, i32* %t6
  ; r4 := (bv_add arg0 (0xc : bv 64))
  %t7 = add i64 %arg0, 12
  ; r5 := (read r4 (bv 32))
  %t8 = inttoptr i64 %t7 to i32*
  %t9 = load i32, i32* %t8
  ; r6 := (bv_and r5 (0x5fbffa61 : bv 32))
  %t10 = and i32 %t9, 1606416993
  ; write r4 r6
  %t11 = inttoptr i64 %t7 to i32*
  store i32 %t10, i32* %t11
  ; r7 := (bv_add arg0 (0x20 : bv 64))
  %t12 = add i64 %arg0, 32
  ; write r7 (0x1 : bv 8)
  %t13 = inttoptr i64 %t12 to i8*
  store i8 1, i8* %t13
  ; r8 := (bv_add arg0 (0x21 : bv 64))
  %t14 = add i64 %arg0, 33
  ; write r8 (0x0 : bv 8)
  %t15 = inttoptr i64 %t14 to i8*
  store i8 0, i8* %t15
  ; r9 := (bv_and r0 (0xffffd801 : bv 32))
  %t16 = and i32 %t1, 4294957057
  ; r10 := (bv_or r9 (0x1 : bv 32))
  %t17 = or i32 %t16, 1
  ; write arg0 r10
  %t18 = inttoptr i64 %arg0 to i32*
  store i32 %t17, i32* %t18
  ; r11 := (bv_add arg0 (0x8 : bv 64))
  %t19 = add i64 %arg0, 8
  ; r12 := (read r11 (bv 32))
  %t20 = inttoptr i64 %t19 to i32*
  %t21 = load i32, i32* %t20
  ; r13 := (uext r12 64)
  %t22 = zext i32 %t21 to i64
  ; r14 := (bv_shr r13 (0x8 : bv 64))
  %t23 = lshr i64 %t22, 8
  ; r15 := (trunc r14 8)
  %t24 = trunc i64 %t23 to i8
  ; r16 := (bv_and r15 (0xec : bv 8))
  %t25 = and i8 %t24, 236
  ; r17 := (bv_and r13 (0xffffffffffff00ff : bv 64))
  %t26 = and i64 %t22, 18446744073709486335
  ; r18 := (uext r16 64)
  %t27 = zext i8 %t25 to i64
  ; r19 := (bv_shl r18 (0x8 : bv 64))
  %t28 = shl i64 %t27, 8
  ; r20 := (bv_or r17 r19)
  %t29 = or i64 %t26, %t28
  ; r21 := (bv_shr r20 (0x8 : bv 64))
  %t30 = lshr i64 %t29, 8
  ; r22 := (trunc r21 8)
  %t31 = trunc i64 %t30 to i8
  ; r23 := (bv_or r22 (0xb : bv 8))
  %t32 = or i8 %t31, 11
  ; r24 := (uext r23 64)
  %t33 = zext i8 %t32 to i64
  ; r25 := (bv_shl r24 (0x8 : bv 64))
  %t34 = shl i64 %t33, 8
  ; r26 := (bv_and r12 (0xffff00ff : bv 32))
  %t35 = and i32 %t21, 4294902015
  ; r27 := (trunc r19 32)
  %t36 = trunc i64 %t28 to i32
  ; r28 := (bv_or r26 r27)
  %t37 = or i32 %t35, %t36
  ; r29 := (bv_and r28 (0xffff00ff : bv 32))
  %t38 = and i32 %t37, 4294902015
  ; r30 := (trunc r25 32)
  %t39 = trunc i64 %t34 to i32
  ; r31 := (bv_or r29 r30)
  %t40 = or i32 %t38, %t39
  ; write r11 r31
  %t41 = inttoptr i64 %t19 to i32*
  store i32 %t40, i32* %t41
  ret void
}
define void @tcdrain(i64 %arg0) {
block_0_41a020:
  ; r0 := call __sys_ioctl(arg0, (0x2000745e : bv 64), (0x0 : bv 64))
  %t0 = call { i64, <8 x double> } (i64, i64, i64) @__sys_ioctl(i64 %arg0, i64 536900702, i64 0)
  ret void
}
define { i64, <8 x double> } @tcgetattr(i64 %arg0, i64 %arg1) {
block_0_41a0b0:
  %t0 = call { i64, <8 x double> } (i64, i64, i64) @__sys_ioctl(i64 %arg0, i64 1076655123, i64 %arg1)
  ret { i64, <8 x double> } %t0
}
define void @cfmakesane(i64 %arg0) {
block_0_41a340:
  ; r0 := (bv_add arg0 (0x8 : bv 64))
  %t0 = add i64 %arg0, 8
  ; write r0 (0x4b00 : bv 32)
  %t1 = inttoptr i64 %t0 to i32*
  store i32 19200, i32* %t1
  ; write arg0 (0x2b02 : bv 32)
  %t2 = inttoptr i64 %arg0 to i32*
  store i32 11010, i32* %t2
  ; r1 := (bv_add arg0 (0x10 : bv 64))
  %t3 = add i64 %arg0, 16
  ; r2 := (bv_add arg0 (0xc : bv 64))
  %t4 = add i64 %arg0, 12
  ; write r2 (0x5cb : bv 32)
  %t5 = inttoptr i64 %t4 to i32*
  store i32 1483, i32* %t5
  ; r3 := (bv_add arg0 (0x4 : bv 64))
  %t6 = add i64 %arg0, 4
  ; write r3 (0x3 : bv 32)
  %t7 = inttoptr i64 %t6 to i32*
  store i32 3, i32* %t7
  ; r4 := (bv_add arg0 (0x24 : bv 64))
  %t8 = add i64 %arg0, 36
  ; write r4 (0x2580 : bv 32)
  %t9 = inttoptr i64 %t8 to i32*
  store i32 9600, i32* %t9
  ; r5 := (bv_add arg0 (0x28 : bv 64))
  %t10 = add i64 %arg0, 40
  ; write r5 (0x2580 : bv 32)
  %t11 = inttoptr i64 %t10 to i32*
  store i32 9600, i32* %t11
  ; r6 := (read (0x631670 : bv 64) (bv 64))
  %t12 = inttoptr i64 6493808 to i64*
  %t13 = load i64, i64* %t12
  ; write r1 r6
  %t14 = inttoptr i64 %t3 to i64*
  store i64 %t13, i64* %t14
  ; r7 := (read (0x631678 : bv 64) (bv 64))
  %t15 = inttoptr i64 6493816 to i64*
  %t16 = load i64, i64* %t15
  ; r8 := (bv_add arg0 (0x18 : bv 64))
  %t17 = add i64 %arg0, 24
  ; write r8 r7
  %t18 = inttoptr i64 %t17 to i64*
  store i64 %t16, i64* %t18
  ; r9 := (read (0x631680 : bv 64) (bv 32))
  %t19 = inttoptr i64 6493824 to i32*
  %t20 = load i32, i32* %t19
  ; r10 := (bv_add arg0 (0x20 : bv 64))
  %t21 = add i64 %arg0, 32
  ; write r10 r9
  %t22 = inttoptr i64 %t21 to i32*
  store i32 %t20, i32* %t22
  ret void
}
define void @tcsetsid(i64 %arg0, i64 %arg1) {
block_0_41a390:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (trunc arg0 32)
  %t2 = trunc i64 %arg0 to i32
  ; r3 := (uext r2 64)
  %t3 = zext i32 %t2 to i64
  ; r4 := call __sys_getsid((0x0 : bv 64))
  %t4 = call { i64, i64, <8 x double> } (i64) @__sys_getsid(i64 0)
  ; r5 := (tuple_field r4 0)
  %t5 = extractvalue { i64, i64, <8 x double> } %t4, 0
  ; r6 := (tuple_field r4 1)
  %t6 = extractvalue { i64, i64, <8 x double> } %t4, 1
  ; r7 := (tuple_field r4 2)
  %t7 = extractvalue { i64, i64, <8 x double> } %t4, 2
  ; r8 := (bitcast r7 (bv 512))
  %t8 = bitcast <8 x double> %t7 to i512
  br label %block_0_41a3a9
block_0_41a3a9:
  %t9 = phi i64 [ %t5, %block_0_41a390 ]
  %t10 = phi i64 [ %t6, %block_0_41a390 ]
  %t11 = phi i64 [ %t1, %block_0_41a390 ]
  %t12 = phi i64 [ %t3, %block_0_41a390 ]
  %t13 = phi i64 [ %arg1, %block_0_41a390 ]
  %t14 = phi i64 [ %arg0, %block_0_41a390 ]
  %t15 = phi i512 [ %t8, %block_0_41a390 ]
  ; r16 := (trunc r9 32)
  %t16 = trunc i64 %t9 to i32
  ; r17 := (trunc r11 32)
  %t17 = trunc i64 %t11 to i32
  ; r18 := (eq r16 r17)
  %t18 = icmp eq i32 %t16, %t17
  br i1 %t18, label %block_0_41a3ad, label %block_0_41a3cb
block_0_41a3ad:
  %t19 = phi i64 [ %t12, %block_0_41a3a9 ]
  ; r20 := (trunc r19 32)
  %t20 = trunc i64 %t19 to i32
  ; r21 := (uext r20 64)
  %t21 = zext i32 %t20 to i64
  ; r22 := call __sys_ioctl(r21, (0x20007461 : bv 64), (0x0 : bv 64))
  %t22 = call { i64, <8 x double> } (i64, i64, i64) @__sys_ioctl(i64 %t21, i64 536900705, i64 0)
  ret void
block_0_41a3cb:
  %t23 = phi i64 [ %t10, %block_0_41a3a9 ]
  %t24 = phi i64 [ %t13, %block_0_41a3a9 ]
  %t25 = phi i64 [ %t14, %block_0_41a3a9 ]
  %t26 = phi i512 [ %t15, %block_0_41a3a9 ]
  ; r27 := (bitcast r26 (vec 8 double))
  %t27 = bitcast i512 %t26 to <8 x double>
  ; r28 := call __error_unthreaded(r25, r24, r23, r27)
  %t28 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t25, i64 %t24, i64 %t23, <8 x double> %t27)
  ; r29 := (tuple_field r28 0)
  %t29 = extractvalue { i64, i64, <8 x double> } %t28, 0
  ; r30 := (tuple_field r28 1)
  %t30 = extractvalue { i64, i64, <8 x double> } %t28, 1
  ; r31 := (tuple_field r28 2)
  %t31 = extractvalue { i64, i64, <8 x double> } %t28, 2
  ; r32 := (bitcast r31 (bv 512))
  %t32 = bitcast <8 x double> %t31 to i512
  br label %block_0_41a3d0
block_0_41a3d0:
  %t33 = phi i64 [ %t29, %block_0_41a3cb ]
  ; write r33 (0x16 : bv 32)
  %t34 = inttoptr i64 %t33 to i32*
  store i32 22, i32* %t34
  ret void
}
define { i64, <8 x double> } @lseek(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_41a4b0:
  ; r0 := (trunc arg2 32)
  %t0 = trunc i64 %arg2 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (trunc arg0 32)
  %t2 = trunc i64 %arg0 to i32
  ; r3 := (uext r2 64)
  %t3 = zext i32 %t2 to i64
  ; r4 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg7 (bv 512))
  %t6 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg9 (bv 512))
  %t10 = bitcast <8 x double> %arg9 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg10 (bv 512))
  %t12 = bitcast <8 x double> %arg10 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg11 (bv 512))
  %t14 = bitcast <8 x double> %arg11 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := (bitcast arg12 (bv 512))
  %t16 = bitcast <8 x double> %arg12 to i512
  ; r17 := (bitcast r16 (vec 8 double))
  %t17 = bitcast i512 %t16 to <8 x double>
  ; r18 := (bitcast arg13 (bv 512))
  %t18 = bitcast <8 x double> %arg13 to i512
  ; r19 := (bitcast r18 (vec 8 double))
  %t19 = bitcast i512 %t18 to <8 x double>
  ; r20 := call __getosreldate(arg0, arg1, arg2, arg3, arg4, arg5, r5, r7, r9, r11, r13, r15, r17, r19)
  %t20 = call i64 (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__getosreldate(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15, <8 x double> %t17, <8 x double> %t19)
  br label %block_0_41a4d0
block_0_41a4d0:
  %t21 = phi i64 [ %t20, %block_0_41a4b0 ]
  %t22 = phi i64 [ %t1, %block_0_41a4b0 ]
  %t23 = phi i64 [ %arg1, %block_0_41a4b0 ]
  %t24 = phi i64 [ %t3, %block_0_41a4b0 ]
  ; r25 := (trunc r21 32)
  %t25 = trunc i64 %t21 to i32
  ; r26 := (ssbb_overflows r25 (0xaae92 : bv 32) false)
  %t26 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t25, i32 700050)
  %t27 = extractvalue { i32, i1 } %t26, 1
  ; r27 := (bv_add r25 (0xfff5516e : bv 32))
  %t28 = add i32 %t25, 4294267246
  ; r28 := (bv_slt r27 (0x0 : bv 32))
  %t29 = icmp slt i32 %t28, 0
  ; r29 := (eq r25 (0xaae92 : bv 32))
  %t30 = icmp eq i32 %t25, 700050
  ; r30 := (xor r28 r26)
  %t31 = xor i1 %t29, %t27
  ; r31 := (or r29 r30)
  %t32 = or i1 %t30, %t31
  br i1 %t32, label %block_0_41a4f6, label %block_0_41a4d7
block_0_41a4d7:
  %t33 = phi i64 [ %t22, %block_0_41a4d0 ]
  %t34 = phi i64 [ %t23, %block_0_41a4d0 ]
  %t35 = phi i64 [ %t24, %block_0_41a4d0 ]
  ; r35 := (trunc r32 32)
  %t36 = trunc i64 %t33 to i32
  ; r36 := (uext r35 64)
  %t37 = zext i32 %t36 to i64
  ; r37 := (trunc r34 32)
  %t38 = trunc i64 %t35 to i32
  ; r38 := (uext r37 64)
  %t39 = zext i32 %t38 to i64
  %t40 = call { i64, <8 x double> } (i64, i64, i64) @__sys_lseek(i64 %t39, i64 %t34, i64 %t37)
  ret { i64, <8 x double> } %t40
block_0_41a4f6:
  %t41 = phi i64 [ %t22, %block_0_41a4d0 ]
  %t42 = phi i64 [ %t23, %block_0_41a4d0 ]
  %t43 = phi i64 [ %t24, %block_0_41a4d0 ]
  ; r42 := (trunc r39 32)
  %t44 = trunc i64 %t41 to i32
  ; r43 := (uext r42 64)
  %t45 = zext i32 %t44 to i64
  ; r44 := (trunc r41 32)
  %t46 = trunc i64 %t43 to i32
  ; r45 := (uext r44 64)
  %t47 = zext i32 %t46 to i64
  %t48 = call { i64, <8 x double> } (i64, i64, i64, i64) @__sys_freebsd6_lseek(i64 %t47, i64 0, i64 %t42, i64 %t45)
  ret { i64, <8 x double> } %t48
}
define { i64, i64, <8 x double> } @memset(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41a9f0:
  ; r0 := (bv_and arg1 (0xff : bv 64))
  %t0 = and i64 %arg1, 255
  ; r1 := (ssbb_overflows arg2 (0xf : bv 64) false)
  %t1 = call { i64, i1 } (i64, i64) @llvm.ssub.with.overflow.i64(i64 %arg2, i64 15)
  %t2 = extractvalue { i64, i1 } %t1, 1
  ; r2 := (bv_add arg2 (0xfffffffffffffff1 : bv 64))
  %t3 = add i64 %arg2, 18446744073709551601
  ; r3 := (bv_slt r2 (0x0 : bv 64))
  %t4 = icmp slt i64 %t3, 0
  ; r4 := (eq arg2 (0xf : bv 64))
  %t5 = icmp eq i64 %arg2, 15
  ; r5 := (xor r3 r1)
  %t6 = xor i1 %t4, %t2
  ; r6 := (or r4 r5)
  %t7 = or i1 %t5, %t6
  ; r7 := (bitcast arg3 (bv 512))
  %t8 = bitcast <8 x double> %arg3 to i512
  ; r8 := (bitcast arg3 (bv 512))
  %t9 = bitcast <8 x double> %arg3 to i512
  br i1 %t7, label %block_0_41aa3e, label %block_0_41aa06
block_0_41aa06:
  %t10 = phi i64 [ %t0, %block_0_41a9f0 ]
  %t11 = phi i64 [ %arg2, %block_0_41a9f0 ]
  %t12 = phi i64 [ %arg0, %block_0_41a9f0 ]
  %t13 = phi i512 [ %t9, %block_0_41a9f0 ]
  ; r13 := (trunc r9 8)
  %t14 = trunc i64 %t10 to i8
  ; r14 := (uext r13 64)
  %t15 = zext i8 %t14 to i64
  ; r15 := (bv_shl r14 (0x8 : bv 64))
  %t16 = shl i64 %t15, 8
  ; r16 := (trunc r9 32)
  %t17 = trunc i64 %t10 to i32
  ; r17 := (bv_and r16 (0xffff00ff : bv 32))
  %t18 = and i32 %t17, 4294902015
  ; r18 := (trunc r15 32)
  %t19 = trunc i64 %t16 to i32
  ; r19 := (bv_or r17 r18)
  %t20 = or i32 %t18, %t19
  ; r20 := (bv_shl r19 (0x10 : bv 32))
  %t21 = shl i32 %t20, 16
  ; r21 := (trunc r20 8)
  %t22 = trunc i32 %t21 to i8
  ; r22 := (bv_or r20 r19)
  %t23 = or i32 %t21, %t20
  ; r23 := (trunc r15 8)
  %t24 = trunc i64 %t16 to i8
  ; r24 := (bv_or r13 r23)
  %t25 = or i8 %t14, %t24
  ; r25 := (bv_or r21 r24)
  %t26 = or i8 %t22, %t25
  ; r26 := (uext r22 64)
  %t27 = zext i32 %t23 to i64
  ; r27 := (bv_shl r26 (0x20 : bv 64))
  %t28 = shl i64 %t27, 32
  ; r28 := (trunc r27 8)
  %t29 = trunc i64 %t28 to i8
  ; r29 := (bv_or r27 r26)
  %t30 = or i64 %t28, %t27
  ; r30 := (bv_or r28 r25)
  %t31 = or i8 %t29, %t26
  ; r31 := (bv_sub (0x0 : bv 64) r11)
  %t32 = sub i64 0, %t12
  ; r32 := (bv_and r31 (0x7 : bv 64))
  %t33 = and i64 %t32, 7
  ; r33 := (bv_sub r10 r32)
  %t34 = sub i64 %t11, %t33
  ; repStos (8,r11,r30,r32,false)
  call void (i64, i64, i8) asm "rep stosb", "{cx},{di},{ax},~{memory},~{flags}"(i64 %t33, i64 %t12, i8 %t31)
  ; r34 := (bv_add r11 r32)
  %t35 = add i64 %t12, %t33
  ; r35 := (bv_shr r33 (0x3 : bv 64))
  %t36 = lshr i64 %t34, 3
  ; repStos (64,r34,r29,r35,false)
  call void (i64, i64, i64) asm "rep stosq", "{cx},{di},{ax},~{memory},~{flags}"(i64 %t36, i64 %t35, i64 %t30)
  ; r36 := (bv_mul (0x8 : bv 64) r35)
  %t37 = mul i64 8, %t36
  ; r37 := (bv_add r34 r36)
  %t38 = add i64 %t35, %t37
  ; r38 := (bv_and r33 (0x7 : bv 64))
  %t39 = and i64 %t34, 7
  br label %block_0_41aa3e
block_0_41aa3e:
  %t40 = phi i64 [ %t0, %block_0_41a9f0 ], [ %t30, %block_0_41aa06 ]
  %t41 = phi i64 [ %arg2, %block_0_41a9f0 ], [ %t39, %block_0_41aa06 ]
  %t42 = phi i64 [ %arg2, %block_0_41a9f0 ], [ %t33, %block_0_41aa06 ]
  %t43 = phi i64 [ %arg0, %block_0_41a9f0 ], [ %t38, %block_0_41aa06 ]
  %t44 = phi i64 [ %arg0, %block_0_41a9f0 ], [ %t12, %block_0_41aa06 ]
  %t45 = phi i512 [ %t8, %block_0_41a9f0 ], [ %t13, %block_0_41aa06 ]
  ; r45 := (trunc r39 8)
  %t46 = trunc i64 %t40 to i8
  ; repStos (8,r42,r45,r40,false)
  call void (i64, i64, i8) asm "rep stosb", "{cx},{di},{ax},~{memory},~{flags}"(i64 %t41, i64 %t43, i8 %t46)
  ; r46 := (bitcast r44 (vec 8 double))
  %t47 = bitcast i512 %t45 to <8 x double>
  ; r47 := (tuple r43 r41 r46)
  %t48 = insertvalue { i64, i64, <8 x double> } undef, i64 %t44, 0
  %t49 = insertvalue { i64, i64, <8 x double> } %t48, i64 %t42, 1
  %t50 = insertvalue { i64, i64, <8 x double> } %t49, <8 x double> %t47, 2
  ret { i64, i64, <8 x double> } %t50
}
define { i64, i64, <8 x double> } @__error_unthreaded(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41aac0:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (tuple (0x641e60 : bv 64) arg2 r1)
  %t2 = insertvalue { i64, i64, <8 x double> } undef, i64 6561376, 0
  %t3 = insertvalue { i64, i64, <8 x double> } %t2, i64 %arg2, 1
  %t4 = insertvalue { i64, i64, <8 x double> } %t3, <8 x double> %t1, 2
  ret { i64, i64, <8 x double> } %t4
}
define void @stub_zero() {
block_0_41b2b0:
  ret void
}
define void @stub_null() {
block_0_41b2c0:
  ret void
}
define void @stub_self() {
block_0_41b2d0:
  ret void
}
define void @stub_main() {
block_0_41b2e0:
  ret void
}
define void @stub_true() {
block_0_41b2f0:
  ret void
}
define void @_thread_init_stub() {
block_0_41b310:
  ret void
}
define { i64, i64, <8 x double> } @catclose(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_41b4b0:
  ; r0 := (bv_add arg0 (0xffffffffffffffff : bv 64))
  %t0 = add i64 %arg0, 18446744073709551615
  ; r1 := (eq arg0 (0xfffffffffffffffe : bv 64))
  %t1 = icmp eq i64 %arg0, 18446744073709551614
  ; r2 := (bv_ule (0xfffffffffffffffd : bv 64) r0)
  %t2 = icmp ule i64 18446744073709551613, %t0
  ; r3 := (not r1)
  %t3 = icmp eq i1 %t1, 0
  ; r4 := (and r2 r3)
  %t4 = and i1 %t2, %t3
  ; r5 := (bitcast arg6 (bv 512))
  %t5 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r7 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r8 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r9 := (bitcast arg9 (bv 512))
  %t9 = bitcast <8 x double> %arg9 to i512
  ; r10 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r11 := (bitcast arg11 (bv 512))
  %t11 = bitcast <8 x double> %arg11 to i512
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast arg13 (bv 512))
  %t13 = bitcast <8 x double> %arg13 to i512
  br i1 %t4, label %block_0_41b5a8, label %block_0_41b4c7
block_0_41b4c7:
  %t14 = phi i64 [ %arg2, %block_0_41b4b0 ]
  %t15 = phi i64 [ %arg0, %block_0_41b4b0 ]
  %t16 = phi i64 [ %arg1, %block_0_41b4b0 ]
  %t17 = phi i64 [ %arg4, %block_0_41b4b0 ]
  %t18 = phi i64 [ %arg5, %block_0_41b4b0 ]
  %t19 = phi i512 [ %t6, %block_0_41b4b0 ]
  %t20 = phi i512 [ %t7, %block_0_41b4b0 ]
  %t21 = phi i512 [ %t8, %block_0_41b4b0 ]
  %t22 = phi i512 [ %t9, %block_0_41b4b0 ]
  %t23 = phi i512 [ %t10, %block_0_41b4b0 ]
  %t24 = phi i512 [ %t11, %block_0_41b4b0 ]
  %t25 = phi i512 [ %t12, %block_0_41b4b0 ]
  %t26 = phi i512 [ %t13, %block_0_41b4b0 ]
  ; r27 := (read (0x6356e8 : bv 64) (bv 32))
  %t27 = inttoptr i64 6510312 to i32*
  %t28 = load i32, i32* %t27
  ; r28 := (uext r27 64)
  %t29 = zext i32 %t28 to i64
  ; r29 := (eq r27 (0x0 : bv 32))
  %t30 = icmp eq i32 %t28, 0
  br i1 %t30, label %block_0_41b4d1, label %block_0_41b51e
block_0_41b4d1:
  %t31 = phi i64 [ %t29, %block_0_41b4c7 ], [ %t194, %block_0_41b528 ]
  %t32 = phi i64 [ %t15, %block_0_41b4c7 ], [ %t196, %block_0_41b528 ]
  %t33 = phi i64 [ %t16, %block_0_41b4c7 ], [ %t197, %block_0_41b528 ]
  %t34 = phi i64 [ %t17, %block_0_41b4c7 ], [ %t199, %block_0_41b528 ]
  %t35 = phi i64 [ %t18, %block_0_41b4c7 ], [ %t200, %block_0_41b528 ]
  %t36 = phi i512 [ %t19, %block_0_41b4c7 ], [ %t201, %block_0_41b528 ]
  %t37 = phi i512 [ %t20, %block_0_41b4c7 ], [ %t202, %block_0_41b528 ]
  %t38 = phi i512 [ %t21, %block_0_41b4c7 ], [ %t203, %block_0_41b528 ]
  %t39 = phi i512 [ %t22, %block_0_41b4c7 ], [ %t204, %block_0_41b528 ]
  %t40 = phi i512 [ %t23, %block_0_41b4c7 ], [ %t205, %block_0_41b528 ]
  %t41 = phi i512 [ %t24, %block_0_41b4c7 ], [ %t206, %block_0_41b528 ]
  %t42 = phi i512 [ %t25, %block_0_41b4c7 ], [ %t207, %block_0_41b528 ]
  %t43 = phi i512 [ %t26, %block_0_41b4c7 ], [ %t208, %block_0_41b528 ]
  ; r43 := (read (0x641520 : bv 64) (bv 64))
  %t44 = inttoptr i64 6559008 to i64*
  %t45 = load i64, i64* %t44
  ; r44 := (eq r43 (0x0 : bv 64))
  %t46 = icmp eq i64 %t45, 0
  br i1 %t46, label %block_0_41b4dd, label %block_0_41b4e8
block_0_41b4dd:
  %t47 = phi i64 [ %t31, %block_0_41b4d1 ]
  %t48 = phi i64 [ %t33, %block_0_41b4d1 ]
  %t49 = phi i64 [ %t34, %block_0_41b4d1 ]
  %t50 = phi i64 [ %t35, %block_0_41b4d1 ]
  %t51 = phi i512 [ %t36, %block_0_41b4d1 ]
  %t52 = phi i512 [ %t37, %block_0_41b4d1 ]
  %t53 = phi i512 [ %t38, %block_0_41b4d1 ]
  %t54 = phi i512 [ %t39, %block_0_41b4d1 ]
  %t55 = phi i512 [ %t40, %block_0_41b4d1 ]
  %t56 = phi i512 [ %t41, %block_0_41b4d1 ]
  %t57 = phi i512 [ %t42, %block_0_41b4d1 ]
  %t58 = phi i512 [ %t43, %block_0_41b4d1 ]
  br label %block_0_41b4ff
block_0_41b4e0:
  %t59 = phi i64 [ %t76, %block_0_41b4e8 ]
  %t60 = phi i64 [ %t77, %block_0_41b4e8 ]
  %t61 = phi i64 [ %t78, %block_0_41b4e8 ]
  %t62 = phi i64 [ %t79, %block_0_41b4e8 ]
  %t63 = phi i64 [ %t80, %block_0_41b4e8 ]
  %t64 = phi i64 [ %t81, %block_0_41b4e8 ]
  %t65 = phi i512 [ %t82, %block_0_41b4e8 ]
  %t66 = phi i512 [ %t83, %block_0_41b4e8 ]
  %t67 = phi i512 [ %t84, %block_0_41b4e8 ]
  %t68 = phi i512 [ %t85, %block_0_41b4e8 ]
  %t69 = phi i512 [ %t86, %block_0_41b4e8 ]
  %t70 = phi i512 [ %t87, %block_0_41b4e8 ]
  %t71 = phi i512 [ %t88, %block_0_41b4e8 ]
  %t72 = phi i512 [ %t89, %block_0_41b4e8 ]
  ; r71 := (read r58 (bv 64))
  %t73 = inttoptr i64 %t60 to i64*
  %t74 = load i64, i64* %t73
  ; r72 := (eq r71 (0x0 : bv 64))
  %t75 = icmp eq i64 %t74, 0
  br i1 %t75, label %block_0_41b4ff, label %block_0_41b4e8
block_0_41b4e8:
  %t76 = phi i64 [ %t31, %block_0_41b4d1 ], [ %t59, %block_0_41b4e0 ]
  %t77 = phi i64 [ %t45, %block_0_41b4d1 ], [ %t74, %block_0_41b4e0 ]
  %t78 = phi i64 [ %t32, %block_0_41b4d1 ], [ %t61, %block_0_41b4e0 ]
  %t79 = phi i64 [ %t33, %block_0_41b4d1 ], [ %t62, %block_0_41b4e0 ]
  %t80 = phi i64 [ %t34, %block_0_41b4d1 ], [ %t63, %block_0_41b4e0 ]
  %t81 = phi i64 [ %t35, %block_0_41b4d1 ], [ %t64, %block_0_41b4e0 ]
  %t82 = phi i512 [ %t36, %block_0_41b4d1 ], [ %t65, %block_0_41b4e0 ]
  %t83 = phi i512 [ %t37, %block_0_41b4d1 ], [ %t66, %block_0_41b4e0 ]
  %t84 = phi i512 [ %t38, %block_0_41b4d1 ], [ %t67, %block_0_41b4e0 ]
  %t85 = phi i512 [ %t39, %block_0_41b4d1 ], [ %t68, %block_0_41b4e0 ]
  %t86 = phi i512 [ %t40, %block_0_41b4d1 ], [ %t69, %block_0_41b4e0 ]
  %t87 = phi i512 [ %t41, %block_0_41b4d1 ], [ %t70, %block_0_41b4e0 ]
  %t88 = phi i512 [ %t42, %block_0_41b4d1 ], [ %t71, %block_0_41b4e0 ]
  %t89 = phi i512 [ %t43, %block_0_41b4d1 ], [ %t72, %block_0_41b4e0 ]
  ; r87 := (bv_add r74 (0x20 : bv 64))
  %t90 = add i64 %t77, 32
  ; r88 := (read r87 (bv 64))
  %t91 = inttoptr i64 %t90 to i64*
  %t92 = load i64, i64* %t91
  ; r89 := (eq r88 r75)
  %t93 = icmp eq i64 %t92, %t78
  br i1 %t93, label %block_0_41b4f2, label %block_0_41b4e0
block_0_41b4f2:
  %t94 = phi i64 [ %t76, %block_0_41b4e8 ]
  %t95 = phi i64 [ %t77, %block_0_41b4e8 ]
  %t96 = phi i64 [ %t78, %block_0_41b4e8 ]
  %t97 = phi i64 [ %t79, %block_0_41b4e8 ]
  %t98 = phi i64 [ %t80, %block_0_41b4e8 ]
  %t99 = phi i64 [ %t81, %block_0_41b4e8 ]
  %t100 = phi i512 [ %t82, %block_0_41b4e8 ]
  %t101 = phi i512 [ %t83, %block_0_41b4e8 ]
  %t102 = phi i512 [ %t84, %block_0_41b4e8 ]
  %t103 = phi i512 [ %t85, %block_0_41b4e8 ]
  %t104 = phi i512 [ %t86, %block_0_41b4e8 ]
  %t105 = phi i512 [ %t87, %block_0_41b4e8 ]
  %t106 = phi i512 [ %t88, %block_0_41b4e8 ]
  %t107 = phi i512 [ %t89, %block_0_41b4e8 ]
  ; r104 := (bv_add r91 (0x30 : bv 64))
  %t108 = add i64 %t95, 48
  ; r105 := (read r104 (bv 32))
  %t109 = inttoptr i64 %t108 to i32*
  %t110 = load i32, i32* %t109
  ; r106 := (bv_add r105 (0xffffffff : bv 32))
  %t111 = add i32 %t110, 4294967295
  ; r107 := (eq r105 (0x1 : bv 32))
  %t112 = icmp eq i32 %t110, 1
  ; write r104 r106
  %t113 = inttoptr i64 %t108 to i32*
  store i32 %t111, i32* %t113
  br i1 %t112, label %block_0_41b540, label %block_0_41b4ff
block_0_41b4ff:
  %t114 = phi i64 [ %t47, %block_0_41b4dd ], [ %t59, %block_0_41b4e0 ], [ %t94, %block_0_41b4f2 ], [ %t476, %block_0_41b597 ]
  %t115 = phi i64 [ %t48, %block_0_41b4dd ], [ %t62, %block_0_41b4e0 ], [ %t97, %block_0_41b4f2 ], [ %t477, %block_0_41b597 ]
  %t116 = phi i64 [ %t49, %block_0_41b4dd ], [ %t63, %block_0_41b4e0 ], [ %t98, %block_0_41b4f2 ], [ %t478, %block_0_41b597 ]
  %t117 = phi i64 [ %t50, %block_0_41b4dd ], [ %t64, %block_0_41b4e0 ], [ %t99, %block_0_41b4f2 ], [ %t479, %block_0_41b597 ]
  %t118 = phi i512 [ %t51, %block_0_41b4dd ], [ %t65, %block_0_41b4e0 ], [ %t100, %block_0_41b4f2 ], [ %t480, %block_0_41b597 ]
  %t119 = phi i512 [ %t52, %block_0_41b4dd ], [ %t66, %block_0_41b4e0 ], [ %t101, %block_0_41b4f2 ], [ %t481, %block_0_41b597 ]
  %t120 = phi i512 [ %t53, %block_0_41b4dd ], [ %t67, %block_0_41b4e0 ], [ %t102, %block_0_41b4f2 ], [ %t482, %block_0_41b597 ]
  %t121 = phi i512 [ %t54, %block_0_41b4dd ], [ %t68, %block_0_41b4e0 ], [ %t103, %block_0_41b4f2 ], [ %t483, %block_0_41b597 ]
  %t122 = phi i512 [ %t55, %block_0_41b4dd ], [ %t69, %block_0_41b4e0 ], [ %t104, %block_0_41b4f2 ], [ %t484, %block_0_41b597 ]
  %t123 = phi i512 [ %t56, %block_0_41b4dd ], [ %t70, %block_0_41b4e0 ], [ %t105, %block_0_41b4f2 ], [ %t485, %block_0_41b597 ]
  %t124 = phi i512 [ %t57, %block_0_41b4dd ], [ %t71, %block_0_41b4e0 ], [ %t106, %block_0_41b4f2 ], [ %t486, %block_0_41b597 ]
  %t125 = phi i512 [ %t58, %block_0_41b4dd ], [ %t72, %block_0_41b4e0 ], [ %t107, %block_0_41b4f2 ], [ %t487, %block_0_41b597 ]
  ; r120 := (read (0x6356e8 : bv 64) (bv 32))
  %t126 = inttoptr i64 6510312 to i32*
  %t127 = load i32, i32* %t126
  ; r121 := (uext r120 64)
  %t128 = zext i32 %t127 to i64
  ; r122 := (eq r120 (0x0 : bv 32))
  %t129 = icmp eq i32 %t127, 0
  br i1 %t129, label %block_0_41b517, label %block_0_41b50b
block_0_41b50b:
  %t130 = phi i64 [ %t114, %block_0_41b4ff ]
  %t131 = phi i64 [ %t128, %block_0_41b4ff ]
  %t132 = phi i64 [ %t115, %block_0_41b4ff ]
  %t133 = phi i64 [ %t116, %block_0_41b4ff ]
  %t134 = phi i64 [ %t117, %block_0_41b4ff ]
  %t135 = phi i512 [ %t118, %block_0_41b4ff ]
  %t136 = phi i512 [ %t119, %block_0_41b4ff ]
  %t137 = phi i512 [ %t120, %block_0_41b4ff ]
  %t138 = phi i512 [ %t121, %block_0_41b4ff ]
  %t139 = phi i512 [ %t122, %block_0_41b4ff ]
  %t140 = phi i512 [ %t123, %block_0_41b4ff ]
  %t141 = phi i512 [ %t124, %block_0_41b4ff ]
  %t142 = phi i512 [ %t125, %block_0_41b4ff ]
  ; r136 := (bitcast r128 (vec 8 double))
  %t143 = bitcast i512 %t135 to <8 x double>
  ; r137 := (bitcast r129 (vec 8 double))
  %t144 = bitcast i512 %t136 to <8 x double>
  ; r138 := (bitcast r130 (vec 8 double))
  %t145 = bitcast i512 %t137 to <8 x double>
  ; r139 := (bitcast r131 (vec 8 double))
  %t146 = bitcast i512 %t138 to <8 x double>
  ; r140 := (bitcast r132 (vec 8 double))
  %t147 = bitcast i512 %t139 to <8 x double>
  ; r141 := (bitcast r133 (vec 8 double))
  %t148 = bitcast i512 %t140 to <8 x double>
  ; r142 := (bitcast r134 (vec 8 double))
  %t149 = bitcast i512 %t141 to <8 x double>
  ; r143 := (bitcast r135 (vec 8 double))
  %t150 = bitcast i512 %t142 to <8 x double>
  ; r144 := call pthread_rwlock_unlock_int((0x641528 : bv 64), r125, r124, r123, r126, r127, r136, r137, r138, r139, r140, r141, r142, r143)
  %t151 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_rwlock_unlock_int(i64 6559016, i64 %t132, i64 %t131, i64 %t130, i64 %t133, i64 %t134, <8 x double> %t143, <8 x double> %t144, <8 x double> %t145, <8 x double> %t146, <8 x double> %t147, <8 x double> %t148, <8 x double> %t149, <8 x double> %t150)
  ; r145 := (tuple_field r144 0)
  %t152 = extractvalue { i64, i64, <8 x double> } %t151, 0
  ; r146 := (tuple_field r144 1)
  %t153 = extractvalue { i64, i64, <8 x double> } %t151, 1
  ; r147 := (tuple_field r144 2)
  %t154 = extractvalue { i64, i64, <8 x double> } %t151, 2
  ; r148 := (bitcast r147 (bv 512))
  %t155 = bitcast <8 x double> %t154 to i512
  br label %block_0_41b515
block_0_41b515:
  %t156 = phi i64 [ %t153, %block_0_41b50b ]
  %t157 = phi i512 [ %t155, %block_0_41b50b ]
  br label %block_0_41b517
block_0_41b517:
  %t158 = phi i64 [ 0, %block_0_41b4ff ], [ 0, %block_0_41b515 ], [ 4294967295, %block_0_41b533 ], [ 4294967295, %block_0_41b5ad ]
  %t159 = phi i64 [ %t128, %block_0_41b4ff ], [ %t156, %block_0_41b515 ], [ %t224, %block_0_41b533 ], [ %t516, %block_0_41b5ad ]
  %t160 = phi i512 [ %t118, %block_0_41b4ff ], [ %t157, %block_0_41b515 ], [ %t226, %block_0_41b533 ], [ %t517, %block_0_41b5ad ]
  ; r154 := (bitcast r153 (vec 8 double))
  %t161 = bitcast i512 %t160 to <8 x double>
  ; r155 := (tuple r151 r152 r154)
  %t162 = insertvalue { i64, i64, <8 x double> } undef, i64 %t158, 0
  %t163 = insertvalue { i64, i64, <8 x double> } %t162, i64 %t159, 1
  %t164 = insertvalue { i64, i64, <8 x double> } %t163, <8 x double> %t161, 2
  ret { i64, i64, <8 x double> } %t164
block_0_41b51e:
  %t165 = phi i64 [ %t29, %block_0_41b4c7 ]
  %t166 = phi i64 [ %t14, %block_0_41b4c7 ]
  %t167 = phi i64 [ %t15, %block_0_41b4c7 ]
  %t168 = phi i64 [ %t16, %block_0_41b4c7 ]
  %t169 = phi i64 [ %t15, %block_0_41b4c7 ]
  %t170 = phi i64 [ %t17, %block_0_41b4c7 ]
  %t171 = phi i64 [ %t18, %block_0_41b4c7 ]
  %t172 = phi i512 [ %t19, %block_0_41b4c7 ]
  %t173 = phi i512 [ %t20, %block_0_41b4c7 ]
  %t174 = phi i512 [ %t21, %block_0_41b4c7 ]
  %t175 = phi i512 [ %t22, %block_0_41b4c7 ]
  %t176 = phi i512 [ %t23, %block_0_41b4c7 ]
  %t177 = phi i512 [ %t24, %block_0_41b4c7 ]
  %t178 = phi i512 [ %t25, %block_0_41b4c7 ]
  %t179 = phi i512 [ %t26, %block_0_41b4c7 ]
  ; r171 := (bitcast r163 (vec 8 double))
  %t180 = bitcast i512 %t172 to <8 x double>
  ; r172 := (bitcast r164 (vec 8 double))
  %t181 = bitcast i512 %t173 to <8 x double>
  ; r173 := (bitcast r165 (vec 8 double))
  %t182 = bitcast i512 %t174 to <8 x double>
  ; r174 := (bitcast r166 (vec 8 double))
  %t183 = bitcast i512 %t175 to <8 x double>
  ; r175 := (bitcast r167 (vec 8 double))
  %t184 = bitcast i512 %t176 to <8 x double>
  ; r176 := (bitcast r168 (vec 8 double))
  %t185 = bitcast i512 %t177 to <8 x double>
  ; r177 := (bitcast r169 (vec 8 double))
  %t186 = bitcast i512 %t178 to <8 x double>
  ; r178 := (bitcast r170 (vec 8 double))
  %t187 = bitcast i512 %t179 to <8 x double>
  ; r179 := call pthread_rwlock_wrlock_int((0x641528 : bv 64), r159, r157, r156, r161, r162, r171, r172, r173, r174, r175, r176, r177, r178)
  %t188 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @pthread_rwlock_wrlock_int(i64 6559016, i64 %t168, i64 %t166, i64 %t165, i64 %t170, i64 %t171, <8 x double> %t180, <8 x double> %t181, <8 x double> %t182, <8 x double> %t183, <8 x double> %t184, <8 x double> %t185, <8 x double> %t186, <8 x double> %t187)
  ; r180 := (tuple_field r179 0)
  %t189 = extractvalue { i64, i64, <8 x double> } %t188, 0
  ; r181 := (tuple_field r179 1)
  %t190 = extractvalue { i64, i64, <8 x double> } %t188, 1
  ; r182 := (tuple_field r179 2)
  %t191 = extractvalue { i64, i64, <8 x double> } %t188, 2
  ; r183 := (bitcast r182 (bv 512))
  %t192 = bitcast <8 x double> %t191 to i512
  br label %block_0_41b528
block_0_41b528:
  %t193 = phi i64 [ %t189, %block_0_41b51e ]
  %t194 = phi i64 [ %t165, %block_0_41b51e ]
  %t195 = phi i64 [ %t190, %block_0_41b51e ]
  %t196 = phi i64 [ %t167, %block_0_41b51e ]
  %t197 = phi i64 [ %t168, %block_0_41b51e ]
  %t198 = phi i64 [ %t169, %block_0_41b51e ]
  %t199 = phi i64 [ %t170, %block_0_41b51e ]
  %t200 = phi i64 [ %t171, %block_0_41b51e ]
  %t201 = phi i512 [ %t192, %block_0_41b51e ]
  %t202 = phi i512 [ %t173, %block_0_41b51e ]
  %t203 = phi i512 [ %t174, %block_0_41b51e ]
  %t204 = phi i512 [ %t175, %block_0_41b51e ]
  %t205 = phi i512 [ %t176, %block_0_41b51e ]
  %t206 = phi i512 [ %t177, %block_0_41b51e ]
  %t207 = phi i512 [ %t178, %block_0_41b51e ]
  %t208 = phi i512 [ %t179, %block_0_41b51e ]
  ; r200 := (trunc r184 32)
  %t209 = trunc i64 %t193 to i32
  ; r201 := (eq r200 (0x0 : bv 32))
  %t210 = icmp eq i32 %t209, 0
  ; r202 := (uext r200 64)
  %t211 = zext i32 %t209 to i64
  br i1 %t210, label %block_0_41b4d1, label %block_0_41b52e
block_0_41b52e:
  %t212 = phi i64 [ %t195, %block_0_41b528 ]
  %t213 = phi i64 [ %t211, %block_0_41b528 ]
  %t214 = phi i64 [ %t197, %block_0_41b528 ]
  %t215 = phi i64 [ %t198, %block_0_41b528 ]
  %t216 = phi i512 [ %t201, %block_0_41b528 ]
  ; r208 := (bitcast r207 (vec 8 double))
  %t217 = bitcast i512 %t216 to <8 x double>
  ; r209 := call __error_unthreaded(r206, r205, r203, r208)
  %t218 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t215, i64 %t214, i64 %t212, <8 x double> %t217)
  ; r210 := (tuple_field r209 0)
  %t219 = extractvalue { i64, i64, <8 x double> } %t218, 0
  ; r211 := (tuple_field r209 1)
  %t220 = extractvalue { i64, i64, <8 x double> } %t218, 1
  ; r212 := (tuple_field r209 2)
  %t221 = extractvalue { i64, i64, <8 x double> } %t218, 2
  ; r213 := (bitcast r212 (bv 512))
  %t222 = bitcast <8 x double> %t221 to i512
  br label %block_0_41b533
block_0_41b533:
  %t223 = phi i64 [ %t219, %block_0_41b52e ]
  %t224 = phi i64 [ %t220, %block_0_41b52e ]
  %t225 = phi i64 [ %t213, %block_0_41b52e ]
  %t226 = phi i512 [ %t222, %block_0_41b52e ]
  ; r218 := (trunc r216 32)
  %t227 = trunc i64 %t225 to i32
  ; write r214 r218
  %t228 = inttoptr i64 %t223 to i32*
  store i32 %t227, i32* %t228
  br label %block_0_41b517
block_0_41b540:
  %t229 = phi i64 [ %t94, %block_0_41b4f2 ]
  %t230 = phi i64 [ %t95, %block_0_41b4f2 ]
  %t231 = phi i64 [ %t96, %block_0_41b4f2 ]
  %t232 = phi i64 [ %t97, %block_0_41b4f2 ]
  %t233 = phi i64 [ %t98, %block_0_41b4f2 ]
  %t234 = phi i64 [ %t99, %block_0_41b4f2 ]
  %t235 = phi i512 [ %t101, %block_0_41b4f2 ]
  %t236 = phi i512 [ %t102, %block_0_41b4f2 ]
  %t237 = phi i512 [ %t103, %block_0_41b4f2 ]
  %t238 = phi i512 [ %t104, %block_0_41b4f2 ]
  %t239 = phi i512 [ %t105, %block_0_41b4f2 ]
  %t240 = phi i512 [ %t106, %block_0_41b4f2 ]
  %t241 = phi i512 [ %t107, %block_0_41b4f2 ]
  ; r232 := (bv_add r221 (0x8 : bv 64))
  %t242 = add i64 %t231, 8
  ; r233 := (read r232 (bv 32))
  %t243 = inttoptr i64 %t242 to i32*
  %t244 = load i32, i32* %t243
  ; r234 := (sext r233 64)
  %t245 = sext i32 %t244 to i64
  ; r235 := (read r221 (bv 64))
  %t246 = inttoptr i64 %t231 to i64*
  %t247 = load i64, i64* %t246
  ; r236 := call __sys_munmap(r235, r234)
  %t248 = call { i64, i64, <8 x double> } (i64, i64) @__sys_munmap(i64 %t247, i64 %t245)
  ; r237 := (tuple_field r236 0)
  %t249 = extractvalue { i64, i64, <8 x double> } %t248, 0
  ; r238 := (tuple_field r236 1)
  %t250 = extractvalue { i64, i64, <8 x double> } %t248, 1
  ; r239 := (tuple_field r236 2)
  %t251 = extractvalue { i64, i64, <8 x double> } %t248, 2
  ; r240 := (bitcast r239 (bv 512))
  %t252 = bitcast <8 x double> %t251 to i512
  br label %block_0_41b54d
block_0_41b54d:
  %t253 = phi i64 [ %t229, %block_0_41b540 ]
  %t254 = phi i64 [ %t250, %block_0_41b540 ]
  %t255 = phi i64 [ %t230, %block_0_41b540 ]
  %t256 = phi i64 [ %t231, %block_0_41b540 ]
  %t257 = phi i64 [ %t232, %block_0_41b540 ]
  %t258 = phi i64 [ %t233, %block_0_41b540 ]
  %t259 = phi i64 [ %t234, %block_0_41b540 ]
  %t260 = phi i512 [ %t252, %block_0_41b540 ]
  %t261 = phi i512 [ %t235, %block_0_41b540 ]
  %t262 = phi i512 [ %t236, %block_0_41b540 ]
  %t263 = phi i512 [ %t237, %block_0_41b540 ]
  %t264 = phi i512 [ %t238, %block_0_41b540 ]
  %t265 = phi i512 [ %t239, %block_0_41b540 ]
  %t266 = phi i512 [ %t240, %block_0_41b540 ]
  %t267 = phi i512 [ %t241, %block_0_41b540 ]
  ; r256 := (bitcast r248 (vec 8 double))
  %t268 = bitcast i512 %t260 to <8 x double>
  ; r257 := (bitcast r249 (vec 8 double))
  %t269 = bitcast i512 %t261 to <8 x double>
  ; r258 := (bitcast r250 (vec 8 double))
  %t270 = bitcast i512 %t262 to <8 x double>
  ; r259 := (bitcast r251 (vec 8 double))
  %t271 = bitcast i512 %t263 to <8 x double>
  ; r260 := (bitcast r252 (vec 8 double))
  %t272 = bitcast i512 %t264 to <8 x double>
  ; r261 := (bitcast r253 (vec 8 double))
  %t273 = bitcast i512 %t265 to <8 x double>
  ; r262 := (bitcast r254 (vec 8 double))
  %t274 = bitcast i512 %t266 to <8 x double>
  ; r263 := (bitcast r255 (vec 8 double))
  %t275 = bitcast i512 %t267 to <8 x double>
  ; r264 := call free(r244, r245, r242, r241, r246, r247, r256, r257, r258, r259, r260, r261, r262, r263)
  %t276 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t256, i64 %t257, i64 %t254, i64 %t253, i64 %t258, i64 %t259, <8 x double> %t268, <8 x double> %t269, <8 x double> %t270, <8 x double> %t271, <8 x double> %t272, <8 x double> %t273, <8 x double> %t274, <8 x double> %t275)
  ; r265 := (tuple_field r264 0)
  %t277 = extractvalue { i64, i64, <8 x double> } %t276, 0
  ; r266 := (tuple_field r264 1)
  %t278 = extractvalue { i64, i64, <8 x double> } %t276, 1
  ; r267 := (tuple_field r264 2)
  %t279 = extractvalue { i64, i64, <8 x double> } %t276, 2
  ; r268 := (bitcast r267 (bv 512))
  %t280 = bitcast <8 x double> %t279 to i512
  br label %block_0_41b555
block_0_41b555:
  %t281 = phi i64 [ %t253, %block_0_41b54d ]
  %t282 = phi i64 [ %t255, %block_0_41b54d ]
  %t283 = phi i64 [ %t257, %block_0_41b54d ]
  %t284 = phi i64 [ %t258, %block_0_41b54d ]
  %t285 = phi i64 [ %t259, %block_0_41b54d ]
  %t286 = phi i512 [ %t280, %block_0_41b54d ]
  %t287 = phi i512 [ %t261, %block_0_41b54d ]
  %t288 = phi i512 [ %t262, %block_0_41b54d ]
  %t289 = phi i512 [ %t263, %block_0_41b54d ]
  %t290 = phi i512 [ %t264, %block_0_41b54d ]
  %t291 = phi i512 [ %t265, %block_0_41b54d ]
  %t292 = phi i512 [ %t266, %block_0_41b54d ]
  %t293 = phi i512 [ %t267, %block_0_41b54d ]
  ; r282 := (read (0x641520 : bv 64) (bv 64))
  %t294 = inttoptr i64 6559008 to i64*
  %t295 = load i64, i64* %t294
  ; r283 := (eq r282 r270)
  %t296 = icmp eq i64 %t295, %t282
  br i1 %t296, label %block_0_41b561, label %block_0_41b566
block_0_41b561:
  %t297 = phi i64 [ %t281, %block_0_41b555 ]
  %t298 = phi i64 [ %t295, %block_0_41b555 ]
  %t299 = phi i64 [ %t282, %block_0_41b555 ]
  %t300 = phi i64 [ %t283, %block_0_41b555 ]
  %t301 = phi i64 [ %t284, %block_0_41b555 ]
  %t302 = phi i64 [ %t285, %block_0_41b555 ]
  %t303 = phi i512 [ %t286, %block_0_41b555 ]
  %t304 = phi i512 [ %t287, %block_0_41b555 ]
  %t305 = phi i512 [ %t288, %block_0_41b555 ]
  %t306 = phi i512 [ %t289, %block_0_41b555 ]
  %t307 = phi i512 [ %t290, %block_0_41b555 ]
  %t308 = phi i512 [ %t291, %block_0_41b555 ]
  %t309 = phi i512 [ %t292, %block_0_41b555 ]
  %t310 = phi i512 [ %t293, %block_0_41b555 ]
  br label %block_0_41b59c
block_0_41b563:
  %t311 = phi i64 [ %t340, %block_0_41b566 ]
  %t312 = phi i64 [ %t325, %block_0_41b566 ]
  %t313 = phi i64 [ %t327, %block_0_41b566 ]
  %t314 = phi i64 [ %t328, %block_0_41b566 ]
  %t315 = phi i64 [ %t329, %block_0_41b566 ]
  %t316 = phi i64 [ %t330, %block_0_41b566 ]
  %t317 = phi i512 [ %t331, %block_0_41b566 ]
  %t318 = phi i512 [ %t332, %block_0_41b566 ]
  %t319 = phi i512 [ %t333, %block_0_41b566 ]
  %t320 = phi i512 [ %t334, %block_0_41b566 ]
  %t321 = phi i512 [ %t335, %block_0_41b566 ]
  %t322 = phi i512 [ %t336, %block_0_41b566 ]
  %t323 = phi i512 [ %t337, %block_0_41b566 ]
  %t324 = phi i512 [ %t338, %block_0_41b566 ]
  br label %block_0_41b566
block_0_41b566:
  %t325 = phi i64 [ %t281, %block_0_41b555 ], [ %t312, %block_0_41b563 ]
  %t326 = phi i64 [ %t295, %block_0_41b555 ], [ %t311, %block_0_41b563 ]
  %t327 = phi i64 [ %t282, %block_0_41b555 ], [ %t313, %block_0_41b563 ]
  %t328 = phi i64 [ %t283, %block_0_41b555 ], [ %t314, %block_0_41b563 ]
  %t329 = phi i64 [ %t284, %block_0_41b555 ], [ %t315, %block_0_41b563 ]
  %t330 = phi i64 [ %t285, %block_0_41b555 ], [ %t316, %block_0_41b563 ]
  %t331 = phi i512 [ %t286, %block_0_41b555 ], [ %t317, %block_0_41b563 ]
  %t332 = phi i512 [ %t287, %block_0_41b555 ], [ %t318, %block_0_41b563 ]
  %t333 = phi i512 [ %t288, %block_0_41b555 ], [ %t319, %block_0_41b563 ]
  %t334 = phi i512 [ %t289, %block_0_41b555 ], [ %t320, %block_0_41b563 ]
  %t335 = phi i512 [ %t290, %block_0_41b555 ], [ %t321, %block_0_41b563 ]
  %t336 = phi i512 [ %t291, %block_0_41b555 ], [ %t322, %block_0_41b563 ]
  %t337 = phi i512 [ %t292, %block_0_41b555 ], [ %t323, %block_0_41b563 ]
  %t338 = phi i512 [ %t293, %block_0_41b555 ], [ %t324, %block_0_41b563 ]
  ; r326 := (read r313 (bv 64))
  %t339 = inttoptr i64 %t326 to i64*
  %t340 = load i64, i64* %t339
  ; r327 := (eq r326 r314)
  %t341 = icmp eq i64 %t340, %t327
  br i1 %t341, label %block_0_41b56e, label %block_0_41b563
block_0_41b56e:
  %t342 = phi i64 [ %t325, %block_0_41b566 ]
  %t343 = phi i64 [ %t326, %block_0_41b566 ]
  %t344 = phi i64 [ %t327, %block_0_41b566 ]
  %t345 = phi i64 [ %t328, %block_0_41b566 ]
  %t346 = phi i64 [ %t329, %block_0_41b566 ]
  %t347 = phi i64 [ %t330, %block_0_41b566 ]
  %t348 = phi i512 [ %t331, %block_0_41b566 ]
  %t349 = phi i512 [ %t332, %block_0_41b566 ]
  %t350 = phi i512 [ %t333, %block_0_41b566 ]
  %t351 = phi i512 [ %t334, %block_0_41b566 ]
  %t352 = phi i512 [ %t335, %block_0_41b566 ]
  %t353 = phi i512 [ %t336, %block_0_41b566 ]
  %t354 = phi i512 [ %t337, %block_0_41b566 ]
  %t355 = phi i512 [ %t338, %block_0_41b566 ]
  ; r342 := (read r330 (bv 64))
  %t356 = inttoptr i64 %t344 to i64*
  %t357 = load i64, i64* %t356
  ; write r329 r342
  %t358 = inttoptr i64 %t343 to i64*
  store i64 %t357, i64* %t358
  br label %block_0_41b574
block_0_41b574:
  %t359 = phi i64 [ %t342, %block_0_41b56e ], [ %t488, %block_0_41b59c ]
  %t360 = phi i64 [ %t343, %block_0_41b56e ], [ %t489, %block_0_41b59c ]
  %t361 = phi i64 [ %t344, %block_0_41b56e ], [ %t490, %block_0_41b59c ]
  %t362 = phi i64 [ %t345, %block_0_41b56e ], [ %t491, %block_0_41b59c ]
  %t363 = phi i64 [ %t346, %block_0_41b56e ], [ %t492, %block_0_41b59c ]
  %t364 = phi i64 [ %t347, %block_0_41b56e ], [ %t493, %block_0_41b59c ]
  %t365 = phi i512 [ %t348, %block_0_41b56e ], [ %t494, %block_0_41b59c ]
  %t366 = phi i512 [ %t349, %block_0_41b56e ], [ %t495, %block_0_41b59c ]
  %t367 = phi i512 [ %t350, %block_0_41b56e ], [ %t496, %block_0_41b59c ]
  %t368 = phi i512 [ %t351, %block_0_41b56e ], [ %t497, %block_0_41b59c ]
  %t369 = phi i512 [ %t352, %block_0_41b56e ], [ %t498, %block_0_41b59c ]
  %t370 = phi i512 [ %t353, %block_0_41b56e ], [ %t499, %block_0_41b59c ]
  %t371 = phi i512 [ %t354, %block_0_41b56e ], [ %t500, %block_0_41b59c ]
  %t372 = phi i512 [ %t355, %block_0_41b56e ], [ %t501, %block_0_41b59c ]
  ; r357 := (bv_add r345 (0x8 : bv 64))
  %t373 = add i64 %t361, 8
  ; r358 := (read r357 (bv 64))
  %t374 = inttoptr i64 %t373 to i64*
  %t375 = load i64, i64* %t374
  ; r359 := (bitcast r349 (vec 8 double))
  %t376 = bitcast i512 %t365 to <8 x double>
  ; r360 := (bitcast r350 (vec 8 double))
  %t377 = bitcast i512 %t366 to <8 x double>
  ; r361 := (bitcast r351 (vec 8 double))
  %t378 = bitcast i512 %t367 to <8 x double>
  ; r362 := (bitcast r352 (vec 8 double))
  %t379 = bitcast i512 %t368 to <8 x double>
  ; r363 := (bitcast r353 (vec 8 double))
  %t380 = bitcast i512 %t369 to <8 x double>
  ; r364 := (bitcast r354 (vec 8 double))
  %t381 = bitcast i512 %t370 to <8 x double>
  ; r365 := (bitcast r355 (vec 8 double))
  %t382 = bitcast i512 %t371 to <8 x double>
  ; r366 := (bitcast r356 (vec 8 double))
  %t383 = bitcast i512 %t372 to <8 x double>
  ; r367 := call free(r358, r346, r344, r343, r347, r348, r359, r360, r361, r362, r363, r364, r365, r366)
  %t384 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t375, i64 %t362, i64 %t360, i64 %t359, i64 %t363, i64 %t364, <8 x double> %t376, <8 x double> %t377, <8 x double> %t378, <8 x double> %t379, <8 x double> %t380, <8 x double> %t381, <8 x double> %t382, <8 x double> %t383)
  ; r368 := (tuple_field r367 0)
  %t385 = extractvalue { i64, i64, <8 x double> } %t384, 0
  ; r369 := (tuple_field r367 1)
  %t386 = extractvalue { i64, i64, <8 x double> } %t384, 1
  ; r370 := (tuple_field r367 2)
  %t387 = extractvalue { i64, i64, <8 x double> } %t384, 2
  ; r371 := (bitcast r370 (bv 512))
  %t388 = bitcast <8 x double> %t387 to i512
  br label %block_0_41b57d
block_0_41b57d:
  %t389 = phi i64 [ %t359, %block_0_41b574 ]
  %t390 = phi i64 [ %t386, %block_0_41b574 ]
  %t391 = phi i64 [ %t361, %block_0_41b574 ]
  %t392 = phi i64 [ %t362, %block_0_41b574 ]
  %t393 = phi i64 [ %t363, %block_0_41b574 ]
  %t394 = phi i64 [ %t364, %block_0_41b574 ]
  %t395 = phi i512 [ %t388, %block_0_41b574 ]
  %t396 = phi i512 [ %t366, %block_0_41b574 ]
  %t397 = phi i512 [ %t367, %block_0_41b574 ]
  %t398 = phi i512 [ %t368, %block_0_41b574 ]
  %t399 = phi i512 [ %t369, %block_0_41b574 ]
  %t400 = phi i512 [ %t370, %block_0_41b574 ]
  %t401 = phi i512 [ %t371, %block_0_41b574 ]
  %t402 = phi i512 [ %t372, %block_0_41b574 ]
  ; r386 := (bv_add r374 (0x10 : bv 64))
  %t403 = add i64 %t391, 16
  ; r387 := (read r386 (bv 64))
  %t404 = inttoptr i64 %t403 to i64*
  %t405 = load i64, i64* %t404
  ; r388 := (bitcast r378 (vec 8 double))
  %t406 = bitcast i512 %t395 to <8 x double>
  ; r389 := (bitcast r379 (vec 8 double))
  %t407 = bitcast i512 %t396 to <8 x double>
  ; r390 := (bitcast r380 (vec 8 double))
  %t408 = bitcast i512 %t397 to <8 x double>
  ; r391 := (bitcast r381 (vec 8 double))
  %t409 = bitcast i512 %t398 to <8 x double>
  ; r392 := (bitcast r382 (vec 8 double))
  %t410 = bitcast i512 %t399 to <8 x double>
  ; r393 := (bitcast r383 (vec 8 double))
  %t411 = bitcast i512 %t400 to <8 x double>
  ; r394 := (bitcast r384 (vec 8 double))
  %t412 = bitcast i512 %t401 to <8 x double>
  ; r395 := (bitcast r385 (vec 8 double))
  %t413 = bitcast i512 %t402 to <8 x double>
  ; r396 := call free(r387, r375, r373, r372, r376, r377, r388, r389, r390, r391, r392, r393, r394, r395)
  %t414 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t405, i64 %t392, i64 %t390, i64 %t389, i64 %t393, i64 %t394, <8 x double> %t406, <8 x double> %t407, <8 x double> %t408, <8 x double> %t409, <8 x double> %t410, <8 x double> %t411, <8 x double> %t412, <8 x double> %t413)
  ; r397 := (tuple_field r396 0)
  %t415 = extractvalue { i64, i64, <8 x double> } %t414, 0
  ; r398 := (tuple_field r396 1)
  %t416 = extractvalue { i64, i64, <8 x double> } %t414, 1
  ; r399 := (tuple_field r396 2)
  %t417 = extractvalue { i64, i64, <8 x double> } %t414, 2
  ; r400 := (bitcast r399 (bv 512))
  %t418 = bitcast <8 x double> %t417 to i512
  br label %block_0_41b586
block_0_41b586:
  %t419 = phi i64 [ %t389, %block_0_41b57d ]
  %t420 = phi i64 [ %t416, %block_0_41b57d ]
  %t421 = phi i64 [ %t391, %block_0_41b57d ]
  %t422 = phi i64 [ %t392, %block_0_41b57d ]
  %t423 = phi i64 [ %t393, %block_0_41b57d ]
  %t424 = phi i64 [ %t394, %block_0_41b57d ]
  %t425 = phi i512 [ %t418, %block_0_41b57d ]
  %t426 = phi i512 [ %t396, %block_0_41b57d ]
  %t427 = phi i512 [ %t397, %block_0_41b57d ]
  %t428 = phi i512 [ %t398, %block_0_41b57d ]
  %t429 = phi i512 [ %t399, %block_0_41b57d ]
  %t430 = phi i512 [ %t400, %block_0_41b57d ]
  %t431 = phi i512 [ %t401, %block_0_41b57d ]
  %t432 = phi i512 [ %t402, %block_0_41b57d ]
  ; r415 := (bv_add r403 (0x28 : bv 64))
  %t433 = add i64 %t421, 40
  ; r416 := (read r415 (bv 64))
  %t434 = inttoptr i64 %t433 to i64*
  %t435 = load i64, i64* %t434
  ; r417 := (bitcast r407 (vec 8 double))
  %t436 = bitcast i512 %t425 to <8 x double>
  ; r418 := (bitcast r408 (vec 8 double))
  %t437 = bitcast i512 %t426 to <8 x double>
  ; r419 := (bitcast r409 (vec 8 double))
  %t438 = bitcast i512 %t427 to <8 x double>
  ; r420 := (bitcast r410 (vec 8 double))
  %t439 = bitcast i512 %t428 to <8 x double>
  ; r421 := (bitcast r411 (vec 8 double))
  %t440 = bitcast i512 %t429 to <8 x double>
  ; r422 := (bitcast r412 (vec 8 double))
  %t441 = bitcast i512 %t430 to <8 x double>
  ; r423 := (bitcast r413 (vec 8 double))
  %t442 = bitcast i512 %t431 to <8 x double>
  ; r424 := (bitcast r414 (vec 8 double))
  %t443 = bitcast i512 %t432 to <8 x double>
  ; r425 := call free(r416, r404, r402, r401, r405, r406, r417, r418, r419, r420, r421, r422, r423, r424)
  %t444 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t435, i64 %t422, i64 %t420, i64 %t419, i64 %t423, i64 %t424, <8 x double> %t436, <8 x double> %t437, <8 x double> %t438, <8 x double> %t439, <8 x double> %t440, <8 x double> %t441, <8 x double> %t442, <8 x double> %t443)
  ; r426 := (tuple_field r425 0)
  %t445 = extractvalue { i64, i64, <8 x double> } %t444, 0
  ; r427 := (tuple_field r425 1)
  %t446 = extractvalue { i64, i64, <8 x double> } %t444, 1
  ; r428 := (tuple_field r425 2)
  %t447 = extractvalue { i64, i64, <8 x double> } %t444, 2
  ; r429 := (bitcast r428 (bv 512))
  %t448 = bitcast <8 x double> %t447 to i512
  br label %block_0_41b58f
block_0_41b58f:
  %t449 = phi i64 [ %t419, %block_0_41b586 ]
  %t450 = phi i64 [ %t446, %block_0_41b586 ]
  %t451 = phi i64 [ %t421, %block_0_41b586 ]
  %t452 = phi i64 [ %t422, %block_0_41b586 ]
  %t453 = phi i64 [ %t423, %block_0_41b586 ]
  %t454 = phi i64 [ %t424, %block_0_41b586 ]
  %t455 = phi i512 [ %t448, %block_0_41b586 ]
  %t456 = phi i512 [ %t426, %block_0_41b586 ]
  %t457 = phi i512 [ %t427, %block_0_41b586 ]
  %t458 = phi i512 [ %t428, %block_0_41b586 ]
  %t459 = phi i512 [ %t429, %block_0_41b586 ]
  %t460 = phi i512 [ %t430, %block_0_41b586 ]
  %t461 = phi i512 [ %t431, %block_0_41b586 ]
  %t462 = phi i512 [ %t432, %block_0_41b586 ]
  ; r444 := (bitcast r436 (vec 8 double))
  %t463 = bitcast i512 %t455 to <8 x double>
  ; r445 := (bitcast r437 (vec 8 double))
  %t464 = bitcast i512 %t456 to <8 x double>
  ; r446 := (bitcast r438 (vec 8 double))
  %t465 = bitcast i512 %t457 to <8 x double>
  ; r447 := (bitcast r439 (vec 8 double))
  %t466 = bitcast i512 %t458 to <8 x double>
  ; r448 := (bitcast r440 (vec 8 double))
  %t467 = bitcast i512 %t459 to <8 x double>
  ; r449 := (bitcast r441 (vec 8 double))
  %t468 = bitcast i512 %t460 to <8 x double>
  ; r450 := (bitcast r442 (vec 8 double))
  %t469 = bitcast i512 %t461 to <8 x double>
  ; r451 := (bitcast r443 (vec 8 double))
  %t470 = bitcast i512 %t462 to <8 x double>
  ; r452 := call free(r432, r433, r431, r430, r434, r435, r444, r445, r446, r447, r448, r449, r450, r451)
  %t471 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t451, i64 %t452, i64 %t450, i64 %t449, i64 %t453, i64 %t454, <8 x double> %t463, <8 x double> %t464, <8 x double> %t465, <8 x double> %t466, <8 x double> %t467, <8 x double> %t468, <8 x double> %t469, <8 x double> %t470)
  ; r453 := (tuple_field r452 0)
  %t472 = extractvalue { i64, i64, <8 x double> } %t471, 0
  ; r454 := (tuple_field r452 1)
  %t473 = extractvalue { i64, i64, <8 x double> } %t471, 1
  ; r455 := (tuple_field r452 2)
  %t474 = extractvalue { i64, i64, <8 x double> } %t471, 2
  ; r456 := (bitcast r455 (bv 512))
  %t475 = bitcast <8 x double> %t474 to i512
  br label %block_0_41b597
block_0_41b597:
  %t476 = phi i64 [ %t449, %block_0_41b58f ]
  %t477 = phi i64 [ %t452, %block_0_41b58f ]
  %t478 = phi i64 [ %t453, %block_0_41b58f ]
  %t479 = phi i64 [ %t454, %block_0_41b58f ]
  %t480 = phi i512 [ %t475, %block_0_41b58f ]
  %t481 = phi i512 [ %t456, %block_0_41b58f ]
  %t482 = phi i512 [ %t457, %block_0_41b58f ]
  %t483 = phi i512 [ %t458, %block_0_41b58f ]
  %t484 = phi i512 [ %t459, %block_0_41b58f ]
  %t485 = phi i512 [ %t460, %block_0_41b58f ]
  %t486 = phi i512 [ %t461, %block_0_41b58f ]
  %t487 = phi i512 [ %t462, %block_0_41b58f ]
  br label %block_0_41b4ff
block_0_41b59c:
  %t488 = phi i64 [ %t297, %block_0_41b561 ]
  %t489 = phi i64 [ %t298, %block_0_41b561 ]
  %t490 = phi i64 [ %t299, %block_0_41b561 ]
  %t491 = phi i64 [ %t300, %block_0_41b561 ]
  %t492 = phi i64 [ %t301, %block_0_41b561 ]
  %t493 = phi i64 [ %t302, %block_0_41b561 ]
  %t494 = phi i512 [ %t303, %block_0_41b561 ]
  %t495 = phi i512 [ %t304, %block_0_41b561 ]
  %t496 = phi i512 [ %t305, %block_0_41b561 ]
  %t497 = phi i512 [ %t306, %block_0_41b561 ]
  %t498 = phi i512 [ %t307, %block_0_41b561 ]
  %t499 = phi i512 [ %t308, %block_0_41b561 ]
  %t500 = phi i512 [ %t309, %block_0_41b561 ]
  %t501 = phi i512 [ %t310, %block_0_41b561 ]
  ; r483 := (read r471 (bv 64))
  %t502 = inttoptr i64 %t490 to i64*
  %t503 = load i64, i64* %t502
  ; write (0x641520 : bv 64) r483
  %t504 = inttoptr i64 6559008 to i64*
  store i64 %t503, i64* %t504
  br label %block_0_41b574
block_0_41b5a8:
  %t505 = phi i64 [ %arg2, %block_0_41b4b0 ]
  %t506 = phi i64 [ %arg0, %block_0_41b4b0 ]
  %t507 = phi i64 [ %arg1, %block_0_41b4b0 ]
  %t508 = phi i512 [ %t5, %block_0_41b4b0 ]
  ; r488 := (bitcast r487 (vec 8 double))
  %t509 = bitcast i512 %t508 to <8 x double>
  ; r489 := call __error_unthreaded(r485, r486, r484, r488)
  %t510 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t506, i64 %t507, i64 %t505, <8 x double> %t509)
  ; r490 := (tuple_field r489 0)
  %t511 = extractvalue { i64, i64, <8 x double> } %t510, 0
  ; r491 := (tuple_field r489 1)
  %t512 = extractvalue { i64, i64, <8 x double> } %t510, 1
  ; r492 := (tuple_field r489 2)
  %t513 = extractvalue { i64, i64, <8 x double> } %t510, 2
  ; r493 := (bitcast r492 (bv 512))
  %t514 = bitcast <8 x double> %t513 to i512
  br label %block_0_41b5ad
block_0_41b5ad:
  %t515 = phi i64 [ %t511, %block_0_41b5a8 ]
  %t516 = phi i64 [ %t512, %block_0_41b5a8 ]
  %t517 = phi i512 [ %t514, %block_0_41b5a8 ]
  ; write r494 (0x9 : bv 32)
  %t518 = inttoptr i64 %t515 to i32*
  store i32 9, i32* %t518
  br label %block_0_41b517
}
define { i64, <8 x double> } @__get_locale_env(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41c290:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (bitcast arg3 (bv 512))
  %t2 = bitcast <8 x double> %arg3 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := call getenv((0x429340 : bv 64), arg1, arg2, r3)
  %t4 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @getenv(i64 4363072, i64 %arg1, i64 %arg2, <8 x double> %t3)
  ; r5 := (tuple_field r4 0)
  %t5 = extractvalue { i64, i64, <8 x double> } %t4, 0
  ; r6 := (tuple_field r4 1)
  %t6 = extractvalue { i64, i64, <8 x double> } %t4, 1
  ; r7 := (tuple_field r4 2)
  %t7 = extractvalue { i64, i64, <8 x double> } %t4, 2
  ; r8 := (bitcast r7 (bv 512))
  %t8 = bitcast <8 x double> %t7 to i512
  br label %block_0_41c29d
block_0_41c29d:
  %t9 = phi i64 [ %t5, %block_0_41c290 ]
  %t10 = phi i64 [ %t6, %block_0_41c290 ]
  %t11 = phi i64 [ %t1, %block_0_41c290 ]
  %t12 = phi i64 [ %arg1, %block_0_41c290 ]
  %t13 = phi i512 [ %t8, %block_0_41c290 ]
  ; r14 := (eq r9 (0x0 : bv 64))
  %t14 = icmp eq i64 %t9, 0
  br i1 %t14, label %block_0_41c2d0, label %block_0_41c2a2
block_0_41c2a2:
  %t15 = phi i64 [ %t9, %block_0_41c29d ]
  %t16 = phi i64 [ %t10, %block_0_41c29d ]
  %t17 = phi i64 [ %t11, %block_0_41c29d ]
  %t18 = phi i64 [ %t12, %block_0_41c29d ]
  %t19 = phi i512 [ %t13, %block_0_41c29d ]
  ; r20 := (read r15 (bv 8))
  %t20 = inttoptr i64 %t15 to i8*
  %t21 = load i8, i8* %t20
  ; r21 := (eq r20 (0x0 : bv 8))
  %t22 = icmp eq i8 %t21, 0
  br i1 %t22, label %block_0_41c2d0, label %block_0_41c2a7
block_0_41c2a7:
  %t23 = phi i64 [ %t15, %block_0_41c2a2 ], [ %t74, %block_0_41c2e0 ]
  %t24 = phi i64 [ %t16, %block_0_41c2a2 ], [ %t75, %block_0_41c2e0 ]
  %t25 = phi i64 [ %t18, %block_0_41c2a2 ], [ %t76, %block_0_41c2e0 ]
  %t26 = phi i512 [ %t19, %block_0_41c2a2 ], [ %t77, %block_0_41c2e0 ]
  ; r26 := (eq r22 (0x0 : bv 64))
  %t27 = icmp eq i64 %t23, 0
  br i1 %t27, label %block_0_41c2b2, label %block_0_41c2ac
block_0_41c2ac:
  %t28 = phi i64 [ %t23, %block_0_41c2a7 ]
  %t29 = phi i64 [ %t24, %block_0_41c2a7 ]
  %t30 = phi i64 [ %t25, %block_0_41c2a7 ]
  %t31 = phi i512 [ %t26, %block_0_41c2a7 ]
  ; r31 := (read r27 (bv 8))
  %t32 = inttoptr i64 %t28 to i8*
  %t33 = load i8, i8* %t32
  ; r32 := (eq r31 (0x0 : bv 8))
  %t34 = icmp eq i8 %t33, 0
  br i1 %t34, label %block_0_41c2b2, label %block_0_41c2cb
block_0_41c2b2:
  %t35 = phi i64 [ %t24, %block_0_41c2a7 ], [ %t29, %block_0_41c2ac ]
  %t36 = phi i64 [ %t25, %block_0_41c2a7 ], [ %t30, %block_0_41c2ac ]
  %t37 = phi i512 [ %t26, %block_0_41c2a7 ], [ %t31, %block_0_41c2ac ]
  ; r36 := (bitcast r35 (vec 8 double))
  %t38 = bitcast i512 %t37 to <8 x double>
  ; r37 := call getenv((0x4292c3 : bv 64), r34, r33, r36)
  %t39 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @getenv(i64 4362947, i64 %t36, i64 %t35, <8 x double> %t38)
  ; r38 := (tuple_field r37 0)
  %t40 = extractvalue { i64, i64, <8 x double> } %t39, 0
  ; r39 := (tuple_field r37 1)
  %t41 = extractvalue { i64, i64, <8 x double> } %t39, 1
  ; r40 := (tuple_field r37 2)
  %t42 = extractvalue { i64, i64, <8 x double> } %t39, 2
  ; r41 := (bitcast r40 (bv 512))
  %t43 = bitcast <8 x double> %t42 to i512
  br label %block_0_41c2bc
block_0_41c2bc:
  %t44 = phi i64 [ %t40, %block_0_41c2b2 ]
  %t45 = phi i512 [ %t43, %block_0_41c2b2 ]
  ; r44 := (eq r42 (0x0 : bv 64))
  %t46 = icmp eq i64 %t44, 0
  br i1 %t46, label %block_0_41c2c6, label %block_0_41c2c1
block_0_41c2c1:
  %t47 = phi i64 [ %t44, %block_0_41c2bc ]
  %t48 = phi i512 [ %t45, %block_0_41c2bc ]
  ; r47 := (read r45 (bv 8))
  %t49 = inttoptr i64 %t47 to i8*
  %t50 = load i8, i8* %t49
  ; r48 := (eq r47 (0x0 : bv 8))
  %t51 = icmp eq i8 %t50, 0
  br i1 %t51, label %block_0_41c2c6, label %block_0_41c2cb
block_0_41c2c6:
  %t52 = phi i512 [ %t45, %block_0_41c2bc ], [ %t48, %block_0_41c2c1 ]
  br label %block_0_41c2cb
block_0_41c2cb:
  %t53 = phi i64 [ %t28, %block_0_41c2ac ], [ %t47, %block_0_41c2c1 ], [ 4363150, %block_0_41c2c6 ]
  %t54 = phi i512 [ %t31, %block_0_41c2ac ], [ %t48, %block_0_41c2c1 ], [ %t52, %block_0_41c2c6 ]
  ; r52 := (bitcast r51 (vec 8 double))
  %t55 = bitcast i512 %t54 to <8 x double>
  ; r53 := (tuple r50 r52)
  %t56 = insertvalue { i64, <8 x double> } undef, i64 %t53, 0
  %t57 = insertvalue { i64, <8 x double> } %t56, <8 x double> %t55, 1
  ret { i64, <8 x double> } %t57
block_0_41c2d0:
  %t58 = phi i64 [ %t10, %block_0_41c29d ], [ %t16, %block_0_41c2a2 ]
  %t59 = phi i64 [ %t11, %block_0_41c29d ], [ %t17, %block_0_41c2a2 ]
  %t60 = phi i64 [ %t12, %block_0_41c29d ], [ %t18, %block_0_41c2a2 ]
  %t61 = phi i512 [ %t13, %block_0_41c29d ], [ %t19, %block_0_41c2a2 ]
  ; r58 := (trunc r55 32)
  %t62 = trunc i64 %t59 to i32
  ; r59 := (sext r58 64)
  %t63 = sext i32 %t62 to i64
  ; r60 := (bv_mul (0x8 : bv 64) r59)
  %t64 = mul i64 8, %t63
  ; r61 := (bv_add r60 (0x429400 : bv 64))
  %t65 = add i64 %t64, 4363264
  ; r62 := (read r61 (bv 64))
  %t66 = inttoptr i64 %t65 to i64*
  %t67 = load i64, i64* %t66
  ; r63 := (bitcast r57 (vec 8 double))
  %t68 = bitcast i512 %t61 to <8 x double>
  ; r64 := call getenv(r62, r56, r54, r63)
  %t69 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @getenv(i64 %t67, i64 %t60, i64 %t58, <8 x double> %t68)
  ; r65 := (tuple_field r64 0)
  %t70 = extractvalue { i64, i64, <8 x double> } %t69, 0
  ; r66 := (tuple_field r64 1)
  %t71 = extractvalue { i64, i64, <8 x double> } %t69, 1
  ; r67 := (tuple_field r64 2)
  %t72 = extractvalue { i64, i64, <8 x double> } %t69, 2
  ; r68 := (bitcast r67 (bv 512))
  %t73 = bitcast <8 x double> %t72 to i512
  br label %block_0_41c2e0
block_0_41c2e0:
  %t74 = phi i64 [ %t70, %block_0_41c2d0 ]
  %t75 = phi i64 [ %t71, %block_0_41c2d0 ]
  %t76 = phi i64 [ %t60, %block_0_41c2d0 ]
  %t77 = phi i512 [ %t73, %block_0_41c2d0 ]
  br label %block_0_41c2a7
}
define { i64, i64, <8 x double> } @__detect_path_locale(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41c2f0:
  ; r0 := (read (0x641e68 : bv 64) (bv 64))
  %t0 = inttoptr i64 6561384 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (eq r0 (0x0 : bv 64))
  %t2 = icmp eq i64 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  br i1 %t2, label %block_0_41c301, label %block_0_41c2fb
block_0_41c2fb:
  %t5 = phi i512 [ %t4, %block_0_41c2f0 ], [ %t78, %block_0_41c33d ]
  br label %block_0_41c2fd
block_0_41c2fd:
  %t6 = phi i64 [ 0, %block_0_41c2fb ], [ 63, %block_0_41c324 ], [ 12, %block_0_41c34e ], [ %t112, %block_0_41c35e ], [ 0, %block_0_41c362 ]
  %t7 = phi i512 [ %t5, %block_0_41c2fb ], [ %t58, %block_0_41c324 ], [ %t94, %block_0_41c34e ], [ %t109, %block_0_41c35e ], [ %t113, %block_0_41c362 ]
  ; r7 := (trunc r5 32)
  %t8 = trunc i64 %t6 to i32
  ; r8 := (uext r7 64)
  %t9 = zext i32 %t8 to i64
  ; r9 := (bitcast r6 (vec 8 double))
  %t10 = bitcast i512 %t7 to <8 x double>
  ; r10 := (tuple r8 r5 r9)
  %t11 = insertvalue { i64, i64, <8 x double> } undef, i64 %t9, 0
  %t12 = insertvalue { i64, i64, <8 x double> } %t11, i64 %t6, 1
  %t13 = insertvalue { i64, i64, <8 x double> } %t12, <8 x double> %t10, 2
  ret { i64, i64, <8 x double> } %t13
block_0_41c301:
  %t14 = phi i64 [ %arg2, %block_0_41c2f0 ]
  %t15 = phi i64 [ %arg1, %block_0_41c2f0 ]
  %t16 = phi i64 [ %arg0, %block_0_41c2f0 ]
  %t17 = phi i512 [ %t3, %block_0_41c2f0 ]
  ; r15 := (bitcast r14 (vec 8 double))
  %t18 = bitcast i512 %t17 to <8 x double>
  ; r16 := call getenv((0x429347 : bv 64), r12, r11, r15)
  %t19 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @getenv(i64 4363079, i64 %t15, i64 %t14, <8 x double> %t18)
  ; r17 := (tuple_field r16 0)
  %t20 = extractvalue { i64, i64, <8 x double> } %t19, 0
  ; r18 := (tuple_field r16 1)
  %t21 = extractvalue { i64, i64, <8 x double> } %t19, 1
  ; r19 := (tuple_field r16 2)
  %t22 = extractvalue { i64, i64, <8 x double> } %t19, 2
  ; r20 := (bitcast r19 (bv 512))
  %t23 = bitcast <8 x double> %t22 to i512
  br label %block_0_41c30b
block_0_41c30b:
  %t24 = phi i64 [ %t20, %block_0_41c301 ]
  %t25 = phi i64 [ %t15, %block_0_41c301 ]
  %t26 = phi i64 [ %t16, %block_0_41c301 ]
  %t27 = phi i512 [ %t23, %block_0_41c301 ]
  ; r25 := (eq r21 (0x0 : bv 64))
  %t28 = icmp eq i64 %t24, 0
  br i1 %t28, label %block_0_41c362, label %block_0_41c313
block_0_41c313:
  %t29 = phi i64 [ %t24, %block_0_41c30b ]
  %t30 = phi i64 [ %t25, %block_0_41c30b ]
  %t31 = phi i64 [ %t26, %block_0_41c30b ]
  ; r29 := call __sys_issetugid()
  %t32 = call { i64, i64, <8 x double> } () @__sys_issetugid()
  ; r30 := (tuple_field r29 0)
  %t33 = extractvalue { i64, i64, <8 x double> } %t32, 0
  ; r31 := (tuple_field r29 1)
  %t34 = extractvalue { i64, i64, <8 x double> } %t32, 1
  ; r32 := (tuple_field r29 2)
  %t35 = extractvalue { i64, i64, <8 x double> } %t32, 2
  ; r33 := (bitcast r32 (bv 512))
  %t36 = bitcast <8 x double> %t35 to i512
  br label %block_0_41c318
block_0_41c318:
  %t37 = phi i64 [ %t33, %block_0_41c313 ]
  %t38 = phi i64 [ %t29, %block_0_41c313 ]
  %t39 = phi i64 [ %t30, %block_0_41c313 ]
  %t40 = phi i64 [ %t31, %block_0_41c313 ]
  %t41 = phi i512 [ %t36, %block_0_41c313 ]
  ; r39 := (trunc r34 32)
  %t42 = trunc i64 %t37 to i32
  ; r40 := (eq r39 (0x0 : bv 32))
  %t43 = icmp eq i32 %t42, 0
  br i1 %t43, label %block_0_41c31c, label %block_0_41c362
block_0_41c31c:
  %t44 = phi i64 [ %t38, %block_0_41c318 ]
  %t45 = phi i64 [ %t39, %block_0_41c318 ]
  %t46 = phi i64 [ %t40, %block_0_41c318 ]
  %t47 = phi i512 [ %t41, %block_0_41c318 ]
  ; r45 := (bitcast r44 (vec 8 double))
  %t48 = bitcast i512 %t47 to <8 x double>
  ; r46 := call strlen(r41, r45)
  %t49 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t44, <8 x double> %t48)
  ; r47 := (tuple_field r46 0)
  %t50 = extractvalue { i64, i64, <8 x double> } %t49, 0
  ; r48 := (tuple_field r46 1)
  %t51 = extractvalue { i64, i64, <8 x double> } %t49, 1
  ; r49 := (tuple_field r46 2)
  %t52 = extractvalue { i64, i64, <8 x double> } %t49, 2
  ; r50 := (bitcast r49 (bv 512))
  %t53 = bitcast <8 x double> %t52 to i512
  br label %block_0_41c324
block_0_41c324:
  %t54 = phi i64 [ %t50, %block_0_41c31c ]
  %t55 = phi i64 [ %t44, %block_0_41c31c ]
  %t56 = phi i64 [ %t45, %block_0_41c31c ]
  %t57 = phi i64 [ %t46, %block_0_41c31c ]
  %t58 = phi i512 [ %t53, %block_0_41c31c ]
  ; r56 := (bv_add r51 (0x2c : bv 64))
  %t59 = add i64 %t54, 44
  ; r57 := (eq r51 (0x3d3 : bv 64))
  %t60 = icmp eq i64 %t54, 979
  ; r58 := (bv_ule (0x3ff : bv 64) r56)
  %t61 = icmp ule i64 1023, %t59
  ; r59 := (not r57)
  %t62 = icmp eq i1 %t60, 0
  ; r60 := (and r58 r59)
  %t63 = and i1 %t61, %t62
  br i1 %t63, label %block_0_41c2fd, label %block_0_41c335
block_0_41c335:
  %t64 = phi i64 [ %t55, %block_0_41c324 ]
  %t65 = phi i64 [ %t56, %block_0_41c324 ]
  %t66 = phi i64 [ %t57, %block_0_41c324 ]
  %t67 = phi i512 [ %t58, %block_0_41c324 ]
  ; r65 := (bitcast r64 (vec 8 double))
  %t68 = bitcast i512 %t67 to <8 x double>
  ; r66 := call strdup(r61, r65)
  %t69 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strdup(i64 %t64, <8 x double> %t68)
  ; r67 := (tuple_field r66 0)
  %t70 = extractvalue { i64, i64, <8 x double> } %t69, 0
  ; r68 := (tuple_field r66 1)
  %t71 = extractvalue { i64, i64, <8 x double> } %t69, 1
  ; r69 := (tuple_field r66 2)
  %t72 = extractvalue { i64, i64, <8 x double> } %t69, 2
  ; r70 := (bitcast r69 (bv 512))
  %t73 = bitcast <8 x double> %t72 to i512
  br label %block_0_41c33d
block_0_41c33d:
  %t74 = phi i64 [ %t70, %block_0_41c335 ]
  %t75 = phi i64 [ %t71, %block_0_41c335 ]
  %t76 = phi i64 [ %t65, %block_0_41c335 ]
  %t77 = phi i64 [ %t66, %block_0_41c335 ]
  %t78 = phi i512 [ %t73, %block_0_41c335 ]
  ; r76 := (eq r71 (0x0 : bv 64))
  %t79 = icmp eq i64 %t74, 0
  ; write (0x641e68 : bv 64) r71
  %t80 = inttoptr i64 6561384 to i64*
  store i64 %t74, i64* %t80
  br i1 %t79, label %block_0_41c349, label %block_0_41c2fb
block_0_41c349:
  %t81 = phi i64 [ %t75, %block_0_41c33d ]
  %t82 = phi i64 [ %t76, %block_0_41c33d ]
  %t83 = phi i64 [ %t77, %block_0_41c33d ]
  %t84 = phi i512 [ %t78, %block_0_41c33d ]
  ; r81 := (bitcast r80 (vec 8 double))
  %t85 = bitcast i512 %t84 to <8 x double>
  ; r82 := call __error_unthreaded(r79, r78, r77, r81)
  %t86 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t83, i64 %t82, i64 %t81, <8 x double> %t85)
  ; r83 := (tuple_field r82 0)
  %t87 = extractvalue { i64, i64, <8 x double> } %t86, 0
  ; r84 := (tuple_field r82 1)
  %t88 = extractvalue { i64, i64, <8 x double> } %t86, 1
  ; r85 := (tuple_field r82 2)
  %t89 = extractvalue { i64, i64, <8 x double> } %t86, 2
  ; r86 := (bitcast r85 (bv 512))
  %t90 = bitcast <8 x double> %t89 to i512
  br label %block_0_41c34e
block_0_41c34e:
  %t91 = phi i64 [ %t87, %block_0_41c349 ]
  %t92 = phi i64 [ %t82, %block_0_41c349 ]
  %t93 = phi i64 [ %t83, %block_0_41c349 ]
  %t94 = phi i512 [ %t90, %block_0_41c349 ]
  ; r91 := (read r87 (bv 32))
  %t95 = inttoptr i64 %t91 to i32*
  %t96 = load i32, i32* %t95
  ; r92 := (eq r91 (0x0 : bv 32))
  %t97 = icmp eq i32 %t96, 0
  br i1 %t97, label %block_0_41c2fd, label %block_0_41c359
block_0_41c359:
  %t98 = phi i64 [ 12, %block_0_41c34e ]
  %t99 = phi i64 [ %t92, %block_0_41c34e ]
  %t100 = phi i64 [ %t93, %block_0_41c34e ]
  %t101 = phi i512 [ %t94, %block_0_41c34e ]
  ; r97 := (bitcast r96 (vec 8 double))
  %t102 = bitcast i512 %t101 to <8 x double>
  ; r98 := call __error_unthreaded(r95, r94, r93, r97)
  %t103 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t100, i64 %t99, i64 %t98, <8 x double> %t102)
  ; r99 := (tuple_field r98 0)
  %t104 = extractvalue { i64, i64, <8 x double> } %t103, 0
  ; r100 := (tuple_field r98 1)
  %t105 = extractvalue { i64, i64, <8 x double> } %t103, 1
  ; r101 := (tuple_field r98 2)
  %t106 = extractvalue { i64, i64, <8 x double> } %t103, 2
  ; r102 := (bitcast r101 (bv 512))
  %t107 = bitcast <8 x double> %t106 to i512
  br label %block_0_41c35e
block_0_41c35e:
  %t108 = phi i64 [ %t104, %block_0_41c359 ]
  %t109 = phi i512 [ %t107, %block_0_41c359 ]
  ; r105 := (read r103 (bv 32))
  %t110 = inttoptr i64 %t108 to i32*
  %t111 = load i32, i32* %t110
  ; r106 := (uext r105 64)
  %t112 = zext i32 %t111 to i64
  br label %block_0_41c2fd
block_0_41c362:
  %t113 = phi i512 [ %t27, %block_0_41c30b ], [ %t41, %block_0_41c318 ]
  ; write (0x641e68 : bv 64) (0x429353 : bv 64)
  %t114 = inttoptr i64 6561384 to i64*
  store i64 4363091, i64* %t114
  br label %block_0_41c2fd
}
define { i64, i64, <8 x double> } @setlocale(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41c580:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (eq r0 (0x6 : bv 32))
  %t2 = icmp eq i32 %t0, 6
  ; r3 := (bv_ule (0x6 : bv 32) r0)
  %t3 = icmp ule i32 6, %t0
  ; r4 := (not r2)
  %t4 = icmp eq i1 %t2, 0
  ; r5 := (and r3 r4)
  %t5 = and i1 %t3, %t4
  ; r6 := (bitcast arg3 (bv 512))
  %t6 = bitcast <8 x double> %arg3 to i512
  ; r7 := (bitcast arg3 (bv 512))
  %t7 = bitcast <8 x double> %arg3 to i512
  br i1 %t5, label %block_0_41c7e7, label %block_0_41c598
block_0_41c598:
  %t8 = phi i64 [ %arg2, %block_0_41c580 ]
  %t9 = phi i64 [ %t1, %block_0_41c580 ]
  %t10 = phi i64 [ %arg1, %block_0_41c580 ]
  %t11 = phi i64 [ %arg0, %block_0_41c580 ]
  %t12 = phi i512 [ %t7, %block_0_41c580 ]
  ; r13 := (eq r10 (0x0 : bv 64))
  %t13 = icmp eq i64 %t10, 0
  br i1 %t13, label %block_0_41c720, label %block_0_41c5a3
block_0_41c5a3:
  %t14 = phi i64 [ %t8, %block_0_41c598 ], [ %t30, %block_0_41c5ba ]
  %t15 = phi i64 [ 0, %block_0_41c598 ], [ %t31, %block_0_41c5ba ]
  %t16 = phi i64 [ %t9, %block_0_41c598 ], [ %t32, %block_0_41c5ba ]
  %t17 = phi i64 [ %t10, %block_0_41c598 ], [ %t33, %block_0_41c5ba ]
  %t18 = phi i64 [ %t11, %block_0_41c598 ], [ %t34, %block_0_41c5ba ]
  %t19 = phi i64 [ %t10, %block_0_41c598 ], [ %t35, %block_0_41c5ba ]
  %t20 = phi i512 [ %t12, %block_0_41c598 ], [ %t36, %block_0_41c5ba ]
  ; r21 := (bv_add r15 (0x631ac0 : bv 64))
  %t21 = add i64 %t15, 6494912
  ; r22 := (bv_add r15 (0x641560 : bv 64))
  %t22 = add i64 %t15, 6559072
  ; r23 := (bv_add r15 (0x20 : bv 64))
  %t23 = add i64 %t15, 32
  ; r24 := (bitcast r20 (vec 8 double))
  %t24 = bitcast i512 %t20 to <8 x double>
  ; r25 := call strcpy(r22, r21, r14, r24)
  %t25 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strcpy(i64 %t22, i64 %t21, i64 %t14, <8 x double> %t24)
  ; r26 := (tuple_field r25 0)
  %t26 = extractvalue { i64, i64, <8 x double> } %t25, 0
  ; r27 := (tuple_field r25 1)
  %t27 = extractvalue { i64, i64, <8 x double> } %t25, 1
  ; r28 := (tuple_field r25 2)
  %t28 = extractvalue { i64, i64, <8 x double> } %t25, 2
  ; r29 := (bitcast r28 (bv 512))
  %t29 = bitcast <8 x double> %t28 to i512
  br label %block_0_41c5ba
block_0_41c5ba:
  %t30 = phi i64 [ %t27, %block_0_41c5a3 ]
  %t31 = phi i64 [ %t23, %block_0_41c5a3 ]
  %t32 = phi i64 [ %t16, %block_0_41c5a3 ]
  %t33 = phi i64 [ %t17, %block_0_41c5a3 ]
  %t34 = phi i64 [ %t18, %block_0_41c5a3 ]
  %t35 = phi i64 [ %t19, %block_0_41c5a3 ]
  %t36 = phi i512 [ %t29, %block_0_41c5a3 ]
  ; r37 := (eq r31 (0xc0 : bv 64))
  %t37 = icmp eq i64 %t31, 192
  br i1 %t37, label %block_0_41c5c3, label %block_0_41c5a3
block_0_41c5c3:
  %t38 = phi i64 [ %t30, %block_0_41c5ba ]
  %t39 = phi i64 [ %t32, %block_0_41c5ba ]
  %t40 = phi i64 [ %t33, %block_0_41c5ba ]
  %t41 = phi i64 [ %t34, %block_0_41c5ba ]
  %t42 = phi i64 [ %t35, %block_0_41c5ba ]
  %t43 = phi i512 [ %t36, %block_0_41c5ba ]
  ; r44 := (read r42 (bv 8))
  %t44 = inttoptr i64 %t42 to i8*
  %t45 = load i8, i8* %t44
  ; r45 := (eq r44 (0x0 : bv 8))
  %t46 = icmp eq i8 %t45, 0
  br i1 %t46, label %block_0_41c5ce, label %block_0_41c65e
block_0_41c5ce:
  %t47 = phi i64 [ %t38, %block_0_41c5c3 ]
  %t48 = phi i64 [ %t39, %block_0_41c5c3 ]
  %t49 = phi i64 [ %t40, %block_0_41c5c3 ]
  %t50 = phi i64 [ %t41, %block_0_41c5c3 ]
  %t51 = phi i512 [ %t43, %block_0_41c5c3 ]
  ; r51 := (trunc r47 32)
  %t52 = trunc i64 %t48 to i32
  ; r52 := (eq r51 (0x0 : bv 32))
  %t53 = icmp eq i32 %t52, 0
  br i1 %t53, label %block_0_41c5d6, label %block_0_41c740
block_0_41c5d6:
  %t54 = phi i64 [ %t47, %block_0_41c5ce ]
  %t55 = phi i64 [ %t48, %block_0_41c5ce ]
  %t56 = phi i64 [ %t49, %block_0_41c5ce ]
  %t57 = phi i64 [ %t50, %block_0_41c5ce ]
  %t58 = phi i512 [ %t51, %block_0_41c5ce ]
  ; r58 := (bv_and r54 (0xffffffffffffff00 : bv 64))
  %t59 = and i64 %t55, 18446744073709551360
  ; r59 := (bv_or r58 (0x1 : bv 64))
  %t60 = or i64 %t59, 1
  br label %block_0_41c5e0
block_0_41c5e0:
  %t61 = phi i64 [ %t54, %block_0_41c5d6 ], [ %t114, %block_0_41c60a ]
  %t62 = phi i64 [ %t60, %block_0_41c5d6 ], [ %t115, %block_0_41c60a ]
  %t63 = phi i64 [ %t56, %block_0_41c5d6 ], [ %t116, %block_0_41c60a ]
  %t64 = phi i64 [ %t57, %block_0_41c5d6 ], [ %t117, %block_0_41c60a ]
  %t65 = phi i64 [ 6559072, %block_0_41c5d6 ], [ %t120, %block_0_41c60a ]
  %t66 = phi i512 [ %t58, %block_0_41c5d6 ], [ %t119, %block_0_41c60a ]
  ; r66 := (trunc r61 32)
  %t67 = trunc i64 %t62 to i32
  ; r67 := (uext r66 64)
  %t68 = zext i32 %t67 to i64
  ; r68 := (bitcast r65 (vec 8 double))
  %t69 = bitcast i512 %t66 to <8 x double>
  ; r69 := call __get_locale_env(r67, r62, r60, r68)
  %t70 = call { i64, <8 x double> } (i64, i64, i64, <8 x double>) @__get_locale_env(i64 %t68, i64 %t63, i64 %t61, <8 x double> %t69)
  ; r70 := (tuple_field r69 0)
  %t71 = extractvalue { i64, <8 x double> } %t70, 0
  ; r71 := (tuple_field r69 1)
  %t72 = extractvalue { i64, <8 x double> } %t70, 1
  ; r72 := (bitcast r71 (bv 512))
  %t73 = bitcast <8 x double> %t72 to i512
  br label %block_0_41c5e7
block_0_41c5e7:
  %t74 = phi i64 [ %t71, %block_0_41c5e0 ]
  %t75 = phi i64 [ %t62, %block_0_41c5e0 ]
  %t76 = phi i64 [ %t63, %block_0_41c5e0 ]
  %t77 = phi i64 [ %t64, %block_0_41c5e0 ]
  %t78 = phi i64 [ %t65, %block_0_41c5e0 ]
  %t79 = phi i512 [ %t73, %block_0_41c5e0 ]
  ; r79 := (bitcast r78 (vec 8 double))
  %t80 = bitcast i512 %t79 to <8 x double>
  ; r80 := call strlen(r73, r79)
  %t81 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t74, <8 x double> %t80)
  ; r81 := (tuple_field r80 0)
  %t82 = extractvalue { i64, i64, <8 x double> } %t81, 0
  ; r82 := (tuple_field r80 1)
  %t83 = extractvalue { i64, i64, <8 x double> } %t81, 1
  ; r83 := (tuple_field r80 2)
  %t84 = extractvalue { i64, i64, <8 x double> } %t81, 2
  ; r84 := (bitcast r83 (bv 512))
  %t85 = bitcast <8 x double> %t84 to i512
  br label %block_0_41c5f2
block_0_41c5f2:
  %t86 = phi i64 [ %t82, %block_0_41c5e7 ]
  %t87 = phi i64 [ %t83, %block_0_41c5e7 ]
  %t88 = phi i64 [ %t74, %block_0_41c5e7 ]
  %t89 = phi i64 [ %t75, %block_0_41c5e7 ]
  %t90 = phi i64 [ %t76, %block_0_41c5e7 ]
  %t91 = phi i64 [ %t77, %block_0_41c5e7 ]
  %t92 = phi i64 [ %t78, %block_0_41c5e7 ]
  %t93 = phi i512 [ %t85, %block_0_41c5e7 ]
  ; r93 := (eq r85 (0x1f : bv 64))
  %t94 = icmp eq i64 %t86, 31
  ; r94 := (bv_ule (0x1f : bv 64) r85)
  %t95 = icmp ule i64 31, %t86
  ; r95 := (not r93)
  %t96 = icmp eq i1 %t94, 0
  ; r96 := (and r94 r95)
  %t97 = and i1 %t95, %t96
  br i1 %t97, label %block_0_41c7e7, label %block_0_41c5fc
block_0_41c5fc:
  %t98 = phi i64 [ %t87, %block_0_41c5f2 ]
  %t99 = phi i64 [ %t88, %block_0_41c5f2 ]
  %t100 = phi i64 [ %t89, %block_0_41c5f2 ]
  %t101 = phi i64 [ %t90, %block_0_41c5f2 ]
  %t102 = phi i64 [ %t91, %block_0_41c5f2 ]
  %t103 = phi i64 [ %t92, %block_0_41c5f2 ]
  %t104 = phi i512 [ %t93, %block_0_41c5f2 ]
  ; r104 := (trunc r99 32)
  %t105 = trunc i64 %t100 to i32
  ; r105 := (bv_add r104 (0x1 : bv 32))
  %t106 = add i32 %t105, 1
  ; r106 := (uext r105 64)
  %t107 = zext i32 %t106 to i64
  ; r107 := (bitcast r103 (vec 8 double))
  %t108 = bitcast i512 %t104 to <8 x double>
  ; r108 := call strcpy(r102, r98, r97, r107)
  %t109 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strcpy(i64 %t103, i64 %t99, i64 %t98, <8 x double> %t108)
  ; r109 := (tuple_field r108 0)
  %t110 = extractvalue { i64, i64, <8 x double> } %t109, 0
  ; r110 := (tuple_field r108 1)
  %t111 = extractvalue { i64, i64, <8 x double> } %t109, 1
  ; r111 := (tuple_field r108 2)
  %t112 = extractvalue { i64, i64, <8 x double> } %t109, 2
  ; r112 := (bitcast r111 (bv 512))
  %t113 = bitcast <8 x double> %t112 to i512
  br label %block_0_41c60a
block_0_41c60a:
  %t114 = phi i64 [ %t111, %block_0_41c5fc ]
  %t115 = phi i64 [ %t107, %block_0_41c5fc ]
  %t116 = phi i64 [ %t101, %block_0_41c5fc ]
  %t117 = phi i64 [ %t102, %block_0_41c5fc ]
  %t118 = phi i64 [ %t103, %block_0_41c5fc ]
  %t119 = phi i512 [ %t113, %block_0_41c5fc ]
  ; r119 := (bv_add r117 (0x20 : bv 64))
  %t120 = add i64 %t118, 32
  ; r120 := (trunc r114 32)
  %t121 = trunc i64 %t115 to i32
  ; r121 := (eq r120 (0x7 : bv 32))
  %t122 = icmp eq i32 %t121, 7
  br i1 %t122, label %block_0_41c613, label %block_0_41c5e0
block_0_41c613:
  %t123 = phi i64 [ %t114, %block_0_41c60a ], [ %t312, %block_0_41c6e7 ], [ %t366, %block_0_41c716 ], [ %t534, %block_0_41c7c3 ], [ %t764, %block_0_41c89b ]
  %t124 = phi i64 [ %t116, %block_0_41c60a ], [ %t314, %block_0_41c6e7 ], [ %t367, %block_0_41c716 ], [ %t537, %block_0_41c7c3 ], [ %t765, %block_0_41c89b ]
  %t125 = phi i64 [ %t117, %block_0_41c60a ], [ %t315, %block_0_41c6e7 ], [ %t368, %block_0_41c716 ], [ %t538, %block_0_41c7c3 ], [ %t766, %block_0_41c89b ]
  %t126 = phi i512 [ %t119, %block_0_41c60a ], [ %t316, %block_0_41c6e7 ], [ %t369, %block_0_41c716 ], [ %t540, %block_0_41c7c3 ], [ %t767, %block_0_41c89b ]
  br label %block_0_41c620
block_0_41c620:
  %t127 = phi i64 [ %t123, %block_0_41c613 ], [ %t163, %block_0_41c643 ]
  %t128 = phi i64 [ 0, %block_0_41c613 ], [ %t172, %block_0_41c643 ]
  %t129 = phi i64 [ 1, %block_0_41c613 ], [ %t171, %block_0_41c643 ]
  %t130 = phi i64 [ %t124, %block_0_41c613 ], [ %t166, %block_0_41c643 ]
  %t131 = phi i64 [ %t125, %block_0_41c613 ], [ %t167, %block_0_41c643 ]
  %t132 = phi i512 [ %t126, %block_0_41c613 ], [ %t168, %block_0_41c643 ]
  ; r132 := (bv_add r127 (0x631ac0 : bv 64))
  %t133 = add i64 %t128, 6494912
  ; r133 := (bv_add r127 (0x641640 : bv 64))
  %t134 = add i64 %t128, 6559296
  ; r134 := (bitcast r131 (vec 8 double))
  %t135 = bitcast i512 %t132 to <8 x double>
  ; r135 := call strcpy(r133, r132, r126, r134)
  %t136 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strcpy(i64 %t134, i64 %t133, i64 %t127, <8 x double> %t135)
  ; r136 := (tuple_field r135 0)
  %t137 = extractvalue { i64, i64, <8 x double> } %t136, 0
  ; r137 := (tuple_field r135 1)
  %t138 = extractvalue { i64, i64, <8 x double> } %t136, 1
  ; r138 := (tuple_field r135 2)
  %t139 = extractvalue { i64, i64, <8 x double> } %t136, 2
  ; r139 := (bitcast r138 (bv 512))
  %t140 = bitcast <8 x double> %t139 to i512
  br label %block_0_41c633
block_0_41c633:
  %t141 = phi i64 [ %t138, %block_0_41c620 ]
  %t142 = phi i64 [ %t128, %block_0_41c620 ]
  %t143 = phi i64 [ %t129, %block_0_41c620 ]
  %t144 = phi i64 [ %t130, %block_0_41c620 ]
  %t145 = phi i64 [ %t131, %block_0_41c620 ]
  %t146 = phi i512 [ %t140, %block_0_41c620 ]
  ; r146 := (trunc r142 32)
  %t147 = trunc i64 %t143 to i32
  ; r147 := (uext r146 64)
  %t148 = zext i32 %t147 to i64
  ; r148 := (bitcast r145 (vec 8 double))
  %t149 = bitcast i512 %t146 to <8 x double>
  ; r149 := call loadlocale(r147, r143, r140, r148)
  %t150 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @loadlocale(i64 %t148, i64 %t144, i64 %t141, <8 x double> %t149)
  ; r150 := (tuple_field r149 0)
  %t151 = extractvalue { i64, i64, <8 x double> } %t150, 0
  ; r151 := (tuple_field r149 1)
  %t152 = extractvalue { i64, i64, <8 x double> } %t150, 1
  ; r152 := (tuple_field r149 2)
  %t153 = extractvalue { i64, i64, <8 x double> } %t150, 2
  ; r153 := (bitcast r152 (bv 512))
  %t154 = bitcast <8 x double> %t153 to i512
  br label %block_0_41c63a
block_0_41c63a:
  %t155 = phi i64 [ %t151, %block_0_41c633 ]
  %t156 = phi i64 [ %t152, %block_0_41c633 ]
  %t157 = phi i64 [ %t142, %block_0_41c633 ]
  %t158 = phi i64 [ %t143, %block_0_41c633 ]
  %t159 = phi i64 [ %t144, %block_0_41c633 ]
  %t160 = phi i64 [ %t145, %block_0_41c633 ]
  %t161 = phi i512 [ %t154, %block_0_41c633 ]
  ; r161 := (eq r154 (0x0 : bv 64))
  %t162 = icmp eq i64 %t155, 0
  br i1 %t162, label %block_0_41c808, label %block_0_41c643
block_0_41c643:
  %t163 = phi i64 [ %t156, %block_0_41c63a ]
  %t164 = phi i64 [ %t157, %block_0_41c63a ]
  %t165 = phi i64 [ %t158, %block_0_41c63a ]
  %t166 = phi i64 [ %t159, %block_0_41c63a ]
  %t167 = phi i64 [ %t160, %block_0_41c63a ]
  %t168 = phi i512 [ %t161, %block_0_41c63a ]
  ; r168 := (trunc r164 32)
  %t169 = trunc i64 %t165 to i32
  ; r169 := (bv_add r168 (0x1 : bv 32))
  %t170 = add i32 %t169, 1
  ; r170 := (uext r169 64)
  %t171 = zext i32 %t170 to i64
  ; r171 := (bv_add r163 (0x20 : bv 64))
  %t172 = add i64 %t164, 32
  ; r172 := (eq r168 (0x6 : bv 32))
  %t173 = icmp eq i32 %t169, 6
  br i1 %t173, label %block_0_41c64f, label %block_0_41c620
block_0_41c64f:
  %t174 = phi i64 [ %t163, %block_0_41c643 ], [ %t370, %block_0_41c720 ]
  %t175 = phi i64 [ %t166, %block_0_41c643 ], [ %t371, %block_0_41c720 ]
  %t176 = phi i64 [ %t167, %block_0_41c643 ], [ %t372, %block_0_41c720 ]
  %t177 = phi i512 [ %t168, %block_0_41c643 ], [ %t373, %block_0_41c720 ]
  ; r177 := (bitcast r176 (vec 8 double))
  %t178 = bitcast i512 %t177 to <8 x double>
  %t179 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @currentlocale(i64 %t176, i64 %t175, i64 %t174, <8 x double> %t178)
  ret { i64, i64, <8 x double> } %t179
block_0_41c65e:
  %t180 = phi i64 [ %t39, %block_0_41c5c3 ]
  %t181 = phi i64 [ %t40, %block_0_41c5c3 ]
  %t182 = phi i64 [ %t41, %block_0_41c5c3 ]
  %t183 = phi i64 [ %t42, %block_0_41c5c3 ]
  %t184 = phi i512 [ %t43, %block_0_41c5c3 ]
  ; r183 := (trunc r178 32)
  %t185 = trunc i64 %t180 to i32
  ; r184 := (eq r183 (0x0 : bv 32))
  %t186 = icmp eq i32 %t185, 0
  br i1 %t186, label %block_0_41c666, label %block_0_41c783
block_0_41c666:
  %t187 = phi i64 [ %t181, %block_0_41c65e ]
  %t188 = phi i64 [ %t182, %block_0_41c65e ]
  %t189 = phi i64 [ %t183, %block_0_41c65e ]
  %t190 = phi i512 [ %t184, %block_0_41c65e ]
  ; r189 := (bitcast r188 (vec 8 double))
  %t191 = bitcast i512 %t190 to <8 x double>
  ; r190 := call strchr(r187, (0x2f : bv 64), r189)
  %t192 = call { i64, i64, <8 x double> } (i64, i64, <8 x double>) @strchr(i64 %t189, i64 47, <8 x double> %t191)
  ; r191 := (tuple_field r190 0)
  %t193 = extractvalue { i64, i64, <8 x double> } %t192, 0
  ; r192 := (tuple_field r190 1)
  %t194 = extractvalue { i64, i64, <8 x double> } %t192, 1
  ; r193 := (tuple_field r190 2)
  %t195 = extractvalue { i64, i64, <8 x double> } %t192, 2
  ; r194 := (bitcast r193 (bv 512))
  %t196 = bitcast <8 x double> %t195 to i512
  br label %block_0_41c673
block_0_41c673:
  %t197 = phi i64 [ %t193, %block_0_41c666 ]
  %t198 = phi i64 [ %t187, %block_0_41c666 ]
  %t199 = phi i64 [ %t188, %block_0_41c666 ]
  %t200 = phi i64 [ %t189, %block_0_41c666 ]
  %t201 = phi i512 [ %t196, %block_0_41c666 ]
  ; r200 := (eq r195 (0x0 : bv 64))
  %t202 = icmp eq i64 %t197, 0
  br i1 %t202, label %block_0_41c67b, label %block_0_41c683
block_0_41c67b:
  %t203 = phi i64 [ %t198, %block_0_41c673 ]
  %t204 = phi i64 [ %t199, %block_0_41c673 ]
  %t205 = phi i64 [ %t200, %block_0_41c673 ]
  %t206 = phi i512 [ %t201, %block_0_41c673 ]
  br label %block_0_41c86c
block_0_41c680:
  %t207 = phi i64 [ %t217, %block_0_41c683 ]
  %t208 = phi i64 [ %t213, %block_0_41c683 ]
  %t209 = phi i64 [ %t214, %block_0_41c683 ]
  %t210 = phi i64 [ %t215, %block_0_41c683 ]
  %t211 = phi i512 [ %t216, %block_0_41c683 ]
  br label %block_0_41c683
block_0_41c683:
  %t212 = phi i64 [ %t197, %block_0_41c673 ], [ %t207, %block_0_41c680 ]
  %t213 = phi i64 [ %t198, %block_0_41c673 ], [ %t208, %block_0_41c680 ]
  %t214 = phi i64 [ %t199, %block_0_41c673 ], [ %t209, %block_0_41c680 ]
  %t215 = phi i64 [ %t200, %block_0_41c673 ], [ %t210, %block_0_41c680 ]
  %t216 = phi i512 [ %t201, %block_0_41c673 ], [ %t211, %block_0_41c680 ]
  ; r215 := (bv_add r210 (0x1 : bv 64))
  %t217 = add i64 %t212, 1
  ; r216 := (read r215 (bv 8))
  %t218 = inttoptr i64 %t217 to i8*
  %t219 = load i8, i8* %t218
  ; r217 := (uext r216 64)
  %t220 = zext i8 %t219 to i64
  ; r218 := (eq r216 (0x2f : bv 8))
  %t221 = icmp eq i8 %t219, 47
  br i1 %t221, label %block_0_41c680, label %block_0_41c690
block_0_41c690:
  %t222 = phi i64 [ %t220, %block_0_41c683 ]
  %t223 = phi i64 [ %t212, %block_0_41c683 ]
  %t224 = phi i64 [ %t213, %block_0_41c683 ]
  %t225 = phi i64 [ %t214, %block_0_41c683 ]
  %t226 = phi i64 [ %t215, %block_0_41c683 ]
  %t227 = phi i512 [ %t216, %block_0_41c683 ]
  ; r225 := (trunc r219 8)
  %t228 = trunc i64 %t222 to i8
  ; r226 := (eq r225 (0x0 : bv 8))
  %t229 = icmp eq i8 %t228, 0
  br i1 %t229, label %block_0_41c7e7, label %block_0_41c6a3
block_0_41c6a3:
  %t230 = phi i64 [ %t222, %block_0_41c690 ], [ %t545, %block_0_41c7d3 ]
  %t231 = phi i64 [ %t223, %block_0_41c690 ], [ %t544, %block_0_41c7d3 ]
  %t232 = phi i64 [ 1, %block_0_41c690 ], [ %t547, %block_0_41c7d3 ]
  %t233 = phi i64 [ %t224, %block_0_41c690 ], [ %t548, %block_0_41c7d3 ]
  %t234 = phi i64 [ %t225, %block_0_41c690 ], [ %t549, %block_0_41c7d3 ]
  %t235 = phi i64 [ %t226, %block_0_41c690 ], [ %t546, %block_0_41c7d3 ]
  %t236 = phi i64 [ 6559072, %block_0_41c690 ], [ %t550, %block_0_41c7d3 ]
  %t237 = phi i512 [ %t227, %block_0_41c690 ], [ %t551, %block_0_41c7d3 ]
  ; r235 := (trunc r228 32)
  %t238 = trunc i64 %t231 to i32
  ; r236 := (trunc r232 32)
  %t239 = trunc i64 %t235 to i32
  ; r237 := (bv_sub r235 r236)
  %t240 = sub i32 %t238, %t239
  ; r238 := (uext r237 64)
  %t241 = zext i32 %t240 to i64
  ; r239 := (ssbb_overflows r237 (0x1f : bv 32) false)
  %t242 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t240, i32 31)
  %t243 = extractvalue { i32, i1 } %t242, 1
  ; r240 := (bv_add r237 (0xffffffe1 : bv 32))
  %t244 = add i32 %t240, 4294967265
  ; r241 := (bv_slt r240 (0x0 : bv 32))
  %t245 = icmp slt i32 %t244, 0
  ; r242 := (eq r237 (0x1f : bv 32))
  %t246 = icmp eq i32 %t240, 31
  ; r243 := (not r242)
  %t247 = icmp eq i1 %t246, 0
  ; r244 := (eq r241 r239)
  %t248 = icmp eq i1 %t245, %t243
  ; r245 := (and r243 r244)
  %t249 = and i1 %t247, %t248
  br i1 %t249, label %block_0_41c7e7, label %block_0_41c6b1
block_0_41c6b1:
  %t250 = phi i64 [ %t241, %block_0_41c6a3 ]
  %t251 = phi i64 [ %t231, %block_0_41c6a3 ]
  %t252 = phi i64 [ %t232, %block_0_41c6a3 ]
  %t253 = phi i64 [ %t233, %block_0_41c6a3 ]
  %t254 = phi i64 [ %t234, %block_0_41c6a3 ]
  %t255 = phi i64 [ %t235, %block_0_41c6a3 ]
  %t256 = phi i64 [ %t236, %block_0_41c6a3 ]
  %t257 = phi i512 [ %t237, %block_0_41c6a3 ]
  ; r254 := (bv_add r246 (0x1 : bv 64))
  %t258 = add i64 %t250, 1
  ; r255 := (trunc r254 32)
  %t259 = trunc i64 %t258 to i32
  ; r256 := (trunc r248 32)
  %t260 = trunc i64 %t252 to i32
  ; r257 := (bv_add r256 (0x1 : bv 32))
  %t261 = add i32 %t260, 1
  ; r258 := (uext r257 64)
  %t262 = zext i32 %t261 to i64
  ; r259 := (sext r255 64)
  %t263 = sext i32 %t259 to i64
  ; r260 := (bitcast r253 (vec 8 double))
  %t264 = bitcast i512 %t257 to <8 x double>
  ; r261 := call strlcpy(r252, r251, r259, r260)
  %t265 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strlcpy(i64 %t256, i64 %t255, i64 %t263, <8 x double> %t264)
  ; r262 := (tuple_field r261 0)
  %t266 = extractvalue { i64, i64, <8 x double> } %t265, 0
  ; r263 := (tuple_field r261 1)
  %t267 = extractvalue { i64, i64, <8 x double> } %t265, 1
  ; r264 := (tuple_field r261 2)
  %t268 = extractvalue { i64, i64, <8 x double> } %t265, 2
  ; r265 := (bitcast r264 (bv 512))
  %t269 = bitcast <8 x double> %t268 to i512
  br label %block_0_41c6c5
block_0_41c6c5:
  %t270 = phi i64 [ %t267, %block_0_41c6b1 ]
  %t271 = phi i64 [ %t251, %block_0_41c6b1 ]
  %t272 = phi i64 [ %t262, %block_0_41c6b1 ]
  %t273 = phi i64 [ %t253, %block_0_41c6b1 ]
  %t274 = phi i64 [ %t254, %block_0_41c6b1 ]
  %t275 = phi i64 [ %t256, %block_0_41c6b1 ]
  %t276 = phi i512 [ %t269, %block_0_41c6b1 ]
  ; r273 := (read r267 (bv 8))
  %t277 = inttoptr i64 %t271 to i8*
  %t278 = load i8, i8* %t277
  ; r274 := (uext r273 64)
  %t279 = zext i8 %t278 to i64
  ; r275 := (eq r273 (0x2f : bv 8))
  %t280 = icmp eq i8 %t278, 47
  br i1 %t280, label %block_0_41c6d0, label %block_0_41c6df
block_0_41c6d0:
  %t281 = phi i64 [ %t271, %block_0_41c6c5 ], [ %t288, %block_0_41c6d0 ]
  %t282 = phi i64 [ %t270, %block_0_41c6c5 ], [ %t282, %block_0_41c6d0 ]
  %t283 = phi i64 [ %t272, %block_0_41c6c5 ], [ %t283, %block_0_41c6d0 ]
  %t284 = phi i64 [ %t273, %block_0_41c6c5 ], [ %t284, %block_0_41c6d0 ]
  %t285 = phi i64 [ %t274, %block_0_41c6c5 ], [ %t285, %block_0_41c6d0 ]
  %t286 = phi i64 [ %t275, %block_0_41c6c5 ], [ %t286, %block_0_41c6d0 ]
  %t287 = phi i512 [ %t276, %block_0_41c6c5 ], [ %t287, %block_0_41c6d0 ]
  ; r283 := (bv_add r276 (0x1 : bv 64))
  %t288 = add i64 %t281, 1
  ; r284 := (read r283 (bv 8))
  %t289 = inttoptr i64 %t288 to i8*
  %t290 = load i8, i8* %t289
  ; r285 := (uext r284 64)
  %t291 = zext i8 %t290 to i64
  ; r286 := (eq r284 (0x2f : bv 8))
  %t292 = icmp eq i8 %t290, 47
  br i1 %t292, label %block_0_41c6d0, label %block_0_41c6dc
block_0_41c6dc:
  %t293 = phi i64 [ %t288, %block_0_41c6d0 ]
  %t294 = phi i64 [ %t291, %block_0_41c6d0 ]
  %t295 = phi i64 [ %t282, %block_0_41c6d0 ]
  %t296 = phi i64 [ %t283, %block_0_41c6d0 ]
  %t297 = phi i64 [ %t284, %block_0_41c6d0 ]
  %t298 = phi i64 [ %t285, %block_0_41c6d0 ]
  %t299 = phi i64 [ %t286, %block_0_41c6d0 ]
  %t300 = phi i512 [ %t287, %block_0_41c6d0 ]
  br label %block_0_41c6df
block_0_41c6df:
  %t301 = phi i64 [ %t271, %block_0_41c6c5 ], [ %t293, %block_0_41c6dc ]
  %t302 = phi i64 [ %t279, %block_0_41c6c5 ], [ %t294, %block_0_41c6dc ]
  %t303 = phi i64 [ %t270, %block_0_41c6c5 ], [ %t295, %block_0_41c6dc ]
  %t304 = phi i64 [ %t271, %block_0_41c6c5 ], [ %t293, %block_0_41c6dc ]
  %t305 = phi i64 [ %t272, %block_0_41c6c5 ], [ %t296, %block_0_41c6dc ]
  %t306 = phi i64 [ %t273, %block_0_41c6c5 ], [ %t297, %block_0_41c6dc ]
  %t307 = phi i64 [ %t274, %block_0_41c6c5 ], [ %t298, %block_0_41c6dc ]
  %t308 = phi i64 [ %t275, %block_0_41c6c5 ], [ %t299, %block_0_41c6dc ]
  %t309 = phi i512 [ %t276, %block_0_41c6c5 ], [ %t300, %block_0_41c6dc ]
  ; r304 := (trunc r296 8)
  %t310 = trunc i64 %t302 to i8
  ; r305 := (eq r304 (0x0 : bv 8))
  %t311 = icmp eq i8 %t310, 0
  br i1 %t311, label %block_0_41c6e7, label %block_0_41c7a9
block_0_41c6e7:
  %t312 = phi i64 [ %t303, %block_0_41c6df ], [ %t524, %block_0_41c7bb ]
  %t313 = phi i64 [ %t305, %block_0_41c6df ], [ %t526, %block_0_41c7bb ]
  %t314 = phi i64 [ %t306, %block_0_41c6df ], [ %t527, %block_0_41c7bb ]
  %t315 = phi i64 [ %t307, %block_0_41c6df ], [ %t528, %block_0_41c7bb ]
  %t316 = phi i512 [ %t309, %block_0_41c6df ], [ %t530, %block_0_41c7bb ]
  ; r311 := (trunc r307 32)
  %t317 = trunc i64 %t313 to i32
  ; r312 := (ssbb_overflows r311 (0x6 : bv 32) false)
  %t318 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t317, i32 6)
  %t319 = extractvalue { i32, i1 } %t318, 1
  ; r313 := (bv_add r311 (0xfffffffa : bv 32))
  %t320 = add i32 %t317, 4294967290
  ; r314 := (bv_slt r313 (0x0 : bv 32))
  %t321 = icmp slt i32 %t320, 0
  ; r315 := (eq r311 (0x6 : bv 32))
  %t322 = icmp eq i32 %t317, 6
  ; r316 := (not r315)
  %t323 = icmp eq i1 %t322, 0
  ; r317 := (eq r314 r312)
  %t324 = icmp eq i1 %t321, %t319
  ; r318 := (and r316 r317)
  %t325 = and i1 %t323, %t324
  br i1 %t325, label %block_0_41c613, label %block_0_41c6f0
block_0_41c6f0:
  %t326 = phi i64 [ %t312, %block_0_41c6e7 ]
  %t327 = phi i64 [ %t313, %block_0_41c6e7 ]
  %t328 = phi i64 [ %t314, %block_0_41c6e7 ]
  %t329 = phi i64 [ %t315, %block_0_41c6e7 ]
  %t330 = phi i512 [ %t316, %block_0_41c6e7 ]
  ; r324 := (trunc r320 32)
  %t331 = trunc i64 %t327 to i32
  ; r325 := (sext r324 64)
  %t332 = sext i32 %t331 to i64
  ; r326 := (bv_shl r325 (0x5 : bv 64))
  %t333 = shl i64 %t332, 5
  ; r327 := (bv_add r326 (0x641540 : bv 64))
  %t334 = add i64 %t333, 6559040
  br label %block_0_41c6fe
block_0_41c6fe:
  %t335 = phi i64 [ %t326, %block_0_41c6f0 ], [ %t352, %block_0_41c711 ]
  %t336 = phi i64 [ %t334, %block_0_41c6f0 ], [ %t353, %block_0_41c711 ]
  %t337 = phi i64 [ %t327, %block_0_41c6f0 ], [ %t354, %block_0_41c711 ]
  %t338 = phi i64 [ %t328, %block_0_41c6f0 ], [ %t355, %block_0_41c711 ]
  %t339 = phi i64 [ %t329, %block_0_41c6f0 ], [ %t356, %block_0_41c711 ]
  %t340 = phi i512 [ %t330, %block_0_41c6f0 ], [ %t357, %block_0_41c711 ]
  ; r334 := (bv_add r329 (0xffffffffffffffe0 : bv 64))
  %t341 = add i64 %t336, 18446744073709551584
  ; r335 := (trunc r330 32)
  %t342 = trunc i64 %t337 to i32
  ; r336 := (bv_add r335 (0x1 : bv 32))
  %t343 = add i32 %t342, 1
  ; r337 := (uext r336 64)
  %t344 = zext i32 %t343 to i64
  ; r338 := (bv_add r329 (0x20 : bv 64))
  %t345 = add i64 %t336, 32
  ; r339 := (bitcast r333 (vec 8 double))
  %t346 = bitcast i512 %t340 to <8 x double>
  ; r340 := call strcpy(r329, r334, r328, r339)
  %t347 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strcpy(i64 %t336, i64 %t341, i64 %t335, <8 x double> %t346)
  ; r341 := (tuple_field r340 0)
  %t348 = extractvalue { i64, i64, <8 x double> } %t347, 0
  ; r342 := (tuple_field r340 1)
  %t349 = extractvalue { i64, i64, <8 x double> } %t347, 1
  ; r343 := (tuple_field r340 2)
  %t350 = extractvalue { i64, i64, <8 x double> } %t347, 2
  ; r344 := (bitcast r343 (bv 512))
  %t351 = bitcast <8 x double> %t350 to i512
  br label %block_0_41c711
block_0_41c711:
  %t352 = phi i64 [ %t349, %block_0_41c6fe ]
  %t353 = phi i64 [ %t345, %block_0_41c6fe ]
  %t354 = phi i64 [ %t344, %block_0_41c6fe ]
  %t355 = phi i64 [ %t338, %block_0_41c6fe ]
  %t356 = phi i64 [ %t339, %block_0_41c6fe ]
  %t357 = phi i512 [ %t351, %block_0_41c6fe ]
  ; r351 := (trunc r347 32)
  %t358 = trunc i64 %t354 to i32
  ; r352 := (ssbb_overflows r351 (0x6 : bv 32) false)
  %t359 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t358, i32 6)
  %t360 = extractvalue { i32, i1 } %t359, 1
  ; r353 := (bv_add r351 (0xfffffffa : bv 32))
  %t361 = add i32 %t358, 4294967290
  ; r354 := (bv_slt r353 (0x0 : bv 32))
  %t362 = icmp slt i32 %t361, 0
  ; r355 := (eq r351 (0x6 : bv 32))
  %t363 = icmp eq i32 %t358, 6
  ; r356 := (xor r354 r352)
  %t364 = xor i1 %t362, %t360
  ; r357 := (or r355 r356)
  %t365 = or i1 %t363, %t364
  br i1 %t365, label %block_0_41c6fe, label %block_0_41c716
block_0_41c716:
  %t366 = phi i64 [ %t352, %block_0_41c711 ]
  %t367 = phi i64 [ %t355, %block_0_41c711 ]
  %t368 = phi i64 [ %t356, %block_0_41c711 ]
  %t369 = phi i512 [ %t357, %block_0_41c711 ]
  br label %block_0_41c613
block_0_41c720:
  %t370 = phi i64 [ %t8, %block_0_41c598 ]
  %t371 = phi i64 [ %t10, %block_0_41c598 ]
  %t372 = phi i64 [ %t11, %block_0_41c598 ]
  %t373 = phi i512 [ %t12, %block_0_41c598 ]
  ; r366 := (trunc r364 32)
  %t374 = trunc i64 %t372 to i32
  ; r367 := (eq r366 (0x0 : bv 32))
  %t375 = icmp eq i32 %t374, 0
  br i1 %t375, label %block_0_41c64f, label %block_0_41c728
block_0_41c728:
  %t376 = phi i64 [ %t370, %block_0_41c720 ]
  %t377 = phi i64 [ %t372, %block_0_41c720 ]
  %t378 = phi i512 [ %t373, %block_0_41c720 ]
  ; r371 := (trunc r369 32)
  %t379 = trunc i64 %t377 to i32
  ; r372 := (sext r371 64)
  %t380 = sext i32 %t379 to i64
  ; r373 := (bv_shl r372 (0x5 : bv 64))
  %t381 = shl i64 %t380, 5
  ; r374 := (bv_add r373 (0x631aa0 : bv 64))
  %t382 = add i64 %t381, 6494880
  br label %block_0_41c735
block_0_41c735:
  %t383 = phi i64 [ %t382, %block_0_41c728 ], [ 0, %block_0_41c84f ]
  %t384 = phi i64 [ %t376, %block_0_41c728 ], [ %t692, %block_0_41c84f ]
  %t385 = phi i512 [ %t378, %block_0_41c728 ], [ %t694, %block_0_41c84f ]
  ; r378 := (bitcast r377 (vec 8 double))
  %t386 = bitcast i512 %t385 to <8 x double>
  ; r379 := (tuple r375 r376 r378)
  %t387 = insertvalue { i64, i64, <8 x double> } undef, i64 %t383, 0
  %t388 = insertvalue { i64, i64, <8 x double> } %t387, i64 %t384, 1
  %t389 = insertvalue { i64, i64, <8 x double> } %t388, <8 x double> %t386, 2
  ret { i64, i64, <8 x double> } %t389
block_0_41c740:
  %t390 = phi i64 [ %t47, %block_0_41c5ce ]
  %t391 = phi i64 [ %t48, %block_0_41c5ce ]
  %t392 = phi i64 [ %t49, %block_0_41c5ce ]
  %t393 = phi i64 [ %t50, %block_0_41c5ce ]
  %t394 = phi i512 [ %t51, %block_0_41c5ce ]
  ; r385 := (trunc r381 32)
  %t395 = trunc i64 %t391 to i32
  ; r386 := (uext r385 64)
  %t396 = zext i32 %t395 to i64
  ; r387 := (bitcast r384 (vec 8 double))
  %t397 = bitcast i512 %t394 to <8 x double>
  ; r388 := call __get_locale_env(r386, r382, r380, r387)
  %t398 = call { i64, <8 x double> } (i64, i64, i64, <8 x double>) @__get_locale_env(i64 %t396, i64 %t392, i64 %t390, <8 x double> %t397)
  ; r389 := (tuple_field r388 0)
  %t399 = extractvalue { i64, <8 x double> } %t398, 0
  ; r390 := (tuple_field r388 1)
  %t400 = extractvalue { i64, <8 x double> } %t398, 1
  ; r391 := (bitcast r390 (bv 512))
  %t401 = bitcast <8 x double> %t400 to i512
  br label %block_0_41c747
block_0_41c747:
  %t402 = phi i64 [ %t399, %block_0_41c740 ]
  %t403 = phi i64 [ %t391, %block_0_41c740 ]
  %t404 = phi i64 [ %t392, %block_0_41c740 ]
  %t405 = phi i64 [ %t393, %block_0_41c740 ]
  %t406 = phi i512 [ %t401, %block_0_41c740 ]
  ; r397 := (bitcast r396 (vec 8 double))
  %t407 = bitcast i512 %t406 to <8 x double>
  ; r398 := call strlen(r392, r397)
  %t408 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t402, <8 x double> %t407)
  ; r399 := (tuple_field r398 0)
  %t409 = extractvalue { i64, i64, <8 x double> } %t408, 0
  ; r400 := (tuple_field r398 1)
  %t410 = extractvalue { i64, i64, <8 x double> } %t408, 1
  ; r401 := (tuple_field r398 2)
  %t411 = extractvalue { i64, i64, <8 x double> } %t408, 2
  ; r402 := (bitcast r401 (bv 512))
  %t412 = bitcast <8 x double> %t411 to i512
  br label %block_0_41c752
block_0_41c752:
  %t413 = phi i64 [ %t409, %block_0_41c747 ]
  %t414 = phi i64 [ %t410, %block_0_41c747 ]
  %t415 = phi i64 [ %t402, %block_0_41c747 ]
  %t416 = phi i64 [ %t403, %block_0_41c747 ]
  %t417 = phi i64 [ %t404, %block_0_41c747 ]
  %t418 = phi i64 [ %t405, %block_0_41c747 ]
  %t419 = phi i512 [ %t412, %block_0_41c747 ]
  ; r410 := (eq r403 (0x1f : bv 64))
  %t420 = icmp eq i64 %t413, 31
  ; r411 := (bv_ule (0x1f : bv 64) r403)
  %t421 = icmp ule i64 31, %t413
  ; r412 := (not r410)
  %t422 = icmp eq i1 %t420, 0
  ; r413 := (and r411 r412)
  %t423 = and i1 %t421, %t422
  br i1 %t423, label %block_0_41c7e7, label %block_0_41c75c
block_0_41c75c:
  %t424 = phi i64 [ %t414, %block_0_41c752 ]
  %t425 = phi i64 [ %t415, %block_0_41c752 ]
  %t426 = phi i64 [ %t416, %block_0_41c752 ]
  %t427 = phi i64 [ %t417, %block_0_41c752 ]
  %t428 = phi i512 [ %t419, %block_0_41c752 ]
  ; r419 := (trunc r416 32)
  %t429 = trunc i64 %t426 to i32
  ; r420 := (sext r419 64)
  %t430 = sext i32 %t429 to i64
  ; r421 := (bv_shl r420 (0x5 : bv 64))
  %t431 = shl i64 %t430, 5
  ; r422 := (bv_add r421 (0x641540 : bv 64))
  %t432 = add i64 %t431, 6559040
  ; r423 := (bitcast r418 (vec 8 double))
  %t433 = bitcast i512 %t428 to <8 x double>
  ; r424 := call strcpy(r422, r415, r414, r423)
  %t434 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strcpy(i64 %t432, i64 %t425, i64 %t424, <8 x double> %t433)
  ; r425 := (tuple_field r424 0)
  %t435 = extractvalue { i64, i64, <8 x double> } %t434, 0
  ; r426 := (tuple_field r424 1)
  %t436 = extractvalue { i64, i64, <8 x double> } %t434, 1
  ; r427 := (tuple_field r424 2)
  %t437 = extractvalue { i64, i64, <8 x double> } %t434, 2
  ; r428 := (bitcast r427 (bv 512))
  %t438 = bitcast <8 x double> %t437 to i512
  br label %block_0_41c772
block_0_41c772:
  %t439 = phi i64 [ %t436, %block_0_41c75c ], [ %t484, %block_0_41c7a7 ]
  %t440 = phi i64 [ %t426, %block_0_41c75c ], [ %t485, %block_0_41c7a7 ]
  %t441 = phi i64 [ %t427, %block_0_41c75c ], [ %t486, %block_0_41c7a7 ]
  %t442 = phi i512 [ %t438, %block_0_41c75c ], [ %t487, %block_0_41c7a7 ]
  ; r433 := (trunc r430 32)
  %t443 = trunc i64 %t440 to i32
  ; r434 := (uext r433 64)
  %t444 = zext i32 %t443 to i64
  ; r435 := (bitcast r432 (vec 8 double))
  %t445 = bitcast i512 %t442 to <8 x double>
  %t446 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @loadlocale(i64 %t444, i64 %t441, i64 %t439, <8 x double> %t445)
  ret { i64, i64, <8 x double> } %t446
block_0_41c783:
  %t447 = phi i64 [ %t180, %block_0_41c65e ]
  %t448 = phi i64 [ %t181, %block_0_41c65e ]
  %t449 = phi i64 [ %t182, %block_0_41c65e ]
  %t450 = phi i64 [ %t183, %block_0_41c65e ]
  %t451 = phi i512 [ %t184, %block_0_41c65e ]
  ; r441 := (bitcast r440 (vec 8 double))
  %t452 = bitcast i512 %t451 to <8 x double>
  ; r442 := call strlen(r439, r441)
  %t453 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t450, <8 x double> %t452)
  ; r443 := (tuple_field r442 0)
  %t454 = extractvalue { i64, i64, <8 x double> } %t453, 0
  ; r444 := (tuple_field r442 1)
  %t455 = extractvalue { i64, i64, <8 x double> } %t453, 1
  ; r445 := (tuple_field r442 2)
  %t456 = extractvalue { i64, i64, <8 x double> } %t453, 2
  ; r446 := (bitcast r445 (bv 512))
  %t457 = bitcast <8 x double> %t456 to i512
  br label %block_0_41c78b
block_0_41c78b:
  %t458 = phi i64 [ %t454, %block_0_41c783 ]
  %t459 = phi i64 [ %t455, %block_0_41c783 ]
  %t460 = phi i64 [ %t447, %block_0_41c783 ]
  %t461 = phi i64 [ %t448, %block_0_41c783 ]
  %t462 = phi i64 [ %t449, %block_0_41c783 ]
  %t463 = phi i64 [ %t450, %block_0_41c783 ]
  %t464 = phi i512 [ %t457, %block_0_41c783 ]
  ; r454 := (eq r447 (0x1f : bv 64))
  %t465 = icmp eq i64 %t458, 31
  ; r455 := (bv_ule (0x1f : bv 64) r447)
  %t466 = icmp ule i64 31, %t458
  ; r456 := (not r454)
  %t467 = icmp eq i1 %t465, 0
  ; r457 := (and r455 r456)
  %t468 = and i1 %t466, %t467
  br i1 %t468, label %block_0_41c7e7, label %block_0_41c791
block_0_41c791:
  %t469 = phi i64 [ %t459, %block_0_41c78b ]
  %t470 = phi i64 [ %t460, %block_0_41c78b ]
  %t471 = phi i64 [ %t461, %block_0_41c78b ]
  %t472 = phi i64 [ %t463, %block_0_41c78b ]
  %t473 = phi i512 [ %t464, %block_0_41c78b ]
  ; r463 := (trunc r459 32)
  %t474 = trunc i64 %t470 to i32
  ; r464 := (sext r463 64)
  %t475 = sext i32 %t474 to i64
  ; r465 := (bv_shl r464 (0x5 : bv 64))
  %t476 = shl i64 %t475, 5
  ; r466 := (bv_add r465 (0x641540 : bv 64))
  %t477 = add i64 %t476, 6559040
  ; r467 := (bitcast r462 (vec 8 double))
  %t478 = bitcast i512 %t473 to <8 x double>
  ; r468 := call strcpy(r466, r461, r458, r467)
  %t479 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strcpy(i64 %t477, i64 %t472, i64 %t469, <8 x double> %t478)
  ; r469 := (tuple_field r468 0)
  %t480 = extractvalue { i64, i64, <8 x double> } %t479, 0
  ; r470 := (tuple_field r468 1)
  %t481 = extractvalue { i64, i64, <8 x double> } %t479, 1
  ; r471 := (tuple_field r468 2)
  %t482 = extractvalue { i64, i64, <8 x double> } %t479, 2
  ; r472 := (bitcast r471 (bv 512))
  %t483 = bitcast <8 x double> %t482 to i512
  br label %block_0_41c7a7
block_0_41c7a7:
  %t484 = phi i64 [ %t481, %block_0_41c791 ]
  %t485 = phi i64 [ %t470, %block_0_41c791 ]
  %t486 = phi i64 [ %t471, %block_0_41c791 ]
  %t487 = phi i512 [ %t483, %block_0_41c791 ]
  br label %block_0_41c772
block_0_41c7a9:
  %t488 = phi i64 [ %t301, %block_0_41c6df ]
  %t489 = phi i64 [ %t302, %block_0_41c6df ]
  %t490 = phi i64 [ %t303, %block_0_41c6df ]
  %t491 = phi i64 [ %t304, %block_0_41c6df ]
  %t492 = phi i64 [ %t305, %block_0_41c6df ]
  %t493 = phi i64 [ %t306, %block_0_41c6df ]
  %t494 = phi i64 [ %t307, %block_0_41c6df ]
  %t495 = phi i64 [ %t308, %block_0_41c6df ]
  %t496 = phi i512 [ %t309, %block_0_41c6df ]
  ; r486 := (trunc r478 8)
  %t497 = trunc i64 %t489 to i8
  ; r487 := (eq r486 (0x2f : bv 8))
  %t498 = icmp eq i8 %t497, 47
  br i1 %t498, label %block_0_41c7bb, label %block_0_41c7ae
block_0_41c7ae:
  %t499 = phi i64 [ %t488, %block_0_41c7a9 ]
  %t500 = phi i64 [ %t489, %block_0_41c7a9 ]
  %t501 = phi i64 [ %t491, %block_0_41c7a9 ]
  %t502 = phi i64 [ %t492, %block_0_41c7a9 ]
  %t503 = phi i64 [ %t493, %block_0_41c7a9 ]
  %t504 = phi i64 [ %t494, %block_0_41c7a9 ]
  %t505 = phi i64 [ %t495, %block_0_41c7a9 ]
  %t506 = phi i512 [ %t496, %block_0_41c7a9 ]
  ; r496 := (trunc r488 32)
  %t507 = trunc i64 %t499 to i32
  ; r497 := (uext r496 64)
  %t508 = zext i32 %t507 to i64
  br label %block_0_41c7b0
block_0_41c7b0:
  %t509 = phi i64 [ %t508, %block_0_41c7ae ], [ %t552, %block_0_41c7e0 ]
  %t510 = phi i64 [ %t500, %block_0_41c7ae ], [ %t553, %block_0_41c7e0 ]
  %t511 = phi i64 [ %t501, %block_0_41c7ae ], [ %t555, %block_0_41c7e0 ]
  %t512 = phi i64 [ %t502, %block_0_41c7ae ], [ %t556, %block_0_41c7e0 ]
  %t513 = phi i64 [ %t503, %block_0_41c7ae ], [ %t557, %block_0_41c7e0 ]
  %t514 = phi i64 [ %t504, %block_0_41c7ae ], [ %t558, %block_0_41c7e0 ]
  %t515 = phi i64 [ %t505, %block_0_41c7ae ], [ %t559, %block_0_41c7e0 ]
  %t516 = phi i512 [ %t506, %block_0_41c7ae ], [ %t560, %block_0_41c7e0 ]
  ; r506 := (bv_add r498 (0x1 : bv 64))
  %t517 = add i64 %t509, 1
  ; r507 := (read r506 (bv 8))
  %t518 = inttoptr i64 %t517 to i8*
  %t519 = load i8, i8* %t518
  ; r508 := (uext r507 64)
  %t520 = zext i8 %t519 to i64
  ; r509 := (eq r507 (0x0 : bv 8))
  %t521 = icmp eq i8 %t519, 0
  br i1 %t521, label %block_0_41c7bb, label %block_0_41c7e0
block_0_41c7bb:
  %t522 = phi i64 [ %t488, %block_0_41c7a9 ], [ %t517, %block_0_41c7b0 ], [ %t563, %block_0_41c7e5 ]
  %t523 = phi i64 [ %t489, %block_0_41c7a9 ], [ %t510, %block_0_41c7b0 ], [ %t564, %block_0_41c7e5 ]
  %t524 = phi i64 [ %t490, %block_0_41c7a9 ], [ %t520, %block_0_41c7b0 ], [ %t565, %block_0_41c7e5 ]
  %t525 = phi i64 [ %t491, %block_0_41c7a9 ], [ %t511, %block_0_41c7b0 ], [ %t566, %block_0_41c7e5 ]
  %t526 = phi i64 [ %t492, %block_0_41c7a9 ], [ %t512, %block_0_41c7b0 ], [ %t567, %block_0_41c7e5 ]
  %t527 = phi i64 [ %t493, %block_0_41c7a9 ], [ %t513, %block_0_41c7b0 ], [ %t568, %block_0_41c7e5 ]
  %t528 = phi i64 [ %t494, %block_0_41c7a9 ], [ %t514, %block_0_41c7b0 ], [ %t569, %block_0_41c7e5 ]
  %t529 = phi i64 [ %t495, %block_0_41c7a9 ], [ %t515, %block_0_41c7b0 ], [ %t570, %block_0_41c7e5 ]
  %t530 = phi i512 [ %t496, %block_0_41c7a9 ], [ %t516, %block_0_41c7b0 ], [ %t571, %block_0_41c7e5 ]
  ; r519 := (trunc r511 8)
  %t531 = trunc i64 %t523 to i8
  ; r520 := (eq r519 (0x0 : bv 8))
  %t532 = icmp eq i8 %t531, 0
  br i1 %t532, label %block_0_41c6e7, label %block_0_41c7c3
block_0_41c7c3:
  %t533 = phi i64 [ %t522, %block_0_41c7bb ]
  %t534 = phi i64 [ %t524, %block_0_41c7bb ]
  %t535 = phi i64 [ %t525, %block_0_41c7bb ]
  %t536 = phi i64 [ %t526, %block_0_41c7bb ]
  %t537 = phi i64 [ %t527, %block_0_41c7bb ]
  %t538 = phi i64 [ %t528, %block_0_41c7bb ]
  %t539 = phi i64 [ %t529, %block_0_41c7bb ]
  %t540 = phi i512 [ %t530, %block_0_41c7bb ]
  ; r529 := (bv_add r527 (0x20 : bv 64))
  %t541 = add i64 %t539, 32
  ; r530 := (trunc r524 32)
  %t542 = trunc i64 %t536 to i32
  ; r531 := (eq r530 (0x7 : bv 32))
  %t543 = icmp eq i32 %t542, 7
  br i1 %t543, label %block_0_41c613, label %block_0_41c7d3
block_0_41c7d3:
  %t544 = phi i64 [ %t533, %block_0_41c7c3 ]
  %t545 = phi i64 [ %t534, %block_0_41c7c3 ]
  %t546 = phi i64 [ %t535, %block_0_41c7c3 ]
  %t547 = phi i64 [ %t536, %block_0_41c7c3 ]
  %t548 = phi i64 [ %t537, %block_0_41c7c3 ]
  %t549 = phi i64 [ %t538, %block_0_41c7c3 ]
  %t550 = phi i64 [ %t541, %block_0_41c7c3 ]
  %t551 = phi i512 [ %t540, %block_0_41c7c3 ]
  br label %block_0_41c6a3
block_0_41c7e0:
  %t552 = phi i64 [ %t517, %block_0_41c7b0 ]
  %t553 = phi i64 [ %t510, %block_0_41c7b0 ]
  %t554 = phi i64 [ %t520, %block_0_41c7b0 ]
  %t555 = phi i64 [ %t511, %block_0_41c7b0 ]
  %t556 = phi i64 [ %t512, %block_0_41c7b0 ]
  %t557 = phi i64 [ %t513, %block_0_41c7b0 ]
  %t558 = phi i64 [ %t514, %block_0_41c7b0 ]
  %t559 = phi i64 [ %t515, %block_0_41c7b0 ]
  %t560 = phi i512 [ %t516, %block_0_41c7b0 ]
  ; r549 := (trunc r542 8)
  %t561 = trunc i64 %t554 to i8
  ; r550 := (eq r549 (0x2f : bv 8))
  %t562 = icmp eq i8 %t561, 47
  br i1 %t562, label %block_0_41c7e5, label %block_0_41c7b0
block_0_41c7e5:
  %t563 = phi i64 [ %t552, %block_0_41c7e0 ]
  %t564 = phi i64 [ %t553, %block_0_41c7e0 ]
  %t565 = phi i64 [ %t554, %block_0_41c7e0 ]
  %t566 = phi i64 [ %t555, %block_0_41c7e0 ]
  %t567 = phi i64 [ %t556, %block_0_41c7e0 ]
  %t568 = phi i64 [ %t557, %block_0_41c7e0 ]
  %t569 = phi i64 [ %t558, %block_0_41c7e0 ]
  %t570 = phi i64 [ %t559, %block_0_41c7e0 ]
  %t571 = phi i512 [ %t560, %block_0_41c7e0 ]
  br label %block_0_41c7bb
block_0_41c7e7:
  %t572 = phi i64 [ %arg2, %block_0_41c580 ], [ %t87, %block_0_41c5f2 ], [ %t222, %block_0_41c690 ], [ %t230, %block_0_41c6a3 ], [ %t414, %block_0_41c752 ], [ %t459, %block_0_41c78b ], [ %t734, %block_0_41c879 ]
  %t573 = phi i64 [ %arg1, %block_0_41c580 ], [ %t90, %block_0_41c5f2 ], [ %t224, %block_0_41c690 ], [ %t233, %block_0_41c6a3 ], [ %t417, %block_0_41c752 ], [ %t461, %block_0_41c78b ], [ %t736, %block_0_41c879 ]
  %t574 = phi i64 [ %arg0, %block_0_41c580 ], [ %t91, %block_0_41c5f2 ], [ %t225, %block_0_41c690 ], [ %t234, %block_0_41c6a3 ], [ %t418, %block_0_41c752 ], [ %t462, %block_0_41c78b ], [ %t737, %block_0_41c879 ]
  %t575 = phi i512 [ %t6, %block_0_41c580 ], [ %t93, %block_0_41c5f2 ], [ %t227, %block_0_41c690 ], [ %t237, %block_0_41c6a3 ], [ %t419, %block_0_41c752 ], [ %t464, %block_0_41c78b ], [ %t739, %block_0_41c879 ]
  ; r564 := (bitcast r563 (vec 8 double))
  %t576 = bitcast i512 %t575 to <8 x double>
  ; r565 := call __error_unthreaded(r562, r561, r560, r564)
  %t577 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t574, i64 %t573, i64 %t572, <8 x double> %t576)
  ; r566 := (tuple_field r565 0)
  %t578 = extractvalue { i64, i64, <8 x double> } %t577, 0
  ; r567 := (tuple_field r565 1)
  %t579 = extractvalue { i64, i64, <8 x double> } %t577, 1
  ; r568 := (tuple_field r565 2)
  %t580 = extractvalue { i64, i64, <8 x double> } %t577, 2
  ; r569 := (bitcast r568 (bv 512))
  %t581 = bitcast <8 x double> %t580 to i512
  br label %block_0_41c7f5
block_0_41c7f5:
  %t582 = phi i64 [ %t578, %block_0_41c7e7 ]
  %t583 = phi i64 [ %t579, %block_0_41c7e7 ]
  %t584 = phi i512 [ %t581, %block_0_41c7e7 ]
  ; write r570 (0x16 : bv 32)
  %t585 = inttoptr i64 %t582 to i32*
  store i32 22, i32* %t585
  ; r573 := (bitcast r572 (vec 8 double))
  %t586 = bitcast i512 %t584 to <8 x double>
  ; r574 := (tuple (0x0 : bv 64) r571 r573)
  %t587 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t588 = insertvalue { i64, i64, <8 x double> } %t587, i64 %t583, 1
  %t589 = insertvalue { i64, i64, <8 x double> } %t588, <8 x double> %t586, 2
  ret { i64, i64, <8 x double> } %t589
block_0_41c808:
  %t590 = phi i64 [ %t156, %block_0_41c63a ]
  %t591 = phi i64 [ %t158, %block_0_41c63a ]
  %t592 = phi i64 [ %t159, %block_0_41c63a ]
  %t593 = phi i64 [ %t160, %block_0_41c63a ]
  %t594 = phi i512 [ %t161, %block_0_41c63a ]
  ; r580 := (bitcast r579 (vec 8 double))
  %t595 = bitcast i512 %t594 to <8 x double>
  ; r581 := call __error_unthreaded(r578, r577, r575, r580)
  %t596 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t593, i64 %t592, i64 %t590, <8 x double> %t595)
  ; r582 := (tuple_field r581 0)
  %t597 = extractvalue { i64, i64, <8 x double> } %t596, 0
  ; r583 := (tuple_field r581 1)
  %t598 = extractvalue { i64, i64, <8 x double> } %t596, 1
  ; r584 := (tuple_field r581 2)
  %t599 = extractvalue { i64, i64, <8 x double> } %t596, 2
  ; r585 := (bitcast r584 (bv 512))
  %t600 = bitcast <8 x double> %t599 to i512
  br label %block_0_41c80d
block_0_41c80d:
  %t601 = phi i64 [ %t597, %block_0_41c808 ]
  %t602 = phi i64 [ %t598, %block_0_41c808 ]
  %t603 = phi i64 [ %t591, %block_0_41c808 ]
  %t604 = phi i64 [ %t592, %block_0_41c808 ]
  %t605 = phi i64 [ %t593, %block_0_41c808 ]
  %t606 = phi i512 [ %t600, %block_0_41c808 ]
  ; r592 := (trunc r588 32)
  %t607 = trunc i64 %t603 to i32
  ; r593 := (ssbb_overflows r592 (0x1 : bv 32) false)
  %t608 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t607, i32 1)
  %t609 = extractvalue { i32, i1 } %t608, 1
  ; r594 := (bv_add r592 (0xffffffff : bv 32))
  %t610 = add i32 %t607, 4294967295
  ; r595 := (bv_slt r594 (0x0 : bv 32))
  %t611 = icmp slt i32 %t610, 0
  ; r596 := (eq r592 (0x1 : bv 32))
  %t612 = icmp eq i32 %t607, 1
  ; r597 := (read r586 (bv 32))
  %t613 = inttoptr i64 %t601 to i32*
  %t614 = load i32, i32* %t613
  ; r598 := (uext r597 64)
  %t615 = zext i32 %t614 to i64
  ; r599 := (xor r595 r593)
  %t616 = xor i1 %t611, %t609
  ; r600 := (or r596 r599)
  %t617 = or i1 %t612, %t616
  br i1 %t617, label %block_0_41c84a, label %block_0_41c815
block_0_41c815:
  %t618 = phi i64 [ %t602, %block_0_41c80d ]
  %t619 = phi i64 [ %t603, %block_0_41c80d ]
  %t620 = phi i64 [ %t604, %block_0_41c80d ]
  %t621 = phi i64 [ %t605, %block_0_41c80d ]
  %t622 = phi i64 [ %t615, %block_0_41c80d ]
  %t623 = phi i512 [ %t606, %block_0_41c80d ]
  br label %block_0_41c81d
block_0_41c81d:
  %t624 = phi i64 [ %t618, %block_0_41c815 ], [ %t666, %block_0_41c83d ]
  %t625 = phi i64 [ 0, %block_0_41c815 ], [ %t677, %block_0_41c83d ]
  %t626 = phi i64 [ %t619, %block_0_41c815 ], [ %t668, %block_0_41c83d ]
  %t627 = phi i64 [ %t620, %block_0_41c815 ], [ %t669, %block_0_41c83d ]
  %t628 = phi i64 [ %t621, %block_0_41c815 ], [ %t670, %block_0_41c83d ]
  %t629 = phi i64 [ 1, %block_0_41c815 ], [ %t676, %block_0_41c83d ]
  %t630 = phi i64 [ %t622, %block_0_41c815 ], [ %t672, %block_0_41c83d ]
  %t631 = phi i512 [ %t623, %block_0_41c815 ], [ %t673, %block_0_41c83d ]
  ; r615 := (bv_add r608 (0x641560 : bv 64))
  %t632 = add i64 %t625, 6559072
  ; r616 := (bv_add r608 (0x641640 : bv 64))
  %t633 = add i64 %t625, 6559296
  ; r617 := (bitcast r614 (vec 8 double))
  %t634 = bitcast i512 %t631 to <8 x double>
  ; r618 := call strcpy(r615, r616, r607, r617)
  %t635 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strcpy(i64 %t632, i64 %t633, i64 %t624, <8 x double> %t634)
  ; r619 := (tuple_field r618 0)
  %t636 = extractvalue { i64, i64, <8 x double> } %t635, 0
  ; r620 := (tuple_field r618 1)
  %t637 = extractvalue { i64, i64, <8 x double> } %t635, 1
  ; r621 := (tuple_field r618 2)
  %t638 = extractvalue { i64, i64, <8 x double> } %t635, 2
  ; r622 := (bitcast r621 (bv 512))
  %t639 = bitcast <8 x double> %t638 to i512
  br label %block_0_41c830
block_0_41c830:
  %t640 = phi i64 [ %t637, %block_0_41c81d ]
  %t641 = phi i64 [ %t625, %block_0_41c81d ]
  %t642 = phi i64 [ %t626, %block_0_41c81d ]
  %t643 = phi i64 [ %t627, %block_0_41c81d ]
  %t644 = phi i64 [ %t628, %block_0_41c81d ]
  %t645 = phi i64 [ %t629, %block_0_41c81d ]
  %t646 = phi i64 [ %t630, %block_0_41c81d ]
  %t647 = phi i512 [ %t639, %block_0_41c81d ]
  ; r631 := (trunc r628 32)
  %t648 = trunc i64 %t645 to i32
  ; r632 := (uext r631 64)
  %t649 = zext i32 %t648 to i64
  ; r633 := (bitcast r630 (vec 8 double))
  %t650 = bitcast i512 %t647 to <8 x double>
  ; r634 := call loadlocale(r632, r626, r623, r633)
  %t651 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @loadlocale(i64 %t649, i64 %t643, i64 %t640, <8 x double> %t650)
  ; r635 := (tuple_field r634 0)
  %t652 = extractvalue { i64, i64, <8 x double> } %t651, 0
  ; r636 := (tuple_field r634 1)
  %t653 = extractvalue { i64, i64, <8 x double> } %t651, 1
  ; r637 := (tuple_field r634 2)
  %t654 = extractvalue { i64, i64, <8 x double> } %t651, 2
  ; r638 := (bitcast r637 (bv 512))
  %t655 = bitcast <8 x double> %t654 to i512
  br label %block_0_41c838
block_0_41c838:
  %t656 = phi i64 [ %t652, %block_0_41c830 ]
  %t657 = phi i64 [ %t653, %block_0_41c830 ]
  %t658 = phi i64 [ %t641, %block_0_41c830 ]
  %t659 = phi i64 [ %t642, %block_0_41c830 ]
  %t660 = phi i64 [ %t643, %block_0_41c830 ]
  %t661 = phi i64 [ %t644, %block_0_41c830 ]
  %t662 = phi i64 [ %t645, %block_0_41c830 ]
  %t663 = phi i64 [ %t646, %block_0_41c830 ]
  %t664 = phi i512 [ %t655, %block_0_41c830 ]
  ; r648 := (eq r639 (0x0 : bv 64))
  %t665 = icmp eq i64 %t656, 0
  br i1 %t665, label %block_0_41c859, label %block_0_41c83d
block_0_41c83d:
  %t666 = phi i64 [ %t657, %block_0_41c838 ], [ %t715, %block_0_41c86a ]
  %t667 = phi i64 [ %t658, %block_0_41c838 ], [ %t716, %block_0_41c86a ]
  %t668 = phi i64 [ %t659, %block_0_41c838 ], [ %t717, %block_0_41c86a ]
  %t669 = phi i64 [ %t660, %block_0_41c838 ], [ %t718, %block_0_41c86a ]
  %t670 = phi i64 [ %t661, %block_0_41c838 ], [ %t719, %block_0_41c86a ]
  %t671 = phi i64 [ %t662, %block_0_41c838 ], [ %t720, %block_0_41c86a ]
  %t672 = phi i64 [ %t663, %block_0_41c838 ], [ %t721, %block_0_41c86a ]
  %t673 = phi i512 [ %t664, %block_0_41c838 ], [ %t722, %block_0_41c86a ]
  ; r657 := (trunc r654 32)
  %t674 = trunc i64 %t671 to i32
  ; r658 := (bv_add r657 (0x1 : bv 32))
  %t675 = add i32 %t674, 1
  ; r659 := (uext r658 64)
  %t676 = zext i32 %t675 to i64
  ; r660 := (bv_add r650 (0x20 : bv 64))
  %t677 = add i64 %t667, 32
  ; r661 := (trunc r651 32)
  %t678 = trunc i64 %t668 to i32
  ; r662 := (eq r658 r661)
  %t679 = icmp eq i32 %t675, %t678
  br i1 %t679, label %block_0_41c84a, label %block_0_41c81d
block_0_41c84a:
  %t680 = phi i64 [ %t602, %block_0_41c80d ], [ %t666, %block_0_41c83d ]
  %t681 = phi i64 [ %t604, %block_0_41c80d ], [ %t669, %block_0_41c83d ]
  %t682 = phi i64 [ %t605, %block_0_41c80d ], [ %t670, %block_0_41c83d ]
  %t683 = phi i64 [ %t615, %block_0_41c80d ], [ %t672, %block_0_41c83d ]
  %t684 = phi i512 [ %t606, %block_0_41c80d ], [ %t673, %block_0_41c83d ]
  ; r668 := (bitcast r667 (vec 8 double))
  %t685 = bitcast i512 %t684 to <8 x double>
  ; r669 := call __error_unthreaded(r665, r664, r663, r668)
  %t686 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t682, i64 %t681, i64 %t680, <8 x double> %t685)
  ; r670 := (tuple_field r669 0)
  %t687 = extractvalue { i64, i64, <8 x double> } %t686, 0
  ; r671 := (tuple_field r669 1)
  %t688 = extractvalue { i64, i64, <8 x double> } %t686, 1
  ; r672 := (tuple_field r669 2)
  %t689 = extractvalue { i64, i64, <8 x double> } %t686, 2
  ; r673 := (bitcast r672 (bv 512))
  %t690 = bitcast <8 x double> %t689 to i512
  br label %block_0_41c84f
block_0_41c84f:
  %t691 = phi i64 [ %t687, %block_0_41c84a ]
  %t692 = phi i64 [ %t688, %block_0_41c84a ]
  %t693 = phi i64 [ %t683, %block_0_41c84a ]
  %t694 = phi i512 [ %t690, %block_0_41c84a ]
  ; r678 := (trunc r676 32)
  %t695 = trunc i64 %t693 to i32
  ; write r674 r678
  %t696 = inttoptr i64 %t691 to i32*
  store i32 %t695, i32* %t696
  br label %block_0_41c735
block_0_41c859:
  %t697 = phi i64 [ %t657, %block_0_41c838 ]
  %t698 = phi i64 [ %t658, %block_0_41c838 ]
  %t699 = phi i64 [ %t659, %block_0_41c838 ]
  %t700 = phi i64 [ %t660, %block_0_41c838 ]
  %t701 = phi i64 [ %t661, %block_0_41c838 ]
  %t702 = phi i64 [ %t662, %block_0_41c838 ]
  %t703 = phi i64 [ %t663, %block_0_41c838 ]
  %t704 = phi i512 [ %t664, %block_0_41c838 ]
  ; r687 := (trunc r684 32)
  %t705 = trunc i64 %t702 to i32
  ; r688 := (uext r687 64)
  %t706 = zext i32 %t705 to i64
  ; r689 := (bv_add r680 (0x641560 : bv 64))
  %t707 = add i64 %t698, 6559072
  ; write r689 (0x43 : bv 16)
  %t708 = inttoptr i64 %t707 to i16*
  store i16 67, i16* %t708
  ; r690 := (bitcast r686 (vec 8 double))
  %t709 = bitcast i512 %t704 to <8 x double>
  ; r691 := call loadlocale(r688, r682, r679, r690)
  %t710 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @loadlocale(i64 %t706, i64 %t700, i64 %t697, <8 x double> %t709)
  ; r692 := (tuple_field r691 0)
  %t711 = extractvalue { i64, i64, <8 x double> } %t710, 0
  ; r693 := (tuple_field r691 1)
  %t712 = extractvalue { i64, i64, <8 x double> } %t710, 1
  ; r694 := (tuple_field r691 2)
  %t713 = extractvalue { i64, i64, <8 x double> } %t710, 2
  ; r695 := (bitcast r694 (bv 512))
  %t714 = bitcast <8 x double> %t713 to i512
  br label %block_0_41c86a
block_0_41c86a:
  %t715 = phi i64 [ %t712, %block_0_41c859 ]
  %t716 = phi i64 [ %t698, %block_0_41c859 ]
  %t717 = phi i64 [ %t699, %block_0_41c859 ]
  %t718 = phi i64 [ %t700, %block_0_41c859 ]
  %t719 = phi i64 [ %t701, %block_0_41c859 ]
  %t720 = phi i64 [ %t702, %block_0_41c859 ]
  %t721 = phi i64 [ %t703, %block_0_41c859 ]
  %t722 = phi i512 [ %t714, %block_0_41c859 ]
  br label %block_0_41c83d
block_0_41c86c:
  %t723 = phi i64 [ %t203, %block_0_41c67b ]
  %t724 = phi i64 [ %t204, %block_0_41c67b ]
  %t725 = phi i64 [ %t205, %block_0_41c67b ]
  %t726 = phi i512 [ %t206, %block_0_41c67b ]
  ; r708 := (bitcast r707 (vec 8 double))
  %t727 = bitcast i512 %t726 to <8 x double>
  ; r709 := call strlen(r706, r708)
  %t728 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t725, <8 x double> %t727)
  ; r710 := (tuple_field r709 0)
  %t729 = extractvalue { i64, i64, <8 x double> } %t728, 0
  ; r711 := (tuple_field r709 1)
  %t730 = extractvalue { i64, i64, <8 x double> } %t728, 1
  ; r712 := (tuple_field r709 2)
  %t731 = extractvalue { i64, i64, <8 x double> } %t728, 2
  ; r713 := (bitcast r712 (bv 512))
  %t732 = bitcast <8 x double> %t731 to i512
  br label %block_0_41c879
block_0_41c879:
  %t733 = phi i64 [ %t729, %block_0_41c86c ]
  %t734 = phi i64 [ %t730, %block_0_41c86c ]
  %t735 = phi i64 [ 6559072, %block_0_41c86c ]
  %t736 = phi i64 [ %t723, %block_0_41c86c ]
  %t737 = phi i64 [ %t724, %block_0_41c86c ]
  %t738 = phi i64 [ %t725, %block_0_41c86c ]
  %t739 = phi i512 [ %t732, %block_0_41c86c ]
  ; r721 := (eq r714 (0x1f : bv 64))
  %t740 = icmp eq i64 %t733, 31
  ; r722 := (bv_ule (0x1f : bv 64) r714)
  %t741 = icmp ule i64 31, %t733
  ; r723 := (not r721)
  %t742 = icmp eq i1 %t740, 0
  ; r724 := (and r722 r723)
  %t743 = and i1 %t741, %t742
  br i1 %t743, label %block_0_41c7e7, label %block_0_41c883
block_0_41c883:
  %t744 = phi i64 [ %t734, %block_0_41c879 ], [ %t757, %block_0_41c892 ]
  %t745 = phi i64 [ %t735, %block_0_41c879 ], [ %t758, %block_0_41c892 ]
  %t746 = phi i64 [ %t736, %block_0_41c879 ], [ %t759, %block_0_41c892 ]
  %t747 = phi i64 [ %t737, %block_0_41c879 ], [ %t760, %block_0_41c892 ]
  %t748 = phi i64 [ %t738, %block_0_41c879 ], [ %t761, %block_0_41c892 ]
  %t749 = phi i512 [ %t739, %block_0_41c879 ], [ %t762, %block_0_41c892 ]
  ; r731 := (bv_add r726 (0x20 : bv 64))
  %t750 = add i64 %t745, 32
  ; r732 := (bitcast r730 (vec 8 double))
  %t751 = bitcast i512 %t749 to <8 x double>
  ; r733 := call strcpy(r726, r729, r725, r732)
  %t752 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strcpy(i64 %t745, i64 %t748, i64 %t744, <8 x double> %t751)
  ; r734 := (tuple_field r733 0)
  %t753 = extractvalue { i64, i64, <8 x double> } %t752, 0
  ; r735 := (tuple_field r733 1)
  %t754 = extractvalue { i64, i64, <8 x double> } %t752, 1
  ; r736 := (tuple_field r733 2)
  %t755 = extractvalue { i64, i64, <8 x double> } %t752, 2
  ; r737 := (bitcast r736 (bv 512))
  %t756 = bitcast <8 x double> %t755 to i512
  br label %block_0_41c892
block_0_41c892:
  %t757 = phi i64 [ %t754, %block_0_41c883 ]
  %t758 = phi i64 [ %t750, %block_0_41c883 ]
  %t759 = phi i64 [ %t746, %block_0_41c883 ]
  %t760 = phi i64 [ %t747, %block_0_41c883 ]
  %t761 = phi i64 [ %t748, %block_0_41c883 ]
  %t762 = phi i512 [ %t756, %block_0_41c883 ]
  ; r744 := (eq r739 (0x641620 : bv 64))
  %t763 = icmp eq i64 %t758, 6559264
  br i1 %t763, label %block_0_41c89b, label %block_0_41c883
block_0_41c89b:
  %t764 = phi i64 [ %t757, %block_0_41c892 ]
  %t765 = phi i64 [ %t759, %block_0_41c892 ]
  %t766 = phi i64 [ %t760, %block_0_41c892 ]
  %t767 = phi i512 [ %t762, %block_0_41c892 ]
  br label %block_0_41c613
}
define void @__get_current_messages_locale() {
block_0_41c8a0:
  ; r0 := (read (0x641820 : bv 64) (bv 32))
  %t0 = inttoptr i64 6559776 to i32*
  %t1 = load i32, i32* %t0
  ret void
}
define void @_MSKanji_init(i64 %arg0) {
block_0_41d490:
  ; write (0x6301b0 : bv 64) (0x41d550 : bv 64)
  %t0 = inttoptr i64 6488496 to i64*
  store i64 4314448, i64* %t0
  ; write (0x6301c8 : bv 64) (0x41d4f0 : bv 64)
  %t1 = inttoptr i64 6488520 to i64*
  store i64 4314352, i64* %t1
  ; write (0x6301b8 : bv 64) (0x41d4d0 : bv 64)
  %t2 = inttoptr i64 6488504 to i64*
  store i64 4314320, i64* %t2
  ; write (0x631260 : bv 64) arg0
  %t3 = inttoptr i64 6492768 to i64*
  store i64 %arg0, i64* %t3
  ; write (0x6301a8 : bv 64) (0x2 : bv 32)
  %t4 = inttoptr i64 6488488 to i32*
  store i32 2, i32* %t4
  ; write (0x6301ac : bv 64) (0x100 : bv 32)
  %t5 = inttoptr i64 6488492 to i32*
  store i32 256, i32* %t5
  ret void
}
define void @_MSKanji_mbsinit(i64 %arg0) {
block_0_41d4d0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  br i1 %t0, label %block_0_41d4e2, label %block_0_41d4da
block_0_41d4da:
  %t1 = phi i64 [ %arg0, %block_0_41d4d0 ]
  ; r2 := (read r1 (bv 32))
  %t2 = inttoptr i64 %t1 to i32*
  %t3 = load i32, i32* %t2
  br label %block_0_41d4e2
block_0_41d4e2:
  ret void
}
define void @_MSKanji_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41d4f0:
  ; r0 := (read arg2 (bv 32))
  %t0 = inttoptr i64 %arg2 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  br i1 %t2, label %block_0_41d511, label %block_0_41d4fa
block_0_41d4fa:
  %t4 = phi i64 [ %arg2, %block_0_41d4f0 ]
  %t5 = phi i64 [ %arg1, %block_0_41d4f0 ]
  %t6 = phi i64 [ %arg0, %block_0_41d4f0 ]
  %t7 = phi i512 [ %t3, %block_0_41d4f0 ]
  ; r7 := (bitcast r6 (vec 8 double))
  %t8 = bitcast i512 %t7 to <8 x double>
  ; r8 := call __error_unthreaded(r5, r4, r3, r7)
  %t9 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t6, i64 %t5, i64 %t4, <8 x double> %t8)
  ; r9 := (tuple_field r8 0)
  %t10 = extractvalue { i64, i64, <8 x double> } %t9, 0
  ; r10 := (tuple_field r8 1)
  %t11 = extractvalue { i64, i64, <8 x double> } %t9, 1
  ; r11 := (tuple_field r8 2)
  %t12 = extractvalue { i64, i64, <8 x double> } %t9, 2
  ; r12 := (bitcast r11 (bv 512))
  %t13 = bitcast <8 x double> %t12 to i512
  br label %block_0_41d4ff
block_0_41d4ff:
  %t14 = phi i64 [ %t10, %block_0_41d4fa ]
  ; write r13 (0x16 : bv 32)
  %t15 = inttoptr i64 %t14 to i32*
  store i32 22, i32* %t15
  br label %block_0_41d50c
block_0_41d50c:
  ret void
block_0_41d511:
  %t16 = phi i64 [ %arg1, %block_0_41d4f0 ]
  %t17 = phi i64 [ %arg0, %block_0_41d4f0 ]
  ; r16 := (eq r15 (0x0 : bv 64))
  %t18 = icmp eq i64 %t17, 0
  br i1 %t18, label %block_0_41d50c, label %block_0_41d51b
block_0_41d51b:
  %t19 = phi i64 [ %t16, %block_0_41d511 ]
  %t20 = phi i64 [ %t17, %block_0_41d511 ]
  ; r19 := (trunc r17 32)
  %t21 = trunc i64 %t19 to i32
  ; r20 := (ssbb_overflows r19 (0x101 : bv 32) false)
  %t22 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t21, i32 257)
  %t23 = extractvalue { i32, i1 } %t22, 1
  ; r21 := (bv_add r19 (0xfffffeff : bv 32))
  %t24 = add i32 %t21, 4294967039
  ; r22 := (bv_slt r21 (0x0 : bv 32))
  %t25 = icmp slt i32 %t24, 0
  ; r23 := (eq r22 r20)
  %t26 = icmp eq i1 %t25, %t23
  ; r24 := (mux r23 (0x1 : bv 8) (0x0 : bv 8))
  %t27 = select i1 %t26, i8 1, i8 0
  ; r25 := (uext r24 64)
  %t28 = zext i8 %t27 to i64
  br label %block_0_41d530
block_0_41d530:
  %t29 = phi i64 [ %t28, %block_0_41d51b ], [ %t36, %block_0_41d530 ]
  %t30 = phi i64 [ %t19, %block_0_41d51b ], [ %t30, %block_0_41d530 ]
  %t31 = phi i64 [ %t20, %block_0_41d51b ], [ %t47, %block_0_41d530 ]
  ; r29 := (bv_mul (0x8 : bv 64) r26)
  %t32 = mul i64 8, %t29
  ; r30 := (trunc r27 32)
  %t33 = trunc i64 %t30 to i32
  ; r31 := (trunc r26 32)
  %t34 = trunc i64 %t29 to i32
  ; r32 := (bv_add r31 (0xffffffff : bv 32))
  %t35 = add i32 %t34, 4294967295
  ; r33 := (uext r32 64)
  %t36 = zext i32 %t35 to i64
  ; r34 := (trunc r29 8)
  %t37 = trunc i64 %t32 to i8
  ; r35 := (bv_and r34 (0x1f : bv 8))
  %t38 = and i8 %t37, 31
  ; r36 := (eq r35 (0x0 : bv 8))
  %t39 = icmp eq i8 %t38, 0
  ; r37 := (uext r35 32)
  %t40 = zext i8 %t38 to i32
  ; r38 := (bv_sar r30 r37)
  %t41 = ashr i32 %t33, %t40
  ; r39 := (mux r36 r30 r38)
  %t42 = select i1 %t39, i32 %t33, i32 %t41
  ; r40 := (trunc r39 8)
  %t43 = trunc i32 %t42 to i8
  ; write r28 r40
  %t44 = inttoptr i64 %t31 to i8*
  store i8 %t43, i8* %t44
  ; r41 := (bv_add r33 (0x1 : bv 64))
  %t45 = add i64 %t36, 1
  ; r42 := (trunc r41 32)
  %t46 = trunc i64 %t45 to i32
  ; r43 := (bv_add r28 (0x1 : bv 64))
  %t47 = add i64 %t31, 1
  ; r44 := (eq r42 (0x0 : bv 32))
  %t48 = icmp eq i32 %t46, 0
  ; r45 := (not r44)
  %t49 = icmp eq i1 %t48, 0
  ; r46 := (bv_sle (0x0 : bv 32) r42)
  %t50 = icmp sle i32 0, %t46
  ; r47 := (and r45 r46)
  %t51 = and i1 %t49, %t50
  br i1 %t51, label %block_0_41d530, label %block_0_41d54b
block_0_41d54b:
  br label %block_0_41d50c
}
define void @_MSKanji_mbrtowc(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_41d550:
  ; r0 := (read arg3 (bv 32))
  %t0 = inttoptr i64 %arg3 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (bv_and r0 (0xffffff00 : bv 32))
  %t3 = and i32 %t1, 4294967040
  ; r3 := (eq r2 (0x0 : bv 32))
  %t4 = icmp eq i32 %t3, 0
  ; r4 := (bitcast arg4 (bv 512))
  %t5 = bitcast <8 x double> %arg4 to i512
  ; r5 := (bitcast arg4 (bv 512))
  %t6 = bitcast <8 x double> %arg4 to i512
  br i1 %t4, label %block_0_41d577, label %block_0_41d560
block_0_41d560:
  %t7 = phi i64 [ %arg2, %block_0_41d550 ]
  %t8 = phi i64 [ %arg1, %block_0_41d550 ]
  %t9 = phi i64 [ %arg0, %block_0_41d550 ]
  %t10 = phi i512 [ %t6, %block_0_41d550 ]
  ; r10 := (bitcast r9 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r11 := call __error_unthreaded(r8, r7, r6, r10)
  %t12 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t9, i64 %t8, i64 %t7, <8 x double> %t11)
  ; r12 := (tuple_field r11 0)
  %t13 = extractvalue { i64, i64, <8 x double> } %t12, 0
  ; r13 := (tuple_field r11 1)
  %t14 = extractvalue { i64, i64, <8 x double> } %t12, 1
  ; r14 := (tuple_field r11 2)
  %t15 = extractvalue { i64, i64, <8 x double> } %t12, 2
  ; r15 := (bitcast r14 (bv 512))
  %t16 = bitcast <8 x double> %t15 to i512
  br label %block_0_41d565
block_0_41d565:
  %t17 = phi i64 [ %t13, %block_0_41d560 ]
  ; write r16 (0x16 : bv 32)
  %t18 = inttoptr i64 %t17 to i32*
  store i32 22, i32* %t18
  br label %block_0_41d572
block_0_41d572:
  ret void
block_0_41d577:
  %t19 = phi i64 [ %arg3, %block_0_41d550 ]
  %t20 = phi i64 [ %arg2, %block_0_41d550 ]
  %t21 = phi i64 [ %arg1, %block_0_41d550 ]
  %t22 = phi i64 [ %arg0, %block_0_41d550 ]
  %t23 = phi i64 [ %t2, %block_0_41d550 ]
  %t24 = phi i512 [ %t5, %block_0_41d550 ]
  ; r23 := (eq r19 (0x0 : bv 64))
  %t25 = icmp eq i64 %t21, 0
  br i1 %t25, label %block_0_41d63c, label %block_0_41d580
block_0_41d580:
  %t26 = phi i64 [ %t19, %block_0_41d577 ]
  %t27 = phi i64 [ %t20, %block_0_41d577 ]
  %t28 = phi i64 [ %t21, %block_0_41d577 ]
  %t29 = phi i64 [ %t22, %block_0_41d577 ]
  %t30 = phi i64 [ %t23, %block_0_41d577 ]
  %t31 = phi i512 [ %t24, %block_0_41d577 ]
  ; r30 := (eq r25 (0x0 : bv 64))
  %t32 = icmp eq i64 %t27, 0
  br i1 %t32, label %block_0_41d572, label %block_0_41d58c
block_0_41d58c:
  %t33 = phi i64 [ %t26, %block_0_41d580 ], [ %t148, %block_0_41d63c ]
  %t34 = phi i64 [ %t27, %block_0_41d580 ], [ 1, %block_0_41d63c ]
  %t35 = phi i64 [ %t28, %block_0_41d580 ], [ 4363506, %block_0_41d63c ]
  %t36 = phi i64 [ %t29, %block_0_41d580 ], [ 0, %block_0_41d63c ]
  %t37 = phi i64 [ %t30, %block_0_41d580 ], [ %t149, %block_0_41d63c ]
  %t38 = phi i512 [ %t31, %block_0_41d580 ], [ %t150, %block_0_41d63c ]
  ; r37 := (trunc r35 32)
  %t39 = trunc i64 %t37 to i32
  ; r38 := (eq r37 (0x0 : bv 32))
  %t40 = icmp eq i32 %t39, 0
  br i1 %t40, label %block_0_41d592, label %block_0_41d5c0
block_0_41d592:
  %t41 = phi i64 [ %t33, %block_0_41d58c ]
  %t42 = phi i64 [ %t34, %block_0_41d58c ]
  %t43 = phi i64 [ %t35, %block_0_41d58c ]
  %t44 = phi i64 [ %t36, %block_0_41d58c ]
  %t45 = phi i512 [ %t38, %block_0_41d58c ]
  ; r44 := (read r41 (bv 8))
  %t46 = inttoptr i64 %t43 to i8*
  %t47 = load i8, i8* %t46
  ; r45 := (uext r44 64)
  %t48 = zext i8 %t47 to i64
  ; r46 := (bv_add r45 (0xffffffffffffff7f : bv 64))
  %t49 = add i64 %t48, 18446744073709551487
  ; r47 := (trunc r46 32)
  %t50 = trunc i64 %t49 to i32
  ; r48 := (bv_ult r47 (0x1e : bv 32))
  %t51 = icmp ult i32 %t50, 30
  ; r49 := (eq r47 (0x1e : bv 32))
  %t52 = icmp eq i32 %t50, 30
  ; r50 := (or r48 r49)
  %t53 = or i1 %t51, %t52
  br i1 %t53, label %block_0_41d5ae, label %block_0_41d5a2
block_0_41d5a2:
  %t54 = phi i64 [ %t41, %block_0_41d592 ]
  %t55 = phi i64 [ %t42, %block_0_41d592 ]
  %t56 = phi i64 [ %t43, %block_0_41d592 ]
  %t57 = phi i64 [ %t44, %block_0_41d592 ]
  %t58 = phi i64 [ %t48, %block_0_41d592 ]
  %t59 = phi i512 [ %t45, %block_0_41d592 ]
  ; r57 := (bv_add r55 (0xffffffffffffff20 : bv 64))
  %t60 = add i64 %t58, 18446744073709551392
  ; r58 := (trunc r57 32)
  %t61 = trunc i64 %t60 to i32
  ; r59 := (eq r58 (0x1c : bv 32))
  %t62 = icmp eq i32 %t61, 28
  ; r60 := (bv_ule (0x1c : bv 32) r58)
  %t63 = icmp ule i32 28, %t61
  ; r61 := (not r59)
  %t64 = icmp eq i1 %t62, 0
  ; r62 := (and r60 r61)
  %t65 = and i1 %t63, %t64
  br i1 %t65, label %block_0_41d5db, label %block_0_41d5ae
block_0_41d5ae:
  %t66 = phi i64 [ %t41, %block_0_41d592 ], [ %t54, %block_0_41d5a2 ]
  %t67 = phi i64 [ %t42, %block_0_41d592 ], [ %t55, %block_0_41d5a2 ]
  %t68 = phi i64 [ %t43, %block_0_41d592 ], [ %t56, %block_0_41d5a2 ]
  %t69 = phi i64 [ %t44, %block_0_41d592 ], [ %t57, %block_0_41d5a2 ]
  %t70 = phi i64 [ %t48, %block_0_41d592 ], [ %t58, %block_0_41d5a2 ]
  %t71 = phi i512 [ %t45, %block_0_41d592 ], [ %t59, %block_0_41d5a2 ]
  ; r69 := (eq r64 (0x1 : bv 64))
  %t72 = icmp eq i64 %t67, 1
  ; r70 := (bv_ule (0x1 : bv 64) r64)
  %t73 = icmp ule i64 1, %t67
  ; r71 := (not r69)
  %t74 = icmp eq i1 %t72, 0
  ; r72 := (and r70 r71)
  %t75 = and i1 %t73, %t74
  br i1 %t75, label %block_0_41d610, label %block_0_41d5b4
block_0_41d5b4:
  %t76 = phi i64 [ %t66, %block_0_41d5ae ]
  %t77 = phi i64 [ %t70, %block_0_41d5ae ]
  ; r75 := (trunc r74 32)
  %t78 = trunc i64 %t77 to i32
  ; write r73 r75
  %t79 = inttoptr i64 %t76 to i32*
  store i32 %t78, i32* %t79
  br label %block_0_41d572
block_0_41d5c0:
  %t80 = phi i64 [ %t33, %block_0_41d58c ]
  %t81 = phi i64 [ %t34, %block_0_41d58c ]
  %t82 = phi i64 [ %t35, %block_0_41d58c ]
  %t83 = phi i64 [ %t36, %block_0_41d58c ]
  %t84 = phi i64 [ %t37, %block_0_41d58c ]
  %t85 = phi i512 [ %t38, %block_0_41d58c ]
  ; r82 := (read r78 (bv 8))
  %t86 = inttoptr i64 %t82 to i8*
  %t87 = load i8, i8* %t86
  ; r83 := (uext r82 64)
  %t88 = zext i8 %t87 to i64
  ; r84 := (eq r82 (0x0 : bv 8))
  %t89 = icmp eq i8 %t87, 0
  br i1 %t89, label %block_0_41d5c7, label %block_0_41d5ef
block_0_41d5c7:
  %t90 = phi i64 [ %t81, %block_0_41d5c0 ], [ %t133, %block_0_41d610 ]
  %t91 = phi i64 [ %t82, %block_0_41d5c0 ], [ %t126, %block_0_41d610 ]
  %t92 = phi i64 [ %t83, %block_0_41d5c0 ], [ %t127, %block_0_41d610 ]
  %t93 = phi i512 [ %t85, %block_0_41d5c0 ], [ %t129, %block_0_41d610 ]
  ; r89 := (bitcast r88 (vec 8 double))
  %t94 = bitcast i512 %t93 to <8 x double>
  ; r90 := call __error_unthreaded(r87, r86, r85, r89)
  %t95 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t92, i64 %t91, i64 %t90, <8 x double> %t94)
  ; r91 := (tuple_field r90 0)
  %t96 = extractvalue { i64, i64, <8 x double> } %t95, 0
  ; r92 := (tuple_field r90 1)
  %t97 = extractvalue { i64, i64, <8 x double> } %t95, 1
  ; r93 := (tuple_field r90 2)
  %t98 = extractvalue { i64, i64, <8 x double> } %t95, 2
  ; r94 := (bitcast r93 (bv 512))
  %t99 = bitcast <8 x double> %t98 to i512
  br label %block_0_41d5cc
block_0_41d5cc:
  %t100 = phi i64 [ %t96, %block_0_41d5c7 ]
  ; write r95 (0x56 : bv 32)
  %t101 = inttoptr i64 %t100 to i32*
  store i32 86, i32* %t101
  br label %block_0_41d572
block_0_41d5db:
  %t102 = phi i64 [ %t57, %block_0_41d5a2 ]
  %t103 = phi i64 [ %t58, %block_0_41d5a2 ]
  ; r98 := (eq r96 (0x0 : bv 64))
  %t104 = icmp eq i64 %t102, 0
  br i1 %t104, label %block_0_41d5e5, label %block_0_41d5e2
block_0_41d5e2:
  %t105 = phi i64 [ %t102, %block_0_41d5db ]
  %t106 = phi i64 [ %t103, %block_0_41d5db ]
  ; r101 := (trunc r100 32)
  %t107 = trunc i64 %t106 to i32
  ; write r99 r101
  %t108 = inttoptr i64 %t105 to i32*
  store i32 %t107, i32* %t108
  br label %block_0_41d5e5
block_0_41d5e5:
  br label %block_0_41d572
block_0_41d5ef:
  %t109 = phi i64 [ %t88, %block_0_41d5c0 ]
  %t110 = phi i64 [ %t80, %block_0_41d5c0 ]
  %t111 = phi i64 [ %t83, %block_0_41d5c0 ]
  %t112 = phi i64 [ %t84, %block_0_41d5c0 ]
  ; r106 := (eq r104 (0x0 : bv 64))
  %t113 = icmp eq i64 %t111, 0
  br i1 %t113, label %block_0_41d600, label %block_0_41d5f4
block_0_41d5f4:
  %t114 = phi i64 [ %t109, %block_0_41d5ef ]
  %t115 = phi i64 [ %t110, %block_0_41d5ef ]
  %t116 = phi i64 [ %t111, %block_0_41d5ef ]
  %t117 = phi i64 [ %t112, %block_0_41d5ef ]
  ; r111 := (trunc r107 8)
  %t118 = trunc i64 %t114 to i8
  ; r112 := (uext r111 32)
  %t119 = zext i8 %t118 to i32
  ; r113 := (trunc r110 32)
  %t120 = trunc i64 %t117 to i32
  ; r114 := (bv_shl r113 (0x8 : bv 32))
  %t121 = shl i32 %t120, 8
  ; r115 := (bv_or r112 r114)
  %t122 = or i32 %t119, %t121
  ; write r109 r115
  %t123 = inttoptr i64 %t116 to i32*
  store i32 %t122, i32* %t123
  br label %block_0_41d600
block_0_41d600:
  %t124 = phi i64 [ %t110, %block_0_41d5ef ], [ %t115, %block_0_41d5f4 ]
  ; write r116 (0x0 : bv 32)
  %t125 = inttoptr i64 %t124 to i32*
  store i32 0, i32* %t125
  br label %block_0_41d572
block_0_41d610:
  %t126 = phi i64 [ %t68, %block_0_41d5ae ]
  %t127 = phi i64 [ %t69, %block_0_41d5ae ]
  %t128 = phi i64 [ %t70, %block_0_41d5ae ]
  %t129 = phi i512 [ %t71, %block_0_41d5ae ]
  ; r121 := (bv_add r117 (0x1 : bv 64))
  %t130 = add i64 %t126, 1
  ; r122 := (read r121 (bv 8))
  %t131 = inttoptr i64 %t130 to i8*
  %t132 = load i8, i8* %t131
  ; r123 := (uext r122 64)
  %t133 = zext i8 %t132 to i64
  ; r124 := (eq r122 (0x0 : bv 8))
  %t134 = icmp eq i8 %t132, 0
  br i1 %t134, label %block_0_41d5c7, label %block_0_41d618
block_0_41d618:
  %t135 = phi i64 [ %t133, %block_0_41d610 ]
  %t136 = phi i64 [ %t127, %block_0_41d610 ]
  %t137 = phi i64 [ %t128, %block_0_41d610 ]
  ; r128 := (eq r126 (0x0 : bv 64))
  %t138 = icmp eq i64 %t136, 0
  br i1 %t138, label %block_0_41d572, label %block_0_41d626
block_0_41d626:
  %t139 = phi i64 [ %t135, %block_0_41d618 ]
  %t140 = phi i64 [ %t136, %block_0_41d618 ]
  %t141 = phi i64 [ %t137, %block_0_41d618 ]
  ; r132 := (trunc r129 8)
  %t142 = trunc i64 %t139 to i8
  ; r133 := (uext r132 32)
  %t143 = zext i8 %t142 to i32
  ; r134 := (trunc r131 32)
  %t144 = trunc i64 %t141 to i32
  ; r135 := (bv_shl r134 (0x8 : bv 32))
  %t145 = shl i32 %t144, 8
  ; r136 := (bv_or r133 r135)
  %t146 = or i32 %t143, %t145
  ; write r130 r136
  %t147 = inttoptr i64 %t140 to i32*
  store i32 %t146, i32* %t147
  br label %block_0_41d572
block_0_41d63c:
  %t148 = phi i64 [ %t19, %block_0_41d577 ]
  %t149 = phi i64 [ %t23, %block_0_41d577 ]
  %t150 = phi i512 [ %t24, %block_0_41d577 ]
  br label %block_0_41d58c
}
define void @_GBK_init(i64 %arg0) {
block_0_41d770:
  ; write (0x6301b0 : bv 64) (0x41d820 : bv 64)
  %t0 = inttoptr i64 6488496 to i64*
  store i64 4315168, i64* %t0
  ; write (0x6301c8 : bv 64) (0x41d7d0 : bv 64)
  %t1 = inttoptr i64 6488520 to i64*
  store i64 4315088, i64* %t1
  ; write (0x6301b8 : bv 64) (0x41d7b0 : bv 64)
  %t2 = inttoptr i64 6488504 to i64*
  store i64 4315056, i64* %t2
  ; write (0x631260 : bv 64) arg0
  %t3 = inttoptr i64 6492768 to i64*
  store i64 %arg0, i64* %t3
  ; write (0x6301a8 : bv 64) (0x2 : bv 32)
  %t4 = inttoptr i64 6488488 to i32*
  store i32 2, i32* %t4
  ; write (0x6301ac : bv 64) (0x80 : bv 32)
  %t5 = inttoptr i64 6488492 to i32*
  store i32 128, i32* %t5
  ret void
}
define void @_GBK_mbsinit(i64 %arg0) {
block_0_41d7b0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  br i1 %t0, label %block_0_41d7c2, label %block_0_41d7ba
block_0_41d7ba:
  %t1 = phi i64 [ %arg0, %block_0_41d7b0 ]
  ; r2 := (read r1 (bv 32))
  %t2 = inttoptr i64 %t1 to i32*
  %t3 = load i32, i32* %t2
  br label %block_0_41d7c2
block_0_41d7c2:
  ret void
}
define void @_GBK_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41d7d0:
  ; r0 := (read arg2 (bv 32))
  %t0 = inttoptr i64 %arg2 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  br i1 %t2, label %block_0_41d7f1, label %block_0_41d7da
block_0_41d7da:
  %t4 = phi i64 [ %arg2, %block_0_41d7d0 ]
  %t5 = phi i64 [ %arg1, %block_0_41d7d0 ]
  %t6 = phi i64 [ %arg0, %block_0_41d7d0 ]
  %t7 = phi i512 [ %t3, %block_0_41d7d0 ]
  ; r7 := (bitcast r6 (vec 8 double))
  %t8 = bitcast i512 %t7 to <8 x double>
  ; r8 := call __error_unthreaded(r5, r4, r3, r7)
  %t9 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t6, i64 %t5, i64 %t4, <8 x double> %t8)
  ; r9 := (tuple_field r8 0)
  %t10 = extractvalue { i64, i64, <8 x double> } %t9, 0
  ; r10 := (tuple_field r8 1)
  %t11 = extractvalue { i64, i64, <8 x double> } %t9, 1
  ; r11 := (tuple_field r8 2)
  %t12 = extractvalue { i64, i64, <8 x double> } %t9, 2
  ; r12 := (bitcast r11 (bv 512))
  %t13 = bitcast <8 x double> %t12 to i512
  br label %block_0_41d7df
block_0_41d7df:
  %t14 = phi i64 [ %t10, %block_0_41d7da ]
  ; write r13 (0x16 : bv 32)
  %t15 = inttoptr i64 %t14 to i32*
  store i32 22, i32* %t15
  br label %block_0_41d7ec
block_0_41d7ec:
  ret void
block_0_41d7f1:
  %t16 = phi i64 [ %arg1, %block_0_41d7d0 ]
  %t17 = phi i64 [ %arg0, %block_0_41d7d0 ]
  ; r16 := (eq r15 (0x0 : bv 64))
  %t18 = icmp eq i64 %t17, 0
  br i1 %t18, label %block_0_41d7ec, label %block_0_41d7fb
block_0_41d7fb:
  %t19 = phi i64 [ %t16, %block_0_41d7f1 ]
  %t20 = phi i64 [ %t17, %block_0_41d7f1 ]
  ; r19 := (trunc r17 16)
  %t21 = trunc i64 %t19 to i16
  ; r20 := (bv_slt r19 (0x0 : bv 16))
  %t22 = icmp slt i16 %t21, 0
  br i1 %t22, label %block_0_41d800, label %block_0_41d812
block_0_41d800:
  %t23 = phi i64 [ %t19, %block_0_41d7fb ]
  %t24 = phi i64 [ %t20, %block_0_41d7fb ]
  ; r23 := (trunc r21 32)
  %t25 = trunc i64 %t23 to i32
  ; r24 := (trunc r21 8)
  %t26 = trunc i64 %t23 to i8
  ; r25 := (bv_add r22 (0x1 : bv 64))
  %t27 = add i64 %t24, 1
  ; write r25 r24
  %t28 = inttoptr i64 %t27 to i8*
  store i8 %t26, i8* %t28
  ; r26 := (bv_sar r23 (0x8 : bv 32))
  %t29 = ashr i32 %t25, 8
  ; r27 := (trunc r26 8)
  %t30 = trunc i32 %t29 to i8
  ; write r22 r27
  %t31 = inttoptr i64 %t24 to i8*
  store i8 %t30, i8* %t31
  br label %block_0_41d7ec
block_0_41d812:
  %t32 = phi i64 [ %t19, %block_0_41d7fb ]
  %t33 = phi i64 [ %t20, %block_0_41d7fb ]
  ; r30 := (trunc r28 8)
  %t34 = trunc i64 %t32 to i8
  ; write r29 r30
  %t35 = inttoptr i64 %t33 to i8*
  store i8 %t34, i8* %t35
  br label %block_0_41d7ec
}
define void @_GBK_mbrtowc(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_41d820:
  ; r0 := (read arg3 (bv 32))
  %t0 = inttoptr i64 %arg3 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (bv_and r0 (0xffffff00 : bv 32))
  %t3 = and i32 %t1, 4294967040
  ; r3 := (eq r2 (0x0 : bv 32))
  %t4 = icmp eq i32 %t3, 0
  ; r4 := (bitcast arg4 (bv 512))
  %t5 = bitcast <8 x double> %arg4 to i512
  ; r5 := (bitcast arg4 (bv 512))
  %t6 = bitcast <8 x double> %arg4 to i512
  br i1 %t4, label %block_0_41d847, label %block_0_41d830
block_0_41d830:
  %t7 = phi i64 [ %arg2, %block_0_41d820 ]
  %t8 = phi i64 [ %arg1, %block_0_41d820 ]
  %t9 = phi i64 [ %arg0, %block_0_41d820 ]
  %t10 = phi i512 [ %t6, %block_0_41d820 ]
  ; r10 := (bitcast r9 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r11 := call __error_unthreaded(r8, r7, r6, r10)
  %t12 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t9, i64 %t8, i64 %t7, <8 x double> %t11)
  ; r12 := (tuple_field r11 0)
  %t13 = extractvalue { i64, i64, <8 x double> } %t12, 0
  ; r13 := (tuple_field r11 1)
  %t14 = extractvalue { i64, i64, <8 x double> } %t12, 1
  ; r14 := (tuple_field r11 2)
  %t15 = extractvalue { i64, i64, <8 x double> } %t12, 2
  ; r15 := (bitcast r14 (bv 512))
  %t16 = bitcast <8 x double> %t15 to i512
  br label %block_0_41d835
block_0_41d835:
  %t17 = phi i64 [ %t13, %block_0_41d830 ]
  ; write r16 (0x16 : bv 32)
  %t18 = inttoptr i64 %t17 to i32*
  store i32 22, i32* %t18
  br label %block_0_41d842
block_0_41d842:
  ret void
block_0_41d847:
  %t19 = phi i64 [ %arg3, %block_0_41d820 ]
  %t20 = phi i64 [ %arg2, %block_0_41d820 ]
  %t21 = phi i64 [ %arg1, %block_0_41d820 ]
  %t22 = phi i64 [ %arg0, %block_0_41d820 ]
  %t23 = phi i64 [ %t2, %block_0_41d820 ]
  %t24 = phi i512 [ %t5, %block_0_41d820 ]
  ; r23 := (eq r19 (0x0 : bv 64))
  %t25 = icmp eq i64 %t21, 0
  br i1 %t25, label %block_0_41d8fe, label %block_0_41d850
block_0_41d850:
  %t26 = phi i64 [ %t19, %block_0_41d847 ]
  %t27 = phi i64 [ %t20, %block_0_41d847 ]
  %t28 = phi i64 [ %t21, %block_0_41d847 ]
  %t29 = phi i64 [ %t22, %block_0_41d847 ]
  %t30 = phi i64 [ %t23, %block_0_41d847 ]
  %t31 = phi i512 [ %t24, %block_0_41d847 ]
  ; r30 := (eq r25 (0x0 : bv 64))
  %t32 = icmp eq i64 %t27, 0
  br i1 %t32, label %block_0_41d842, label %block_0_41d85c
block_0_41d85c:
  %t33 = phi i64 [ %t26, %block_0_41d850 ], [ %t137, %block_0_41d8fe ]
  %t34 = phi i64 [ %t27, %block_0_41d850 ], [ 1, %block_0_41d8fe ]
  %t35 = phi i64 [ %t28, %block_0_41d850 ], [ 4363506, %block_0_41d8fe ]
  %t36 = phi i64 [ %t29, %block_0_41d850 ], [ 0, %block_0_41d8fe ]
  %t37 = phi i64 [ %t30, %block_0_41d850 ], [ %t138, %block_0_41d8fe ]
  %t38 = phi i512 [ %t31, %block_0_41d850 ], [ %t139, %block_0_41d8fe ]
  ; r37 := (trunc r35 32)
  %t39 = trunc i64 %t37 to i32
  ; r38 := (eq r37 (0x0 : bv 32))
  %t40 = icmp eq i32 %t39, 0
  br i1 %t40, label %block_0_41d862, label %block_0_41d884
block_0_41d862:
  %t41 = phi i64 [ %t33, %block_0_41d85c ]
  %t42 = phi i64 [ %t34, %block_0_41d85c ]
  %t43 = phi i64 [ %t35, %block_0_41d85c ]
  %t44 = phi i64 [ %t36, %block_0_41d85c ]
  %t45 = phi i512 [ %t38, %block_0_41d85c ]
  ; r44 := (read r41 (bv 8))
  %t46 = inttoptr i64 %t43 to i8*
  %t47 = load i8, i8* %t46
  ; r45 := (uext r44 64)
  %t48 = zext i8 %t47 to i64
  ; r46 := (bv_add r45 (0xffffffffffffff7f : bv 64))
  %t49 = add i64 %t48, 18446744073709551487
  ; r47 := (trunc r46 32)
  %t50 = trunc i64 %t49 to i32
  ; r48 := (eq r47 (0x7d : bv 32))
  %t51 = icmp eq i32 %t50, 125
  ; r49 := (bv_ule (0x7d : bv 32) r47)
  %t52 = icmp ule i32 125, %t50
  ; r50 := (not r48)
  %t53 = icmp eq i1 %t51, 0
  ; r51 := (and r49 r50)
  %t54 = and i1 %t52, %t53
  br i1 %t54, label %block_0_41d89f, label %block_0_41d872
block_0_41d872:
  %t55 = phi i64 [ %t41, %block_0_41d862 ]
  %t56 = phi i64 [ %t42, %block_0_41d862 ]
  %t57 = phi i64 [ %t43, %block_0_41d862 ]
  %t58 = phi i64 [ %t44, %block_0_41d862 ]
  %t59 = phi i64 [ %t48, %block_0_41d862 ]
  %t60 = phi i512 [ %t45, %block_0_41d862 ]
  ; r58 := (eq r53 (0x1 : bv 64))
  %t61 = icmp eq i64 %t56, 1
  ; r59 := (bv_ule (0x1 : bv 64) r53)
  %t62 = icmp ule i64 1, %t56
  ; r60 := (not r58)
  %t63 = icmp eq i1 %t61, 0
  ; r61 := (and r59 r60)
  %t64 = and i1 %t62, %t63
  br i1 %t64, label %block_0_41d8d2, label %block_0_41d878
block_0_41d878:
  %t65 = phi i64 [ %t55, %block_0_41d872 ]
  %t66 = phi i64 [ %t59, %block_0_41d872 ]
  ; r64 := (trunc r63 32)
  %t67 = trunc i64 %t66 to i32
  ; write r62 r64
  %t68 = inttoptr i64 %t65 to i32*
  store i32 %t67, i32* %t68
  br label %block_0_41d842
block_0_41d884:
  %t69 = phi i64 [ %t33, %block_0_41d85c ]
  %t70 = phi i64 [ %t34, %block_0_41d85c ]
  %t71 = phi i64 [ %t35, %block_0_41d85c ]
  %t72 = phi i64 [ %t36, %block_0_41d85c ]
  %t73 = phi i64 [ %t37, %block_0_41d85c ]
  %t74 = phi i512 [ %t38, %block_0_41d85c ]
  ; r71 := (read r67 (bv 8))
  %t75 = inttoptr i64 %t71 to i8*
  %t76 = load i8, i8* %t75
  ; r72 := (uext r71 64)
  %t77 = zext i8 %t76 to i64
  ; r73 := (eq r71 (0x0 : bv 8))
  %t78 = icmp eq i8 %t76, 0
  br i1 %t78, label %block_0_41d88b, label %block_0_41d8b1
block_0_41d88b:
  %t79 = phi i64 [ %t70, %block_0_41d884 ], [ %t122, %block_0_41d8d2 ]
  %t80 = phi i64 [ %t71, %block_0_41d884 ], [ %t115, %block_0_41d8d2 ]
  %t81 = phi i64 [ %t72, %block_0_41d884 ], [ %t116, %block_0_41d8d2 ]
  %t82 = phi i512 [ %t74, %block_0_41d884 ], [ %t118, %block_0_41d8d2 ]
  ; r78 := (bitcast r77 (vec 8 double))
  %t83 = bitcast i512 %t82 to <8 x double>
  ; r79 := call __error_unthreaded(r76, r75, r74, r78)
  %t84 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t81, i64 %t80, i64 %t79, <8 x double> %t83)
  ; r80 := (tuple_field r79 0)
  %t85 = extractvalue { i64, i64, <8 x double> } %t84, 0
  ; r81 := (tuple_field r79 1)
  %t86 = extractvalue { i64, i64, <8 x double> } %t84, 1
  ; r82 := (tuple_field r79 2)
  %t87 = extractvalue { i64, i64, <8 x double> } %t84, 2
  ; r83 := (bitcast r82 (bv 512))
  %t88 = bitcast <8 x double> %t87 to i512
  br label %block_0_41d890
block_0_41d890:
  %t89 = phi i64 [ %t85, %block_0_41d88b ]
  ; write r84 (0x56 : bv 32)
  %t90 = inttoptr i64 %t89 to i32*
  store i32 86, i32* %t90
  br label %block_0_41d842
block_0_41d89f:
  %t91 = phi i64 [ %t44, %block_0_41d862 ]
  %t92 = phi i64 [ %t48, %block_0_41d862 ]
  ; r87 := (eq r85 (0x0 : bv 64))
  %t93 = icmp eq i64 %t91, 0
  br i1 %t93, label %block_0_41d8a7, label %block_0_41d8a4
block_0_41d8a4:
  %t94 = phi i64 [ %t91, %block_0_41d89f ]
  %t95 = phi i64 [ %t92, %block_0_41d89f ]
  ; r90 := (trunc r89 32)
  %t96 = trunc i64 %t95 to i32
  ; write r88 r90
  %t97 = inttoptr i64 %t94 to i32*
  store i32 %t96, i32* %t97
  br label %block_0_41d8a7
block_0_41d8a7:
  br label %block_0_41d842
block_0_41d8b1:
  %t98 = phi i64 [ %t77, %block_0_41d884 ]
  %t99 = phi i64 [ %t69, %block_0_41d884 ]
  %t100 = phi i64 [ %t72, %block_0_41d884 ]
  %t101 = phi i64 [ %t73, %block_0_41d884 ]
  ; r95 := (eq r93 (0x0 : bv 64))
  %t102 = icmp eq i64 %t100, 0
  br i1 %t102, label %block_0_41d8c2, label %block_0_41d8b6
block_0_41d8b6:
  %t103 = phi i64 [ %t98, %block_0_41d8b1 ]
  %t104 = phi i64 [ %t99, %block_0_41d8b1 ]
  %t105 = phi i64 [ %t100, %block_0_41d8b1 ]
  %t106 = phi i64 [ %t101, %block_0_41d8b1 ]
  ; r100 := (trunc r96 8)
  %t107 = trunc i64 %t103 to i8
  ; r101 := (uext r100 32)
  %t108 = zext i8 %t107 to i32
  ; r102 := (trunc r99 32)
  %t109 = trunc i64 %t106 to i32
  ; r103 := (bv_shl r102 (0x8 : bv 32))
  %t110 = shl i32 %t109, 8
  ; r104 := (bv_or r101 r103)
  %t111 = or i32 %t108, %t110
  ; write r98 r104
  %t112 = inttoptr i64 %t105 to i32*
  store i32 %t111, i32* %t112
  br label %block_0_41d8c2
block_0_41d8c2:
  %t113 = phi i64 [ %t99, %block_0_41d8b1 ], [ %t104, %block_0_41d8b6 ]
  ; write r105 (0x0 : bv 32)
  %t114 = inttoptr i64 %t113 to i32*
  store i32 0, i32* %t114
  br label %block_0_41d842
block_0_41d8d2:
  %t115 = phi i64 [ %t57, %block_0_41d872 ]
  %t116 = phi i64 [ %t58, %block_0_41d872 ]
  %t117 = phi i64 [ %t59, %block_0_41d872 ]
  %t118 = phi i512 [ %t60, %block_0_41d872 ]
  ; r110 := (bv_add r106 (0x1 : bv 64))
  %t119 = add i64 %t115, 1
  ; r111 := (read r110 (bv 8))
  %t120 = inttoptr i64 %t119 to i8*
  %t121 = load i8, i8* %t120
  ; r112 := (uext r111 64)
  %t122 = zext i8 %t121 to i64
  ; r113 := (eq r111 (0x0 : bv 8))
  %t123 = icmp eq i8 %t121, 0
  br i1 %t123, label %block_0_41d88b, label %block_0_41d8da
block_0_41d8da:
  %t124 = phi i64 [ %t122, %block_0_41d8d2 ]
  %t125 = phi i64 [ %t116, %block_0_41d8d2 ]
  %t126 = phi i64 [ %t117, %block_0_41d8d2 ]
  ; r117 := (eq r115 (0x0 : bv 64))
  %t127 = icmp eq i64 %t125, 0
  br i1 %t127, label %block_0_41d842, label %block_0_41d8e8
block_0_41d8e8:
  %t128 = phi i64 [ %t124, %block_0_41d8da ]
  %t129 = phi i64 [ %t125, %block_0_41d8da ]
  %t130 = phi i64 [ %t126, %block_0_41d8da ]
  ; r121 := (trunc r118 8)
  %t131 = trunc i64 %t128 to i8
  ; r122 := (uext r121 32)
  %t132 = zext i8 %t131 to i32
  ; r123 := (trunc r120 32)
  %t133 = trunc i64 %t130 to i32
  ; r124 := (bv_shl r123 (0x8 : bv 32))
  %t134 = shl i32 %t133, 8
  ; r125 := (bv_or r122 r124)
  %t135 = or i32 %t132, %t134
  ; write r119 r125
  %t136 = inttoptr i64 %t129 to i32*
  store i32 %t135, i32* %t136
  br label %block_0_41d842
block_0_41d8fe:
  %t137 = phi i64 [ %t19, %block_0_41d847 ]
  %t138 = phi i64 [ %t23, %block_0_41d847 ]
  %t139 = phi i512 [ %t24, %block_0_41d847 ]
  br label %block_0_41d85c
}
define void @_GB2312_init(i64 %arg0) {
block_0_41d910:
  ; write (0x631260 : bv 64) arg0
  %t0 = inttoptr i64 6492768 to i64*
  store i64 %arg0, i64* %t0
  ; write (0x6301b0 : bv 64) (0x41d9c0 : bv 64)
  %t1 = inttoptr i64 6488496 to i64*
  store i64 4315584, i64* %t1
  ; write (0x6301c8 : bv 64) (0x41d970 : bv 64)
  %t2 = inttoptr i64 6488520 to i64*
  store i64 4315504, i64* %t2
  ; write (0x6301b8 : bv 64) (0x41d950 : bv 64)
  %t3 = inttoptr i64 6488504 to i64*
  store i64 4315472, i64* %t3
  ; write (0x6301a8 : bv 64) (0x2 : bv 32)
  %t4 = inttoptr i64 6488488 to i32*
  store i32 2, i32* %t4
  ; write (0x6301ac : bv 64) (0x80 : bv 32)
  %t5 = inttoptr i64 6488492 to i32*
  store i32 128, i32* %t5
  ret void
}
define void @_GB2312_mbsinit(i64 %arg0) {
block_0_41d950:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  br i1 %t0, label %block_0_41d962, label %block_0_41d95a
block_0_41d95a:
  %t1 = phi i64 [ %arg0, %block_0_41d950 ]
  ; r2 := (read r1 (bv 32))
  %t2 = inttoptr i64 %t1 to i32*
  %t3 = load i32, i32* %t2
  br label %block_0_41d962
block_0_41d962:
  ret void
}
define void @_GB2312_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41d970:
  ; r0 := (read arg2 (bv 32))
  %t0 = inttoptr i64 %arg2 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  br i1 %t2, label %block_0_41d991, label %block_0_41d97a
block_0_41d97a:
  %t4 = phi i64 [ %arg2, %block_0_41d970 ]
  %t5 = phi i64 [ %arg1, %block_0_41d970 ]
  %t6 = phi i64 [ %arg0, %block_0_41d970 ]
  %t7 = phi i512 [ %t3, %block_0_41d970 ]
  ; r7 := (bitcast r6 (vec 8 double))
  %t8 = bitcast i512 %t7 to <8 x double>
  ; r8 := call __error_unthreaded(r5, r4, r3, r7)
  %t9 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t6, i64 %t5, i64 %t4, <8 x double> %t8)
  ; r9 := (tuple_field r8 0)
  %t10 = extractvalue { i64, i64, <8 x double> } %t9, 0
  ; r10 := (tuple_field r8 1)
  %t11 = extractvalue { i64, i64, <8 x double> } %t9, 1
  ; r11 := (tuple_field r8 2)
  %t12 = extractvalue { i64, i64, <8 x double> } %t9, 2
  ; r12 := (bitcast r11 (bv 512))
  %t13 = bitcast <8 x double> %t12 to i512
  br label %block_0_41d97f
block_0_41d97f:
  %t14 = phi i64 [ %t10, %block_0_41d97a ]
  ; write r13 (0x16 : bv 32)
  %t15 = inttoptr i64 %t14 to i32*
  store i32 22, i32* %t15
  br label %block_0_41d98c
block_0_41d98c:
  ret void
block_0_41d991:
  %t16 = phi i64 [ %arg1, %block_0_41d970 ]
  %t17 = phi i64 [ %arg0, %block_0_41d970 ]
  ; r16 := (eq r15 (0x0 : bv 64))
  %t18 = icmp eq i64 %t17, 0
  br i1 %t18, label %block_0_41d98c, label %block_0_41d99b
block_0_41d99b:
  %t19 = phi i64 [ %t16, %block_0_41d991 ]
  %t20 = phi i64 [ %t17, %block_0_41d991 ]
  ; r19 := (trunc r17 16)
  %t21 = trunc i64 %t19 to i16
  ; r20 := (bv_slt r19 (0x0 : bv 16))
  %t22 = icmp slt i16 %t21, 0
  br i1 %t22, label %block_0_41d9a0, label %block_0_41d9b2
block_0_41d9a0:
  %t23 = phi i64 [ %t19, %block_0_41d99b ]
  %t24 = phi i64 [ %t20, %block_0_41d99b ]
  ; r23 := (trunc r21 32)
  %t25 = trunc i64 %t23 to i32
  ; r24 := (trunc r21 8)
  %t26 = trunc i64 %t23 to i8
  ; r25 := (bv_add r22 (0x1 : bv 64))
  %t27 = add i64 %t24, 1
  ; write r25 r24
  %t28 = inttoptr i64 %t27 to i8*
  store i8 %t26, i8* %t28
  ; r26 := (bv_sar r23 (0x8 : bv 32))
  %t29 = ashr i32 %t25, 8
  ; r27 := (trunc r26 8)
  %t30 = trunc i32 %t29 to i8
  ; write r22 r27
  %t31 = inttoptr i64 %t24 to i8*
  store i8 %t30, i8* %t31
  br label %block_0_41d98c
block_0_41d9b2:
  %t32 = phi i64 [ %t19, %block_0_41d99b ]
  %t33 = phi i64 [ %t20, %block_0_41d99b ]
  ; r30 := (trunc r28 8)
  %t34 = trunc i64 %t32 to i8
  ; write r29 r30
  %t35 = inttoptr i64 %t33 to i8*
  store i8 %t34, i8* %t35
  br label %block_0_41d98c
}
define void @_GB18030_init(i64 %arg0) {
block_0_41db10:
  ; write (0x6301b0 : bv 64) (0x41dc90 : bv 64)
  %t0 = inttoptr i64 6488496 to i64*
  store i64 4316304, i64* %t0
  ; write (0x6301c8 : bv 64) (0x41db70 : bv 64)
  %t1 = inttoptr i64 6488520 to i64*
  store i64 4316016, i64* %t1
  ; write (0x6301b8 : bv 64) (0x41db50 : bv 64)
  %t2 = inttoptr i64 6488504 to i64*
  store i64 4315984, i64* %t2
  ; write (0x631260 : bv 64) arg0
  %t3 = inttoptr i64 6492768 to i64*
  store i64 %arg0, i64* %t3
  ; write (0x6301a8 : bv 64) (0x4 : bv 32)
  %t4 = inttoptr i64 6488488 to i32*
  store i32 4, i32* %t4
  ; write (0x6301ac : bv 64) (0x80 : bv 32)
  %t5 = inttoptr i64 6488492 to i32*
  store i32 128, i32* %t5
  ret void
}
define void @_GB18030_mbsinit(i64 %arg0) {
block_0_41db50:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  br i1 %t0, label %block_0_41db62, label %block_0_41db5a
block_0_41db5a:
  %t1 = phi i64 [ %arg0, %block_0_41db50 ]
  ; r2 := (read r1 (bv 32))
  %t2 = inttoptr i64 %t1 to i32*
  %t3 = load i32, i32* %t2
  br label %block_0_41db62
block_0_41db62:
  ret void
}
define void @_GB18030_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41db70:
  ; r0 := (read arg2 (bv 32))
  %t0 = inttoptr i64 %arg2 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  br i1 %t2, label %block_0_41db91, label %block_0_41db7a
block_0_41db7a:
  %t5 = phi i64 [ %arg2, %block_0_41db70 ]
  %t6 = phi i64 [ %arg1, %block_0_41db70 ]
  %t7 = phi i64 [ %arg0, %block_0_41db70 ]
  %t8 = phi i512 [ %t4, %block_0_41db70 ]
  ; r8 := (bitcast r7 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r9 := call __error_unthreaded(r6, r5, r4, r8)
  %t10 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t7, i64 %t6, i64 %t5, <8 x double> %t9)
  ; r10 := (tuple_field r9 0)
  %t11 = extractvalue { i64, i64, <8 x double> } %t10, 0
  ; r11 := (tuple_field r9 1)
  %t12 = extractvalue { i64, i64, <8 x double> } %t10, 1
  ; r12 := (tuple_field r9 2)
  %t13 = extractvalue { i64, i64, <8 x double> } %t10, 2
  ; r13 := (bitcast r12 (bv 512))
  %t14 = bitcast <8 x double> %t13 to i512
  br label %block_0_41db7f
block_0_41db7f:
  %t15 = phi i64 [ %t11, %block_0_41db7a ]
  ; write r14 (0x16 : bv 32)
  %t16 = inttoptr i64 %t15 to i32*
  store i32 22, i32* %t16
  br label %block_0_41db8c
block_0_41db8c:
  ret void
block_0_41db91:
  %t17 = phi i64 [ %arg2, %block_0_41db70 ]
  %t18 = phi i64 [ %arg1, %block_0_41db70 ]
  %t19 = phi i64 [ %arg0, %block_0_41db70 ]
  %t20 = phi i512 [ %t3, %block_0_41db70 ]
  ; r19 := (eq r17 (0x0 : bv 64))
  %t21 = icmp eq i64 %t19, 0
  br i1 %t21, label %block_0_41db8c, label %block_0_41db9b
block_0_41db9b:
  %t22 = phi i64 [ %t17, %block_0_41db91 ]
  %t23 = phi i64 [ %t18, %block_0_41db91 ]
  %t24 = phi i64 [ %t19, %block_0_41db91 ]
  %t25 = phi i512 [ %t20, %block_0_41db91 ]
  ; r24 := (trunc r21 32)
  %t26 = trunc i64 %t23 to i32
  ; r25 := (bv_slt r24 (0x0 : bv 32))
  %t27 = icmp slt i32 %t26, 0
  br i1 %t27, label %block_0_41db9f, label %block_0_41dbb4
block_0_41db9f:
  %t28 = phi i64 [ %t22, %block_0_41db9b ], [ %t54, %block_0_41dbbc ], [ %t71, %block_0_41dbd4 ], [ %t88, %block_0_41dbe6 ], [ %t103, %block_0_41dbf7 ], [ %t115, %block_0_41dc16 ], [ %t134, %block_0_41dc25 ], [ %t141, %block_0_41dc3a ], [ %t158, %block_0_41dc49 ], [ %t165, %block_0_41dc52 ], [ %t176, %block_0_41dc6a ]
  %t29 = phi i64 [ %t23, %block_0_41db9b ], [ %t47, %block_0_41dbbc ], [ %t63, %block_0_41dbd4 ], [ %t80, %block_0_41dbe6 ], [ %t100, %block_0_41dbf7 ], [ %t116, %block_0_41dc16 ], [ %t129, %block_0_41dc25 ], [ %t142, %block_0_41dc3a ], [ %t159, %block_0_41dc49 ], [ %t166, %block_0_41dc52 ], [ %t177, %block_0_41dc6a ]
  %t30 = phi i64 [ %t24, %block_0_41db9b ], [ %t48, %block_0_41dbbc ], [ %t64, %block_0_41dbd4 ], [ %t81, %block_0_41dbe6 ], [ %t97, %block_0_41dbf7 ], [ %t117, %block_0_41dc16 ], [ %t130, %block_0_41dc25 ], [ %t143, %block_0_41dc3a ], [ %t160, %block_0_41dc49 ], [ %t167, %block_0_41dc52 ], [ %t178, %block_0_41dc6a ]
  %t31 = phi i512 [ %t25, %block_0_41db9b ], [ %t49, %block_0_41dbbc ], [ %t65, %block_0_41dbd4 ], [ %t82, %block_0_41dbe6 ], [ %t98, %block_0_41dbf7 ], [ %t118, %block_0_41dc16 ], [ %t131, %block_0_41dc25 ], [ %t144, %block_0_41dc3a ], [ %t161, %block_0_41dc49 ], [ %t168, %block_0_41dc52 ], [ %t179, %block_0_41dc6a ]
  ; r30 := (bitcast r29 (vec 8 double))
  %t32 = bitcast i512 %t31 to <8 x double>
  ; r31 := call __error_unthreaded(r28, r27, r26, r30)
  %t33 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t30, i64 %t29, i64 %t28, <8 x double> %t32)
  ; r32 := (tuple_field r31 0)
  %t34 = extractvalue { i64, i64, <8 x double> } %t33, 0
  ; r33 := (tuple_field r31 1)
  %t35 = extractvalue { i64, i64, <8 x double> } %t33, 1
  ; r34 := (tuple_field r31 2)
  %t36 = extractvalue { i64, i64, <8 x double> } %t33, 2
  ; r35 := (bitcast r34 (bv 512))
  %t37 = bitcast <8 x double> %t36 to i512
  br label %block_0_41dba5
block_0_41dba5:
  %t38 = phi i64 [ %t34, %block_0_41db9f ]
  ; write r36 (0x56 : bv 32)
  %t39 = inttoptr i64 %t38 to i32*
  store i32 86, i32* %t39
  br label %block_0_41db8c
block_0_41dbb4:
  %t40 = phi i64 [ %t22, %block_0_41db9b ]
  %t41 = phi i64 [ %t23, %block_0_41db9b ]
  %t42 = phi i64 [ %t24, %block_0_41db9b ]
  %t43 = phi i512 [ %t25, %block_0_41db9b ]
  ; r41 := (trunc r38 32)
  %t44 = trunc i64 %t41 to i32
  ; r42 := (bv_and r41 (0x7f000000 : bv 32))
  %t45 = and i32 %t44, 2130706432
  ; r43 := (eq r42 (0x0 : bv 32))
  %t46 = icmp eq i32 %t45, 0
  br i1 %t46, label %block_0_41dc16, label %block_0_41dbbc
block_0_41dbbc:
  %t47 = phi i64 [ %t41, %block_0_41dbb4 ]
  %t48 = phi i64 [ %t42, %block_0_41dbb4 ]
  %t49 = phi i512 [ %t43, %block_0_41dbb4 ]
  ; r47 := (trunc r44 32)
  %t50 = trunc i64 %t47 to i32
  ; r48 := (bv_or r47 (0x80000000 : bv 32))
  %t51 = or i32 %t50, 2147483648
  ; r49 := (uext r48 64)
  %t52 = zext i32 %t51 to i64
  ; r50 := (bv_shr r48 (0x18 : bv 32))
  %t53 = lshr i32 %t51, 24
  ; r51 := (uext r50 64)
  %t54 = zext i32 %t53 to i64
  ; r52 := (bv_add r51 (0xffffffffffffff7f : bv 64))
  %t55 = add i64 %t54, 18446744073709551487
  ; r53 := (trunc r52 32)
  %t56 = trunc i64 %t55 to i32
  ; r54 := (eq r53 (0x7d : bv 32))
  %t57 = icmp eq i32 %t56, 125
  ; r55 := (bv_ule (0x7d : bv 32) r53)
  %t58 = icmp ule i32 125, %t56
  ; r56 := (not r54)
  %t59 = icmp eq i1 %t57, 0
  ; r57 := (and r55 r56)
  %t60 = and i1 %t58, %t59
  br i1 %t60, label %block_0_41db9f, label %block_0_41dbd4
block_0_41dbd4:
  %t61 = phi i64 [ %t52, %block_0_41dbbc ]
  %t62 = phi i64 [ %t54, %block_0_41dbbc ]
  %t63 = phi i64 [ %t47, %block_0_41dbbc ]
  %t64 = phi i64 [ %t48, %block_0_41dbbc ]
  %t65 = phi i512 [ %t49, %block_0_41dbbc ]
  ; r63 := (trunc r58 32)
  %t66 = trunc i64 %t61 to i32
  ; r64 := (trunc r59 8)
  %t67 = trunc i64 %t62 to i8
  ; write r61 r64
  %t68 = inttoptr i64 %t64 to i8*
  store i8 %t67, i8* %t68
  ; r65 := (bv_sar r63 (0x10 : bv 32))
  %t69 = ashr i32 %t66, 16
  ; r66 := (trunc r65 8)
  %t70 = trunc i32 %t69 to i8
  ; r67 := (uext r66 64)
  %t71 = zext i8 %t70 to i64
  ; r68 := (bv_add r67 (0xffffffffffffffd0 : bv 64))
  %t72 = add i64 %t71, 18446744073709551568
  ; r69 := (trunc r68 32)
  %t73 = trunc i64 %t72 to i32
  ; r70 := (eq r69 (0x9 : bv 32))
  %t74 = icmp eq i32 %t73, 9
  ; r71 := (bv_ule (0x9 : bv 32) r69)
  %t75 = icmp ule i32 9, %t73
  ; r72 := (not r70)
  %t76 = icmp eq i1 %t74, 0
  ; r73 := (and r71 r72)
  %t77 = and i1 %t75, %t76
  br i1 %t77, label %block_0_41db9f, label %block_0_41dbe6
block_0_41dbe6:
  %t78 = phi i64 [ %t61, %block_0_41dbd4 ]
  %t79 = phi i64 [ %t71, %block_0_41dbd4 ]
  %t80 = phi i64 [ %t63, %block_0_41dbd4 ]
  %t81 = phi i64 [ %t64, %block_0_41dbd4 ]
  %t82 = phi i512 [ %t65, %block_0_41dbd4 ]
  ; r79 := (trunc r75 8)
  %t83 = trunc i64 %t79 to i8
  ; r80 := (bv_add r77 (0x1 : bv 64))
  %t84 = add i64 %t81, 1
  ; write r80 r79
  %t85 = inttoptr i64 %t84 to i8*
  store i8 %t83, i8* %t85
  ; r81 := (bv_shr r74 (0x8 : bv 64))
  %t86 = lshr i64 %t78, 8
  ; r82 := (trunc r81 8)
  %t87 = trunc i64 %t86 to i8
  ; r83 := (uext r82 64)
  %t88 = zext i8 %t87 to i64
  ; r84 := (bv_add r83 (0xffffffffffffff7f : bv 64))
  %t89 = add i64 %t88, 18446744073709551487
  ; r85 := (trunc r84 32)
  %t90 = trunc i64 %t89 to i32
  ; r86 := (eq r85 (0x7d : bv 32))
  %t91 = icmp eq i32 %t90, 125
  ; r87 := (bv_ule (0x7d : bv 32) r85)
  %t92 = icmp ule i32 125, %t90
  ; r88 := (not r86)
  %t93 = icmp eq i1 %t91, 0
  ; r89 := (and r87 r88)
  %t94 = and i1 %t92, %t93
  br i1 %t94, label %block_0_41db9f, label %block_0_41dbf7
block_0_41dbf7:
  %t95 = phi i64 [ %t78, %block_0_41dbe6 ]
  %t96 = phi i64 [ %t88, %block_0_41dbe6 ]
  %t97 = phi i64 [ %t81, %block_0_41dbe6 ]
  %t98 = phi i512 [ %t82, %block_0_41dbe6 ]
  ; r94 := (trunc r91 8)
  %t99 = trunc i64 %t96 to i8
  ; r95 := (bv_add r92 (0x2 : bv 64))
  %t100 = add i64 %t97, 2
  ; write r95 r94
  %t101 = inttoptr i64 %t100 to i8*
  store i8 %t99, i8* %t101
  ; r96 := (trunc r90 8)
  %t102 = trunc i64 %t95 to i8
  ; r97 := (uext r96 64)
  %t103 = zext i8 %t102 to i64
  ; r98 := (bv_add r97 (0xffffffffffffffd0 : bv 64))
  %t104 = add i64 %t103, 18446744073709551568
  ; r99 := (trunc r98 32)
  %t105 = trunc i64 %t104 to i32
  ; r100 := (eq r99 (0x9 : bv 32))
  %t106 = icmp eq i32 %t105, 9
  ; r101 := (bv_ule (0x9 : bv 32) r99)
  %t107 = icmp ule i32 9, %t105
  ; r102 := (not r100)
  %t108 = icmp eq i1 %t106, 0
  ; r103 := (and r101 r102)
  %t109 = and i1 %t107, %t108
  br i1 %t109, label %block_0_41db9f, label %block_0_41dc09
block_0_41dc09:
  %t110 = phi i64 [ %t103, %block_0_41dbf7 ]
  %t111 = phi i64 [ %t100, %block_0_41dbf7 ]
  ; r106 := (trunc r104 8)
  %t112 = trunc i64 %t110 to i8
  ; r107 := (bv_add r105 (0x1 : bv 64))
  %t113 = add i64 %t111, 1
  ; write r107 r106
  %t114 = inttoptr i64 %t113 to i8*
  store i8 %t112, i8* %t114
  br label %block_0_41db8c
block_0_41dc16:
  %t115 = phi i64 [ %t40, %block_0_41dbb4 ]
  %t116 = phi i64 [ %t41, %block_0_41dbb4 ]
  %t117 = phi i64 [ %t42, %block_0_41dbb4 ]
  %t118 = phi i512 [ %t43, %block_0_41dbb4 ]
  ; r112 := (trunc r109 32)
  %t119 = trunc i64 %t116 to i32
  ; r113 := (bv_and r112 (0xff0000 : bv 32))
  %t120 = and i32 %t119, 16711680
  ; r114 := (eq r113 (0x0 : bv 32))
  %t121 = icmp eq i32 %t120, 0
  br i1 %t121, label %block_0_41dc1e, label %block_0_41db9f
block_0_41dc1e:
  %t122 = phi i64 [ %t115, %block_0_41dc16 ]
  %t123 = phi i64 [ %t116, %block_0_41dc16 ]
  %t124 = phi i64 [ %t117, %block_0_41dc16 ]
  %t125 = phi i512 [ %t118, %block_0_41dc16 ]
  ; r119 := (trunc r116 16)
  %t126 = trunc i64 %t123 to i16
  ; r120 := (bv_and r119 (0xff00 : bv 16))
  %t127 = and i16 %t126, 65280
  ; r121 := (eq r120 (0x0 : bv 16))
  %t128 = icmp eq i16 %t127, 0
  br i1 %t128, label %block_0_41dc6a, label %block_0_41dc25
block_0_41dc25:
  %t129 = phi i64 [ %t123, %block_0_41dc1e ]
  %t130 = phi i64 [ %t124, %block_0_41dc1e ]
  %t131 = phi i512 [ %t125, %block_0_41dc1e ]
  ; r125 := (bv_shr r122 (0x8 : bv 64))
  %t132 = lshr i64 %t129, 8
  ; r126 := (trunc r125 8)
  %t133 = trunc i64 %t132 to i8
  ; r127 := (uext r126 64)
  %t134 = zext i8 %t133 to i64
  ; r128 := (bv_add r127 (0xffffffffffffff7f : bv 64))
  %t135 = add i64 %t134, 18446744073709551487
  ; r129 := (trunc r128 32)
  %t136 = trunc i64 %t135 to i32
  ; r130 := (eq r129 (0x7d : bv 32))
  %t137 = icmp eq i32 %t136, 125
  ; r131 := (bv_ule (0x7d : bv 32) r129)
  %t138 = icmp ule i32 125, %t136
  ; r132 := (not r130)
  %t139 = icmp eq i1 %t137, 0
  ; r133 := (and r131 r132)
  %t140 = and i1 %t138, %t139
  br i1 %t140, label %block_0_41db9f, label %block_0_41dc3a
block_0_41dc3a:
  %t141 = phi i64 [ %t134, %block_0_41dc25 ]
  %t142 = phi i64 [ %t129, %block_0_41dc25 ]
  %t143 = phi i64 [ %t130, %block_0_41dc25 ]
  %t144 = phi i512 [ %t131, %block_0_41dc25 ]
  ; r138 := (trunc r135 8)
  %t145 = trunc i64 %t142 to i8
  ; r139 := (uext r138 32)
  %t146 = zext i8 %t145 to i32
  ; r140 := (uext r138 64)
  %t147 = zext i8 %t145 to i64
  ; r141 := (trunc r134 8)
  %t148 = trunc i64 %t141 to i8
  ; write r136 r141
  %t149 = inttoptr i64 %t143 to i8*
  store i8 %t148, i8* %t149
  ; r142 := (ssbb_overflows r139 (0x3f : bv 32) false)
  %t150 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t146, i32 63)
  %t151 = extractvalue { i32, i1 } %t150, 1
  ; r143 := (bv_add r139 (0xffffffc1 : bv 32))
  %t152 = add i32 %t146, 4294967233
  ; r144 := (bv_slt r143 (0x0 : bv 32))
  %t153 = icmp slt i32 %t152, 0
  ; r145 := (eq r138 (0x3f : bv 8))
  %t154 = icmp eq i8 %t145, 63
  ; r146 := (xor r144 r142)
  %t155 = xor i1 %t153, %t151
  ; r147 := (or r145 r146)
  %t156 = or i1 %t154, %t155
  br i1 %t156, label %block_0_41db9f, label %block_0_41dc49
block_0_41dc49:
  %t157 = phi i64 [ %t147, %block_0_41dc3a ]
  %t158 = phi i64 [ %t141, %block_0_41dc3a ]
  %t159 = phi i64 [ %t142, %block_0_41dc3a ]
  %t160 = phi i64 [ %t143, %block_0_41dc3a ]
  %t161 = phi i512 [ %t144, %block_0_41dc3a ]
  ; r153 := (trunc r148 32)
  %t162 = trunc i64 %t157 to i32
  ; r154 := (eq r153 (0x7f : bv 32))
  %t163 = icmp eq i32 %t162, 127
  br i1 %t163, label %block_0_41db9f, label %block_0_41dc52
block_0_41dc52:
  %t164 = phi i64 [ %t157, %block_0_41dc49 ]
  %t165 = phi i64 [ %t158, %block_0_41dc49 ]
  %t166 = phi i64 [ %t159, %block_0_41dc49 ]
  %t167 = phi i64 [ %t160, %block_0_41dc49 ]
  %t168 = phi i512 [ %t161, %block_0_41dc49 ]
  ; r160 := (trunc r155 32)
  %t169 = trunc i64 %t164 to i32
  ; r161 := (eq r160 (0xff : bv 32))
  %t170 = icmp eq i32 %t169, 255
  br i1 %t170, label %block_0_41db9f, label %block_0_41dc5d
block_0_41dc5d:
  %t171 = phi i64 [ %t164, %block_0_41dc52 ]
  %t172 = phi i64 [ %t167, %block_0_41dc52 ]
  ; r164 := (trunc r162 8)
  %t173 = trunc i64 %t171 to i8
  ; r165 := (bv_add r163 (0x1 : bv 64))
  %t174 = add i64 %t172, 1
  ; write r165 r164
  %t175 = inttoptr i64 %t174 to i8*
  store i8 %t173, i8* %t175
  br label %block_0_41db8c
block_0_41dc6a:
  %t176 = phi i64 [ %t122, %block_0_41dc1e ]
  %t177 = phi i64 [ %t123, %block_0_41dc1e ]
  %t178 = phi i64 [ %t124, %block_0_41dc1e ]
  %t179 = phi i512 [ %t125, %block_0_41dc1e ]
  ; r170 := (trunc r167 32)
  %t180 = trunc i64 %t177 to i32
  ; r171 := (ssbb_overflows r170 (0x7f : bv 32) false)
  %t181 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t180, i32 127)
  %t182 = extractvalue { i32, i1 } %t181, 1
  ; r172 := (bv_add r170 (0xffffff81 : bv 32))
  %t183 = add i32 %t180, 4294967169
  ; r173 := (bv_slt r172 (0x0 : bv 32))
  %t184 = icmp slt i32 %t183, 0
  ; r174 := (eq r170 (0x7f : bv 32))
  %t185 = icmp eq i32 %t180, 127
  ; r175 := (not r174)
  %t186 = icmp eq i1 %t185, 0
  ; r176 := (eq r173 r171)
  %t187 = icmp eq i1 %t184, %t182
  ; r177 := (and r175 r176)
  %t188 = and i1 %t186, %t187
  br i1 %t188, label %block_0_41db9f, label %block_0_41dc76
block_0_41dc76:
  %t189 = phi i64 [ %t177, %block_0_41dc6a ]
  %t190 = phi i64 [ %t178, %block_0_41dc6a ]
  ; r180 := (trunc r178 8)
  %t191 = trunc i64 %t189 to i8
  ; write r179 r180
  %t192 = inttoptr i64 %t190 to i8*
  store i8 %t191, i8* %t192
  br label %block_0_41db8c
}
define void @_EUC_mbsinit(i64 %arg0) {
block_0_41de30:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  br i1 %t0, label %block_0_41de43, label %block_0_41de3a
block_0_41de3a:
  %t1 = phi i64 [ %arg0, %block_0_41de30 ]
  ; r2 := (bv_add r1 (0x8 : bv 64))
  %t2 = add i64 %t1, 8
  ; r3 := (read r2 (bv 32))
  %t3 = inttoptr i64 %t2 to i32*
  %t4 = load i32, i32* %t3
  br label %block_0_41de43
block_0_41de43:
  ret void
}
define void @_EUC_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41de50:
  ; r0 := (bv_add arg2 (0x8 : bv 64))
  %t0 = add i64 %arg2, 8
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (eq r1 (0x0 : bv 32))
  %t3 = icmp eq i32 %t2, 0
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  br i1 %t3, label %block_0_41de72, label %block_0_41de5b
block_0_41de5b:
  %t5 = phi i64 [ %arg2, %block_0_41de50 ]
  %t6 = phi i64 [ %arg1, %block_0_41de50 ]
  %t7 = phi i64 [ %arg0, %block_0_41de50 ]
  %t8 = phi i512 [ %t4, %block_0_41de50 ]
  ; r8 := (bitcast r7 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r9 := call __error_unthreaded(r6, r5, r4, r8)
  %t10 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t7, i64 %t6, i64 %t5, <8 x double> %t9)
  ; r10 := (tuple_field r9 0)
  %t11 = extractvalue { i64, i64, <8 x double> } %t10, 0
  ; r11 := (tuple_field r9 1)
  %t12 = extractvalue { i64, i64, <8 x double> } %t10, 1
  ; r12 := (tuple_field r9 2)
  %t13 = extractvalue { i64, i64, <8 x double> } %t10, 2
  ; r13 := (bitcast r12 (bv 512))
  %t14 = bitcast <8 x double> %t13 to i512
  br label %block_0_41de60
block_0_41de60:
  %t15 = phi i64 [ %t11, %block_0_41de5b ]
  ; write r14 (0x16 : bv 32)
  %t16 = inttoptr i64 %t15 to i32*
  store i32 22, i32* %t16
  br label %block_0_41de6d
block_0_41de6d:
  ret void
block_0_41de72:
  %t17 = phi i64 [ %arg1, %block_0_41de50 ]
  %t18 = phi i64 [ %arg0, %block_0_41de50 ]
  ; r17 := (eq r16 (0x0 : bv 64))
  %t19 = icmp eq i64 %t18, 0
  br i1 %t19, label %block_0_41de6d, label %block_0_41de7c
block_0_41de7c:
  %t20 = phi i64 [ %t17, %block_0_41de72 ]
  %t21 = phi i64 [ %t18, %block_0_41de72 ]
  ; r20 := (read (0x631260 : bv 64) (bv 64))
  %t22 = inttoptr i64 6492768 to i64*
  %t23 = load i64, i64* %t22
  ; r21 := (trunc r18 32)
  %t24 = trunc i64 %t20 to i32
  ; r22 := (bv_add r20 (0x1070 : bv 64))
  %t25 = add i64 %t23, 4208
  ; r23 := (read r22 (bv 64))
  %t26 = inttoptr i64 %t25 to i64*
  %t27 = load i64, i64* %t26
  ; r24 := (bv_add r23 (0x20 : bv 64))
  %t28 = add i64 %t27, 32
  ; r25 := (read r24 (bv 32))
  %t29 = inttoptr i64 %t28 to i32*
  %t30 = load i32, i32* %t29
  ; r26 := (bv_and r21 r25)
  %t31 = and i32 %t24, %t30
  ; r27 := (uext r26 64)
  %t32 = zext i32 %t31 to i64
  ; r28 := (bv_complement r26)
  %t33 = xor i32 %t31, -1
  ; r29 := (bv_and r28 r21)
  %t34 = and i32 %t33, %t24
  ; r30 := (uext r29 64)
  %t35 = zext i32 %t34 to i64
  ; r31 := (bv_add r23 (0x14 : bv 64))
  %t36 = add i64 %t27, 20
  ; r32 := (read r31 (bv 32))
  %t37 = inttoptr i64 %t36 to i32*
  %t38 = load i32, i32* %t37
  ; r33 := (eq r32 r26)
  %t39 = icmp eq i32 %t38, %t31
  br i1 %t39, label %block_0_41deac, label %block_0_41de9d
block_0_41de9d:
  %t40 = phi i64 [ %t27, %block_0_41de7c ]
  %t41 = phi i64 [ %t32, %block_0_41de7c ]
  %t42 = phi i64 [ %t21, %block_0_41de7c ]
  %t43 = phi i64 [ %t35, %block_0_41de7c ]
  ; r38 := (bv_add r34 (0x10 : bv 64))
  %t44 = add i64 %t40, 16
  ; r39 := (read r38 (bv 32))
  %t45 = inttoptr i64 %t44 to i32*
  %t46 = load i32, i32* %t45
  ; r40 := (trunc r35 32)
  %t47 = trunc i64 %t41 to i32
  ; r41 := (eq r39 r40)
  %t48 = icmp eq i32 %t46, %t47
  br i1 %t48, label %block_0_41ded8, label %block_0_41dea2
block_0_41dea2:
  %t49 = phi i64 [ %t40, %block_0_41de9d ]
  %t50 = phi i64 [ %t41, %block_0_41de9d ]
  %t51 = phi i64 [ %t42, %block_0_41de9d ]
  %t52 = phi i64 [ %t43, %block_0_41de9d ]
  ; r46 := (bv_add r42 (0x18 : bv 64))
  %t53 = add i64 %t49, 24
  ; r47 := (read r46 (bv 32))
  %t54 = inttoptr i64 %t53 to i32*
  %t55 = load i32, i32* %t54
  ; r48 := (trunc r43 32)
  %t56 = trunc i64 %t50 to i32
  ; r49 := (eq r47 r48)
  %t57 = icmp eq i32 %t55, %t56
  br i1 %t57, label %block_0_41deff, label %block_0_41dea7
block_0_41dea7:
  %t58 = phi i64 [ %t49, %block_0_41dea2 ]
  %t59 = phi i64 [ %t50, %block_0_41dea2 ]
  %t60 = phi i64 [ %t51, %block_0_41dea2 ]
  %t61 = phi i64 [ %t52, %block_0_41dea2 ]
  ; r54 := (bv_add r50 (0x1c : bv 64))
  %t62 = add i64 %t58, 28
  ; r55 := (read r54 (bv 32))
  %t63 = inttoptr i64 %t62 to i32*
  %t64 = load i32, i32* %t63
  ; r56 := (trunc r51 32)
  %t65 = trunc i64 %t59 to i32
  ; r57 := (eq r55 r56)
  %t66 = icmp eq i32 %t64, %t65
  br i1 %t66, label %block_0_41df15, label %block_0_41deac
block_0_41deac:
  %t67 = phi i64 [ %t27, %block_0_41de7c ], [ %t58, %block_0_41dea7 ]
  %t68 = phi i64 [ %t21, %block_0_41de7c ], [ %t60, %block_0_41dea7 ]
  %t69 = phi i64 [ %t35, %block_0_41de7c ], [ %t61, %block_0_41dea7 ]
  ; r61 := (bv_add r58 (0x4 : bv 64))
  %t70 = add i64 %t67, 4
  ; r62 := (read r61 (bv 32))
  %t71 = inttoptr i64 %t70 to i32*
  %t72 = load i32, i32* %t71
  ; r63 := (uext r62 64)
  %t73 = zext i32 %t72 to i64
  ; r64 := (bv_slt r62 (0x0 : bv 32))
  %t74 = icmp slt i32 %t72, 0
  ; r65 := (eq r62 (0x0 : bv 32))
  %t75 = icmp eq i32 %t72, 0
  ; r66 := (or r65 r64)
  %t76 = or i1 %t75, %t74
  br i1 %t76, label %block_0_41ded3, label %block_0_41deb3
block_0_41deb3:
  %t77 = phi i64 [ %t73, %block_0_41deac ]
  %t78 = phi i64 [ %t68, %block_0_41deac ]
  %t79 = phi i64 [ %t69, %block_0_41deac ]
  ; r70 := (bv_add r67 (0xffffffffffffffff : bv 64))
  %t80 = add i64 %t77, 18446744073709551615
  ; r71 := (trunc r70 32)
  %t81 = trunc i64 %t80 to i32
  ; r72 := (uext r71 64)
  %t82 = zext i32 %t81 to i64
  br label %block_0_41deb6
block_0_41deb6:
  %t83 = phi i64 [ %t82, %block_0_41deb3 ], [ %t90, %block_0_41deb6 ]
  %t84 = phi i64 [ %t78, %block_0_41deb3 ], [ %t100, %block_0_41deb6 ]
  %t85 = phi i64 [ %t79, %block_0_41deb3 ], [ %t85, %block_0_41deb6 ]
  ; r76 := (bv_mul (0x8 : bv 64) r73)
  %t86 = mul i64 8, %t83
  ; r77 := (trunc r75 32)
  %t87 = trunc i64 %t85 to i32
  ; r78 := (trunc r73 32)
  %t88 = trunc i64 %t83 to i32
  ; r79 := (bv_add r78 (0xffffffff : bv 32))
  %t89 = add i32 %t88, 4294967295
  ; r80 := (uext r79 64)
  %t90 = zext i32 %t89 to i64
  ; r81 := (trunc r76 8)
  %t91 = trunc i64 %t86 to i8
  ; r82 := (bv_and r81 (0x1f : bv 8))
  %t92 = and i8 %t91, 31
  ; r83 := (eq r82 (0x0 : bv 8))
  %t93 = icmp eq i8 %t92, 0
  ; r84 := (uext r82 32)
  %t94 = zext i8 %t92 to i32
  ; r85 := (bv_sar r77 r84)
  %t95 = ashr i32 %t87, %t94
  ; r86 := (mux r83 r77 r85)
  %t96 = select i1 %t93, i32 %t87, i32 %t95
  ; r87 := (trunc r86 8)
  %t97 = trunc i32 %t96 to i8
  ; r88 := (bv_or r87 (0x80 : bv 8))
  %t98 = or i8 %t97, 128
  ; write r74 r88
  %t99 = inttoptr i64 %t84 to i8*
  store i8 %t98, i8* %t99
  ; r89 := (bv_add r74 (0x1 : bv 64))
  %t100 = add i64 %t84, 1
  ; r90 := (eq r78 (0x0 : bv 32))
  %t101 = icmp eq i32 %t88, 0
  br i1 %t101, label %block_0_41ded3, label %block_0_41deb6
block_0_41ded3:
  br label %block_0_41de6d
block_0_41ded8:
  %t102 = phi i64 [ %t40, %block_0_41de9d ]
  %t103 = phi i64 [ %t42, %block_0_41de9d ]
  %t104 = phi i64 [ %t43, %block_0_41de9d ]
  ; r94 := (read r91 (bv 32))
  %t105 = inttoptr i64 %t102 to i32*
  %t106 = load i32, i32* %t105
  ; r95 := (uext r94 64)
  %t107 = zext i32 %t106 to i64
  br label %block_0_41dedc
block_0_41dedc:
  %t108 = phi i64 [ %t107, %block_0_41ded8 ], [ %t153, %block_0_41deff ], [ %t168, %block_0_41df15 ]
  %t109 = phi i64 [ %t103, %block_0_41ded8 ], [ %t150, %block_0_41deff ], [ %t165, %block_0_41df15 ]
  %t110 = phi i64 [ %t104, %block_0_41ded8 ], [ %t148, %block_0_41deff ], [ %t163, %block_0_41df15 ]
  ; r99 := (trunc r96 32)
  %t111 = trunc i64 %t108 to i32
  ; r100 := (bv_slt r99 (0x0 : bv 32))
  %t112 = icmp slt i32 %t111, 0
  ; r101 := (eq r99 (0x0 : bv 32))
  %t113 = icmp eq i32 %t111, 0
  ; r102 := (or r101 r100)
  %t114 = or i1 %t113, %t112
  br i1 %t114, label %block_0_41ded3, label %block_0_41dee0
block_0_41dee0:
  %t115 = phi i64 [ %t108, %block_0_41dedc ]
  %t116 = phi i64 [ %t109, %block_0_41dedc ]
  %t117 = phi i64 [ %t110, %block_0_41dedc ]
  ; r106 := (bv_add r103 (0xffffffffffffffff : bv 64))
  %t118 = add i64 %t115, 18446744073709551615
  ; r107 := (trunc r106 32)
  %t119 = trunc i64 %t118 to i32
  ; r108 := (uext r107 64)
  %t120 = zext i32 %t119 to i64
  br label %block_0_41dee3
block_0_41dee3:
  %t121 = phi i64 [ %t120, %block_0_41dee0 ], [ %t128, %block_0_41dee3 ]
  %t122 = phi i64 [ %t116, %block_0_41dee0 ], [ %t137, %block_0_41dee3 ]
  %t123 = phi i64 [ %t117, %block_0_41dee0 ], [ %t123, %block_0_41dee3 ]
  ; r112 := (bv_mul (0x8 : bv 64) r109)
  %t124 = mul i64 8, %t121
  ; r113 := (trunc r111 32)
  %t125 = trunc i64 %t123 to i32
  ; r114 := (trunc r109 32)
  %t126 = trunc i64 %t121 to i32
  ; r115 := (bv_add r114 (0xffffffff : bv 32))
  %t127 = add i32 %t126, 4294967295
  ; r116 := (uext r115 64)
  %t128 = zext i32 %t127 to i64
  ; r117 := (trunc r112 8)
  %t129 = trunc i64 %t124 to i8
  ; r118 := (bv_and r117 (0x1f : bv 8))
  %t130 = and i8 %t129, 31
  ; r119 := (eq r118 (0x0 : bv 8))
  %t131 = icmp eq i8 %t130, 0
  ; r120 := (uext r118 32)
  %t132 = zext i8 %t130 to i32
  ; r121 := (bv_sar r113 r120)
  %t133 = ashr i32 %t125, %t132
  ; r122 := (mux r119 r113 r121)
  %t134 = select i1 %t131, i32 %t125, i32 %t133
  ; r123 := (trunc r122 8)
  %t135 = trunc i32 %t134 to i8
  ; write r110 r123
  %t136 = inttoptr i64 %t122 to i8*
  store i8 %t135, i8* %t136
  ; r124 := (bv_add r110 (0x1 : bv 64))
  %t137 = add i64 %t122, 1
  ; r125 := (eq r114 (0x0 : bv 32))
  %t138 = icmp eq i32 %t126, 0
  br i1 %t138, label %block_0_41defd, label %block_0_41dee3
block_0_41defd:
  br label %block_0_41ded3
block_0_41deff:
  %t139 = phi i64 [ %t49, %block_0_41dea2 ]
  %t140 = phi i64 [ %t51, %block_0_41dea2 ]
  %t141 = phi i64 [ %t52, %block_0_41dea2 ]
  ; r129 := (bv_add r126 (0x8 : bv 64))
  %t142 = add i64 %t139, 8
  ; r130 := (read r129 (bv 32))
  %t143 = inttoptr i64 %t142 to i32*
  %t144 = load i32, i32* %t143
  ; r131 := (uext r130 64)
  %t145 = zext i32 %t144 to i64
  ; r132 := (trunc r128 32)
  %t146 = trunc i64 %t141 to i32
  ; r133 := (bv_or r132 (0x80808080 : bv 32))
  %t147 = or i32 %t146, 2155905152
  ; r134 := (uext r133 64)
  %t148 = zext i32 %t147 to i64
  ; write r127 (0x8e : bv 8)
  %t149 = inttoptr i64 %t140 to i8*
  store i8 142, i8* %t149
  ; r135 := (bv_add r127 (0x1 : bv 64))
  %t150 = add i64 %t140, 1
  ; r136 := (bv_add r131 (0xffffffffffffffff : bv 64))
  %t151 = add i64 %t145, 18446744073709551615
  ; r137 := (trunc r136 32)
  %t152 = trunc i64 %t151 to i32
  ; r138 := (uext r137 64)
  %t153 = zext i32 %t152 to i64
  br label %block_0_41dedc
block_0_41df15:
  %t154 = phi i64 [ %t58, %block_0_41dea7 ]
  %t155 = phi i64 [ %t60, %block_0_41dea7 ]
  %t156 = phi i64 [ %t61, %block_0_41dea7 ]
  ; r142 := (bv_add r139 (0xc : bv 64))
  %t157 = add i64 %t154, 12
  ; r143 := (read r142 (bv 32))
  %t158 = inttoptr i64 %t157 to i32*
  %t159 = load i32, i32* %t158
  ; r144 := (uext r143 64)
  %t160 = zext i32 %t159 to i64
  ; r145 := (trunc r141 32)
  %t161 = trunc i64 %t156 to i32
  ; r146 := (bv_or r145 (0x80808080 : bv 32))
  %t162 = or i32 %t161, 2155905152
  ; r147 := (uext r146 64)
  %t163 = zext i32 %t162 to i64
  ; write r140 (0x8f : bv 8)
  %t164 = inttoptr i64 %t155 to i8*
  store i8 143, i8* %t164
  ; r148 := (bv_add r140 (0x1 : bv 64))
  %t165 = add i64 %t155, 1
  ; r149 := (bv_add r144 (0xffffffffffffffff : bv 64))
  %t166 = add i64 %t160, 18446744073709551615
  ; r150 := (trunc r149 32)
  %t167 = trunc i64 %t166 to i32
  ; r151 := (uext r150 64)
  %t168 = zext i32 %t167 to i64
  br label %block_0_41dedc
}
define void @_EUC_mbrtowc(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_41df30:
  ; r0 := (bv_add arg3 (0x8 : bv 64))
  %t0 = add i64 %arg3, 8
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (uext r1 64)
  %t3 = zext i32 %t2 to i64
  ; r3 := (bv_slt r1 (0x0 : bv 32))
  %t4 = icmp slt i32 %t2, 0
  ; r4 := (bitcast arg4 (bv 512))
  %t5 = bitcast <8 x double> %arg4 to i512
  ; r5 := (bitcast arg4 (bv 512))
  %t6 = bitcast <8 x double> %arg4 to i512
  br i1 %t4, label %block_0_41df52, label %block_0_41df77
block_0_41df52:
  %t7 = phi i64 [ %arg2, %block_0_41df30 ], [ %t20, %block_0_41df77 ], [ %t37, %block_0_41df80 ], [ %t48, %block_0_41df87 ]
  %t8 = phi i64 [ %arg1, %block_0_41df30 ], [ %t22, %block_0_41df77 ], [ %t39, %block_0_41df80 ], [ %t51, %block_0_41df87 ]
  %t9 = phi i64 [ %arg1, %block_0_41df30 ], [ %t22, %block_0_41df77 ], [ %t39, %block_0_41df80 ], [ %t51, %block_0_41df87 ]
  %t10 = phi i512 [ %t5, %block_0_41df30 ], [ %t24, %block_0_41df77 ], [ %t41, %block_0_41df80 ], [ %t53, %block_0_41df87 ]
  ; r10 := (bitcast r9 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r11 := call __error_unthreaded(r8, r7, r6, r10)
  %t12 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t9, i64 %t8, i64 %t7, <8 x double> %t11)
  ; r12 := (tuple_field r11 0)
  %t13 = extractvalue { i64, i64, <8 x double> } %t12, 0
  ; r13 := (tuple_field r11 1)
  %t14 = extractvalue { i64, i64, <8 x double> } %t12, 1
  ; r14 := (tuple_field r11 2)
  %t15 = extractvalue { i64, i64, <8 x double> } %t12, 2
  ; r15 := (bitcast r14 (bv 512))
  %t16 = bitcast <8 x double> %t15 to i512
  br label %block_0_41df57
block_0_41df57:
  %t17 = phi i64 [ %t13, %block_0_41df52 ]
  ; write r16 (0x16 : bv 32)
  %t18 = inttoptr i64 %t17 to i32*
  store i32 22, i32* %t18
  br label %block_0_41df64
block_0_41df64:
  ret void
block_0_41df77:
  %t19 = phi i64 [ %arg3, %block_0_41df30 ]
  %t20 = phi i64 [ %arg2, %block_0_41df30 ]
  %t21 = phi i64 [ %arg0, %block_0_41df30 ]
  %t22 = phi i64 [ %arg1, %block_0_41df30 ]
  %t23 = phi i64 [ %t3, %block_0_41df30 ]
  %t24 = phi i512 [ %t6, %block_0_41df30 ]
  ; r23 := (read (0x6301a8 : bv 64) (bv 32))
  %t25 = inttoptr i64 6488488 to i32*
  %t26 = load i32, i32* %t25
  ; r24 := (trunc r21 32)
  %t27 = trunc i64 %t23 to i32
  ; r25 := (ssbb_overflows r24 r23 false)
  %t28 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t27, i32 %t26)
  %t29 = extractvalue { i32, i1 } %t28, 1
  ; r26 := (bv_sub r24 r23)
  %t30 = sub i32 %t27, %t26
  ; r27 := (bv_slt r26 (0x0 : bv 32))
  %t31 = icmp slt i32 %t30, 0
  ; r28 := (eq r24 r23)
  %t32 = icmp eq i32 %t27, %t26
  ; r29 := (not r28)
  %t33 = icmp eq i1 %t32, 0
  ; r30 := (eq r27 r25)
  %t34 = icmp eq i1 %t31, %t29
  ; r31 := (and r29 r30)
  %t35 = and i1 %t33, %t34
  br i1 %t35, label %block_0_41df52, label %block_0_41df80
block_0_41df80:
  %t36 = phi i64 [ %t19, %block_0_41df77 ]
  %t37 = phi i64 [ %t20, %block_0_41df77 ]
  %t38 = phi i64 [ %t21, %block_0_41df77 ]
  %t39 = phi i64 [ %t22, %block_0_41df77 ]
  %t40 = phi i64 [ %t23, %block_0_41df77 ]
  %t41 = phi i512 [ %t24, %block_0_41df77 ]
  ; r38 := (bv_add r32 (0x4 : bv 64))
  %t42 = add i64 %t36, 4
  ; r39 := (read r38 (bv 32))
  %t43 = inttoptr i64 %t42 to i32*
  %t44 = load i32, i32* %t43
  ; r40 := (uext r39 64)
  %t45 = zext i32 %t44 to i64
  ; r41 := (bv_slt r39 (0x0 : bv 32))
  %t46 = icmp slt i32 %t44, 0
  br i1 %t46, label %block_0_41df52, label %block_0_41df87
block_0_41df87:
  %t47 = phi i64 [ %t36, %block_0_41df80 ]
  %t48 = phi i64 [ %t37, %block_0_41df80 ]
  %t49 = phi i64 [ %t38, %block_0_41df80 ]
  %t50 = phi i64 [ %t45, %block_0_41df80 ]
  %t51 = phi i64 [ %t39, %block_0_41df80 ]
  %t52 = phi i64 [ %t40, %block_0_41df80 ]
  %t53 = phi i512 [ %t41, %block_0_41df80 ]
  ; r49 := (trunc r45 32)
  %t54 = trunc i64 %t50 to i32
  ; r50 := (ssbb_overflows r49 (0x3 : bv 32) false)
  %t55 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t54, i32 3)
  %t56 = extractvalue { i32, i1 } %t55, 1
  ; r51 := (bv_add r49 (0xfffffffd : bv 32))
  %t57 = add i32 %t54, 4294967293
  ; r52 := (bv_slt r51 (0x0 : bv 32))
  %t58 = icmp slt i32 %t57, 0
  ; r53 := (eq r49 (0x3 : bv 32))
  %t59 = icmp eq i32 %t54, 3
  ; r54 := (not r53)
  %t60 = icmp eq i1 %t59, 0
  ; r55 := (eq r52 r50)
  %t61 = icmp eq i1 %t58, %t56
  ; r56 := (and r54 r55)
  %t62 = and i1 %t60, %t61
  br i1 %t62, label %block_0_41df52, label %block_0_41df8c
block_0_41df8c:
  %t63 = phi i64 [ %t47, %block_0_41df87 ]
  %t64 = phi i64 [ %t48, %block_0_41df87 ]
  %t65 = phi i64 [ %t49, %block_0_41df87 ]
  %t66 = phi i64 [ %t50, %block_0_41df87 ]
  %t67 = phi i64 [ %t51, %block_0_41df87 ]
  %t68 = phi i64 [ %t52, %block_0_41df87 ]
  %t69 = phi i512 [ %t53, %block_0_41df87 ]
  ; r64 := (eq r61 (0x0 : bv 64))
  %t70 = icmp eq i64 %t67, 0
  br i1 %t70, label %block_0_41e10c, label %block_0_41df96
block_0_41df96:
  %t71 = phi i64 [ %t63, %block_0_41df8c ]
  %t72 = phi i64 [ %t64, %block_0_41df8c ]
  %t73 = phi i64 [ %t65, %block_0_41df8c ]
  %t74 = phi i64 [ %t66, %block_0_41df8c ]
  %t75 = phi i64 [ %t67, %block_0_41df8c ]
  %t76 = phi i64 [ %t68, %block_0_41df8c ]
  %t77 = phi i512 [ %t69, %block_0_41df8c ]
  ; r72 := (eq r66 (0x0 : bv 64))
  %t78 = icmp eq i64 %t72, 0
  br i1 %t78, label %block_0_41df64, label %block_0_41dfa2
block_0_41dfa2:
  %t79 = phi i64 [ %t71, %block_0_41df96 ], [ %t384, %block_0_41e10c ]
  %t80 = phi i64 [ %t72, %block_0_41df96 ], [ 1, %block_0_41e10c ]
  %t81 = phi i64 [ %t73, %block_0_41df96 ], [ 0, %block_0_41e10c ]
  %t82 = phi i64 [ %t74, %block_0_41df96 ], [ %t385, %block_0_41e10c ]
  %t83 = phi i64 [ %t75, %block_0_41df96 ], [ 4363506, %block_0_41e10c ]
  %t84 = phi i64 [ %t76, %block_0_41df96 ], [ %t386, %block_0_41e10c ]
  %t85 = phi i512 [ %t77, %block_0_41df96 ], [ %t387, %block_0_41e10c ]
  ; r80 := (trunc r78 32)
  %t86 = trunc i64 %t84 to i32
  ; r81 := (eq r80 (0x0 : bv 32))
  %t87 = icmp eq i32 %t86, 0
  br i1 %t87, label %block_0_41dfab, label %block_0_41e066
block_0_41dfab:
  %t88 = phi i64 [ %t79, %block_0_41dfa2 ]
  %t89 = phi i64 [ %t80, %block_0_41dfa2 ]
  %t90 = phi i64 [ %t81, %block_0_41dfa2 ]
  %t91 = phi i64 [ %t83, %block_0_41dfa2 ]
  %t92 = phi i64 [ %t84, %block_0_41dfa2 ]
  %t93 = phi i512 [ %t85, %block_0_41dfa2 ]
  ; r88 := (read (0x631260 : bv 64) (bv 64))
  %t94 = inttoptr i64 6492768 to i64*
  %t95 = load i64, i64* %t94
  ; r89 := (bv_add r88 (0x1070 : bv 64))
  %t96 = add i64 %t95, 4208
  ; r90 := (read r89 (bv 64))
  %t97 = inttoptr i64 %t96 to i64*
  %t98 = load i64, i64* %t97
  ; r91 := (read r85 (bv 8))
  %t99 = inttoptr i64 %t91 to i8*
  %t100 = load i8, i8* %t99
  ; r92 := (uext r91 64)
  %t101 = zext i8 %t100 to i64
  ; r93 := (bv_slt r91 (0x0 : bv 8))
  %t102 = icmp slt i8 %t100, 0
  br i1 %t102, label %block_0_41dfc8, label %block_0_41e098
block_0_41dfc8:
  %t103 = phi i64 [ %t101, %block_0_41dfab ]
  %t104 = phi i64 [ %t88, %block_0_41dfab ]
  %t105 = phi i64 [ %t89, %block_0_41dfab ]
  %t106 = phi i64 [ %t90, %block_0_41dfab ]
  %t107 = phi i64 [ %t101, %block_0_41dfab ]
  %t108 = phi i64 [ %t91, %block_0_41dfab ]
  %t109 = phi i64 [ %t92, %block_0_41dfab ]
  %t110 = phi i64 [ %t98, %block_0_41dfab ]
  %t111 = phi i512 [ %t93, %block_0_41dfab ]
  ; r103 := (trunc r98 32)
  %t112 = trunc i64 %t107 to i32
  ; r104 := (eq r103 (0x8f : bv 32))
  %t113 = icmp eq i32 %t112, 143
  br i1 %t113, label %block_0_41e0a5, label %block_0_41dfd4
block_0_41dfd4:
  %t114 = phi i64 [ %t103, %block_0_41dfc8 ]
  %t115 = phi i64 [ %t104, %block_0_41dfc8 ]
  %t116 = phi i64 [ %t105, %block_0_41dfc8 ]
  %t117 = phi i64 [ %t106, %block_0_41dfc8 ]
  %t118 = phi i64 [ %t107, %block_0_41dfc8 ]
  %t119 = phi i64 [ %t108, %block_0_41dfc8 ]
  %t120 = phi i64 [ %t109, %block_0_41dfc8 ]
  %t121 = phi i64 [ %t110, %block_0_41dfc8 ]
  %t122 = phi i512 [ %t111, %block_0_41dfc8 ]
  ; r114 := (trunc r109 32)
  %t123 = trunc i64 %t118 to i32
  ; r115 := (eq r114 (0x8e : bv 32))
  %t124 = icmp eq i32 %t123, 142
  br i1 %t124, label %block_0_41e11d, label %block_0_41dfe0
block_0_41dfe0:
  %t125 = phi i64 [ %t114, %block_0_41dfd4 ]
  %t126 = phi i64 [ %t115, %block_0_41dfd4 ]
  %t127 = phi i64 [ %t116, %block_0_41dfd4 ]
  %t128 = phi i64 [ %t117, %block_0_41dfd4 ]
  %t129 = phi i64 [ %t119, %block_0_41dfd4 ]
  %t130 = phi i64 [ %t120, %block_0_41dfd4 ]
  %t131 = phi i64 [ %t121, %block_0_41dfd4 ]
  %t132 = phi i512 [ %t122, %block_0_41dfd4 ]
  ; r124 := (bv_add r122 (0x4 : bv 64))
  %t133 = add i64 %t131, 4
  ; r125 := (read r124 (bv 32))
  %t134 = inttoptr i64 %t133 to i32*
  %t135 = load i32, i32* %t134
  ; r126 := (uext r125 64)
  %t136 = zext i32 %t135 to i64
  br label %block_0_41dfec
block_0_41dfec:
  %t137 = phi i64 [ %t125, %block_0_41dfe0 ], [ %t292, %block_0_41e071 ], [ %t306, %block_0_41e098 ]
  %t138 = phi i64 [ %t126, %block_0_41dfe0 ], [ %t281, %block_0_41e071 ], [ %t307, %block_0_41e098 ]
  %t139 = phi i64 [ %t127, %block_0_41dfe0 ], [ %t282, %block_0_41e071 ], [ %t308, %block_0_41e098 ]
  %t140 = phi i64 [ %t128, %block_0_41dfe0 ], [ %t283, %block_0_41e071 ], [ %t309, %block_0_41e098 ]
  %t141 = phi i64 [ 1, %block_0_41dfe0 ], [ %t284, %block_0_41e071 ], [ 0, %block_0_41e098 ]
  %t142 = phi i64 [ %t129, %block_0_41dfe0 ], [ %t289, %block_0_41e071 ], [ %t310, %block_0_41e098 ]
  %t143 = phi i64 [ %t129, %block_0_41dfe0 ], [ %t285, %block_0_41e071 ], [ %t310, %block_0_41e098 ]
  %t144 = phi i64 [ %t130, %block_0_41dfe0 ], [ %t286, %block_0_41e071 ], [ %t311, %block_0_41e098 ]
  %t145 = phi i64 [ %t136, %block_0_41dfe0 ], [ %t287, %block_0_41e071 ], [ %t316, %block_0_41e098 ]
  %t146 = phi i512 [ %t132, %block_0_41dfe0 ], [ %t288, %block_0_41e071 ], [ %t313, %block_0_41e098 ]
  ; r137 := (bv_add r132 (0x1 : bv 64))
  %t147 = add i64 %t142, 1
  ; r138 := (trunc r127 8)
  %t148 = trunc i64 %t137 to i8
  ; r139 := (uext r138 64)
  %t149 = zext i8 %t148 to i64
  br label %block_0_41dff4
block_0_41dff4:
  %t150 = phi i64 [ %t138, %block_0_41dfec ], [ %t269, %block_0_41e066 ]
  %t151 = phi i64 [ %t139, %block_0_41dfec ], [ %t270, %block_0_41e066 ]
  %t152 = phi i64 [ %t140, %block_0_41dfec ], [ %t271, %block_0_41e066 ]
  %t153 = phi i64 [ %t141, %block_0_41dfec ], [ %t272, %block_0_41e066 ]
  %t154 = phi i64 [ %t143, %block_0_41dfec ], [ %t273, %block_0_41e066 ]
  %t155 = phi i64 [ %t144, %block_0_41dfec ], [ %t274, %block_0_41e066 ]
  %t156 = phi i64 [ %t149, %block_0_41dfec ], [ %t278, %block_0_41e066 ]
  %t157 = phi i64 [ %t147, %block_0_41dfec ], [ %t273, %block_0_41e066 ]
  %t158 = phi i64 [ %t145, %block_0_41dfec ], [ %t280, %block_0_41e066 ]
  %t159 = phi i512 [ %t146, %block_0_41dfec ], [ %t275, %block_0_41e066 ]
  ; r150 := (trunc r148 32)
  %t160 = trunc i64 %t158 to i32
  ; r151 := (sext r150 64)
  %t161 = sext i32 %t160 to i64
  ; r152 := (trunc r145 32)
  %t162 = trunc i64 %t155 to i32
  ; r153 := (eq r152 (0x0 : bv 32))
  %t163 = icmp eq i32 %t162, 0
  ; r154 := (mux r153 (0x1 : bv 8) (0x0 : bv 8))
  %t164 = select i1 %t163, i8 1, i8 0
  ; r155 := (uext r154 64)
  %t165 = zext i8 %t164 to i64
  ; r156 := (eq r151 r141)
  %t166 = icmp eq i64 %t161, %t151
  ; r157 := (bv_ule r141 r151)
  %t167 = icmp ule i64 %t151, %t161
  ; r158 := (not r156)
  %t168 = icmp eq i1 %t166, 0
  ; r159 := (and r157 r158)
  %t169 = and i1 %t167, %t168
  ; r160 := (mux r159 r141 r151)
  %t170 = select i1 %t169, i64 %t151, i64 %t161
  ; r161 := (uext r154 32)
  %t171 = zext i8 %t164 to i32
  ; r162 := (sext r161 64)
  %t172 = sext i32 %t171 to i64
  ; r163 := (bv_ult r160 r162)
  %t173 = icmp ult i64 %t170, %t172
  ; r164 := (eq r160 r162)
  %t174 = icmp eq i64 %t170, %t172
  ; r165 := (or r163 r164)
  %t175 = or i1 %t173, %t174
  br i1 %t175, label %block_0_41e044, label %block_0_41e010
block_0_41e010:
  %t176 = phi i64 [ %t150, %block_0_41dff4 ]
  %t177 = phi i64 [ %t152, %block_0_41dff4 ]
  %t178 = phi i64 [ %t153, %block_0_41dff4 ]
  %t179 = phi i64 [ %t170, %block_0_41dff4 ]
  %t180 = phi i64 [ %t154, %block_0_41dff4 ]
  %t181 = phi i64 [ %t156, %block_0_41dff4 ]
  %t182 = phi i64 [ %t157, %block_0_41dff4 ]
  %t183 = phi i64 [ %t165, %block_0_41dff4 ]
  %t184 = phi i64 [ %t158, %block_0_41dff4 ]
  %t185 = phi i512 [ %t159, %block_0_41dff4 ]
  ; r176 := (read r172 (bv 8))
  %t186 = inttoptr i64 %t182 to i8*
  %t187 = load i8, i8* %t186
  ; r177 := (uext r176 64)
  %t188 = zext i8 %t187 to i64
  ; r178 := (bv_add r173 (0x1 : bv 64))
  %t189 = add i64 %t183, 1
  ; r179 := (trunc r178 32)
  %t190 = trunc i64 %t189 to i32
  ; r180 := (sext r179 64)
  %t191 = sext i32 %t190 to i64
  ; r181 := (eq r176 (0x0 : bv 8))
  %t192 = icmp eq i8 %t187, 0
  br i1 %t192, label %block_0_41e01f, label %block_0_41e02d
block_0_41e01f:
  %t193 = phi i64 [ %t188, %block_0_41e010 ]
  %t194 = phi i64 [ %t179, %block_0_41e010 ]
  %t195 = phi i64 [ %t180, %block_0_41e010 ]
  %t196 = phi i512 [ %t185, %block_0_41e010 ]
  br label %block_0_41e081
block_0_41e021:
  %t197 = phi i64 [ %t213, %block_0_41e02d ]
  %t198 = phi i64 [ %t215, %block_0_41e02d ]
  %t199 = phi i64 [ %t216, %block_0_41e02d ]
  %t200 = phi i64 [ %t217, %block_0_41e02d ]
  %t201 = phi i64 [ %t218, %block_0_41e02d ]
  %t202 = phi i64 [ %t219, %block_0_41e02d ]
  %t203 = phi i64 [ %t231, %block_0_41e02d ]
  %t204 = phi i64 [ %t229, %block_0_41e02d ]
  %t205 = phi i64 [ %t234, %block_0_41e02d ]
  %t206 = phi i64 [ %t223, %block_0_41e02d ]
  %t207 = phi i512 [ %t224, %block_0_41e02d ]
  ; r197 := (read r193 (bv 8))
  %t208 = inttoptr i64 %t204 to i8*
  %t209 = load i8, i8* %t208
  ; r198 := (uext r197 64)
  %t210 = zext i8 %t209 to i64
  ; r199 := (bv_add r191 (0x1 : bv 64))
  %t211 = add i64 %t202, 1
  ; r200 := (eq r197 (0x0 : bv 8))
  %t212 = icmp eq i8 %t209, 0
  br i1 %t212, label %block_0_41e081, label %block_0_41e02d
block_0_41e02d:
  %t213 = phi i64 [ %t176, %block_0_41e010 ], [ %t197, %block_0_41e021 ]
  %t214 = phi i64 [ %t188, %block_0_41e010 ], [ %t210, %block_0_41e021 ]
  %t215 = phi i64 [ %t177, %block_0_41e010 ], [ %t198, %block_0_41e021 ]
  %t216 = phi i64 [ %t178, %block_0_41e010 ], [ %t199, %block_0_41e021 ]
  %t217 = phi i64 [ %t179, %block_0_41e010 ], [ %t200, %block_0_41e021 ]
  %t218 = phi i64 [ %t180, %block_0_41e010 ], [ %t201, %block_0_41e021 ]
  %t219 = phi i64 [ %t191, %block_0_41e010 ], [ %t211, %block_0_41e021 ]
  %t220 = phi i64 [ %t181, %block_0_41e010 ], [ %t203, %block_0_41e021 ]
  %t221 = phi i64 [ %t182, %block_0_41e010 ], [ %t204, %block_0_41e021 ]
  %t222 = phi i64 [ %t183, %block_0_41e010 ], [ %t205, %block_0_41e021 ]
  %t223 = phi i64 [ %t184, %block_0_41e010 ], [ %t206, %block_0_41e021 ]
  %t224 = phi i512 [ %t185, %block_0_41e010 ], [ %t207, %block_0_41e021 ]
  ; r213 := (trunc r208 32)
  %t225 = trunc i64 %t220 to i32
  ; r214 := (bv_shl r213 (0x8 : bv 32))
  %t226 = shl i32 %t225, 8
  ; r215 := (trunc r202 8)
  %t227 = trunc i64 %t214 to i8
  ; r216 := (uext r215 32)
  %t228 = zext i8 %t227 to i32
  ; r217 := (bv_add r209 (0x1 : bv 64))
  %t229 = add i64 %t221, 1
  ; r218 := (bv_or r214 r216)
  %t230 = or i32 %t226, %t228
  ; r219 := (uext r218 64)
  %t231 = zext i32 %t230 to i64
  ; r220 := (trunc r210 32)
  %t232 = trunc i64 %t222 to i32
  ; r221 := (bv_add r220 (0x1 : bv 32))
  %t233 = add i32 %t232, 1
  ; r222 := (uext r221 64)
  %t234 = zext i32 %t233 to i64
  ; r223 := (eq r205 r207)
  %t235 = icmp eq i64 %t217, %t219
  ; r224 := (bv_ule r207 r205)
  %t236 = icmp ule i64 %t219, %t217
  ; r225 := (not r223)
  %t237 = icmp eq i1 %t235, 0
  ; r226 := (and r224 r225)
  %t238 = and i1 %t236, %t237
  br i1 %t238, label %block_0_41e021, label %block_0_41e044
block_0_41e044:
  %t239 = phi i64 [ %t150, %block_0_41dff4 ], [ %t213, %block_0_41e02d ]
  %t240 = phi i64 [ %t152, %block_0_41dff4 ], [ %t215, %block_0_41e02d ]
  %t241 = phi i64 [ %t153, %block_0_41dff4 ], [ %t216, %block_0_41e02d ]
  %t242 = phi i64 [ %t156, %block_0_41dff4 ], [ %t231, %block_0_41e02d ]
  %t243 = phi i64 [ %t165, %block_0_41dff4 ], [ %t234, %block_0_41e02d ]
  %t244 = phi i64 [ %t158, %block_0_41dff4 ], [ %t223, %block_0_41e02d ]
  ; r233 := (trunc r232 32)
  %t245 = trunc i64 %t244 to i32
  ; r234 := (trunc r231 32)
  %t246 = trunc i64 %t243 to i32
  ; r235 := (ssbb_overflows r233 r234 false)
  %t247 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t245, i32 %t246)
  %t248 = extractvalue { i32, i1 } %t247, 1
  ; r236 := (bv_sub r233 r234)
  %t249 = sub i32 %t245, %t246
  ; r237 := (bv_slt r236 (0x0 : bv 32))
  %t250 = icmp slt i32 %t249, 0
  ; r238 := (eq r233 r234)
  %t251 = icmp eq i32 %t245, %t246
  ; r239 := (xor r237 r235)
  %t252 = xor i1 %t250, %t248
  ; r240 := (or r238 r239)
  %t253 = or i1 %t251, %t252
  br i1 %t253, label %block_0_41e0d1, label %block_0_41e04d
block_0_41e04d:
  %t254 = phi i64 [ %t239, %block_0_41e044 ]
  %t255 = phi i64 [ %t241, %block_0_41e044 ]
  %t256 = phi i64 [ %t242, %block_0_41e044 ]
  %t257 = phi i64 [ %t243, %block_0_41e044 ]
  %t258 = phi i64 [ %t244, %block_0_41e044 ]
  ; r246 := (trunc r245 32)
  %t259 = trunc i64 %t258 to i32
  ; r247 := (trunc r244 32)
  %t260 = trunc i64 %t257 to i32
  ; r248 := (bv_sub r246 r247)
  %t261 = sub i32 %t259, %t260
  ; r249 := (trunc r242 32)
  %t262 = trunc i64 %t255 to i32
  ; r250 := (bv_add r241 (0x4 : bv 64))
  %t263 = add i64 %t254, 4
  ; write r250 r249
  %t264 = inttoptr i64 %t263 to i32*
  store i32 %t262, i32* %t264
  ; r251 := (bv_add r241 (0x8 : bv 64))
  %t265 = add i64 %t254, 8
  ; write r251 r248
  %t266 = inttoptr i64 %t265 to i32*
  store i32 %t261, i32* %t266
  ; r252 := (trunc r243 32)
  %t267 = trunc i64 %t256 to i32
  ; write r241 r252
  %t268 = inttoptr i64 %t254 to i32*
  store i32 %t267, i32* %t268
  br label %block_0_41df64
block_0_41e066:
  %t269 = phi i64 [ %t79, %block_0_41dfa2 ]
  %t270 = phi i64 [ %t80, %block_0_41dfa2 ]
  %t271 = phi i64 [ %t81, %block_0_41dfa2 ]
  %t272 = phi i64 [ %t82, %block_0_41dfa2 ]
  %t273 = phi i64 [ %t83, %block_0_41dfa2 ]
  %t274 = phi i64 [ %t84, %block_0_41dfa2 ]
  %t275 = phi i512 [ %t85, %block_0_41dfa2 ]
  ; r260 := (read r253 (bv 32))
  %t276 = inttoptr i64 %t269 to i32*
  %t277 = load i32, i32* %t276
  ; r261 := (uext r260 64)
  %t278 = zext i32 %t277 to i64
  ; r262 := (trunc r258 32)
  %t279 = trunc i64 %t274 to i32
  ; r263 := (uext r262 64)
  %t280 = zext i32 %t279 to i64
  br label %block_0_41dff4
block_0_41e071:
  %t281 = phi i64 [ %t329, %block_0_41e0ae ]
  %t282 = phi i64 [ %t336, %block_0_41e0ae ]
  %t283 = phi i64 [ %t331, %block_0_41e0ae ]
  %t284 = phi i64 [ %t332, %block_0_41e0ae ]
  %t285 = phi i64 [ %t333, %block_0_41e0ae ]
  %t286 = phi i64 [ %t334, %block_0_41e0ae ]
  %t287 = phi i64 [ %t340, %block_0_41e0ae ]
  %t288 = phi i512 [ %t335, %block_0_41e0ae ]
  ; r272 := (bv_add r268 (0x1 : bv 64))
  %t289 = add i64 %t285, 1
  ; r273 := (read r272 (bv 8))
  %t290 = inttoptr i64 %t289 to i8*
  %t291 = load i8, i8* %t290
  ; r274 := (uext r273 64)
  %t292 = zext i8 %t291 to i64
  ; r275 := (eq r273 (0x0 : bv 8))
  %t293 = icmp eq i8 %t291, 0
  br i1 %t293, label %block_0_41e081, label %block_0_41dfec
block_0_41e081:
  %t294 = phi i64 [ %t193, %block_0_41e01f ], [ %t210, %block_0_41e021 ], [ %t282, %block_0_41e071 ]
  %t295 = phi i64 [ %t194, %block_0_41e01f ], [ %t200, %block_0_41e021 ], [ %t289, %block_0_41e071 ]
  %t296 = phi i64 [ %t195, %block_0_41e01f ], [ %t201, %block_0_41e021 ], [ %t285, %block_0_41e071 ]
  %t297 = phi i512 [ %t196, %block_0_41e01f ], [ %t207, %block_0_41e021 ], [ %t288, %block_0_41e071 ]
  ; r280 := (bitcast r279 (vec 8 double))
  %t298 = bitcast i512 %t297 to <8 x double>
  ; r281 := call __error_unthreaded(r278, r277, r276, r280)
  %t299 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t296, i64 %t295, i64 %t294, <8 x double> %t298)
  ; r282 := (tuple_field r281 0)
  %t300 = extractvalue { i64, i64, <8 x double> } %t299, 0
  ; r283 := (tuple_field r281 1)
  %t301 = extractvalue { i64, i64, <8 x double> } %t299, 1
  ; r284 := (tuple_field r281 2)
  %t302 = extractvalue { i64, i64, <8 x double> } %t299, 2
  ; r285 := (bitcast r284 (bv 512))
  %t303 = bitcast <8 x double> %t302 to i512
  br label %block_0_41e086
block_0_41e086:
  %t304 = phi i64 [ %t300, %block_0_41e081 ]
  ; write r286 (0x56 : bv 32)
  %t305 = inttoptr i64 %t304 to i32*
  store i32 86, i32* %t305
  br label %block_0_41df64
block_0_41e098:
  %t306 = phi i64 [ %t101, %block_0_41dfab ]
  %t307 = phi i64 [ %t88, %block_0_41dfab ]
  %t308 = phi i64 [ %t89, %block_0_41dfab ]
  %t309 = phi i64 [ %t90, %block_0_41dfab ]
  %t310 = phi i64 [ %t91, %block_0_41dfab ]
  %t311 = phi i64 [ %t92, %block_0_41dfab ]
  %t312 = phi i64 [ %t98, %block_0_41dfab ]
  %t313 = phi i512 [ %t93, %block_0_41dfab ]
  ; r295 := (read r293 (bv 32))
  %t314 = inttoptr i64 %t312 to i32*
  %t315 = load i32, i32* %t314
  ; r296 := (uext r295 64)
  %t316 = zext i32 %t315 to i64
  br label %block_0_41dfec
block_0_41e0a5:
  %t317 = phi i64 [ %t104, %block_0_41dfc8 ]
  %t318 = phi i64 [ %t105, %block_0_41dfc8 ]
  %t319 = phi i64 [ %t106, %block_0_41dfc8 ]
  %t320 = phi i64 [ %t108, %block_0_41dfc8 ]
  %t321 = phi i64 [ %t109, %block_0_41dfc8 ]
  %t322 = phi i64 [ %t110, %block_0_41dfc8 ]
  %t323 = phi i512 [ %t111, %block_0_41dfc8 ]
  ; r304 := (bv_add r302 (0xc : bv 64))
  %t324 = add i64 %t322, 12
  ; r305 := (read r304 (bv 32))
  %t325 = inttoptr i64 %t324 to i32*
  %t326 = load i32, i32* %t325
  ; r306 := (uext r305 64)
  %t327 = zext i32 %t326 to i64
  br label %block_0_41e0ae
block_0_41e0ae:
  %t328 = phi i64 [ %t327, %block_0_41e0a5 ], [ %t398, %block_0_41e11d ]
  %t329 = phi i64 [ %t317, %block_0_41e0a5 ], [ %t388, %block_0_41e11d ]
  %t330 = phi i64 [ %t318, %block_0_41e0a5 ], [ %t389, %block_0_41e11d ]
  %t331 = phi i64 [ %t319, %block_0_41e0a5 ], [ %t390, %block_0_41e11d ]
  %t332 = phi i64 [ 3, %block_0_41e0a5 ], [ 2, %block_0_41e11d ]
  %t333 = phi i64 [ %t320, %block_0_41e0a5 ], [ %t391, %block_0_41e11d ]
  %t334 = phi i64 [ %t321, %block_0_41e0a5 ], [ %t392, %block_0_41e11d ]
  %t335 = phi i512 [ %t323, %block_0_41e0a5 ], [ %t394, %block_0_41e11d ]
  ; r315 := (bv_add r309 (0xffffffffffffffff : bv 64))
  %t336 = add i64 %t330, 18446744073709551615
  ; r316 := (eq r309 (0x1 : bv 64))
  %t337 = icmp eq i64 %t330, 1
  ; r317 := (bv_add r307 (0xffffffffffffffff : bv 64))
  %t338 = add i64 %t328, 18446744073709551615
  ; r318 := (trunc r317 32)
  %t339 = trunc i64 %t338 to i32
  ; r319 := (uext r318 64)
  %t340 = zext i32 %t339 to i64
  br i1 %t337, label %block_0_41e0b8, label %block_0_41e071
block_0_41e0b8:
  %t341 = phi i64 [ %t329, %block_0_41e0ae ]
  %t342 = phi i64 [ %t332, %block_0_41e0ae ]
  %t343 = phi i64 [ %t340, %block_0_41e0ae ]
  ; r323 := (trunc r321 32)
  %t344 = trunc i64 %t342 to i32
  ; r324 := (bv_add r320 (0x4 : bv 64))
  %t345 = add i64 %t341, 4
  ; write r324 r323
  %t346 = inttoptr i64 %t345 to i32*
  store i32 %t344, i32* %t346
  ; r325 := (trunc r322 32)
  %t347 = trunc i64 %t343 to i32
  ; r326 := (bv_add r320 (0x8 : bv 64))
  %t348 = add i64 %t341, 8
  ; write r326 r325
  %t349 = inttoptr i64 %t348 to i32*
  store i32 %t347, i32* %t349
  ; write r320 (0x0 : bv 32)
  %t350 = inttoptr i64 %t341 to i32*
  store i32 0, i32* %t350
  br label %block_0_41df64
block_0_41e0d1:
  %t351 = phi i64 [ %t239, %block_0_41e044 ]
  %t352 = phi i64 [ %t240, %block_0_41e044 ]
  %t353 = phi i64 [ %t241, %block_0_41e044 ]
  %t354 = phi i64 [ %t242, %block_0_41e044 ]
  ; r331 := (read (0x631260 : bv 64) (bv 64))
  %t355 = inttoptr i64 6492768 to i64*
  %t356 = load i64, i64* %t355
  ; r332 := (bv_add r331 (0x1070 : bv 64))
  %t357 = add i64 %t356, 4208
  ; r333 := (read r332 (bv 64))
  %t358 = inttoptr i64 %t357 to i64*
  %t359 = load i64, i64* %t358
  ; r334 := (trunc r329 32)
  %t360 = trunc i64 %t353 to i32
  ; r335 := (sext r334 64)
  %t361 = sext i32 %t360 to i64
  ; r336 := (bv_add r333 (0x20 : bv 64))
  %t362 = add i64 %t359, 32
  ; r337 := (read r336 (bv 32))
  %t363 = inttoptr i64 %t362 to i32*
  %t364 = load i32, i32* %t363
  ; r338 := (bv_complement r337)
  %t365 = xor i32 %t364, -1
  ; r339 := (trunc r330 32)
  %t366 = trunc i64 %t354 to i32
  ; r340 := (bv_and r338 r339)
  %t367 = and i32 %t365, %t366
  ; r341 := (bv_mul (0x4 : bv 64) r335)
  %t368 = mul i64 4, %t361
  ; r342 := (bv_add r333 r341)
  %t369 = add i64 %t359, %t368
  ; r343 := (bv_add r342 (0x10 : bv 64))
  %t370 = add i64 %t369, 16
  ; r344 := (read r343 (bv 32))
  %t371 = inttoptr i64 %t370 to i32*
  %t372 = load i32, i32* %t371
  ; r345 := (bv_or r340 r344)
  %t373 = or i32 %t367, %t372
  ; r346 := (uext r345 64)
  %t374 = zext i32 %t373 to i64
  ; r347 := (eq r328 (0x0 : bv 64))
  %t375 = icmp eq i64 %t352, 0
  br i1 %t375, label %block_0_41e0f5, label %block_0_41e0f3
block_0_41e0f3:
  %t376 = phi i64 [ %t351, %block_0_41e0d1 ]
  %t377 = phi i64 [ %t352, %block_0_41e0d1 ]
  %t378 = phi i64 [ %t374, %block_0_41e0d1 ]
  ; r351 := (trunc r350 32)
  %t379 = trunc i64 %t378 to i32
  ; write r349 r351
  %t380 = inttoptr i64 %t377 to i32*
  store i32 %t379, i32* %t380
  br label %block_0_41e0f5
block_0_41e0f5:
  %t381 = phi i64 [ %t351, %block_0_41e0d1 ], [ %t376, %block_0_41e0f3 ]
  ; r353 := (bv_add r352 (0x8 : bv 64))
  %t382 = add i64 %t381, 8
  ; write r353 (0x0 : bv 32)
  %t383 = inttoptr i64 %t382 to i32*
  store i32 0, i32* %t383
  br label %block_0_41df64
block_0_41e10c:
  %t384 = phi i64 [ %t63, %block_0_41df8c ]
  %t385 = phi i64 [ %t66, %block_0_41df8c ]
  %t386 = phi i64 [ %t68, %block_0_41df8c ]
  %t387 = phi i512 [ %t69, %block_0_41df8c ]
  br label %block_0_41dfa2
block_0_41e11d:
  %t388 = phi i64 [ %t115, %block_0_41dfd4 ]
  %t389 = phi i64 [ %t116, %block_0_41dfd4 ]
  %t390 = phi i64 [ %t117, %block_0_41dfd4 ]
  %t391 = phi i64 [ %t119, %block_0_41dfd4 ]
  %t392 = phi i64 [ %t120, %block_0_41dfd4 ]
  %t393 = phi i64 [ %t121, %block_0_41dfd4 ]
  %t394 = phi i512 [ %t122, %block_0_41dfd4 ]
  ; r365 := (bv_add r363 (0x8 : bv 64))
  %t395 = add i64 %t393, 8
  ; r366 := (read r365 (bv 32))
  %t396 = inttoptr i64 %t395 to i32*
  %t397 = load i32, i32* %t396
  ; r367 := (uext r366 64)
  %t398 = zext i32 %t397 to i64
  br label %block_0_41e0ae
}
define void @_BIG5_init(i64 %arg0) {
block_0_41e320:
  ; write (0x6301b0 : bv 64) (0x41e3d0 : bv 64)
  %t0 = inttoptr i64 6488496 to i64*
  store i64 4318160, i64* %t0
  ; write (0x6301c8 : bv 64) (0x41e380 : bv 64)
  %t1 = inttoptr i64 6488520 to i64*
  store i64 4318080, i64* %t1
  ; write (0x6301b8 : bv 64) (0x41e360 : bv 64)
  %t2 = inttoptr i64 6488504 to i64*
  store i64 4318048, i64* %t2
  ; write (0x631260 : bv 64) arg0
  %t3 = inttoptr i64 6492768 to i64*
  store i64 %arg0, i64* %t3
  ; write (0x6301a8 : bv 64) (0x2 : bv 32)
  %t4 = inttoptr i64 6488488 to i32*
  store i32 2, i32* %t4
  ; write (0x6301ac : bv 64) (0x80 : bv 32)
  %t5 = inttoptr i64 6488492 to i32*
  store i32 128, i32* %t5
  ret void
}
define void @_BIG5_mbsinit(i64 %arg0) {
block_0_41e360:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  br i1 %t0, label %block_0_41e372, label %block_0_41e36a
block_0_41e36a:
  %t1 = phi i64 [ %arg0, %block_0_41e360 ]
  ; r2 := (read r1 (bv 32))
  %t2 = inttoptr i64 %t1 to i32*
  %t3 = load i32, i32* %t2
  br label %block_0_41e372
block_0_41e372:
  ret void
}
define void @_BIG5_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41e380:
  ; r0 := (read arg2 (bv 32))
  %t0 = inttoptr i64 %arg2 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  br i1 %t2, label %block_0_41e3a1, label %block_0_41e38a
block_0_41e38a:
  %t4 = phi i64 [ %arg2, %block_0_41e380 ]
  %t5 = phi i64 [ %arg1, %block_0_41e380 ]
  %t6 = phi i64 [ %arg0, %block_0_41e380 ]
  %t7 = phi i512 [ %t3, %block_0_41e380 ]
  ; r7 := (bitcast r6 (vec 8 double))
  %t8 = bitcast i512 %t7 to <8 x double>
  ; r8 := call __error_unthreaded(r5, r4, r3, r7)
  %t9 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t6, i64 %t5, i64 %t4, <8 x double> %t8)
  ; r9 := (tuple_field r8 0)
  %t10 = extractvalue { i64, i64, <8 x double> } %t9, 0
  ; r10 := (tuple_field r8 1)
  %t11 = extractvalue { i64, i64, <8 x double> } %t9, 1
  ; r11 := (tuple_field r8 2)
  %t12 = extractvalue { i64, i64, <8 x double> } %t9, 2
  ; r12 := (bitcast r11 (bv 512))
  %t13 = bitcast <8 x double> %t12 to i512
  br label %block_0_41e38f
block_0_41e38f:
  %t14 = phi i64 [ %t10, %block_0_41e38a ]
  ; write r13 (0x16 : bv 32)
  %t15 = inttoptr i64 %t14 to i32*
  store i32 22, i32* %t15
  br label %block_0_41e39c
block_0_41e39c:
  ret void
block_0_41e3a1:
  %t16 = phi i64 [ %arg1, %block_0_41e380 ]
  %t17 = phi i64 [ %arg0, %block_0_41e380 ]
  ; r16 := (eq r15 (0x0 : bv 64))
  %t18 = icmp eq i64 %t17, 0
  br i1 %t18, label %block_0_41e39c, label %block_0_41e3ab
block_0_41e3ab:
  %t19 = phi i64 [ %t16, %block_0_41e3a1 ]
  %t20 = phi i64 [ %t17, %block_0_41e3a1 ]
  ; r19 := (trunc r17 16)
  %t21 = trunc i64 %t19 to i16
  ; r20 := (bv_slt r19 (0x0 : bv 16))
  %t22 = icmp slt i16 %t21, 0
  br i1 %t22, label %block_0_41e3b0, label %block_0_41e3c2
block_0_41e3b0:
  %t23 = phi i64 [ %t19, %block_0_41e3ab ]
  %t24 = phi i64 [ %t20, %block_0_41e3ab ]
  ; r23 := (trunc r21 32)
  %t25 = trunc i64 %t23 to i32
  ; r24 := (trunc r21 8)
  %t26 = trunc i64 %t23 to i8
  ; r25 := (bv_add r22 (0x1 : bv 64))
  %t27 = add i64 %t24, 1
  ; write r25 r24
  %t28 = inttoptr i64 %t27 to i8*
  store i8 %t26, i8* %t28
  ; r26 := (bv_sar r23 (0x8 : bv 32))
  %t29 = ashr i32 %t25, 8
  ; r27 := (trunc r26 8)
  %t30 = trunc i32 %t29 to i8
  ; write r22 r27
  %t31 = inttoptr i64 %t24 to i8*
  store i8 %t30, i8* %t31
  br label %block_0_41e39c
block_0_41e3c2:
  %t32 = phi i64 [ %t19, %block_0_41e3ab ]
  %t33 = phi i64 [ %t20, %block_0_41e3ab ]
  ; r30 := (trunc r28 8)
  %t34 = trunc i64 %t32 to i8
  ; write r29 r30
  %t35 = inttoptr i64 %t33 to i8*
  store i8 %t34, i8* %t35
  br label %block_0_41e39c
}
define void @_BIG5_mbrtowc(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_41e3d0:
  ; r0 := (read arg3 (bv 32))
  %t0 = inttoptr i64 %arg3 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (bv_and r0 (0xffffff00 : bv 32))
  %t3 = and i32 %t1, 4294967040
  ; r3 := (eq r2 (0x0 : bv 32))
  %t4 = icmp eq i32 %t3, 0
  ; r4 := (bitcast arg4 (bv 512))
  %t5 = bitcast <8 x double> %arg4 to i512
  ; r5 := (bitcast arg4 (bv 512))
  %t6 = bitcast <8 x double> %arg4 to i512
  br i1 %t4, label %block_0_41e3f7, label %block_0_41e3e0
block_0_41e3e0:
  %t7 = phi i64 [ %arg2, %block_0_41e3d0 ]
  %t8 = phi i64 [ %arg1, %block_0_41e3d0 ]
  %t9 = phi i64 [ %arg0, %block_0_41e3d0 ]
  %t10 = phi i512 [ %t6, %block_0_41e3d0 ]
  ; r10 := (bitcast r9 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r11 := call __error_unthreaded(r8, r7, r6, r10)
  %t12 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t9, i64 %t8, i64 %t7, <8 x double> %t11)
  ; r12 := (tuple_field r11 0)
  %t13 = extractvalue { i64, i64, <8 x double> } %t12, 0
  ; r13 := (tuple_field r11 1)
  %t14 = extractvalue { i64, i64, <8 x double> } %t12, 1
  ; r14 := (tuple_field r11 2)
  %t15 = extractvalue { i64, i64, <8 x double> } %t12, 2
  ; r15 := (bitcast r14 (bv 512))
  %t16 = bitcast <8 x double> %t15 to i512
  br label %block_0_41e3e5
block_0_41e3e5:
  %t17 = phi i64 [ %t13, %block_0_41e3e0 ]
  ; write r16 (0x16 : bv 32)
  %t18 = inttoptr i64 %t17 to i32*
  store i32 22, i32* %t18
  br label %block_0_41e3f2
block_0_41e3f2:
  ret void
block_0_41e3f7:
  %t19 = phi i64 [ %arg3, %block_0_41e3d0 ]
  %t20 = phi i64 [ %arg2, %block_0_41e3d0 ]
  %t21 = phi i64 [ %arg1, %block_0_41e3d0 ]
  %t22 = phi i64 [ %arg0, %block_0_41e3d0 ]
  %t23 = phi i64 [ %t2, %block_0_41e3d0 ]
  %t24 = phi i512 [ %t5, %block_0_41e3d0 ]
  ; r23 := (eq r19 (0x0 : bv 64))
  %t25 = icmp eq i64 %t21, 0
  br i1 %t25, label %block_0_41e4ae, label %block_0_41e400
block_0_41e400:
  %t26 = phi i64 [ %t19, %block_0_41e3f7 ]
  %t27 = phi i64 [ %t20, %block_0_41e3f7 ]
  %t28 = phi i64 [ %t21, %block_0_41e3f7 ]
  %t29 = phi i64 [ %t22, %block_0_41e3f7 ]
  %t30 = phi i64 [ %t23, %block_0_41e3f7 ]
  %t31 = phi i512 [ %t24, %block_0_41e3f7 ]
  ; r30 := (eq r25 (0x0 : bv 64))
  %t32 = icmp eq i64 %t27, 0
  br i1 %t32, label %block_0_41e3f2, label %block_0_41e40c
block_0_41e40c:
  %t33 = phi i64 [ %t26, %block_0_41e400 ], [ %t137, %block_0_41e4ae ]
  %t34 = phi i64 [ %t27, %block_0_41e400 ], [ 1, %block_0_41e4ae ]
  %t35 = phi i64 [ %t28, %block_0_41e400 ], [ 4363506, %block_0_41e4ae ]
  %t36 = phi i64 [ %t29, %block_0_41e400 ], [ 0, %block_0_41e4ae ]
  %t37 = phi i64 [ %t30, %block_0_41e400 ], [ %t138, %block_0_41e4ae ]
  %t38 = phi i512 [ %t31, %block_0_41e400 ], [ %t139, %block_0_41e4ae ]
  ; r37 := (trunc r35 32)
  %t39 = trunc i64 %t37 to i32
  ; r38 := (eq r37 (0x0 : bv 32))
  %t40 = icmp eq i32 %t39, 0
  br i1 %t40, label %block_0_41e412, label %block_0_41e434
block_0_41e412:
  %t41 = phi i64 [ %t33, %block_0_41e40c ]
  %t42 = phi i64 [ %t34, %block_0_41e40c ]
  %t43 = phi i64 [ %t35, %block_0_41e40c ]
  %t44 = phi i64 [ %t36, %block_0_41e40c ]
  %t45 = phi i512 [ %t38, %block_0_41e40c ]
  ; r44 := (read r41 (bv 8))
  %t46 = inttoptr i64 %t43 to i8*
  %t47 = load i8, i8* %t46
  ; r45 := (uext r44 64)
  %t48 = zext i8 %t47 to i64
  ; r46 := (bv_add r45 (0xffffffffffffff5f : bv 64))
  %t49 = add i64 %t48, 18446744073709551455
  ; r47 := (trunc r46 32)
  %t50 = trunc i64 %t49 to i32
  ; r48 := (eq r47 (0x5d : bv 32))
  %t51 = icmp eq i32 %t50, 93
  ; r49 := (bv_ule (0x5d : bv 32) r47)
  %t52 = icmp ule i32 93, %t50
  ; r50 := (not r48)
  %t53 = icmp eq i1 %t51, 0
  ; r51 := (and r49 r50)
  %t54 = and i1 %t52, %t53
  br i1 %t54, label %block_0_41e44f, label %block_0_41e422
block_0_41e422:
  %t55 = phi i64 [ %t41, %block_0_41e412 ]
  %t56 = phi i64 [ %t42, %block_0_41e412 ]
  %t57 = phi i64 [ %t43, %block_0_41e412 ]
  %t58 = phi i64 [ %t44, %block_0_41e412 ]
  %t59 = phi i64 [ %t48, %block_0_41e412 ]
  %t60 = phi i512 [ %t45, %block_0_41e412 ]
  ; r58 := (eq r53 (0x1 : bv 64))
  %t61 = icmp eq i64 %t56, 1
  ; r59 := (bv_ule (0x1 : bv 64) r53)
  %t62 = icmp ule i64 1, %t56
  ; r60 := (not r58)
  %t63 = icmp eq i1 %t61, 0
  ; r61 := (and r59 r60)
  %t64 = and i1 %t62, %t63
  br i1 %t64, label %block_0_41e482, label %block_0_41e428
block_0_41e428:
  %t65 = phi i64 [ %t55, %block_0_41e422 ]
  %t66 = phi i64 [ %t59, %block_0_41e422 ]
  ; r64 := (trunc r63 32)
  %t67 = trunc i64 %t66 to i32
  ; write r62 r64
  %t68 = inttoptr i64 %t65 to i32*
  store i32 %t67, i32* %t68
  br label %block_0_41e3f2
block_0_41e434:
  %t69 = phi i64 [ %t33, %block_0_41e40c ]
  %t70 = phi i64 [ %t34, %block_0_41e40c ]
  %t71 = phi i64 [ %t35, %block_0_41e40c ]
  %t72 = phi i64 [ %t36, %block_0_41e40c ]
  %t73 = phi i64 [ %t37, %block_0_41e40c ]
  %t74 = phi i512 [ %t38, %block_0_41e40c ]
  ; r71 := (read r67 (bv 8))
  %t75 = inttoptr i64 %t71 to i8*
  %t76 = load i8, i8* %t75
  ; r72 := (uext r71 64)
  %t77 = zext i8 %t76 to i64
  ; r73 := (eq r71 (0x0 : bv 8))
  %t78 = icmp eq i8 %t76, 0
  br i1 %t78, label %block_0_41e43b, label %block_0_41e461
block_0_41e43b:
  %t79 = phi i64 [ %t70, %block_0_41e434 ], [ %t122, %block_0_41e482 ]
  %t80 = phi i64 [ %t71, %block_0_41e434 ], [ %t115, %block_0_41e482 ]
  %t81 = phi i64 [ %t72, %block_0_41e434 ], [ %t116, %block_0_41e482 ]
  %t82 = phi i512 [ %t74, %block_0_41e434 ], [ %t118, %block_0_41e482 ]
  ; r78 := (bitcast r77 (vec 8 double))
  %t83 = bitcast i512 %t82 to <8 x double>
  ; r79 := call __error_unthreaded(r76, r75, r74, r78)
  %t84 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t81, i64 %t80, i64 %t79, <8 x double> %t83)
  ; r80 := (tuple_field r79 0)
  %t85 = extractvalue { i64, i64, <8 x double> } %t84, 0
  ; r81 := (tuple_field r79 1)
  %t86 = extractvalue { i64, i64, <8 x double> } %t84, 1
  ; r82 := (tuple_field r79 2)
  %t87 = extractvalue { i64, i64, <8 x double> } %t84, 2
  ; r83 := (bitcast r82 (bv 512))
  %t88 = bitcast <8 x double> %t87 to i512
  br label %block_0_41e440
block_0_41e440:
  %t89 = phi i64 [ %t85, %block_0_41e43b ]
  ; write r84 (0x56 : bv 32)
  %t90 = inttoptr i64 %t89 to i32*
  store i32 86, i32* %t90
  br label %block_0_41e3f2
block_0_41e44f:
  %t91 = phi i64 [ %t44, %block_0_41e412 ]
  %t92 = phi i64 [ %t48, %block_0_41e412 ]
  ; r87 := (eq r85 (0x0 : bv 64))
  %t93 = icmp eq i64 %t91, 0
  br i1 %t93, label %block_0_41e457, label %block_0_41e454
block_0_41e454:
  %t94 = phi i64 [ %t91, %block_0_41e44f ]
  %t95 = phi i64 [ %t92, %block_0_41e44f ]
  ; r90 := (trunc r89 32)
  %t96 = trunc i64 %t95 to i32
  ; write r88 r90
  %t97 = inttoptr i64 %t94 to i32*
  store i32 %t96, i32* %t97
  br label %block_0_41e457
block_0_41e457:
  br label %block_0_41e3f2
block_0_41e461:
  %t98 = phi i64 [ %t77, %block_0_41e434 ]
  %t99 = phi i64 [ %t69, %block_0_41e434 ]
  %t100 = phi i64 [ %t72, %block_0_41e434 ]
  %t101 = phi i64 [ %t73, %block_0_41e434 ]
  ; r95 := (eq r93 (0x0 : bv 64))
  %t102 = icmp eq i64 %t100, 0
  br i1 %t102, label %block_0_41e472, label %block_0_41e466
block_0_41e466:
  %t103 = phi i64 [ %t98, %block_0_41e461 ]
  %t104 = phi i64 [ %t99, %block_0_41e461 ]
  %t105 = phi i64 [ %t100, %block_0_41e461 ]
  %t106 = phi i64 [ %t101, %block_0_41e461 ]
  ; r100 := (trunc r96 8)
  %t107 = trunc i64 %t103 to i8
  ; r101 := (uext r100 32)
  %t108 = zext i8 %t107 to i32
  ; r102 := (trunc r99 32)
  %t109 = trunc i64 %t106 to i32
  ; r103 := (bv_shl r102 (0x8 : bv 32))
  %t110 = shl i32 %t109, 8
  ; r104 := (bv_or r101 r103)
  %t111 = or i32 %t108, %t110
  ; write r98 r104
  %t112 = inttoptr i64 %t105 to i32*
  store i32 %t111, i32* %t112
  br label %block_0_41e472
block_0_41e472:
  %t113 = phi i64 [ %t99, %block_0_41e461 ], [ %t104, %block_0_41e466 ]
  ; write r105 (0x0 : bv 32)
  %t114 = inttoptr i64 %t113 to i32*
  store i32 0, i32* %t114
  br label %block_0_41e3f2
block_0_41e482:
  %t115 = phi i64 [ %t57, %block_0_41e422 ]
  %t116 = phi i64 [ %t58, %block_0_41e422 ]
  %t117 = phi i64 [ %t59, %block_0_41e422 ]
  %t118 = phi i512 [ %t60, %block_0_41e422 ]
  ; r110 := (bv_add r106 (0x1 : bv 64))
  %t119 = add i64 %t115, 1
  ; r111 := (read r110 (bv 8))
  %t120 = inttoptr i64 %t119 to i8*
  %t121 = load i8, i8* %t120
  ; r112 := (uext r111 64)
  %t122 = zext i8 %t121 to i64
  ; r113 := (eq r111 (0x0 : bv 8))
  %t123 = icmp eq i8 %t121, 0
  br i1 %t123, label %block_0_41e43b, label %block_0_41e48a
block_0_41e48a:
  %t124 = phi i64 [ %t122, %block_0_41e482 ]
  %t125 = phi i64 [ %t116, %block_0_41e482 ]
  %t126 = phi i64 [ %t117, %block_0_41e482 ]
  ; r117 := (eq r115 (0x0 : bv 64))
  %t127 = icmp eq i64 %t125, 0
  br i1 %t127, label %block_0_41e3f2, label %block_0_41e498
block_0_41e498:
  %t128 = phi i64 [ %t124, %block_0_41e48a ]
  %t129 = phi i64 [ %t125, %block_0_41e48a ]
  %t130 = phi i64 [ %t126, %block_0_41e48a ]
  ; r121 := (trunc r118 8)
  %t131 = trunc i64 %t128 to i8
  ; r122 := (uext r121 32)
  %t132 = zext i8 %t131 to i32
  ; r123 := (trunc r120 32)
  %t133 = trunc i64 %t130 to i32
  ; r124 := (bv_shl r123 (0x8 : bv 32))
  %t134 = shl i32 %t133, 8
  ; r125 := (bv_or r122 r124)
  %t135 = or i32 %t132, %t134
  ; write r119 r125
  %t136 = inttoptr i64 %t129 to i32*
  store i32 %t135, i32* %t136
  br label %block_0_41e3f2
block_0_41e4ae:
  %t137 = phi i64 [ %t19, %block_0_41e3f7 ]
  %t138 = phi i64 [ %t23, %block_0_41e3f7 ]
  %t139 = phi i512 [ %t24, %block_0_41e3f7 ]
  br label %block_0_41e40c
}
define void @_ascii_init(i64 %arg0) {
block_0_41e4c0:
  ; write (0x6301b0 : bv 64) (0x41e730 : bv 64)
  %t0 = inttoptr i64 6488496 to i64*
  store i64 4319024, i64* %t0
  ; write (0x6301b8 : bv 64) (0x41e520 : bv 64)
  %t1 = inttoptr i64 6488504 to i64*
  store i64 4318496, i64* %t1
  ; write (0x6301c0 : bv 64) (0x41e600 : bv 64)
  %t2 = inttoptr i64 6488512 to i64*
  store i64 4318720, i64* %t2
  ; write (0x6301c8 : bv 64) (0x41e6f0 : bv 64)
  %t3 = inttoptr i64 6488520 to i64*
  store i64 4318960, i64* %t3
  ; write (0x6301d0 : bv 64) (0x41e530 : bv 64)
  %t4 = inttoptr i64 6488528 to i64*
  store i64 4318512, i64* %t4
  ; write (0x631260 : bv 64) arg0
  %t5 = inttoptr i64 6492768 to i64*
  store i64 %arg0, i64* %t5
  ; write (0x6301a8 : bv 64) (0x1 : bv 32)
  %t6 = inttoptr i64 6488488 to i32*
  store i32 1, i32* %t6
  ; write (0x6301ac : bv 64) (0x80 : bv 32)
  %t7 = inttoptr i64 6488492 to i32*
  store i32 128, i32* %t7
  ret void
}
define void @_ascii_mbsinit() {
block_0_41e520:
  ret void
}
define void @_ascii_wcsnrtombs(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_41e530:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg4 (bv 512))
  %t1 = bitcast <8 x double> %arg4 to i512
  ; r2 := (bitcast arg4 (bv 512))
  %t2 = bitcast <8 x double> %arg4 to i512
  br i1 %t0, label %block_0_41e5b5, label %block_0_41e539
block_0_41e539:
  %t3 = phi i64 [ %arg3, %block_0_41e530 ]
  %t4 = phi i64 [ %arg2, %block_0_41e530 ]
  %t5 = phi i64 [ %arg1, %block_0_41e530 ]
  %t6 = phi i64 [ %arg0, %block_0_41e530 ]
  %t7 = phi i512 [ %t2, %block_0_41e530 ]
  ; r8 := (eq r3 (0x0 : bv 64))
  %t8 = icmp eq i64 %t3, 0
  ; r9 := (read r5 (bv 64))
  %t9 = inttoptr i64 %t5 to i64*
  %t10 = load i64, i64* %t9
  br i1 %t8, label %block_0_41e5f1, label %block_0_41e545
block_0_41e545:
  %t11 = phi i64 [ %t3, %block_0_41e539 ]
  %t12 = phi i64 [ %t4, %block_0_41e539 ]
  %t13 = phi i64 [ %t5, %block_0_41e539 ]
  %t14 = phi i64 [ %t6, %block_0_41e539 ]
  %t15 = phi i64 [ %t10, %block_0_41e539 ]
  %t16 = phi i512 [ %t7, %block_0_41e539 ]
  ; r16 := (eq r11 (0x0 : bv 64))
  %t17 = icmp eq i64 %t12, 0
  br i1 %t17, label %block_0_41e5f1, label %block_0_41e54e
block_0_41e54e:
  %t18 = phi i64 [ %t11, %block_0_41e545 ]
  %t19 = phi i64 [ %t12, %block_0_41e545 ]
  %t20 = phi i64 [ %t13, %block_0_41e545 ]
  %t21 = phi i64 [ %t14, %block_0_41e545 ]
  %t22 = phi i64 [ %t15, %block_0_41e545 ]
  %t23 = phi i512 [ %t16, %block_0_41e545 ]
  ; r23 := (read r21 (bv 32))
  %t24 = inttoptr i64 %t22 to i32*
  %t25 = load i32, i32* %t24
  ; r24 := (uext r23 64)
  %t26 = zext i32 %t25 to i64
  ; r25 := (eq r23 (0x7f : bv 32))
  %t27 = icmp eq i32 %t25, 127
  ; r26 := (bv_ule (0x7f : bv 32) r23)
  %t28 = icmp ule i32 127, %t25
  ; r27 := (not r25)
  %t29 = icmp eq i1 %t27, 0
  ; r28 := (and r26 r27)
  %t30 = and i1 %t28, %t29
  br i1 %t30, label %block_0_41e590, label %block_0_41e556
block_0_41e556:
  %t31 = phi i64 [ %t26, %block_0_41e54e ]
  %t32 = phi i64 [ %t18, %block_0_41e54e ]
  %t33 = phi i64 [ %t19, %block_0_41e54e ]
  %t34 = phi i64 [ %t20, %block_0_41e54e ]
  %t35 = phi i64 [ %t21, %block_0_41e54e ]
  %t36 = phi i64 [ %t22, %block_0_41e54e ]
  %t37 = phi i512 [ %t23, %block_0_41e54e ]
  ; r36 := (trunc r29 8)
  %t38 = trunc i64 %t31 to i8
  ; r37 := (eq r36 (0x0 : bv 8))
  %t39 = icmp eq i8 %t38, 0
  ; write r33 r36
  %t40 = inttoptr i64 %t35 to i8*
  store i8 %t38, i8* %t40
  br i1 %t39, label %block_0_41e5a7, label %block_0_41e55c
block_0_41e55c:
  %t41 = phi i64 [ %t32, %block_0_41e556 ]
  %t42 = phi i64 [ %t33, %block_0_41e556 ]
  %t43 = phi i64 [ %t34, %block_0_41e556 ]
  %t44 = phi i64 [ %t35, %block_0_41e556 ]
  %t45 = phi i64 [ %t36, %block_0_41e556 ]
  %t46 = phi i512 [ %t37, %block_0_41e556 ]
  ; r44 := (bv_add r42 (0x4 : bv 64))
  %t47 = add i64 %t45, 4
  br label %block_0_41e57f
block_0_41e564:
  %t48 = phi i64 [ %t97, %block_0_41e57f ]
  %t49 = phi i64 [ %t91, %block_0_41e57f ]
  %t50 = phi i64 [ %t92, %block_0_41e57f ]
  %t51 = phi i64 [ %t93, %block_0_41e57f ]
  %t52 = phi i64 [ %t94, %block_0_41e57f ]
  %t53 = phi i64 [ %t95, %block_0_41e57f ]
  %t54 = phi i512 [ %t96, %block_0_41e57f ]
  ; r52 := (eq r45 r47)
  %t55 = icmp eq i64 %t48, %t50
  br i1 %t55, label %block_0_41e588, label %block_0_41e569
block_0_41e569:
  %t56 = phi i64 [ %t48, %block_0_41e564 ]
  %t57 = phi i64 [ %t49, %block_0_41e564 ]
  %t58 = phi i64 [ %t50, %block_0_41e564 ]
  %t59 = phi i64 [ %t51, %block_0_41e564 ]
  %t60 = phi i64 [ %t52, %block_0_41e564 ]
  %t61 = phi i64 [ %t53, %block_0_41e564 ]
  %t62 = phi i512 [ %t54, %block_0_41e564 ]
  ; r60 := (read r58 (bv 32))
  %t63 = inttoptr i64 %t61 to i32*
  %t64 = load i32, i32* %t63
  ; r61 := (uext r60 64)
  %t65 = zext i32 %t64 to i64
  ; r62 := (eq r60 (0x7f : bv 32))
  %t66 = icmp eq i32 %t64, 127
  ; r63 := (bv_ule (0x7f : bv 32) r60)
  %t67 = icmp ule i32 127, %t64
  ; r64 := (not r62)
  %t68 = icmp eq i1 %t66, 0
  ; r65 := (and r63 r64)
  %t69 = and i1 %t67, %t68
  br i1 %t69, label %block_0_41e590, label %block_0_41e572
block_0_41e572:
  %t70 = phi i64 [ %t56, %block_0_41e569 ]
  %t71 = phi i64 [ %t57, %block_0_41e569 ]
  %t72 = phi i64 [ %t58, %block_0_41e569 ]
  %t73 = phi i64 [ %t59, %block_0_41e569 ]
  %t74 = phi i64 [ %t60, %block_0_41e569 ]
  %t75 = phi i64 [ %t65, %block_0_41e569 ]
  %t76 = phi i64 [ %t61, %block_0_41e569 ]
  %t77 = phi i512 [ %t62, %block_0_41e569 ]
  ; r74 := (trunc r71 8)
  %t78 = trunc i64 %t75 to i8
  ; r75 := (eq r74 (0x0 : bv 8))
  %t79 = icmp eq i8 %t78, 0
  ; r76 := (bv_add r66 r70)
  %t80 = add i64 %t70, %t74
  ; write r76 r74
  %t81 = inttoptr i64 %t80 to i8*
  store i8 %t78, i8* %t81
  br i1 %t79, label %block_0_41e5a9, label %block_0_41e57b
block_0_41e57b:
  %t82 = phi i64 [ %t70, %block_0_41e572 ]
  %t83 = phi i64 [ %t71, %block_0_41e572 ]
  %t84 = phi i64 [ %t72, %block_0_41e572 ]
  %t85 = phi i64 [ %t73, %block_0_41e572 ]
  %t86 = phi i64 [ %t74, %block_0_41e572 ]
  %t87 = phi i64 [ %t76, %block_0_41e572 ]
  %t88 = phi i512 [ %t77, %block_0_41e572 ]
  ; r84 := (bv_add r82 (0x4 : bv 64))
  %t89 = add i64 %t87, 4
  br label %block_0_41e57f
block_0_41e57f:
  %t90 = phi i64 [ 0, %block_0_41e55c ], [ %t82, %block_0_41e57b ]
  %t91 = phi i64 [ %t41, %block_0_41e55c ], [ %t83, %block_0_41e57b ]
  %t92 = phi i64 [ %t42, %block_0_41e55c ], [ %t84, %block_0_41e57b ]
  %t93 = phi i64 [ %t43, %block_0_41e55c ], [ %t85, %block_0_41e57b ]
  %t94 = phi i64 [ %t44, %block_0_41e55c ], [ %t86, %block_0_41e57b ]
  %t95 = phi i64 [ %t47, %block_0_41e55c ], [ %t89, %block_0_41e57b ]
  %t96 = phi i512 [ %t46, %block_0_41e55c ], [ %t88, %block_0_41e57b ]
  ; r92 := (bv_add r85 (0x1 : bv 64))
  %t97 = add i64 %t90, 1
  ; r93 := (eq r92 r86)
  %t98 = icmp eq i64 %t97, %t91
  br i1 %t98, label %block_0_41e588, label %block_0_41e564
block_0_41e588:
  %t99 = phi i64 [ %t51, %block_0_41e564 ], [ %t93, %block_0_41e57f ], [ %t173, %block_0_41e5f1 ]
  %t100 = phi i64 [ %t53, %block_0_41e564 ], [ %t95, %block_0_41e57f ], [ %t174, %block_0_41e5f1 ]
  ; write r94 r95
  %t101 = inttoptr i64 %t99 to i64*
  store i64 %t100, i64* %t101
  br label %block_0_41e58b
block_0_41e58b:
  ret void
block_0_41e590:
  %t102 = phi i64 [ %t19, %block_0_41e54e ], [ %t58, %block_0_41e569 ], [ %t142, %block_0_41e5cb ], [ %t156, %block_0_41e5d6 ]
  %t103 = phi i64 [ %t20, %block_0_41e54e ], [ %t59, %block_0_41e569 ], [ %t141, %block_0_41e5cb ], [ %t157, %block_0_41e5d6 ]
  %t104 = phi i64 [ %t21, %block_0_41e54e ], [ %t60, %block_0_41e569 ], [ %t143, %block_0_41e5cb ], [ %t158, %block_0_41e5d6 ]
  %t105 = phi i512 [ %t23, %block_0_41e54e ], [ %t62, %block_0_41e569 ], [ %t144, %block_0_41e5cb ], [ %t159, %block_0_41e5d6 ]
  ; r100 := (bitcast r99 (vec 8 double))
  %t106 = bitcast i512 %t105 to <8 x double>
  ; r101 := call __error_unthreaded(r98, r97, r96, r100)
  %t107 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t104, i64 %t103, i64 %t102, <8 x double> %t106)
  ; r102 := (tuple_field r101 0)
  %t108 = extractvalue { i64, i64, <8 x double> } %t107, 0
  ; r103 := (tuple_field r101 1)
  %t109 = extractvalue { i64, i64, <8 x double> } %t107, 1
  ; r104 := (tuple_field r101 2)
  %t110 = extractvalue { i64, i64, <8 x double> } %t107, 2
  ; r105 := (bitcast r104 (bv 512))
  %t111 = bitcast <8 x double> %t110 to i512
  br label %block_0_41e595
block_0_41e595:
  %t112 = phi i64 [ %t108, %block_0_41e590 ]
  ; write r106 (0x56 : bv 32)
  %t113 = inttoptr i64 %t112 to i32*
  store i32 86, i32* %t113
  ret void
block_0_41e5a7:
  %t114 = phi i64 [ %t34, %block_0_41e556 ]
  br label %block_0_41e5a9
block_0_41e5a9:
  %t115 = phi i64 [ %t73, %block_0_41e572 ], [ %t114, %block_0_41e5a7 ]
  ; write r108 (0x0 : bv 64)
  %t116 = inttoptr i64 %t115 to i64*
  store i64 0, i64* %t116
  ret void
block_0_41e5b5:
  %t117 = phi i64 [ %arg2, %block_0_41e530 ]
  %t118 = phi i64 [ %arg1, %block_0_41e530 ]
  %t119 = phi i64 [ %arg0, %block_0_41e530 ]
  %t120 = phi i512 [ %t1, %block_0_41e530 ]
  ; r113 := (eq r109 (0x0 : bv 64))
  %t121 = icmp eq i64 %t117, 0
  ; r114 := (read r110 (bv 64))
  %t122 = inttoptr i64 %t118 to i64*
  %t123 = load i64, i64* %t122
  br i1 %t121, label %block_0_41e5f5, label %block_0_41e5bd
block_0_41e5bd:
  %t124 = phi i64 [ %t117, %block_0_41e5b5 ]
  %t125 = phi i64 [ %t123, %block_0_41e5b5 ]
  %t126 = phi i64 [ %t119, %block_0_41e5b5 ]
  %t127 = phi i512 [ %t120, %block_0_41e5b5 ]
  ; r119 := (read r116 (bv 32))
  %t128 = inttoptr i64 %t125 to i32*
  %t129 = load i32, i32* %t128
  ; r120 := (uext r119 64)
  %t130 = zext i32 %t129 to i64
  ; r121 := (eq r119 (0x0 : bv 32))
  %t131 = icmp eq i32 %t129, 0
  br i1 %t131, label %block_0_41e5f5, label %block_0_41e5c3
block_0_41e5c3:
  %t132 = phi i64 [ %t130, %block_0_41e5bd ]
  %t133 = phi i64 [ %t124, %block_0_41e5bd ]
  %t134 = phi i64 [ %t125, %block_0_41e5bd ]
  %t135 = phi i64 [ %t126, %block_0_41e5bd ]
  %t136 = phi i512 [ %t127, %block_0_41e5bd ]
  ; r127 := (trunc r122 32)
  %t137 = trunc i64 %t132 to i32
  ; r128 := (bv_ult r127 (0x7f : bv 32))
  %t138 = icmp ult i32 %t137, 127
  ; r129 := (eq r127 (0x7f : bv 32))
  %t139 = icmp eq i32 %t137, 127
  ; r130 := (or r128 r129)
  %t140 = or i1 %t138, %t139
  br i1 %t140, label %block_0_41e5db, label %block_0_41e5cb
block_0_41e5cb:
  %t141 = phi i64 [ %t134, %block_0_41e5c3 ]
  %t142 = phi i64 [ %t133, %block_0_41e5c3 ]
  %t143 = phi i64 [ %t135, %block_0_41e5c3 ]
  %t144 = phi i512 [ %t136, %block_0_41e5c3 ]
  br label %block_0_41e590
block_0_41e5d0:
  %t145 = phi i64 [ %t170, %block_0_41e5db ]
  %t146 = phi i64 [ %t171, %block_0_41e5db ]
  %t147 = phi i64 [ %t167, %block_0_41e5db ]
  %t148 = phi i64 [ %t168, %block_0_41e5db ]
  %t149 = phi i512 [ %t169, %block_0_41e5db ]
  ; r140 := (read r135 (bv 32))
  %t150 = inttoptr i64 %t145 to i32*
  %t151 = load i32, i32* %t150
  ; r141 := (uext r140 64)
  %t152 = zext i32 %t151 to i64
  ; r142 := (eq r140 (0x0 : bv 32))
  %t153 = icmp eq i32 %t151, 0
  br i1 %t153, label %block_0_41e5e5, label %block_0_41e5d6
block_0_41e5d6:
  %t154 = phi i64 [ %t145, %block_0_41e5d0 ]
  %t155 = phi i64 [ %t152, %block_0_41e5d0 ]
  %t156 = phi i64 [ %t146, %block_0_41e5d0 ]
  %t157 = phi i64 [ %t147, %block_0_41e5d0 ]
  %t158 = phi i64 [ %t148, %block_0_41e5d0 ]
  %t159 = phi i512 [ %t149, %block_0_41e5d0 ]
  ; r149 := (trunc r144 32)
  %t160 = trunc i64 %t155 to i32
  ; r150 := (eq r149 (0x7f : bv 32))
  %t161 = icmp eq i32 %t160, 127
  ; r151 := (bv_ule (0x7f : bv 32) r149)
  %t162 = icmp ule i32 127, %t160
  ; r152 := (not r150)
  %t163 = icmp eq i1 %t161, 0
  ; r153 := (and r151 r152)
  %t164 = and i1 %t162, %t163
  br i1 %t164, label %block_0_41e590, label %block_0_41e5db
block_0_41e5db:
  %t165 = phi i64 [ %t134, %block_0_41e5c3 ], [ %t154, %block_0_41e5d6 ]
  %t166 = phi i64 [ %t133, %block_0_41e5c3 ], [ %t156, %block_0_41e5d6 ]
  %t167 = phi i64 [ %t134, %block_0_41e5c3 ], [ %t157, %block_0_41e5d6 ]
  %t168 = phi i64 [ %t135, %block_0_41e5c3 ], [ %t158, %block_0_41e5d6 ]
  %t169 = phi i512 [ %t136, %block_0_41e5c3 ], [ %t159, %block_0_41e5d6 ]
  ; r159 := (bv_add r154 (0x4 : bv 64))
  %t170 = add i64 %t165, 4
  ; r160 := (bv_add r155 (0xffffffffffffffff : bv 64))
  %t171 = add i64 %t166, 18446744073709551615
  ; r161 := (eq r155 (0x1 : bv 64))
  %t172 = icmp eq i64 %t166, 1
  br i1 %t172, label %block_0_41e5e5, label %block_0_41e5d0
block_0_41e5e5:
  ret void
block_0_41e5f1:
  %t173 = phi i64 [ %t5, %block_0_41e539 ], [ %t13, %block_0_41e545 ]
  %t174 = phi i64 [ %t10, %block_0_41e539 ], [ %t15, %block_0_41e545 ]
  br label %block_0_41e588
block_0_41e5f5:
  br label %block_0_41e58b
}
define void @_ascii_mbsnrtowcs(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_41e600:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg4 (bv 512))
  %t1 = bitcast <8 x double> %arg4 to i512
  ; r2 := (bitcast arg4 (bv 512))
  %t2 = bitcast <8 x double> %arg4 to i512
  br i1 %t0, label %block_0_41e69f, label %block_0_41e60d
block_0_41e60d:
  %t3 = phi i64 [ %arg3, %block_0_41e600 ]
  %t4 = phi i64 [ %arg2, %block_0_41e600 ]
  %t5 = phi i64 [ %arg1, %block_0_41e600 ]
  %t6 = phi i64 [ %arg0, %block_0_41e600 ]
  %t7 = phi i512 [ %t2, %block_0_41e600 ]
  ; r8 := (eq r3 (0x0 : bv 64))
  %t8 = icmp eq i64 %t3, 0
  ; r9 := (read r5 (bv 64))
  %t9 = inttoptr i64 %t5 to i64*
  %t10 = load i64, i64* %t9
  br i1 %t8, label %block_0_41e6e0, label %block_0_41e619
block_0_41e619:
  %t11 = phi i64 [ %t3, %block_0_41e60d ]
  %t12 = phi i64 [ %t4, %block_0_41e60d ]
  %t13 = phi i64 [ %t5, %block_0_41e60d ]
  %t14 = phi i64 [ %t6, %block_0_41e60d ]
  %t15 = phi i64 [ %t10, %block_0_41e60d ]
  %t16 = phi i512 [ %t7, %block_0_41e60d ]
  ; r16 := (eq r11 (0x0 : bv 64))
  %t17 = icmp eq i64 %t12, 0
  br i1 %t17, label %block_0_41e6e0, label %block_0_41e622
block_0_41e622:
  %t18 = phi i64 [ %t11, %block_0_41e619 ]
  %t19 = phi i64 [ %t12, %block_0_41e619 ]
  %t20 = phi i64 [ %t13, %block_0_41e619 ]
  %t21 = phi i64 [ %t14, %block_0_41e619 ]
  %t22 = phi i64 [ %t15, %block_0_41e619 ]
  %t23 = phi i512 [ %t16, %block_0_41e619 ]
  ; r23 := (read r21 (bv 8))
  %t24 = inttoptr i64 %t22 to i8*
  %t25 = load i8, i8* %t24
  ; r24 := (uext r23 64)
  %t26 = zext i8 %t25 to i64
  ; r25 := (bv_slt r23 (0x0 : bv 8))
  %t27 = icmp slt i8 %t25, 0
  br i1 %t27, label %block_0_41e673, label %block_0_41e62b
block_0_41e62b:
  %t28 = phi i64 [ %t18, %block_0_41e622 ]
  %t29 = phi i64 [ %t19, %block_0_41e622 ]
  %t30 = phi i64 [ %t20, %block_0_41e622 ]
  %t31 = phi i64 [ %t21, %block_0_41e622 ]
  %t32 = phi i64 [ %t26, %block_0_41e622 ]
  %t33 = phi i64 [ %t22, %block_0_41e622 ]
  %t34 = phi i512 [ %t23, %block_0_41e622 ]
  ; r33 := (trunc r30 8)
  %t35 = trunc i64 %t32 to i8
  ; r34 := (uext r33 32)
  %t36 = zext i8 %t35 to i32
  ; r35 := (eq r33 (0x0 : bv 8))
  %t37 = icmp eq i8 %t35, 0
  ; write r29 r34
  %t38 = inttoptr i64 %t31 to i32*
  store i32 %t36, i32* %t38
  br i1 %t37, label %block_0_41e68d, label %block_0_41e636
block_0_41e636:
  %t39 = phi i64 [ %t28, %block_0_41e62b ]
  %t40 = phi i64 [ %t29, %block_0_41e62b ]
  %t41 = phi i64 [ %t30, %block_0_41e62b ]
  %t42 = phi i64 [ %t31, %block_0_41e62b ]
  %t43 = phi i64 [ %t33, %block_0_41e62b ]
  %t44 = phi i512 [ %t34, %block_0_41e62b ]
  ; r42 := (bv_add r40 (0x1 : bv 64))
  %t45 = add i64 %t43, 1
  br label %block_0_41e65f
block_0_41e640:
  %t46 = phi i64 [ %t87, %block_0_41e65f ]
  %t47 = phi i64 [ %t88, %block_0_41e65f ]
  %t48 = phi i64 [ %t89, %block_0_41e65f ]
  %t49 = phi i64 [ %t90, %block_0_41e65f ]
  %t50 = phi i64 [ %t91, %block_0_41e65f ]
  %t51 = phi i64 [ %t94, %block_0_41e65f ]
  %t52 = phi i512 [ %t93, %block_0_41e65f ]
  ; r50 := (eq r48 r44)
  %t53 = icmp eq i64 %t51, %t47
  br i1 %t53, label %block_0_41e668, label %block_0_41e645
block_0_41e645:
  %t54 = phi i64 [ %t46, %block_0_41e640 ]
  %t55 = phi i64 [ %t47, %block_0_41e640 ]
  %t56 = phi i64 [ %t48, %block_0_41e640 ]
  %t57 = phi i64 [ %t49, %block_0_41e640 ]
  %t58 = phi i64 [ %t50, %block_0_41e640 ]
  %t59 = phi i64 [ %t51, %block_0_41e640 ]
  %t60 = phi i512 [ %t52, %block_0_41e640 ]
  ; r58 := (read r55 (bv 8))
  %t61 = inttoptr i64 %t58 to i8*
  %t62 = load i8, i8* %t61
  ; r59 := (uext r58 64)
  %t63 = zext i8 %t62 to i64
  ; r60 := (bv_slt r58 (0x0 : bv 8))
  %t64 = icmp slt i8 %t62, 0
  br i1 %t64, label %block_0_41e673, label %block_0_41e64e
block_0_41e64e:
  %t65 = phi i64 [ %t54, %block_0_41e645 ]
  %t66 = phi i64 [ %t55, %block_0_41e645 ]
  %t67 = phi i64 [ %t56, %block_0_41e645 ]
  %t68 = phi i64 [ %t57, %block_0_41e645 ]
  %t69 = phi i64 [ %t63, %block_0_41e645 ]
  %t70 = phi i64 [ %t58, %block_0_41e645 ]
  %t71 = phi i64 [ %t59, %block_0_41e645 ]
  %t72 = phi i512 [ %t60, %block_0_41e645 ]
  ; r69 := (trunc r65 8)
  %t73 = trunc i64 %t69 to i8
  ; r70 := (uext r69 32)
  %t74 = zext i8 %t73 to i32
  ; r71 := (eq r69 (0x0 : bv 8))
  %t75 = icmp eq i8 %t73, 0
  ; r72 := (bv_mul (0x4 : bv 64) r67)
  %t76 = mul i64 4, %t71
  ; r73 := (bv_add r64 r72)
  %t77 = add i64 %t68, %t76
  ; write r73 r70
  %t78 = inttoptr i64 %t77 to i32*
  store i32 %t74, i32* %t78
  br i1 %t75, label %block_0_41e690, label %block_0_41e65b
block_0_41e65b:
  %t79 = phi i64 [ %t65, %block_0_41e64e ]
  %t80 = phi i64 [ %t66, %block_0_41e64e ]
  %t81 = phi i64 [ %t67, %block_0_41e64e ]
  %t82 = phi i64 [ %t68, %block_0_41e64e ]
  %t83 = phi i64 [ %t70, %block_0_41e64e ]
  %t84 = phi i64 [ %t71, %block_0_41e64e ]
  %t85 = phi i512 [ %t72, %block_0_41e64e ]
  ; r81 := (bv_add r78 (0x1 : bv 64))
  %t86 = add i64 %t83, 1
  br label %block_0_41e65f
block_0_41e65f:
  %t87 = phi i64 [ %t39, %block_0_41e636 ], [ %t79, %block_0_41e65b ]
  %t88 = phi i64 [ %t40, %block_0_41e636 ], [ %t80, %block_0_41e65b ]
  %t89 = phi i64 [ %t41, %block_0_41e636 ], [ %t81, %block_0_41e65b ]
  %t90 = phi i64 [ %t42, %block_0_41e636 ], [ %t82, %block_0_41e65b ]
  %t91 = phi i64 [ %t45, %block_0_41e636 ], [ %t86, %block_0_41e65b ]
  %t92 = phi i64 [ 0, %block_0_41e636 ], [ %t84, %block_0_41e65b ]
  %t93 = phi i512 [ %t44, %block_0_41e636 ], [ %t85, %block_0_41e65b ]
  ; r89 := (bv_add r87 (0x1 : bv 64))
  %t94 = add i64 %t92, 1
  ; r90 := (eq r89 r82)
  %t95 = icmp eq i64 %t94, %t87
  br i1 %t95, label %block_0_41e668, label %block_0_41e640
block_0_41e668:
  %t96 = phi i64 [ %t48, %block_0_41e640 ], [ %t89, %block_0_41e65f ], [ %t168, %block_0_41e6e0 ]
  %t97 = phi i64 [ %t50, %block_0_41e640 ], [ %t91, %block_0_41e65f ], [ %t169, %block_0_41e6e0 ]
  ; write r91 r92
  %t98 = inttoptr i64 %t96 to i64*
  store i64 %t97, i64* %t98
  br label %block_0_41e66b
block_0_41e66b:
  ret void
block_0_41e673:
  %t99 = phi i64 [ %t19, %block_0_41e622 ], [ %t55, %block_0_41e645 ], [ %t131, %block_0_41e6ac ], [ %t153, %block_0_41e6c2 ]
  %t100 = phi i64 [ %t20, %block_0_41e622 ], [ %t56, %block_0_41e645 ], [ %t132, %block_0_41e6ac ], [ %t154, %block_0_41e6c2 ]
  %t101 = phi i64 [ %t21, %block_0_41e622 ], [ %t57, %block_0_41e645 ], [ %t133, %block_0_41e6ac ], [ %t155, %block_0_41e6c2 ]
  %t102 = phi i512 [ %t23, %block_0_41e622 ], [ %t60, %block_0_41e645 ], [ %t136, %block_0_41e6ac ], [ %t158, %block_0_41e6c2 ]
  ; r97 := (bitcast r96 (vec 8 double))
  %t103 = bitcast i512 %t102 to <8 x double>
  ; r98 := call __error_unthreaded(r95, r94, r93, r97)
  %t104 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t101, i64 %t100, i64 %t99, <8 x double> %t103)
  ; r99 := (tuple_field r98 0)
  %t105 = extractvalue { i64, i64, <8 x double> } %t104, 0
  ; r100 := (tuple_field r98 1)
  %t106 = extractvalue { i64, i64, <8 x double> } %t104, 1
  ; r101 := (tuple_field r98 2)
  %t107 = extractvalue { i64, i64, <8 x double> } %t104, 2
  ; r102 := (bitcast r101 (bv 512))
  %t108 = bitcast <8 x double> %t107 to i512
  br label %block_0_41e678
block_0_41e678:
  %t109 = phi i64 [ %t105, %block_0_41e673 ]
  ; write r103 (0x56 : bv 32)
  %t110 = inttoptr i64 %t109 to i32*
  store i32 86, i32* %t110
  ret void
block_0_41e68d:
  %t111 = phi i64 [ %t30, %block_0_41e62b ]
  br label %block_0_41e690
block_0_41e690:
  %t112 = phi i64 [ %t67, %block_0_41e64e ], [ %t111, %block_0_41e68d ]
  ; write r105 (0x0 : bv 64)
  %t113 = inttoptr i64 %t112 to i64*
  store i64 0, i64* %t113
  ret void
block_0_41e69f:
  %t114 = phi i64 [ %arg2, %block_0_41e600 ]
  %t115 = phi i64 [ %arg1, %block_0_41e600 ]
  %t116 = phi i64 [ %arg0, %block_0_41e600 ]
  %t117 = phi i512 [ %t1, %block_0_41e600 ]
  ; r110 := (eq r106 (0x0 : bv 64))
  %t118 = icmp eq i64 %t114, 0
  ; r111 := (read r107 (bv 64))
  %t119 = inttoptr i64 %t115 to i64*
  %t120 = load i64, i64* %t119
  br i1 %t118, label %block_0_41e6e5, label %block_0_41e6a7
block_0_41e6a7:
  %t121 = phi i64 [ %t120, %block_0_41e69f ]
  %t122 = phi i64 [ %t114, %block_0_41e69f ]
  %t123 = phi i64 [ %t115, %block_0_41e69f ]
  %t124 = phi i64 [ %t116, %block_0_41e69f ]
  %t125 = phi i512 [ %t117, %block_0_41e69f ]
  ; r117 := (read r112 (bv 8))
  %t126 = inttoptr i64 %t121 to i8*
  %t127 = load i8, i8* %t126
  ; r118 := (bv_slt r117 (0x0 : bv 8))
  %t128 = icmp slt i8 %t127, 0
  ; r119 := (eq r117 (0x0 : bv 8))
  %t129 = icmp eq i8 %t127, 0
  br i1 %t129, label %block_0_41e6e5, label %block_0_41e6ac
block_0_41e6ac:
  %t130 = phi i64 [ %t121, %block_0_41e6a7 ]
  %t131 = phi i64 [ %t122, %block_0_41e6a7 ]
  %t132 = phi i64 [ %t123, %block_0_41e6a7 ]
  %t133 = phi i64 [ %t124, %block_0_41e6a7 ]
  %t134 = phi i1 [ 0, %block_0_41e6a7 ]
  %t135 = phi i1 [ %t128, %block_0_41e6a7 ]
  %t136 = phi i512 [ %t125, %block_0_41e6a7 ]
  ; r127 := (xor r125 r124)
  %t137 = xor i1 %t135, %t134
  br i1 %t137, label %block_0_41e673, label %block_0_41e6b2
block_0_41e6b2:
  %t138 = phi i64 [ %t130, %block_0_41e6ac ]
  %t139 = phi i64 [ %t131, %block_0_41e6ac ]
  %t140 = phi i64 [ %t132, %block_0_41e6ac ]
  %t141 = phi i64 [ %t133, %block_0_41e6ac ]
  %t142 = phi i512 [ %t136, %block_0_41e6ac ]
  br label %block_0_41e6c4
block_0_41e6b7:
  %t143 = phi i64 [ %t165, %block_0_41e6c4 ]
  %t144 = phi i64 [ %t166, %block_0_41e6c4 ]
  %t145 = phi i64 [ %t162, %block_0_41e6c4 ]
  %t146 = phi i64 [ %t163, %block_0_41e6c4 ]
  %t147 = phi i512 [ %t164, %block_0_41e6c4 ]
  ; r138 := (read r133 (bv 8))
  %t148 = inttoptr i64 %t143 to i8*
  %t149 = load i8, i8* %t148
  ; r139 := (bv_slt r138 (0x0 : bv 8))
  %t150 = icmp slt i8 %t149, 0
  ; r140 := (eq r138 (0x0 : bv 8))
  %t151 = icmp eq i8 %t149, 0
  br i1 %t151, label %block_0_41e6d2, label %block_0_41e6c2
block_0_41e6c2:
  %t152 = phi i64 [ %t143, %block_0_41e6b7 ]
  %t153 = phi i64 [ %t144, %block_0_41e6b7 ]
  %t154 = phi i64 [ %t145, %block_0_41e6b7 ]
  %t155 = phi i64 [ %t146, %block_0_41e6b7 ]
  %t156 = phi i1 [ 0, %block_0_41e6b7 ]
  %t157 = phi i1 [ %t150, %block_0_41e6b7 ]
  %t158 = phi i512 [ %t147, %block_0_41e6b7 ]
  ; r148 := (xor r146 r145)
  %t159 = xor i1 %t157, %t156
  br i1 %t159, label %block_0_41e673, label %block_0_41e6c4
block_0_41e6c4:
  %t160 = phi i64 [ %t138, %block_0_41e6b2 ], [ %t152, %block_0_41e6c2 ]
  %t161 = phi i64 [ %t139, %block_0_41e6b2 ], [ %t153, %block_0_41e6c2 ]
  %t162 = phi i64 [ %t140, %block_0_41e6b2 ], [ %t154, %block_0_41e6c2 ]
  %t163 = phi i64 [ %t141, %block_0_41e6b2 ], [ %t155, %block_0_41e6c2 ]
  %t164 = phi i512 [ %t142, %block_0_41e6b2 ], [ %t158, %block_0_41e6c2 ]
  ; r154 := (bv_add r149 (0x1 : bv 64))
  %t165 = add i64 %t160, 1
  ; r155 := (bv_add r150 (0xffffffffffffffff : bv 64))
  %t166 = add i64 %t161, 18446744073709551615
  ; r156 := (eq r150 (0x1 : bv 64))
  %t167 = icmp eq i64 %t161, 1
  br i1 %t167, label %block_0_41e6d2, label %block_0_41e6b7
block_0_41e6d2:
  ret void
block_0_41e6e0:
  %t168 = phi i64 [ %t5, %block_0_41e60d ], [ %t13, %block_0_41e619 ]
  %t169 = phi i64 [ %t10, %block_0_41e60d ], [ %t15, %block_0_41e619 ]
  br label %block_0_41e668
block_0_41e6e5:
  br label %block_0_41e66b
}
define void @_ascii_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41e6f0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_41e715, label %block_0_41e6fe
block_0_41e6fe:
  %t2 = phi i64 [ %arg2, %block_0_41e6f0 ]
  %t3 = phi i64 [ %arg1, %block_0_41e6f0 ]
  %t4 = phi i64 [ %arg0, %block_0_41e6f0 ]
  %t5 = phi i512 [ %t1, %block_0_41e6f0 ]
  ; r6 := (trunc r3 32)
  %t6 = trunc i64 %t3 to i32
  ; r7 := (bv_ult r6 (0x7f : bv 32))
  %t7 = icmp ult i32 %t6, 127
  ; r8 := (eq r6 (0x7f : bv 32))
  %t8 = icmp eq i32 %t6, 127
  ; r9 := (or r7 r8)
  %t9 = or i1 %t7, %t8
  br i1 %t9, label %block_0_41e71a, label %block_0_41e703
block_0_41e703:
  %t10 = phi i64 [ %t2, %block_0_41e6fe ]
  %t11 = phi i64 [ %t3, %block_0_41e6fe ]
  %t12 = phi i64 [ %t4, %block_0_41e6fe ]
  %t13 = phi i512 [ %t5, %block_0_41e6fe ]
  ; r14 := (bitcast r13 (vec 8 double))
  %t14 = bitcast i512 %t13 to <8 x double>
  ; r15 := call __error_unthreaded(r12, r11, r10, r14)
  %t15 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t12, i64 %t11, i64 %t10, <8 x double> %t14)
  ; r16 := (tuple_field r15 0)
  %t16 = extractvalue { i64, i64, <8 x double> } %t15, 0
  ; r17 := (tuple_field r15 1)
  %t17 = extractvalue { i64, i64, <8 x double> } %t15, 1
  ; r18 := (tuple_field r15 2)
  %t18 = extractvalue { i64, i64, <8 x double> } %t15, 2
  ; r19 := (bitcast r18 (bv 512))
  %t19 = bitcast <8 x double> %t18 to i512
  br label %block_0_41e708
block_0_41e708:
  %t20 = phi i64 [ %t16, %block_0_41e703 ]
  ; write r20 (0x56 : bv 32)
  %t21 = inttoptr i64 %t20 to i32*
  store i32 86, i32* %t21
  br label %block_0_41e715
block_0_41e715:
  ret void
block_0_41e71a:
  %t22 = phi i64 [ %t3, %block_0_41e6fe ]
  %t23 = phi i64 [ %t4, %block_0_41e6fe ]
  ; r23 := (trunc r21 8)
  %t24 = trunc i64 %t22 to i8
  ; write r22 r23
  %t25 = inttoptr i64 %t23 to i8*
  store i8 %t24, i8* %t25
  br label %block_0_41e715
}
define void @_ascii_mbrtowc(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41e730:
  ; r0 := (eq arg1 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg1, 0
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_41e760, label %block_0_41e73b
block_0_41e73b:
  %t2 = phi i64 [ %arg2, %block_0_41e730 ]
  %t3 = phi i64 [ %arg1, %block_0_41e730 ]
  %t4 = phi i64 [ %arg0, %block_0_41e730 ]
  %t5 = phi i512 [ %t1, %block_0_41e730 ]
  ; r6 := (eq r2 (0x0 : bv 64))
  %t6 = icmp eq i64 %t2, 0
  br i1 %t6, label %block_0_41e760, label %block_0_41e747
block_0_41e747:
  %t7 = phi i64 [ %t2, %block_0_41e73b ]
  %t8 = phi i64 [ %t3, %block_0_41e73b ]
  %t9 = phi i64 [ %t4, %block_0_41e73b ]
  %t10 = phi i512 [ %t5, %block_0_41e73b ]
  ; r11 := (read r8 (bv 8))
  %t11 = inttoptr i64 %t8 to i8*
  %t12 = load i8, i8* %t11
  ; r12 := (uext r11 64)
  %t13 = zext i8 %t12 to i64
  ; r13 := (bv_slt r11 (0x0 : bv 8))
  %t14 = icmp slt i8 %t12, 0
  br i1 %t14, label %block_0_41e74e, label %block_0_41e765
block_0_41e74e:
  %t15 = phi i64 [ %t7, %block_0_41e747 ]
  %t16 = phi i64 [ %t8, %block_0_41e747 ]
  %t17 = phi i64 [ %t9, %block_0_41e747 ]
  %t18 = phi i512 [ %t10, %block_0_41e747 ]
  ; r18 := (bitcast r17 (vec 8 double))
  %t19 = bitcast i512 %t18 to <8 x double>
  ; r19 := call __error_unthreaded(r16, r15, r14, r18)
  %t20 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t17, i64 %t16, i64 %t15, <8 x double> %t19)
  ; r20 := (tuple_field r19 0)
  %t21 = extractvalue { i64, i64, <8 x double> } %t20, 0
  ; r21 := (tuple_field r19 1)
  %t22 = extractvalue { i64, i64, <8 x double> } %t20, 1
  ; r22 := (tuple_field r19 2)
  %t23 = extractvalue { i64, i64, <8 x double> } %t20, 2
  ; r23 := (bitcast r22 (bv 512))
  %t24 = bitcast <8 x double> %t23 to i512
  br label %block_0_41e753
block_0_41e753:
  %t25 = phi i64 [ %t21, %block_0_41e74e ]
  ; write r24 (0x56 : bv 32)
  %t26 = inttoptr i64 %t25 to i32*
  store i32 86, i32* %t26
  br label %block_0_41e760
block_0_41e760:
  ret void
block_0_41e765:
  %t27 = phi i64 [ %t13, %block_0_41e747 ]
  %t28 = phi i64 [ %t8, %block_0_41e747 ]
  %t29 = phi i64 [ %t9, %block_0_41e747 ]
  ; r28 := (eq r27 (0x0 : bv 64))
  %t30 = icmp eq i64 %t29, 0
  br i1 %t30, label %block_0_41e772, label %block_0_41e76a
block_0_41e76a:
  %t31 = phi i64 [ %t27, %block_0_41e765 ]
  %t32 = phi i64 [ %t28, %block_0_41e765 ]
  %t33 = phi i64 [ %t29, %block_0_41e765 ]
  ; r32 := (trunc r29 8)
  %t34 = trunc i64 %t31 to i8
  ; r33 := (uext r32 32)
  %t35 = zext i8 %t34 to i32
  ; write r31 r33
  %t36 = inttoptr i64 %t33 to i32*
  store i32 %t35, i32* %t36
  ; r34 := (read r30 (bv 8))
  %t37 = inttoptr i64 %t32 to i8*
  %t38 = load i8, i8* %t37
  br label %block_0_41e772
block_0_41e772:
  ret void
}
define void @_UTF8_init(i64 %arg0) {
block_0_41eaf0:
  ; write (0x6301b0 : bv 64) (0x41ec60 : bv 64)
  %t0 = inttoptr i64 6488496 to i64*
  store i64 4320352, i64* %t0
  ; write (0x6301c8 : bv 64) (0x41eb70 : bv 64)
  %t1 = inttoptr i64 6488520 to i64*
  store i64 4320112, i64* %t1
  ; write (0x6301b8 : bv 64) (0x41eb50 : bv 64)
  %t2 = inttoptr i64 6488504 to i64*
  store i64 4320080, i64* %t2
  ; write (0x6301c0 : bv 64) (0x41eec0 : bv 64)
  %t3 = inttoptr i64 6488512 to i64*
  store i64 4320960, i64* %t3
  ; write (0x6301d0 : bv 64) (0x41f080 : bv 64)
  %t4 = inttoptr i64 6488528 to i64*
  store i64 4321408, i64* %t4
  ; write (0x631260 : bv 64) arg0
  %t5 = inttoptr i64 6492768 to i64*
  store i64 %arg0, i64* %t5
  ; write (0x6301a8 : bv 64) (0x6 : bv 32)
  %t6 = inttoptr i64 6488488 to i32*
  store i32 6, i32* %t6
  ; write (0x6301ac : bv 64) (0x80 : bv 32)
  %t7 = inttoptr i64 6488492 to i32*
  store i32 128, i32* %t7
  ret void
}
define void @_UTF8_mbsinit(i64 %arg0) {
block_0_41eb50:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  br i1 %t0, label %block_0_41eb63, label %block_0_41eb5a
block_0_41eb5a:
  %t1 = phi i64 [ %arg0, %block_0_41eb50 ]
  ; r2 := (bv_add r1 (0x4 : bv 64))
  %t2 = add i64 %t1, 4
  ; r3 := (read r2 (bv 32))
  %t3 = inttoptr i64 %t2 to i32*
  %t4 = load i32, i32* %t3
  br label %block_0_41eb63
block_0_41eb63:
  ret void
}
define { i64, <8 x double> } @_UTF8_wcrtomb(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41eb70:
  ; r0 := (bv_add arg2 (0x4 : bv 64))
  %t0 = add i64 %arg2, 4
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (eq r1 (0x0 : bv 32))
  %t3 = icmp eq i32 %t2, 0
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r4 := (bitcast arg3 (bv 512))
  %t5 = bitcast <8 x double> %arg3 to i512
  br i1 %t3, label %block_0_41eb92, label %block_0_41eb7b
block_0_41eb7b:
  %t6 = phi i64 [ %arg2, %block_0_41eb70 ]
  %t7 = phi i64 [ %arg1, %block_0_41eb70 ]
  %t8 = phi i64 [ %arg0, %block_0_41eb70 ]
  %t9 = phi i512 [ %t5, %block_0_41eb70 ]
  ; r9 := (bitcast r8 (vec 8 double))
  %t10 = bitcast i512 %t9 to <8 x double>
  ; r10 := call __error_unthreaded(r7, r6, r5, r9)
  %t11 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t8, i64 %t7, i64 %t6, <8 x double> %t10)
  ; r11 := (tuple_field r10 0)
  %t12 = extractvalue { i64, i64, <8 x double> } %t11, 0
  ; r12 := (tuple_field r10 1)
  %t13 = extractvalue { i64, i64, <8 x double> } %t11, 1
  ; r13 := (tuple_field r10 2)
  %t14 = extractvalue { i64, i64, <8 x double> } %t11, 2
  ; r14 := (bitcast r13 (bv 512))
  %t15 = bitcast <8 x double> %t14 to i512
  br label %block_0_41eb80
block_0_41eb80:
  %t16 = phi i64 [ %t12, %block_0_41eb7b ]
  %t17 = phi i512 [ %t15, %block_0_41eb7b ]
  ; write r15 (0x16 : bv 32)
  %t18 = inttoptr i64 %t16 to i32*
  store i32 22, i32* %t18
  br label %block_0_41eb8d
block_0_41eb8d:
  %t19 = phi i64 [ 18446744073709551615, %block_0_41eb80 ], [ 1, %block_0_41eb92 ], [ %t84, %block_0_41ebdc ], [ %t86, %block_0_41ebe7 ], [ 18446744073709551615, %block_0_41ec2e ]
  %t20 = phi i512 [ %t17, %block_0_41eb80 ], [ %t27, %block_0_41eb92 ], [ %t79, %block_0_41ebdc ], [ %t89, %block_0_41ebe7 ], [ %t148, %block_0_41ec2e ]
  ; r19 := (bitcast r18 (vec 8 double))
  %t21 = bitcast i512 %t20 to <8 x double>
  ; r20 := (tuple r17 r19)
  %t22 = insertvalue { i64, <8 x double> } undef, i64 %t19, 0
  %t23 = insertvalue { i64, <8 x double> } %t22, <8 x double> %t21, 1
  ret { i64, <8 x double> } %t23
block_0_41eb92:
  %t24 = phi i64 [ %arg2, %block_0_41eb70 ]
  %t25 = phi i64 [ %arg1, %block_0_41eb70 ]
  %t26 = phi i64 [ %arg0, %block_0_41eb70 ]
  %t27 = phi i512 [ %t4, %block_0_41eb70 ]
  ; r25 := (eq r23 (0x0 : bv 64))
  %t28 = icmp eq i64 %t26, 0
  br i1 %t28, label %block_0_41eb8d, label %block_0_41eb9c
block_0_41eb9c:
  %t29 = phi i64 [ 1, %block_0_41eb92 ]
  %t30 = phi i64 [ %t24, %block_0_41eb92 ]
  %t31 = phi i64 [ %t25, %block_0_41eb92 ]
  %t32 = phi i64 [ %t26, %block_0_41eb92 ]
  %t33 = phi i512 [ %t27, %block_0_41eb92 ]
  ; r31 := (trunc r28 32)
  %t34 = trunc i64 %t31 to i32
  ; r32 := (bv_and r31 (0xffffff80 : bv 32))
  %t35 = and i32 %t34, 4294967168
  ; r33 := (eq r32 (0x0 : bv 32))
  %t36 = icmp eq i32 %t35, 0
  br i1 %t36, label %block_0_41ebe7, label %block_0_41eba4
block_0_41eba4:
  %t37 = phi i64 [ %t30, %block_0_41eb9c ]
  %t38 = phi i64 [ %t31, %block_0_41eb9c ]
  %t39 = phi i64 [ %t32, %block_0_41eb9c ]
  %t40 = phi i512 [ %t33, %block_0_41eb9c ]
  ; r38 := (trunc r35 32)
  %t41 = trunc i64 %t38 to i32
  ; r39 := (bv_and r38 (0xfffff800 : bv 32))
  %t42 = and i32 %t41, 4294965248
  ; r40 := (eq r39 (0x0 : bv 32))
  %t43 = icmp eq i32 %t42, 0
  br i1 %t43, label %block_0_41ebbd, label %block_0_41ebec
block_0_41ebbd:
  %t44 = phi i64 [ 1, %block_0_41eba4 ], [ %t104, %block_0_41ebec ], [ %t117, %block_0_41ebff ], [ %t130, %block_0_41ec12 ], [ 5, %block_0_41ec40 ]
  %t45 = phi i64 [ %t38, %block_0_41eba4 ], [ %t94, %block_0_41ebec ], [ %t107, %block_0_41ebff ], [ %t120, %block_0_41ec12 ], [ %t150, %block_0_41ec40 ]
  %t46 = phi i64 [ %t39, %block_0_41eba4 ], [ %t95, %block_0_41ebec ], [ %t108, %block_0_41ebff ], [ %t121, %block_0_41ec12 ], [ %t151, %block_0_41ec40 ]
  %t47 = phi i64 [ 4294967232, %block_0_41eba4 ], [ 4294967264, %block_0_41ebec ], [ 4294967280, %block_0_41ebff ], [ 4294967288, %block_0_41ec12 ], [ 4294967292, %block_0_41ec40 ]
  %t48 = phi i64 [ 2, %block_0_41eba4 ], [ %t102, %block_0_41ebec ], [ %t115, %block_0_41ebff ], [ %t128, %block_0_41ec12 ], [ 6, %block_0_41ec40 ]
  %t49 = phi i512 [ %t40, %block_0_41eba4 ], [ %t97, %block_0_41ebec ], [ %t110, %block_0_41ebff ], [ %t123, %block_0_41ec12 ], [ %t152, %block_0_41ec40 ]
  ; r47 := (trunc r41 32)
  %t50 = trunc i64 %t44 to i32
  ; r48 := (sext r47 64)
  %t51 = sext i32 %t50 to i64
  ; r49 := (bv_add r48 r43)
  %t52 = add i64 %t51, %t46
  br label %block_0_41ebc4
block_0_41ebc4:
  %t53 = phi i64 [ %t44, %block_0_41ebbd ], [ %t64, %block_0_41ebc4 ]
  %t54 = phi i64 [ %t52, %block_0_41ebbd ], [ %t71, %block_0_41ebc4 ]
  %t55 = phi i64 [ %t45, %block_0_41ebbd ], [ %t66, %block_0_41ebc4 ]
  %t56 = phi i64 [ %t46, %block_0_41ebbd ], [ %t56, %block_0_41ebc4 ]
  %t57 = phi i64 [ %t47, %block_0_41ebbd ], [ %t57, %block_0_41ebc4 ]
  %t58 = phi i64 [ %t48, %block_0_41ebbd ], [ %t58, %block_0_41ebc4 ]
  %t59 = phi i512 [ %t49, %block_0_41ebbd ], [ %t59, %block_0_41ebc4 ]
  ; r57 := (trunc r52 32)
  %t60 = trunc i64 %t55 to i32
  ; r58 := (trunc r50 32)
  %t61 = trunc i64 %t53 to i32
  ; r59 := (bv_add r58 (0xffffffff : bv 32))
  %t62 = add i32 %t61, 4294967295
  ; r60 := (eq r58 (0x1 : bv 32))
  %t63 = icmp eq i32 %t61, 1
  ; r61 := (uext r59 64)
  %t64 = zext i32 %t62 to i64
  ; r62 := (bv_sar r57 (0x6 : bv 32))
  %t65 = ashr i32 %t60, 6
  ; r63 := (uext r62 64)
  %t66 = zext i32 %t65 to i64
  ; r64 := (trunc r52 8)
  %t67 = trunc i64 %t55 to i8
  ; r65 := (bv_and r64 (0x3f : bv 8))
  %t68 = and i8 %t67, 63
  ; r66 := (bv_or r65 (0x80 : bv 8))
  %t69 = or i8 %t68, 128
  ; write r51 r66
  %t70 = inttoptr i64 %t54 to i8*
  store i8 %t69, i8* %t70
  ; r67 := (bv_add r51 (0xffffffffffffffff : bv 64))
  %t71 = add i64 %t54, 18446744073709551615
  ; r68 := (not r60)
  %t72 = icmp eq i1 %t63, 0
  ; r69 := (bv_sle (0x0 : bv 32) r59)
  %t73 = icmp sle i32 0, %t62
  ; r70 := (and r68 r69)
  %t74 = and i1 %t72, %t73
  br i1 %t74, label %block_0_41ebc4, label %block_0_41ebdc
block_0_41ebdc:
  %t75 = phi i64 [ %t66, %block_0_41ebc4 ]
  %t76 = phi i64 [ %t56, %block_0_41ebc4 ]
  %t77 = phi i64 [ %t57, %block_0_41ebc4 ]
  %t78 = phi i64 [ %t58, %block_0_41ebc4 ]
  %t79 = phi i512 [ %t59, %block_0_41ebc4 ]
  ; r76 := (trunc r73 8)
  %t80 = trunc i64 %t77 to i8
  ; r77 := (trunc r71 8)
  %t81 = trunc i64 %t75 to i8
  ; r78 := (bv_or r76 r77)
  %t82 = or i8 %t80, %t81
  ; r79 := (trunc r74 32)
  %t83 = trunc i64 %t78 to i32
  ; r80 := (sext r79 64)
  %t84 = sext i32 %t83 to i64
  ; write r72 r78
  %t85 = inttoptr i64 %t76 to i8*
  store i8 %t82, i8* %t85
  br label %block_0_41eb8d
block_0_41ebe7:
  %t86 = phi i64 [ %t29, %block_0_41eb9c ]
  %t87 = phi i64 [ %t31, %block_0_41eb9c ]
  %t88 = phi i64 [ %t32, %block_0_41eb9c ]
  %t89 = phi i512 [ %t33, %block_0_41eb9c ]
  ; r85 := (trunc r82 8)
  %t90 = trunc i64 %t87 to i8
  ; write r83 r85
  %t91 = inttoptr i64 %t88 to i8*
  store i8 %t90, i8* %t91
  br label %block_0_41eb8d
block_0_41ebec:
  %t92 = phi i64 [ 1, %block_0_41eba4 ]
  %t93 = phi i64 [ %t37, %block_0_41eba4 ]
  %t94 = phi i64 [ %t38, %block_0_41eba4 ]
  %t95 = phi i64 [ %t39, %block_0_41eba4 ]
  %t96 = phi i64 [ 2, %block_0_41eba4 ]
  %t97 = phi i512 [ %t40, %block_0_41eba4 ]
  ; r92 := (trunc r88 32)
  %t98 = trunc i64 %t94 to i32
  ; r93 := (bv_and r92 (0xffff0000 : bv 32))
  %t99 = and i32 %t98, 4294901760
  ; r94 := (eq r93 (0x0 : bv 32))
  %t100 = icmp eq i32 %t99, 0
  ; r95 := (bv_and r90 (0xffffffffffffff00 : bv 64))
  %t101 = and i64 %t96, 18446744073709551360
  ; r96 := (bv_or r95 (0x3 : bv 64))
  %t102 = or i64 %t101, 3
  ; r97 := (bv_and r86 (0xffffffffffffff00 : bv 64))
  %t103 = and i64 %t92, 18446744073709551360
  ; r98 := (bv_or r97 (0x2 : bv 64))
  %t104 = or i64 %t103, 2
  br i1 %t100, label %block_0_41ebbd, label %block_0_41ebff
block_0_41ebff:
  %t105 = phi i64 [ %t104, %block_0_41ebec ]
  %t106 = phi i64 [ %t93, %block_0_41ebec ]
  %t107 = phi i64 [ %t94, %block_0_41ebec ]
  %t108 = phi i64 [ %t95, %block_0_41ebec ]
  %t109 = phi i64 [ %t102, %block_0_41ebec ]
  %t110 = phi i512 [ %t97, %block_0_41ebec ]
  ; r105 := (trunc r101 32)
  %t111 = trunc i64 %t107 to i32
  ; r106 := (bv_and r105 (0xffe00000 : bv 32))
  %t112 = and i32 %t111, 4292870144
  ; r107 := (eq r106 (0x0 : bv 32))
  %t113 = icmp eq i32 %t112, 0
  ; r108 := (bv_and r103 (0xffffffffffffff00 : bv 64))
  %t114 = and i64 %t109, 18446744073709551360
  ; r109 := (bv_or r108 (0x4 : bv 64))
  %t115 = or i64 %t114, 4
  ; r110 := (bv_and r99 (0xffffffffffffff00 : bv 64))
  %t116 = and i64 %t105, 18446744073709551360
  ; r111 := (bv_or r110 (0x3 : bv 64))
  %t117 = or i64 %t116, 3
  br i1 %t113, label %block_0_41ebbd, label %block_0_41ec12
block_0_41ec12:
  %t118 = phi i64 [ %t117, %block_0_41ebff ]
  %t119 = phi i64 [ %t106, %block_0_41ebff ]
  %t120 = phi i64 [ %t107, %block_0_41ebff ]
  %t121 = phi i64 [ %t108, %block_0_41ebff ]
  %t122 = phi i64 [ %t115, %block_0_41ebff ]
  %t123 = phi i512 [ %t110, %block_0_41ebff ]
  ; r118 := (trunc r114 32)
  %t124 = trunc i64 %t120 to i32
  ; r119 := (bv_and r118 (0xfc000000 : bv 32))
  %t125 = and i32 %t124, 4227858432
  ; r120 := (eq r119 (0x0 : bv 32))
  %t126 = icmp eq i32 %t125, 0
  ; r121 := (bv_and r116 (0xffffffffffffff00 : bv 64))
  %t127 = and i64 %t122, 18446744073709551360
  ; r122 := (bv_or r121 (0x5 : bv 64))
  %t128 = or i64 %t127, 5
  ; r123 := (bv_and r112 (0xffffffffffffff00 : bv 64))
  %t129 = and i64 %t118, 18446744073709551360
  ; r124 := (bv_or r123 (0x4 : bv 64))
  %t130 = or i64 %t129, 4
  br i1 %t126, label %block_0_41ebbd, label %block_0_41ec25
block_0_41ec25:
  %t131 = phi i64 [ %t119, %block_0_41ec12 ]
  %t132 = phi i64 [ %t120, %block_0_41ec12 ]
  %t133 = phi i64 [ %t121, %block_0_41ec12 ]
  %t134 = phi i512 [ %t123, %block_0_41ec12 ]
  ; r129 := (trunc r126 32)
  %t135 = trunc i64 %t132 to i32
  ; r130 := (bv_slt r129 (0x0 : bv 32))
  %t136 = icmp slt i32 %t135, 0
  br i1 %t136, label %block_0_41ec29, label %block_0_41ec40
block_0_41ec29:
  %t137 = phi i64 [ %t131, %block_0_41ec25 ]
  %t138 = phi i64 [ %t132, %block_0_41ec25 ]
  %t139 = phi i64 [ %t133, %block_0_41ec25 ]
  %t140 = phi i512 [ %t134, %block_0_41ec25 ]
  ; r135 := (bitcast r134 (vec 8 double))
  %t141 = bitcast i512 %t140 to <8 x double>
  ; r136 := call __error_unthreaded(r133, r132, r131, r135)
  %t142 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t139, i64 %t138, i64 %t137, <8 x double> %t141)
  ; r137 := (tuple_field r136 0)
  %t143 = extractvalue { i64, i64, <8 x double> } %t142, 0
  ; r138 := (tuple_field r136 1)
  %t144 = extractvalue { i64, i64, <8 x double> } %t142, 1
  ; r139 := (tuple_field r136 2)
  %t145 = extractvalue { i64, i64, <8 x double> } %t142, 2
  ; r140 := (bitcast r139 (bv 512))
  %t146 = bitcast <8 x double> %t145 to i512
  br label %block_0_41ec2e
block_0_41ec2e:
  %t147 = phi i64 [ %t143, %block_0_41ec29 ]
  %t148 = phi i512 [ %t146, %block_0_41ec29 ]
  ; write r141 (0x56 : bv 32)
  %t149 = inttoptr i64 %t147 to i32*
  store i32 86, i32* %t149
  br label %block_0_41eb8d
block_0_41ec40:
  %t150 = phi i64 [ %t132, %block_0_41ec25 ]
  %t151 = phi i64 [ %t133, %block_0_41ec25 ]
  %t152 = phi i512 [ %t134, %block_0_41ec25 ]
  br label %block_0_41ebbd
}
define { i64, <8 x double> } @_UTF8_mbrtowc(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_41ec60:
  ; r0 := (bv_add arg3 (0x4 : bv 64))
  %t0 = add i64 %arg3, 4
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (uext r1 64)
  %t3 = zext i32 %t2 to i64
  ; r3 := (bv_ult r1 (0x6 : bv 32))
  %t4 = icmp ult i32 %t2, 6
  ; r4 := (eq r1 (0x6 : bv 32))
  %t5 = icmp eq i32 %t2, 6
  ; r5 := (or r3 r4)
  %t6 = or i1 %t4, %t5
  ; r6 := (bitcast arg4 (bv 512))
  %t7 = bitcast <8 x double> %arg4 to i512
  ; r7 := (bitcast arg4 (bv 512))
  %t8 = bitcast <8 x double> %arg4 to i512
  br i1 %t6, label %block_0_41ecab, label %block_0_41ec83
block_0_41ec83:
  %t9 = phi i64 [ %arg2, %block_0_41ec60 ]
  %t10 = phi i64 [ %arg0, %block_0_41ec60 ]
  %t11 = phi i64 [ %arg1, %block_0_41ec60 ]
  %t12 = phi i512 [ %t8, %block_0_41ec60 ]
  ; r12 := (bitcast r11 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r13 := call __error_unthreaded(r9, r10, r8, r12)
  %t14 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t10, i64 %t11, i64 %t9, <8 x double> %t13)
  ; r14 := (tuple_field r13 0)
  %t15 = extractvalue { i64, i64, <8 x double> } %t14, 0
  ; r15 := (tuple_field r13 1)
  %t16 = extractvalue { i64, i64, <8 x double> } %t14, 1
  ; r16 := (tuple_field r13 2)
  %t17 = extractvalue { i64, i64, <8 x double> } %t14, 2
  ; r17 := (bitcast r16 (bv 512))
  %t18 = bitcast <8 x double> %t17 to i512
  br label %block_0_41ec88
block_0_41ec88:
  %t19 = phi i64 [ %t15, %block_0_41ec83 ]
  %t20 = phi i512 [ %t18, %block_0_41ec83 ]
  ; write r18 (0x16 : bv 32)
  %t21 = inttoptr i64 %t19 to i32*
  store i32 22, i32* %t21
  br label %block_0_41ec95
block_0_41ec95:
  %t22 = phi i64 [ 18446744073709551615, %block_0_41ec88 ], [ 18446744073709551614, %block_0_41ecb4 ], [ 18446744073709551614, %block_0_41ed4c ], [ %t224, %block_0_41ed76 ], [ 18446744073709551615, %block_0_41ed87 ], [ %t407, %block_0_41ee79 ]
  %t23 = phi i512 [ %t20, %block_0_41ec88 ], [ %t39, %block_0_41ecb4 ], [ %t185, %block_0_41ed4c ], [ %t220, %block_0_41ed76 ], [ %t236, %block_0_41ed87 ], [ %t402, %block_0_41ee79 ]
  ; r22 := (bitcast r21 (vec 8 double))
  %t24 = bitcast i512 %t23 to <8 x double>
  ; r23 := (tuple r20 r22)
  %t25 = insertvalue { i64, <8 x double> } undef, i64 %t22, 0
  %t26 = insertvalue { i64, <8 x double> } %t25, <8 x double> %t24, 1
  ret { i64, <8 x double> } %t26
block_0_41ecab:
  %t27 = phi i64 [ %arg3, %block_0_41ec60 ]
  %t28 = phi i64 [ %arg2, %block_0_41ec60 ]
  %t29 = phi i64 [ %arg0, %block_0_41ec60 ]
  %t30 = phi i64 [ %arg1, %block_0_41ec60 ]
  %t31 = phi i64 [ %t3, %block_0_41ec60 ]
  %t32 = phi i512 [ %t7, %block_0_41ec60 ]
  ; r30 := (eq r27 (0x0 : bv 64))
  %t33 = icmp eq i64 %t30, 0
  br i1 %t33, label %block_0_41ee91, label %block_0_41ecb4
block_0_41ecb4:
  %t34 = phi i64 [ %t27, %block_0_41ecab ]
  %t35 = phi i64 [ %t28, %block_0_41ecab ]
  %t36 = phi i64 [ %t29, %block_0_41ecab ]
  %t37 = phi i64 [ %t30, %block_0_41ecab ]
  %t38 = phi i64 [ %t31, %block_0_41ecab ]
  %t39 = phi i512 [ %t32, %block_0_41ecab ]
  ; r37 := (eq r32 (0x0 : bv 64))
  %t40 = icmp eq i64 %t35, 0
  br i1 %t40, label %block_0_41ec95, label %block_0_41ecc0
block_0_41ecc0:
  %t41 = phi i64 [ %t34, %block_0_41ecb4 ], [ %t408, %block_0_41ee91 ]
  %t42 = phi i64 [ 18446744073709551614, %block_0_41ecb4 ], [ %t409, %block_0_41ee91 ]
  %t43 = phi i64 [ %t36, %block_0_41ecb4 ], [ 0, %block_0_41ee91 ]
  %t44 = phi i64 [ %t37, %block_0_41ecb4 ], [ 4363506, %block_0_41ee91 ]
  %t45 = phi i64 [ %t38, %block_0_41ecb4 ], [ %t410, %block_0_41ee91 ]
  %t46 = phi i64 [ %t35, %block_0_41ecb4 ], [ 1, %block_0_41ee91 ]
  %t47 = phi i512 [ %t39, %block_0_41ecb4 ], [ %t411, %block_0_41ee91 ]
  ; r45 := (trunc r42 32)
  %t48 = trunc i64 %t45 to i32
  ; r46 := (eq r45 (0x0 : bv 32))
  %t49 = icmp eq i32 %t48, 0
  br i1 %t49, label %block_0_41ed65, label %block_0_41ecc9
block_0_41ecc9:
  %t50 = phi i64 [ %t41, %block_0_41ecc0 ]
  %t51 = phi i64 [ %t43, %block_0_41ecc0 ]
  %t52 = phi i64 [ %t44, %block_0_41ecc0 ]
  %t53 = phi i64 [ %t45, %block_0_41ecc0 ]
  %t54 = phi i64 [ %t46, %block_0_41ecc0 ]
  %t55 = phi i512 [ %t47, %block_0_41ecc0 ]
  ; r53 := (bv_add r47 (0x8 : bv 64))
  %t56 = add i64 %t50, 8
  ; r54 := (read r53 (bv 32))
  %t57 = inttoptr i64 %t56 to i32*
  %t58 = load i32, i32* %t57
  ; r55 := (uext r54 64)
  %t59 = zext i32 %t58 to i64
  ; r56 := (read r47 (bv 32))
  %t60 = inttoptr i64 %t50 to i32*
  %t61 = load i32, i32* %t60
  ; r57 := (uext r56 64)
  %t62 = zext i32 %t61 to i64
  ; r58 := (trunc r50 32)
  %t63 = trunc i64 %t53 to i32
  ; r59 := (sext r58 64)
  %t64 = sext i32 %t63 to i64
  ; r60 := (uext r58 64)
  %t65 = zext i32 %t63 to i64
  br label %block_0_41ecd6
block_0_41ecd6:
  %t66 = phi i64 [ %t50, %block_0_41ecc9 ], [ %t260, %block_0_41edac ]
  %t67 = phi i64 [ %t64, %block_0_41ecc9 ], [ %t261, %block_0_41edac ]
  %t68 = phi i64 [ %t51, %block_0_41ecc9 ], [ %t262, %block_0_41edac ]
  %t69 = phi i64 [ %t65, %block_0_41ecc9 ], [ %t263, %block_0_41edac ]
  %t70 = phi i64 [ %t52, %block_0_41ecc9 ], [ %t271, %block_0_41edac ]
  %t71 = phi i64 [ %t53, %block_0_41ecc9 ], [ %t266, %block_0_41edac ]
  %t72 = phi i64 [ %t54, %block_0_41ecc9 ], [ %t267, %block_0_41edac ]
  %t73 = phi i64 [ %t62, %block_0_41ecc9 ], [ %t274, %block_0_41edac ]
  %t74 = phi i64 [ %t59, %block_0_41ecc9 ], [ %t268, %block_0_41edac ]
  %t75 = phi i512 [ %t55, %block_0_41ecc9 ], [ %t269, %block_0_41edac ]
  ; r71 := (trunc r66 32)
  %t76 = trunc i64 %t71 to i32
  ; r72 := (eq r71 (0x0 : bv 32))
  %t77 = icmp eq i32 %t76, 0
  ; r73 := (mux r72 (0x1 : bv 8) (0x0 : bv 8))
  %t78 = select i1 %t77, i8 1, i8 0
  ; r74 := (uext r73 64)
  %t79 = zext i8 %t78 to i64
  ; r75 := (bv_ult r62 r67)
  %t80 = icmp ult i64 %t67, %t72
  ; r76 := (eq r62 r67)
  %t81 = icmp eq i64 %t67, %t72
  ; r77 := (or r75 r76)
  %t82 = or i1 %t80, %t81
  ; r78 := (mux r77 r62 r67)
  %t83 = select i1 %t82, i64 %t67, i64 %t72
  ; r79 := (uext r73 32)
  %t84 = zext i8 %t78 to i32
  ; r80 := (sext r79 64)
  %t85 = sext i32 %t84 to i64
  ; r81 := (bv_ult r78 r80)
  %t86 = icmp ult i64 %t83, %t85
  ; r82 := (eq r78 r80)
  %t87 = icmp eq i64 %t83, %t85
  ; r83 := (or r81 r82)
  %t88 = or i1 %t86, %t87
  br i1 %t88, label %block_0_41ed43, label %block_0_41ecf2
block_0_41ecf2:
  %t89 = phi i64 [ %t66, %block_0_41ecd6 ]
  %t90 = phi i64 [ %t67, %block_0_41ecd6 ]
  %t91 = phi i64 [ %t68, %block_0_41ecd6 ]
  %t92 = phi i64 [ %t69, %block_0_41ecd6 ]
  %t93 = phi i64 [ %t70, %block_0_41ecd6 ]
  %t94 = phi i64 [ %t83, %block_0_41ecd6 ]
  %t95 = phi i64 [ %t73, %block_0_41ecd6 ]
  %t96 = phi i64 [ %t79, %block_0_41ecd6 ]
  %t97 = phi i64 [ %t74, %block_0_41ecd6 ]
  %t98 = phi i512 [ %t75, %block_0_41ecd6 ]
  ; r94 := (read r88 (bv 8))
  %t99 = inttoptr i64 %t93 to i8*
  %t100 = load i8, i8* %t99
  ; r95 := (sext r94 32)
  %t101 = sext i8 %t100 to i32
  ; r96 := (uext r95 64)
  %t102 = zext i32 %t101 to i64
  ; r97 := (bv_and r95 (0xc0 : bv 32))
  %t103 = and i32 %t101, 192
  ; r98 := (eq r97 (0x80 : bv 32))
  %t104 = icmp eq i32 %t103, 128
  br i1 %t104, label %block_0_41ed03, label %block_0_41ed82
block_0_41ed03:
  %t105 = phi i64 [ %t89, %block_0_41ecf2 ]
  %t106 = phi i64 [ %t90, %block_0_41ecf2 ]
  %t107 = phi i64 [ %t91, %block_0_41ecf2 ]
  %t108 = phi i64 [ %t92, %block_0_41ecf2 ]
  %t109 = phi i64 [ %t93, %block_0_41ecf2 ]
  %t110 = phi i64 [ %t94, %block_0_41ecf2 ]
  %t111 = phi i64 [ %t102, %block_0_41ecf2 ]
  %t112 = phi i64 [ %t95, %block_0_41ecf2 ]
  %t113 = phi i64 [ %t96, %block_0_41ecf2 ]
  %t114 = phi i64 [ %t97, %block_0_41ecf2 ]
  %t115 = phi i512 [ %t98, %block_0_41ecf2 ]
  ; r110 := (bv_add r107 (0x1 : bv 64))
  %t116 = add i64 %t113, 1
  ; r111 := (trunc r110 32)
  %t117 = trunc i64 %t116 to i32
  ; r112 := (sext r111 64)
  %t118 = sext i32 %t117 to i64
  br label %block_0_41ed2a
block_0_41ed10:
  %t119 = phi i64 [ %t138, %block_0_41ed2a ]
  %t120 = phi i64 [ %t139, %block_0_41ed2a ]
  %t121 = phi i64 [ %t140, %block_0_41ed2a ]
  %t122 = phi i64 [ %t141, %block_0_41ed2a ]
  %t123 = phi i64 [ %t142, %block_0_41ed2a ]
  %t124 = phi i64 [ %t143, %block_0_41ed2a ]
  %t125 = phi i64 [ %t144, %block_0_41ed2a ]
  %t126 = phi i64 [ %t158, %block_0_41ed2a ]
  %t127 = phi i64 [ %t154, %block_0_41ed2a ]
  %t128 = phi i64 [ %t148, %block_0_41ed2a ]
  %t129 = phi i512 [ %t149, %block_0_41ed2a ]
  ; r124 := (bv_add r117 (0x1 : bv 64))
  %t130 = add i64 %t123, 1
  ; r125 := (read r124 (bv 8))
  %t131 = inttoptr i64 %t130 to i8*
  %t132 = load i8, i8* %t131
  ; r126 := (sext r125 32)
  %t133 = sext i8 %t132 to i32
  ; r127 := (uext r126 64)
  %t134 = zext i32 %t133 to i64
  ; r128 := (bv_add r119 (0x1 : bv 64))
  %t135 = add i64 %t125, 1
  ; r129 := (bv_and r126 (0xc0 : bv 32))
  %t136 = and i32 %t133, 192
  ; r130 := (eq r129 (0x80 : bv 32))
  %t137 = icmp eq i32 %t136, 128
  br i1 %t137, label %block_0_41ed2a, label %block_0_41ed82
block_0_41ed2a:
  %t138 = phi i64 [ %t105, %block_0_41ed03 ], [ %t119, %block_0_41ed10 ]
  %t139 = phi i64 [ %t106, %block_0_41ed03 ], [ %t120, %block_0_41ed10 ]
  %t140 = phi i64 [ %t107, %block_0_41ed03 ], [ %t121, %block_0_41ed10 ]
  %t141 = phi i64 [ %t108, %block_0_41ed03 ], [ %t122, %block_0_41ed10 ]
  %t142 = phi i64 [ %t109, %block_0_41ed03 ], [ %t130, %block_0_41ed10 ]
  %t143 = phi i64 [ %t110, %block_0_41ed03 ], [ %t124, %block_0_41ed10 ]
  %t144 = phi i64 [ %t118, %block_0_41ed03 ], [ %t135, %block_0_41ed10 ]
  %t145 = phi i64 [ %t111, %block_0_41ed03 ], [ %t134, %block_0_41ed10 ]
  %t146 = phi i64 [ %t112, %block_0_41ed03 ], [ %t126, %block_0_41ed10 ]
  %t147 = phi i64 [ %t113, %block_0_41ed03 ], [ %t127, %block_0_41ed10 ]
  %t148 = phi i64 [ %t114, %block_0_41ed03 ], [ %t128, %block_0_41ed10 ]
  %t149 = phi i512 [ %t115, %block_0_41ed03 ], [ %t129, %block_0_41ed10 ]
  ; r143 := (trunc r139 32)
  %t150 = trunc i64 %t146 to i32
  ; r144 := (trunc r138 32)
  %t151 = trunc i64 %t145 to i32
  ; r145 := (trunc r140 32)
  %t152 = trunc i64 %t147 to i32
  ; r146 := (bv_add r145 (0x1 : bv 32))
  %t153 = add i32 %t152, 1
  ; r147 := (uext r146 64)
  %t154 = zext i32 %t153 to i64
  ; r148 := (bv_shl r143 (0x6 : bv 32))
  %t155 = shl i32 %t150, 6
  ; r149 := (bv_and r144 (0x3f : bv 32))
  %t156 = and i32 %t151, 63
  ; r150 := (bv_or r149 r148)
  %t157 = or i32 %t156, %t155
  ; r151 := (uext r150 64)
  %t158 = zext i32 %t157 to i64
  ; r152 := (eq r136 r137)
  %t159 = icmp eq i64 %t143, %t144
  ; r153 := (bv_ule r137 r136)
  %t160 = icmp ule i64 %t144, %t143
  ; r154 := (not r152)
  %t161 = icmp eq i1 %t159, 0
  ; r155 := (and r153 r154)
  %t162 = and i1 %t160, %t161
  br i1 %t162, label %block_0_41ed10, label %block_0_41ed43
block_0_41ed43:
  %t163 = phi i64 [ %t66, %block_0_41ecd6 ], [ %t138, %block_0_41ed2a ]
  %t164 = phi i64 [ %t67, %block_0_41ecd6 ], [ %t139, %block_0_41ed2a ]
  %t165 = phi i64 [ %t68, %block_0_41ecd6 ], [ %t140, %block_0_41ed2a ]
  %t166 = phi i64 [ %t69, %block_0_41ecd6 ], [ %t141, %block_0_41ed2a ]
  %t167 = phi i64 [ %t70, %block_0_41ecd6 ], [ %t142, %block_0_41ed2a ]
  %t168 = phi i64 [ %t83, %block_0_41ecd6 ], [ %t143, %block_0_41ed2a ]
  %t169 = phi i64 [ %t73, %block_0_41ecd6 ], [ %t158, %block_0_41ed2a ]
  %t170 = phi i64 [ %t79, %block_0_41ecd6 ], [ %t154, %block_0_41ed2a ]
  %t171 = phi i64 [ %t74, %block_0_41ecd6 ], [ %t148, %block_0_41ed2a ]
  %t172 = phi i512 [ %t75, %block_0_41ecd6 ], [ %t149, %block_0_41ed2a ]
  ; r166 := (trunc r163 32)
  %t173 = trunc i64 %t170 to i32
  ; r167 := (trunc r159 32)
  %t174 = trunc i64 %t166 to i32
  ; r168 := (ssbb_overflows r166 r167 false)
  %t175 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t173, i32 %t174)
  %t176 = extractvalue { i32, i1 } %t175, 1
  ; r169 := (bv_sub r166 r167)
  %t177 = sub i32 %t173, %t174
  ; r170 := (bv_slt r169 (0x0 : bv 32))
  %t178 = icmp slt i32 %t177, 0
  ; r171 := (eq r170 r168)
  %t179 = icmp eq i1 %t178, %t176
  br i1 %t179, label %block_0_41ee68, label %block_0_41ed4c
block_0_41ed4c:
  %t180 = phi i64 [ %t163, %block_0_41ed43 ]
  %t181 = phi i64 [ %t166, %block_0_41ed43 ]
  %t182 = phi i64 [ %t169, %block_0_41ed43 ]
  %t183 = phi i64 [ %t170, %block_0_41ed43 ]
  %t184 = phi i64 [ %t171, %block_0_41ed43 ]
  %t185 = phi i512 [ %t172, %block_0_41ed43 ]
  ; r178 := (trunc r173 32)
  %t186 = trunc i64 %t181 to i32
  ; r179 := (trunc r175 32)
  %t187 = trunc i64 %t183 to i32
  ; r180 := (bv_sub r178 r179)
  %t188 = sub i32 %t186, %t187
  ; r181 := (trunc r176 32)
  %t189 = trunc i64 %t184 to i32
  ; r182 := (bv_add r172 (0x8 : bv 64))
  %t190 = add i64 %t180, 8
  ; write r182 r181
  %t191 = inttoptr i64 %t190 to i32*
  store i32 %t189, i32* %t191
  ; r183 := (bv_add r172 (0x4 : bv 64))
  %t192 = add i64 %t180, 4
  ; write r183 r180
  %t193 = inttoptr i64 %t192 to i32*
  store i32 %t188, i32* %t193
  ; r184 := (trunc r174 32)
  %t194 = trunc i64 %t182 to i32
  ; write r172 r184
  %t195 = inttoptr i64 %t180 to i32*
  store i32 %t194, i32* %t195
  br label %block_0_41ec95
block_0_41ed65:
  %t196 = phi i64 [ %t41, %block_0_41ecc0 ]
  %t197 = phi i64 [ %t42, %block_0_41ecc0 ]
  %t198 = phi i64 [ %t43, %block_0_41ecc0 ]
  %t199 = phi i64 [ %t44, %block_0_41ecc0 ]
  %t200 = phi i64 [ %t45, %block_0_41ecc0 ]
  %t201 = phi i64 [ %t46, %block_0_41ecc0 ]
  %t202 = phi i512 [ %t47, %block_0_41ecc0 ]
  ; r192 := (read r188 (bv 8))
  %t203 = inttoptr i64 %t199 to i8*
  %t204 = load i8, i8* %t203
  ; r193 := (uext r192 32)
  %t205 = zext i8 %t204 to i32
  ; r194 := (uext r192 64)
  %t206 = zext i8 %t204 to i64
  ; r195 := (bv_and r193 (0xffffff80 : bv 32))
  %t207 = and i32 %t205, 4294967168
  ; r196 := (eq r195 (0x0 : bv 32))
  %t208 = icmp eq i32 %t207, 0
  ; r197 := (uext r195 64)
  %t209 = zext i32 %t207 to i64
  br i1 %t208, label %block_0_41ed6f, label %block_0_41ed99
block_0_41ed6f:
  %t210 = phi i64 [ %t198, %block_0_41ed65 ]
  %t211 = phi i64 [ %t206, %block_0_41ed65 ]
  %t212 = phi i512 [ %t202, %block_0_41ed65 ]
  ; r201 := (eq r198 (0x0 : bv 64))
  %t213 = icmp eq i64 %t210, 0
  br i1 %t213, label %block_0_41ed76, label %block_0_41ed74
block_0_41ed74:
  %t214 = phi i64 [ %t210, %block_0_41ed6f ]
  %t215 = phi i64 [ %t211, %block_0_41ed6f ]
  %t216 = phi i512 [ %t212, %block_0_41ed6f ]
  ; r205 := (trunc r203 32)
  %t217 = trunc i64 %t215 to i32
  ; write r202 r205
  %t218 = inttoptr i64 %t214 to i32*
  store i32 %t217, i32* %t218
  br label %block_0_41ed76
block_0_41ed76:
  %t219 = phi i64 [ %t211, %block_0_41ed6f ], [ %t215, %block_0_41ed74 ]
  %t220 = phi i512 [ %t212, %block_0_41ed6f ], [ %t216, %block_0_41ed74 ]
  ; r208 := (trunc r206 32)
  %t221 = trunc i64 %t219 to i32
  ; r209 := (eq r208 (0x0 : bv 32))
  %t222 = icmp eq i32 %t221, 0
  ; r210 := (mux r209 (0x0 : bv 8) (0x1 : bv 8))
  %t223 = select i1 %t222, i8 0, i8 1
  ; r211 := (uext r210 64)
  %t224 = zext i8 %t223 to i64
  br label %block_0_41ec95
block_0_41ed82:
  %t225 = phi i64 [ %t90, %block_0_41ecf2 ], [ %t120, %block_0_41ed10 ], [ %t323, %block_0_41edf7 ], [ %t372, %block_0_41ee68 ]
  %t226 = phi i64 [ %t93, %block_0_41ecf2 ], [ %t130, %block_0_41ed10 ], [ %t325, %block_0_41edf7 ], [ %t374, %block_0_41ee68 ]
  %t227 = phi i64 [ %t94, %block_0_41ecf2 ], [ %t124, %block_0_41ed10 ], [ %t326, %block_0_41edf7 ], [ %t375, %block_0_41ee68 ]
  %t228 = phi i512 [ %t98, %block_0_41ecf2 ], [ %t129, %block_0_41ed10 ], [ %t329, %block_0_41edf7 ], [ %t378, %block_0_41ee68 ]
  ; r216 := (bitcast r215 (vec 8 double))
  %t229 = bitcast i512 %t228 to <8 x double>
  ; r217 := call __error_unthreaded(r214, r213, r212, r216)
  %t230 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t227, i64 %t226, i64 %t225, <8 x double> %t229)
  ; r218 := (tuple_field r217 0)
  %t231 = extractvalue { i64, i64, <8 x double> } %t230, 0
  ; r219 := (tuple_field r217 1)
  %t232 = extractvalue { i64, i64, <8 x double> } %t230, 1
  ; r220 := (tuple_field r217 2)
  %t233 = extractvalue { i64, i64, <8 x double> } %t230, 2
  ; r221 := (bitcast r220 (bv 512))
  %t234 = bitcast <8 x double> %t233 to i512
  br label %block_0_41ed87
block_0_41ed87:
  %t235 = phi i64 [ %t231, %block_0_41ed82 ]
  %t236 = phi i512 [ %t234, %block_0_41ed82 ]
  ; write r222 (0x56 : bv 32)
  %t237 = inttoptr i64 %t235 to i32*
  store i32 86, i32* %t237
  br label %block_0_41ec95
block_0_41ed99:
  %t238 = phi i64 [ %t209, %block_0_41ed65 ]
  %t239 = phi i64 [ %t196, %block_0_41ed65 ]
  %t240 = phi i64 [ %t197, %block_0_41ed65 ]
  %t241 = phi i64 [ %t198, %block_0_41ed65 ]
  %t242 = phi i64 [ %t199, %block_0_41ed65 ]
  %t243 = phi i64 [ %t206, %block_0_41ed65 ]
  %t244 = phi i64 [ %t200, %block_0_41ed65 ]
  %t245 = phi i64 [ %t201, %block_0_41ed65 ]
  %t246 = phi i512 [ %t202, %block_0_41ed65 ]
  ; r233 := (trunc r224 32)
  %t247 = trunc i64 %t238 to i32
  ; r234 := (eq r233 (0x0 : bv 32))
  %t248 = icmp eq i32 %t247, 0
  br i1 %t248, label %block_0_41ed9d, label %block_0_41edbb
block_0_41ed9d:
  %t249 = phi i64 [ %t238, %block_0_41ed99 ]
  %t250 = phi i64 [ %t239, %block_0_41ed99 ]
  %t251 = phi i64 [ %t241, %block_0_41ed99 ]
  %t252 = phi i64 [ %t242, %block_0_41ed99 ]
  %t253 = phi i64 [ %t243, %block_0_41ed99 ]
  %t254 = phi i64 [ %t244, %block_0_41ed99 ]
  %t255 = phi i64 [ %t245, %block_0_41ed99 ]
  %t256 = phi i512 [ %t246, %block_0_41ed99 ]
  ; r243 := (bv_and r235 (0xffffffffffffff00 : bv 64))
  %t257 = and i64 %t249, 18446744073709551360
  ; r244 := (bv_or r243 (0x7f : bv 64))
  %t258 = or i64 %t257, 127
  br label %block_0_41edac
block_0_41edac:
  %t259 = phi i64 [ %t258, %block_0_41ed9d ], [ %t343, %block_0_41ee09 ], [ 31, %block_0_41ee20 ], [ %t360, %block_0_41ee3a ], [ %t370, %block_0_41ee51 ], [ %t421, %block_0_41eea3 ]
  %t260 = phi i64 [ %t250, %block_0_41ed9d ], [ %t335, %block_0_41ee09 ], [ %t344, %block_0_41ee20 ], [ %t352, %block_0_41ee3a ], [ %t362, %block_0_41ee51 ], [ %t413, %block_0_41eea3 ]
  %t261 = phi i64 [ 1, %block_0_41ed9d ], [ 6, %block_0_41ee09 ], [ 2, %block_0_41ee20 ], [ 3, %block_0_41ee3a ], [ 4, %block_0_41ee51 ], [ 5, %block_0_41eea3 ]
  %t262 = phi i64 [ %t251, %block_0_41ed9d ], [ %t336, %block_0_41ee09 ], [ %t345, %block_0_41ee20 ], [ %t353, %block_0_41ee3a ], [ %t363, %block_0_41ee51 ], [ %t414, %block_0_41eea3 ]
  %t263 = phi i64 [ 1, %block_0_41ed9d ], [ 6, %block_0_41ee09 ], [ 2, %block_0_41ee20 ], [ 3, %block_0_41ee3a ], [ 4, %block_0_41ee51 ], [ 5, %block_0_41eea3 ]
  %t264 = phi i64 [ %t252, %block_0_41ed9d ], [ %t337, %block_0_41ee09 ], [ %t346, %block_0_41ee20 ], [ %t354, %block_0_41ee3a ], [ %t364, %block_0_41ee51 ], [ %t415, %block_0_41eea3 ]
  %t265 = phi i64 [ %t253, %block_0_41ed9d ], [ %t338, %block_0_41ee09 ], [ %t347, %block_0_41ee20 ], [ %t355, %block_0_41ee3a ], [ %t365, %block_0_41ee51 ], [ %t416, %block_0_41eea3 ]
  %t266 = phi i64 [ %t254, %block_0_41ed9d ], [ %t339, %block_0_41ee09 ], [ %t348, %block_0_41ee20 ], [ %t356, %block_0_41ee3a ], [ %t366, %block_0_41ee51 ], [ %t417, %block_0_41eea3 ]
  %t267 = phi i64 [ %t255, %block_0_41ed9d ], [ %t340, %block_0_41ee09 ], [ %t349, %block_0_41ee20 ], [ %t357, %block_0_41ee3a ], [ %t367, %block_0_41ee51 ], [ %t418, %block_0_41eea3 ]
  %t268 = phi i64 [ 0, %block_0_41ed9d ], [ 67108864, %block_0_41ee09 ], [ 128, %block_0_41ee20 ], [ 2048, %block_0_41ee3a ], [ 65536, %block_0_41ee51 ], [ 2097152, %block_0_41eea3 ]
  %t269 = phi i512 [ %t256, %block_0_41ed9d ], [ %t341, %block_0_41ee09 ], [ %t350, %block_0_41ee20 ], [ %t358, %block_0_41ee3a ], [ %t368, %block_0_41ee51 ], [ %t419, %block_0_41eea3 ]
  ; r256 := (trunc r245 32)
  %t270 = trunc i64 %t259 to i32
  ; r257 := (bv_add r250 (0x1 : bv 64))
  %t271 = add i64 %t264, 1
  ; r258 := (trunc r251 32)
  %t272 = trunc i64 %t265 to i32
  ; r259 := (bv_and r256 r258)
  %t273 = and i32 %t270, %t272
  ; r260 := (uext r259 64)
  %t274 = zext i32 %t273 to i64
  br label %block_0_41ecd6
block_0_41edbb:
  %t275 = phi i64 [ %t239, %block_0_41ed99 ]
  %t276 = phi i64 [ %t240, %block_0_41ed99 ]
  %t277 = phi i64 [ %t241, %block_0_41ed99 ]
  %t278 = phi i64 [ %t242, %block_0_41ed99 ]
  %t279 = phi i64 [ %t243, %block_0_41ed99 ]
  %t280 = phi i64 [ %t244, %block_0_41ed99 ]
  %t281 = phi i64 [ %t245, %block_0_41ed99 ]
  %t282 = phi i512 [ %t246, %block_0_41ed99 ]
  ; r269 := (trunc r265 32)
  %t283 = trunc i64 %t279 to i32
  ; r270 := (bv_and r269 (0xe0 : bv 32))
  %t284 = and i32 %t283, 224
  ; r271 := (eq r270 (0xc0 : bv 32))
  %t285 = icmp eq i32 %t284, 192
  br i1 %t285, label %block_0_41ee20, label %block_0_41edc9
block_0_41edc9:
  %t286 = phi i64 [ %t275, %block_0_41edbb ]
  %t287 = phi i64 [ %t276, %block_0_41edbb ]
  %t288 = phi i64 [ %t277, %block_0_41edbb ]
  %t289 = phi i64 [ %t278, %block_0_41edbb ]
  %t290 = phi i64 [ %t279, %block_0_41edbb ]
  %t291 = phi i64 [ %t280, %block_0_41edbb ]
  %t292 = phi i64 [ %t281, %block_0_41edbb ]
  %t293 = phi i512 [ %t282, %block_0_41edbb ]
  ; r280 := (trunc r276 32)
  %t294 = trunc i64 %t290 to i32
  ; r281 := (bv_and r280 (0xf0 : bv 32))
  %t295 = and i32 %t294, 240
  ; r282 := (uext r281 64)
  %t296 = zext i32 %t295 to i64
  ; r283 := (eq r281 (0xe0 : bv 32))
  %t297 = icmp eq i32 %t295, 224
  br i1 %t297, label %block_0_41ee3a, label %block_0_41edd7
block_0_41edd7:
  %t298 = phi i64 [ %t286, %block_0_41edc9 ]
  %t299 = phi i64 [ %t287, %block_0_41edc9 ]
  %t300 = phi i64 [ %t288, %block_0_41edc9 ]
  %t301 = phi i64 [ %t289, %block_0_41edc9 ]
  %t302 = phi i64 [ %t290, %block_0_41edc9 ]
  %t303 = phi i64 [ %t291, %block_0_41edc9 ]
  %t304 = phi i64 [ %t292, %block_0_41edc9 ]
  %t305 = phi i512 [ %t293, %block_0_41edc9 ]
  ; r292 := (trunc r288 32)
  %t306 = trunc i64 %t302 to i32
  ; r293 := (bv_and r292 (0xf8 : bv 32))
  %t307 = and i32 %t306, 248
  ; r294 := (uext r293 64)
  %t308 = zext i32 %t307 to i64
  ; r295 := (eq r293 (0xf0 : bv 32))
  %t309 = icmp eq i32 %t307, 240
  br i1 %t309, label %block_0_41ee51, label %block_0_41ede5
block_0_41ede5:
  %t310 = phi i64 [ %t298, %block_0_41edd7 ]
  %t311 = phi i64 [ %t299, %block_0_41edd7 ]
  %t312 = phi i64 [ %t300, %block_0_41edd7 ]
  %t313 = phi i64 [ %t301, %block_0_41edd7 ]
  %t314 = phi i64 [ %t302, %block_0_41edd7 ]
  %t315 = phi i64 [ %t303, %block_0_41edd7 ]
  %t316 = phi i64 [ %t304, %block_0_41edd7 ]
  %t317 = phi i512 [ %t305, %block_0_41edd7 ]
  ; r304 := (trunc r300 32)
  %t318 = trunc i64 %t314 to i32
  ; r305 := (bv_and r304 (0xfc : bv 32))
  %t319 = and i32 %t318, 252
  ; r306 := (uext r305 64)
  %t320 = zext i32 %t319 to i64
  ; r307 := (eq r305 (0xf8 : bv 32))
  %t321 = icmp eq i32 %t319, 248
  br i1 %t321, label %block_0_41eea3, label %block_0_41edf7
block_0_41edf7:
  %t322 = phi i64 [ %t310, %block_0_41ede5 ]
  %t323 = phi i64 [ %t311, %block_0_41ede5 ]
  %t324 = phi i64 [ %t312, %block_0_41ede5 ]
  %t325 = phi i64 [ %t313, %block_0_41ede5 ]
  %t326 = phi i64 [ %t314, %block_0_41ede5 ]
  %t327 = phi i64 [ %t315, %block_0_41ede5 ]
  %t328 = phi i64 [ %t316, %block_0_41ede5 ]
  %t329 = phi i512 [ %t317, %block_0_41ede5 ]
  ; r316 := (trunc r312 32)
  %t330 = trunc i64 %t326 to i32
  ; r317 := (bv_and r316 (0xfe : bv 32))
  %t331 = and i32 %t330, 254
  ; r318 := (uext r317 64)
  %t332 = zext i32 %t331 to i64
  ; r319 := (eq r317 (0xfc : bv 32))
  %t333 = icmp eq i32 %t331, 252
  br i1 %t333, label %block_0_41ee09, label %block_0_41ed82
block_0_41ee09:
  %t334 = phi i64 [ %t332, %block_0_41edf7 ]
  %t335 = phi i64 [ %t322, %block_0_41edf7 ]
  %t336 = phi i64 [ %t324, %block_0_41edf7 ]
  %t337 = phi i64 [ %t325, %block_0_41edf7 ]
  %t338 = phi i64 [ %t326, %block_0_41edf7 ]
  %t339 = phi i64 [ %t327, %block_0_41edf7 ]
  %t340 = phi i64 [ %t328, %block_0_41edf7 ]
  %t341 = phi i512 [ %t329, %block_0_41edf7 ]
  ; r328 := (bv_and r320 (0xffffffffffffff00 : bv 64))
  %t342 = and i64 %t334, 18446744073709551360
  ; r329 := (bv_or r328 (0x1 : bv 64))
  %t343 = or i64 %t342, 1
  br label %block_0_41edac
block_0_41ee20:
  %t344 = phi i64 [ %t275, %block_0_41edbb ]
  %t345 = phi i64 [ %t277, %block_0_41edbb ]
  %t346 = phi i64 [ %t278, %block_0_41edbb ]
  %t347 = phi i64 [ %t279, %block_0_41edbb ]
  %t348 = phi i64 [ %t280, %block_0_41edbb ]
  %t349 = phi i64 [ %t281, %block_0_41edbb ]
  %t350 = phi i512 [ %t282, %block_0_41edbb ]
  br label %block_0_41edac
block_0_41ee3a:
  %t351 = phi i64 [ %t296, %block_0_41edc9 ]
  %t352 = phi i64 [ %t286, %block_0_41edc9 ]
  %t353 = phi i64 [ %t288, %block_0_41edc9 ]
  %t354 = phi i64 [ %t289, %block_0_41edc9 ]
  %t355 = phi i64 [ %t290, %block_0_41edc9 ]
  %t356 = phi i64 [ %t291, %block_0_41edc9 ]
  %t357 = phi i64 [ %t292, %block_0_41edc9 ]
  %t358 = phi i512 [ %t293, %block_0_41edc9 ]
  ; r345 := (bv_and r337 (0xffffffffffffff00 : bv 64))
  %t359 = and i64 %t351, 18446744073709551360
  ; r346 := (bv_or r345 (0xf : bv 64))
  %t360 = or i64 %t359, 15
  br label %block_0_41edac
block_0_41ee51:
  %t361 = phi i64 [ %t308, %block_0_41edd7 ]
  %t362 = phi i64 [ %t298, %block_0_41edd7 ]
  %t363 = phi i64 [ %t300, %block_0_41edd7 ]
  %t364 = phi i64 [ %t301, %block_0_41edd7 ]
  %t365 = phi i64 [ %t302, %block_0_41edd7 ]
  %t366 = phi i64 [ %t303, %block_0_41edd7 ]
  %t367 = phi i64 [ %t304, %block_0_41edd7 ]
  %t368 = phi i512 [ %t305, %block_0_41edd7 ]
  ; r355 := (bv_and r347 (0xffffffffffffff00 : bv 64))
  %t369 = and i64 %t361, 18446744073709551360
  ; r356 := (bv_or r355 (0x7 : bv 64))
  %t370 = or i64 %t369, 7
  br label %block_0_41edac
block_0_41ee68:
  %t371 = phi i64 [ %t163, %block_0_41ed43 ]
  %t372 = phi i64 [ %t164, %block_0_41ed43 ]
  %t373 = phi i64 [ %t165, %block_0_41ed43 ]
  %t374 = phi i64 [ %t167, %block_0_41ed43 ]
  %t375 = phi i64 [ %t168, %block_0_41ed43 ]
  %t376 = phi i64 [ %t169, %block_0_41ed43 ]
  %t377 = phi i64 [ %t171, %block_0_41ed43 ]
  %t378 = phi i512 [ %t172, %block_0_41ed43 ]
  ; r365 := (trunc r362 32)
  %t379 = trunc i64 %t376 to i32
  ; r366 := (trunc r363 32)
  %t380 = trunc i64 %t377 to i32
  ; r367 := (ssbb_overflows r365 r366 false)
  %t381 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t379, i32 %t380)
  %t382 = extractvalue { i32, i1 } %t381, 1
  ; r368 := (bv_sub r365 r366)
  %t383 = sub i32 %t379, %t380
  ; r369 := (bv_slt r368 (0x0 : bv 32))
  %t384 = icmp slt i32 %t383, 0
  ; r370 := (xor r369 r367)
  %t385 = xor i1 %t384, %t382
  br i1 %t385, label %block_0_41ed82, label %block_0_41ee71
block_0_41ee71:
  %t386 = phi i64 [ %t371, %block_0_41ee68 ]
  %t387 = phi i64 [ %t372, %block_0_41ee68 ]
  %t388 = phi i64 [ %t373, %block_0_41ee68 ]
  %t389 = phi i64 [ %t376, %block_0_41ee68 ]
  %t390 = phi i512 [ %t378, %block_0_41ee68 ]
  ; r376 := (eq r373 (0x0 : bv 64))
  %t391 = icmp eq i64 %t388, 0
  br i1 %t391, label %block_0_41ee79, label %block_0_41ee76
block_0_41ee76:
  %t392 = phi i64 [ %t386, %block_0_41ee71 ]
  %t393 = phi i64 [ %t387, %block_0_41ee71 ]
  %t394 = phi i64 [ %t388, %block_0_41ee71 ]
  %t395 = phi i64 [ %t389, %block_0_41ee71 ]
  %t396 = phi i512 [ %t390, %block_0_41ee71 ]
  ; r382 := (trunc r380 32)
  %t397 = trunc i64 %t395 to i32
  ; write r379 r382
  %t398 = inttoptr i64 %t394 to i32*
  store i32 %t397, i32* %t398
  br label %block_0_41ee79
block_0_41ee79:
  %t399 = phi i64 [ %t386, %block_0_41ee71 ], [ %t392, %block_0_41ee76 ]
  %t400 = phi i64 [ %t387, %block_0_41ee71 ], [ %t393, %block_0_41ee76 ]
  %t401 = phi i64 [ %t389, %block_0_41ee71 ], [ %t395, %block_0_41ee76 ]
  %t402 = phi i512 [ %t390, %block_0_41ee71 ], [ %t396, %block_0_41ee76 ]
  ; r387 := (trunc r385 32)
  %t403 = trunc i64 %t401 to i32
  ; r388 := (eq r387 (0x0 : bv 32))
  %t404 = icmp eq i32 %t403, 0
  ; r389 := (bv_add r383 (0x4 : bv 64))
  %t405 = add i64 %t399, 4
  ; write r389 (0x0 : bv 32)
  %t406 = inttoptr i64 %t405 to i32*
  store i32 0, i32* %t406
  ; r390 := (mux r388 (0x0 : bv 64) r384)
  %t407 = select i1 %t404, i64 0, i64 %t400
  br label %block_0_41ec95
block_0_41ee91:
  %t408 = phi i64 [ %t27, %block_0_41ecab ]
  %t409 = phi i64 [ %t28, %block_0_41ecab ]
  %t410 = phi i64 [ %t31, %block_0_41ecab ]
  %t411 = phi i512 [ %t32, %block_0_41ecab ]
  br label %block_0_41ecc0
block_0_41eea3:
  %t412 = phi i64 [ %t320, %block_0_41ede5 ]
  %t413 = phi i64 [ %t310, %block_0_41ede5 ]
  %t414 = phi i64 [ %t312, %block_0_41ede5 ]
  %t415 = phi i64 [ %t313, %block_0_41ede5 ]
  %t416 = phi i64 [ %t314, %block_0_41ede5 ]
  %t417 = phi i64 [ %t315, %block_0_41ede5 ]
  %t418 = phi i64 [ %t316, %block_0_41ede5 ]
  %t419 = phi i512 [ %t317, %block_0_41ede5 ]
  ; r403 := (bv_and r395 (0xffffffffffffff00 : bv 64))
  %t420 = and i64 %t412, 18446744073709551360
  ; r404 := (bv_or r403 (0x3 : bv 64))
  %t421 = or i64 %t420, 3
  br label %block_0_41edac
}
define { i64, i64, <8 x double> } @reallocf(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_41f2d0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call realloc(arg0, arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @realloc(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ; r17 := (tuple_field r16 0)
  %t17 = extractvalue { i64, i64, <8 x double> } %t16, 0
  ; r18 := (tuple_field r16 1)
  %t18 = extractvalue { i64, i64, <8 x double> } %t16, 1
  ; r19 := (tuple_field r16 2)
  %t19 = extractvalue { i64, i64, <8 x double> } %t16, 2
  ; r20 := (bitcast r19 (bv 512))
  %t20 = bitcast <8 x double> %t19 to i512
  ; r21 := (bitcast arg7 (bv 512))
  %t21 = bitcast <8 x double> %arg7 to i512
  ; r22 := (bitcast arg8 (bv 512))
  %t22 = bitcast <8 x double> %arg8 to i512
  ; r23 := (bitcast arg9 (bv 512))
  %t23 = bitcast <8 x double> %arg9 to i512
  ; r24 := (bitcast arg10 (bv 512))
  %t24 = bitcast <8 x double> %arg10 to i512
  ; r25 := (bitcast arg11 (bv 512))
  %t25 = bitcast <8 x double> %arg11 to i512
  ; r26 := (bitcast arg12 (bv 512))
  %t26 = bitcast <8 x double> %arg12 to i512
  ; r27 := (bitcast arg13 (bv 512))
  %t27 = bitcast <8 x double> %arg13 to i512
  br label %block_0_41f2ee
block_0_41f2ee:
  %t28 = phi i64 [ %t17, %block_0_41f2d0 ]
  %t29 = phi i64 [ %arg3, %block_0_41f2d0 ]
  %t30 = phi i64 [ %t18, %block_0_41f2d0 ]
  %t31 = phi i64 [ %arg0, %block_0_41f2d0 ]
  %t32 = phi i64 [ %arg1, %block_0_41f2d0 ]
  %t33 = phi i64 [ %arg4, %block_0_41f2d0 ]
  %t34 = phi i64 [ %arg5, %block_0_41f2d0 ]
  %t35 = phi i64 [ %arg1, %block_0_41f2d0 ]
  %t36 = phi i512 [ %t20, %block_0_41f2d0 ]
  %t37 = phi i512 [ %t21, %block_0_41f2d0 ]
  %t38 = phi i512 [ %t22, %block_0_41f2d0 ]
  %t39 = phi i512 [ %t23, %block_0_41f2d0 ]
  %t40 = phi i512 [ %t24, %block_0_41f2d0 ]
  %t41 = phi i512 [ %t25, %block_0_41f2d0 ]
  %t42 = phi i512 [ %t26, %block_0_41f2d0 ]
  %t43 = phi i512 [ %t27, %block_0_41f2d0 ]
  ; r44 := (eq r28 (0x0 : bv 64))
  %t44 = icmp eq i64 %t28, 0
  br i1 %t44, label %block_0_41f310, label %block_0_41f2f6
block_0_41f2f6:
  %t45 = phi i64 [ %t30, %block_0_41f2ee ], [ %t54, %block_0_41f310 ], [ %t71, %block_0_41f315 ], [ %t114, %block_0_41f325 ]
  %t46 = phi i64 [ %t28, %block_0_41f2ee ], [ %t52, %block_0_41f310 ], [ %t69, %block_0_41f315 ], [ %t115, %block_0_41f325 ]
  %t47 = phi i512 [ %t36, %block_0_41f2ee ], [ %t60, %block_0_41f310 ], [ %t77, %block_0_41f315 ], [ %t116, %block_0_41f325 ]
  ; r48 := (bitcast r47 (vec 8 double))
  %t48 = bitcast i512 %t47 to <8 x double>
  ; r49 := (tuple r46 r45 r48)
  %t49 = insertvalue { i64, i64, <8 x double> } undef, i64 %t46, 0
  %t50 = insertvalue { i64, i64, <8 x double> } %t49, i64 %t45, 1
  %t51 = insertvalue { i64, i64, <8 x double> } %t50, <8 x double> %t48, 2
  ret { i64, i64, <8 x double> } %t51
block_0_41f310:
  %t52 = phi i64 [ %t28, %block_0_41f2ee ]
  %t53 = phi i64 [ %t29, %block_0_41f2ee ]
  %t54 = phi i64 [ %t30, %block_0_41f2ee ]
  %t55 = phi i64 [ %t31, %block_0_41f2ee ]
  %t56 = phi i64 [ %t32, %block_0_41f2ee ]
  %t57 = phi i64 [ %t33, %block_0_41f2ee ]
  %t58 = phi i64 [ %t34, %block_0_41f2ee ]
  %t59 = phi i64 [ %t35, %block_0_41f2ee ]
  %t60 = phi i512 [ %t36, %block_0_41f2ee ]
  %t61 = phi i512 [ %t37, %block_0_41f2ee ]
  %t62 = phi i512 [ %t38, %block_0_41f2ee ]
  %t63 = phi i512 [ %t39, %block_0_41f2ee ]
  %t64 = phi i512 [ %t40, %block_0_41f2ee ]
  %t65 = phi i512 [ %t41, %block_0_41f2ee ]
  %t66 = phi i512 [ %t42, %block_0_41f2ee ]
  %t67 = phi i512 [ %t43, %block_0_41f2ee ]
  ; r66 := (eq r53 (0x0 : bv 64))
  %t68 = icmp eq i64 %t55, 0
  br i1 %t68, label %block_0_41f2f6, label %block_0_41f315
block_0_41f315:
  %t69 = phi i64 [ %t52, %block_0_41f310 ]
  %t70 = phi i64 [ %t53, %block_0_41f310 ]
  %t71 = phi i64 [ %t54, %block_0_41f310 ]
  %t72 = phi i64 [ %t55, %block_0_41f310 ]
  %t73 = phi i64 [ %t56, %block_0_41f310 ]
  %t74 = phi i64 [ %t57, %block_0_41f310 ]
  %t75 = phi i64 [ %t58, %block_0_41f310 ]
  %t76 = phi i64 [ %t59, %block_0_41f310 ]
  %t77 = phi i512 [ %t60, %block_0_41f310 ]
  %t78 = phi i512 [ %t61, %block_0_41f310 ]
  %t79 = phi i512 [ %t62, %block_0_41f310 ]
  %t80 = phi i512 [ %t63, %block_0_41f310 ]
  %t81 = phi i512 [ %t64, %block_0_41f310 ]
  %t82 = phi i512 [ %t65, %block_0_41f310 ]
  %t83 = phi i512 [ %t66, %block_0_41f310 ]
  %t84 = phi i512 [ %t67, %block_0_41f310 ]
  ; r83 := (eq r74 (0x0 : bv 64))
  %t85 = icmp eq i64 %t76, 0
  br i1 %t85, label %block_0_41f2f6, label %block_0_41f31a
block_0_41f31a:
  %t86 = phi i64 [ %t69, %block_0_41f315 ]
  %t87 = phi i64 [ %t70, %block_0_41f315 ]
  %t88 = phi i64 [ %t71, %block_0_41f315 ]
  %t89 = phi i64 [ %t72, %block_0_41f315 ]
  %t90 = phi i64 [ %t73, %block_0_41f315 ]
  %t91 = phi i64 [ %t74, %block_0_41f315 ]
  %t92 = phi i64 [ %t75, %block_0_41f315 ]
  %t93 = phi i512 [ %t77, %block_0_41f315 ]
  %t94 = phi i512 [ %t78, %block_0_41f315 ]
  %t95 = phi i512 [ %t79, %block_0_41f315 ]
  %t96 = phi i512 [ %t80, %block_0_41f315 ]
  %t97 = phi i512 [ %t81, %block_0_41f315 ]
  %t98 = phi i512 [ %t82, %block_0_41f315 ]
  %t99 = phi i512 [ %t83, %block_0_41f315 ]
  %t100 = phi i512 [ %t84, %block_0_41f315 ]
  ; r99 := (bitcast r91 (vec 8 double))
  %t101 = bitcast i512 %t93 to <8 x double>
  ; r100 := (bitcast r92 (vec 8 double))
  %t102 = bitcast i512 %t94 to <8 x double>
  ; r101 := (bitcast r93 (vec 8 double))
  %t103 = bitcast i512 %t95 to <8 x double>
  ; r102 := (bitcast r94 (vec 8 double))
  %t104 = bitcast i512 %t96 to <8 x double>
  ; r103 := (bitcast r95 (vec 8 double))
  %t105 = bitcast i512 %t97 to <8 x double>
  ; r104 := (bitcast r96 (vec 8 double))
  %t106 = bitcast i512 %t98 to <8 x double>
  ; r105 := (bitcast r97 (vec 8 double))
  %t107 = bitcast i512 %t99 to <8 x double>
  ; r106 := (bitcast r98 (vec 8 double))
  %t108 = bitcast i512 %t100 to <8 x double>
  ; r107 := call free(r87, r88, r86, r85, r89, r90, r99, r100, r101, r102, r103, r104, r105, r106)
  %t109 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t89, i64 %t90, i64 %t88, i64 %t87, i64 %t91, i64 %t92, <8 x double> %t101, <8 x double> %t102, <8 x double> %t103, <8 x double> %t104, <8 x double> %t105, <8 x double> %t106, <8 x double> %t107, <8 x double> %t108)
  ; r108 := (tuple_field r107 0)
  %t110 = extractvalue { i64, i64, <8 x double> } %t109, 0
  ; r109 := (tuple_field r107 1)
  %t111 = extractvalue { i64, i64, <8 x double> } %t109, 1
  ; r110 := (tuple_field r107 2)
  %t112 = extractvalue { i64, i64, <8 x double> } %t109, 2
  ; r111 := (bitcast r110 (bv 512))
  %t113 = bitcast <8 x double> %t112 to i512
  br label %block_0_41f325
block_0_41f325:
  %t114 = phi i64 [ %t111, %block_0_41f31a ]
  %t115 = phi i64 [ %t86, %block_0_41f31a ]
  %t116 = phi i512 [ %t113, %block_0_41f31a ]
  br label %block_0_41f2f6
}
define { i64, <8 x double> } @_add(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41f330:
  ; r0 := (bv_ult arg1 arg2)
  %t0 = icmp ult i64 %arg1, %arg2
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  ; r2 := (bitcast arg3 (bv 512))
  %t2 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_41f335, label %block_0_41f357
block_0_41f335:
  %t3 = phi i64 [ %arg2, %block_0_41f330 ]
  %t4 = phi i64 [ %arg1, %block_0_41f330 ]
  %t5 = phi i64 [ %arg0, %block_0_41f330 ]
  %t6 = phi i512 [ %t1, %block_0_41f330 ]
  ; r7 := (read r5 (bv 8))
  %t7 = inttoptr i64 %t5 to i8*
  %t8 = load i8, i8* %t7
  ; r8 := (eq r7 (0x0 : bv 8))
  %t9 = icmp eq i8 %t8, 0
  ; write r4 r7
  %t10 = inttoptr i64 %t4 to i8*
  store i8 %t8, i8* %t10
  br i1 %t9, label %block_0_41f33e, label %block_0_41f34e
block_0_41f33e:
  %t11 = phi i64 [ %t4, %block_0_41f335 ]
  %t12 = phi i512 [ %t6, %block_0_41f335 ]
  br label %block_0_41f357
block_0_41f340:
  %t13 = phi i64 [ %t22, %block_0_41f34e ]
  %t14 = phi i64 [ %t26, %block_0_41f34e ]
  %t15 = phi i64 [ %t24, %block_0_41f34e ]
  %t16 = phi i512 [ %t25, %block_0_41f34e ]
  ; r15 := (bv_add r13 (0x1 : bv 64))
  %t17 = add i64 %t15, 1
  ; r16 := (read r15 (bv 8))
  %t18 = inttoptr i64 %t17 to i8*
  %t19 = load i8, i8* %t18
  ; r17 := (eq r16 (0x0 : bv 8))
  %t20 = icmp eq i8 %t19, 0
  ; write r12 r16
  %t21 = inttoptr i64 %t14 to i8*
  store i8 %t19, i8* %t21
  br i1 %t20, label %block_0_41f357, label %block_0_41f34e
block_0_41f34e:
  %t22 = phi i64 [ %t3, %block_0_41f335 ], [ %t13, %block_0_41f340 ]
  %t23 = phi i64 [ %t4, %block_0_41f335 ], [ %t14, %block_0_41f340 ]
  %t24 = phi i64 [ %t5, %block_0_41f335 ], [ %t17, %block_0_41f340 ]
  %t25 = phi i512 [ %t6, %block_0_41f335 ], [ %t16, %block_0_41f340 ]
  ; r22 := (bv_add r19 (0x1 : bv 64))
  %t26 = add i64 %t23, 1
  ; r23 := (eq r22 r18)
  %t27 = icmp eq i64 %t26, %t22
  br i1 %t27, label %block_0_41f357, label %block_0_41f340
block_0_41f357:
  %t28 = phi i64 [ %arg1, %block_0_41f330 ], [ %t11, %block_0_41f33e ], [ %t14, %block_0_41f340 ], [ %t26, %block_0_41f34e ]
  %t29 = phi i512 [ %t2, %block_0_41f330 ], [ %t12, %block_0_41f33e ], [ %t16, %block_0_41f340 ], [ %t25, %block_0_41f34e ]
  ; r26 := (bitcast r25 (vec 8 double))
  %t30 = bitcast i512 %t29 to <8 x double>
  ; r27 := (tuple r24 r26)
  %t31 = insertvalue { i64, <8 x double> } undef, i64 %t28, 0
  %t32 = insertvalue { i64, <8 x double> } %t31, <8 x double> %t30, 1
  ret { i64, <8 x double> } %t32
}
define void @_yconv(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6) {
block_0_41f3d0:
  ; r0 := (trunc arg1 32)
  %t0 = trunc i64 %arg1 to i32
  ; r1 := (trunc arg2 32)
  %t1 = trunc i64 %arg2 to i32
  ; r2 := (uext r1 64)
  %t2 = zext i32 %t1 to i64
  ; r3 := (trunc arg3 32)
  %t3 = trunc i64 %arg3 to i32
  ; r4 := (uext r3 64)
  %t4 = zext i32 %t3 to i64
  ; r5 := (sext r0 64)
  %t5 = sext i32 %t0 to i64
  ; r6 := (bv_mul r5 (0x51eb851f : bv 64))
  %t6 = mul i64 %t5, 1374389535
  ; r7 := (bv_shr r6 (0x20 : bv 64))
  %t7 = lshr i64 %t6, 32
  ; r8 := (trunc r7 32)
  %t8 = trunc i64 %t7 to i32
  ; r9 := (bv_sar r0 (0x1f : bv 32))
  %t9 = ashr i32 %t0, 31
  ; r10 := (bv_sar r8 (0x5 : bv 32))
  %t10 = ashr i32 %t8, 5
  ; r11 := (bv_sub r10 r9)
  %t11 = sub i32 %t10, %t9
  ; r12 := (uext r11 64)
  %t12 = zext i32 %t11 to i64
  ; r13 := (sext r11 64)
  %t13 = sext i32 %t11 to i64
  ; r14 := (bv_mul (0x64 : bv 64) r13)
  %t14 = mul i64 100, %t13
  ; r15 := (trunc r14 32)
  %t15 = trunc i64 %t14 to i32
  ; r16 := (trunc arg0 32)
  %t16 = trunc i64 %arg0 to i32
  ; r17 := (bv_sar r16 (0x1f : bv 32))
  %t17 = ashr i32 %t16, 31
  ; r18 := (bv_sub r0 r15)
  %t18 = sub i32 %t0, %t15
  ; r19 := (sext r16 64)
  %t19 = sext i32 %t16 to i64
  ; r20 := (bv_mul r19 (0x51eb851f : bv 64))
  %t20 = mul i64 %t19, 1374389535
  ; r21 := (bv_shr r20 (0x20 : bv 64))
  %t21 = lshr i64 %t20, 32
  ; r22 := (trunc r21 32)
  %t22 = trunc i64 %t21 to i32
  ; r23 := (bv_sar r22 (0x5 : bv 32))
  %t23 = ashr i32 %t22, 5
  ; r24 := (bv_sub r23 r17)
  %t24 = sub i32 %t23, %t17
  ; r25 := (uext r24 64)
  %t25 = zext i32 %t24 to i64
  ; r26 := (sext r24 64)
  %t26 = sext i32 %t24 to i64
  ; r27 := (bv_mul (0x64 : bv 64) r26)
  %t27 = mul i64 100, %t26
  ; r28 := (trunc r27 32)
  %t28 = trunc i64 %t27 to i32
  ; r29 := (bv_sub r16 r28)
  %t29 = sub i32 %t16, %t28
  ; r30 := (bv_add r12 r25)
  %t30 = add i64 %t12, %t25
  ; r31 := (trunc r30 32)
  %t31 = trunc i64 %t30 to i32
  ; r32 := (uext r31 64)
  %t32 = zext i32 %t31 to i64
  ; r33 := (bv_add r18 r29)
  %t33 = add i32 %t18, %t29
  ; r34 := (sext r33 64)
  %t34 = sext i32 %t33 to i64
  ; r35 := (bv_mul r34 (0x51eb851f : bv 64))
  %t35 = mul i64 %t34, 1374389535
  ; r36 := (bv_shr r35 (0x20 : bv 64))
  %t36 = lshr i64 %t35, 32
  ; r37 := (trunc r36 32)
  %t37 = trunc i64 %t36 to i32
  ; r38 := (bv_sar r33 (0x1f : bv 32))
  %t38 = ashr i32 %t33, 31
  ; r39 := (bv_sar r37 (0x5 : bv 32))
  %t39 = ashr i32 %t37, 5
  ; r40 := (bv_sub r39 r38)
  %t40 = sub i32 %t39, %t38
  ; r41 := (uext r40 64)
  %t41 = zext i32 %t40 to i64
  ; r42 := (bv_add r32 r41)
  %t42 = add i64 %t32, %t41
  ; r43 := (trunc r42 32)
  %t43 = trunc i64 %t42 to i32
  ; r44 := (uext r43 64)
  %t44 = zext i32 %t43 to i64
  ; r45 := (sext r40 64)
  %t45 = sext i32 %t40 to i64
  ; r46 := (bv_mul (0x64 : bv 64) r45)
  %t46 = mul i64 100, %t45
  ; r47 := (trunc r46 32)
  %t47 = trunc i64 %t46 to i32
  ; r48 := (bv_sub r33 r47)
  %t48 = sub i32 %t33, %t47
  ; r49 := (bv_slt r48 (0x0 : bv 32))
  %t49 = icmp slt i32 %t48, 0
  ; r50 := (uext r48 64)
  %t50 = zext i32 %t48 to i64
  ; r51 := (bitcast arg6 (bv 512))
  %t51 = bitcast <8 x double> %arg6 to i512
  ; r52 := (bitcast arg6 (bv 512))
  %t52 = bitcast <8 x double> %arg6 to i512
  br i1 %t49, label %block_0_41f4b2, label %block_0_41f44a
block_0_41f44a:
  %t53 = phi i64 [ %t50, %block_0_41f3d0 ], [ %t152, %block_0_41f4b2 ]
  %t54 = phi i64 [ %arg5, %block_0_41f3d0 ], [ %t153, %block_0_41f4b2 ]
  %t55 = phi i64 [ %t44, %block_0_41f3d0 ], [ %t154, %block_0_41f4b2 ]
  %t56 = phi i64 [ %t12, %block_0_41f3d0 ], [ %t155, %block_0_41f4b2 ]
  %t57 = phi i64 [ 1374389535, %block_0_41f3d0 ], [ %t156, %block_0_41f4b2 ]
  %t58 = phi i64 [ %arg4, %block_0_41f3d0 ], [ %t157, %block_0_41f4b2 ]
  %t59 = phi i64 [ %t2, %block_0_41f3d0 ], [ %t158, %block_0_41f4b2 ]
  %t60 = phi i64 [ %t4, %block_0_41f3d0 ], [ %t159, %block_0_41f4b2 ]
  %t61 = phi i512 [ %t52, %block_0_41f3d0 ], [ %t160, %block_0_41f4b2 ]
  ; r62 := (trunc r55 32)
  %t62 = trunc i64 %t55 to i32
  ; r63 := (bv_slt r62 (0x0 : bv 32))
  %t63 = icmp slt i32 %t62, 0
  br i1 %t63, label %block_0_41f4c0, label %block_0_41f44e
block_0_41f44e:
  %t64 = phi i64 [ %t53, %block_0_41f44a ], [ %t176, %block_0_41f4b6 ], [ %t180, %block_0_41f4c0 ], [ %t204, %block_0_41f4c4 ]
  %t65 = phi i64 [ %t54, %block_0_41f44a ], [ %t166, %block_0_41f4b6 ], [ %t181, %block_0_41f4c0 ], [ %t194, %block_0_41f4c4 ]
  %t66 = phi i64 [ %t55, %block_0_41f44a ], [ %t179, %block_0_41f4b6 ], [ %t182, %block_0_41f4c0 ], [ %t207, %block_0_41f4c4 ]
  %t67 = phi i64 [ %t56, %block_0_41f44a ], [ %t168, %block_0_41f4b6 ], [ %t183, %block_0_41f4c0 ], [ %t196, %block_0_41f4c4 ]
  %t68 = phi i64 [ %t57, %block_0_41f44a ], [ %t169, %block_0_41f4b6 ], [ %t184, %block_0_41f4c0 ], [ %t197, %block_0_41f4c4 ]
  %t69 = phi i64 [ %t58, %block_0_41f44a ], [ %t170, %block_0_41f4b6 ], [ %t185, %block_0_41f4c0 ], [ %t198, %block_0_41f4c4 ]
  %t70 = phi i64 [ %t59, %block_0_41f44a ], [ %t171, %block_0_41f4b6 ], [ %t186, %block_0_41f4c0 ], [ %t199, %block_0_41f4c4 ]
  %t71 = phi i64 [ %t60, %block_0_41f44a ], [ %t172, %block_0_41f4b6 ], [ %t187, %block_0_41f4c0 ], [ %t200, %block_0_41f4c4 ]
  %t72 = phi i512 [ %t61, %block_0_41f44a ], [ %t173, %block_0_41f4b6 ], [ %t188, %block_0_41f4c0 ], [ %t201, %block_0_41f4c4 ]
  ; r73 := (trunc r70 32)
  %t73 = trunc i64 %t70 to i32
  ; r74 := (eq r73 (0x0 : bv 32))
  %t74 = icmp eq i32 %t73, 0
  br i1 %t74, label %block_0_41f46a, label %block_0_41f453
block_0_41f453:
  %t75 = phi i64 [ %t64, %block_0_41f44e ]
  %t76 = phi i64 [ %t65, %block_0_41f44e ]
  %t77 = phi i64 [ %t66, %block_0_41f44e ]
  %t78 = phi i64 [ %t67, %block_0_41f44e ]
  %t79 = phi i64 [ %t68, %block_0_41f44e ]
  %t80 = phi i64 [ %t69, %block_0_41f44e ]
  %t81 = phi i64 [ %t71, %block_0_41f44e ]
  %t82 = phi i512 [ %t72, %block_0_41f44e ]
  ; r83 := (trunc r77 32)
  %t83 = trunc i64 %t77 to i32
  ; r84 := (eq r83 (0x0 : bv 32))
  %t84 = icmp eq i32 %t83, 0
  br i1 %t84, label %block_0_41f477, label %block_0_41f457
block_0_41f457:
  %t85 = phi i64 [ %t75, %block_0_41f453 ], [ %t111, %block_0_41f477 ]
  %t86 = phi i64 [ %t76, %block_0_41f453 ], [ %t112, %block_0_41f477 ]
  %t87 = phi i64 [ %t77, %block_0_41f453 ], [ %t113, %block_0_41f477 ]
  %t88 = phi i64 [ %t78, %block_0_41f453 ], [ %t114, %block_0_41f477 ]
  %t89 = phi i64 [ %t79, %block_0_41f453 ], [ %t115, %block_0_41f477 ]
  %t90 = phi i64 [ %t80, %block_0_41f453 ], [ %t116, %block_0_41f477 ]
  %t91 = phi i64 [ %t81, %block_0_41f453 ], [ %t117, %block_0_41f477 ]
  ; r92 := call _conv(r87, (0x4294c7 : bv 64), r90, r86, r88, r89)
  %t92 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64) @_conv(i64 %t87, i64 4363463, i64 %t90, i64 %t86, i64 %t88, i64 %t89)
  ; r93 := (tuple_field r92 0)
  %t93 = extractvalue { i64, i64, <8 x double> } %t92, 0
  ; r94 := (tuple_field r92 1)
  %t94 = extractvalue { i64, i64, <8 x double> } %t92, 1
  ; r95 := (tuple_field r92 2)
  %t95 = extractvalue { i64, i64, <8 x double> } %t92, 2
  ; r96 := (bitcast r95 (bv 512))
  %t96 = bitcast <8 x double> %t95 to i512
  br label %block_0_41f467
block_0_41f467:
  %t97 = phi i64 [ %t93, %block_0_41f457 ]
  %t98 = phi i64 [ %t85, %block_0_41f457 ]
  %t99 = phi i64 [ %t86, %block_0_41f457 ]
  %t100 = phi i64 [ %t88, %block_0_41f457 ]
  %t101 = phi i64 [ %t89, %block_0_41f457 ]
  %t102 = phi i64 [ %t91, %block_0_41f457 ]
  br label %block_0_41f46a
block_0_41f46a:
  %t103 = phi i64 [ %t64, %block_0_41f44e ], [ %t98, %block_0_41f467 ]
  %t104 = phi i64 [ %t65, %block_0_41f44e ], [ %t99, %block_0_41f467 ]
  %t105 = phi i64 [ %t67, %block_0_41f44e ], [ %t100, %block_0_41f467 ]
  %t106 = phi i64 [ %t68, %block_0_41f44e ], [ %t101, %block_0_41f467 ]
  %t107 = phi i64 [ %t69, %block_0_41f44e ], [ %t97, %block_0_41f467 ]
  %t108 = phi i64 [ %t71, %block_0_41f44e ], [ %t102, %block_0_41f467 ]
  ; r109 := (trunc r108 32)
  %t109 = trunc i64 %t108 to i32
  ; r110 := (eq r109 (0x0 : bv 32))
  %t110 = icmp eq i32 %t109, 0
  br i1 %t110, label %block_0_41f46f, label %block_0_41f493
block_0_41f46f:
  ret void
block_0_41f477:
  %t111 = phi i64 [ %t75, %block_0_41f453 ]
  %t112 = phi i64 [ %t76, %block_0_41f453 ]
  %t113 = phi i64 [ %t77, %block_0_41f453 ]
  %t114 = phi i64 [ %t78, %block_0_41f453 ]
  %t115 = phi i64 [ %t79, %block_0_41f453 ]
  %t116 = phi i64 [ %t80, %block_0_41f453 ]
  %t117 = phi i64 [ %t81, %block_0_41f453 ]
  %t118 = phi i512 [ %t82, %block_0_41f453 ]
  ; r119 := (trunc r111 32)
  %t119 = trunc i64 %t111 to i32
  ; r120 := (bv_slt r119 (0x0 : bv 32))
  %t120 = icmp slt i32 %t119, 0
  br i1 %t120, label %block_0_41f47b, label %block_0_41f457
block_0_41f47b:
  %t121 = phi i64 [ %t111, %block_0_41f477 ]
  %t122 = phi i64 [ %t112, %block_0_41f477 ]
  %t123 = phi i64 [ %t114, %block_0_41f477 ]
  %t124 = phi i64 [ %t115, %block_0_41f477 ]
  %t125 = phi i64 [ %t116, %block_0_41f477 ]
  %t126 = phi i64 [ %t117, %block_0_41f477 ]
  %t127 = phi i512 [ %t118, %block_0_41f477 ]
  ; r128 := (bitcast r127 (vec 8 double))
  %t128 = bitcast i512 %t127 to <8 x double>
  ; r129 := call _add((0x4294c4 : bv 64), r125, r122, r128)
  %t129 = call { i64, <8 x double> } (i64, i64, i64, <8 x double>) @_add(i64 4363460, i64 %t125, i64 %t122, <8 x double> %t128)
  ; r130 := (tuple_field r129 0)
  %t130 = extractvalue { i64, <8 x double> } %t129, 0
  ; r131 := (tuple_field r129 1)
  %t131 = extractvalue { i64, <8 x double> } %t129, 1
  ; r132 := (bitcast r131 (bv 512))
  %t132 = bitcast <8 x double> %t131 to i512
  br label %block_0_41f48b
block_0_41f48b:
  %t133 = phi i64 [ %t130, %block_0_41f47b ]
  %t134 = phi i64 [ %t121, %block_0_41f47b ]
  %t135 = phi i64 [ %t122, %block_0_41f47b ]
  %t136 = phi i64 [ %t123, %block_0_41f47b ]
  %t137 = phi i64 [ %t124, %block_0_41f47b ]
  %t138 = phi i64 [ %t126, %block_0_41f47b ]
  ; r139 := (trunc r138 32)
  %t139 = trunc i64 %t138 to i32
  ; r140 := (eq r139 (0x0 : bv 32))
  %t140 = icmp eq i32 %t139, 0
  br i1 %t140, label %block_0_41f46f, label %block_0_41f493
block_0_41f493:
  %t141 = phi i64 [ %t103, %block_0_41f46a ], [ %t134, %block_0_41f48b ]
  %t142 = phi i64 [ %t104, %block_0_41f46a ], [ %t135, %block_0_41f48b ]
  %t143 = phi i64 [ %t105, %block_0_41f46a ], [ %t136, %block_0_41f48b ]
  %t144 = phi i64 [ %t106, %block_0_41f46a ], [ %t137, %block_0_41f48b ]
  %t145 = phi i64 [ %t107, %block_0_41f46a ], [ %t133, %block_0_41f48b ]
  ; r146 := (trunc r141 32)
  %t146 = trunc i64 %t141 to i32
  ; r147 := (bv_sar r146 (0x1f : bv 32))
  %t147 = ashr i32 %t146, 31
  ; r148 := (bv_xor r146 r147)
  %t148 = xor i32 %t146, %t147
  ; r149 := (bv_sub r148 r147)
  %t149 = sub i32 %t148, %t147
  ; r150 := (uext r149 64)
  %t150 = zext i32 %t149 to i64
  ; r151 := call _conv(r150, (0x4294c7 : bv 64), r145, r142, r143, r144)
  %t151 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64) @_conv(i64 %t150, i64 4363463, i64 %t145, i64 %t142, i64 %t143, i64 %t144)
  ret void
block_0_41f4b2:
  %t152 = phi i64 [ %t50, %block_0_41f3d0 ]
  %t153 = phi i64 [ %arg5, %block_0_41f3d0 ]
  %t154 = phi i64 [ %t44, %block_0_41f3d0 ]
  %t155 = phi i64 [ %t12, %block_0_41f3d0 ]
  %t156 = phi i64 [ 1374389535, %block_0_41f3d0 ]
  %t157 = phi i64 [ %arg4, %block_0_41f3d0 ]
  %t158 = phi i64 [ %t2, %block_0_41f3d0 ]
  %t159 = phi i64 [ %t4, %block_0_41f3d0 ]
  %t160 = phi i512 [ %t51, %block_0_41f3d0 ]
  ; r161 := (trunc r154 32)
  %t161 = trunc i64 %t154 to i32
  ; r162 := (bv_slt r161 (0x0 : bv 32))
  %t162 = icmp slt i32 %t161, 0
  ; r163 := (eq r161 (0x0 : bv 32))
  %t163 = icmp eq i32 %t161, 0
  ; r164 := (or r163 r162)
  %t164 = or i1 %t163, %t162
  br i1 %t164, label %block_0_41f44a, label %block_0_41f4b6
block_0_41f4b6:
  %t165 = phi i64 [ %t152, %block_0_41f4b2 ]
  %t166 = phi i64 [ %t153, %block_0_41f4b2 ]
  %t167 = phi i64 [ %t154, %block_0_41f4b2 ]
  %t168 = phi i64 [ %t155, %block_0_41f4b2 ]
  %t169 = phi i64 [ %t156, %block_0_41f4b2 ]
  %t170 = phi i64 [ %t157, %block_0_41f4b2 ]
  %t171 = phi i64 [ %t158, %block_0_41f4b2 ]
  %t172 = phi i64 [ %t159, %block_0_41f4b2 ]
  %t173 = phi i512 [ %t160, %block_0_41f4b2 ]
  ; r174 := (trunc r165 32)
  %t174 = trunc i64 %t165 to i32
  ; r175 := (bv_add r174 (0x64 : bv 32))
  %t175 = add i32 %t174, 100
  ; r176 := (uext r175 64)
  %t176 = zext i32 %t175 to i64
  ; r177 := (trunc r167 32)
  %t177 = trunc i64 %t167 to i32
  ; r178 := (bv_add r177 (0xffffffff : bv 32))
  %t178 = add i32 %t177, 4294967295
  ; r179 := (uext r178 64)
  %t179 = zext i32 %t178 to i64
  br label %block_0_41f44e
block_0_41f4c0:
  %t180 = phi i64 [ %t53, %block_0_41f44a ]
  %t181 = phi i64 [ %t54, %block_0_41f44a ]
  %t182 = phi i64 [ %t55, %block_0_41f44a ]
  %t183 = phi i64 [ %t56, %block_0_41f44a ]
  %t184 = phi i64 [ %t57, %block_0_41f44a ]
  %t185 = phi i64 [ %t58, %block_0_41f44a ]
  %t186 = phi i64 [ %t59, %block_0_41f44a ]
  %t187 = phi i64 [ %t60, %block_0_41f44a ]
  %t188 = phi i512 [ %t61, %block_0_41f44a ]
  ; r189 := (trunc r180 32)
  %t189 = trunc i64 %t180 to i32
  ; r190 := (bv_slt r189 (0x0 : bv 32))
  %t190 = icmp slt i32 %t189, 0
  ; r191 := (eq r189 (0x0 : bv 32))
  %t191 = icmp eq i32 %t189, 0
  ; r192 := (or r191 r190)
  %t192 = or i1 %t191, %t190
  br i1 %t192, label %block_0_41f44e, label %block_0_41f4c4
block_0_41f4c4:
  %t193 = phi i64 [ %t180, %block_0_41f4c0 ]
  %t194 = phi i64 [ %t181, %block_0_41f4c0 ]
  %t195 = phi i64 [ %t182, %block_0_41f4c0 ]
  %t196 = phi i64 [ %t183, %block_0_41f4c0 ]
  %t197 = phi i64 [ %t184, %block_0_41f4c0 ]
  %t198 = phi i64 [ %t185, %block_0_41f4c0 ]
  %t199 = phi i64 [ %t186, %block_0_41f4c0 ]
  %t200 = phi i64 [ %t187, %block_0_41f4c0 ]
  %t201 = phi i512 [ %t188, %block_0_41f4c0 ]
  ; r202 := (trunc r193 32)
  %t202 = trunc i64 %t193 to i32
  ; r203 := (bv_add r202 (0xffffff9c : bv 32))
  %t203 = add i32 %t202, 4294967196
  ; r204 := (uext r203 64)
  %t204 = zext i32 %t203 to i64
  ; r205 := (trunc r195 32)
  %t205 = trunc i64 %t195 to i32
  ; r206 := (bv_add r205 (0x1 : bv 32))
  %t206 = add i32 %t205, 1
  ; r207 := (uext r206 64)
  %t207 = zext i32 %t206 to i64
  br label %block_0_41f44e
}
define { i64, i64, <8 x double> } @__get_current_time_locale(<8 x double> %arg0) {
block_0_41ff90:
  ; r0 := (read (0x641b70 : bv 64) (bv 32))
  %t0 = inttoptr i64 6560624 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (mux r1 (0x429b60 : bv 64) (0x6419a0 : bv 64))
  %t3 = select i1 %t2, i64 4365152, i64 6560160
  ; r3 := (bitcast arg0 (bv 512))
  %t4 = bitcast <8 x double> %arg0 to i512
  ; r4 := (bitcast r3 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r5 := (tuple r2 (0x429b60 : bv 64) r4)
  %t6 = insertvalue { i64, i64, <8 x double> } undef, i64 %t3, 0
  %t7 = insertvalue { i64, i64, <8 x double> } %t6, i64 4365152, 1
  %t8 = insertvalue { i64, i64, <8 x double> } %t7, <8 x double> %t5, 2
  ret { i64, i64, <8 x double> } %t8
}
define { i64, i64, <8 x double> } @__printf_init(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_41fff0:
  ; r0 := (bv_add arg0 (0x18 : bv 64))
  %t0 = add i64 %arg0, 24
  ; r1 := (bv_add arg0 (0x14 : bv 64))
  %t1 = add i64 %arg0, 20
  ; write r1 (0x0 : bv 32)
  %t2 = inttoptr i64 %t1 to i32*
  store i32 0, i32* %t2
  ; r2 := (bv_add arg0 (0x10 : bv 64))
  %t3 = add i64 %arg0, 16
  ; write r2 (0x0 : bv 32)
  %t4 = inttoptr i64 %t3 to i32*
  store i32 0, i32* %t4
  ; r3 := (bv_add arg0 (0x98 : bv 64))
  %t5 = add i64 %arg0, 152
  ; write r3 r0
  %t6 = inttoptr i64 %t5 to i64*
  store i64 %t0, i64* %t6
  ; r4 := (bv_add arg0 (0x8 : bv 64))
  %t7 = add i64 %arg0, 8
  ; write r4 r0
  %t8 = inttoptr i64 %t7 to i64*
  store i64 %t0, i64* %t8
  ; r5 := (bitcast arg3 (bv 512))
  %t9 = bitcast <8 x double> %arg3 to i512
  ; r6 := (bitcast r5 (vec 8 double))
  %t10 = bitcast i512 %t9 to <8 x double>
  ; r7 := (tuple r0 arg2 r6)
  %t11 = insertvalue { i64, i64, <8 x double> } undef, i64 %t0, 0
  %t12 = insertvalue { i64, i64, <8 x double> } %t11, i64 %arg2, 1
  %t13 = insertvalue { i64, i64, <8 x double> } %t12, <8 x double> %t10, 2
  ret { i64, i64, <8 x double> } %t13
}
define void @__printf_arginfo_pct() {
block_0_420010:
  ret void
}
define void @__printf_render_n(i64 %arg0, i64 %arg1, i64 %arg2) {
block_0_420020:
  ; r0 := (bv_add arg1 (0x10 : bv 64))
  %t0 = add i64 %arg1, 16
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (eq r1 (0x0 : bv 32))
  %t3 = icmp eq i32 %t2, 0
  br i1 %t3, label %block_0_420035, label %block_0_420027
block_0_420027:
  %t4 = phi i64 [ %arg2, %block_0_420020 ]
  %t5 = phi i64 [ %arg1, %block_0_420020 ]
  ; r5 := (read r3 (bv 64))
  %t6 = inttoptr i64 %t4 to i64*
  %t7 = load i64, i64* %t6
  ; r6 := (read r5 (bv 64))
  %t8 = inttoptr i64 %t7 to i64*
  %t9 = load i64, i64* %t8
  ; r7 := (bv_add r4 (0x4c : bv 64))
  %t10 = add i64 %t5, 76
  ; r8 := (read r7 (bv 32))
  %t11 = inttoptr i64 %t10 to i32*
  %t12 = load i32, i32* %t11
  ; r9 := (trunc r8 8)
  %t13 = trunc i32 %t12 to i8
  ; write r6 r9
  %t14 = inttoptr i64 %t9 to i8*
  store i8 %t13, i8* %t14
  br label %block_0_420032
block_0_420032:
  ret void
block_0_420035:
  %t15 = phi i64 [ %arg2, %block_0_420020 ]
  %t16 = phi i64 [ %arg1, %block_0_420020 ]
  ; r12 := (bv_add r11 (0x14 : bv 64))
  %t17 = add i64 %t16, 20
  ; r13 := (read r12 (bv 32))
  %t18 = inttoptr i64 %t17 to i32*
  %t19 = load i32, i32* %t18
  ; r14 := (eq r13 (0x0 : bv 32))
  %t20 = icmp eq i32 %t19, 0
  br i1 %t20, label %block_0_420050, label %block_0_42003e
block_0_42003e:
  %t21 = phi i64 [ %t15, %block_0_420035 ]
  %t22 = phi i64 [ %t16, %block_0_420035 ]
  ; r17 := (read r15 (bv 64))
  %t23 = inttoptr i64 %t21 to i64*
  %t24 = load i64, i64* %t23
  ; r18 := (read r17 (bv 64))
  %t25 = inttoptr i64 %t24 to i64*
  %t26 = load i64, i64* %t25
  ; r19 := (bv_add r16 (0x4c : bv 64))
  %t27 = add i64 %t22, 76
  ; r20 := (read r19 (bv 32))
  %t28 = inttoptr i64 %t27 to i32*
  %t29 = load i32, i32* %t28
  ; r21 := (trunc r20 16)
  %t30 = trunc i32 %t29 to i16
  ; write r18 r21
  %t31 = inttoptr i64 %t26 to i16*
  store i16 %t30, i16* %t31
  ret void
block_0_420050:
  %t32 = phi i64 [ %t15, %block_0_420035 ]
  %t33 = phi i64 [ %t16, %block_0_420035 ]
  ; r24 := (bv_add r23 (0x18 : bv 64))
  %t34 = add i64 %t33, 24
  ; r25 := (read r24 (bv 32))
  %t35 = inttoptr i64 %t34 to i32*
  %t36 = load i32, i32* %t35
  ; r26 := (eq r25 (0x0 : bv 32))
  %t37 = icmp eq i32 %t36, 0
  br i1 %t37, label %block_0_420059, label %block_0_420090
block_0_420059:
  %t38 = phi i64 [ %t32, %block_0_420050 ]
  %t39 = phi i64 [ %t33, %block_0_420050 ]
  ; r29 := (bv_add r28 (0xc : bv 64))
  %t40 = add i64 %t39, 12
  ; r30 := (read r29 (bv 32))
  %t41 = inttoptr i64 %t40 to i32*
  %t42 = load i32, i32* %t41
  ; r31 := (eq r30 (0x0 : bv 32))
  %t43 = icmp eq i32 %t42, 0
  br i1 %t43, label %block_0_420062, label %block_0_420090
block_0_420062:
  %t44 = phi i64 [ %t38, %block_0_420059 ]
  %t45 = phi i64 [ %t39, %block_0_420059 ]
  ; r34 := (bv_add r33 (0x40 : bv 64))
  %t46 = add i64 %t45, 64
  ; r35 := (read r34 (bv 32))
  %t47 = inttoptr i64 %t46 to i32*
  %t48 = load i32, i32* %t47
  ; r36 := (eq r35 (0x0 : bv 32))
  %t49 = icmp eq i32 %t48, 0
  br i1 %t49, label %block_0_42006b, label %block_0_420090
block_0_42006b:
  %t50 = phi i64 [ %t44, %block_0_420062 ]
  %t51 = phi i64 [ %t45, %block_0_420062 ]
  ; r39 := (bv_add r38 (0x44 : bv 64))
  %t52 = add i64 %t51, 68
  ; r40 := (read r39 (bv 32))
  %t53 = inttoptr i64 %t52 to i32*
  %t54 = load i32, i32* %t53
  ; r41 := (eq r40 (0x0 : bv 32))
  %t55 = icmp eq i32 %t54, 0
  br i1 %t55, label %block_0_420072, label %block_0_420090
block_0_420072:
  %t56 = phi i64 [ %t50, %block_0_42006b ]
  %t57 = phi i64 [ %t51, %block_0_42006b ]
  ; r44 := (bv_add r43 (0x3c : bv 64))
  %t58 = add i64 %t57, 60
  ; r45 := (read r44 (bv 32))
  %t59 = inttoptr i64 %t58 to i32*
  %t60 = load i32, i32* %t59
  ; r46 := (eq r45 (0x0 : bv 32))
  %t61 = icmp eq i32 %t60, 0
  br i1 %t61, label %block_0_420079, label %block_0_420090
block_0_420079:
  %t62 = phi i64 [ %t56, %block_0_420072 ]
  %t63 = phi i64 [ %t57, %block_0_420072 ]
  ; r49 := (bv_add r48 (0x48 : bv 64))
  %t64 = add i64 %t63, 72
  ; r50 := (read r49 (bv 32))
  %t65 = inttoptr i64 %t64 to i32*
  %t66 = load i32, i32* %t65
  ; r51 := (eq r50 (0x0 : bv 32))
  %t67 = icmp eq i32 %t66, 0
  br i1 %t67, label %block_0_420080, label %block_0_420090
block_0_420080:
  %t68 = phi i64 [ %t62, %block_0_420079 ]
  %t69 = phi i64 [ %t63, %block_0_420079 ]
  ; r54 := (read r52 (bv 64))
  %t70 = inttoptr i64 %t68 to i64*
  %t71 = load i64, i64* %t70
  ; r55 := (read r54 (bv 64))
  %t72 = inttoptr i64 %t71 to i64*
  %t73 = load i64, i64* %t72
  ; r56 := (bv_add r53 (0x4c : bv 64))
  %t74 = add i64 %t69, 76
  ; r57 := (read r56 (bv 32))
  %t75 = inttoptr i64 %t74 to i32*
  %t76 = load i32, i32* %t75
  ; write r55 r57
  %t77 = inttoptr i64 %t73 to i32*
  store i32 %t76, i32* %t77
  br label %block_0_420032
block_0_420090:
  %t78 = phi i64 [ %t32, %block_0_420050 ], [ %t38, %block_0_420059 ], [ %t44, %block_0_420062 ], [ %t50, %block_0_42006b ], [ %t56, %block_0_420072 ], [ %t62, %block_0_420079 ]
  %t79 = phi i64 [ %t33, %block_0_420050 ], [ %t39, %block_0_420059 ], [ %t45, %block_0_420062 ], [ %t51, %block_0_42006b ], [ %t57, %block_0_420072 ], [ %t63, %block_0_420079 ]
  ; r60 := (read r58 (bv 64))
  %t80 = inttoptr i64 %t78 to i64*
  %t81 = load i64, i64* %t80
  ; r61 := (read r60 (bv 64))
  %t82 = inttoptr i64 %t81 to i64*
  %t83 = load i64, i64* %t82
  ; r62 := (bv_add r59 (0x4c : bv 64))
  %t84 = add i64 %t79, 76
  ; r63 := (read r62 (bv 32))
  %t85 = inttoptr i64 %t84 to i32*
  %t86 = load i32, i32* %t85
  ; r64 := (sext r63 64)
  %t87 = sext i32 %t86 to i64
  ; write r61 r64
  %t88 = inttoptr i64 %t83 to i64*
  store i64 %t87, i64* %t88
  ret void
}
define void @register_printf_function(i64 %arg0, i64 %arg1, i64 %arg2) {
block_0_4200a0:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (eq r0 (0xff : bv 32))
  %t1 = icmp eq i32 %t0, 255
  ; r2 := (bv_ule (0xff : bv 32) r0)
  %t2 = icmp ule i32 255, %t0
  ; r3 := (not r1)
  %t3 = icmp eq i1 %t1, 0
  ; r4 := (and r2 r3)
  %t4 = and i1 %t2, %t3
  br i1 %t4, label %block_0_4200d0, label %block_0_4200ad
block_0_4200ad:
  %t5 = phi i64 [ %arg2, %block_0_4200a0 ]
  %t6 = phi i64 [ %arg1, %block_0_4200a0 ]
  %t7 = phi i64 [ %arg0, %block_0_4200a0 ]
  ; r8 := (trunc r7 32)
  %t8 = trunc i64 %t7 to i32
  ; r9 := (sext r8 64)
  %t9 = sext i32 %t8 to i64
  ; write (0x631ba0 : bv 64) (0x1 : bv 32)
  %t10 = inttoptr i64 6495136 to i32*
  store i32 1, i32* %t10
  ; r10 := (bv_mul (0x2 : bv 64) r9)
  %t11 = mul i64 2, %t9
  ; r11 := (bv_add r9 r10)
  %t12 = add i64 %t9, %t11
  ; r12 := (bv_mul (0x8 : bv 64) r11)
  %t13 = mul i64 8, %t12
  ; r13 := (bv_add r12 (0x631bc8 : bv 64))
  %t14 = add i64 %t13, 6495176
  ; write r13 r6
  %t15 = inttoptr i64 %t14 to i64*
  store i64 %t6, i64* %t15
  ; r14 := (bv_add r12 (0x631bc0 : bv 64))
  %t16 = add i64 %t13, 6495168
  ; write r14 r5
  %t17 = inttoptr i64 %t16 to i64*
  store i64 %t5, i64* %t17
  br label %block_0_4200d0
block_0_4200d0:
  ret void
}
define void @register_printf_render(i64 %arg0, i64 %arg1, i64 %arg2) {
block_0_4200e0:
  ; r0 := (trunc arg0 32)
  %t0 = trunc i64 %arg0 to i32
  ; r1 := (eq r0 (0xff : bv 32))
  %t1 = icmp eq i32 %t0, 255
  ; r2 := (bv_ule (0xff : bv 32) r0)
  %t2 = icmp ule i32 255, %t0
  ; r3 := (not r1)
  %t3 = icmp eq i1 %t1, 0
  ; r4 := (and r2 r3)
  %t4 = and i1 %t2, %t3
  br i1 %t4, label %block_0_420110, label %block_0_4200ed
block_0_4200ed:
  %t5 = phi i64 [ %arg2, %block_0_4200e0 ]
  %t6 = phi i64 [ %arg1, %block_0_4200e0 ]
  %t7 = phi i64 [ %arg0, %block_0_4200e0 ]
  ; r8 := (trunc r7 32)
  %t8 = trunc i64 %t7 to i32
  ; r9 := (sext r8 64)
  %t9 = sext i32 %t8 to i64
  ; write (0x631ba0 : bv 64) (0x1 : bv 32)
  %t10 = inttoptr i64 6495136 to i32*
  store i32 1, i32* %t10
  ; r10 := (bv_mul (0x2 : bv 64) r9)
  %t11 = mul i64 2, %t9
  ; r11 := (bv_add r9 r10)
  %t12 = add i64 %t9, %t11
  ; r12 := (bv_mul (0x8 : bv 64) r11)
  %t13 = mul i64 8, %t12
  ; r13 := (bv_add r12 (0x631bd0 : bv 64))
  %t14 = add i64 %t13, 6495184
  ; write r13 r6
  %t15 = inttoptr i64 %t14 to i64*
  store i64 %t6, i64* %t15
  ; r14 := (bv_add r12 (0x631bc0 : bv 64))
  %t16 = add i64 %t13, 6495168
  ; write r14 r5
  %t17 = inttoptr i64 %t16 to i64*
  store i64 %t5, i64* %t17
  br label %block_0_420110
block_0_420110:
  ret void
}
define { i64, i64, <8 x double> } @__printf_puts(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_420220:
  ; r0 := (read arg0 (bv 64))
  %t0 = inttoptr i64 %arg0 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (trunc arg2 32)
  %t2 = trunc i64 %arg2 to i32
  ; r2 := (uext r1 64)
  %t3 = zext i32 %t2 to i64
  ; r3 := (bv_add r0 (0x10 : bv 64))
  %t4 = add i64 %t1, 16
  ; r4 := (read r3 (bv 8))
  %t5 = inttoptr i64 %t4 to i8*
  %t6 = load i8, i8* %t5
  ; r5 := (bv_and r4 (0x40 : bv 8))
  %t7 = and i8 %t6, 64
  ; r6 := (eq r5 (0x0 : bv 8))
  %t8 = icmp eq i8 %t7, 0
  ; r7 := (bitcast arg6 (bv 512))
  %t9 = bitcast <8 x double> %arg6 to i512
  ; r8 := (bitcast arg7 (bv 512))
  %t10 = bitcast <8 x double> %arg7 to i512
  ; r9 := (bitcast arg8 (bv 512))
  %t11 = bitcast <8 x double> %arg8 to i512
  ; r10 := (bitcast arg9 (bv 512))
  %t12 = bitcast <8 x double> %arg9 to i512
  ; r11 := (bitcast arg10 (bv 512))
  %t13 = bitcast <8 x double> %arg10 to i512
  ; r12 := (bitcast arg11 (bv 512))
  %t14 = bitcast <8 x double> %arg11 to i512
  ; r13 := (bitcast arg12 (bv 512))
  %t15 = bitcast <8 x double> %arg12 to i512
  ; r14 := (bitcast arg13 (bv 512))
  %t16 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast arg6 (bv 512))
  %t17 = bitcast <8 x double> %arg6 to i512
  br i1 %t8, label %block_0_42022c, label %block_0_420264
block_0_42022c:
  %t18 = phi i64 [ %arg3, %block_0_420220 ]
  %t19 = phi i64 [ %arg2, %block_0_420220 ]
  %t20 = phi i64 [ %t3, %block_0_420220 ]
  %t21 = phi i64 [ %arg1, %block_0_420220 ]
  %t22 = phi i64 [ %arg0, %block_0_420220 ]
  %t23 = phi i64 [ %arg4, %block_0_420220 ]
  %t24 = phi i64 [ %arg5, %block_0_420220 ]
  %t25 = phi i512 [ %t9, %block_0_420220 ]
  %t26 = phi i512 [ %t10, %block_0_420220 ]
  %t27 = phi i512 [ %t11, %block_0_420220 ]
  %t28 = phi i512 [ %t12, %block_0_420220 ]
  %t29 = phi i512 [ %t13, %block_0_420220 ]
  %t30 = phi i512 [ %t14, %block_0_420220 ]
  %t31 = phi i512 [ %t15, %block_0_420220 ]
  %t32 = phi i512 [ %t16, %block_0_420220 ]
  ; r31 := (trunc r17 32)
  %t33 = trunc i64 %t19 to i32
  ; r32 := (eq r31 (0x0 : bv 32))
  %t34 = icmp eq i32 %t33, 0
  br i1 %t34, label %block_0_420260, label %block_0_420230
block_0_420230:
  %t35 = phi i64 [ %t18, %block_0_42022c ]
  %t36 = phi i64 [ %t19, %block_0_42022c ]
  %t37 = phi i64 [ %t20, %block_0_42022c ]
  %t38 = phi i64 [ %t21, %block_0_42022c ]
  %t39 = phi i64 [ %t22, %block_0_42022c ]
  %t40 = phi i64 [ %t23, %block_0_42022c ]
  %t41 = phi i64 [ %t24, %block_0_42022c ]
  %t42 = phi i512 [ %t25, %block_0_42022c ]
  %t43 = phi i512 [ %t26, %block_0_42022c ]
  %t44 = phi i512 [ %t27, %block_0_42022c ]
  %t45 = phi i512 [ %t28, %block_0_42022c ]
  %t46 = phi i512 [ %t29, %block_0_42022c ]
  %t47 = phi i512 [ %t30, %block_0_42022c ]
  %t48 = phi i512 [ %t31, %block_0_42022c ]
  %t49 = phi i512 [ %t32, %block_0_42022c ]
  ; r48 := (bv_add r37 (0x98 : bv 64))
  %t50 = add i64 %t39, 152
  ; r49 := (read r48 (bv 64))
  %t51 = inttoptr i64 %t50 to i64*
  %t52 = load i64, i64* %t51
  ; r50 := (trunc r34 32)
  %t53 = trunc i64 %t36 to i32
  ; r51 := (sext r50 64)
  %t54 = sext i32 %t53 to i64
  ; r52 := (bv_add r37 (0x14 : bv 64))
  %t55 = add i64 %t39, 20
  ; r53 := (read r52 (bv 32))
  %t56 = inttoptr i64 %t55 to i32*
  %t57 = load i32, i32* %t56
  ; r54 := (trunc r35 32)
  %t58 = trunc i64 %t37 to i32
  ; r55 := (bv_add r53 r54)
  %t59 = add i32 %t57, %t58
  ; write r52 r55
  %t60 = inttoptr i64 %t55 to i32*
  store i32 %t59, i32* %t60
  ; r56 := (read r48 (bv 64))
  %t61 = inttoptr i64 %t50 to i64*
  %t62 = load i64, i64* %t61
  ; r57 := (bv_add r56 (0x10 : bv 64))
  %t63 = add i64 %t62, 16
  ; write r48 r57
  %t64 = inttoptr i64 %t50 to i64*
  store i64 %t63, i64* %t64
  ; write r49 r36
  %t65 = inttoptr i64 %t52 to i64*
  store i64 %t38, i64* %t65
  ; r58 := (bv_add r49 (0x8 : bv 64))
  %t66 = add i64 %t52, 8
  ; write r58 r51
  %t67 = inttoptr i64 %t66 to i64*
  store i64 %t54, i64* %t67
  ; r59 := (bv_add r37 (0x10 : bv 64))
  %t68 = add i64 %t39, 16
  ; r60 := (read r59 (bv 32))
  %t69 = inttoptr i64 %t68 to i32*
  %t70 = load i32, i32* %t69
  ; r61 := (bv_add r60 (0x1 : bv 32))
  %t71 = add i32 %t70, 1
  ; r62 := (ssbb_overflows r61 (0x7 : bv 32) false)
  %t72 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t71, i32 7)
  %t73 = extractvalue { i32, i1 } %t72, 1
  ; r63 := (bv_add r60 (0xfffffffa : bv 32))
  %t74 = add i32 %t70, 4294967290
  ; r64 := (bv_slt r63 (0x0 : bv 32))
  %t75 = icmp slt i32 %t74, 0
  ; r65 := (eq r60 (0x6 : bv 32))
  %t76 = icmp eq i32 %t70, 6
  ; write r59 r61
  %t77 = inttoptr i64 %t68 to i32*
  store i32 %t71, i32* %t77
  ; r66 := (xor r64 r62)
  %t78 = xor i1 %t75, %t73
  ; r67 := (or r65 r66)
  %t79 = or i1 %t76, %t78
  br i1 %t79, label %block_0_420260, label %block_0_42025a
block_0_42025a:
  %t80 = phi i64 [ %t35, %block_0_420230 ]
  %t81 = phi i64 [ %t54, %block_0_420230 ]
  %t82 = phi i64 [ %t37, %block_0_420230 ]
  %t83 = phi i64 [ %t38, %block_0_420230 ]
  %t84 = phi i64 [ %t39, %block_0_420230 ]
  %t85 = phi i64 [ %t40, %block_0_420230 ]
  %t86 = phi i64 [ %t41, %block_0_420230 ]
  %t87 = phi i512 [ %t42, %block_0_420230 ]
  %t88 = phi i512 [ %t43, %block_0_420230 ]
  %t89 = phi i512 [ %t44, %block_0_420230 ]
  %t90 = phi i512 [ %t45, %block_0_420230 ]
  %t91 = phi i512 [ %t46, %block_0_420230 ]
  %t92 = phi i512 [ %t47, %block_0_420230 ]
  %t93 = phi i512 [ %t48, %block_0_420230 ]
  %t94 = phi i512 [ %t49, %block_0_420230 ]
  ; r83 := (bitcast r75 (vec 8 double))
  %t95 = bitcast i512 %t87 to <8 x double>
  ; r84 := (bitcast r76 (vec 8 double))
  %t96 = bitcast i512 %t88 to <8 x double>
  ; r85 := (bitcast r77 (vec 8 double))
  %t97 = bitcast i512 %t89 to <8 x double>
  ; r86 := (bitcast r78 (vec 8 double))
  %t98 = bitcast i512 %t90 to <8 x double>
  ; r87 := (bitcast r79 (vec 8 double))
  %t99 = bitcast i512 %t91 to <8 x double>
  ; r88 := (bitcast r80 (vec 8 double))
  %t100 = bitcast i512 %t92 to <8 x double>
  ; r89 := (bitcast r81 (vec 8 double))
  %t101 = bitcast i512 %t93 to <8 x double>
  ; r90 := (bitcast r82 (vec 8 double))
  %t102 = bitcast i512 %t94 to <8 x double>
  ; r91 := call __printf_flush(r72, r71, r69, r68, r73, r74, r83, r84, r85, r86, r87, r88, r89, r90)
  %t103 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_flush(i64 %t84, i64 %t83, i64 %t81, i64 %t80, i64 %t85, i64 %t86, <8 x double> %t95, <8 x double> %t96, <8 x double> %t97, <8 x double> %t98, <8 x double> %t99, <8 x double> %t100, <8 x double> %t101, <8 x double> %t102)
  ; r92 := (tuple_field r91 0)
  %t104 = extractvalue { i64, i64, <8 x double> } %t103, 0
  ; r93 := (tuple_field r91 1)
  %t105 = extractvalue { i64, i64, <8 x double> } %t103, 1
  ; r94 := (tuple_field r91 2)
  %t106 = extractvalue { i64, i64, <8 x double> } %t103, 2
  ; r95 := (bitcast r94 (bv 512))
  %t107 = bitcast <8 x double> %t106 to i512
  br label %block_0_42025f
block_0_42025f:
  %t108 = phi i64 [ %t105, %block_0_42025a ]
  %t109 = phi i64 [ %t82, %block_0_42025a ]
  %t110 = phi i512 [ %t107, %block_0_42025a ]
  br label %block_0_420260
block_0_420260:
  %t111 = phi i64 [ %t19, %block_0_42022c ], [ %t54, %block_0_420230 ], [ %t108, %block_0_42025f ]
  %t112 = phi i64 [ %t20, %block_0_42022c ], [ %t37, %block_0_420230 ], [ %t109, %block_0_42025f ]
  %t113 = phi i512 [ %t25, %block_0_42022c ], [ %t42, %block_0_420230 ], [ %t110, %block_0_42025f ]
  ; r102 := (trunc r100 32)
  %t114 = trunc i64 %t112 to i32
  ; r103 := (uext r102 64)
  %t115 = zext i32 %t114 to i64
  ; r104 := (bitcast r101 (vec 8 double))
  %t116 = bitcast i512 %t113 to <8 x double>
  ; r105 := (tuple r103 r99 r104)
  %t117 = insertvalue { i64, i64, <8 x double> } undef, i64 %t115, 0
  %t118 = insertvalue { i64, i64, <8 x double> } %t117, i64 %t111, 1
  %t119 = insertvalue { i64, i64, <8 x double> } %t118, <8 x double> %t116, 2
  ret { i64, i64, <8 x double> } %t119
block_0_420264:
  %t120 = phi i64 [ %arg2, %block_0_420220 ]
  %t121 = phi i512 [ %t17, %block_0_420220 ]
  ; r108 := (bitcast r107 (vec 8 double))
  %t122 = bitcast i512 %t121 to <8 x double>
  ; r109 := (tuple (0x0 : bv 64) r106 r108)
  %t123 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t124 = insertvalue { i64, i64, <8 x double> } %t123, i64 %t120, 1
  %t125 = insertvalue { i64, i64, <8 x double> } %t124, <8 x double> %t122, 2
  ret { i64, i64, <8 x double> } %t125
}
define void @__printf_render_pct(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_420dd0:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; r16 := call __printf_puts(arg0, (0x42a11a : bv 64), (0x1 : bv 64), arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  %t16 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_puts(i64 %arg0, i64 4366618, i64 1, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define { i64, i64, <8 x double> } @__printf_pad(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_420de0:
  ; r0 := (trunc arg2 32)
  %t0 = trunc i64 %arg2 to i32
  ; r1 := (eq r0 (0x0 : bv 32))
  %t1 = icmp eq i32 %t0, 0
  ; r2 := (mux r1 (0x6333d0 : bv 64) (0x6333c0 : bv 64))
  %t2 = select i1 %t1, i64 6501328, i64 6501312
  ; r3 := (trunc arg1 32)
  %t3 = trunc i64 %arg1 to i32
  ; r4 := (bv_slt r3 (0x0 : bv 32))
  %t4 = icmp slt i32 %t3, 0
  ; r5 := (eq r3 (0x0 : bv 32))
  %t5 = icmp eq i32 %t3, 0
  ; r6 := (or r5 r4)
  %t6 = or i1 %t5, %t4
  ; r7 := (bitcast arg6 (bv 512))
  %t7 = bitcast <8 x double> %arg6 to i512
  ; r8 := (bitcast arg6 (bv 512))
  %t8 = bitcast <8 x double> %arg6 to i512
  ; r9 := (bitcast arg7 (bv 512))
  %t9 = bitcast <8 x double> %arg7 to i512
  ; r10 := (bitcast arg8 (bv 512))
  %t10 = bitcast <8 x double> %arg8 to i512
  ; r11 := (bitcast arg9 (bv 512))
  %t11 = bitcast <8 x double> %arg9 to i512
  ; r12 := (bitcast arg10 (bv 512))
  %t12 = bitcast <8 x double> %arg10 to i512
  ; r13 := (bitcast arg11 (bv 512))
  %t13 = bitcast <8 x double> %arg11 to i512
  ; r14 := (bitcast arg12 (bv 512))
  %t14 = bitcast <8 x double> %arg12 to i512
  ; r15 := (bitcast arg13 (bv 512))
  %t15 = bitcast <8 x double> %arg13 to i512
  br i1 %t6, label %block_0_420e3c, label %block_0_420e03
block_0_420e03:
  %t16 = phi i64 [ %arg3, %block_0_420de0 ]
  %t17 = phi i64 [ %t2, %block_0_420de0 ]
  %t18 = phi i64 [ %arg1, %block_0_420de0 ]
  %t19 = phi i64 [ %arg0, %block_0_420de0 ]
  %t20 = phi i64 [ %arg4, %block_0_420de0 ]
  %t21 = phi i64 [ %arg5, %block_0_420de0 ]
  %t22 = phi i512 [ %t8, %block_0_420de0 ]
  %t23 = phi i512 [ %t9, %block_0_420de0 ]
  %t24 = phi i512 [ %t10, %block_0_420de0 ]
  %t25 = phi i512 [ %t11, %block_0_420de0 ]
  %t26 = phi i512 [ %t12, %block_0_420de0 ]
  %t27 = phi i512 [ %t13, %block_0_420de0 ]
  %t28 = phi i512 [ %t14, %block_0_420de0 ]
  %t29 = phi i512 [ %t15, %block_0_420de0 ]
  ; r30 := (trunc r18 32)
  %t30 = trunc i64 %t18 to i32
  ; r31 := (ssbb_overflows r30 (0x10 : bv 32) false)
  %t31 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t30, i32 16)
  %t32 = extractvalue { i32, i1 } %t31, 1
  ; r32 := (bv_add r30 (0xfffffff0 : bv 32))
  %t33 = add i32 %t30, 4294967280
  ; r33 := (bv_slt r32 (0x0 : bv 32))
  %t34 = icmp slt i32 %t33, 0
  ; r34 := (eq r30 (0x10 : bv 32))
  %t35 = icmp eq i32 %t30, 16
  ; r35 := (uext r30 64)
  %t36 = zext i32 %t30 to i64
  ; r36 := (xor r33 r31)
  %t37 = xor i1 %t34, %t32
  ; r37 := (or r34 r36)
  %t38 = or i1 %t35, %t37
  br i1 %t38, label %block_0_420e2b, label %block_0_420e0d
block_0_420e0d:
  %t39 = phi i64 [ %t16, %block_0_420e03 ]
  %t40 = phi i64 [ %t36, %block_0_420e03 ]
  %t41 = phi i64 [ %t17, %block_0_420e03 ]
  %t42 = phi i64 [ %t19, %block_0_420e03 ]
  %t43 = phi i64 [ %t20, %block_0_420e03 ]
  %t44 = phi i64 [ %t21, %block_0_420e03 ]
  %t45 = phi i64 [ 0, %block_0_420e03 ]
  %t46 = phi i512 [ %t22, %block_0_420e03 ]
  %t47 = phi i512 [ %t23, %block_0_420e03 ]
  %t48 = phi i512 [ %t24, %block_0_420e03 ]
  %t49 = phi i512 [ %t25, %block_0_420e03 ]
  %t50 = phi i512 [ %t26, %block_0_420e03 ]
  %t51 = phi i512 [ %t27, %block_0_420e03 ]
  %t52 = phi i512 [ %t28, %block_0_420e03 ]
  %t53 = phi i512 [ %t29, %block_0_420e03 ]
  br label %block_0_420e10
block_0_420e10:
  %t54 = phi i64 [ %t39, %block_0_420e0d ], [ %t86, %block_0_420e23 ]
  %t55 = phi i64 [ %t40, %block_0_420e0d ], [ %t87, %block_0_420e23 ]
  %t56 = phi i64 [ %t41, %block_0_420e0d ], [ %t88, %block_0_420e23 ]
  %t57 = phi i64 [ %t43, %block_0_420e0d ], [ %t89, %block_0_420e23 ]
  %t58 = phi i64 [ %t44, %block_0_420e0d ], [ %t90, %block_0_420e23 ]
  %t59 = phi i64 [ %t45, %block_0_420e0d ], [ %t104, %block_0_420e23 ]
  %t60 = phi i64 [ %t42, %block_0_420e0d ], [ %t92, %block_0_420e23 ]
  %t61 = phi i512 [ %t46, %block_0_420e0d ], [ %t93, %block_0_420e23 ]
  %t62 = phi i512 [ %t47, %block_0_420e0d ], [ %t94, %block_0_420e23 ]
  %t63 = phi i512 [ %t48, %block_0_420e0d ], [ %t95, %block_0_420e23 ]
  %t64 = phi i512 [ %t49, %block_0_420e0d ], [ %t96, %block_0_420e23 ]
  %t65 = phi i512 [ %t50, %block_0_420e0d ], [ %t97, %block_0_420e23 ]
  %t66 = phi i512 [ %t51, %block_0_420e0d ], [ %t98, %block_0_420e23 ]
  %t67 = phi i512 [ %t52, %block_0_420e0d ], [ %t99, %block_0_420e23 ]
  %t68 = phi i512 [ %t53, %block_0_420e0d ], [ %t100, %block_0_420e23 ]
  ; r68 := (trunc r54 32)
  %t69 = trunc i64 %t55 to i32
  ; r69 := (bv_add r68 (0xfffffff0 : bv 32))
  %t70 = add i32 %t69, 4294967280
  ; r70 := (uext r69 64)
  %t71 = zext i32 %t70 to i64
  ; r71 := (bitcast r60 (vec 8 double))
  %t72 = bitcast i512 %t61 to <8 x double>
  ; r72 := (bitcast r61 (vec 8 double))
  %t73 = bitcast i512 %t62 to <8 x double>
  ; r73 := (bitcast r62 (vec 8 double))
  %t74 = bitcast i512 %t63 to <8 x double>
  ; r74 := (bitcast r63 (vec 8 double))
  %t75 = bitcast i512 %t64 to <8 x double>
  ; r75 := (bitcast r64 (vec 8 double))
  %t76 = bitcast i512 %t65 to <8 x double>
  ; r76 := (bitcast r65 (vec 8 double))
  %t77 = bitcast i512 %t66 to <8 x double>
  ; r77 := (bitcast r66 (vec 8 double))
  %t78 = bitcast i512 %t67 to <8 x double>
  ; r78 := (bitcast r67 (vec 8 double))
  %t79 = bitcast i512 %t68 to <8 x double>
  ; r79 := call __printf_puts(r59, r55, (0x10 : bv 64), r53, r56, r57, r71, r72, r73, r74, r75, r76, r77, r78)
  %t80 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_puts(i64 %t60, i64 %t56, i64 16, i64 %t54, i64 %t57, i64 %t58, <8 x double> %t72, <8 x double> %t73, <8 x double> %t74, <8 x double> %t75, <8 x double> %t76, <8 x double> %t77, <8 x double> %t78, <8 x double> %t79)
  ; r80 := (tuple_field r79 0)
  %t81 = extractvalue { i64, i64, <8 x double> } %t80, 0
  ; r81 := (tuple_field r79 1)
  %t82 = extractvalue { i64, i64, <8 x double> } %t80, 1
  ; r82 := (tuple_field r79 2)
  %t83 = extractvalue { i64, i64, <8 x double> } %t80, 2
  ; r83 := (bitcast r82 (bv 512))
  %t84 = bitcast <8 x double> %t83 to i512
  br label %block_0_420e23
block_0_420e23:
  %t85 = phi i64 [ %t81, %block_0_420e10 ]
  %t86 = phi i64 [ %t54, %block_0_420e10 ]
  %t87 = phi i64 [ %t71, %block_0_420e10 ]
  %t88 = phi i64 [ %t56, %block_0_420e10 ]
  %t89 = phi i64 [ %t57, %block_0_420e10 ]
  %t90 = phi i64 [ %t58, %block_0_420e10 ]
  %t91 = phi i64 [ %t59, %block_0_420e10 ]
  %t92 = phi i64 [ %t60, %block_0_420e10 ]
  %t93 = phi i512 [ %t84, %block_0_420e10 ]
  %t94 = phi i512 [ %t62, %block_0_420e10 ]
  %t95 = phi i512 [ %t63, %block_0_420e10 ]
  %t96 = phi i512 [ %t64, %block_0_420e10 ]
  %t97 = phi i512 [ %t65, %block_0_420e10 ]
  %t98 = phi i512 [ %t66, %block_0_420e10 ]
  %t99 = phi i512 [ %t67, %block_0_420e10 ]
  %t100 = phi i512 [ %t68, %block_0_420e10 ]
  ; r100 := (trunc r90 32)
  %t101 = trunc i64 %t91 to i32
  ; r101 := (trunc r84 32)
  %t102 = trunc i64 %t85 to i32
  ; r102 := (bv_add r100 r101)
  %t103 = add i32 %t101, %t102
  ; r103 := (uext r102 64)
  %t104 = zext i32 %t103 to i64
  ; r104 := (trunc r86 32)
  %t105 = trunc i64 %t87 to i32
  ; r105 := (ssbb_overflows r104 (0x10 : bv 32) false)
  %t106 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t105, i32 16)
  %t107 = extractvalue { i32, i1 } %t106, 1
  ; r106 := (bv_add r104 (0xfffffff0 : bv 32))
  %t108 = add i32 %t105, 4294967280
  ; r107 := (bv_slt r106 (0x0 : bv 32))
  %t109 = icmp slt i32 %t108, 0
  ; r108 := (eq r104 (0x10 : bv 32))
  %t110 = icmp eq i32 %t105, 16
  ; r109 := (not r108)
  %t111 = icmp eq i1 %t110, 0
  ; r110 := (eq r107 r105)
  %t112 = icmp eq i1 %t109, %t107
  ; r111 := (and r109 r110)
  %t113 = and i1 %t111, %t112
  br i1 %t113, label %block_0_420e10, label %block_0_420e2b
block_0_420e2b:
  %t114 = phi i64 [ %t16, %block_0_420e03 ], [ %t86, %block_0_420e23 ]
  %t115 = phi i64 [ %t36, %block_0_420e03 ], [ %t87, %block_0_420e23 ]
  %t116 = phi i64 [ %t17, %block_0_420e03 ], [ %t88, %block_0_420e23 ]
  %t117 = phi i64 [ %t20, %block_0_420e03 ], [ %t89, %block_0_420e23 ]
  %t118 = phi i64 [ %t21, %block_0_420e03 ], [ %t90, %block_0_420e23 ]
  %t119 = phi i64 [ 0, %block_0_420e03 ], [ %t104, %block_0_420e23 ]
  %t120 = phi i64 [ %t19, %block_0_420e03 ], [ %t92, %block_0_420e23 ]
  %t121 = phi i512 [ %t22, %block_0_420e03 ], [ %t93, %block_0_420e23 ]
  %t122 = phi i512 [ %t23, %block_0_420e03 ], [ %t94, %block_0_420e23 ]
  %t123 = phi i512 [ %t24, %block_0_420e03 ], [ %t95, %block_0_420e23 ]
  %t124 = phi i512 [ %t25, %block_0_420e03 ], [ %t96, %block_0_420e23 ]
  %t125 = phi i512 [ %t26, %block_0_420e03 ], [ %t97, %block_0_420e23 ]
  %t126 = phi i512 [ %t27, %block_0_420e03 ], [ %t98, %block_0_420e23 ]
  %t127 = phi i512 [ %t28, %block_0_420e03 ], [ %t99, %block_0_420e23 ]
  %t128 = phi i512 [ %t29, %block_0_420e03 ], [ %t100, %block_0_420e23 ]
  ; r127 := (trunc r113 32)
  %t129 = trunc i64 %t115 to i32
  ; r128 := (uext r127 64)
  %t130 = zext i32 %t129 to i64
  ; r129 := (bitcast r119 (vec 8 double))
  %t131 = bitcast i512 %t121 to <8 x double>
  ; r130 := (bitcast r120 (vec 8 double))
  %t132 = bitcast i512 %t122 to <8 x double>
  ; r131 := (bitcast r121 (vec 8 double))
  %t133 = bitcast i512 %t123 to <8 x double>
  ; r132 := (bitcast r122 (vec 8 double))
  %t134 = bitcast i512 %t124 to <8 x double>
  ; r133 := (bitcast r123 (vec 8 double))
  %t135 = bitcast i512 %t125 to <8 x double>
  ; r134 := (bitcast r124 (vec 8 double))
  %t136 = bitcast i512 %t126 to <8 x double>
  ; r135 := (bitcast r125 (vec 8 double))
  %t137 = bitcast i512 %t127 to <8 x double>
  ; r136 := (bitcast r126 (vec 8 double))
  %t138 = bitcast i512 %t128 to <8 x double>
  ; r137 := call __printf_puts(r118, r114, r128, r112, r115, r116, r129, r130, r131, r132, r133, r134, r135, r136)
  %t139 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_puts(i64 %t120, i64 %t116, i64 %t130, i64 %t114, i64 %t117, i64 %t118, <8 x double> %t131, <8 x double> %t132, <8 x double> %t133, <8 x double> %t134, <8 x double> %t135, <8 x double> %t136, <8 x double> %t137, <8 x double> %t138)
  ; r138 := (tuple_field r137 0)
  %t140 = extractvalue { i64, i64, <8 x double> } %t139, 0
  ; r139 := (tuple_field r137 1)
  %t141 = extractvalue { i64, i64, <8 x double> } %t139, 1
  ; r140 := (tuple_field r137 2)
  %t142 = extractvalue { i64, i64, <8 x double> } %t139, 2
  ; r141 := (bitcast r140 (bv 512))
  %t143 = bitcast <8 x double> %t142 to i512
  br label %block_0_420e38
block_0_420e38:
  %t144 = phi i64 [ %t140, %block_0_420e2b ]
  %t145 = phi i64 [ %t141, %block_0_420e2b ]
  %t146 = phi i64 [ %t119, %block_0_420e2b ]
  %t147 = phi i512 [ %t143, %block_0_420e2b ]
  ; r146 := (bv_add r144 r142)
  %t148 = add i64 %t146, %t144
  ; r147 := (trunc r146 32)
  %t149 = trunc i64 %t148 to i32
  ; r148 := (uext r147 64)
  %t150 = zext i32 %t149 to i64
  br label %block_0_420e3c
block_0_420e3c:
  %t151 = phi i64 [ 0, %block_0_420de0 ], [ %t150, %block_0_420e38 ]
  %t152 = phi i64 [ %arg2, %block_0_420de0 ], [ %t145, %block_0_420e38 ]
  %t153 = phi i512 [ %t7, %block_0_420de0 ], [ %t147, %block_0_420e38 ]
  ; r152 := (bitcast r151 (vec 8 double))
  %t154 = bitcast i512 %t153 to <8 x double>
  ; r153 := (tuple r149 r150 r152)
  %t155 = insertvalue { i64, i64, <8 x double> } undef, i64 %t151, 0
  %t156 = insertvalue { i64, i64, <8 x double> } %t155, i64 %t152, 1
  %t157 = insertvalue { i64, i64, <8 x double> } %t156, <8 x double> %t154, 2
  ret { i64, i64, <8 x double> } %t157
}
define { i64, i64, <8 x double> } @__printf_out(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_420e50:
  ; r0 := (bv_add arg1 (0x24 : bv 64))
  %t0 = add i64 %arg1, 36
  ; r1 := (read r0 (bv 32))
  %t1 = inttoptr i64 %t0 to i32*
  %t2 = load i32, i32* %t1
  ; r2 := (trunc arg3 32)
  %t3 = trunc i64 %arg3 to i32
  ; r3 := (uext r2 64)
  %t4 = zext i32 %t3 to i64
  ; r4 := (eq r1 (0x0 : bv 32))
  %t5 = icmp eq i32 %t2, 0
  ; r5 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t9 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg11 (bv 512))
  %t11 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r12 := (bitcast arg13 (bv 512))
  %t13 = bitcast <8 x double> %arg13 to i512
  ; r13 := (bitcast arg6 (bv 512))
  %t14 = bitcast <8 x double> %arg6 to i512
  ; r14 := (bitcast arg7 (bv 512))
  %t15 = bitcast <8 x double> %arg7 to i512
  ; r15 := (bitcast arg8 (bv 512))
  %t16 = bitcast <8 x double> %arg8 to i512
  ; r16 := (bitcast arg9 (bv 512))
  %t17 = bitcast <8 x double> %arg9 to i512
  ; r17 := (bitcast arg10 (bv 512))
  %t18 = bitcast <8 x double> %arg10 to i512
  ; r18 := (bitcast arg11 (bv 512))
  %t19 = bitcast <8 x double> %arg11 to i512
  ; r19 := (bitcast arg12 (bv 512))
  %t20 = bitcast <8 x double> %arg12 to i512
  ; r20 := (bitcast arg13 (bv 512))
  %t21 = bitcast <8 x double> %arg13 to i512
  br i1 %t5, label %block_0_420e80, label %block_0_420e87
block_0_420e80:
  %t22 = phi i64 [ %arg3, %block_0_420e50 ]
  %t23 = phi i64 [ %arg2, %block_0_420e50 ]
  %t24 = phi i64 [ %arg1, %block_0_420e50 ]
  %t25 = phi i64 [ %arg0, %block_0_420e50 ]
  %t26 = phi i64 [ %arg4, %block_0_420e50 ]
  %t27 = phi i64 [ %arg5, %block_0_420e50 ]
  %t28 = phi i64 [ %t4, %block_0_420e50 ]
  %t29 = phi i512 [ %t6, %block_0_420e50 ]
  %t30 = phi i512 [ %t7, %block_0_420e50 ]
  %t31 = phi i512 [ %t8, %block_0_420e50 ]
  %t32 = phi i512 [ %t9, %block_0_420e50 ]
  %t33 = phi i512 [ %t10, %block_0_420e50 ]
  %t34 = phi i512 [ %t11, %block_0_420e50 ]
  %t35 = phi i512 [ %t12, %block_0_420e50 ]
  %t36 = phi i512 [ %t13, %block_0_420e50 ]
  ; r36 := (bv_add r23 (0x4 : bv 64))
  %t37 = add i64 %t24, 4
  ; r37 := (read r36 (bv 32))
  %t38 = inttoptr i64 %t37 to i32*
  %t39 = load i32, i32* %t38
  ; r38 := (uext r37 64)
  %t40 = zext i32 %t39 to i64
  ; r39 := (trunc r21 32)
  %t41 = trunc i64 %t22 to i32
  ; r40 := (ssbb_overflows r37 r39 false)
  %t42 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t39, i32 %t41)
  %t43 = extractvalue { i32, i1 } %t42, 1
  ; r41 := (bv_sub r37 r39)
  %t44 = sub i32 %t39, %t41
  ; r42 := (bv_slt r41 (0x0 : bv 32))
  %t45 = icmp slt i32 %t44, 0
  ; r43 := (eq r37 r39)
  %t46 = icmp eq i32 %t39, %t41
  ; r44 := (not r43)
  %t47 = icmp eq i1 %t46, 0
  ; r45 := (eq r42 r40)
  %t48 = icmp eq i1 %t45, %t43
  ; r46 := (and r44 r45)
  %t49 = and i1 %t47, %t48
  br i1 %t49, label %block_0_420ee0, label %block_0_420e87
block_0_420e87:
  %t50 = phi i64 [ %arg3, %block_0_420e50 ], [ %t22, %block_0_420e80 ]
  %t51 = phi i64 [ %arg1, %block_0_420e50 ], [ %t24, %block_0_420e80 ]
  %t52 = phi i64 [ %arg4, %block_0_420e50 ], [ %t26, %block_0_420e80 ]
  %t53 = phi i64 [ %arg5, %block_0_420e50 ], [ %t27, %block_0_420e80 ]
  %t54 = phi i64 [ %t4, %block_0_420e50 ], [ %t28, %block_0_420e80 ]
  %t55 = phi i64 [ %arg0, %block_0_420e50 ], [ %t25, %block_0_420e80 ]
  %t56 = phi i64 [ %arg2, %block_0_420e50 ], [ %t23, %block_0_420e80 ]
  %t57 = phi i512 [ %t14, %block_0_420e50 ], [ %t29, %block_0_420e80 ]
  %t58 = phi i512 [ %t15, %block_0_420e50 ], [ %t30, %block_0_420e80 ]
  %t59 = phi i512 [ %t16, %block_0_420e50 ], [ %t31, %block_0_420e80 ]
  %t60 = phi i512 [ %t17, %block_0_420e50 ], [ %t32, %block_0_420e80 ]
  %t61 = phi i512 [ %t18, %block_0_420e50 ], [ %t33, %block_0_420e80 ]
  %t62 = phi i512 [ %t19, %block_0_420e50 ], [ %t34, %block_0_420e80 ]
  %t63 = phi i512 [ %t20, %block_0_420e50 ], [ %t35, %block_0_420e80 ]
  %t64 = phi i512 [ %t21, %block_0_420e50 ], [ %t36, %block_0_420e80 ]
  br label %block_0_420e89
block_0_420e89:
  %t65 = phi i64 [ %t50, %block_0_420e87 ], [ %t242, %block_0_420ef0 ]
  %t66 = phi i64 [ %t51, %block_0_420e87 ], [ %t243, %block_0_420ef0 ]
  %t67 = phi i64 [ 0, %block_0_420e87 ], [ %t258, %block_0_420ef0 ]
  %t68 = phi i64 [ %t52, %block_0_420e87 ], [ %t244, %block_0_420ef0 ]
  %t69 = phi i64 [ %t53, %block_0_420e87 ], [ %t245, %block_0_420ef0 ]
  %t70 = phi i64 [ %t54, %block_0_420e87 ], [ %t246, %block_0_420ef0 ]
  %t71 = phi i64 [ %t55, %block_0_420e87 ], [ %t247, %block_0_420ef0 ]
  %t72 = phi i64 [ %t56, %block_0_420e87 ], [ %t248, %block_0_420ef0 ]
  %t73 = phi i512 [ %t57, %block_0_420e87 ], [ %t249, %block_0_420ef0 ]
  %t74 = phi i512 [ %t58, %block_0_420e87 ], [ %t250, %block_0_420ef0 ]
  %t75 = phi i512 [ %t59, %block_0_420e87 ], [ %t251, %block_0_420ef0 ]
  %t76 = phi i512 [ %t60, %block_0_420e87 ], [ %t252, %block_0_420ef0 ]
  %t77 = phi i512 [ %t61, %block_0_420e87 ], [ %t253, %block_0_420ef0 ]
  %t78 = phi i512 [ %t62, %block_0_420e87 ], [ %t254, %block_0_420ef0 ]
  %t79 = phi i512 [ %t63, %block_0_420e87 ], [ %t255, %block_0_420ef0 ]
  %t80 = phi i512 [ %t64, %block_0_420e87 ], [ %t256, %block_0_420ef0 ]
  ; r78 := (trunc r67 32)
  %t81 = trunc i64 %t70 to i32
  ; r79 := (uext r78 64)
  %t82 = zext i32 %t81 to i64
  ; r80 := (bitcast r70 (vec 8 double))
  %t83 = bitcast i512 %t73 to <8 x double>
  ; r81 := (bitcast r71 (vec 8 double))
  %t84 = bitcast i512 %t74 to <8 x double>
  ; r82 := (bitcast r72 (vec 8 double))
  %t85 = bitcast i512 %t75 to <8 x double>
  ; r83 := (bitcast r73 (vec 8 double))
  %t86 = bitcast i512 %t76 to <8 x double>
  ; r84 := (bitcast r74 (vec 8 double))
  %t87 = bitcast i512 %t77 to <8 x double>
  ; r85 := (bitcast r75 (vec 8 double))
  %t88 = bitcast i512 %t78 to <8 x double>
  ; r86 := (bitcast r76 (vec 8 double))
  %t89 = bitcast i512 %t79 to <8 x double>
  ; r87 := (bitcast r77 (vec 8 double))
  %t90 = bitcast i512 %t80 to <8 x double>
  ; r88 := call __printf_puts(r68, r69, r79, r62, r65, r66, r80, r81, r82, r83, r84, r85, r86, r87)
  %t91 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_puts(i64 %t71, i64 %t72, i64 %t82, i64 %t65, i64 %t68, i64 %t69, <8 x double> %t83, <8 x double> %t84, <8 x double> %t85, <8 x double> %t86, <8 x double> %t87, <8 x double> %t88, <8 x double> %t89, <8 x double> %t90)
  ; r89 := (tuple_field r88 0)
  %t92 = extractvalue { i64, i64, <8 x double> } %t91, 0
  ; r90 := (tuple_field r88 1)
  %t93 = extractvalue { i64, i64, <8 x double> } %t91, 1
  ; r91 := (tuple_field r88 2)
  %t94 = extractvalue { i64, i64, <8 x double> } %t91, 2
  ; r92 := (bitcast r91 (bv 512))
  %t95 = bitcast <8 x double> %t94 to i512
  br label %block_0_420e97
block_0_420e97:
  %t96 = phi i64 [ %t92, %block_0_420e89 ]
  %t97 = phi i64 [ %t65, %block_0_420e89 ]
  %t98 = phi i64 [ %t93, %block_0_420e89 ]
  %t99 = phi i64 [ %t66, %block_0_420e89 ]
  %t100 = phi i64 [ %t67, %block_0_420e89 ]
  %t101 = phi i64 [ %t68, %block_0_420e89 ]
  %t102 = phi i64 [ %t69, %block_0_420e89 ]
  %t103 = phi i64 [ %t70, %block_0_420e89 ]
  %t104 = phi i64 [ %t71, %block_0_420e89 ]
  %t105 = phi i512 [ %t95, %block_0_420e89 ]
  %t106 = phi i512 [ %t74, %block_0_420e89 ]
  %t107 = phi i512 [ %t75, %block_0_420e89 ]
  %t108 = phi i512 [ %t76, %block_0_420e89 ]
  %t109 = phi i512 [ %t77, %block_0_420e89 ]
  %t110 = phi i512 [ %t78, %block_0_420e89 ]
  %t111 = phi i512 [ %t79, %block_0_420e89 ]
  %t112 = phi i512 [ %t80, %block_0_420e89 ]
  ; r110 := (bv_add r93 r97)
  %t113 = add i64 %t96, %t100
  ; r111 := (trunc r110 32)
  %t114 = trunc i64 %t113 to i32
  ; r112 := (uext r111 64)
  %t115 = zext i32 %t114 to i64
  ; r113 := (bv_add r96 (0x24 : bv 64))
  %t116 = add i64 %t99, 36
  ; r114 := (read r113 (bv 32))
  %t117 = inttoptr i64 %t116 to i32*
  %t118 = load i32, i32* %t117
  ; r115 := (eq r114 (0x0 : bv 32))
  %t119 = icmp eq i32 %t118, 0
  br i1 %t119, label %block_0_420ea9, label %block_0_420ea1
block_0_420ea1:
  %t120 = phi i64 [ %t97, %block_0_420e97 ]
  %t121 = phi i64 [ %t98, %block_0_420e97 ]
  %t122 = phi i64 [ %t99, %block_0_420e97 ]
  %t123 = phi i64 [ %t115, %block_0_420e97 ]
  %t124 = phi i64 [ %t101, %block_0_420e97 ]
  %t125 = phi i64 [ %t102, %block_0_420e97 ]
  %t126 = phi i64 [ %t103, %block_0_420e97 ]
  %t127 = phi i64 [ %t104, %block_0_420e97 ]
  %t128 = phi i512 [ %t105, %block_0_420e97 ]
  %t129 = phi i512 [ %t106, %block_0_420e97 ]
  %t130 = phi i512 [ %t107, %block_0_420e97 ]
  %t131 = phi i512 [ %t108, %block_0_420e97 ]
  %t132 = phi i512 [ %t109, %block_0_420e97 ]
  %t133 = phi i512 [ %t110, %block_0_420e97 ]
  %t134 = phi i512 [ %t111, %block_0_420e97 ]
  %t135 = phi i512 [ %t112, %block_0_420e97 ]
  ; r132 := (bv_add r118 (0x4 : bv 64))
  %t136 = add i64 %t122, 4
  ; r133 := (read r132 (bv 32))
  %t137 = inttoptr i64 %t136 to i32*
  %t138 = load i32, i32* %t137
  ; r134 := (uext r133 64)
  %t139 = zext i32 %t138 to i64
  ; r135 := (trunc r122 32)
  %t140 = trunc i64 %t126 to i32
  ; r136 := (ssbb_overflows r135 r133 false)
  %t141 = call { i32, i1 } (i32, i32) @llvm.ssub.with.overflow.i32(i32 %t140, i32 %t138)
  %t142 = extractvalue { i32, i1 } %t141, 1
  ; r137 := (bv_sub r135 r133)
  %t143 = sub i32 %t140, %t138
  ; r138 := (bv_slt r137 (0x0 : bv 32))
  %t144 = icmp slt i32 %t143, 0
  ; r139 := (xor r138 r136)
  %t145 = xor i1 %t144, %t142
  br i1 %t145, label %block_0_420ec8, label %block_0_420ea9
block_0_420ea9:
  %t146 = phi i64 [ %t98, %block_0_420e97 ], [ %t121, %block_0_420ea1 ], [ %t195, %block_0_420edc ]
  %t147 = phi i64 [ %t115, %block_0_420e97 ], [ %t123, %block_0_420ea1 ], [ %t201, %block_0_420edc ]
  %t148 = phi i512 [ %t105, %block_0_420e97 ], [ %t128, %block_0_420ea1 ], [ %t197, %block_0_420edc ]
  ; r143 := (trunc r141 32)
  %t149 = trunc i64 %t147 to i32
  ; r144 := (uext r143 64)
  %t150 = zext i32 %t149 to i64
  ; r145 := (bitcast r142 (vec 8 double))
  %t151 = bitcast i512 %t148 to <8 x double>
  ; r146 := (tuple r144 r140 r145)
  %t152 = insertvalue { i64, i64, <8 x double> } undef, i64 %t150, 0
  %t153 = insertvalue { i64, i64, <8 x double> } %t152, i64 %t146, 1
  %t154 = insertvalue { i64, i64, <8 x double> } %t153, <8 x double> %t151, 2
  ret { i64, i64, <8 x double> } %t154
block_0_420ec8:
  %t155 = phi i64 [ %t120, %block_0_420ea1 ]
  %t156 = phi i64 [ %t122, %block_0_420ea1 ]
  %t157 = phi i64 [ %t123, %block_0_420ea1 ]
  %t158 = phi i64 [ %t139, %block_0_420ea1 ]
  %t159 = phi i64 [ %t124, %block_0_420ea1 ]
  %t160 = phi i64 [ %t125, %block_0_420ea1 ]
  %t161 = phi i64 [ %t126, %block_0_420ea1 ]
  %t162 = phi i64 [ %t127, %block_0_420ea1 ]
  %t163 = phi i512 [ %t128, %block_0_420ea1 ]
  %t164 = phi i512 [ %t129, %block_0_420ea1 ]
  %t165 = phi i512 [ %t130, %block_0_420ea1 ]
  %t166 = phi i512 [ %t131, %block_0_420ea1 ]
  %t167 = phi i512 [ %t132, %block_0_420ea1 ]
  %t168 = phi i512 [ %t133, %block_0_420ea1 ]
  %t169 = phi i512 [ %t134, %block_0_420ea1 ]
  %t170 = phi i512 [ %t135, %block_0_420ea1 ]
  ; r163 := (bv_add r148 (0x38 : bv 64))
  %t171 = add i64 %t156, 56
  ; r164 := (read r163 (bv 32))
  %t172 = inttoptr i64 %t171 to i32*
  %t173 = load i32, i32* %t172
  ; r165 := (eq r164 (0x30 : bv 32))
  %t174 = icmp eq i32 %t173, 48
  ; r166 := (mux r165 (0x1 : bv 8) (0x0 : bv 8))
  %t175 = select i1 %t174, i8 1, i8 0
  ; r167 := (uext r166 64)
  %t176 = zext i8 %t175 to i64
  ; r168 := (trunc r150 32)
  %t177 = trunc i64 %t158 to i32
  ; r169 := (trunc r153 32)
  %t178 = trunc i64 %t161 to i32
  ; r170 := (bv_sub r168 r169)
  %t179 = sub i32 %t177, %t178
  ; r171 := (uext r170 64)
  %t180 = zext i32 %t179 to i64
  ; r172 := (bitcast r155 (vec 8 double))
  %t181 = bitcast i512 %t163 to <8 x double>
  ; r173 := (bitcast r156 (vec 8 double))
  %t182 = bitcast i512 %t164 to <8 x double>
  ; r174 := (bitcast r157 (vec 8 double))
  %t183 = bitcast i512 %t165 to <8 x double>
  ; r175 := (bitcast r158 (vec 8 double))
  %t184 = bitcast i512 %t166 to <8 x double>
  ; r176 := (bitcast r159 (vec 8 double))
  %t185 = bitcast i512 %t167 to <8 x double>
  ; r177 := (bitcast r160 (vec 8 double))
  %t186 = bitcast i512 %t168 to <8 x double>
  ; r178 := (bitcast r161 (vec 8 double))
  %t187 = bitcast i512 %t169 to <8 x double>
  ; r179 := (bitcast r162 (vec 8 double))
  %t188 = bitcast i512 %t170 to <8 x double>
  ; r180 := call __printf_pad(r154, r171, r167, r147, r151, r152, r172, r173, r174, r175, r176, r177, r178, r179)
  %t189 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_pad(i64 %t162, i64 %t180, i64 %t176, i64 %t155, i64 %t159, i64 %t160, <8 x double> %t181, <8 x double> %t182, <8 x double> %t183, <8 x double> %t184, <8 x double> %t185, <8 x double> %t186, <8 x double> %t187, <8 x double> %t188)
  ; r181 := (tuple_field r180 0)
  %t190 = extractvalue { i64, i64, <8 x double> } %t189, 0
  ; r182 := (tuple_field r180 1)
  %t191 = extractvalue { i64, i64, <8 x double> } %t189, 1
  ; r183 := (tuple_field r180 2)
  %t192 = extractvalue { i64, i64, <8 x double> } %t189, 2
  ; r184 := (bitcast r183 (bv 512))
  %t193 = bitcast <8 x double> %t192 to i512
  br label %block_0_420edc
block_0_420edc:
  %t194 = phi i64 [ %t190, %block_0_420ec8 ]
  %t195 = phi i64 [ %t191, %block_0_420ec8 ]
  %t196 = phi i64 [ %t157, %block_0_420ec8 ]
  %t197 = phi i512 [ %t193, %block_0_420ec8 ]
  ; r189 := (trunc r187 32)
  %t198 = trunc i64 %t196 to i32
  ; r190 := (trunc r185 32)
  %t199 = trunc i64 %t194 to i32
  ; r191 := (bv_add r189 r190)
  %t200 = add i32 %t198, %t199
  ; r192 := (uext r191 64)
  %t201 = zext i32 %t200 to i64
  br label %block_0_420ea9
block_0_420ee0:
  %t202 = phi i64 [ %t22, %block_0_420e80 ]
  %t203 = phi i64 [ %t23, %block_0_420e80 ]
  %t204 = phi i64 [ %t24, %block_0_420e80 ]
  %t205 = phi i64 [ %t40, %block_0_420e80 ]
  %t206 = phi i64 [ %t25, %block_0_420e80 ]
  %t207 = phi i64 [ %t26, %block_0_420e80 ]
  %t208 = phi i64 [ %t27, %block_0_420e80 ]
  %t209 = phi i64 [ %t28, %block_0_420e80 ]
  %t210 = phi i512 [ %t29, %block_0_420e80 ]
  %t211 = phi i512 [ %t30, %block_0_420e80 ]
  %t212 = phi i512 [ %t31, %block_0_420e80 ]
  %t213 = phi i512 [ %t32, %block_0_420e80 ]
  %t214 = phi i512 [ %t33, %block_0_420e80 ]
  %t215 = phi i512 [ %t34, %block_0_420e80 ]
  %t216 = phi i512 [ %t35, %block_0_420e80 ]
  %t217 = phi i512 [ %t36, %block_0_420e80 ]
  ; r209 := (bv_add r195 (0x38 : bv 64))
  %t218 = add i64 %t204, 56
  ; r210 := (read r209 (bv 32))
  %t219 = inttoptr i64 %t218 to i32*
  %t220 = load i32, i32* %t219
  ; r211 := (eq r210 (0x30 : bv 32))
  %t221 = icmp eq i32 %t220, 48
  ; r212 := (mux r211 (0x1 : bv 8) (0x0 : bv 8))
  %t222 = select i1 %t221, i8 1, i8 0
  ; r213 := (uext r212 64)
  %t223 = zext i8 %t222 to i64
  ; r214 := (trunc r196 32)
  %t224 = trunc i64 %t205 to i32
  ; r215 := (trunc r193 32)
  %t225 = trunc i64 %t202 to i32
  ; r216 := (bv_sub r214 r215)
  %t226 = sub i32 %t224, %t225
  ; r217 := (uext r216 64)
  %t227 = zext i32 %t226 to i64
  ; r218 := (bitcast r201 (vec 8 double))
  %t228 = bitcast i512 %t210 to <8 x double>
  ; r219 := (bitcast r202 (vec 8 double))
  %t229 = bitcast i512 %t211 to <8 x double>
  ; r220 := (bitcast r203 (vec 8 double))
  %t230 = bitcast i512 %t212 to <8 x double>
  ; r221 := (bitcast r204 (vec 8 double))
  %t231 = bitcast i512 %t213 to <8 x double>
  ; r222 := (bitcast r205 (vec 8 double))
  %t232 = bitcast i512 %t214 to <8 x double>
  ; r223 := (bitcast r206 (vec 8 double))
  %t233 = bitcast i512 %t215 to <8 x double>
  ; r224 := (bitcast r207 (vec 8 double))
  %t234 = bitcast i512 %t216 to <8 x double>
  ; r225 := (bitcast r208 (vec 8 double))
  %t235 = bitcast i512 %t217 to <8 x double>
  ; r226 := call __printf_pad(r197, r217, r213, r193, r198, r199, r218, r219, r220, r221, r222, r223, r224, r225)
  %t236 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_pad(i64 %t206, i64 %t227, i64 %t223, i64 %t202, i64 %t207, i64 %t208, <8 x double> %t228, <8 x double> %t229, <8 x double> %t230, <8 x double> %t231, <8 x double> %t232, <8 x double> %t233, <8 x double> %t234, <8 x double> %t235)
  ; r227 := (tuple_field r226 0)
  %t237 = extractvalue { i64, i64, <8 x double> } %t236, 0
  ; r228 := (tuple_field r226 1)
  %t238 = extractvalue { i64, i64, <8 x double> } %t236, 1
  ; r229 := (tuple_field r226 2)
  %t239 = extractvalue { i64, i64, <8 x double> } %t236, 2
  ; r230 := (bitcast r229 (bv 512))
  %t240 = bitcast <8 x double> %t239 to i512
  br label %block_0_420ef0
block_0_420ef0:
  %t241 = phi i64 [ %t237, %block_0_420ee0 ]
  %t242 = phi i64 [ %t202, %block_0_420ee0 ]
  %t243 = phi i64 [ %t204, %block_0_420ee0 ]
  %t244 = phi i64 [ %t207, %block_0_420ee0 ]
  %t245 = phi i64 [ %t208, %block_0_420ee0 ]
  %t246 = phi i64 [ %t209, %block_0_420ee0 ]
  %t247 = phi i64 [ %t206, %block_0_420ee0 ]
  %t248 = phi i64 [ %t203, %block_0_420ee0 ]
  %t249 = phi i512 [ %t240, %block_0_420ee0 ]
  %t250 = phi i512 [ %t211, %block_0_420ee0 ]
  %t251 = phi i512 [ %t212, %block_0_420ee0 ]
  %t252 = phi i512 [ %t213, %block_0_420ee0 ]
  %t253 = phi i512 [ %t214, %block_0_420ee0 ]
  %t254 = phi i512 [ %t215, %block_0_420ee0 ]
  %t255 = phi i512 [ %t216, %block_0_420ee0 ]
  %t256 = phi i512 [ %t217, %block_0_420ee0 ]
  ; r247 := (trunc r231 32)
  %t257 = trunc i64 %t241 to i32
  ; r248 := (uext r247 64)
  %t258 = zext i32 %t257 to i64
  br label %block_0_420e89
}
define { i64, i64, <8 x double> } @strsep(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_420f70:
  ; r0 := (read arg0 (bv 64))
  %t0 = inttoptr i64 %arg0 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (eq r0 (0x0 : bv 64))
  %t2 = icmp eq i64 %t1, 0
  ; r2 := (bitcast arg3 (bv 512))
  %t3 = bitcast <8 x double> %arg3 to i512
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  br i1 %t2, label %block_0_420fb5, label %block_0_420f7a
block_0_420f7a:
  %t5 = phi i64 [ %arg1, %block_0_420f70 ]
  %t6 = phi i64 [ %arg0, %block_0_420f70 ]
  %t7 = phi i64 [ %t1, %block_0_420f70 ]
  %t8 = phi i512 [ %t4, %block_0_420f70 ]
  br label %block_0_420f80
block_0_420f80:
  %t9 = phi i64 [ %t5, %block_0_420f7a ], [ %t22, %block_0_420f91 ]
  %t10 = phi i64 [ %t6, %block_0_420f7a ], [ %t23, %block_0_420f91 ]
  %t11 = phi i64 [ %t7, %block_0_420f7a ], [ %t25, %block_0_420f91 ]
  %t12 = phi i64 [ %t7, %block_0_420f7a ], [ %t27, %block_0_420f91 ]
  %t13 = phi i512 [ %t8, %block_0_420f7a ], [ %t28, %block_0_420f91 ]
  ; r13 := (read r10 (bv 8))
  %t14 = inttoptr i64 %t11 to i8*
  %t15 = load i8, i8* %t14
  ; r14 := (uext r13 64)
  %t16 = zext i8 %t15 to i64
  ; r15 := (bv_add r10 (0x1 : bv 64))
  %t17 = add i64 %t11, 1
  ; r16 := (sext r13 32)
  %t18 = sext i8 %t15 to i32
  ; r17 := (uext r16 64)
  %t19 = zext i32 %t18 to i64
  br label %block_0_420f95
block_0_420f91:
  %t20 = phi i64 [ %t41, %block_0_420f95 ]
  %t21 = phi i64 [ %t42, %block_0_420f95 ]
  %t22 = phi i64 [ %t32, %block_0_420f95 ]
  %t23 = phi i64 [ %t33, %block_0_420f95 ]
  %t24 = phi i64 [ %t34, %block_0_420f95 ]
  %t25 = phi i64 [ %t35, %block_0_420f95 ]
  %t26 = phi i64 [ %t36, %block_0_420f95 ]
  %t27 = phi i64 [ %t37, %block_0_420f95 ]
  %t28 = phi i512 [ %t38, %block_0_420f95 ]
  ; r27 := (trunc r18 8)
  %t29 = trunc i64 %t20 to i8
  ; r28 := (eq r27 (0x0 : bv 8))
  %t30 = icmp eq i8 %t29, 0
  br i1 %t30, label %block_0_420f80, label %block_0_420f95
block_0_420f95:
  %t31 = phi i64 [ %t9, %block_0_420f80 ], [ %t21, %block_0_420f91 ]
  %t32 = phi i64 [ %t9, %block_0_420f80 ], [ %t22, %block_0_420f91 ]
  %t33 = phi i64 [ %t10, %block_0_420f80 ], [ %t23, %block_0_420f91 ]
  %t34 = phi i64 [ %t19, %block_0_420f80 ], [ %t24, %block_0_420f91 ]
  %t35 = phi i64 [ %t17, %block_0_420f80 ], [ %t25, %block_0_420f91 ]
  %t36 = phi i64 [ %t16, %block_0_420f80 ], [ %t26, %block_0_420f91 ]
  %t37 = phi i64 [ %t12, %block_0_420f80 ], [ %t27, %block_0_420f91 ]
  %t38 = phi i512 [ %t13, %block_0_420f80 ], [ %t28, %block_0_420f91 ]
  ; r37 := (read r29 (bv 8))
  %t39 = inttoptr i64 %t31 to i8*
  %t40 = load i8, i8* %t39
  ; r38 := (uext r37 64)
  %t41 = zext i8 %t40 to i64
  ; r39 := (bv_add r29 (0x1 : bv 64))
  %t42 = add i64 %t31, 1
  ; r40 := (sext r37 32)
  %t43 = sext i8 %t40 to i32
  ; r41 := (trunc r32 32)
  %t44 = trunc i64 %t34 to i32
  ; r42 := (eq r40 r41)
  %t45 = icmp eq i32 %t43, %t44
  br i1 %t45, label %block_0_420fa4, label %block_0_420f91
block_0_420fa4:
  %t46 = phi i64 [ %t42, %block_0_420f95 ]
  %t47 = phi i64 [ %t33, %block_0_420f95 ]
  %t48 = phi i64 [ %t35, %block_0_420f95 ]
  %t49 = phi i64 [ %t36, %block_0_420f95 ]
  %t50 = phi i64 [ %t37, %block_0_420f95 ]
  %t51 = phi i512 [ %t38, %block_0_420f95 ]
  ; r49 := (trunc r46 8)
  %t52 = trunc i64 %t49 to i8
  ; r50 := (eq r49 (0x0 : bv 8))
  %t53 = icmp eq i8 %t52, 0
  br i1 %t53, label %block_0_420fb7, label %block_0_420fa9
block_0_420fa9:
  %t54 = phi i64 [ %t46, %block_0_420fa4 ]
  %t55 = phi i64 [ %t47, %block_0_420fa4 ]
  %t56 = phi i64 [ %t48, %block_0_420fa4 ]
  %t57 = phi i64 [ %t50, %block_0_420fa4 ]
  %t58 = phi i512 [ %t51, %block_0_420fa4 ]
  ; r56 := (bv_add r53 (0xffffffffffffffff : bv 64))
  %t59 = add i64 %t56, 18446744073709551615
  ; write r56 (0x0 : bv 8)
  %t60 = inttoptr i64 %t59 to i8*
  store i8 0, i8* %t60
  ; write r52 r53
  %t61 = inttoptr i64 %t55 to i64*
  store i64 %t56, i64* %t61
  ; r57 := (bitcast r55 (vec 8 double))
  %t62 = bitcast i512 %t58 to <8 x double>
  ; r58 := (tuple r54 r51 r57)
  %t63 = insertvalue { i64, i64, <8 x double> } undef, i64 %t57, 0
  %t64 = insertvalue { i64, i64, <8 x double> } %t63, i64 %t54, 1
  %t65 = insertvalue { i64, i64, <8 x double> } %t64, <8 x double> %t62, 2
  ret { i64, i64, <8 x double> } %t65
block_0_420fb5:
  %t66 = phi i64 [ 0, %block_0_420f70 ]
  %t67 = phi i64 [ %arg2, %block_0_420f70 ]
  %t68 = phi i512 [ %t3, %block_0_420f70 ]
  ; r62 := (bitcast r61 (vec 8 double))
  %t69 = bitcast i512 %t68 to <8 x double>
  ; r63 := (tuple r59 r60 r62)
  %t70 = insertvalue { i64, i64, <8 x double> } undef, i64 %t66, 0
  %t71 = insertvalue { i64, i64, <8 x double> } %t70, i64 %t67, 1
  %t72 = insertvalue { i64, i64, <8 x double> } %t71, <8 x double> %t69, 2
  ret { i64, i64, <8 x double> } %t72
block_0_420fb7:
  %t73 = phi i64 [ %t46, %block_0_420fa4 ]
  %t74 = phi i64 [ %t47, %block_0_420fa4 ]
  %t75 = phi i64 [ %t50, %block_0_420fa4 ]
  %t76 = phi i512 [ %t51, %block_0_420fa4 ]
  ; write r65 (0x0 : bv 64)
  %t77 = inttoptr i64 %t74 to i64*
  store i64 0, i64* %t77
  ; r68 := (bitcast r67 (vec 8 double))
  %t78 = bitcast i512 %t76 to <8 x double>
  ; r69 := (tuple r66 r64 r68)
  %t79 = insertvalue { i64, i64, <8 x double> } undef, i64 %t75, 0
  %t80 = insertvalue { i64, i64, <8 x double> } %t79, i64 %t73, 1
  %t81 = insertvalue { i64, i64, <8 x double> } %t80, <8 x double> %t78, 2
  ret { i64, i64, <8 x double> } %t81
}
define <8 x double> @err_set_file(i64 %arg0, <8 x double> %arg1) {
block_0_420fd0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg1 (bv 512))
  %t1 = bitcast <8 x double> %arg1 to i512
  ; r2 := (bitcast arg1 (bv 512))
  %t2 = bitcast <8 x double> %arg1 to i512
  br i1 %t0, label %block_0_420fe0, label %block_0_420fd5
block_0_420fd5:
  %t3 = phi i64 [ %arg0, %block_0_420fd0 ]
  %t4 = phi i512 [ %t2, %block_0_420fd0 ]
  ; write (0x641b80 : bv 64) r3
  %t5 = inttoptr i64 6560640 to i64*
  store i64 %t3, i64* %t5
  ; r5 := (bitcast r4 (vec 8 double))
  %t6 = bitcast i512 %t4 to <8 x double>
  ret <8 x double> %t6
block_0_420fe0:
  %t7 = phi i512 [ %t1, %block_0_420fd0 ]
  ; r7 := (read (0x631290 : bv 64) (bv 64))
  %t8 = inttoptr i64 6492816 to i64*
  %t9 = load i64, i64* %t8
  ; write (0x641b80 : bv 64) r7
  %t10 = inttoptr i64 6560640 to i64*
  store i64 %t9, i64* %t10
  ; r8 := (bitcast r6 (vec 8 double))
  %t11 = bitcast i512 %t7 to <8 x double>
  ret <8 x double> %t11
}
define void @err_set_exit(i64 %arg0) {
block_0_420ff0:
  ; write (0x641b88 : bv 64) arg0
  %t0 = inttoptr i64 6560648 to i64*
  store i64 %arg0, i64* %t0
  ret void
}
define void @vwarn(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_421260:
  ; r0 := (bitcast arg3 (bv 512))
  %t0 = bitcast <8 x double> %arg3 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call __error_unthreaded(arg0, arg1, arg2, r1)
  %t2 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %t1)
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, i64, <8 x double> } %t2, 1
  ; r5 := (tuple_field r2 2)
  %t5 = extractvalue { i64, i64, <8 x double> } %t2, 2
  ; r6 := (bitcast r5 (bv 512))
  %t6 = bitcast <8 x double> %t5 to i512
  br label %block_0_421279
block_0_421279:
  %t7 = phi i64 [ %t3, %block_0_421260 ]
  %t8 = phi i64 [ %arg0, %block_0_421260 ]
  %t9 = phi i64 [ %arg1, %block_0_421260 ]
  %t10 = phi i512 [ %t6, %block_0_421260 ]
  ; r11 := (read r7 (bv 32))
  %t11 = inttoptr i64 %t7 to i32*
  %t12 = load i32, i32* %t11
  ; r12 := (uext r11 64)
  %t13 = zext i32 %t12 to i64
  ; r13 := (bitcast r10 (vec 8 double))
  %t14 = bitcast i512 %t10 to <8 x double>
  call void (i64, i64, i64, <8 x double>) @vwarnc(i64 %t13, i64 %t8, i64 %t9, <8 x double> %t14)
  ret void
}
define void @__collate_lookup(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, <8 x double> %arg4) {
block_0_4217c0:
  ; write arg1 (0x1 : bv 32)
  %t0 = inttoptr i64 %arg1 to i32*
  store i32 1, i32* %t0
  ; write arg3 (0x0 : bv 32)
  %t1 = inttoptr i64 %arg3 to i32*
  store i32 0, i32* %t1
  ; write arg2 (0x0 : bv 32)
  %t2 = inttoptr i64 %arg2 to i32*
  store i32 0, i32* %t2
  ; r0 := (read (0x641e80 : bv 64) (bv 64))
  %t3 = inttoptr i64 6561408 to i64*
  %t4 = load i64, i64* %t3
  ; r1 := (read r0 (bv 8))
  %t5 = inttoptr i64 %t4 to i8*
  %t6 = load i8, i8* %t5
  ; r2 := (uext r1 64)
  %t7 = zext i8 %t6 to i64
  ; r3 := (eq r1 (0x0 : bv 8))
  %t8 = icmp eq i8 %t6, 0
  ; r4 := (bitcast arg4 (bv 512))
  %t9 = bitcast <8 x double> %arg4 to i512
  br i1 %t8, label %block_0_421853, label %block_0_4217fb
block_0_4217fb:
  %t10 = phi i64 [ %t7, %block_0_4217c0 ]
  %t11 = phi i64 [ %arg3, %block_0_4217c0 ]
  %t12 = phi i64 [ %t4, %block_0_4217c0 ]
  %t13 = phi i64 [ %arg1, %block_0_4217c0 ]
  %t14 = phi i64 [ %arg0, %block_0_4217c0 ]
  %t15 = phi i64 [ %arg2, %block_0_4217c0 ]
  %t16 = phi i512 [ %t9, %block_0_4217c0 ]
  ; r12 := (read r9 (bv 8))
  %t17 = inttoptr i64 %t14 to i8*
  %t18 = load i8, i8* %t17
  ; r13 := (uext r12 64)
  %t19 = zext i8 %t18 to i64
  br label %block_0_42180f
block_0_421803:
  %t20 = phi i64 [ %t33, %block_0_42180f ], [ %t71, %block_0_42182d ]
  %t21 = phi i64 [ %t34, %block_0_42180f ], [ %t72, %block_0_42182d ]
  %t22 = phi i64 [ %t35, %block_0_42180f ], [ %t74, %block_0_42182d ]
  %t23 = phi i64 [ %t36, %block_0_42180f ], [ %t75, %block_0_42182d ]
  %t24 = phi i64 [ %t37, %block_0_42180f ], [ %t76, %block_0_42182d ]
  %t25 = phi i512 [ %t38, %block_0_42180f ], [ %t77, %block_0_42182d ]
  %t26 = phi i64 [ %t39, %block_0_42180f ], [ %t78, %block_0_42182d ]
  ; r21 := (bv_add r14 (0x14 : bv 64))
  %t27 = add i64 %t20, 20
  ; r22 := (read r21 (bv 8))
  %t28 = inttoptr i64 %t27 to i8*
  %t29 = load i8, i8* %t28
  ; r23 := (uext r22 64)
  %t30 = zext i8 %t29 to i64
  ; r24 := (eq r22 (0x0 : bv 8))
  %t31 = icmp eq i8 %t29, 0
  br i1 %t31, label %block_0_421856, label %block_0_42180f
block_0_42180f:
  %t32 = phi i64 [ %t10, %block_0_4217fb ], [ %t30, %block_0_421803 ]
  %t33 = phi i64 [ %t12, %block_0_4217fb ], [ %t27, %block_0_421803 ]
  %t34 = phi i64 [ %t19, %block_0_4217fb ], [ %t21, %block_0_421803 ]
  %t35 = phi i64 [ %t14, %block_0_4217fb ], [ %t22, %block_0_421803 ]
  %t36 = phi i64 [ %t15, %block_0_4217fb ], [ %t23, %block_0_421803 ]
  %t37 = phi i64 [ %t11, %block_0_4217fb ], [ %t24, %block_0_421803 ]
  %t38 = phi i512 [ %t16, %block_0_4217fb ], [ %t25, %block_0_421803 ]
  %t39 = phi i64 [ %t13, %block_0_4217fb ], [ %t26, %block_0_421803 ]
  ; r33 := (trunc r25 8)
  %t40 = trunc i64 %t32 to i8
  ; r34 := (trunc r27 8)
  %t41 = trunc i64 %t34 to i8
  ; r35 := (eq r33 r34)
  %t42 = icmp eq i8 %t40, %t41
  br i1 %t42, label %block_0_421814, label %block_0_421803
block_0_421814:
  %t43 = phi i64 [ %t33, %block_0_42180f ]
  %t44 = phi i64 [ %t34, %block_0_42180f ]
  %t45 = phi i64 [ %t35, %block_0_42180f ]
  %t46 = phi i64 [ %t36, %block_0_42180f ]
  %t47 = phi i64 [ %t37, %block_0_42180f ]
  %t48 = phi i512 [ %t38, %block_0_42180f ]
  %t49 = phi i64 [ %t39, %block_0_42180f ]
  ; r43 := (bitcast r41 (vec 8 double))
  %t50 = bitcast i512 %t48 to <8 x double>
  ; r44 := call strlen(r36, r43)
  %t51 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t43, <8 x double> %t50)
  ; r45 := (tuple_field r44 0)
  %t52 = extractvalue { i64, i64, <8 x double> } %t51, 0
  ; r46 := (tuple_field r44 1)
  %t53 = extractvalue { i64, i64, <8 x double> } %t51, 1
  ; r47 := (tuple_field r44 2)
  %t54 = extractvalue { i64, i64, <8 x double> } %t51, 2
  ; r48 := (bitcast r47 (bv 512))
  %t55 = bitcast <8 x double> %t54 to i512
  br label %block_0_42181c
block_0_42181c:
  %t56 = phi i64 [ %t52, %block_0_421814 ]
  %t57 = phi i64 [ %t43, %block_0_421814 ]
  %t58 = phi i64 [ %t44, %block_0_421814 ]
  %t59 = phi i64 [ %t45, %block_0_421814 ]
  %t60 = phi i64 [ %t46, %block_0_421814 ]
  %t61 = phi i64 [ %t47, %block_0_421814 ]
  %t62 = phi i512 [ %t55, %block_0_421814 ]
  %t63 = phi i64 [ %t49, %block_0_421814 ]
  ; r57 := (bitcast r55 (vec 8 double))
  %t64 = bitcast i512 %t62 to <8 x double>
  ; r58 := call strncmp(r52, r50, r49, r57)
  %t65 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strncmp(i64 %t59, i64 %t57, i64 %t56, <8 x double> %t64)
  ; r59 := (tuple_field r58 0)
  %t66 = extractvalue { i64, i64, <8 x double> } %t65, 0
  ; r60 := (tuple_field r58 1)
  %t67 = extractvalue { i64, i64, <8 x double> } %t65, 1
  ; r61 := (tuple_field r58 2)
  %t68 = extractvalue { i64, i64, <8 x double> } %t65, 2
  ; r62 := (bitcast r61 (bv 512))
  %t69 = bitcast <8 x double> %t68 to i512
  br label %block_0_42182d
block_0_42182d:
  %t70 = phi i64 [ %t66, %block_0_42181c ]
  %t71 = phi i64 [ %t57, %block_0_42181c ]
  %t72 = phi i64 [ %t58, %block_0_42181c ]
  %t73 = phi i64 [ %t56, %block_0_42181c ]
  %t74 = phi i64 [ %t59, %block_0_42181c ]
  %t75 = phi i64 [ %t60, %block_0_42181c ]
  %t76 = phi i64 [ %t61, %block_0_42181c ]
  %t77 = phi i512 [ %t69, %block_0_42181c ]
  %t78 = phi i64 [ %t63, %block_0_42181c ]
  ; r72 := (trunc r63 32)
  %t79 = trunc i64 %t70 to i32
  ; r73 := (eq r72 (0x0 : bv 32))
  %t80 = icmp eq i32 %t79, 0
  br i1 %t80, label %block_0_421831, label %block_0_421803
block_0_421831:
  %t81 = phi i64 [ %t71, %block_0_42182d ]
  %t82 = phi i64 [ %t73, %block_0_42182d ]
  %t83 = phi i64 [ %t75, %block_0_42182d ]
  %t84 = phi i64 [ %t76, %block_0_42182d ]
  %t85 = phi i64 [ %t78, %block_0_42182d ]
  ; r79 := (trunc r75 32)
  %t86 = trunc i64 %t82 to i32
  ; write r78 r79
  %t87 = inttoptr i64 %t85 to i32*
  store i32 %t86, i32* %t87
  ; r80 := (bv_add r74 (0xc : bv 64))
  %t88 = add i64 %t81, 12
  ; r81 := (read r80 (bv 32))
  %t89 = inttoptr i64 %t88 to i32*
  %t90 = load i32, i32* %t89
  ; write r76 r81
  %t91 = inttoptr i64 %t83 to i32*
  store i32 %t90, i32* %t91
  ; r82 := (bv_add r74 (0x10 : bv 64))
  %t92 = add i64 %t81, 16
  ; r83 := (read r82 (bv 32))
  %t93 = inttoptr i64 %t92 to i32*
  %t94 = load i32, i32* %t93
  ; write r77 r83
  %t95 = inttoptr i64 %t84 to i32*
  store i32 %t94, i32* %t95
  ret void
block_0_421853:
  %t96 = phi i64 [ %arg3, %block_0_4217c0 ]
  %t97 = phi i64 [ %arg0, %block_0_4217c0 ]
  %t98 = phi i64 [ %arg2, %block_0_4217c0 ]
  ; r87 := (read r85 (bv 8))
  %t99 = inttoptr i64 %t97 to i8*
  %t100 = load i8, i8* %t99
  ; r88 := (uext r87 64)
  %t101 = zext i8 %t100 to i64
  br label %block_0_421856
block_0_421856:
  %t102 = phi i64 [ %t21, %block_0_421803 ], [ %t101, %block_0_421853 ]
  %t103 = phi i64 [ %t22, %block_0_421803 ], [ %t97, %block_0_421853 ]
  %t104 = phi i64 [ %t23, %block_0_421803 ], [ %t98, %block_0_421853 ]
  %t105 = phi i64 [ %t24, %block_0_421803 ], [ %t96, %block_0_421853 ]
  ; r93 := (read (0x641e78 : bv 64) (bv 64))
  %t106 = inttoptr i64 6561400 to i64*
  %t107 = load i64, i64* %t106
  ; r94 := (trunc r89 8)
  %t108 = trunc i64 %t102 to i8
  ; r95 := (uext r94 64)
  %t109 = zext i8 %t108 to i64
  ; r96 := (bv_mul (0x8 : bv 64) r95)
  %t110 = mul i64 8, %t109
  ; r97 := (bv_add r93 r96)
  %t111 = add i64 %t107, %t110
  ; r98 := (read r97 (bv 32))
  %t112 = inttoptr i64 %t111 to i32*
  %t113 = load i32, i32* %t112
  ; write r91 r98
  %t114 = inttoptr i64 %t104 to i32*
  store i32 %t113, i32* %t114
  ; r99 := (read r90 (bv 8))
  %t115 = inttoptr i64 %t103 to i8*
  %t116 = load i8, i8* %t115
  ; r100 := (uext r99 64)
  %t117 = zext i8 %t116 to i64
  ; r101 := (bv_mul (0x8 : bv 64) r100)
  %t118 = mul i64 8, %t117
  ; r102 := (bv_add r93 r101)
  %t119 = add i64 %t107, %t118
  ; r103 := (bv_add r102 (0x4 : bv 64))
  %t120 = add i64 %t119, 4
  ; r104 := (read r103 (bv 32))
  %t121 = inttoptr i64 %t120 to i32*
  %t122 = load i32, i32* %t121
  ; write r92 r104
  %t123 = inttoptr i64 %t105 to i32*
  store i32 %t122, i32* %t123
  ret void
}
define { i64, i64, <8 x double> } @fread(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_421f50:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  ; r11 := (bitcast arg6 (bv 512))
  %t12 = bitcast <8 x double> %arg6 to i512
  ; r12 := (bitcast arg7 (bv 512))
  %t13 = bitcast <8 x double> %arg7 to i512
  ; r13 := (bitcast arg8 (bv 512))
  %t14 = bitcast <8 x double> %arg8 to i512
  ; r14 := (bitcast arg9 (bv 512))
  %t15 = bitcast <8 x double> %arg9 to i512
  ; r15 := (bitcast arg10 (bv 512))
  %t16 = bitcast <8 x double> %arg10 to i512
  ; r16 := (bitcast arg11 (bv 512))
  %t17 = bitcast <8 x double> %arg11 to i512
  ; r17 := (bitcast arg12 (bv 512))
  %t18 = bitcast <8 x double> %arg12 to i512
  ; r18 := (bitcast arg13 (bv 512))
  %t19 = bitcast <8 x double> %arg13 to i512
  br i1 %t3, label %block_0_421f7e, label %block_0_421fc0
block_0_421f7e:
  %t20 = phi i64 [ %t2, %block_0_421f50 ], [ %t129, %block_0_421fc8 ]
  %t21 = phi i64 [ %arg3, %block_0_421f50 ], [ %t130, %block_0_421fc8 ]
  %t22 = phi i64 [ %arg2, %block_0_421f50 ], [ %t131, %block_0_421fc8 ]
  %t23 = phi i64 [ %arg1, %block_0_421f50 ], [ %t132, %block_0_421fc8 ]
  %t24 = phi i64 [ %arg4, %block_0_421f50 ], [ %t133, %block_0_421fc8 ]
  %t25 = phi i64 [ %arg5, %block_0_421f50 ], [ %t134, %block_0_421fc8 ]
  %t26 = phi i64 [ %arg1, %block_0_421f50 ], [ %t135, %block_0_421fc8 ]
  %t27 = phi i64 [ %arg0, %block_0_421f50 ], [ %t136, %block_0_421fc8 ]
  %t28 = phi i512 [ %t4, %block_0_421f50 ], [ %t137, %block_0_421fc8 ]
  %t29 = phi i512 [ %t5, %block_0_421f50 ], [ %t138, %block_0_421fc8 ]
  %t30 = phi i512 [ %t6, %block_0_421f50 ], [ %t139, %block_0_421fc8 ]
  %t31 = phi i512 [ %t7, %block_0_421f50 ], [ %t140, %block_0_421fc8 ]
  %t32 = phi i512 [ %t8, %block_0_421f50 ], [ %t141, %block_0_421fc8 ]
  %t33 = phi i512 [ %t9, %block_0_421f50 ], [ %t142, %block_0_421fc8 ]
  %t34 = phi i512 [ %t10, %block_0_421f50 ], [ %t143, %block_0_421fc8 ]
  %t35 = phi i512 [ %t11, %block_0_421f50 ], [ %t144, %block_0_421fc8 ]
  ; r35 := (bitcast r27 (vec 8 double))
  %t36 = bitcast i512 %t28 to <8 x double>
  ; r36 := (bitcast r28 (vec 8 double))
  %t37 = bitcast i512 %t29 to <8 x double>
  ; r37 := (bitcast r29 (vec 8 double))
  %t38 = bitcast i512 %t30 to <8 x double>
  ; r38 := (bitcast r30 (vec 8 double))
  %t39 = bitcast i512 %t31 to <8 x double>
  ; r39 := (bitcast r31 (vec 8 double))
  %t40 = bitcast i512 %t32 to <8 x double>
  ; r40 := (bitcast r32 (vec 8 double))
  %t41 = bitcast i512 %t33 to <8 x double>
  ; r41 := (bitcast r33 (vec 8 double))
  %t42 = bitcast i512 %t34 to <8 x double>
  ; r42 := (bitcast r34 (vec 8 double))
  %t43 = bitcast i512 %t35 to <8 x double>
  ; r43 := call __fread(r26, r25, r21, r20, r23, r24, r35, r36, r37, r38, r39, r40, r41, r42)
  %t44 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__fread(i64 %t27, i64 %t26, i64 %t22, i64 %t21, i64 %t24, i64 %t25, <8 x double> %t36, <8 x double> %t37, <8 x double> %t38, <8 x double> %t39, <8 x double> %t40, <8 x double> %t41, <8 x double> %t42, <8 x double> %t43)
  ; r44 := (tuple_field r43 0)
  %t45 = extractvalue { i64, <8 x double> } %t44, 0
  ; r45 := (tuple_field r43 1)
  %t46 = extractvalue { i64, <8 x double> } %t44, 1
  ; r46 := (bitcast r45 (bv 512))
  %t47 = bitcast <8 x double> %t46 to i512
  br label %block_0_421f8f
block_0_421f8f:
  %t48 = phi i64 [ %t45, %block_0_421f7e ]
  %t49 = phi i64 [ %t20, %block_0_421f7e ]
  %t50 = phi i64 [ %t21, %block_0_421f7e ]
  %t51 = phi i64 [ %t23, %block_0_421f7e ]
  %t52 = phi i64 [ %t24, %block_0_421f7e ]
  %t53 = phi i64 [ %t25, %block_0_421f7e ]
  %t54 = phi i512 [ %t47, %block_0_421f7e ]
  %t55 = phi i512 [ %t29, %block_0_421f7e ]
  %t56 = phi i512 [ %t30, %block_0_421f7e ]
  %t57 = phi i512 [ %t31, %block_0_421f7e ]
  %t58 = phi i512 [ %t32, %block_0_421f7e ]
  %t59 = phi i512 [ %t33, %block_0_421f7e ]
  %t60 = phi i512 [ %t34, %block_0_421f7e ]
  %t61 = phi i512 [ %t35, %block_0_421f7e ]
  ; r61 := (read (0x6356e8 : bv 64) (bv 32))
  %t62 = inttoptr i64 6510312 to i32*
  %t63 = load i32, i32* %t62
  ; r62 := (uext r61 64)
  %t64 = zext i32 %t63 to i64
  ; r63 := (eq r61 (0x0 : bv 32))
  %t65 = icmp eq i32 %t63, 0
  br i1 %t65, label %block_0_421fa4, label %block_0_421f9c
block_0_421f9c:
  %t66 = phi i64 [ %t48, %block_0_421f8f ]
  %t67 = phi i64 [ %t49, %block_0_421f8f ]
  %t68 = phi i64 [ %t64, %block_0_421f8f ]
  %t69 = phi i64 [ %t50, %block_0_421f8f ]
  %t70 = phi i64 [ %t51, %block_0_421f8f ]
  %t71 = phi i64 [ %t52, %block_0_421f8f ]
  %t72 = phi i64 [ %t53, %block_0_421f8f ]
  %t73 = phi i512 [ %t54, %block_0_421f8f ]
  %t74 = phi i512 [ %t55, %block_0_421f8f ]
  %t75 = phi i512 [ %t56, %block_0_421f8f ]
  %t76 = phi i512 [ %t57, %block_0_421f8f ]
  %t77 = phi i512 [ %t58, %block_0_421f8f ]
  %t78 = phi i512 [ %t59, %block_0_421f8f ]
  %t79 = phi i512 [ %t60, %block_0_421f8f ]
  %t80 = phi i512 [ %t61, %block_0_421f8f ]
  ; r79 := (bitcast r71 (vec 8 double))
  %t81 = bitcast i512 %t73 to <8 x double>
  ; r80 := (bitcast r72 (vec 8 double))
  %t82 = bitcast i512 %t74 to <8 x double>
  ; r81 := (bitcast r73 (vec 8 double))
  %t83 = bitcast i512 %t75 to <8 x double>
  ; r82 := (bitcast r74 (vec 8 double))
  %t84 = bitcast i512 %t76 to <8 x double>
  ; r83 := (bitcast r75 (vec 8 double))
  %t85 = bitcast i512 %t77 to <8 x double>
  ; r84 := (bitcast r76 (vec 8 double))
  %t86 = bitcast i512 %t78 to <8 x double>
  ; r85 := (bitcast r77 (vec 8 double))
  %t87 = bitcast i512 %t79 to <8 x double>
  ; r86 := (bitcast r78 (vec 8 double))
  %t88 = bitcast i512 %t80 to <8 x double>
  ; r87 := call funlockfile(r67, r68, r66, r65, r69, r70, r79, r80, r81, r82, r83, r84, r85, r86)
  %t89 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @funlockfile(i64 %t69, i64 %t70, i64 %t68, i64 %t67, i64 %t71, i64 %t72, <8 x double> %t81, <8 x double> %t82, <8 x double> %t83, <8 x double> %t84, <8 x double> %t85, <8 x double> %t86, <8 x double> %t87, <8 x double> %t88)
  ; r88 := (tuple_field r87 0)
  %t90 = extractvalue { i64, i64, <8 x double> } %t89, 0
  ; r89 := (tuple_field r87 1)
  %t91 = extractvalue { i64, i64, <8 x double> } %t89, 1
  ; r90 := (tuple_field r87 2)
  %t92 = extractvalue { i64, i64, <8 x double> } %t89, 2
  ; r91 := (bitcast r90 (bv 512))
  %t93 = bitcast <8 x double> %t92 to i512
  br label %block_0_421fa4
block_0_421fa4:
  %t94 = phi i64 [ %t64, %block_0_421f8f ], [ %t91, %block_0_421f9c ]
  %t95 = phi i64 [ %t48, %block_0_421f8f ], [ %t66, %block_0_421f9c ]
  %t96 = phi i512 [ %t54, %block_0_421f8f ], [ %t93, %block_0_421f9c ]
  ; r95 := (bitcast r94 (vec 8 double))
  %t97 = bitcast i512 %t96 to <8 x double>
  ; r96 := (tuple r93 r92 r95)
  %t98 = insertvalue { i64, i64, <8 x double> } undef, i64 %t95, 0
  %t99 = insertvalue { i64, i64, <8 x double> } %t98, i64 %t94, 1
  %t100 = insertvalue { i64, i64, <8 x double> } %t99, <8 x double> %t97, 2
  ret { i64, i64, <8 x double> } %t100
block_0_421fc0:
  %t101 = phi i64 [ %t2, %block_0_421f50 ]
  %t102 = phi i64 [ %arg2, %block_0_421f50 ]
  %t103 = phi i64 [ %arg3, %block_0_421f50 ]
  %t104 = phi i64 [ %arg1, %block_0_421f50 ]
  %t105 = phi i64 [ %arg0, %block_0_421f50 ]
  %t106 = phi i64 [ %arg4, %block_0_421f50 ]
  %t107 = phi i64 [ %arg5, %block_0_421f50 ]
  %t108 = phi i512 [ %t12, %block_0_421f50 ]
  %t109 = phi i512 [ %t13, %block_0_421f50 ]
  %t110 = phi i512 [ %t14, %block_0_421f50 ]
  %t111 = phi i512 [ %t15, %block_0_421f50 ]
  %t112 = phi i512 [ %t16, %block_0_421f50 ]
  %t113 = phi i512 [ %t17, %block_0_421f50 ]
  %t114 = phi i512 [ %t18, %block_0_421f50 ]
  %t115 = phi i512 [ %t19, %block_0_421f50 ]
  ; r112 := (bitcast r104 (vec 8 double))
  %t116 = bitcast i512 %t108 to <8 x double>
  ; r113 := (bitcast r105 (vec 8 double))
  %t117 = bitcast i512 %t109 to <8 x double>
  ; r114 := (bitcast r106 (vec 8 double))
  %t118 = bitcast i512 %t110 to <8 x double>
  ; r115 := (bitcast r107 (vec 8 double))
  %t119 = bitcast i512 %t111 to <8 x double>
  ; r116 := (bitcast r108 (vec 8 double))
  %t120 = bitcast i512 %t112 to <8 x double>
  ; r117 := (bitcast r109 (vec 8 double))
  %t121 = bitcast i512 %t113 to <8 x double>
  ; r118 := (bitcast r110 (vec 8 double))
  %t122 = bitcast i512 %t114 to <8 x double>
  ; r119 := (bitcast r111 (vec 8 double))
  %t123 = bitcast i512 %t115 to <8 x double>
  ; r120 := call flockfile(r99, r100, r98, r97, r102, r103, r112, r113, r114, r115, r116, r117, r118, r119)
  %t124 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @flockfile(i64 %t103, i64 %t104, i64 %t102, i64 %t101, i64 %t106, i64 %t107, <8 x double> %t116, <8 x double> %t117, <8 x double> %t118, <8 x double> %t119, <8 x double> %t120, <8 x double> %t121, <8 x double> %t122, <8 x double> %t123)
  ; r121 := (tuple_field r120 0)
  %t125 = extractvalue { i64, i64, <8 x double> } %t124, 0
  ; r122 := (tuple_field r120 1)
  %t126 = extractvalue { i64, i64, <8 x double> } %t124, 1
  ; r123 := (tuple_field r120 2)
  %t127 = extractvalue { i64, i64, <8 x double> } %t124, 2
  ; r124 := (bitcast r123 (bv 512))
  %t128 = bitcast <8 x double> %t127 to i512
  br label %block_0_421fc8
block_0_421fc8:
  %t129 = phi i64 [ %t101, %block_0_421fc0 ]
  %t130 = phi i64 [ %t103, %block_0_421fc0 ]
  %t131 = phi i64 [ %t102, %block_0_421fc0 ]
  %t132 = phi i64 [ %t104, %block_0_421fc0 ]
  %t133 = phi i64 [ %t106, %block_0_421fc0 ]
  %t134 = phi i64 [ %t107, %block_0_421fc0 ]
  %t135 = phi i64 [ %t104, %block_0_421fc0 ]
  %t136 = phi i64 [ %t105, %block_0_421fc0 ]
  %t137 = phi i512 [ %t128, %block_0_421fc0 ]
  %t138 = phi i512 [ %t109, %block_0_421fc0 ]
  %t139 = phi i512 [ %t110, %block_0_421fc0 ]
  %t140 = phi i512 [ %t111, %block_0_421fc0 ]
  %t141 = phi i512 [ %t112, %block_0_421fc0 ]
  %t142 = phi i512 [ %t113, %block_0_421fc0 ]
  %t143 = phi i512 [ %t114, %block_0_421fc0 ]
  %t144 = phi i512 [ %t115, %block_0_421fc0 ]
  br label %block_0_421f7e
}
define void @fileno_unlocked(i64 %arg0) {
block_0_421fd0:
  ; r0 := (bv_add arg0 (0x12 : bv 64))
  %t0 = add i64 %arg0, 18
  ; r1 := (read r0 (bv 16))
  %t1 = inttoptr i64 %t0 to i16*
  %t2 = load i16, i16* %t1
  ret void
}
define void @fileno(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_421fe0:
  ; r0 := (read (0x6356e8 : bv 64) (bv 32))
  %t0 = inttoptr i64 6510312 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  br i1 %t3, label %block_0_421ffb, label %block_0_422010
block_0_421ffb:
  %t12 = phi i64 [ %arg0, %block_0_421fe0 ]
  ; r12 := (bv_add r11 (0x12 : bv 64))
  %t13 = add i64 %t12, 18
  ; r13 := (read r12 (bv 16))
  %t14 = inttoptr i64 %t13 to i16*
  %t15 = load i16, i16* %t14
  br label %block_0_421fff
block_0_421fff:
  ret void
block_0_422010:
  %t16 = phi i64 [ %arg3, %block_0_421fe0 ]
  %t17 = phi i64 [ %t2, %block_0_421fe0 ]
  %t18 = phi i64 [ %arg0, %block_0_421fe0 ]
  %t19 = phi i64 [ %arg1, %block_0_421fe0 ]
  %t20 = phi i64 [ %arg4, %block_0_421fe0 ]
  %t21 = phi i64 [ %arg5, %block_0_421fe0 ]
  %t22 = phi i512 [ %t4, %block_0_421fe0 ]
  %t23 = phi i512 [ %t5, %block_0_421fe0 ]
  %t24 = phi i512 [ %t6, %block_0_421fe0 ]
  %t25 = phi i512 [ %t7, %block_0_421fe0 ]
  %t26 = phi i512 [ %t8, %block_0_421fe0 ]
  %t27 = phi i512 [ %t9, %block_0_421fe0 ]
  %t28 = phi i512 [ %t10, %block_0_421fe0 ]
  %t29 = phi i512 [ %t11, %block_0_421fe0 ]
  ; r28 := (bitcast r20 (vec 8 double))
  %t30 = bitcast i512 %t22 to <8 x double>
  ; r29 := (bitcast r21 (vec 8 double))
  %t31 = bitcast i512 %t23 to <8 x double>
  ; r30 := (bitcast r22 (vec 8 double))
  %t32 = bitcast i512 %t24 to <8 x double>
  ; r31 := (bitcast r23 (vec 8 double))
  %t33 = bitcast i512 %t25 to <8 x double>
  ; r32 := (bitcast r24 (vec 8 double))
  %t34 = bitcast i512 %t26 to <8 x double>
  ; r33 := (bitcast r25 (vec 8 double))
  %t35 = bitcast i512 %t27 to <8 x double>
  ; r34 := (bitcast r26 (vec 8 double))
  %t36 = bitcast i512 %t28 to <8 x double>
  ; r35 := (bitcast r27 (vec 8 double))
  %t37 = bitcast i512 %t29 to <8 x double>
  ; r36 := call flockfile(r16, r17, r15, r14, r18, r19, r28, r29, r30, r31, r32, r33, r34, r35)
  %t38 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @flockfile(i64 %t18, i64 %t19, i64 %t17, i64 %t16, i64 %t20, i64 %t21, <8 x double> %t30, <8 x double> %t31, <8 x double> %t32, <8 x double> %t33, <8 x double> %t34, <8 x double> %t35, <8 x double> %t36, <8 x double> %t37)
  ; r37 := (tuple_field r36 0)
  %t39 = extractvalue { i64, i64, <8 x double> } %t38, 0
  ; r38 := (tuple_field r36 1)
  %t40 = extractvalue { i64, i64, <8 x double> } %t38, 1
  ; r39 := (tuple_field r36 2)
  %t41 = extractvalue { i64, i64, <8 x double> } %t38, 2
  ; r40 := (bitcast r39 (bv 512))
  %t42 = bitcast <8 x double> %t41 to i512
  br label %block_0_422015
block_0_422015:
  %t43 = phi i64 [ %t16, %block_0_422010 ]
  %t44 = phi i64 [ %t40, %block_0_422010 ]
  %t45 = phi i64 [ %t18, %block_0_422010 ]
  %t46 = phi i64 [ %t19, %block_0_422010 ]
  %t47 = phi i64 [ %t20, %block_0_422010 ]
  %t48 = phi i64 [ %t21, %block_0_422010 ]
  %t49 = phi i512 [ %t42, %block_0_422010 ]
  %t50 = phi i512 [ %t23, %block_0_422010 ]
  %t51 = phi i512 [ %t24, %block_0_422010 ]
  %t52 = phi i512 [ %t25, %block_0_422010 ]
  %t53 = phi i512 [ %t26, %block_0_422010 ]
  %t54 = phi i512 [ %t27, %block_0_422010 ]
  %t55 = phi i512 [ %t28, %block_0_422010 ]
  %t56 = phi i512 [ %t29, %block_0_422010 ]
  ; r55 := (read (0x6356e8 : bv 64) (bv 32))
  %t57 = inttoptr i64 6510312 to i32*
  %t58 = load i32, i32* %t57
  ; r56 := (bv_add r43 (0x12 : bv 64))
  %t59 = add i64 %t45, 18
  ; r57 := (read r56 (bv 16))
  %t60 = inttoptr i64 %t59 to i16*
  %t61 = load i16, i16* %t60
  ; r58 := (eq r55 (0x0 : bv 32))
  %t62 = icmp eq i32 %t58, 0
  br i1 %t62, label %block_0_421fff, label %block_0_422023
block_0_422023:
  %t63 = phi i64 [ %t43, %block_0_422015 ]
  %t64 = phi i64 [ %t44, %block_0_422015 ]
  %t65 = phi i64 [ %t45, %block_0_422015 ]
  %t66 = phi i64 [ %t46, %block_0_422015 ]
  %t67 = phi i64 [ %t47, %block_0_422015 ]
  %t68 = phi i64 [ %t48, %block_0_422015 ]
  %t69 = phi i512 [ %t49, %block_0_422015 ]
  %t70 = phi i512 [ %t50, %block_0_422015 ]
  %t71 = phi i512 [ %t51, %block_0_422015 ]
  %t72 = phi i512 [ %t52, %block_0_422015 ]
  %t73 = phi i512 [ %t53, %block_0_422015 ]
  %t74 = phi i512 [ %t54, %block_0_422015 ]
  %t75 = phi i512 [ %t55, %block_0_422015 ]
  %t76 = phi i512 [ %t56, %block_0_422015 ]
  ; r73 := (bitcast r65 (vec 8 double))
  %t77 = bitcast i512 %t69 to <8 x double>
  ; r74 := (bitcast r66 (vec 8 double))
  %t78 = bitcast i512 %t70 to <8 x double>
  ; r75 := (bitcast r67 (vec 8 double))
  %t79 = bitcast i512 %t71 to <8 x double>
  ; r76 := (bitcast r68 (vec 8 double))
  %t80 = bitcast i512 %t72 to <8 x double>
  ; r77 := (bitcast r69 (vec 8 double))
  %t81 = bitcast i512 %t73 to <8 x double>
  ; r78 := (bitcast r70 (vec 8 double))
  %t82 = bitcast i512 %t74 to <8 x double>
  ; r79 := (bitcast r71 (vec 8 double))
  %t83 = bitcast i512 %t75 to <8 x double>
  ; r80 := (bitcast r72 (vec 8 double))
  %t84 = bitcast i512 %t76 to <8 x double>
  ; r81 := call funlockfile(r61, r62, r60, r59, r63, r64, r73, r74, r75, r76, r77, r78, r79, r80)
  %t85 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @funlockfile(i64 %t65, i64 %t66, i64 %t64, i64 %t63, i64 %t67, i64 %t68, <8 x double> %t77, <8 x double> %t78, <8 x double> %t79, <8 x double> %t80, <8 x double> %t81, <8 x double> %t82, <8 x double> %t83, <8 x double> %t84)
  ; r82 := (tuple_field r81 0)
  %t86 = extractvalue { i64, i64, <8 x double> } %t85, 0
  ; r83 := (tuple_field r81 1)
  %t87 = extractvalue { i64, i64, <8 x double> } %t85, 1
  ; r84 := (tuple_field r81 2)
  %t88 = extractvalue { i64, i64, <8 x double> } %t85, 2
  ; r85 := (bitcast r84 (bv 512))
  %t89 = bitcast <8 x double> %t88 to i512
  br label %block_0_42202b
block_0_42202b:
  br label %block_0_421fff
}
define { i64, i64, <8 x double> } @strlcpy(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_422030:
  ; r0 := (eq arg2 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg2, 0
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  ; r2 := (bitcast arg3 (bv 512))
  %t2 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_422062, label %block_0_422038
block_0_422038:
  %t3 = phi i64 [ %arg1, %block_0_422030 ]
  %t4 = phi i64 [ %arg2, %block_0_422030 ]
  %t5 = phi i64 [ %arg0, %block_0_422030 ]
  %t6 = phi i512 [ %t2, %block_0_422030 ]
  br label %block_0_422044
block_0_422040:
  %t7 = phi i64 [ %t27, %block_0_42204a ]
  %t8 = phi i64 [ %t21, %block_0_42204a ]
  %t9 = phi i64 [ %t22, %block_0_42204a ]
  %t10 = phi i64 [ %t23, %block_0_42204a ]
  %t11 = phi i512 [ %t24, %block_0_42204a ]
  ; r12 := (bv_add r10 (0x1 : bv 64))
  %t12 = add i64 %t10, 1
  br label %block_0_422044
block_0_422044:
  %t13 = phi i64 [ %t3, %block_0_422038 ], [ %t7, %block_0_422040 ]
  %t14 = phi i64 [ %t4, %block_0_422038 ], [ %t8, %block_0_422040 ]
  %t15 = phi i64 [ %t3, %block_0_422038 ], [ %t9, %block_0_422040 ]
  %t16 = phi i64 [ %t5, %block_0_422038 ], [ %t12, %block_0_422040 ]
  %t17 = phi i512 [ %t6, %block_0_422038 ], [ %t11, %block_0_422040 ]
  ; r18 := (bv_add r14 (0xffffffffffffffff : bv 64))
  %t18 = add i64 %t14, 18446744073709551615
  ; r19 := (eq r14 (0x1 : bv 64))
  %t19 = icmp eq i64 %t14, 1
  br i1 %t19, label %block_0_42205f, label %block_0_42204a
block_0_42204a:
  %t20 = phi i64 [ %t13, %block_0_422044 ]
  %t21 = phi i64 [ %t18, %block_0_422044 ]
  %t22 = phi i64 [ %t15, %block_0_422044 ]
  %t23 = phi i64 [ %t16, %block_0_422044 ]
  %t24 = phi i512 [ %t17, %block_0_422044 ]
  ; r25 := (read r20 (bv 8))
  %t25 = inttoptr i64 %t20 to i8*
  %t26 = load i8, i8* %t25
  ; r26 := (bv_add r20 (0x1 : bv 64))
  %t27 = add i64 %t20, 1
  ; r27 := (eq r25 (0x0 : bv 8))
  %t28 = icmp eq i8 %t26, 0
  ; write r23 r25
  %t29 = inttoptr i64 %t23 to i8*
  store i8 %t26, i8* %t29
  br i1 %t28, label %block_0_422057, label %block_0_422040
block_0_422057:
  %t30 = phi i64 [ %t27, %block_0_42204a ], [ %t52, %block_0_422062 ], [ %t62, %block_0_422078 ]
  %t31 = phi i64 [ %t21, %block_0_42204a ], [ %t47, %block_0_422062 ], [ %t63, %block_0_422078 ]
  %t32 = phi i64 [ %t22, %block_0_42204a ], [ %t48, %block_0_422062 ], [ %t64, %block_0_422078 ]
  %t33 = phi i512 [ %t24, %block_0_42204a ], [ %t49, %block_0_422062 ], [ %t65, %block_0_422078 ]
  ; r32 := (bv_sub r28 r30)
  %t34 = sub i64 %t30, %t32
  ; r33 := (bv_add r32 (0xffffffffffffffff : bv 64))
  %t35 = add i64 %t34, 18446744073709551615
  ; r34 := (bitcast r31 (vec 8 double))
  %t36 = bitcast i512 %t33 to <8 x double>
  ; r35 := (tuple r33 r29 r34)
  %t37 = insertvalue { i64, i64, <8 x double> } undef, i64 %t35, 0
  %t38 = insertvalue { i64, i64, <8 x double> } %t37, i64 %t31, 1
  %t39 = insertvalue { i64, i64, <8 x double> } %t38, <8 x double> %t36, 2
  ret { i64, i64, <8 x double> } %t39
block_0_42205f:
  %t40 = phi i64 [ %t13, %block_0_422044 ]
  %t41 = phi i64 [ %t18, %block_0_422044 ]
  %t42 = phi i64 [ %t15, %block_0_422044 ]
  %t43 = phi i64 [ %t16, %block_0_422044 ]
  %t44 = phi i512 [ %t17, %block_0_422044 ]
  ; write r39 (0x0 : bv 8)
  %t45 = inttoptr i64 %t43 to i8*
  store i8 0, i8* %t45
  br label %block_0_422062
block_0_422062:
  %t46 = phi i64 [ %arg1, %block_0_422030 ], [ %t40, %block_0_42205f ], [ %t60, %block_0_42206d ]
  %t47 = phi i64 [ %arg2, %block_0_422030 ], [ %t41, %block_0_42205f ], [ %t55, %block_0_42206d ]
  %t48 = phi i64 [ %arg1, %block_0_422030 ], [ %t42, %block_0_42205f ], [ %t56, %block_0_42206d ]
  %t49 = phi i512 [ %t1, %block_0_422030 ], [ %t44, %block_0_42205f ], [ %t57, %block_0_42206d ]
  ; r45 := (read r41 (bv 8))
  %t50 = inttoptr i64 %t46 to i8*
  %t51 = load i8, i8* %t50
  ; r46 := (bv_add r41 (0x1 : bv 64))
  %t52 = add i64 %t46, 1
  ; r47 := (eq r45 (0x0 : bv 8))
  %t53 = icmp eq i8 %t51, 0
  br i1 %t53, label %block_0_422057, label %block_0_42206d
block_0_42206d:
  %t54 = phi i64 [ %t52, %block_0_422062 ]
  %t55 = phi i64 [ %t47, %block_0_422062 ]
  %t56 = phi i64 [ %t48, %block_0_422062 ]
  %t57 = phi i512 [ %t49, %block_0_422062 ]
  ; r52 := (read r48 (bv 8))
  %t58 = inttoptr i64 %t54 to i8*
  %t59 = load i8, i8* %t58
  ; r53 := (bv_add r48 (0x1 : bv 64))
  %t60 = add i64 %t54, 1
  ; r54 := (eq r52 (0x0 : bv 8))
  %t61 = icmp eq i8 %t59, 0
  br i1 %t61, label %block_0_422078, label %block_0_422062
block_0_422078:
  %t62 = phi i64 [ %t60, %block_0_42206d ]
  %t63 = phi i64 [ %t55, %block_0_42206d ]
  %t64 = phi i64 [ %t56, %block_0_42206d ]
  %t65 = phi i512 [ %t57, %block_0_42206d ]
  br label %block_0_422057
}
define { i64, i64, <8 x double> } @strlcat(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_422080:
  ; r0 := (eq arg2 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg2, 0
  ; r1 := (bitcast arg3 (bv 512))
  %t1 = bitcast <8 x double> %arg3 to i512
  ; r2 := (bitcast arg3 (bv 512))
  %t2 = bitcast <8 x double> %arg3 to i512
  br i1 %t0, label %block_0_4220f4, label %block_0_422089
block_0_422089:
  %t3 = phi i64 [ %arg0, %block_0_422080 ]
  %t4 = phi i64 [ %arg2, %block_0_422080 ]
  %t5 = phi i64 [ %arg1, %block_0_422080 ]
  %t6 = phi i512 [ %t2, %block_0_422080 ]
  ; r7 := (read r3 (bv 8))
  %t7 = inttoptr i64 %t3 to i8*
  %t8 = load i8, i8* %t7
  ; r8 := (eq r7 (0x0 : bv 8))
  %t9 = icmp eq i8 %t8, 0
  br i1 %t9, label %block_0_4220f4, label %block_0_42208e
block_0_42208e:
  %t10 = phi i64 [ %t3, %block_0_422089 ]
  %t11 = phi i64 [ %t4, %block_0_422089 ]
  %t12 = phi i64 [ %t5, %block_0_422089 ]
  %t13 = phi i512 [ %t6, %block_0_422089 ]
  ; r13 := (bv_add r10 r9)
  %t14 = add i64 %t11, %t10
  br label %block_0_422099
block_0_422094:
  %t15 = phi i64 [ %t24, %block_0_422099 ]
  %t16 = phi i64 [ %t25, %block_0_422099 ]
  %t17 = phi i64 [ %t26, %block_0_422099 ]
  %t18 = phi i64 [ %t27, %block_0_422099 ]
  %t19 = phi i64 [ %t30, %block_0_422099 ]
  %t20 = phi i512 [ %t29, %block_0_422099 ]
  ; r20 := (read r18 (bv 8))
  %t21 = inttoptr i64 %t19 to i8*
  %t22 = load i8, i8* %t21
  ; r21 := (eq r20 (0x0 : bv 8))
  %t23 = icmp eq i8 %t22, 0
  br i1 %t23, label %block_0_4220a2, label %block_0_422099
block_0_422099:
  %t24 = phi i64 [ %t14, %block_0_42208e ], [ %t15, %block_0_422094 ]
  %t25 = phi i64 [ %t10, %block_0_42208e ], [ %t16, %block_0_422094 ]
  %t26 = phi i64 [ %t11, %block_0_42208e ], [ %t17, %block_0_422094 ]
  %t27 = phi i64 [ %t12, %block_0_42208e ], [ %t18, %block_0_422094 ]
  %t28 = phi i64 [ %t10, %block_0_42208e ], [ %t19, %block_0_422094 ]
  %t29 = phi i512 [ %t13, %block_0_42208e ], [ %t20, %block_0_422094 ]
  ; r28 := (bv_add r26 (0x1 : bv 64))
  %t30 = add i64 %t28, 1
  ; r29 := (eq r28 r22)
  %t31 = icmp eq i64 %t30, %t24
  br i1 %t31, label %block_0_4220a2, label %block_0_422094
block_0_4220a2:
  %t32 = phi i64 [ %t16, %block_0_422094 ], [ %t25, %block_0_422099 ]
  %t33 = phi i64 [ %t17, %block_0_422094 ], [ %t26, %block_0_422099 ]
  %t34 = phi i64 [ %t18, %block_0_422094 ], [ %t27, %block_0_422099 ]
  %t35 = phi i64 [ %t19, %block_0_422094 ], [ %t30, %block_0_422099 ]
  %t36 = phi i512 [ %t20, %block_0_422094 ], [ %t29, %block_0_422099 ]
  ; r35 := (bv_sub r33 r30)
  %t37 = sub i64 %t35, %t32
  br label %block_0_4220a8
block_0_4220a8:
  %t38 = phi i64 [ %t33, %block_0_4220a2 ], [ %t127, %block_0_4220f4 ]
  %t39 = phi i64 [ %t37, %block_0_4220a2 ], [ 0, %block_0_4220f4 ]
  %t40 = phi i64 [ %t34, %block_0_4220a2 ], [ %t128, %block_0_4220f4 ]
  %t41 = phi i64 [ %t35, %block_0_4220a2 ], [ %t126, %block_0_4220f4 ]
  %t42 = phi i512 [ %t36, %block_0_4220a2 ], [ %t129, %block_0_4220f4 ]
  ; r41 := (bv_sub r36 r37)
  %t43 = sub i64 %t38, %t39
  ; r42 := (eq r36 r37)
  %t44 = icmp eq i64 %t38, %t39
  br i1 %t44, label %block_0_4220e6, label %block_0_4220b0
block_0_4220b0:
  %t45 = phi i64 [ %t43, %block_0_4220a8 ]
  %t46 = phi i64 [ %t39, %block_0_4220a8 ]
  %t47 = phi i64 [ %t40, %block_0_4220a8 ]
  %t48 = phi i64 [ %t41, %block_0_4220a8 ]
  %t49 = phi i512 [ %t42, %block_0_4220a8 ]
  ; r48 := (read r45 (bv 8))
  %t50 = inttoptr i64 %t47 to i8*
  %t51 = load i8, i8* %t50
  ; r49 := (uext r48 64)
  %t52 = zext i8 %t51 to i64
  ; r50 := (eq r48 (0x0 : bv 8))
  %t53 = icmp eq i8 %t51, 0
  br i1 %t53, label %block_0_4220de, label %block_0_4220b9
block_0_4220b9:
  %t54 = phi i64 [ %t45, %block_0_4220b0 ]
  %t55 = phi i64 [ %t52, %block_0_4220b0 ]
  %t56 = phi i64 [ %t46, %block_0_4220b0 ]
  %t57 = phi i64 [ %t47, %block_0_4220b0 ]
  %t58 = phi i64 [ %t48, %block_0_4220b0 ]
  %t59 = phi i512 [ %t49, %block_0_4220b0 ]
  br label %block_0_4220c0
block_0_4220c0:
  %t60 = phi i64 [ %t57, %block_0_4220b9 ], [ %t85, %block_0_4220d0 ]
  %t61 = phi i64 [ %t54, %block_0_4220b9 ], [ %t80, %block_0_4220d0 ]
  %t62 = phi i64 [ %t55, %block_0_4220b9 ], [ %t88, %block_0_4220d0 ]
  %t63 = phi i64 [ %t56, %block_0_4220b9 ], [ %t81, %block_0_4220d0 ]
  %t64 = phi i64 [ %t57, %block_0_4220b9 ], [ %t82, %block_0_4220d0 ]
  %t65 = phi i64 [ %t58, %block_0_4220b9 ], [ %t83, %block_0_4220d0 ]
  %t66 = phi i512 [ %t59, %block_0_4220b9 ], [ %t84, %block_0_4220d0 ]
  ; r64 := (eq r58 (0x1 : bv 64))
  %t67 = icmp eq i64 %t61, 1
  br i1 %t67, label %block_0_4220d0, label %block_0_4220c6
block_0_4220c6:
  %t68 = phi i64 [ %t60, %block_0_4220c0 ]
  %t69 = phi i64 [ %t61, %block_0_4220c0 ]
  %t70 = phi i64 [ %t62, %block_0_4220c0 ]
  %t71 = phi i64 [ %t63, %block_0_4220c0 ]
  %t72 = phi i64 [ %t64, %block_0_4220c0 ]
  %t73 = phi i64 [ %t65, %block_0_4220c0 ]
  %t74 = phi i512 [ %t66, %block_0_4220c0 ]
  ; r72 := (trunc r67 8)
  %t75 = trunc i64 %t70 to i8
  ; write r70 r72
  %t76 = inttoptr i64 %t73 to i8*
  store i8 %t75, i8* %t76
  ; r73 := (bv_add r66 (0xffffffffffffffff : bv 64))
  %t77 = add i64 %t69, 18446744073709551615
  ; r74 := (bv_add r70 (0x1 : bv 64))
  %t78 = add i64 %t73, 1
  br label %block_0_4220d0
block_0_4220d0:
  %t79 = phi i64 [ %t60, %block_0_4220c0 ], [ %t68, %block_0_4220c6 ]
  %t80 = phi i64 [ %t61, %block_0_4220c0 ], [ %t77, %block_0_4220c6 ]
  %t81 = phi i64 [ %t63, %block_0_4220c0 ], [ %t71, %block_0_4220c6 ]
  %t82 = phi i64 [ %t64, %block_0_4220c0 ], [ %t72, %block_0_4220c6 ]
  %t83 = phi i64 [ %t65, %block_0_4220c0 ], [ %t78, %block_0_4220c6 ]
  %t84 = phi i512 [ %t66, %block_0_4220c0 ], [ %t74, %block_0_4220c6 ]
  ; r81 := (bv_add r75 (0x1 : bv 64))
  %t85 = add i64 %t79, 1
  ; r82 := (read r81 (bv 8))
  %t86 = inttoptr i64 %t85 to i8*
  %t87 = load i8, i8* %t86
  ; r83 := (uext r82 64)
  %t88 = zext i8 %t87 to i64
  ; r84 := (eq r82 (0x0 : bv 8))
  %t89 = icmp eq i8 %t87, 0
  br i1 %t89, label %block_0_4220db, label %block_0_4220c0
block_0_4220db:
  %t90 = phi i64 [ %t85, %block_0_4220d0 ]
  %t91 = phi i64 [ %t88, %block_0_4220d0 ]
  %t92 = phi i64 [ %t81, %block_0_4220d0 ]
  %t93 = phi i64 [ %t82, %block_0_4220d0 ]
  %t94 = phi i64 [ %t83, %block_0_4220d0 ]
  %t95 = phi i512 [ %t84, %block_0_4220d0 ]
  ; r91 := (bv_sub r85 r88)
  %t96 = sub i64 %t90, %t93
  br label %block_0_4220de
block_0_4220de:
  %t97 = phi i64 [ 0, %block_0_4220b0 ], [ %t96, %block_0_4220db ]
  %t98 = phi i64 [ %t52, %block_0_4220b0 ], [ %t91, %block_0_4220db ]
  %t99 = phi i64 [ %t46, %block_0_4220b0 ], [ %t92, %block_0_4220db ]
  %t100 = phi i64 [ %t48, %block_0_4220b0 ], [ %t94, %block_0_4220db ]
  %t101 = phi i512 [ %t49, %block_0_4220b0 ], [ %t95, %block_0_4220db ]
  ; r97 := (bv_add r92 r94)
  %t102 = add i64 %t97, %t99
  ; write r95 (0x0 : bv 8)
  %t103 = inttoptr i64 %t100 to i8*
  store i8 0, i8* %t103
  ; r98 := (bitcast r96 (vec 8 double))
  %t104 = bitcast i512 %t101 to <8 x double>
  ; r99 := (tuple r97 r93 r98)
  %t105 = insertvalue { i64, i64, <8 x double> } undef, i64 %t102, 0
  %t106 = insertvalue { i64, i64, <8 x double> } %t105, i64 %t98, 1
  %t107 = insertvalue { i64, i64, <8 x double> } %t106, <8 x double> %t104, 2
  ret { i64, i64, <8 x double> } %t107
block_0_4220e6:
  %t108 = phi i64 [ %t39, %block_0_4220a8 ]
  %t109 = phi i64 [ %t40, %block_0_4220a8 ]
  %t110 = phi i512 [ %t42, %block_0_4220a8 ]
  ; r103 := (bitcast r102 (vec 8 double))
  %t111 = bitcast i512 %t110 to <8 x double>
  ; r104 := call strlen(r101, r103)
  %t112 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t109, <8 x double> %t111)
  ; r105 := (tuple_field r104 0)
  %t113 = extractvalue { i64, i64, <8 x double> } %t112, 0
  ; r106 := (tuple_field r104 1)
  %t114 = extractvalue { i64, i64, <8 x double> } %t112, 1
  ; r107 := (tuple_field r104 2)
  %t115 = extractvalue { i64, i64, <8 x double> } %t112, 2
  ; r108 := (bitcast r107 (bv 512))
  %t116 = bitcast <8 x double> %t115 to i512
  br label %block_0_4220ee
block_0_4220ee:
  %t117 = phi i64 [ %t113, %block_0_4220e6 ]
  %t118 = phi i64 [ %t114, %block_0_4220e6 ]
  %t119 = phi i64 [ %t108, %block_0_4220e6 ]
  %t120 = phi i512 [ %t116, %block_0_4220e6 ]
  ; r113 := (bv_add r111 r109)
  %t121 = add i64 %t119, %t117
  ; r114 := (bitcast r112 (vec 8 double))
  %t122 = bitcast i512 %t120 to <8 x double>
  ; r115 := (tuple r113 r110 r114)
  %t123 = insertvalue { i64, i64, <8 x double> } undef, i64 %t121, 0
  %t124 = insertvalue { i64, i64, <8 x double> } %t123, i64 %t118, 1
  %t125 = insertvalue { i64, i64, <8 x double> } %t124, <8 x double> %t122, 2
  ret { i64, i64, <8 x double> } %t125
block_0_4220f4:
  %t126 = phi i64 [ %arg0, %block_0_422080 ], [ %t3, %block_0_422089 ]
  %t127 = phi i64 [ %arg2, %block_0_422080 ], [ %t4, %block_0_422089 ]
  %t128 = phi i64 [ %arg1, %block_0_422080 ], [ %t5, %block_0_422089 ]
  %t129 = phi i512 [ %t1, %block_0_422080 ], [ %t6, %block_0_422089 ]
  br label %block_0_4220a8
}
define { i64, i64, <8 x double> } @_ftello(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_422790:
  ; r0 := (bv_add arg0 (0x48 : bv 64))
  %t0 = add i64 %arg0, 72
  ; r1 := (read r0 (bv 64))
  %t1 = inttoptr i64 %t0 to i64*
  %t2 = load i64, i64* %t1
  ; r2 := (eq r1 (0x0 : bv 64))
  %t3 = icmp eq i64 %t2, 0
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r4 := (bitcast arg3 (bv 512))
  %t5 = bitcast <8 x double> %arg3 to i512
  br i1 %t3, label %block_0_422846, label %block_0_4227a7
block_0_4227a7:
  %t6 = phi i64 [ %arg0, %block_0_422790 ]
  %t7 = phi i64 [ %arg1, %block_0_422790 ]
  %t8 = phi i512 [ %t5, %block_0_422790 ]
  ; r8 := (bv_add r5 (0x10 : bv 64))
  %t9 = add i64 %t6, 16
  ; r9 := (read r8 (bv 16))
  %t10 = inttoptr i64 %t9 to i16*
  %t11 = load i16, i16* %t10
  ; r10 := (uext r9 64)
  %t12 = zext i16 %t11 to i64
  ; r11 := (sext r9 32)
  %t13 = sext i16 %t11 to i32
  ; r12 := (uext r11 64)
  %t14 = zext i32 %t13 to i64
  ; r13 := (bv_shr r12 (0x8 : bv 64))
  %t15 = lshr i64 %t14, 8
  ; r14 := (trunc r13 8)
  %t16 = trunc i64 %t15 to i8
  ; r15 := (bv_and r14 (0x10 : bv 8))
  %t17 = and i8 %t16, 16
  ; r16 := (eq r15 (0x0 : bv 8))
  %t18 = icmp eq i8 %t17, 0
  br i1 %t18, label %block_0_422820, label %block_0_4227b3
block_0_4227b3:
  %t19 = phi i64 [ %t14, %block_0_4227a7 ]
  %t20 = phi i64 [ %t12, %block_0_4227a7 ]
  %t21 = phi i64 [ %t6, %block_0_4227a7 ]
  %t22 = phi i64 [ %t7, %block_0_4227a7 ]
  %t23 = phi i512 [ %t8, %block_0_4227a7 ]
  ; r22 := (bv_add r19 (0x90 : bv 64))
  %t24 = add i64 %t21, 144
  ; r23 := (read r22 (bv 64))
  %t25 = inttoptr i64 %t24 to i64*
  %t26 = load i64, i64* %t25
  br label %block_0_4227ba
block_0_4227ba:
  %t27 = phi i64 [ %t19, %block_0_4227b3 ], [ %t164, %block_0_42283a ]
  %t28 = phi i64 [ %t20, %block_0_4227b3 ], [ %t162, %block_0_42283a ]
  %t29 = phi i64 [ %t26, %block_0_4227b3 ], [ %t153, %block_0_42283a ]
  %t30 = phi i64 [ %t21, %block_0_4227b3 ], [ %t154, %block_0_42283a ]
  %t31 = phi i64 [ %t22, %block_0_4227b3 ], [ %t155, %block_0_42283a ]
  %t32 = phi i64 [ %t22, %block_0_4227b3 ], [ %t156, %block_0_42283a ]
  %t33 = phi i64 [ %t21, %block_0_4227b3 ], [ %t157, %block_0_42283a ]
  %t34 = phi i512 [ %t23, %block_0_4227b3 ], [ %t158, %block_0_42283a ]
  ; r32 := (trunc r24 8)
  %t35 = trunc i64 %t27 to i8
  ; r33 := (bv_and r32 (0x4 : bv 8))
  %t36 = and i8 %t35, 4
  ; r34 := (eq r33 (0x0 : bv 8))
  %t37 = icmp eq i8 %t36, 0
  br i1 %t37, label %block_0_4227f1, label %block_0_4227be
block_0_4227be:
  %t38 = phi i64 [ %t28, %block_0_4227ba ]
  %t39 = phi i64 [ %t29, %block_0_4227ba ]
  %t40 = phi i64 [ %t30, %block_0_4227ba ]
  %t41 = phi i64 [ %t31, %block_0_4227ba ]
  %t42 = phi i64 [ %t33, %block_0_4227ba ]
  %t43 = phi i512 [ %t34, %block_0_4227ba ]
  ; r41 := (bv_add r37 (0x58 : bv 64))
  %t44 = add i64 %t40, 88
  ; r42 := (read r41 (bv 64))
  %t45 = inttoptr i64 %t44 to i64*
  %t46 = load i64, i64* %t45
  ; r43 := (eq r42 (0x0 : bv 64))
  %t47 = icmp eq i64 %t46, 0
  br i1 %t47, label %block_0_422858, label %block_0_4227cb
block_0_4227cb:
  %t48 = phi i64 [ %t38, %block_0_4227be ]
  %t49 = phi i64 [ %t39, %block_0_4227be ]
  %t50 = phi i64 [ %t40, %block_0_4227be ]
  %t51 = phi i64 [ %t41, %block_0_4227be ]
  %t52 = phi i64 [ %t46, %block_0_4227be ]
  %t53 = phi i64 [ %t42, %block_0_4227be ]
  %t54 = phi i512 [ %t43, %block_0_4227be ]
  ; r51 := (bv_add r46 (0x70 : bv 64))
  %t55 = add i64 %t50, 112
  ; r52 := (read r51 (bv 32))
  %t56 = inttoptr i64 %t55 to i32*
  %t57 = load i32, i32* %t56
  ; r53 := (sext r52 64)
  %t58 = sext i32 %t57 to i64
  br label %block_0_4227cf
block_0_4227cf:
  %t59 = phi i64 [ %t58, %block_0_4227cb ], [ %t189, %block_0_422858 ]
  %t60 = phi i64 [ %t48, %block_0_4227cb ], [ %t179, %block_0_422858 ]
  %t61 = phi i64 [ %t49, %block_0_4227cb ], [ %t180, %block_0_422858 ]
  %t62 = phi i64 [ %t50, %block_0_4227cb ], [ %t181, %block_0_422858 ]
  %t63 = phi i64 [ %t51, %block_0_4227cb ], [ %t182, %block_0_422858 ]
  %t64 = phi i64 [ %t52, %block_0_4227cb ], [ %t183, %block_0_422858 ]
  %t65 = phi i64 [ %t53, %block_0_4227cb ], [ %t184, %block_0_422858 ]
  %t66 = phi i512 [ %t54, %block_0_4227cb ], [ %t185, %block_0_422858 ]
  ; r62 := (bv_sub r56 r54)
  %t67 = sub i64 %t61, %t59
  ; r63 := (bv_slt r62 (0x0 : bv 64))
  %t68 = icmp slt i64 %t67, 0
  br i1 %t68, label %block_0_422876, label %block_0_4227d8
block_0_4227d8:
  %t69 = phi i64 [ %t67, %block_0_4227cf ]
  %t70 = phi i64 [ %t62, %block_0_4227cf ]
  %t71 = phi i64 [ %t63, %block_0_4227cf ]
  %t72 = phi i64 [ %t64, %block_0_4227cf ]
  %t73 = phi i512 [ %t66, %block_0_4227cf ]
  ; r69 := (eq r67 (0x0 : bv 64))
  %t74 = icmp eq i64 %t72, 0
  br i1 %t74, label %block_0_4227e4, label %block_0_4227dd
block_0_4227dd:
  %t75 = phi i64 [ %t69, %block_0_4227d8 ]
  %t76 = phi i64 [ %t70, %block_0_4227d8 ]
  %t77 = phi i64 [ %t71, %block_0_4227d8 ]
  %t78 = phi i512 [ %t73, %block_0_4227d8 ]
  ; r74 := (bv_add r71 (0x8 : bv 64))
  %t79 = add i64 %t76, 8
  ; r75 := (read r74 (bv 32))
  %t80 = inttoptr i64 %t79 to i32*
  %t81 = load i32, i32* %t80
  ; r76 := (sext r75 64)
  %t82 = sext i32 %t81 to i64
  ; r77 := (bv_sub r70 r76)
  %t83 = sub i64 %t75, %t82
  br label %block_0_4227e4
block_0_4227e4:
  %t84 = phi i64 [ %t69, %block_0_4227d8 ], [ %t83, %block_0_4227dd ], [ %t96, %block_0_4227f1 ], [ %t105, %block_0_4227f5 ], [ %t134, %block_0_422816 ]
  %t85 = phi i64 [ %t71, %block_0_4227d8 ], [ %t77, %block_0_4227dd ], [ %t98, %block_0_4227f1 ], [ %t107, %block_0_4227f5 ], [ %t132, %block_0_422816 ]
  %t86 = phi i512 [ %t73, %block_0_4227d8 ], [ %t78, %block_0_4227dd ], [ %t101, %block_0_4227f1 ], [ %t110, %block_0_4227f5 ], [ %t133, %block_0_422816 ]
  ; write r79 r78
  %t87 = inttoptr i64 %t85 to i64*
  store i64 %t84, i64* %t87
  br label %block_0_4227ea
block_0_4227ea:
  %t88 = phi i64 [ 0, %block_0_4227e4 ], [ 1, %block_0_42282c ], [ 1, %block_0_42284b ], [ 1, %block_0_422866 ], [ 1, %block_0_422882 ]
  %t89 = phi i64 [ %t84, %block_0_4227e4 ], [ %t146, %block_0_42282c ], [ %t176, %block_0_42284b ], [ %t201, %block_0_422866 ], [ %t221, %block_0_422882 ]
  %t90 = phi i512 [ %t86, %block_0_4227e4 ], [ %t151, %block_0_42282c ], [ %t177, %block_0_42284b ], [ %t202, %block_0_422866 ], [ %t222, %block_0_422882 ]
  ; r84 := (bitcast r83 (vec 8 double))
  %t91 = bitcast i512 %t90 to <8 x double>
  ; r85 := (tuple r81 r82 r84)
  %t92 = insertvalue { i64, i64, <8 x double> } undef, i64 %t88, 0
  %t93 = insertvalue { i64, i64, <8 x double> } %t92, i64 %t89, 1
  %t94 = insertvalue { i64, i64, <8 x double> } %t93, <8 x double> %t91, 2
  ret { i64, i64, <8 x double> } %t94
block_0_4227f1:
  %t95 = phi i64 [ %t27, %block_0_4227ba ]
  %t96 = phi i64 [ %t29, %block_0_4227ba ]
  %t97 = phi i64 [ %t30, %block_0_4227ba ]
  %t98 = phi i64 [ %t31, %block_0_4227ba ]
  %t99 = phi i64 [ %t32, %block_0_4227ba ]
  %t100 = phi i64 [ %t33, %block_0_4227ba ]
  %t101 = phi i512 [ %t34, %block_0_4227ba ]
  ; r93 := (trunc r86 8)
  %t102 = trunc i64 %t95 to i8
  ; r94 := (bv_and r93 (0x8 : bv 8))
  %t103 = and i8 %t102, 8
  ; r95 := (eq r94 (0x0 : bv 8))
  %t104 = icmp eq i8 %t103, 0
  br i1 %t104, label %block_0_4227e4, label %block_0_4227f5
block_0_4227f5:
  %t105 = phi i64 [ %t96, %block_0_4227f1 ]
  %t106 = phi i64 [ %t97, %block_0_4227f1 ]
  %t107 = phi i64 [ %t98, %block_0_4227f1 ]
  %t108 = phi i64 [ %t99, %block_0_4227f1 ]
  %t109 = phi i64 [ %t100, %block_0_4227f1 ]
  %t110 = phi i512 [ %t101, %block_0_4227f1 ]
  ; r102 := (read r97 (bv 64))
  %t111 = inttoptr i64 %t106 to i64*
  %t112 = load i64, i64* %t111
  ; r103 := (eq r102 (0x0 : bv 64))
  %t113 = icmp eq i64 %t112, 0
  br i1 %t113, label %block_0_4227e4, label %block_0_4227fd
block_0_4227fd:
  %t114 = phi i64 [ %t112, %block_0_4227f5 ]
  %t115 = phi i64 [ %t105, %block_0_4227f5 ]
  %t116 = phi i64 [ %t106, %block_0_4227f5 ]
  %t117 = phi i64 [ %t107, %block_0_4227f5 ]
  %t118 = phi i64 [ %t108, %block_0_4227f5 ]
  %t119 = phi i64 [ %t109, %block_0_4227f5 ]
  %t120 = phi i512 [ %t110, %block_0_4227f5 ]
  ; r111 := (bv_add r106 (0x18 : bv 64))
  %t121 = add i64 %t116, 24
  ; r112 := (read r111 (bv 64))
  %t122 = inttoptr i64 %t121 to i64*
  %t123 = load i64, i64* %t122
  ; r113 := (bv_sub r104 r112)
  %t124 = sub i64 %t114, %t123
  ; r114 := (bv_sub (0x7fffffffffffffff : bv 64) r113)
  %t125 = sub i64 9223372036854775807, %t124
  ; r115 := (eq r105 r114)
  %t126 = icmp eq i64 %t115, %t125
  ; r116 := (bv_ule r114 r105)
  %t127 = icmp ule i64 %t125, %t115
  ; r117 := (not r115)
  %t128 = icmp eq i1 %t126, 0
  ; r118 := (and r116 r117)
  %t129 = and i1 %t127, %t128
  br i1 %t129, label %block_0_422861, label %block_0_422816
block_0_422816:
  %t130 = phi i64 [ %t124, %block_0_4227fd ]
  %t131 = phi i64 [ %t115, %block_0_4227fd ]
  %t132 = phi i64 [ %t117, %block_0_4227fd ]
  %t133 = phi i512 [ %t120, %block_0_4227fd ]
  ; r123 := (bv_add r120 r119)
  %t134 = add i64 %t131, %t130
  br label %block_0_4227e4
block_0_422820:
  %t135 = phi i64 [ %t6, %block_0_4227a7 ]
  %t136 = phi i64 [ %t7, %block_0_4227a7 ]
  %t137 = phi i64 [ %t7, %block_0_4227a7 ]
  %t138 = phi i64 [ %t6, %block_0_4227a7 ]
  %t139 = phi i512 [ %t8, %block_0_4227a7 ]
  ; r129 := (bitcast r128 (vec 8 double))
  %t140 = bitcast i512 %t139 to <8 x double>
  ; r130 := call _sseek(r127, (0x0 : bv 64), (0x1 : bv 64), r129)
  %t141 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @_sseek(i64 %t138, i64 0, i64 1, <8 x double> %t140)
  ; r131 := (tuple_field r130 0)
  %t142 = extractvalue { i64, i64, <8 x double> } %t141, 0
  ; r132 := (tuple_field r130 1)
  %t143 = extractvalue { i64, i64, <8 x double> } %t141, 1
  ; r133 := (tuple_field r130 2)
  %t144 = extractvalue { i64, i64, <8 x double> } %t141, 2
  ; r134 := (bitcast r133 (bv 512))
  %t145 = bitcast <8 x double> %t144 to i512
  br label %block_0_42282c
block_0_42282c:
  %t146 = phi i64 [ %t142, %block_0_422820 ]
  %t147 = phi i64 [ %t135, %block_0_422820 ]
  %t148 = phi i64 [ %t136, %block_0_422820 ]
  %t149 = phi i64 [ %t137, %block_0_422820 ]
  %t150 = phi i64 [ %t138, %block_0_422820 ]
  %t151 = phi i512 [ %t145, %block_0_422820 ]
  ; r141 := (eq r135 (0xffffffffffffffff : bv 64))
  %t152 = icmp eq i64 %t146, 18446744073709551615
  br i1 %t152, label %block_0_4227ea, label %block_0_42283a
block_0_42283a:
  %t153 = phi i64 [ %t146, %block_0_42282c ]
  %t154 = phi i64 [ %t147, %block_0_42282c ]
  %t155 = phi i64 [ %t148, %block_0_42282c ]
  %t156 = phi i64 [ %t149, %block_0_42282c ]
  %t157 = phi i64 [ %t150, %block_0_42282c ]
  %t158 = phi i512 [ %t151, %block_0_42282c ]
  ; r148 := (bv_add r143 (0x10 : bv 64))
  %t159 = add i64 %t154, 16
  ; r149 := (read r148 (bv 16))
  %t160 = inttoptr i64 %t159 to i16*
  %t161 = load i16, i16* %t160
  ; r150 := (uext r149 64)
  %t162 = zext i16 %t161 to i64
  ; r151 := (sext r149 32)
  %t163 = sext i16 %t161 to i32
  ; r152 := (uext r151 64)
  %t164 = zext i32 %t163 to i64
  br label %block_0_4227ba
block_0_422846:
  %t165 = phi i64 [ %arg2, %block_0_422790 ]
  %t166 = phi i64 [ %arg0, %block_0_422790 ]
  %t167 = phi i64 [ %arg1, %block_0_422790 ]
  %t168 = phi i512 [ %t4, %block_0_422790 ]
  ; r157 := (bitcast r156 (vec 8 double))
  %t169 = bitcast i512 %t168 to <8 x double>
  ; r158 := call __error_unthreaded(r154, r155, r153, r157)
  %t170 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t166, i64 %t167, i64 %t165, <8 x double> %t169)
  ; r159 := (tuple_field r158 0)
  %t171 = extractvalue { i64, i64, <8 x double> } %t170, 0
  ; r160 := (tuple_field r158 1)
  %t172 = extractvalue { i64, i64, <8 x double> } %t170, 1
  ; r161 := (tuple_field r158 2)
  %t173 = extractvalue { i64, i64, <8 x double> } %t170, 2
  ; r162 := (bitcast r161 (bv 512))
  %t174 = bitcast <8 x double> %t173 to i512
  br label %block_0_42284b
block_0_42284b:
  %t175 = phi i64 [ %t171, %block_0_422846 ]
  %t176 = phi i64 [ %t172, %block_0_422846 ]
  %t177 = phi i512 [ %t174, %block_0_422846 ]
  ; write r163 (0x1d : bv 32)
  %t178 = inttoptr i64 %t175 to i32*
  store i32 29, i32* %t178
  br label %block_0_4227ea
block_0_422858:
  %t179 = phi i64 [ %t38, %block_0_4227be ]
  %t180 = phi i64 [ %t39, %block_0_4227be ]
  %t181 = phi i64 [ %t40, %block_0_4227be ]
  %t182 = phi i64 [ %t41, %block_0_4227be ]
  %t183 = phi i64 [ %t46, %block_0_4227be ]
  %t184 = phi i64 [ %t42, %block_0_4227be ]
  %t185 = phi i512 [ %t43, %block_0_4227be ]
  ; r173 := (bv_add r168 (0x8 : bv 64))
  %t186 = add i64 %t181, 8
  ; r174 := (read r173 (bv 32))
  %t187 = inttoptr i64 %t186 to i32*
  %t188 = load i32, i32* %t187
  ; r175 := (sext r174 64)
  %t189 = sext i32 %t188 to i64
  br label %block_0_4227cf
block_0_422861:
  %t190 = phi i64 [ %t115, %block_0_4227fd ]
  %t191 = phi i64 [ %t118, %block_0_4227fd ]
  %t192 = phi i64 [ %t119, %block_0_4227fd ]
  %t193 = phi i512 [ %t120, %block_0_4227fd ]
  ; r180 := (bitcast r179 (vec 8 double))
  %t194 = bitcast i512 %t193 to <8 x double>
  ; r181 := call __error_unthreaded(r178, r177, r176, r180)
  %t195 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t192, i64 %t191, i64 %t190, <8 x double> %t194)
  ; r182 := (tuple_field r181 0)
  %t196 = extractvalue { i64, i64, <8 x double> } %t195, 0
  ; r183 := (tuple_field r181 1)
  %t197 = extractvalue { i64, i64, <8 x double> } %t195, 1
  ; r184 := (tuple_field r181 2)
  %t198 = extractvalue { i64, i64, <8 x double> } %t195, 2
  ; r185 := (bitcast r184 (bv 512))
  %t199 = bitcast <8 x double> %t198 to i512
  br label %block_0_422866
block_0_422866:
  %t200 = phi i64 [ %t196, %block_0_422861 ]
  %t201 = phi i64 [ %t197, %block_0_422861 ]
  %t202 = phi i512 [ %t199, %block_0_422861 ]
  ; write r186 (0x54 : bv 32)
  %t203 = inttoptr i64 %t200 to i32*
  store i32 84, i32* %t203
  br label %block_0_4227ea
block_0_422876:
  %t204 = phi i64 [ %t60, %block_0_4227cf ]
  %t205 = phi i64 [ %t67, %block_0_4227cf ]
  %t206 = phi i64 [ %t62, %block_0_4227cf ]
  %t207 = phi i64 [ %t64, %block_0_4227cf ]
  %t208 = phi i64 [ %t65, %block_0_4227cf ]
  %t209 = phi i512 [ %t66, %block_0_4227cf ]
  ; r195 := (trunc r189 16)
  %t210 = trunc i64 %t204 to i16
  ; r196 := (bv_or r195 (0x40 : bv 16))
  %t211 = or i16 %t210, 64
  ; r197 := (bv_add r191 (0x10 : bv 64))
  %t212 = add i64 %t206, 16
  ; write r197 r196
  %t213 = inttoptr i64 %t212 to i16*
  store i16 %t211, i16* %t213
  ; r198 := (bitcast r194 (vec 8 double))
  %t214 = bitcast i512 %t209 to <8 x double>
  ; r199 := call __error_unthreaded(r193, r192, r190, r198)
  %t215 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t208, i64 %t207, i64 %t205, <8 x double> %t214)
  ; r200 := (tuple_field r199 0)
  %t216 = extractvalue { i64, i64, <8 x double> } %t215, 0
  ; r201 := (tuple_field r199 1)
  %t217 = extractvalue { i64, i64, <8 x double> } %t215, 1
  ; r202 := (tuple_field r199 2)
  %t218 = extractvalue { i64, i64, <8 x double> } %t215, 2
  ; r203 := (bitcast r202 (bv 512))
  %t219 = bitcast <8 x double> %t218 to i512
  br label %block_0_422882
block_0_422882:
  %t220 = phi i64 [ %t216, %block_0_422876 ]
  %t221 = phi i64 [ %t217, %block_0_422876 ]
  %t222 = phi i512 [ %t219, %block_0_422876 ]
  ; write r204 (0x5 : bv 32)
  %t223 = inttoptr i64 %t220 to i32*
  store i32 5, i32* %t223
  br label %block_0_4227ea
}
define void @ftell(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_422930:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  call void (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @ftello(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  ret void
}
define { i64, <8 x double> } @localeconv(<8 x double> %arg0) {
block_0_422990:
  ; r0 := (read (0x6333e4 : bv 64) (bv 32))
  %t0 = inttoptr i64 6501348 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (bitcast arg0 (bv 512))
  %t3 = bitcast <8 x double> %arg0 to i512
  ; r3 := (bitcast arg0 (bv 512))
  %t4 = bitcast <8 x double> %arg0 to i512
  br i1 %t2, label %block_0_42299e, label %block_0_4229e1
block_0_42299e:
  %t5 = phi i512 [ %t3, %block_0_422990 ], [ %t40, %block_0_4229e6 ]
  ; r5 := (read (0x6333e8 : bv 64) (bv 32))
  %t6 = inttoptr i64 6501352 to i32*
  %t7 = load i32, i32* %t6
  ; r6 := (eq r5 (0x0 : bv 32))
  %t8 = icmp eq i32 %t7, 0
  br i1 %t8, label %block_0_4229d7, label %block_0_4229a8
block_0_4229a8:
  %t9 = phi i512 [ %t5, %block_0_42299e ]
  ; r8 := (bitcast r7 (vec 8 double))
  %t10 = bitcast i512 %t9 to <8 x double>
  ; r9 := call __get_current_numeric_locale(r8)
  %t11 = call { i64, <8 x double> } (<8 x double>) @__get_current_numeric_locale(<8 x double> %t10)
  ; r10 := (tuple_field r9 0)
  %t12 = extractvalue { i64, <8 x double> } %t11, 0
  ; r11 := (tuple_field r9 1)
  %t13 = extractvalue { i64, <8 x double> } %t11, 1
  ; r12 := (bitcast r11 (bv 512))
  %t14 = bitcast <8 x double> %t13 to i512
  br label %block_0_4229ad
block_0_4229ad:
  %t15 = phi i64 [ %t12, %block_0_4229a8 ]
  %t16 = phi i512 [ %t14, %block_0_4229a8 ]
  ; r15 := (read r13 (bv 64))
  %t17 = inttoptr i64 %t15 to i64*
  %t18 = load i64, i64* %t17
  ; write (0x6333e8 : bv 64) (0x0 : bv 32)
  %t19 = inttoptr i64 6501352 to i32*
  store i32 0, i32* %t19
  ; write (0x641bc0 : bv 64) r15
  %t20 = inttoptr i64 6560704 to i64*
  store i64 %t18, i64* %t20
  ; r16 := (bv_add r13 (0x8 : bv 64))
  %t21 = add i64 %t15, 8
  ; r17 := (read r16 (bv 64))
  %t22 = inttoptr i64 %t21 to i64*
  %t23 = load i64, i64* %t22
  ; write (0x641bc8 : bv 64) r17
  %t24 = inttoptr i64 6560712 to i64*
  store i64 %t23, i64* %t24
  ; r18 := (bv_add r13 (0x10 : bv 64))
  %t25 = add i64 %t15, 16
  ; r19 := (read r18 (bv 64))
  %t26 = inttoptr i64 %t25 to i64*
  %t27 = load i64, i64* %t26
  ; write (0x641bd0 : bv 64) r19
  %t28 = inttoptr i64 6560720 to i64*
  store i64 %t27, i64* %t28
  br label %block_0_4229d7
block_0_4229d7:
  %t29 = phi i512 [ %t5, %block_0_42299e ], [ %t16, %block_0_4229ad ]
  ; r21 := (bitcast r20 (vec 8 double))
  %t30 = bitcast i512 %t29 to <8 x double>
  ; r22 := (tuple (0x641bc0 : bv 64) r21)
  %t31 = insertvalue { i64, <8 x double> } undef, i64 6560704, 0
  %t32 = insertvalue { i64, <8 x double> } %t31, <8 x double> %t30, 1
  ret { i64, <8 x double> } %t32
block_0_4229e1:
  %t33 = phi i512 [ %t4, %block_0_422990 ]
  ; r24 := (bitcast r23 (vec 8 double))
  %t34 = bitcast i512 %t33 to <8 x double>
  ; r25 := call __get_current_monetary_locale(r24)
  %t35 = call { i64, <8 x double> } (<8 x double>) @__get_current_monetary_locale(<8 x double> %t34)
  ; r26 := (tuple_field r25 0)
  %t36 = extractvalue { i64, <8 x double> } %t35, 0
  ; r27 := (tuple_field r25 1)
  %t37 = extractvalue { i64, <8 x double> } %t35, 1
  ; r28 := (bitcast r27 (bv 512))
  %t38 = bitcast <8 x double> %t37 to i512
  br label %block_0_4229e6
block_0_4229e6:
  %t39 = phi i64 [ %t36, %block_0_4229e1 ]
  %t40 = phi i512 [ %t38, %block_0_4229e1 ]
  ; r31 := (read r29 (bv 64))
  %t41 = inttoptr i64 %t39 to i64*
  %t42 = load i64, i64* %t41
  ; write (0x641bd8 : bv 64) r31
  %t43 = inttoptr i64 6560728 to i64*
  store i64 %t42, i64* %t43
  ; r32 := (bv_add r29 (0x8 : bv 64))
  %t44 = add i64 %t39, 8
  ; r33 := (read r32 (bv 64))
  %t45 = inttoptr i64 %t44 to i64*
  %t46 = load i64, i64* %t45
  ; write (0x641be0 : bv 64) r33
  %t47 = inttoptr i64 6560736 to i64*
  store i64 %t46, i64* %t47
  ; r34 := (bv_add r29 (0x10 : bv 64))
  %t48 = add i64 %t39, 16
  ; r35 := (read r34 (bv 64))
  %t49 = inttoptr i64 %t48 to i64*
  %t50 = load i64, i64* %t49
  ; write (0x641be8 : bv 64) r35
  %t51 = inttoptr i64 6560744 to i64*
  store i64 %t50, i64* %t51
  ; r36 := (bv_add r29 (0x18 : bv 64))
  %t52 = add i64 %t39, 24
  ; r37 := (read r36 (bv 64))
  %t53 = inttoptr i64 %t52 to i64*
  %t54 = load i64, i64* %t53
  ; write (0x641bf0 : bv 64) r37
  %t55 = inttoptr i64 6560752 to i64*
  store i64 %t54, i64* %t55
  ; r38 := (bv_add r29 (0x20 : bv 64))
  %t56 = add i64 %t39, 32
  ; r39 := (read r38 (bv 64))
  %t57 = inttoptr i64 %t56 to i64*
  %t58 = load i64, i64* %t57
  ; write (0x641bf8 : bv 64) r39
  %t59 = inttoptr i64 6560760 to i64*
  store i64 %t58, i64* %t59
  ; r40 := (bv_add r29 (0x28 : bv 64))
  %t60 = add i64 %t39, 40
  ; r41 := (read r40 (bv 64))
  %t61 = inttoptr i64 %t60 to i64*
  %t62 = load i64, i64* %t61
  ; write (0x641c00 : bv 64) r41
  %t63 = inttoptr i64 6560768 to i64*
  store i64 %t62, i64* %t63
  ; r42 := (bv_add r29 (0x30 : bv 64))
  %t64 = add i64 %t39, 48
  ; r43 := (read r42 (bv 64))
  %t65 = inttoptr i64 %t64 to i64*
  %t66 = load i64, i64* %t65
  ; write (0x641c08 : bv 64) r43
  %t67 = inttoptr i64 6560776 to i64*
  store i64 %t66, i64* %t67
  ; r44 := (bv_add r29 (0x38 : bv 64))
  %t68 = add i64 %t39, 56
  ; r45 := (read r44 (bv 64))
  %t69 = inttoptr i64 %t68 to i64*
  %t70 = load i64, i64* %t69
  ; r46 := (read r45 (bv 8))
  %t71 = inttoptr i64 %t70 to i8*
  %t72 = load i8, i8* %t71
  ; write (0x641c10 : bv 64) r46
  %t73 = inttoptr i64 6560784 to i8*
  store i8 %t72, i8* %t73
  ; r47 := (bv_add r29 (0x40 : bv 64))
  %t74 = add i64 %t39, 64
  ; r48 := (read r47 (bv 64))
  %t75 = inttoptr i64 %t74 to i64*
  %t76 = load i64, i64* %t75
  ; r49 := (read r48 (bv 8))
  %t77 = inttoptr i64 %t76 to i8*
  %t78 = load i8, i8* %t77
  ; write (0x641c11 : bv 64) r49
  %t79 = inttoptr i64 6560785 to i8*
  store i8 %t78, i8* %t79
  ; r50 := (bv_add r29 (0x48 : bv 64))
  %t80 = add i64 %t39, 72
  ; r51 := (read r50 (bv 64))
  %t81 = inttoptr i64 %t80 to i64*
  %t82 = load i64, i64* %t81
  ; r52 := (read r51 (bv 8))
  %t83 = inttoptr i64 %t82 to i8*
  %t84 = load i8, i8* %t83
  ; write (0x641c12 : bv 64) r52
  %t85 = inttoptr i64 6560786 to i8*
  store i8 %t84, i8* %t85
  ; r53 := (bv_add r29 (0x50 : bv 64))
  %t86 = add i64 %t39, 80
  ; r54 := (read r53 (bv 64))
  %t87 = inttoptr i64 %t86 to i64*
  %t88 = load i64, i64* %t87
  ; r55 := (read r54 (bv 8))
  %t89 = inttoptr i64 %t88 to i8*
  %t90 = load i8, i8* %t89
  ; write (0x641c13 : bv 64) r55
  %t91 = inttoptr i64 6560787 to i8*
  store i8 %t90, i8* %t91
  ; r56 := (bv_add r29 (0x58 : bv 64))
  %t92 = add i64 %t39, 88
  ; r57 := (read r56 (bv 64))
  %t93 = inttoptr i64 %t92 to i64*
  %t94 = load i64, i64* %t93
  ; r58 := (read r57 (bv 8))
  %t95 = inttoptr i64 %t94 to i8*
  %t96 = load i8, i8* %t95
  ; write (0x641c14 : bv 64) r58
  %t97 = inttoptr i64 6560788 to i8*
  store i8 %t96, i8* %t97
  ; r59 := (bv_add r29 (0x60 : bv 64))
  %t98 = add i64 %t39, 96
  ; r60 := (read r59 (bv 64))
  %t99 = inttoptr i64 %t98 to i64*
  %t100 = load i64, i64* %t99
  ; r61 := (read r60 (bv 8))
  %t101 = inttoptr i64 %t100 to i8*
  %t102 = load i8, i8* %t101
  ; write (0x641c15 : bv 64) r61
  %t103 = inttoptr i64 6560789 to i8*
  store i8 %t102, i8* %t103
  ; r62 := (bv_add r29 (0x68 : bv 64))
  %t104 = add i64 %t39, 104
  ; r63 := (read r62 (bv 64))
  %t105 = inttoptr i64 %t104 to i64*
  %t106 = load i64, i64* %t105
  ; r64 := (read r63 (bv 8))
  %t107 = inttoptr i64 %t106 to i8*
  %t108 = load i8, i8* %t107
  ; write (0x641c16 : bv 64) r64
  %t109 = inttoptr i64 6560790 to i8*
  store i8 %t108, i8* %t109
  ; r65 := (bv_add r29 (0x70 : bv 64))
  %t110 = add i64 %t39, 112
  ; r66 := (read r65 (bv 64))
  %t111 = inttoptr i64 %t110 to i64*
  %t112 = load i64, i64* %t111
  ; r67 := (read r66 (bv 8))
  %t113 = inttoptr i64 %t112 to i8*
  %t114 = load i8, i8* %t113
  ; write (0x641c17 : bv 64) r67
  %t115 = inttoptr i64 6560791 to i8*
  store i8 %t114, i8* %t115
  ; r68 := (bv_add r29 (0x78 : bv 64))
  %t116 = add i64 %t39, 120
  ; r69 := (read r68 (bv 64))
  %t117 = inttoptr i64 %t116 to i64*
  %t118 = load i64, i64* %t117
  ; r70 := (read r69 (bv 8))
  %t119 = inttoptr i64 %t118 to i8*
  %t120 = load i8, i8* %t119
  ; write (0x641c18 : bv 64) r70
  %t121 = inttoptr i64 6560792 to i8*
  store i8 %t120, i8* %t121
  ; r71 := (bv_add r29 (0x80 : bv 64))
  %t122 = add i64 %t39, 128
  ; r72 := (read r71 (bv 64))
  %t123 = inttoptr i64 %t122 to i64*
  %t124 = load i64, i64* %t123
  ; r73 := (read r72 (bv 8))
  %t125 = inttoptr i64 %t124 to i8*
  %t126 = load i8, i8* %t125
  ; write (0x641c19 : bv 64) r73
  %t127 = inttoptr i64 6560793 to i8*
  store i8 %t126, i8* %t127
  ; r74 := (bv_add r29 (0x88 : bv 64))
  %t128 = add i64 %t39, 136
  ; r75 := (read r74 (bv 64))
  %t129 = inttoptr i64 %t128 to i64*
  %t130 = load i64, i64* %t129
  ; r76 := (read r75 (bv 8))
  %t131 = inttoptr i64 %t130 to i8*
  %t132 = load i8, i8* %t131
  ; write (0x641c1a : bv 64) r76
  %t133 = inttoptr i64 6560794 to i8*
  store i8 %t132, i8* %t133
  ; r77 := (bv_add r29 (0x90 : bv 64))
  %t134 = add i64 %t39, 144
  ; r78 := (read r77 (bv 64))
  %t135 = inttoptr i64 %t134 to i64*
  %t136 = load i64, i64* %t135
  ; r79 := (read r78 (bv 8))
  %t137 = inttoptr i64 %t136 to i8*
  %t138 = load i8, i8* %t137
  ; write (0x641c1b : bv 64) r79
  %t139 = inttoptr i64 6560795 to i8*
  store i8 %t138, i8* %t139
  ; r80 := (bv_add r29 (0x98 : bv 64))
  %t140 = add i64 %t39, 152
  ; r81 := (read r80 (bv 64))
  %t141 = inttoptr i64 %t140 to i64*
  %t142 = load i64, i64* %t141
  ; r82 := (read r81 (bv 8))
  %t143 = inttoptr i64 %t142 to i8*
  %t144 = load i8, i8* %t143
  ; write (0x641c1c : bv 64) r82
  %t145 = inttoptr i64 6560796 to i8*
  store i8 %t144, i8* %t145
  ; r83 := (bv_add r29 (0xa0 : bv 64))
  %t146 = add i64 %t39, 160
  ; r84 := (read r83 (bv 64))
  %t147 = inttoptr i64 %t146 to i64*
  %t148 = load i64, i64* %t147
  ; r85 := (read r84 (bv 8))
  %t149 = inttoptr i64 %t148 to i8*
  %t150 = load i8, i8* %t149
  ; write (0x6333e4 : bv 64) (0x0 : bv 32)
  %t151 = inttoptr i64 6501348 to i32*
  store i32 0, i32* %t151
  ; write (0x641c1d : bv 64) r85
  %t152 = inttoptr i64 6560797 to i8*
  store i8 %t150, i8* %t152
  br label %block_0_42299e
}
define { i64, <8 x double> } @__get_current_numeric_locale(<8 x double> %arg0) {
block_0_422b10:
  ; r0 := (read (0x641c38 : bv 64) (bv 32))
  %t0 = inttoptr i64 6560824 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (mux r1 (0x42a200 : bv 64) (0x641c20 : bv 64))
  %t3 = select i1 %t2, i64 4366848, i64 6560800
  ; r3 := (bitcast arg0 (bv 512))
  %t4 = bitcast <8 x double> %arg0 to i512
  ; r4 := (bitcast r3 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r5 := (tuple r2 r4)
  %t6 = insertvalue { i64, <8 x double> } undef, i64 %t3, 0
  %t7 = insertvalue { i64, <8 x double> } %t6, <8 x double> %t5, 1
  ret { i64, <8 x double> } %t7
}
define { i64, <8 x double> } @__get_current_monetary_locale(<8 x double> %arg0) {
block_0_422bb0:
  ; r0 := (read (0x641d08 : bv 64) (bv 32))
  %t0 = inttoptr i64 6561032 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (eq r0 (0x0 : bv 32))
  %t2 = icmp eq i32 %t1, 0
  ; r2 := (mux r1 (0x42a220 : bv 64) (0x641c60 : bv 64))
  %t3 = select i1 %t2, i64 4366880, i64 6560864
  ; r3 := (bitcast arg0 (bv 512))
  %t4 = bitcast <8 x double> %arg0 to i512
  ; r4 := (bitcast r3 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r5 := (tuple r2 r4)
  %t6 = insertvalue { i64, <8 x double> } undef, i64 %t3, 0
  %t7 = insertvalue { i64, <8 x double> } %t6, <8 x double> %t5, 1
  ret { i64, <8 x double> } %t7
}
define { i64, <8 x double> } @cnv(i64 %arg0, <8 x double> %arg1) {
block_0_422bd0:
  ; r0 := (bitcast arg1 (bv 512))
  %t0 = bitcast <8 x double> %arg1 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := call strtol(arg0, (0x0 : bv 64), (0xa : bv 64), r1)
  %t2 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @strtol(i64 %arg0, i64 0, i64 10, <8 x double> %t1)
  ; r3 := (tuple_field r2 0)
  %t3 = extractvalue { i64, i64, <8 x double> } %t2, 0
  ; r4 := (tuple_field r2 1)
  %t4 = extractvalue { i64, i64, <8 x double> } %t2, 1
  ; r5 := (tuple_field r2 2)
  %t5 = extractvalue { i64, i64, <8 x double> } %t2, 2
  ; r6 := (bitcast r5 (bv 512))
  %t6 = bitcast <8 x double> %t5 to i512
  br label %block_0_422be0
block_0_422be0:
  %t7 = phi i64 [ %t3, %block_0_422bd0 ]
  %t8 = phi i512 [ %t6, %block_0_422bd0 ]
  ; r9 := (trunc r7 32)
  %t9 = trunc i64 %t7 to i32
  ; r10 := (trunc r7 8)
  %t10 = trunc i64 %t7 to i8
  ; r11 := (sext r10 32)
  %t11 = sext i8 %t10 to i32
  ; r12 := (eq r9 (0xffffffff : bv 32))
  %t12 = icmp eq i32 %t9, 4294967295
  ; r13 := (mux r12 (0x7f : bv 32) r11)
  %t13 = select i1 %t12, i32 127, i32 %t11
  ; r14 := (uext r13 64)
  %t14 = zext i32 %t13 to i64
  ; r15 := (bitcast r8 (vec 8 double))
  %t15 = bitcast i512 %t8 to <8 x double>
  ; r16 := (tuple r14 r15)
  %t16 = insertvalue { i64, <8 x double> } undef, i64 %t14, 0
  %t17 = insertvalue { i64, <8 x double> } %t16, <8 x double> %t15, 1
  ret { i64, <8 x double> } %t17
}
define { i64, <8 x double> } @__fix_locale_grouping_str(i64 %arg0, <8 x double> %arg1) {
block_0_4231c0:
  ; r0 := (eq arg0 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg0, 0
  ; r1 := (bitcast arg1 (bv 512))
  %t1 = bitcast <8 x double> %arg1 to i512
  ; r2 := (bitcast arg1 (bv 512))
  %t2 = bitcast <8 x double> %arg1 to i512
  br i1 %t0, label %block_0_423282, label %block_0_4231c9
block_0_4231c9:
  %t3 = phi i64 [ %arg0, %block_0_4231c0 ]
  %t4 = phi i512 [ %t2, %block_0_4231c0 ]
  ; r5 := (read r3 (bv 8))
  %t5 = inttoptr i64 %t3 to i8*
  %t6 = load i8, i8* %t5
  ; r6 := (uext r5 64)
  %t7 = zext i8 %t6 to i64
  ; r7 := (eq r5 (0x0 : bv 8))
  %t8 = icmp eq i8 %t6, 0
  br i1 %t8, label %block_0_423282, label %block_0_4231d4
block_0_4231d4:
  %t9 = phi i64 [ %t7, %block_0_4231c9 ]
  %t10 = phi i64 [ %t3, %block_0_4231c9 ]
  %t11 = phi i512 [ %t4, %block_0_4231c9 ]
  br label %block_0_423245
block_0_4231e0:
  %t12 = phi i64 [ %t117, %block_0_423249 ]
  %t13 = phi i64 [ %t118, %block_0_423249 ]
  %t14 = phi i64 [ %t119, %block_0_423249 ]
  %t15 = phi i64 [ %t120, %block_0_423249 ]
  %t16 = phi i512 [ %t121, %block_0_423249 ]
  ; r16 := (trunc r11 32)
  %t17 = trunc i64 %t12 to i32
  ; r17 := (uext r16 64)
  %t18 = zext i32 %t17 to i64
  ; r18 := (trunc r11 8)
  %t19 = trunc i64 %t12 to i8
  ; r19 := (uext r18 64)
  %t20 = zext i8 %t19 to i64
  ; r20 := (eq r18 (0x7f : bv 8))
  %t21 = icmp eq i8 %t19, 127
  ; r21 := (bv_ule (0x7f : bv 8) r18)
  %t22 = icmp ule i8 127, %t19
  ; r22 := (not r20)
  %t23 = icmp eq i1 %t21, 0
  ; r23 := (and r21 r22)
  %t24 = and i1 %t22, %t23
  br i1 %t24, label %block_0_423282, label %block_0_4231ee
block_0_4231ee:
  %t25 = phi i64 [ %t20, %block_0_4231e0 ], [ 45, %block_0_42324d ]
  %t26 = phi i64 [ %t18, %block_0_4231e0 ], [ 45, %block_0_42324d ]
  %t27 = phi i64 [ %t13, %block_0_4231e0 ], [ %t124, %block_0_42324d ]
  %t28 = phi i64 [ %t14, %block_0_4231e0 ], [ %t125, %block_0_42324d ]
  %t29 = phi i64 [ %t15, %block_0_4231e0 ], [ %t126, %block_0_42324d ]
  %t30 = phi i512 [ %t16, %block_0_4231e0 ], [ %t127, %block_0_42324d ]
  ; r30 := (trunc r24 32)
  %t31 = trunc i64 %t25 to i32
  ; r31 := (sext r30 64)
  %t32 = sext i32 %t31 to i64
  ; r32 := (bv_mul (0x8 : bv 64) r31)
  %t33 = mul i64 8, %t32
  ; r33 := (bv_add r32 (0x630221 : bv 64))
  %t34 = add i64 %t33, 6488609
  ; r34 := (read r33 (bv 8))
  %t35 = inttoptr i64 %t34 to i8*
  %t36 = load i8, i8* %t35
  ; r35 := (bv_and r34 (0x4 : bv 8))
  %t37 = and i8 %t36, 4
  ; r36 := (eq r35 (0x0 : bv 8))
  %t38 = icmp eq i8 %t37, 0
  br i1 %t38, label %block_0_423282, label %block_0_4231fe
block_0_4231fe:
  %t39 = phi i64 [ %t26, %block_0_4231ee ]
  %t40 = phi i64 [ %t27, %block_0_4231ee ]
  %t41 = phi i64 [ %t28, %block_0_4231ee ]
  %t42 = phi i64 [ %t29, %block_0_4231ee ]
  %t43 = phi i512 [ %t30, %block_0_4231ee ]
  ; r42 := (bv_add r38 (0x1 : bv 64))
  %t44 = add i64 %t40, 1
  ; r43 := (read r42 (bv 8))
  %t45 = inttoptr i64 %t44 to i8*
  %t46 = load i8, i8* %t45
  ; r44 := (uext r43 64)
  %t47 = zext i8 %t46 to i64
  ; r45 := (trunc r37 32)
  %t48 = trunc i64 %t39 to i32
  ; r46 := (bv_add r45 (0xffffffd0 : bv 32))
  %t49 = add i32 %t48, 4294967248
  ; r47 := (uext r46 64)
  %t50 = zext i32 %t49 to i64
  ; r48 := (eq r43 (0x7f : bv 8))
  %t51 = icmp eq i8 %t46, 127
  ; r49 := (bv_ule (0x7f : bv 8) r43)
  %t52 = icmp ule i8 127, %t46
  ; r50 := (not r48)
  %t53 = icmp eq i1 %t51, 0
  ; r51 := (and r49 r50)
  %t54 = and i1 %t52, %t53
  br i1 %t54, label %block_0_423230, label %block_0_423213
block_0_423213:
  %t55 = phi i64 [ %t47, %block_0_4231fe ]
  %t56 = phi i64 [ %t50, %block_0_4231fe ]
  %t57 = phi i64 [ %t40, %block_0_4231fe ]
  %t58 = phi i64 [ %t41, %block_0_4231fe ]
  %t59 = phi i64 [ %t42, %block_0_4231fe ]
  %t60 = phi i64 [ %t44, %block_0_4231fe ]
  %t61 = phi i512 [ %t43, %block_0_4231fe ]
  ; r59 := (trunc r52 32)
  %t62 = trunc i64 %t55 to i32
  ; r60 := (sext r59 64)
  %t63 = sext i32 %t62 to i64
  ; r61 := (bv_mul (0x8 : bv 64) r60)
  %t64 = mul i64 8, %t63
  ; r62 := (bv_add r61 (0x630221 : bv 64))
  %t65 = add i64 %t64, 6488609
  ; r63 := (read r62 (bv 8))
  %t66 = inttoptr i64 %t65 to i8*
  %t67 = load i8, i8* %t66
  ; r64 := (bv_and r63 (0x4 : bv 8))
  %t68 = and i8 %t67, 4
  ; r65 := (eq r64 (0x0 : bv 8))
  %t69 = icmp eq i8 %t68, 0
  br i1 %t69, label %block_0_423230, label %block_0_42321f
block_0_42321f:
  %t70 = phi i64 [ %t56, %block_0_423213 ]
  %t71 = phi i64 [ %t58, %block_0_423213 ]
  %t72 = phi i64 [ %t59, %block_0_423213 ]
  %t73 = phi i64 [ %t55, %block_0_423213 ]
  %t74 = phi i64 [ %t60, %block_0_423213 ]
  %t75 = phi i512 [ %t61, %block_0_423213 ]
  ; r72 := (trunc r66 8)
  %t76 = trunc i64 %t70 to i8
  ; r73 := (sext r72 32)
  %t77 = sext i8 %t76 to i32
  ; r74 := (uext r73 64)
  %t78 = zext i32 %t77 to i64
  ; r75 := (bv_mul (0x4 : bv 64) r74)
  %t79 = mul i64 4, %t78
  ; r76 := (bv_add r74 r75)
  %t80 = add i64 %t78, %t79
  ; r77 := (trunc r76 32)
  %t81 = trunc i64 %t80 to i32
  ; r78 := (uext r77 64)
  %t82 = zext i32 %t81 to i64
  ; r79 := (bv_mul (0x2 : bv 64) r78)
  %t83 = mul i64 2, %t82
  ; r80 := (bv_add r69 r79)
  %t84 = add i64 %t73, %t83
  ; r81 := (bv_add r80 (0xffffffffffffffd0 : bv 64))
  %t85 = add i64 %t84, 18446744073709551568
  ; r82 := (trunc r81 32)
  %t86 = trunc i64 %t85 to i32
  ; r83 := (uext r82 64)
  %t87 = zext i32 %t86 to i64
  br label %block_0_423230
block_0_423230:
  %t88 = phi i64 [ %t50, %block_0_4231fe ], [ %t56, %block_0_423213 ], [ %t87, %block_0_42321f ]
  %t89 = phi i64 [ %t40, %block_0_4231fe ], [ %t57, %block_0_423213 ], [ %t74, %block_0_42321f ]
  %t90 = phi i64 [ %t41, %block_0_4231fe ], [ %t58, %block_0_423213 ], [ %t71, %block_0_42321f ]
  %t91 = phi i64 [ %t42, %block_0_4231fe ], [ %t59, %block_0_423213 ], [ %t72, %block_0_42321f ]
  %t92 = phi i512 [ %t43, %block_0_4231fe ], [ %t61, %block_0_423213 ], [ %t75, %block_0_42321f ]
  ; r89 := (trunc r84 8)
  %t93 = trunc i64 %t88 to i8
  ; r90 := (eq r89 (0x0 : bv 8))
  %t94 = icmp eq i8 %t93, 0
  ; write r86 r89
  %t95 = inttoptr i64 %t90 to i8*
  store i8 %t93, i8* %t95
  br i1 %t94, label %block_0_42327d, label %block_0_423236
block_0_423236:
  %t96 = phi i64 [ %t89, %block_0_423230 ]
  %t97 = phi i64 [ %t90, %block_0_423230 ]
  %t98 = phi i64 [ %t91, %block_0_423230 ]
  %t99 = phi i512 [ %t92, %block_0_423230 ]
  ; r95 := (bv_add r92 (0x1 : bv 64))
  %t100 = add i64 %t97, 1
  br label %block_0_42323a
block_0_42323a:
  %t101 = phi i64 [ %t96, %block_0_423236 ], [ %t111, %block_0_423245 ]
  %t102 = phi i64 [ %t100, %block_0_423236 ], [ %t112, %block_0_423245 ]
  %t103 = phi i64 [ %t98, %block_0_423236 ], [ %t113, %block_0_423245 ]
  %t104 = phi i512 [ %t99, %block_0_423236 ], [ %t114, %block_0_423245 ]
  ; r100 := (bv_add r96 (0x1 : bv 64))
  %t105 = add i64 %t101, 1
  ; r101 := (read r100 (bv 8))
  %t106 = inttoptr i64 %t105 to i8*
  %t107 = load i8, i8* %t106
  ; r102 := (uext r101 64)
  %t108 = zext i8 %t107 to i64
  ; r103 := (eq r101 (0x0 : bv 8))
  %t109 = icmp eq i8 %t107, 0
  br i1 %t109, label %block_0_423276, label %block_0_423245
block_0_423245:
  %t110 = phi i64 [ %t9, %block_0_4231d4 ], [ %t108, %block_0_42323a ], [ %t141, %block_0_423261 ]
  %t111 = phi i64 [ %t10, %block_0_4231d4 ], [ %t105, %block_0_42323a ], [ %t138, %block_0_423261 ]
  %t112 = phi i64 [ %t10, %block_0_4231d4 ], [ %t102, %block_0_42323a ], [ %t137, %block_0_423261 ]
  %t113 = phi i64 [ %t10, %block_0_4231d4 ], [ %t103, %block_0_42323a ], [ %t133, %block_0_423261 ]
  %t114 = phi i512 [ %t11, %block_0_4231d4 ], [ %t104, %block_0_42323a ], [ %t135, %block_0_423261 ]
  ; r109 := (trunc r104 8)
  %t115 = trunc i64 %t110 to i8
  ; r110 := (eq r109 (0x3b : bv 8))
  %t116 = icmp eq i8 %t115, 59
  br i1 %t116, label %block_0_42323a, label %block_0_423249
block_0_423249:
  %t117 = phi i64 [ %t110, %block_0_423245 ]
  %t118 = phi i64 [ %t111, %block_0_423245 ]
  %t119 = phi i64 [ %t112, %block_0_423245 ]
  %t120 = phi i64 [ %t113, %block_0_423245 ]
  %t121 = phi i512 [ %t114, %block_0_423245 ]
  ; r116 := (trunc r111 8)
  %t122 = trunc i64 %t117 to i8
  ; r117 := (eq r116 (0x2d : bv 8))
  %t123 = icmp eq i8 %t122, 45
  br i1 %t123, label %block_0_42324d, label %block_0_4231e0
block_0_42324d:
  %t124 = phi i64 [ %t118, %block_0_423249 ]
  %t125 = phi i64 [ %t119, %block_0_423249 ]
  %t126 = phi i64 [ %t120, %block_0_423249 ]
  %t127 = phi i512 [ %t121, %block_0_423249 ]
  ; r122 := (bv_add r118 (0x1 : bv 64))
  %t128 = add i64 %t124, 1
  ; r123 := (read r122 (bv 8))
  %t129 = inttoptr i64 %t128 to i8*
  %t130 = load i8, i8* %t129
  ; r124 := (eq r123 (0x31 : bv 8))
  %t131 = icmp eq i8 %t130, 49
  br i1 %t131, label %block_0_423261, label %block_0_4231ee
block_0_423261:
  %t132 = phi i64 [ %t125, %block_0_42324d ]
  %t133 = phi i64 [ %t126, %block_0_42324d ]
  %t134 = phi i64 [ %t128, %block_0_42324d ]
  %t135 = phi i512 [ %t127, %block_0_42324d ]
  ; write r125 (0x7f : bv 8)
  %t136 = inttoptr i64 %t132 to i8*
  store i8 127, i8* %t136
  ; r129 := (bv_add r125 (0x1 : bv 64))
  %t137 = add i64 %t132, 1
  ; r130 := (bv_add r127 (0x1 : bv 64))
  %t138 = add i64 %t134, 1
  ; r131 := (read r130 (bv 8))
  %t139 = inttoptr i64 %t138 to i8*
  %t140 = load i8, i8* %t139
  ; r132 := (uext r131 64)
  %t141 = zext i8 %t140 to i64
  ; r133 := (eq r131 (0x0 : bv 8))
  %t142 = icmp eq i8 %t140, 0
  br i1 %t142, label %block_0_423276, label %block_0_423245
block_0_423276:
  %t143 = phi i64 [ %t102, %block_0_42323a ], [ %t137, %block_0_423261 ]
  %t144 = phi i64 [ %t103, %block_0_42323a ], [ %t133, %block_0_423261 ]
  %t145 = phi i512 [ %t104, %block_0_42323a ], [ %t135, %block_0_423261 ]
  ; write r134 (0x0 : bv 8)
  %t146 = inttoptr i64 %t143 to i8*
  store i8 0, i8* %t146
  ; r137 := (bitcast r136 (vec 8 double))
  %t147 = bitcast i512 %t145 to <8 x double>
  ; r138 := (tuple r135 r137)
  %t148 = insertvalue { i64, <8 x double> } undef, i64 %t144, 0
  %t149 = insertvalue { i64, <8 x double> } %t148, <8 x double> %t147, 1
  ret { i64, <8 x double> } %t149
block_0_42327d:
  %t150 = phi i64 [ %t90, %block_0_423230 ]
  %t151 = phi i64 [ %t91, %block_0_423230 ]
  %t152 = phi i512 [ %t92, %block_0_423230 ]
  ; r142 := (eq r139 r140)
  %t153 = icmp eq i64 %t150, %t151
  br i1 %t153, label %block_0_423282, label %block_0_423287
block_0_423282:
  %t154 = phi i512 [ %t1, %block_0_4231c0 ], [ %t4, %block_0_4231c9 ], [ %t16, %block_0_4231e0 ], [ %t30, %block_0_4231ee ], [ %t152, %block_0_42327d ]
  br label %block_0_423287
block_0_423287:
  %t155 = phi i64 [ %t151, %block_0_42327d ], [ 4367048, %block_0_423282 ]
  %t156 = phi i512 [ %t152, %block_0_42327d ], [ %t154, %block_0_423282 ]
  ; r146 := (bitcast r145 (vec 8 double))
  %t157 = bitcast i512 %t156 to <8 x double>
  ; r147 := (tuple r144 r146)
  %t158 = insertvalue { i64, <8 x double> } undef, i64 %t155, 0
  %t159 = insertvalue { i64, <8 x double> } %t158, <8 x double> %t157, 1
  ret { i64, <8 x double> } %t159
}
define { i64, i64, <8 x double> } @__sflags(i64 %arg0, i64 %arg1, i64 %arg2, <8 x double> %arg3) {
block_0_423290:
  ; r0 := (read arg0 (bv 8))
  %t0 = inttoptr i64 %arg0 to i8*
  %t1 = load i8, i8* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i8 %t1 to i64
  ; r2 := (eq r0 (0x72 : bv 8))
  %t3 = icmp eq i8 %t1, 114
  ; r3 := (bitcast arg3 (bv 512))
  %t4 = bitcast <8 x double> %arg3 to i512
  ; r4 := (bitcast arg3 (bv 512))
  %t5 = bitcast <8 x double> %arg3 to i512
  br i1 %t3, label %block_0_423306, label %block_0_42329b
block_0_42329b:
  %t6 = phi i64 [ %t2, %block_0_423290 ]
  %t7 = phi i64 [ %arg2, %block_0_423290 ]
  %t8 = phi i64 [ %arg1, %block_0_423290 ]
  %t9 = phi i64 [ %arg0, %block_0_423290 ]
  %t10 = phi i512 [ %t5, %block_0_423290 ]
  ; r10 := (trunc r5 8)
  %t11 = trunc i64 %t6 to i8
  ; r11 := (eq r10 (0x77 : bv 8))
  %t12 = icmp eq i8 %t11, 119
  br i1 %t12, label %block_0_4232f4, label %block_0_42329f
block_0_42329f:
  %t13 = phi i64 [ %t6, %block_0_42329b ]
  %t14 = phi i64 [ %t7, %block_0_42329b ]
  %t15 = phi i64 [ %t8, %block_0_42329b ]
  %t16 = phi i64 [ %t9, %block_0_42329b ]
  %t17 = phi i512 [ %t10, %block_0_42329b ]
  ; r17 := (trunc r12 8)
  %t18 = trunc i64 %t13 to i8
  ; r18 := (eq r17 (0x61 : bv 8))
  %t19 = icmp eq i8 %t18, 97
  br i1 %t19, label %block_0_4232b5, label %block_0_4232a3
block_0_4232a3:
  %t20 = phi i64 [ %t14, %block_0_42329f ]
  %t21 = phi i64 [ %t15, %block_0_42329f ]
  %t22 = phi i64 [ %t16, %block_0_42329f ]
  %t23 = phi i512 [ %t17, %block_0_42329f ]
  ; r23 := (bitcast r22 (vec 8 double))
  %t24 = bitcast i512 %t23 to <8 x double>
  ; r24 := call __error_unthreaded(r21, r20, r19, r23)
  %t25 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t22, i64 %t21, i64 %t20, <8 x double> %t24)
  ; r25 := (tuple_field r24 0)
  %t26 = extractvalue { i64, i64, <8 x double> } %t25, 0
  ; r26 := (tuple_field r24 1)
  %t27 = extractvalue { i64, i64, <8 x double> } %t25, 1
  ; r27 := (tuple_field r24 2)
  %t28 = extractvalue { i64, i64, <8 x double> } %t25, 2
  ; r28 := (bitcast r27 (bv 512))
  %t29 = bitcast <8 x double> %t28 to i512
  br label %block_0_4232a8
block_0_4232a8:
  %t30 = phi i64 [ %t26, %block_0_4232a3 ]
  %t31 = phi i64 [ %t27, %block_0_4232a3 ]
  %t32 = phi i512 [ %t29, %block_0_4232a3 ]
  ; write r29 (0x16 : bv 32)
  %t33 = inttoptr i64 %t30 to i32*
  store i32 22, i32* %t33
  ; r32 := (bitcast r31 (vec 8 double))
  %t34 = bitcast i512 %t32 to <8 x double>
  ; r33 := (tuple (0x0 : bv 64) r30 r32)
  %t35 = insertvalue { i64, i64, <8 x double> } undef, i64 0, 0
  %t36 = insertvalue { i64, i64, <8 x double> } %t35, i64 %t31, 1
  %t37 = insertvalue { i64, i64, <8 x double> } %t36, <8 x double> %t34, 2
  ret { i64, i64, <8 x double> } %t37
block_0_4232b5:
  %t38 = phi i64 [ %t15, %block_0_42329f ]
  %t39 = phi i64 [ %t16, %block_0_42329f ]
  %t40 = phi i512 [ %t17, %block_0_42329f ]
  br label %block_0_4232c5
block_0_4232c5:
  %t41 = phi i64 [ 8, %block_0_4232b5 ], [ 8, %block_0_4232f4 ], [ 4, %block_0_423306 ]
  %t42 = phi i64 [ 1, %block_0_4232b5 ], [ 1, %block_0_4232f4 ], [ 0, %block_0_423306 ]
  %t43 = phi i64 [ %t38, %block_0_4232b5 ], [ %t90, %block_0_4232f4 ], [ %t93, %block_0_423306 ]
  %t44 = phi i64 [ %t39, %block_0_4232b5 ], [ %t91, %block_0_4232f4 ], [ %t94, %block_0_423306 ]
  %t45 = phi i64 [ 520, %block_0_4232b5 ], [ 1536, %block_0_4232f4 ], [ 0, %block_0_423306 ]
  %t46 = phi i512 [ %t40, %block_0_4232b5 ], [ %t92, %block_0_4232f4 ], [ %t95, %block_0_423306 ]
  ; r43 := (bv_add r40 (0x1 : bv 64))
  %t47 = add i64 %t44, 1
  ; r44 := (read r43 (bv 8))
  %t48 = inttoptr i64 %t47 to i8*
  %t49 = load i8, i8* %t48
  ; r45 := (uext r44 64)
  %t50 = zext i8 %t49 to i64
  ; r46 := (eq r44 (0x2b : bv 8))
  %t51 = icmp eq i8 %t49, 43
  br i1 %t51, label %block_0_4232e8, label %block_0_4232d2
block_0_4232d2:
  %t52 = phi i64 [ %t41, %block_0_4232c5 ]
  %t53 = phi i64 [ %t42, %block_0_4232c5 ]
  %t54 = phi i64 [ %t50, %block_0_4232c5 ]
  %t55 = phi i64 [ %t43, %block_0_4232c5 ]
  %t56 = phi i64 [ %t47, %block_0_4232c5 ]
  %t57 = phi i64 [ %t45, %block_0_4232c5 ]
  %t58 = phi i512 [ %t46, %block_0_4232c5 ]
  ; r54 := (trunc r49 8)
  %t59 = trunc i64 %t54 to i8
  ; r55 := (eq r54 (0x62 : bv 8))
  %t60 = icmp eq i8 %t59, 98
  br i1 %t60, label %block_0_4232e1, label %block_0_4232d7
block_0_4232d7:
  %t61 = phi i64 [ %t52, %block_0_4232d2 ], [ %t75, %block_0_4232e1 ], [ 16, %block_0_4232e8 ]
  %t62 = phi i64 [ %t53, %block_0_4232d2 ], [ %t76, %block_0_4232e1 ], [ 2, %block_0_4232e8 ]
  %t63 = phi i64 [ %t54, %block_0_4232d2 ], [ %t77, %block_0_4232e1 ], [ %t86, %block_0_4232e8 ]
  %t64 = phi i64 [ %t55, %block_0_4232d2 ], [ %t78, %block_0_4232e1 ], [ %t87, %block_0_4232e8 ]
  %t65 = phi i64 [ %t57, %block_0_4232d2 ], [ %t80, %block_0_4232e1 ], [ %t88, %block_0_4232e8 ]
  %t66 = phi i512 [ %t58, %block_0_4232d2 ], [ %t81, %block_0_4232e1 ], [ %t89, %block_0_4232e8 ]
  ; r62 := (trunc r57 32)
  %t67 = trunc i64 %t62 to i32
  ; r63 := (trunc r60 32)
  %t68 = trunc i64 %t65 to i32
  ; r64 := (bv_or r62 r63)
  %t69 = or i32 %t67, %t68
  ; write r59 r64
  %t70 = inttoptr i64 %t64 to i32*
  store i32 %t69, i32* %t70
  ; r65 := (bitcast r61 (vec 8 double))
  %t71 = bitcast i512 %t66 to <8 x double>
  ; r66 := (tuple r56 r58 r65)
  %t72 = insertvalue { i64, i64, <8 x double> } undef, i64 %t61, 0
  %t73 = insertvalue { i64, i64, <8 x double> } %t72, i64 %t63, 1
  %t74 = insertvalue { i64, i64, <8 x double> } %t73, <8 x double> %t71, 2
  ret { i64, i64, <8 x double> } %t74
block_0_4232e1:
  %t75 = phi i64 [ %t52, %block_0_4232d2 ]
  %t76 = phi i64 [ %t53, %block_0_4232d2 ]
  %t77 = phi i64 [ %t54, %block_0_4232d2 ]
  %t78 = phi i64 [ %t55, %block_0_4232d2 ]
  %t79 = phi i64 [ %t56, %block_0_4232d2 ]
  %t80 = phi i64 [ %t57, %block_0_4232d2 ]
  %t81 = phi i512 [ %t58, %block_0_4232d2 ]
  ; r74 := (bv_add r71 (0x1 : bv 64))
  %t82 = add i64 %t79, 1
  ; r75 := (read r74 (bv 8))
  %t83 = inttoptr i64 %t82 to i8*
  %t84 = load i8, i8* %t83
  ; r76 := (eq r75 (0x2b : bv 8))
  %t85 = icmp eq i8 %t84, 43
  br i1 %t85, label %block_0_4232e8, label %block_0_4232d7
block_0_4232e8:
  %t86 = phi i64 [ %t50, %block_0_4232c5 ], [ %t77, %block_0_4232e1 ]
  %t87 = phi i64 [ %t43, %block_0_4232c5 ], [ %t78, %block_0_4232e1 ]
  %t88 = phi i64 [ %t45, %block_0_4232c5 ], [ %t80, %block_0_4232e1 ]
  %t89 = phi i512 [ %t46, %block_0_4232c5 ], [ %t81, %block_0_4232e1 ]
  br label %block_0_4232d7
block_0_4232f4:
  %t90 = phi i64 [ %t8, %block_0_42329b ]
  %t91 = phi i64 [ %t9, %block_0_42329b ]
  %t92 = phi i512 [ %t10, %block_0_42329b ]
  br label %block_0_4232c5
block_0_423306:
  %t93 = phi i64 [ %arg1, %block_0_423290 ]
  %t94 = phi i64 [ %arg0, %block_0_423290 ]
  %t95 = phi i512 [ %t4, %block_0_423290 ]
  br label %block_0_4232c5
}
define { i64, <8 x double> } @__srefill(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_423320:
  ; r0 := (read (0x641e50 : bv 64) (bv 32))
  %t0 = inttoptr i64 6561360 to i32*
  %t1 = load i32, i32* %t0
  ; r1 := (uext r0 64)
  %t2 = zext i32 %t1 to i64
  ; r2 := (eq r0 (0x0 : bv 32))
  %t3 = icmp eq i32 %t1, 0
  ; r3 := (bitcast arg6 (bv 512))
  %t4 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t5 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t6 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t7 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t9 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t10 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t11 = bitcast <8 x double> %arg13 to i512
  ; r11 := (bitcast arg6 (bv 512))
  %t12 = bitcast <8 x double> %arg6 to i512
  ; r12 := (bitcast arg7 (bv 512))
  %t13 = bitcast <8 x double> %arg7 to i512
  ; r13 := (bitcast arg8 (bv 512))
  %t14 = bitcast <8 x double> %arg8 to i512
  ; r14 := (bitcast arg9 (bv 512))
  %t15 = bitcast <8 x double> %arg9 to i512
  ; r15 := (bitcast arg10 (bv 512))
  %t16 = bitcast <8 x double> %arg10 to i512
  ; r16 := (bitcast arg11 (bv 512))
  %t17 = bitcast <8 x double> %arg11 to i512
  ; r17 := (bitcast arg12 (bv 512))
  %t18 = bitcast <8 x double> %arg12 to i512
  ; r18 := (bitcast arg13 (bv 512))
  %t19 = bitcast <8 x double> %arg13 to i512
  br i1 %t3, label %block_0_423400, label %block_0_423332
block_0_423332:
  %t20 = phi i64 [ %arg3, %block_0_423320 ], [ %t377, %block_0_423405 ]
  %t21 = phi i64 [ %t2, %block_0_423320 ], [ %t378, %block_0_423405 ]
  %t22 = phi i64 [ %arg0, %block_0_423320 ], [ %t379, %block_0_423405 ]
  %t23 = phi i64 [ %arg1, %block_0_423320 ], [ %t380, %block_0_423405 ]
  %t24 = phi i64 [ %arg0, %block_0_423320 ], [ %t381, %block_0_423405 ]
  %t25 = phi i64 [ %arg4, %block_0_423320 ], [ %t382, %block_0_423405 ]
  %t26 = phi i64 [ %arg5, %block_0_423320 ], [ %t383, %block_0_423405 ]
  %t27 = phi i512 [ %t12, %block_0_423320 ], [ %t384, %block_0_423405 ]
  %t28 = phi i512 [ %t13, %block_0_423320 ], [ %t385, %block_0_423405 ]
  %t29 = phi i512 [ %t14, %block_0_423320 ], [ %t386, %block_0_423405 ]
  %t30 = phi i512 [ %t15, %block_0_423320 ], [ %t387, %block_0_423405 ]
  %t31 = phi i512 [ %t16, %block_0_423320 ], [ %t388, %block_0_423405 ]
  %t32 = phi i512 [ %t17, %block_0_423320 ], [ %t389, %block_0_423405 ]
  %t33 = phi i512 [ %t18, %block_0_423320 ], [ %t390, %block_0_423405 ]
  %t34 = phi i512 [ %t19, %block_0_423320 ], [ %t391, %block_0_423405 ]
  ; r34 := (bv_add r21 (0xac : bv 64))
  %t35 = add i64 %t22, 172
  ; r35 := (read r34 (bv 32))
  %t36 = inttoptr i64 %t35 to i32*
  %t37 = load i32, i32* %t36
  ; r36 := (eq r35 (0x0 : bv 32))
  %t38 = icmp eq i32 %t37, 0
  br i1 %t38, label %block_0_42333c, label %block_0_423346
block_0_42333c:
  %t39 = phi i64 [ %t20, %block_0_423332 ]
  %t40 = phi i64 [ %t21, %block_0_423332 ]
  %t41 = phi i64 [ %t22, %block_0_423332 ]
  %t42 = phi i64 [ %t23, %block_0_423332 ]
  %t43 = phi i64 [ %t24, %block_0_423332 ]
  %t44 = phi i64 [ %t25, %block_0_423332 ]
  %t45 = phi i64 [ %t26, %block_0_423332 ]
  %t46 = phi i512 [ %t27, %block_0_423332 ]
  %t47 = phi i512 [ %t28, %block_0_423332 ]
  %t48 = phi i512 [ %t29, %block_0_423332 ]
  %t49 = phi i512 [ %t30, %block_0_423332 ]
  %t50 = phi i512 [ %t31, %block_0_423332 ]
  %t51 = phi i512 [ %t32, %block_0_423332 ]
  %t52 = phi i512 [ %t33, %block_0_423332 ]
  %t53 = phi i512 [ %t34, %block_0_423332 ]
  ; r52 := (bv_add r39 (0xac : bv 64))
  %t54 = add i64 %t41, 172
  ; write r52 (0xffffffff : bv 32)
  %t55 = inttoptr i64 %t54 to i32*
  store i32 4294967295, i32* %t55
  br label %block_0_423346
block_0_423346:
  %t56 = phi i64 [ %t20, %block_0_423332 ], [ %t39, %block_0_42333c ]
  %t57 = phi i64 [ %t21, %block_0_423332 ], [ %t40, %block_0_42333c ]
  %t58 = phi i64 [ %t22, %block_0_423332 ], [ %t41, %block_0_42333c ]
  %t59 = phi i64 [ %t23, %block_0_423332 ], [ %t42, %block_0_42333c ]
  %t60 = phi i64 [ %t24, %block_0_423332 ], [ %t43, %block_0_42333c ]
  %t61 = phi i64 [ %t25, %block_0_423332 ], [ %t44, %block_0_42333c ]
  %t62 = phi i64 [ %t26, %block_0_423332 ], [ %t45, %block_0_42333c ]
  %t63 = phi i512 [ %t27, %block_0_423332 ], [ %t46, %block_0_42333c ]
  %t64 = phi i512 [ %t28, %block_0_423332 ], [ %t47, %block_0_42333c ]
  %t65 = phi i512 [ %t29, %block_0_423332 ], [ %t48, %block_0_42333c ]
  %t66 = phi i512 [ %t30, %block_0_423332 ], [ %t49, %block_0_42333c ]
  %t67 = phi i512 [ %t31, %block_0_423332 ], [ %t50, %block_0_42333c ]
  %t68 = phi i512 [ %t32, %block_0_423332 ], [ %t51, %block_0_42333c ]
  %t69 = phi i512 [ %t33, %block_0_423332 ], [ %t52, %block_0_42333c ]
  %t70 = phi i512 [ %t34, %block_0_423332 ], [ %t53, %block_0_42333c ]
  ; r68 := (bv_add r55 (0x10 : bv 64))
  %t71 = add i64 %t58, 16
  ; r69 := (read r68 (bv 16))
  %t72 = inttoptr i64 %t71 to i16*
  %t73 = load i16, i16* %t72
  ; r70 := (sext r69 32)
  %t74 = sext i16 %t73 to i32
  ; r71 := (uext r70 64)
  %t75 = zext i32 %t74 to i64
  ; r72 := (bv_add r55 (0x8 : bv 64))
  %t76 = add i64 %t58, 8
  ; write r72 (0x0 : bv 32)
  %t77 = inttoptr i64 %t76 to i32*
  store i32 0, i32* %t77
  ; r73 := (trunc r69 8)
  %t78 = trunc i16 %t73 to i8
  ; r74 := (bv_and r73 (0x20 : bv 8))
  %t79 = and i8 %t78, 32
  ; r75 := (eq r74 (0x0 : bv 8))
  %t80 = icmp eq i8 %t79, 0
  br i1 %t80, label %block_0_423359, label %block_0_4233f0
block_0_423359:
  %t81 = phi i64 [ %t75, %block_0_423346 ]
  %t82 = phi i64 [ %t56, %block_0_423346 ]
  %t83 = phi i64 [ %t57, %block_0_423346 ]
  %t84 = phi i64 [ %t58, %block_0_423346 ]
  %t85 = phi i64 [ %t59, %block_0_423346 ]
  %t86 = phi i64 [ %t60, %block_0_423346 ]
  %t87 = phi i64 [ %t61, %block_0_423346 ]
  %t88 = phi i64 [ %t62, %block_0_423346 ]
  %t89 = phi i512 [ %t63, %block_0_423346 ]
  %t90 = phi i512 [ %t64, %block_0_423346 ]
  %t91 = phi i512 [ %t65, %block_0_423346 ]
  %t92 = phi i512 [ %t66, %block_0_423346 ]
  %t93 = phi i512 [ %t67, %block_0_423346 ]
  %t94 = phi i512 [ %t68, %block_0_423346 ]
  %t95 = phi i512 [ %t69, %block_0_423346 ]
  %t96 = phi i512 [ %t70, %block_0_423346 ]
  ; r92 := (trunc r76 8)
  %t97 = trunc i64 %t81 to i8
  ; r93 := (bv_and r92 (0x4 : bv 8))
  %t98 = and i8 %t97, 4
  ; r94 := (eq r93 (0x0 : bv 8))
  %t99 = icmp eq i8 %t98, 0
  br i1 %t99, label %block_0_42335d, label %block_0_4233b4
block_0_42335d:
  %t100 = phi i64 [ %t81, %block_0_423359 ]
  %t101 = phi i64 [ %t82, %block_0_423359 ]
  %t102 = phi i64 [ %t83, %block_0_423359 ]
  %t103 = phi i64 [ %t84, %block_0_423359 ]
  %t104 = phi i64 [ %t85, %block_0_423359 ]
  %t105 = phi i64 [ %t86, %block_0_423359 ]
  %t106 = phi i64 [ %t87, %block_0_423359 ]
  %t107 = phi i64 [ %t88, %block_0_423359 ]
  %t108 = phi i512 [ %t89, %block_0_423359 ]
  %t109 = phi i512 [ %t90, %block_0_423359 ]
  %t110 = phi i512 [ %t91, %block_0_423359 ]
  %t111 = phi i512 [ %t92, %block_0_423359 ]
  %t112 = phi i512 [ %t93, %block_0_423359 ]
  %t113 = phi i512 [ %t94, %block_0_423359 ]
  %t114 = phi i512 [ %t95, %block_0_423359 ]
  %t115 = phi i512 [ %t96, %block_0_423359 ]
  ; r111 := (trunc r95 8)
  %t116 = trunc i64 %t100 to i8
  ; r112 := (bv_and r111 (0x10 : bv 8))
  %t117 = and i8 %t116, 16
  ; r113 := (eq r112 (0x0 : bv 8))
  %t118 = icmp eq i8 %t117, 0
  br i1 %t118, label %block_0_42347c, label %block_0_423365
block_0_423365:
  %t119 = phi i64 [ %t100, %block_0_42335d ]
  %t120 = phi i64 [ %t101, %block_0_42335d ]
  %t121 = phi i64 [ %t102, %block_0_42335d ]
  %t122 = phi i64 [ %t103, %block_0_42335d ]
  %t123 = phi i64 [ %t104, %block_0_42335d ]
  %t124 = phi i64 [ %t106, %block_0_42335d ]
  %t125 = phi i64 [ %t107, %block_0_42335d ]
  %t126 = phi i512 [ %t108, %block_0_42335d ]
  %t127 = phi i512 [ %t109, %block_0_42335d ]
  %t128 = phi i512 [ %t110, %block_0_42335d ]
  %t129 = phi i512 [ %t111, %block_0_42335d ]
  %t130 = phi i512 [ %t112, %block_0_42335d ]
  %t131 = phi i512 [ %t113, %block_0_42335d ]
  %t132 = phi i512 [ %t114, %block_0_42335d ]
  %t133 = phi i512 [ %t115, %block_0_42335d ]
  ; r129 := (trunc r114 8)
  %t134 = trunc i64 %t119 to i8
  ; r130 := (bv_and r129 (0x8 : bv 8))
  %t135 = and i8 %t134, 8
  ; r131 := (eq r130 (0x0 : bv 8))
  %t136 = icmp eq i8 %t135, 0
  br i1 %t136, label %block_0_42336d, label %block_0_42349a
block_0_42336d:
  %t137 = phi i64 [ %t120, %block_0_423365 ], [ %t606, %block_0_4234aa ]
  %t138 = phi i64 [ %t121, %block_0_423365 ], [ %t607, %block_0_4234aa ]
  %t139 = phi i64 [ %t122, %block_0_423365 ], [ %t608, %block_0_4234aa ]
  %t140 = phi i64 [ %t123, %block_0_423365 ], [ %t609, %block_0_4234aa ]
  %t141 = phi i64 [ %t124, %block_0_423365 ], [ %t610, %block_0_4234aa ]
  %t142 = phi i64 [ %t125, %block_0_423365 ], [ %t611, %block_0_4234aa ]
  %t143 = phi i512 [ %t126, %block_0_423365 ], [ %t612, %block_0_4234aa ]
  %t144 = phi i512 [ %t127, %block_0_423365 ], [ %t613, %block_0_4234aa ]
  %t145 = phi i512 [ %t128, %block_0_423365 ], [ %t614, %block_0_4234aa ]
  %t146 = phi i512 [ %t129, %block_0_423365 ], [ %t615, %block_0_4234aa ]
  %t147 = phi i512 [ %t130, %block_0_423365 ], [ %t616, %block_0_4234aa ]
  %t148 = phi i512 [ %t131, %block_0_423365 ], [ %t617, %block_0_4234aa ]
  %t149 = phi i512 [ %t132, %block_0_423365 ], [ %t618, %block_0_4234aa ]
  %t150 = phi i512 [ %t133, %block_0_423365 ], [ %t619, %block_0_4234aa ]
  ; r146 := (bv_add r134 (0x10 : bv 64))
  %t151 = add i64 %t139, 16
  ; r147 := (read r146 (bv 16))
  %t152 = inttoptr i64 %t151 to i16*
  %t153 = load i16, i16* %t152
  ; r148 := (bv_or r147 (0x4 : bv 16))
  %t154 = or i16 %t153, 4
  ; write r146 r148
  %t155 = inttoptr i64 %t151 to i16*
  store i16 %t154, i16* %t155
  br label %block_0_423372
block_0_423372:
  %t156 = phi i64 [ %t137, %block_0_42336d ], [ %t258, %block_0_4233b4 ], [ %t321, %block_0_4233cb ]
  %t157 = phi i64 [ %t138, %block_0_42336d ], [ %t259, %block_0_4233b4 ], [ %t322, %block_0_4233cb ]
  %t158 = phi i64 [ %t139, %block_0_42336d ], [ %t260, %block_0_4233b4 ], [ %t323, %block_0_4233cb ]
  %t159 = phi i64 [ %t140, %block_0_42336d ], [ %t261, %block_0_4233b4 ], [ %t324, %block_0_4233cb ]
  %t160 = phi i64 [ %t141, %block_0_42336d ], [ %t262, %block_0_4233b4 ], [ %t325, %block_0_4233cb ]
  %t161 = phi i64 [ %t142, %block_0_42336d ], [ %t263, %block_0_4233b4 ], [ %t326, %block_0_4233cb ]
  %t162 = phi i512 [ %t143, %block_0_42336d ], [ %t264, %block_0_4233b4 ], [ %t327, %block_0_4233cb ]
  %t163 = phi i512 [ %t144, %block_0_42336d ], [ %t265, %block_0_4233b4 ], [ %t328, %block_0_4233cb ]
  %t164 = phi i512 [ %t145, %block_0_42336d ], [ %t266, %block_0_4233b4 ], [ %t329, %block_0_4233cb ]
  %t165 = phi i512 [ %t146, %block_0_42336d ], [ %t267, %block_0_4233b4 ], [ %t330, %block_0_4233cb ]
  %t166 = phi i512 [ %t147, %block_0_42336d ], [ %t268, %block_0_4233b4 ], [ %t331, %block_0_4233cb ]
  %t167 = phi i512 [ %t148, %block_0_42336d ], [ %t269, %block_0_4233b4 ], [ %t332, %block_0_4233cb ]
  %t168 = phi i512 [ %t149, %block_0_42336d ], [ %t270, %block_0_4233b4 ], [ %t333, %block_0_4233cb ]
  %t169 = phi i512 [ %t150, %block_0_42336d ], [ %t271, %block_0_4233b4 ], [ %t334, %block_0_4233cb ]
  ; r163 := (bv_add r151 (0x18 : bv 64))
  %t170 = add i64 %t158, 24
  ; r164 := (read r163 (bv 64))
  %t171 = inttoptr i64 %t170 to i64*
  %t172 = load i64, i64* %t171
  ; r165 := (eq r164 (0x0 : bv 64))
  %t173 = icmp eq i64 %t172, 0
  br i1 %t173, label %block_0_42346f, label %block_0_42337d
block_0_42337d:
  %t174 = phi i64 [ %t156, %block_0_423372 ], [ %t528, %block_0_423477 ]
  %t175 = phi i64 [ %t157, %block_0_423372 ], [ %t529, %block_0_423477 ]
  %t176 = phi i64 [ %t158, %block_0_423372 ], [ %t530, %block_0_423477 ]
  %t177 = phi i64 [ %t159, %block_0_423372 ], [ %t531, %block_0_423477 ]
  %t178 = phi i64 [ %t160, %block_0_423372 ], [ %t532, %block_0_423477 ]
  %t179 = phi i64 [ %t161, %block_0_423372 ], [ %t533, %block_0_423477 ]
  %t180 = phi i512 [ %t162, %block_0_423372 ], [ %t534, %block_0_423477 ]
  %t181 = phi i512 [ %t163, %block_0_423372 ], [ %t535, %block_0_423477 ]
  %t182 = phi i512 [ %t164, %block_0_423372 ], [ %t536, %block_0_423477 ]
  %t183 = phi i512 [ %t165, %block_0_423372 ], [ %t537, %block_0_423477 ]
  %t184 = phi i512 [ %t166, %block_0_423372 ], [ %t538, %block_0_423477 ]
  %t185 = phi i512 [ %t167, %block_0_423372 ], [ %t539, %block_0_423477 ]
  %t186 = phi i512 [ %t168, %block_0_423372 ], [ %t540, %block_0_423477 ]
  %t187 = phi i512 [ %t169, %block_0_423372 ], [ %t541, %block_0_423477 ]
  ; r180 := (bv_add r168 (0x10 : bv 64))
  %t188 = add i64 %t176, 16
  ; r181 := (read r180 (bv 16))
  %t189 = inttoptr i64 %t188 to i16*
  %t190 = load i16, i16* %t189
  ; r182 := (uext r181 64)
  %t191 = zext i16 %t190 to i64
  ; r183 := (trunc r181 8)
  %t192 = trunc i16 %t190 to i8
  ; r184 := (bv_and r183 (0x3 : bv 8))
  %t193 = and i8 %t192, 3
  ; r185 := (eq r184 (0x0 : bv 8))
  %t194 = icmp eq i8 %t193, 0
  br i1 %t194, label %block_0_423389, label %block_0_423422
block_0_423389:
  %t195 = phi i64 [ %t174, %block_0_42337d ], [ %t435, %block_0_423434 ], [ %t487, %block_0_423454 ]
  %t196 = phi i64 [ %t176, %block_0_42337d ], [ %t437, %block_0_423434 ], [ %t488, %block_0_423454 ]
  %t197 = phi i64 [ %t178, %block_0_42337d ], [ %t439, %block_0_423434 ], [ %t489, %block_0_423454 ]
  %t198 = phi i64 [ %t179, %block_0_42337d ], [ %t440, %block_0_423434 ], [ %t490, %block_0_423454 ]
  %t199 = phi i512 [ %t180, %block_0_42337d ], [ %t441, %block_0_423434 ], [ %t491, %block_0_423454 ]
  %t200 = phi i512 [ %t181, %block_0_42337d ], [ %t442, %block_0_423434 ], [ %t492, %block_0_423454 ]
  %t201 = phi i512 [ %t182, %block_0_42337d ], [ %t443, %block_0_423434 ], [ %t493, %block_0_423454 ]
  %t202 = phi i512 [ %t183, %block_0_42337d ], [ %t444, %block_0_423434 ], [ %t494, %block_0_423454 ]
  %t203 = phi i512 [ %t184, %block_0_42337d ], [ %t445, %block_0_423434 ], [ %t495, %block_0_423454 ]
  %t204 = phi i512 [ %t185, %block_0_42337d ], [ %t446, %block_0_423434 ], [ %t496, %block_0_423454 ]
  %t205 = phi i512 [ %t186, %block_0_42337d ], [ %t447, %block_0_423434 ], [ %t497, %block_0_423454 ]
  %t206 = phi i512 [ %t187, %block_0_42337d ], [ %t448, %block_0_423434 ], [ %t498, %block_0_423454 ]
  ; r198 := (bv_add r187 (0x18 : bv 64))
  %t207 = add i64 %t196, 24
  ; r199 := (read r198 (bv 64))
  %t208 = inttoptr i64 %t207 to i64*
  %t209 = load i64, i64* %t208
  ; r200 := (bv_add r187 (0x20 : bv 64))
  %t210 = add i64 %t196, 32
  ; r201 := (read r200 (bv 32))
  %t211 = inttoptr i64 %t210 to i32*
  %t212 = load i32, i32* %t211
  ; r202 := (uext r201 64)
  %t213 = zext i32 %t212 to i64
  ; write r187 r199
  %t214 = inttoptr i64 %t196 to i64*
  store i64 %t209, i64* %t214
  ; r203 := (bitcast r190 (vec 8 double))
  %t215 = bitcast i512 %t199 to <8 x double>
  ; r204 := (bitcast r191 (vec 8 double))
  %t216 = bitcast i512 %t200 to <8 x double>
  ; r205 := (bitcast r192 (vec 8 double))
  %t217 = bitcast i512 %t201 to <8 x double>
  ; r206 := (bitcast r193 (vec 8 double))
  %t218 = bitcast i512 %t202 to <8 x double>
  ; r207 := (bitcast r194 (vec 8 double))
  %t219 = bitcast i512 %t203 to <8 x double>
  ; r208 := (bitcast r195 (vec 8 double))
  %t220 = bitcast i512 %t204 to <8 x double>
  ; r209 := (bitcast r196 (vec 8 double))
  %t221 = bitcast i512 %t205 to <8 x double>
  ; r210 := (bitcast r197 (vec 8 double))
  %t222 = bitcast i512 %t206 to <8 x double>
  ; r211 := call _sread(r187, r199, r202, r186, r188, r189, r203, r204, r205, r206, r207, r208, r209, r210)
  %t223 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_sread(i64 %t196, i64 %t209, i64 %t213, i64 %t195, i64 %t197, i64 %t198, <8 x double> %t215, <8 x double> %t216, <8 x double> %t217, <8 x double> %t218, <8 x double> %t219, <8 x double> %t220, <8 x double> %t221, <8 x double> %t222)
  ; r212 := (tuple_field r211 0)
  %t224 = extractvalue { i64, <8 x double> } %t223, 0
  ; r213 := (tuple_field r211 1)
  %t225 = extractvalue { i64, <8 x double> } %t223, 1
  ; r214 := (bitcast r213 (bv 512))
  %t226 = bitcast <8 x double> %t225 to i512
  br label %block_0_42339b
block_0_42339b:
  %t227 = phi i64 [ %t224, %block_0_423389 ]
  %t228 = phi i64 [ %t196, %block_0_423389 ]
  %t229 = phi i512 [ %t226, %block_0_423389 ]
  ; r218 := (bv_add r216 (0x10 : bv 64))
  %t230 = add i64 %t228, 16
  ; r219 := (read r218 (bv 16))
  %t231 = inttoptr i64 %t230 to i16*
  %t232 = load i16, i16* %t231
  ; r220 := (uext r219 64)
  %t233 = zext i16 %t232 to i64
  ; r221 := (trunc r215 32)
  %t234 = trunc i64 %t227 to i32
  ; r222 := (bv_add r216 (0x8 : bv 64))
  %t235 = add i64 %t228, 8
  ; write r222 r221
  %t236 = inttoptr i64 %t235 to i32*
  store i32 %t234, i32* %t236
  ; r223 := (bv_shr r220 (0x8 : bv 64))
  %t237 = lshr i64 %t233, 8
  ; r224 := (trunc r223 8)
  %t238 = trunc i64 %t237 to i8
  ; r225 := (bv_and r224 (0xdf : bv 8))
  %t239 = and i8 %t238, 223
  ; r226 := (bv_and r220 (0xffffffffffff00ff : bv 64))
  %t240 = and i64 %t233, 18446744073709486335
  ; r227 := (uext r225 64)
  %t241 = zext i8 %t239 to i64
  ; r228 := (bv_shl r227 (0x8 : bv 64))
  %t242 = shl i64 %t241, 8
  ; r229 := (bv_or r226 r228)
  %t243 = or i64 %t240, %t242
  ; r230 := (bv_slt r221 (0x0 : bv 32))
  %t244 = icmp slt i32 %t234, 0
  ; r231 := (eq r221 (0x0 : bv 32))
  %t245 = icmp eq i32 %t234, 0
  ; r232 := (bv_and r219 (0xff : bv 16))
  %t246 = and i16 %t232, 255
  ; r233 := (trunc r228 16)
  %t247 = trunc i64 %t242 to i16
  ; r234 := (bv_or r232 r233)
  %t248 = or i16 %t246, %t247
  ; write r218 r234
  %t249 = inttoptr i64 %t230 to i16*
  store i16 %t248, i16* %t249
  ; r235 := (or r231 r230)
  %t250 = or i1 %t245, %t244
  br i1 %t250, label %block_0_423410, label %block_0_4233b0
block_0_4233b0:
  %t251 = phi i64 [ 0, %block_0_42339b ], [ 4294967295, %block_0_423412 ], [ 4294967295, %block_0_423459 ], [ 4294967295, %block_0_423485 ]
  %t252 = phi i512 [ %t229, %block_0_42339b ], [ %t398, %block_0_423412 ], [ %t500, %block_0_423459 ], [ %t555, %block_0_423485 ]
  ; r238 := (trunc r236 32)
  %t253 = trunc i64 %t251 to i32
  ; r239 := (uext r238 64)
  %t254 = zext i32 %t253 to i64
  ; r240 := (bitcast r237 (vec 8 double))
  %t255 = bitcast i512 %t252 to <8 x double>
  ; r241 := (tuple r239 r240)
  %t256 = insertvalue { i64, <8 x double> } undef, i64 %t254, 0
  %t257 = insertvalue { i64, <8 x double> } %t256, <8 x double> %t255, 1
  ret { i64, <8 x double> } %t257
block_0_4233b4:
  %t258 = phi i64 [ %t82, %block_0_423359 ]
  %t259 = phi i64 [ %t83, %block_0_423359 ]
  %t260 = phi i64 [ %t84, %block_0_423359 ]
  %t261 = phi i64 [ %t85, %block_0_423359 ]
  %t262 = phi i64 [ %t87, %block_0_423359 ]
  %t263 = phi i64 [ %t88, %block_0_423359 ]
  %t264 = phi i512 [ %t89, %block_0_423359 ]
  %t265 = phi i512 [ %t90, %block_0_423359 ]
  %t266 = phi i512 [ %t91, %block_0_423359 ]
  %t267 = phi i512 [ %t92, %block_0_423359 ]
  %t268 = phi i512 [ %t93, %block_0_423359 ]
  %t269 = phi i512 [ %t94, %block_0_423359 ]
  %t270 = phi i512 [ %t95, %block_0_423359 ]
  %t271 = phi i512 [ %t96, %block_0_423359 ]
  ; r256 := (bv_add r244 (0x58 : bv 64))
  %t272 = add i64 %t260, 88
  ; r257 := (read r256 (bv 64))
  %t273 = inttoptr i64 %t272 to i64*
  %t274 = load i64, i64* %t273
  ; r258 := (eq r257 (0x0 : bv 64))
  %t275 = icmp eq i64 %t274, 0
  br i1 %t275, label %block_0_423372, label %block_0_4233bd
block_0_4233bd:
  %t276 = phi i64 [ %t258, %block_0_4233b4 ]
  %t277 = phi i64 [ %t259, %block_0_4233b4 ]
  %t278 = phi i64 [ %t260, %block_0_4233b4 ]
  %t279 = phi i64 [ %t261, %block_0_4233b4 ]
  %t280 = phi i64 [ %t274, %block_0_4233b4 ]
  %t281 = phi i64 [ %t262, %block_0_4233b4 ]
  %t282 = phi i64 [ %t263, %block_0_4233b4 ]
  %t283 = phi i512 [ %t264, %block_0_4233b4 ]
  %t284 = phi i512 [ %t265, %block_0_4233b4 ]
  %t285 = phi i512 [ %t266, %block_0_4233b4 ]
  %t286 = phi i512 [ %t267, %block_0_4233b4 ]
  %t287 = phi i512 [ %t268, %block_0_4233b4 ]
  %t288 = phi i512 [ %t269, %block_0_4233b4 ]
  %t289 = phi i512 [ %t270, %block_0_4233b4 ]
  %t290 = phi i512 [ %t271, %block_0_4233b4 ]
  ; r274 := (bv_add r261 (0x74 : bv 64))
  %t291 = add i64 %t278, 116
  ; r275 := (eq r263 r274)
  %t292 = icmp eq i64 %t280, %t291
  br i1 %t292, label %block_0_4233cb, label %block_0_4233c6
block_0_4233c6:
  %t293 = phi i64 [ %t276, %block_0_4233bd ]
  %t294 = phi i64 [ %t277, %block_0_4233bd ]
  %t295 = phi i64 [ %t278, %block_0_4233bd ]
  %t296 = phi i64 [ %t279, %block_0_4233bd ]
  %t297 = phi i64 [ %t280, %block_0_4233bd ]
  %t298 = phi i64 [ %t281, %block_0_4233bd ]
  %t299 = phi i64 [ %t282, %block_0_4233bd ]
  %t300 = phi i512 [ %t283, %block_0_4233bd ]
  %t301 = phi i512 [ %t284, %block_0_4233bd ]
  %t302 = phi i512 [ %t285, %block_0_4233bd ]
  %t303 = phi i512 [ %t286, %block_0_4233bd ]
  %t304 = phi i512 [ %t287, %block_0_4233bd ]
  %t305 = phi i512 [ %t288, %block_0_4233bd ]
  %t306 = phi i512 [ %t289, %block_0_4233bd ]
  %t307 = phi i512 [ %t290, %block_0_4233bd ]
  ; r291 := (bitcast r283 (vec 8 double))
  %t308 = bitcast i512 %t300 to <8 x double>
  ; r292 := (bitcast r284 (vec 8 double))
  %t309 = bitcast i512 %t301 to <8 x double>
  ; r293 := (bitcast r285 (vec 8 double))
  %t310 = bitcast i512 %t302 to <8 x double>
  ; r294 := (bitcast r286 (vec 8 double))
  %t311 = bitcast i512 %t303 to <8 x double>
  ; r295 := (bitcast r287 (vec 8 double))
  %t312 = bitcast i512 %t304 to <8 x double>
  ; r296 := (bitcast r288 (vec 8 double))
  %t313 = bitcast i512 %t305 to <8 x double>
  ; r297 := (bitcast r289 (vec 8 double))
  %t314 = bitcast i512 %t306 to <8 x double>
  ; r298 := (bitcast r290 (vec 8 double))
  %t315 = bitcast i512 %t307 to <8 x double>
  ; r299 := call free(r280, r279, r277, r276, r281, r282, r291, r292, r293, r294, r295, r296, r297, r298)
  %t316 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t297, i64 %t296, i64 %t294, i64 %t293, i64 %t298, i64 %t299, <8 x double> %t308, <8 x double> %t309, <8 x double> %t310, <8 x double> %t311, <8 x double> %t312, <8 x double> %t313, <8 x double> %t314, <8 x double> %t315)
  ; r300 := (tuple_field r299 0)
  %t317 = extractvalue { i64, i64, <8 x double> } %t316, 0
  ; r301 := (tuple_field r299 1)
  %t318 = extractvalue { i64, i64, <8 x double> } %t316, 1
  ; r302 := (tuple_field r299 2)
  %t319 = extractvalue { i64, i64, <8 x double> } %t316, 2
  ; r303 := (bitcast r302 (bv 512))
  %t320 = bitcast <8 x double> %t319 to i512
  br label %block_0_4233cb
block_0_4233cb:
  %t321 = phi i64 [ %t276, %block_0_4233bd ], [ %t293, %block_0_4233c6 ]
  %t322 = phi i64 [ %t277, %block_0_4233bd ], [ %t318, %block_0_4233c6 ]
  %t323 = phi i64 [ %t278, %block_0_4233bd ], [ %t295, %block_0_4233c6 ]
  %t324 = phi i64 [ %t279, %block_0_4233bd ], [ %t296, %block_0_4233c6 ]
  %t325 = phi i64 [ %t281, %block_0_4233bd ], [ %t298, %block_0_4233c6 ]
  %t326 = phi i64 [ %t282, %block_0_4233bd ], [ %t299, %block_0_4233c6 ]
  %t327 = phi i512 [ %t283, %block_0_4233bd ], [ %t320, %block_0_4233c6 ]
  %t328 = phi i512 [ %t284, %block_0_4233bd ], [ %t301, %block_0_4233c6 ]
  %t329 = phi i512 [ %t285, %block_0_4233bd ], [ %t302, %block_0_4233c6 ]
  %t330 = phi i512 [ %t286, %block_0_4233bd ], [ %t303, %block_0_4233c6 ]
  %t331 = phi i512 [ %t287, %block_0_4233bd ], [ %t304, %block_0_4233c6 ]
  %t332 = phi i512 [ %t288, %block_0_4233bd ], [ %t305, %block_0_4233c6 ]
  %t333 = phi i512 [ %t289, %block_0_4233bd ], [ %t306, %block_0_4233c6 ]
  %t334 = phi i512 [ %t290, %block_0_4233bd ], [ %t307, %block_0_4233c6 ]
  ; r318 := (bv_add r306 (0x70 : bv 64))
  %t335 = add i64 %t323, 112
  ; r319 := (read r318 (bv 32))
  %t336 = inttoptr i64 %t335 to i32*
  %t337 = load i32, i32* %t336
  ; r320 := (bv_add r306 (0x58 : bv 64))
  %t338 = add i64 %t323, 88
  ; write r320 (0x0 : bv 64)
  %t339 = inttoptr i64 %t338 to i64*
  store i64 0, i64* %t339
  ; r321 := (eq r319 (0x0 : bv 32))
  %t340 = icmp eq i32 %t337, 0
  ; r322 := (bv_add r306 (0x8 : bv 64))
  %t341 = add i64 %t323, 8
  ; write r322 r319
  %t342 = inttoptr i64 %t341 to i32*
  store i32 %t337, i32* %t342
  br i1 %t340, label %block_0_423372, label %block_0_4233dd
block_0_4233dd:
  %t343 = phi i64 [ %t323, %block_0_4233cb ]
  %t344 = phi i512 [ %t327, %block_0_4233cb ]
  ; r325 := (bv_add r323 (0x68 : bv 64))
  %t345 = add i64 %t343, 104
  ; r326 := (read r325 (bv 64))
  %t346 = inttoptr i64 %t345 to i64*
  %t347 = load i64, i64* %t346
  ; write r323 r326
  %t348 = inttoptr i64 %t343 to i64*
  store i64 %t347, i64* %t348
  ; r327 := (bitcast r324 (vec 8 double))
  %t349 = bitcast i512 %t344 to <8 x double>
  ; r328 := (tuple (0x0 : bv 64) r327)
  %t350 = insertvalue { i64, <8 x double> } undef, i64 0, 0
  %t351 = insertvalue { i64, <8 x double> } %t350, <8 x double> %t349, 1
  ret { i64, <8 x double> } %t351
block_0_4233f0:
  %t352 = phi i512 [ %t63, %block_0_423346 ], [ %t596, %block_0_4234a2 ]
  ; r330 := (bitcast r329 (vec 8 double))
  %t353 = bitcast i512 %t352 to <8 x double>
  ; r331 := (tuple (0xffffffff : bv 64) r330)
  %t354 = insertvalue { i64, <8 x double> } undef, i64 4294967295, 0
  %t355 = insertvalue { i64, <8 x double> } %t354, <8 x double> %t353, 1
  ret { i64, <8 x double> } %t355
block_0_423400:
  %t356 = phi i64 [ %arg3, %block_0_423320 ]
  %t357 = phi i64 [ %t2, %block_0_423320 ]
  %t358 = phi i64 [ %arg0, %block_0_423320 ]
  %t359 = phi i64 [ %arg1, %block_0_423320 ]
  %t360 = phi i64 [ %arg0, %block_0_423320 ]
  %t361 = phi i64 [ %arg4, %block_0_423320 ]
  %t362 = phi i64 [ %arg5, %block_0_423320 ]
  %t363 = phi i512 [ %t4, %block_0_423320 ]
  %t364 = phi i512 [ %t5, %block_0_423320 ]
  %t365 = phi i512 [ %t6, %block_0_423320 ]
  %t366 = phi i512 [ %t7, %block_0_423320 ]
  %t367 = phi i512 [ %t8, %block_0_423320 ]
  %t368 = phi i512 [ %t9, %block_0_423320 ]
  %t369 = phi i512 [ %t10, %block_0_423320 ]
  %t370 = phi i512 [ %t11, %block_0_423320 ]
  ; r347 := (bitcast r339 (vec 8 double))
  %t371 = bitcast i512 %t363 to <8 x double>
  ; r348 := call __sinit(r336, r335, r333, r347)
  %t372 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__sinit(i64 %t360, i64 %t359, i64 %t357, <8 x double> %t371)
  ; r349 := (tuple_field r348 0)
  %t373 = extractvalue { i64, i64, <8 x double> } %t372, 0
  ; r350 := (tuple_field r348 1)
  %t374 = extractvalue { i64, i64, <8 x double> } %t372, 1
  ; r351 := (tuple_field r348 2)
  %t375 = extractvalue { i64, i64, <8 x double> } %t372, 2
  ; r352 := (bitcast r351 (bv 512))
  %t376 = bitcast <8 x double> %t375 to i512
  br label %block_0_423405
block_0_423405:
  %t377 = phi i64 [ %t356, %block_0_423400 ]
  %t378 = phi i64 [ %t374, %block_0_423400 ]
  %t379 = phi i64 [ %t358, %block_0_423400 ]
  %t380 = phi i64 [ %t359, %block_0_423400 ]
  %t381 = phi i64 [ %t360, %block_0_423400 ]
  %t382 = phi i64 [ %t361, %block_0_423400 ]
  %t383 = phi i64 [ %t362, %block_0_423400 ]
  %t384 = phi i512 [ %t376, %block_0_423400 ]
  %t385 = phi i512 [ %t364, %block_0_423400 ]
  %t386 = phi i512 [ %t365, %block_0_423400 ]
  %t387 = phi i512 [ %t366, %block_0_423400 ]
  %t388 = phi i512 [ %t367, %block_0_423400 ]
  %t389 = phi i512 [ %t368, %block_0_423400 ]
  %t390 = phi i512 [ %t369, %block_0_423400 ]
  %t391 = phi i512 [ %t370, %block_0_423400 ]
  br label %block_0_423332
block_0_423410:
  %t392 = phi i64 [ %t243, %block_0_42339b ]
  %t393 = phi i64 [ %t228, %block_0_42339b ]
  %t394 = phi i1 [ %t245, %block_0_42339b ]
  %t395 = phi i512 [ %t229, %block_0_42339b ]
  br i1 %t394, label %block_0_423412, label %block_0_423459
block_0_423412:
  %t396 = phi i64 [ %t392, %block_0_423410 ]
  %t397 = phi i64 [ %t393, %block_0_423410 ]
  %t398 = phi i512 [ %t395, %block_0_423410 ]
  ; r375 := (trunc r372 16)
  %t399 = trunc i64 %t396 to i16
  ; r376 := (bv_or r375 (0x20 : bv 16))
  %t400 = or i16 %t399, 32
  ; r377 := (bv_add r373 (0x10 : bv 64))
  %t401 = add i64 %t397, 16
  ; write r377 r376
  %t402 = inttoptr i64 %t401 to i16*
  store i16 %t400, i16* %t402
  br label %block_0_4233b0
block_0_423422:
  %t403 = phi i64 [ %t191, %block_0_42337d ]
  %t404 = phi i64 [ %t174, %block_0_42337d ]
  %t405 = phi i64 [ %t175, %block_0_42337d ]
  %t406 = phi i64 [ %t176, %block_0_42337d ]
  %t407 = phi i64 [ %t177, %block_0_42337d ]
  %t408 = phi i64 [ %t178, %block_0_42337d ]
  %t409 = phi i64 [ %t179, %block_0_42337d ]
  %t410 = phi i512 [ %t180, %block_0_42337d ]
  %t411 = phi i512 [ %t181, %block_0_42337d ]
  %t412 = phi i512 [ %t182, %block_0_42337d ]
  %t413 = phi i512 [ %t183, %block_0_42337d ]
  %t414 = phi i512 [ %t184, %block_0_42337d ]
  %t415 = phi i512 [ %t185, %block_0_42337d ]
  %t416 = phi i512 [ %t186, %block_0_42337d ]
  %t417 = phi i512 [ %t187, %block_0_42337d ]
  ; r393 := (trunc r378 16)
  %t418 = trunc i64 %t403 to i16
  ; r394 := (bv_or r393 (0x8000 : bv 16))
  %t419 = or i16 %t418, 32768
  ; r395 := (bv_add r381 (0x10 : bv 64))
  %t420 = add i64 %t406, 16
  ; write r395 r394
  %t421 = inttoptr i64 %t420 to i16*
  store i16 %t419, i16* %t421
  ; r396 := (bitcast r385 (vec 8 double))
  %t422 = bitcast i512 %t410 to <8 x double>
  ; r397 := (bitcast r386 (vec 8 double))
  %t423 = bitcast i512 %t411 to <8 x double>
  ; r398 := (bitcast r387 (vec 8 double))
  %t424 = bitcast i512 %t412 to <8 x double>
  ; r399 := (bitcast r388 (vec 8 double))
  %t425 = bitcast i512 %t413 to <8 x double>
  ; r400 := (bitcast r389 (vec 8 double))
  %t426 = bitcast i512 %t414 to <8 x double>
  ; r401 := (bitcast r390 (vec 8 double))
  %t427 = bitcast i512 %t415 to <8 x double>
  ; r402 := (bitcast r391 (vec 8 double))
  %t428 = bitcast i512 %t416 to <8 x double>
  ; r403 := (bitcast r392 (vec 8 double))
  %t429 = bitcast i512 %t417 to <8 x double>
  ; r404 := call _fwalk((0x4234d0 : bv 64), r382, r380, r379, r383, r384, r396, r397, r398, r399, r400, r401, r402, r403)
  %t430 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @_fwalk(i64 4338896, i64 %t407, i64 %t405, i64 %t404, i64 %t408, i64 %t409, <8 x double> %t422, <8 x double> %t423, <8 x double> %t424, <8 x double> %t425, <8 x double> %t426, <8 x double> %t427, <8 x double> %t428, <8 x double> %t429)
  ; r405 := (tuple_field r404 0)
  %t431 = extractvalue { i64, i64, <8 x double> } %t430, 0
  ; r406 := (tuple_field r404 1)
  %t432 = extractvalue { i64, i64, <8 x double> } %t430, 1
  ; r407 := (tuple_field r404 2)
  %t433 = extractvalue { i64, i64, <8 x double> } %t430, 2
  ; r408 := (bitcast r407 (bv 512))
  %t434 = bitcast <8 x double> %t433 to i512
  br label %block_0_423434
block_0_423434:
  %t435 = phi i64 [ %t404, %block_0_423422 ]
  %t436 = phi i64 [ %t432, %block_0_423422 ]
  %t437 = phi i64 [ %t406, %block_0_423422 ]
  %t438 = phi i64 [ %t407, %block_0_423422 ]
  %t439 = phi i64 [ %t408, %block_0_423422 ]
  %t440 = phi i64 [ %t409, %block_0_423422 ]
  %t441 = phi i512 [ %t434, %block_0_423422 ]
  %t442 = phi i512 [ %t411, %block_0_423422 ]
  %t443 = phi i512 [ %t412, %block_0_423422 ]
  %t444 = phi i512 [ %t413, %block_0_423422 ]
  %t445 = phi i512 [ %t414, %block_0_423422 ]
  %t446 = phi i512 [ %t415, %block_0_423422 ]
  %t447 = phi i512 [ %t416, %block_0_423422 ]
  %t448 = phi i512 [ %t417, %block_0_423422 ]
  ; r423 := (bv_add r411 (0x10 : bv 64))
  %t449 = add i64 %t437, 16
  ; r424 := (read r423 (bv 16))
  %t450 = inttoptr i64 %t449 to i16*
  %t451 = load i16, i16* %t450
  ; r425 := (uext r424 32)
  %t452 = zext i16 %t451 to i32
  ; r426 := (bv_and r424 (0x7fff : bv 16))
  %t453 = and i16 %t451, 32767
  ; write r423 r426
  %t454 = inttoptr i64 %t449 to i16*
  store i16 %t453, i16* %t454
  ; r427 := (bv_and r425 (0xffff0000 : bv 32))
  %t455 = and i32 %t452, 4294901760
  ; r428 := (uext r426 32)
  %t456 = zext i16 %t453 to i32
  ; r429 := (bv_or r427 r428)
  %t457 = or i32 %t455, %t456
  ; r430 := (bv_and r429 (0x9 : bv 32))
  %t458 = and i32 %t457, 9
  ; r431 := (eq r430 (0x9 : bv 32))
  %t459 = icmp eq i32 %t458, 9
  br i1 %t459, label %block_0_42344c, label %block_0_423389
block_0_42344c:
  %t460 = phi i64 [ %t435, %block_0_423434 ]
  %t461 = phi i64 [ %t436, %block_0_423434 ]
  %t462 = phi i64 [ %t437, %block_0_423434 ]
  %t463 = phi i64 [ %t438, %block_0_423434 ]
  %t464 = phi i64 [ %t439, %block_0_423434 ]
  %t465 = phi i64 [ %t440, %block_0_423434 ]
  %t466 = phi i512 [ %t441, %block_0_423434 ]
  %t467 = phi i512 [ %t442, %block_0_423434 ]
  %t468 = phi i512 [ %t443, %block_0_423434 ]
  %t469 = phi i512 [ %t444, %block_0_423434 ]
  %t470 = phi i512 [ %t445, %block_0_423434 ]
  %t471 = phi i512 [ %t446, %block_0_423434 ]
  %t472 = phi i512 [ %t447, %block_0_423434 ]
  %t473 = phi i512 [ %t448, %block_0_423434 ]
  ; r446 := (bitcast r438 (vec 8 double))
  %t474 = bitcast i512 %t466 to <8 x double>
  ; r447 := (bitcast r439 (vec 8 double))
  %t475 = bitcast i512 %t467 to <8 x double>
  ; r448 := (bitcast r440 (vec 8 double))
  %t476 = bitcast i512 %t468 to <8 x double>
  ; r449 := (bitcast r441 (vec 8 double))
  %t477 = bitcast i512 %t469 to <8 x double>
  ; r450 := (bitcast r442 (vec 8 double))
  %t478 = bitcast i512 %t470 to <8 x double>
  ; r451 := (bitcast r443 (vec 8 double))
  %t479 = bitcast i512 %t471 to <8 x double>
  ; r452 := (bitcast r444 (vec 8 double))
  %t480 = bitcast i512 %t472 to <8 x double>
  ; r453 := (bitcast r445 (vec 8 double))
  %t481 = bitcast i512 %t473 to <8 x double>
  ; r454 := call __sflush(r434, r435, r433, r432, r436, r437, r446, r447, r448, r449, r450, r451, r452, r453)
  %t482 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__sflush(i64 %t462, i64 %t463, i64 %t461, i64 %t460, i64 %t464, i64 %t465, <8 x double> %t474, <8 x double> %t475, <8 x double> %t476, <8 x double> %t477, <8 x double> %t478, <8 x double> %t479, <8 x double> %t480, <8 x double> %t481)
  ; r455 := (tuple_field r454 0)
  %t483 = extractvalue { i64, i64, <8 x double> } %t482, 0
  ; r456 := (tuple_field r454 1)
  %t484 = extractvalue { i64, i64, <8 x double> } %t482, 1
  ; r457 := (tuple_field r454 2)
  %t485 = extractvalue { i64, i64, <8 x double> } %t482, 2
  ; r458 := (bitcast r457 (bv 512))
  %t486 = bitcast <8 x double> %t485 to i512
  br label %block_0_423454
block_0_423454:
  %t487 = phi i64 [ %t460, %block_0_42344c ]
  %t488 = phi i64 [ %t462, %block_0_42344c ]
  %t489 = phi i64 [ %t464, %block_0_42344c ]
  %t490 = phi i64 [ %t465, %block_0_42344c ]
  %t491 = phi i512 [ %t486, %block_0_42344c ]
  %t492 = phi i512 [ %t467, %block_0_42344c ]
  %t493 = phi i512 [ %t468, %block_0_42344c ]
  %t494 = phi i512 [ %t469, %block_0_42344c ]
  %t495 = phi i512 [ %t470, %block_0_42344c ]
  %t496 = phi i512 [ %t471, %block_0_42344c ]
  %t497 = phi i512 [ %t472, %block_0_42344c ]
  %t498 = phi i512 [ %t473, %block_0_42344c ]
  br label %block_0_423389
block_0_423459:
  %t499 = phi i64 [ %t393, %block_0_423410 ]
  %t500 = phi i512 [ %t395, %block_0_423410 ]
  ; r473 := (bv_add r471 (0x10 : bv 64))
  %t501 = add i64 %t499, 16
  ; r474 := (read r473 (bv 16))
  %t502 = inttoptr i64 %t501 to i16*
  %t503 = load i16, i16* %t502
  ; r475 := (bv_or r474 (0x40 : bv 16))
  %t504 = or i16 %t503, 64
  ; write r473 r475
  %t505 = inttoptr i64 %t501 to i16*
  store i16 %t504, i16* %t505
  ; r476 := (bv_add r471 (0x8 : bv 64))
  %t506 = add i64 %t499, 8
  ; write r476 (0x0 : bv 32)
  %t507 = inttoptr i64 %t506 to i32*
  store i32 0, i32* %t507
  br label %block_0_4233b0
block_0_42346f:
  %t508 = phi i64 [ %t156, %block_0_423372 ]
  %t509 = phi i64 [ %t157, %block_0_423372 ]
  %t510 = phi i64 [ %t158, %block_0_423372 ]
  %t511 = phi i64 [ %t159, %block_0_423372 ]
  %t512 = phi i64 [ %t160, %block_0_423372 ]
  %t513 = phi i64 [ %t161, %block_0_423372 ]
  %t514 = phi i512 [ %t162, %block_0_423372 ]
  %t515 = phi i512 [ %t163, %block_0_423372 ]
  %t516 = phi i512 [ %t164, %block_0_423372 ]
  %t517 = phi i512 [ %t165, %block_0_423372 ]
  %t518 = phi i512 [ %t166, %block_0_423372 ]
  %t519 = phi i512 [ %t167, %block_0_423372 ]
  %t520 = phi i512 [ %t168, %block_0_423372 ]
  %t521 = phi i512 [ %t169, %block_0_423372 ]
  ; r491 := (bitcast r483 (vec 8 double))
  %t522 = bitcast i512 %t514 to <8 x double>
  ; r492 := call __smakebuf(r479, r480, r478, r491)
  %t523 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__smakebuf(i64 %t510, i64 %t511, i64 %t509, <8 x double> %t522)
  ; r493 := (tuple_field r492 0)
  %t524 = extractvalue { i64, i64, <8 x double> } %t523, 0
  ; r494 := (tuple_field r492 1)
  %t525 = extractvalue { i64, i64, <8 x double> } %t523, 1
  ; r495 := (tuple_field r492 2)
  %t526 = extractvalue { i64, i64, <8 x double> } %t523, 2
  ; r496 := (bitcast r495 (bv 512))
  %t527 = bitcast <8 x double> %t526 to i512
  br label %block_0_423477
block_0_423477:
  %t528 = phi i64 [ %t508, %block_0_42346f ]
  %t529 = phi i64 [ %t525, %block_0_42346f ]
  %t530 = phi i64 [ %t510, %block_0_42346f ]
  %t531 = phi i64 [ %t511, %block_0_42346f ]
  %t532 = phi i64 [ %t512, %block_0_42346f ]
  %t533 = phi i64 [ %t513, %block_0_42346f ]
  %t534 = phi i512 [ %t527, %block_0_42346f ]
  %t535 = phi i512 [ %t515, %block_0_42346f ]
  %t536 = phi i512 [ %t516, %block_0_42346f ]
  %t537 = phi i512 [ %t517, %block_0_42346f ]
  %t538 = phi i512 [ %t518, %block_0_42346f ]
  %t539 = phi i512 [ %t519, %block_0_42346f ]
  %t540 = phi i512 [ %t520, %block_0_42346f ]
  %t541 = phi i512 [ %t521, %block_0_42346f ]
  br label %block_0_42337d
block_0_42347c:
  %t542 = phi i64 [ %t102, %block_0_42335d ]
  %t543 = phi i64 [ %t103, %block_0_42335d ]
  %t544 = phi i64 [ %t104, %block_0_42335d ]
  %t545 = phi i64 [ %t105, %block_0_42335d ]
  %t546 = phi i512 [ %t108, %block_0_42335d ]
  ; r516 := (bitcast r515 (vec 8 double))
  %t547 = bitcast i512 %t546 to <8 x double>
  ; r517 := call __error_unthreaded(r514, r513, r511, r516)
  %t548 = call { i64, i64, <8 x double> } (i64, i64, i64, <8 x double>) @__error_unthreaded(i64 %t545, i64 %t544, i64 %t542, <8 x double> %t547)
  ; r518 := (tuple_field r517 0)
  %t549 = extractvalue { i64, i64, <8 x double> } %t548, 0
  ; r519 := (tuple_field r517 1)
  %t550 = extractvalue { i64, i64, <8 x double> } %t548, 1
  ; r520 := (tuple_field r517 2)
  %t551 = extractvalue { i64, i64, <8 x double> } %t548, 2
  ; r521 := (bitcast r520 (bv 512))
  %t552 = bitcast <8 x double> %t551 to i512
  br label %block_0_423485
block_0_423485:
  %t553 = phi i64 [ %t549, %block_0_42347c ]
  %t554 = phi i64 [ %t543, %block_0_42347c ]
  %t555 = phi i512 [ %t552, %block_0_42347c ]
  ; r525 := (bv_add r523 (0x10 : bv 64))
  %t556 = add i64 %t554, 16
  ; r526 := (read r525 (bv 16))
  %t557 = inttoptr i64 %t556 to i16*
  %t558 = load i16, i16* %t557
  ; r527 := (bv_or r526 (0x40 : bv 16))
  %t559 = or i16 %t558, 64
  ; write r525 r527
  %t560 = inttoptr i64 %t556 to i16*
  store i16 %t559, i16* %t560
  ; write r522 (0x9 : bv 32)
  %t561 = inttoptr i64 %t553 to i32*
  store i32 9, i32* %t561
  br label %block_0_4233b0
block_0_42349a:
  %t562 = phi i64 [ %t120, %block_0_423365 ]
  %t563 = phi i64 [ %t121, %block_0_423365 ]
  %t564 = phi i64 [ %t122, %block_0_423365 ]
  %t565 = phi i64 [ %t123, %block_0_423365 ]
  %t566 = phi i64 [ %t124, %block_0_423365 ]
  %t567 = phi i64 [ %t125, %block_0_423365 ]
  %t568 = phi i512 [ %t126, %block_0_423365 ]
  %t569 = phi i512 [ %t127, %block_0_423365 ]
  %t570 = phi i512 [ %t128, %block_0_423365 ]
  %t571 = phi i512 [ %t129, %block_0_423365 ]
  %t572 = phi i512 [ %t130, %block_0_423365 ]
  %t573 = phi i512 [ %t131, %block_0_423365 ]
  %t574 = phi i512 [ %t132, %block_0_423365 ]
  %t575 = phi i512 [ %t133, %block_0_423365 ]
  ; r542 := (bitcast r534 (vec 8 double))
  %t576 = bitcast i512 %t568 to <8 x double>
  ; r543 := (bitcast r535 (vec 8 double))
  %t577 = bitcast i512 %t569 to <8 x double>
  ; r544 := (bitcast r536 (vec 8 double))
  %t578 = bitcast i512 %t570 to <8 x double>
  ; r545 := (bitcast r537 (vec 8 double))
  %t579 = bitcast i512 %t571 to <8 x double>
  ; r546 := (bitcast r538 (vec 8 double))
  %t580 = bitcast i512 %t572 to <8 x double>
  ; r547 := (bitcast r539 (vec 8 double))
  %t581 = bitcast i512 %t573 to <8 x double>
  ; r548 := (bitcast r540 (vec 8 double))
  %t582 = bitcast i512 %t574 to <8 x double>
  ; r549 := (bitcast r541 (vec 8 double))
  %t583 = bitcast i512 %t575 to <8 x double>
  ; r550 := call __sflush(r530, r531, r529, r528, r532, r533, r542, r543, r544, r545, r546, r547, r548, r549)
  %t584 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__sflush(i64 %t564, i64 %t565, i64 %t563, i64 %t562, i64 %t566, i64 %t567, <8 x double> %t576, <8 x double> %t577, <8 x double> %t578, <8 x double> %t579, <8 x double> %t580, <8 x double> %t581, <8 x double> %t582, <8 x double> %t583)
  ; r551 := (tuple_field r550 0)
  %t585 = extractvalue { i64, i64, <8 x double> } %t584, 0
  ; r552 := (tuple_field r550 1)
  %t586 = extractvalue { i64, i64, <8 x double> } %t584, 1
  ; r553 := (tuple_field r550 2)
  %t587 = extractvalue { i64, i64, <8 x double> } %t584, 2
  ; r554 := (bitcast r553 (bv 512))
  %t588 = bitcast <8 x double> %t587 to i512
  br label %block_0_4234a2
block_0_4234a2:
  %t589 = phi i64 [ %t585, %block_0_42349a ]
  %t590 = phi i64 [ %t562, %block_0_42349a ]
  %t591 = phi i64 [ %t586, %block_0_42349a ]
  %t592 = phi i64 [ %t564, %block_0_42349a ]
  %t593 = phi i64 [ %t565, %block_0_42349a ]
  %t594 = phi i64 [ %t566, %block_0_42349a ]
  %t595 = phi i64 [ %t567, %block_0_42349a ]
  %t596 = phi i512 [ %t588, %block_0_42349a ]
  %t597 = phi i512 [ %t569, %block_0_42349a ]
  %t598 = phi i512 [ %t570, %block_0_42349a ]
  %t599 = phi i512 [ %t571, %block_0_42349a ]
  %t600 = phi i512 [ %t572, %block_0_42349a ]
  %t601 = phi i512 [ %t573, %block_0_42349a ]
  %t602 = phi i512 [ %t574, %block_0_42349a ]
  %t603 = phi i512 [ %t575, %block_0_42349a ]
  ; r570 := (trunc r555 32)
  %t604 = trunc i64 %t589 to i32
  ; r571 := (eq r570 (0x0 : bv 32))
  %t605 = icmp eq i32 %t604, 0
  br i1 %t605, label %block_0_4234aa, label %block_0_4233f0
block_0_4234aa:
  %t606 = phi i64 [ %t590, %block_0_4234a2 ]
  %t607 = phi i64 [ %t591, %block_0_4234a2 ]
  %t608 = phi i64 [ %t592, %block_0_4234a2 ]
  %t609 = phi i64 [ %t593, %block_0_4234a2 ]
  %t610 = phi i64 [ %t594, %block_0_4234a2 ]
  %t611 = phi i64 [ %t595, %block_0_4234a2 ]
  %t612 = phi i512 [ %t596, %block_0_4234a2 ]
  %t613 = phi i512 [ %t597, %block_0_4234a2 ]
  %t614 = phi i512 [ %t598, %block_0_4234a2 ]
  %t615 = phi i512 [ %t599, %block_0_4234a2 ]
  %t616 = phi i512 [ %t600, %block_0_4234a2 ]
  %t617 = phi i512 [ %t601, %block_0_4234a2 ]
  %t618 = phi i512 [ %t602, %block_0_4234a2 ]
  %t619 = phi i512 [ %t603, %block_0_4234a2 ]
  ; r586 := (bv_add r574 (0x10 : bv 64))
  %t620 = add i64 %t608, 16
  ; r587 := (read r586 (bv 16))
  %t621 = inttoptr i64 %t620 to i16*
  %t622 = load i16, i16* %t621
  ; r588 := (bv_and r587 (0xfff7 : bv 16))
  %t623 = and i16 %t622, 65527
  ; write r586 r588
  %t624 = inttoptr i64 %t620 to i16*
  store i16 %t623, i16* %t624
  ; r589 := (bv_add r574 (0xc : bv 64))
  %t625 = add i64 %t608, 12
  ; write r589 (0x0 : bv 32)
  %t626 = inttoptr i64 %t625 to i32*
  store i32 0, i32* %t626
  ; r590 := (bv_add r574 (0x28 : bv 64))
  %t627 = add i64 %t608, 40
  ; write r590 (0x0 : bv 32)
  %t628 = inttoptr i64 %t627 to i32*
  store i32 0, i32* %t628
  br label %block_0_42336d
}
define void @lflush(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_4234d0:
  ; r0 := (bv_add arg0 (0x10 : bv 64))
  %t0 = add i64 %arg0, 16
  ; r1 := (read r0 (bv 16))
  %t1 = inttoptr i64 %t0 to i16*
  %t2 = load i16, i16* %t1
  ; r2 := (sext r1 32)
  %t3 = sext i16 %t2 to i32
  ; r3 := (bv_and r2 (0x9 : bv 32))
  %t4 = and i32 %t3, 9
  ; r4 := (eq r3 (0x9 : bv 32))
  %t5 = icmp eq i32 %t4, 9
  ; r5 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg7 (bv 512))
  %t7 = bitcast <8 x double> %arg7 to i512
  ; r7 := (bitcast arg8 (bv 512))
  %t8 = bitcast <8 x double> %arg8 to i512
  ; r8 := (bitcast arg9 (bv 512))
  %t9 = bitcast <8 x double> %arg9 to i512
  ; r9 := (bitcast arg10 (bv 512))
  %t10 = bitcast <8 x double> %arg10 to i512
  ; r10 := (bitcast arg11 (bv 512))
  %t11 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r12 := (bitcast arg13 (bv 512))
  %t13 = bitcast <8 x double> %arg13 to i512
  br i1 %t5, label %block_0_423500, label %block_0_4234ef
block_0_4234ef:
  ret void
block_0_423500:
  %t14 = phi i64 [ %arg3, %block_0_4234d0 ]
  %t15 = phi i64 [ %arg2, %block_0_4234d0 ]
  %t16 = phi i64 [ %arg0, %block_0_4234d0 ]
  %t17 = phi i64 [ %arg4, %block_0_4234d0 ]
  %t18 = phi i64 [ %arg5, %block_0_4234d0 ]
  %t19 = phi i512 [ %t6, %block_0_4234d0 ]
  %t20 = phi i512 [ %t7, %block_0_4234d0 ]
  %t21 = phi i512 [ %t8, %block_0_4234d0 ]
  %t22 = phi i512 [ %t9, %block_0_4234d0 ]
  %t23 = phi i512 [ %t10, %block_0_4234d0 ]
  %t24 = phi i512 [ %t11, %block_0_4234d0 ]
  %t25 = phi i512 [ %t12, %block_0_4234d0 ]
  %t26 = phi i512 [ %t13, %block_0_4234d0 ]
  ; r26 := (read (0x6356e8 : bv 64) (bv 32))
  %t27 = inttoptr i64 6510312 to i32*
  %t28 = load i32, i32* %t27
  ; r27 := (uext r26 64)
  %t29 = zext i32 %t28 to i64
  ; r28 := (eq r26 (0x0 : bv 32))
  %t30 = icmp eq i32 %t28, 0
  br i1 %t30, label %block_0_42350a, label %block_0_423528
block_0_42350a:
  %t31 = phi i64 [ %t14, %block_0_423500 ], [ %t129, %block_0_42352d ]
  %t32 = phi i64 [ %t15, %block_0_423500 ], [ %t130, %block_0_42352d ]
  %t33 = phi i64 [ %t16, %block_0_423500 ], [ %t131, %block_0_42352d ]
  %t34 = phi i64 [ %t29, %block_0_423500 ], [ %t132, %block_0_42352d ]
  %t35 = phi i64 [ %t17, %block_0_423500 ], [ %t133, %block_0_42352d ]
  %t36 = phi i64 [ %t18, %block_0_423500 ], [ %t134, %block_0_42352d ]
  %t37 = phi i512 [ %t19, %block_0_423500 ], [ %t135, %block_0_42352d ]
  %t38 = phi i512 [ %t20, %block_0_423500 ], [ %t136, %block_0_42352d ]
  %t39 = phi i512 [ %t21, %block_0_423500 ], [ %t137, %block_0_42352d ]
  %t40 = phi i512 [ %t22, %block_0_423500 ], [ %t138, %block_0_42352d ]
  %t41 = phi i512 [ %t23, %block_0_423500 ], [ %t139, %block_0_42352d ]
  %t42 = phi i512 [ %t24, %block_0_423500 ], [ %t140, %block_0_42352d ]
  %t43 = phi i512 [ %t25, %block_0_423500 ], [ %t141, %block_0_42352d ]
  %t44 = phi i512 [ %t26, %block_0_423500 ], [ %t142, %block_0_42352d ]
  ; r43 := (bitcast r35 (vec 8 double))
  %t45 = bitcast i512 %t37 to <8 x double>
  ; r44 := (bitcast r36 (vec 8 double))
  %t46 = bitcast i512 %t38 to <8 x double>
  ; r45 := (bitcast r37 (vec 8 double))
  %t47 = bitcast i512 %t39 to <8 x double>
  ; r46 := (bitcast r38 (vec 8 double))
  %t48 = bitcast i512 %t40 to <8 x double>
  ; r47 := (bitcast r39 (vec 8 double))
  %t49 = bitcast i512 %t41 to <8 x double>
  ; r48 := (bitcast r40 (vec 8 double))
  %t50 = bitcast i512 %t42 to <8 x double>
  ; r49 := (bitcast r41 (vec 8 double))
  %t51 = bitcast i512 %t43 to <8 x double>
  ; r50 := (bitcast r42 (vec 8 double))
  %t52 = bitcast i512 %t44 to <8 x double>
  ; r51 := call __sflush(r31, r32, r30, r29, r33, r34, r43, r44, r45, r46, r47, r48, r49, r50)
  %t53 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__sflush(i64 %t33, i64 %t34, i64 %t32, i64 %t31, i64 %t35, i64 %t36, <8 x double> %t45, <8 x double> %t46, <8 x double> %t47, <8 x double> %t48, <8 x double> %t49, <8 x double> %t50, <8 x double> %t51, <8 x double> %t52)
  ; r52 := (tuple_field r51 0)
  %t54 = extractvalue { i64, i64, <8 x double> } %t53, 0
  ; r53 := (tuple_field r51 1)
  %t55 = extractvalue { i64, i64, <8 x double> } %t53, 1
  ; r54 := (tuple_field r51 2)
  %t56 = extractvalue { i64, i64, <8 x double> } %t53, 2
  ; r55 := (bitcast r54 (bv 512))
  %t57 = bitcast <8 x double> %t56 to i512
  br label %block_0_423512
block_0_423512:
  %t58 = phi i64 [ %t55, %block_0_42350a ]
  %t59 = phi i64 [ %t33, %block_0_42350a ]
  %t60 = phi i64 [ %t34, %block_0_42350a ]
  %t61 = phi i64 [ %t35, %block_0_42350a ]
  %t62 = phi i64 [ %t36, %block_0_42350a ]
  %t63 = phi i512 [ %t57, %block_0_42350a ]
  %t64 = phi i512 [ %t38, %block_0_42350a ]
  %t65 = phi i512 [ %t39, %block_0_42350a ]
  %t66 = phi i512 [ %t40, %block_0_42350a ]
  %t67 = phi i512 [ %t41, %block_0_42350a ]
  %t68 = phi i512 [ %t42, %block_0_42350a ]
  %t69 = phi i512 [ %t43, %block_0_42350a ]
  %t70 = phi i512 [ %t44, %block_0_42350a ]
  ; r69 := (read (0x6356e8 : bv 64) (bv 32))
  %t71 = inttoptr i64 6510312 to i32*
  %t72 = load i32, i32* %t71
  ; r70 := (uext r69 64)
  %t73 = zext i32 %t72 to i64
  ; r71 := (eq r69 (0x0 : bv 32))
  %t74 = icmp eq i32 %t72, 0
  br i1 %t74, label %block_0_4234ef, label %block_0_42351e
block_0_42351e:
  %t75 = phi i64 [ %t73, %block_0_423512 ]
  %t76 = phi i64 [ %t58, %block_0_423512 ]
  %t77 = phi i64 [ %t59, %block_0_423512 ]
  %t78 = phi i64 [ %t60, %block_0_423512 ]
  %t79 = phi i64 [ %t61, %block_0_423512 ]
  %t80 = phi i64 [ %t62, %block_0_423512 ]
  %t81 = phi i512 [ %t63, %block_0_423512 ]
  %t82 = phi i512 [ %t64, %block_0_423512 ]
  %t83 = phi i512 [ %t65, %block_0_423512 ]
  %t84 = phi i512 [ %t66, %block_0_423512 ]
  %t85 = phi i512 [ %t67, %block_0_423512 ]
  %t86 = phi i512 [ %t68, %block_0_423512 ]
  %t87 = phi i512 [ %t69, %block_0_423512 ]
  %t88 = phi i512 [ %t70, %block_0_423512 ]
  ; r86 := (bitcast r78 (vec 8 double))
  %t89 = bitcast i512 %t81 to <8 x double>
  ; r87 := (bitcast r79 (vec 8 double))
  %t90 = bitcast i512 %t82 to <8 x double>
  ; r88 := (bitcast r80 (vec 8 double))
  %t91 = bitcast i512 %t83 to <8 x double>
  ; r89 := (bitcast r81 (vec 8 double))
  %t92 = bitcast i512 %t84 to <8 x double>
  ; r90 := (bitcast r82 (vec 8 double))
  %t93 = bitcast i512 %t85 to <8 x double>
  ; r91 := (bitcast r83 (vec 8 double))
  %t94 = bitcast i512 %t86 to <8 x double>
  ; r92 := (bitcast r84 (vec 8 double))
  %t95 = bitcast i512 %t87 to <8 x double>
  ; r93 := (bitcast r85 (vec 8 double))
  %t96 = bitcast i512 %t88 to <8 x double>
  ; r94 := call funlockfile(r74, r75, r73, r72, r76, r77, r86, r87, r88, r89, r90, r91, r92, r93)
  %t97 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @funlockfile(i64 %t77, i64 %t78, i64 %t76, i64 %t75, i64 %t79, i64 %t80, <8 x double> %t89, <8 x double> %t90, <8 x double> %t91, <8 x double> %t92, <8 x double> %t93, <8 x double> %t94, <8 x double> %t95, <8 x double> %t96)
  ; r95 := (tuple_field r94 0)
  %t98 = extractvalue { i64, i64, <8 x double> } %t97, 0
  ; r96 := (tuple_field r94 1)
  %t99 = extractvalue { i64, i64, <8 x double> } %t97, 1
  ; r97 := (tuple_field r94 2)
  %t100 = extractvalue { i64, i64, <8 x double> } %t97, 2
  ; r98 := (bitcast r97 (bv 512))
  %t101 = bitcast <8 x double> %t100 to i512
  br label %block_0_423526
block_0_423526:
  br label %block_0_4234ef
block_0_423528:
  %t102 = phi i64 [ %t14, %block_0_423500 ]
  %t103 = phi i64 [ %t15, %block_0_423500 ]
  %t104 = phi i64 [ %t16, %block_0_423500 ]
  %t105 = phi i64 [ %t29, %block_0_423500 ]
  %t106 = phi i64 [ %t17, %block_0_423500 ]
  %t107 = phi i64 [ %t18, %block_0_423500 ]
  %t108 = phi i512 [ %t19, %block_0_423500 ]
  %t109 = phi i512 [ %t20, %block_0_423500 ]
  %t110 = phi i512 [ %t21, %block_0_423500 ]
  %t111 = phi i512 [ %t22, %block_0_423500 ]
  %t112 = phi i512 [ %t23, %block_0_423500 ]
  %t113 = phi i512 [ %t24, %block_0_423500 ]
  %t114 = phi i512 [ %t25, %block_0_423500 ]
  %t115 = phi i512 [ %t26, %block_0_423500 ]
  ; r113 := (bitcast r105 (vec 8 double))
  %t116 = bitcast i512 %t108 to <8 x double>
  ; r114 := (bitcast r106 (vec 8 double))
  %t117 = bitcast i512 %t109 to <8 x double>
  ; r115 := (bitcast r107 (vec 8 double))
  %t118 = bitcast i512 %t110 to <8 x double>
  ; r116 := (bitcast r108 (vec 8 double))
  %t119 = bitcast i512 %t111 to <8 x double>
  ; r117 := (bitcast r109 (vec 8 double))
  %t120 = bitcast i512 %t112 to <8 x double>
  ; r118 := (bitcast r110 (vec 8 double))
  %t121 = bitcast i512 %t113 to <8 x double>
  ; r119 := (bitcast r111 (vec 8 double))
  %t122 = bitcast i512 %t114 to <8 x double>
  ; r120 := (bitcast r112 (vec 8 double))
  %t123 = bitcast i512 %t115 to <8 x double>
  ; r121 := call flockfile(r101, r102, r100, r99, r103, r104, r113, r114, r115, r116, r117, r118, r119, r120)
  %t124 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @flockfile(i64 %t104, i64 %t105, i64 %t103, i64 %t102, i64 %t106, i64 %t107, <8 x double> %t116, <8 x double> %t117, <8 x double> %t118, <8 x double> %t119, <8 x double> %t120, <8 x double> %t121, <8 x double> %t122, <8 x double> %t123)
  ; r122 := (tuple_field r121 0)
  %t125 = extractvalue { i64, i64, <8 x double> } %t124, 0
  ; r123 := (tuple_field r121 1)
  %t126 = extractvalue { i64, i64, <8 x double> } %t124, 1
  ; r124 := (tuple_field r121 2)
  %t127 = extractvalue { i64, i64, <8 x double> } %t124, 2
  ; r125 := (bitcast r124 (bv 512))
  %t128 = bitcast <8 x double> %t127 to i512
  br label %block_0_42352d
block_0_42352d:
  %t129 = phi i64 [ %t102, %block_0_423528 ]
  %t130 = phi i64 [ %t126, %block_0_423528 ]
  %t131 = phi i64 [ %t104, %block_0_423528 ]
  %t132 = phi i64 [ %t105, %block_0_423528 ]
  %t133 = phi i64 [ %t106, %block_0_423528 ]
  %t134 = phi i64 [ %t107, %block_0_423528 ]
  %t135 = phi i512 [ %t128, %block_0_423528 ]
  %t136 = phi i512 [ %t109, %block_0_423528 ]
  %t137 = phi i512 [ %t110, %block_0_423528 ]
  %t138 = phi i512 [ %t111, %block_0_423528 ]
  %t139 = phi i512 [ %t112, %block_0_423528 ]
  %t140 = phi i512 [ %t113, %block_0_423528 ]
  %t141 = phi i512 [ %t114, %block_0_423528 ]
  %t142 = phi i512 [ %t115, %block_0_423528 ]
  br label %block_0_42350a
}
define void @__printf_render_vis(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_423560:
  ; r0 := (read arg2 (bv 64))
  %t0 = inttoptr i64 %arg2 to i64*
  %t1 = load i64, i64* %t0
  ; r1 := (read r0 (bv 64))
  %t2 = inttoptr i64 %t1 to i64*
  %t3 = load i64, i64* %t2
  ; r2 := (eq r1 (0x0 : bv 64))
  %t4 = icmp eq i64 %t3, 0
  ; r3 := (bitcast arg6 (bv 512))
  %t5 = bitcast <8 x double> %arg6 to i512
  ; r4 := (bitcast arg7 (bv 512))
  %t6 = bitcast <8 x double> %arg7 to i512
  ; r5 := (bitcast arg8 (bv 512))
  %t7 = bitcast <8 x double> %arg8 to i512
  ; r6 := (bitcast arg9 (bv 512))
  %t8 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast arg10 (bv 512))
  %t9 = bitcast <8 x double> %arg10 to i512
  ; r8 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r9 := (bitcast arg12 (bv 512))
  %t11 = bitcast <8 x double> %arg12 to i512
  ; r10 := (bitcast arg13 (bv 512))
  %t12 = bitcast <8 x double> %arg13 to i512
  ; r11 := (bitcast arg6 (bv 512))
  %t13 = bitcast <8 x double> %arg6 to i512
  ; r12 := (bitcast arg7 (bv 512))
  %t14 = bitcast <8 x double> %arg7 to i512
  ; r13 := (bitcast arg8 (bv 512))
  %t15 = bitcast <8 x double> %arg8 to i512
  ; r14 := (bitcast arg9 (bv 512))
  %t16 = bitcast <8 x double> %arg9 to i512
  ; r15 := (bitcast arg10 (bv 512))
  %t17 = bitcast <8 x double> %arg10 to i512
  ; r16 := (bitcast arg11 (bv 512))
  %t18 = bitcast <8 x double> %arg11 to i512
  ; r17 := (bitcast arg12 (bv 512))
  %t19 = bitcast <8 x double> %arg12 to i512
  ; r18 := (bitcast arg13 (bv 512))
  %t20 = bitcast <8 x double> %arg13 to i512
  br i1 %t4, label %block_0_423593, label %block_0_4235c4
block_0_423593:
  %t21 = phi i64 [ %arg1, %block_0_423560 ]
  %t22 = phi i64 [ %arg0, %block_0_423560 ]
  %t23 = phi i64 [ %arg4, %block_0_423560 ]
  %t24 = phi i64 [ %arg5, %block_0_423560 ]
  %t25 = phi i512 [ %t5, %block_0_423560 ]
  %t26 = phi i512 [ %t6, %block_0_423560 ]
  %t27 = phi i512 [ %t7, %block_0_423560 ]
  %t28 = phi i512 [ %t8, %block_0_423560 ]
  %t29 = phi i512 [ %t9, %block_0_423560 ]
  %t30 = phi i512 [ %t10, %block_0_423560 ]
  %t31 = phi i512 [ %t11, %block_0_423560 ]
  %t32 = phi i512 [ %t12, %block_0_423560 ]
  ; r31 := (bitcast r23 (vec 8 double))
  %t33 = bitcast i512 %t25 to <8 x double>
  ; r32 := (bitcast r24 (vec 8 double))
  %t34 = bitcast i512 %t26 to <8 x double>
  ; r33 := (bitcast r25 (vec 8 double))
  %t35 = bitcast i512 %t27 to <8 x double>
  ; r34 := (bitcast r26 (vec 8 double))
  %t36 = bitcast i512 %t28 to <8 x double>
  ; r35 := (bitcast r27 (vec 8 double))
  %t37 = bitcast i512 %t29 to <8 x double>
  ; r36 := (bitcast r28 (vec 8 double))
  %t38 = bitcast i512 %t30 to <8 x double>
  ; r37 := (bitcast r29 (vec 8 double))
  %t39 = bitcast i512 %t31 to <8 x double>
  ; r38 := (bitcast r30 (vec 8 double))
  %t40 = bitcast i512 %t32 to <8 x double>
  ; r39 := call __printf_out(r20, r19, (0x4282a1 : bv 64), (0x6 : bv 64), r21, r22, r31, r32, r33, r34, r35, r36, r37, r38)
  %t41 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_out(i64 %t22, i64 %t21, i64 4358817, i64 6, i64 %t23, i64 %t24, <8 x double> %t33, <8 x double> %t34, <8 x double> %t35, <8 x double> %t36, <8 x double> %t37, <8 x double> %t38, <8 x double> %t39, <8 x double> %t40)
  ret void
block_0_4235c4:
  %t42 = phi i64 [ %arg3, %block_0_423560 ]
  %t43 = phi i64 [ %arg2, %block_0_423560 ]
  %t44 = phi i64 [ %t3, %block_0_423560 ]
  %t45 = phi i64 [ %arg1, %block_0_423560 ]
  %t46 = phi i64 [ %arg0, %block_0_423560 ]
  %t47 = phi i64 [ %arg4, %block_0_423560 ]
  %t48 = phi i64 [ %arg5, %block_0_423560 ]
  %t49 = phi i512 [ %t13, %block_0_423560 ]
  %t50 = phi i512 [ %t14, %block_0_423560 ]
  %t51 = phi i512 [ %t15, %block_0_423560 ]
  %t52 = phi i512 [ %t16, %block_0_423560 ]
  %t53 = phi i512 [ %t17, %block_0_423560 ]
  %t54 = phi i512 [ %t18, %block_0_423560 ]
  %t55 = phi i512 [ %t19, %block_0_423560 ]
  %t56 = phi i512 [ %t20, %block_0_423560 ]
  ; r55 := (read r43 (bv 32))
  %t57 = inttoptr i64 %t45 to i32*
  %t58 = load i32, i32* %t57
  ; r56 := (uext r55 64)
  %t59 = zext i32 %t58 to i64
  ; r57 := (bv_slt r55 (0x0 : bv 32))
  %t60 = icmp slt i32 %t58, 0
  br i1 %t60, label %block_0_423696, label %block_0_4235d0
block_0_4235d0:
  %t61 = phi i64 [ %t42, %block_0_4235c4 ], [ %t409, %block_0_42369e ]
  %t62 = phi i64 [ %t43, %block_0_4235c4 ], [ %t410, %block_0_42369e ]
  %t63 = phi i64 [ %t59, %block_0_4235c4 ], [ %t426, %block_0_42369e ]
  %t64 = phi i64 [ %t44, %block_0_4235c4 ], [ %t411, %block_0_42369e ]
  %t65 = phi i64 [ %t45, %block_0_4235c4 ], [ %t412, %block_0_42369e ]
  %t66 = phi i64 [ %t47, %block_0_4235c4 ], [ %t413, %block_0_42369e ]
  %t67 = phi i64 [ %t48, %block_0_4235c4 ], [ %t414, %block_0_42369e ]
  %t68 = phi i64 [ %t45, %block_0_4235c4 ], [ %t415, %block_0_42369e ]
  %t69 = phi i64 [ %t46, %block_0_4235c4 ], [ %t416, %block_0_42369e ]
  %t70 = phi i512 [ %t49, %block_0_4235c4 ], [ %t417, %block_0_42369e ]
  %t71 = phi i512 [ %t50, %block_0_4235c4 ], [ %t418, %block_0_42369e ]
  %t72 = phi i512 [ %t51, %block_0_4235c4 ], [ %t419, %block_0_42369e ]
  %t73 = phi i512 [ %t52, %block_0_4235c4 ], [ %t420, %block_0_42369e ]
  %t74 = phi i512 [ %t53, %block_0_4235c4 ], [ %t421, %block_0_42369e ]
  %t75 = phi i512 [ %t54, %block_0_4235c4 ], [ %t422, %block_0_42369e ]
  %t76 = phi i512 [ %t55, %block_0_4235c4 ], [ %t423, %block_0_42369e ]
  %t77 = phi i512 [ %t56, %block_0_4235c4 ], [ %t424, %block_0_42369e ]
  ; r75 := (bv_mul (0x4 : bv 64) r60)
  %t78 = mul i64 4, %t63
  ; r76 := (bv_add r75 (0x1 : bv 64))
  %t79 = add i64 %t78, 1
  ; r77 := (trunc r76 32)
  %t80 = trunc i64 %t79 to i32
  ; r78 := (uext r77 64)
  %t81 = zext i32 %t80 to i64
  ; r79 := (bitcast r67 (vec 8 double))
  %t82 = bitcast i512 %t70 to <8 x double>
  ; r80 := (bitcast r68 (vec 8 double))
  %t83 = bitcast i512 %t71 to <8 x double>
  ; r81 := (bitcast r69 (vec 8 double))
  %t84 = bitcast i512 %t72 to <8 x double>
  ; r82 := (bitcast r70 (vec 8 double))
  %t85 = bitcast i512 %t73 to <8 x double>
  ; r83 := (bitcast r71 (vec 8 double))
  %t86 = bitcast i512 %t74 to <8 x double>
  ; r84 := (bitcast r72 (vec 8 double))
  %t87 = bitcast i512 %t75 to <8 x double>
  ; r85 := (bitcast r73 (vec 8 double))
  %t88 = bitcast i512 %t76 to <8 x double>
  ; r86 := (bitcast r74 (vec 8 double))
  %t89 = bitcast i512 %t77 to <8 x double>
  ; r87 := call malloc(r78, r62, r59, r58, r63, r64, r79, r80, r81, r82, r83, r84, r85, r86)
  %t90 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @malloc(i64 %t81, i64 %t65, i64 %t62, i64 %t61, i64 %t66, i64 %t67, <8 x double> %t82, <8 x double> %t83, <8 x double> %t84, <8 x double> %t85, <8 x double> %t86, <8 x double> %t87, <8 x double> %t88, <8 x double> %t89)
  ; r88 := (tuple_field r87 0)
  %t91 = extractvalue { i64, i64, <8 x double> } %t90, 0
  ; r89 := (tuple_field r87 1)
  %t92 = extractvalue { i64, i64, <8 x double> } %t90, 1
  ; r90 := (tuple_field r87 2)
  %t93 = extractvalue { i64, i64, <8 x double> } %t90, 2
  ; r91 := (bitcast r90 (bv 512))
  %t94 = bitcast <8 x double> %t93 to i512
  br label %block_0_4235e2
block_0_4235e2:
  %t95 = phi i64 [ %t91, %block_0_4235d0 ]
  %t96 = phi i64 [ %t61, %block_0_4235d0 ]
  %t97 = phi i64 [ %t63, %block_0_4235d0 ]
  %t98 = phi i64 [ %t64, %block_0_4235d0 ]
  %t99 = phi i64 [ %t65, %block_0_4235d0 ]
  %t100 = phi i64 [ %t66, %block_0_4235d0 ]
  %t101 = phi i64 [ %t67, %block_0_4235d0 ]
  %t102 = phi i64 [ %t68, %block_0_4235d0 ]
  %t103 = phi i64 [ %t69, %block_0_4235d0 ]
  %t104 = phi i512 [ %t94, %block_0_4235d0 ]
  %t105 = phi i512 [ %t71, %block_0_4235d0 ]
  %t106 = phi i512 [ %t72, %block_0_4235d0 ]
  %t107 = phi i512 [ %t73, %block_0_4235d0 ]
  %t108 = phi i512 [ %t74, %block_0_4235d0 ]
  %t109 = phi i512 [ %t75, %block_0_4235d0 ]
  %t110 = phi i512 [ %t76, %block_0_4235d0 ]
  %t111 = phi i512 [ %t77, %block_0_4235d0 ]
  ; r109 := (eq r92 (0x0 : bv 64))
  %t112 = icmp eq i64 %t95, 0
  br i1 %t112, label %block_0_423644, label %block_0_4235ea
block_0_4235ea:
  %t113 = phi i64 [ %t95, %block_0_4235e2 ]
  %t114 = phi i64 [ %t96, %block_0_4235e2 ]
  %t115 = phi i64 [ %t97, %block_0_4235e2 ]
  %t116 = phi i64 [ %t98, %block_0_4235e2 ]
  %t117 = phi i64 [ %t99, %block_0_4235e2 ]
  %t118 = phi i64 [ %t100, %block_0_4235e2 ]
  %t119 = phi i64 [ %t101, %block_0_4235e2 ]
  %t120 = phi i64 [ %t102, %block_0_4235e2 ]
  %t121 = phi i64 [ %t103, %block_0_4235e2 ]
  %t122 = phi i512 [ %t104, %block_0_4235e2 ]
  %t123 = phi i512 [ %t105, %block_0_4235e2 ]
  %t124 = phi i512 [ %t106, %block_0_4235e2 ]
  %t125 = phi i512 [ %t107, %block_0_4235e2 ]
  %t126 = phi i512 [ %t108, %block_0_4235e2 ]
  %t127 = phi i512 [ %t109, %block_0_4235e2 ]
  %t128 = phi i512 [ %t110, %block_0_4235e2 ]
  %t129 = phi i512 [ %t111, %block_0_4235e2 ]
  ; r127 := (bv_add r117 (0x28 : bv 64))
  %t130 = add i64 %t120, 40
  ; r128 := (read r127 (bv 32))
  %t131 = inttoptr i64 %t130 to i32*
  %t132 = load i32, i32* %t131
  ; r129 := (eq r128 (0x0 : bv 32))
  %t133 = icmp eq i32 %t132, 0
  br i1 %t133, label %block_0_4235f3, label %block_0_42366a
block_0_4235f3:
  %t134 = phi i64 [ %t113, %block_0_4235ea ]
  %t135 = phi i64 [ %t114, %block_0_4235ea ]
  %t136 = phi i64 [ %t115, %block_0_4235ea ]
  %t137 = phi i64 [ %t116, %block_0_4235ea ]
  %t138 = phi i64 [ %t117, %block_0_4235ea ]
  %t139 = phi i64 [ %t118, %block_0_4235ea ]
  %t140 = phi i64 [ %t119, %block_0_4235ea ]
  %t141 = phi i64 [ %t120, %block_0_4235ea ]
  %t142 = phi i64 [ %t121, %block_0_4235ea ]
  %t143 = phi i512 [ %t122, %block_0_4235ea ]
  %t144 = phi i512 [ %t123, %block_0_4235ea ]
  %t145 = phi i512 [ %t124, %block_0_4235ea ]
  %t146 = phi i512 [ %t125, %block_0_4235ea ]
  %t147 = phi i512 [ %t126, %block_0_4235ea ]
  %t148 = phi i512 [ %t127, %block_0_4235ea ]
  %t149 = phi i512 [ %t128, %block_0_4235ea ]
  %t150 = phi i512 [ %t129, %block_0_4235ea ]
  ; r147 := (bv_add r137 (0x38 : bv 64))
  %t151 = add i64 %t141, 56
  ; r148 := (read r147 (bv 32))
  %t152 = inttoptr i64 %t151 to i32*
  %t153 = load i32, i32* %t152
  ; r149 := (eq r148 (0x30 : bv 32))
  %t154 = icmp eq i32 %t153, 48
  br i1 %t154, label %block_0_4236a5, label %block_0_4235ff
block_0_4235ff:
  %t155 = phi i64 [ %t134, %block_0_4235f3 ]
  %t156 = phi i64 [ %t135, %block_0_4235f3 ]
  %t157 = phi i64 [ %t136, %block_0_4235f3 ]
  %t158 = phi i64 [ %t137, %block_0_4235f3 ]
  %t159 = phi i64 [ %t138, %block_0_4235f3 ]
  %t160 = phi i64 [ %t139, %block_0_4235f3 ]
  %t161 = phi i64 [ %t140, %block_0_4235f3 ]
  %t162 = phi i64 [ %t141, %block_0_4235f3 ]
  %t163 = phi i64 [ %t142, %block_0_4235f3 ]
  %t164 = phi i512 [ %t143, %block_0_4235f3 ]
  %t165 = phi i512 [ %t144, %block_0_4235f3 ]
  %t166 = phi i512 [ %t145, %block_0_4235f3 ]
  %t167 = phi i512 [ %t146, %block_0_4235f3 ]
  %t168 = phi i512 [ %t147, %block_0_4235f3 ]
  %t169 = phi i512 [ %t148, %block_0_4235f3 ]
  %t170 = phi i512 [ %t149, %block_0_4235f3 ]
  %t171 = phi i512 [ %t150, %block_0_4235f3 ]
  ; r167 := (bv_add r157 (0x1c : bv 64))
  %t172 = add i64 %t162, 28
  ; r168 := (read r167 (bv 32))
  %t173 = inttoptr i64 %t172 to i32*
  %t174 = load i32, i32* %t173
  ; r169 := (eq r168 (0x0 : bv 32))
  %t175 = icmp eq i32 %t174, 0
  br i1 %t175, label %block_0_423680, label %block_0_423608
block_0_423608:
  %t176 = phi i64 [ %t156, %block_0_4235ff ]
  %t177 = phi i64 [ %t157, %block_0_4235ff ]
  %t178 = phi i64 [ %t158, %block_0_4235ff ]
  %t179 = phi i64 [ %t159, %block_0_4235ff ]
  %t180 = phi i64 [ %t160, %block_0_4235ff ]
  %t181 = phi i64 [ %t161, %block_0_4235ff ]
  %t182 = phi i64 [ %t162, %block_0_4235ff ]
  %t183 = phi i64 [ %t155, %block_0_4235ff ]
  %t184 = phi i64 [ %t163, %block_0_4235ff ]
  %t185 = phi i512 [ %t164, %block_0_4235ff ]
  %t186 = phi i512 [ %t165, %block_0_4235ff ]
  %t187 = phi i512 [ %t166, %block_0_4235ff ]
  %t188 = phi i512 [ %t167, %block_0_4235ff ]
  %t189 = phi i512 [ %t168, %block_0_4235ff ]
  %t190 = phi i512 [ %t169, %block_0_4235ff ]
  %t191 = phi i512 [ %t170, %block_0_4235ff ]
  %t192 = phi i512 [ %t171, %block_0_4235ff ]
  ; r187 := (trunc r171 32)
  %t193 = trunc i64 %t177 to i32
  ; r188 := (uext r187 64)
  %t194 = zext i32 %t193 to i64
  ; r189 := (bitcast r179 (vec 8 double))
  %t195 = bitcast i512 %t185 to <8 x double>
  ; r190 := call strvisx(r177, r172, r188, (0x1c : bv 64), r174, r175, r189)
  %t196 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>) @strvisx(i64 %t183, i64 %t178, i64 %t194, i64 28, i64 %t180, i64 %t181, <8 x double> %t195)
  ; r191 := (tuple_field r190 0)
  %t197 = extractvalue { i64, <8 x double> } %t196, 0
  ; r192 := (tuple_field r190 1)
  %t198 = extractvalue { i64, <8 x double> } %t196, 1
  ; r193 := (bitcast r192 (bv 512))
  %t199 = bitcast <8 x double> %t198 to i512
  br label %block_0_42361a
block_0_42361a:
  %t200 = phi i64 [ %t197, %block_0_423608 ]
  %t201 = phi i64 [ %t176, %block_0_423608 ]
  %t202 = phi i64 [ %t179, %block_0_423608 ]
  %t203 = phi i64 [ %t180, %block_0_423608 ]
  %t204 = phi i64 [ %t181, %block_0_423608 ]
  %t205 = phi i64 [ %t182, %block_0_423608 ]
  %t206 = phi i64 [ %t183, %block_0_423608 ]
  %t207 = phi i64 [ %t184, %block_0_423608 ]
  %t208 = phi i512 [ %t199, %block_0_423608 ]
  %t209 = phi i512 [ %t186, %block_0_423608 ]
  %t210 = phi i512 [ %t187, %block_0_423608 ]
  %t211 = phi i512 [ %t188, %block_0_423608 ]
  %t212 = phi i512 [ %t189, %block_0_423608 ]
  %t213 = phi i512 [ %t190, %block_0_423608 ]
  %t214 = phi i512 [ %t191, %block_0_423608 ]
  %t215 = phi i512 [ %t192, %block_0_423608 ]
  ; r210 := (trunc r194 32)
  %t216 = trunc i64 %t200 to i32
  ; r211 := (uext r210 64)
  %t217 = zext i32 %t216 to i64
  br label %block_0_423620
block_0_423620:
  %t218 = phi i64 [ %t201, %block_0_42361a ], [ %t329, %block_0_42367c ], [ %t371, %block_0_423692 ], [ %t452, %block_0_4236b7 ]
  %t219 = phi i64 [ %t217, %block_0_42361a ], [ %t345, %block_0_42367c ], [ %t387, %block_0_423692 ], [ %t468, %block_0_4236b7 ]
  %t220 = phi i64 [ %t202, %block_0_42361a ], [ %t330, %block_0_42367c ], [ %t372, %block_0_423692 ], [ %t453, %block_0_4236b7 ]
  %t221 = phi i64 [ %t203, %block_0_42361a ], [ %t331, %block_0_42367c ], [ %t373, %block_0_423692 ], [ %t454, %block_0_4236b7 ]
  %t222 = phi i64 [ %t204, %block_0_42361a ], [ %t332, %block_0_42367c ], [ %t374, %block_0_423692 ], [ %t455, %block_0_4236b7 ]
  %t223 = phi i64 [ %t205, %block_0_42361a ], [ %t333, %block_0_42367c ], [ %t375, %block_0_423692 ], [ %t456, %block_0_4236b7 ]
  %t224 = phi i64 [ %t206, %block_0_42361a ], [ %t334, %block_0_42367c ], [ %t376, %block_0_423692 ], [ %t457, %block_0_4236b7 ]
  %t225 = phi i64 [ %t207, %block_0_42361a ], [ %t335, %block_0_42367c ], [ %t377, %block_0_423692 ], [ %t458, %block_0_4236b7 ]
  %t226 = phi i512 [ %t208, %block_0_42361a ], [ %t336, %block_0_42367c ], [ %t378, %block_0_423692 ], [ %t459, %block_0_4236b7 ]
  %t227 = phi i512 [ %t209, %block_0_42361a ], [ %t337, %block_0_42367c ], [ %t379, %block_0_423692 ], [ %t460, %block_0_4236b7 ]
  %t228 = phi i512 [ %t210, %block_0_42361a ], [ %t338, %block_0_42367c ], [ %t380, %block_0_423692 ], [ %t461, %block_0_4236b7 ]
  %t229 = phi i512 [ %t211, %block_0_42361a ], [ %t339, %block_0_42367c ], [ %t381, %block_0_423692 ], [ %t462, %block_0_4236b7 ]
  %t230 = phi i512 [ %t212, %block_0_42361a ], [ %t340, %block_0_42367c ], [ %t382, %block_0_423692 ], [ %t463, %block_0_4236b7 ]
  %t231 = phi i512 [ %t213, %block_0_42361a ], [ %t341, %block_0_42367c ], [ %t383, %block_0_423692 ], [ %t464, %block_0_4236b7 ]
  %t232 = phi i512 [ %t214, %block_0_42361a ], [ %t342, %block_0_42367c ], [ %t384, %block_0_423692 ], [ %t465, %block_0_4236b7 ]
  %t233 = phi i512 [ %t215, %block_0_42361a ], [ %t343, %block_0_42367c ], [ %t385, %block_0_423692 ], [ %t466, %block_0_4236b7 ]
  ; r228 := (trunc r213 32)
  %t234 = trunc i64 %t219 to i32
  ; r229 := (uext r228 64)
  %t235 = zext i32 %t234 to i64
  ; r230 := (bitcast r220 (vec 8 double))
  %t236 = bitcast i512 %t226 to <8 x double>
  ; r231 := (bitcast r221 (vec 8 double))
  %t237 = bitcast i512 %t227 to <8 x double>
  ; r232 := (bitcast r222 (vec 8 double))
  %t238 = bitcast i512 %t228 to <8 x double>
  ; r233 := (bitcast r223 (vec 8 double))
  %t239 = bitcast i512 %t229 to <8 x double>
  ; r234 := (bitcast r224 (vec 8 double))
  %t240 = bitcast i512 %t230 to <8 x double>
  ; r235 := (bitcast r225 (vec 8 double))
  %t241 = bitcast i512 %t231 to <8 x double>
  ; r236 := (bitcast r226 (vec 8 double))
  %t242 = bitcast i512 %t232 to <8 x double>
  ; r237 := (bitcast r227 (vec 8 double))
  %t243 = bitcast i512 %t233 to <8 x double>
  ; r238 := call __printf_out(r219, r217, r218, r229, r215, r216, r230, r231, r232, r233, r234, r235, r236, r237)
  %t244 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_out(i64 %t225, i64 %t223, i64 %t224, i64 %t235, i64 %t221, i64 %t222, <8 x double> %t236, <8 x double> %t237, <8 x double> %t238, <8 x double> %t239, <8 x double> %t240, <8 x double> %t241, <8 x double> %t242, <8 x double> %t243)
  ; r239 := (tuple_field r238 0)
  %t245 = extractvalue { i64, i64, <8 x double> } %t244, 0
  ; r240 := (tuple_field r238 1)
  %t246 = extractvalue { i64, i64, <8 x double> } %t244, 1
  ; r241 := (tuple_field r238 2)
  %t247 = extractvalue { i64, i64, <8 x double> } %t244, 2
  ; r242 := (bitcast r241 (bv 512))
  %t248 = bitcast <8 x double> %t247 to i512
  br label %block_0_423630
block_0_423630:
  %t249 = phi i64 [ %t218, %block_0_423620 ]
  %t250 = phi i64 [ %t246, %block_0_423620 ]
  %t251 = phi i64 [ %t220, %block_0_423620 ]
  %t252 = phi i64 [ %t221, %block_0_423620 ]
  %t253 = phi i64 [ %t222, %block_0_423620 ]
  %t254 = phi i64 [ %t224, %block_0_423620 ]
  %t255 = phi i64 [ %t225, %block_0_423620 ]
  %t256 = phi i512 [ %t248, %block_0_423620 ]
  %t257 = phi i512 [ %t227, %block_0_423620 ]
  %t258 = phi i512 [ %t228, %block_0_423620 ]
  %t259 = phi i512 [ %t229, %block_0_423620 ]
  %t260 = phi i512 [ %t230, %block_0_423620 ]
  %t261 = phi i512 [ %t231, %block_0_423620 ]
  %t262 = phi i512 [ %t232, %block_0_423620 ]
  %t263 = phi i512 [ %t233, %block_0_423620 ]
  ; r258 := (bitcast r250 (vec 8 double))
  %t264 = bitcast i512 %t256 to <8 x double>
  ; r259 := (bitcast r251 (vec 8 double))
  %t265 = bitcast i512 %t257 to <8 x double>
  ; r260 := (bitcast r252 (vec 8 double))
  %t266 = bitcast i512 %t258 to <8 x double>
  ; r261 := (bitcast r253 (vec 8 double))
  %t267 = bitcast i512 %t259 to <8 x double>
  ; r262 := (bitcast r254 (vec 8 double))
  %t268 = bitcast i512 %t260 to <8 x double>
  ; r263 := (bitcast r255 (vec 8 double))
  %t269 = bitcast i512 %t261 to <8 x double>
  ; r264 := (bitcast r256 (vec 8 double))
  %t270 = bitcast i512 %t262 to <8 x double>
  ; r265 := (bitcast r257 (vec 8 double))
  %t271 = bitcast i512 %t263 to <8 x double>
  ; r266 := call __printf_flush(r249, r245, r244, r243, r246, r247, r258, r259, r260, r261, r262, r263, r264, r265)
  %t272 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__printf_flush(i64 %t255, i64 %t251, i64 %t250, i64 %t249, i64 %t252, i64 %t253, <8 x double> %t264, <8 x double> %t265, <8 x double> %t266, <8 x double> %t267, <8 x double> %t268, <8 x double> %t269, <8 x double> %t270, <8 x double> %t271)
  ; r267 := (tuple_field r266 0)
  %t273 = extractvalue { i64, i64, <8 x double> } %t272, 0
  ; r268 := (tuple_field r266 1)
  %t274 = extractvalue { i64, i64, <8 x double> } %t272, 1
  ; r269 := (tuple_field r266 2)
  %t275 = extractvalue { i64, i64, <8 x double> } %t272, 2
  ; r270 := (bitcast r269 (bv 512))
  %t276 = bitcast <8 x double> %t275 to i512
  br label %block_0_42363c
block_0_42363c:
  %t277 = phi i64 [ %t249, %block_0_423630 ]
  %t278 = phi i64 [ %t274, %block_0_423630 ]
  %t279 = phi i64 [ %t251, %block_0_423630 ]
  %t280 = phi i64 [ %t252, %block_0_423630 ]
  %t281 = phi i64 [ %t253, %block_0_423630 ]
  %t282 = phi i64 [ %t254, %block_0_423630 ]
  %t283 = phi i512 [ %t276, %block_0_423630 ]
  %t284 = phi i512 [ %t257, %block_0_423630 ]
  %t285 = phi i512 [ %t258, %block_0_423630 ]
  %t286 = phi i512 [ %t259, %block_0_423630 ]
  %t287 = phi i512 [ %t260, %block_0_423630 ]
  %t288 = phi i512 [ %t261, %block_0_423630 ]
  %t289 = phi i512 [ %t262, %block_0_423630 ]
  %t290 = phi i512 [ %t263, %block_0_423630 ]
  ; r285 := (bitcast r277 (vec 8 double))
  %t291 = bitcast i512 %t283 to <8 x double>
  ; r286 := (bitcast r278 (vec 8 double))
  %t292 = bitcast i512 %t284 to <8 x double>
  ; r287 := (bitcast r279 (vec 8 double))
  %t293 = bitcast i512 %t285 to <8 x double>
  ; r288 := (bitcast r280 (vec 8 double))
  %t294 = bitcast i512 %t286 to <8 x double>
  ; r289 := (bitcast r281 (vec 8 double))
  %t295 = bitcast i512 %t287 to <8 x double>
  ; r290 := (bitcast r282 (vec 8 double))
  %t296 = bitcast i512 %t288 to <8 x double>
  ; r291 := (bitcast r283 (vec 8 double))
  %t297 = bitcast i512 %t289 to <8 x double>
  ; r292 := (bitcast r284 (vec 8 double))
  %t298 = bitcast i512 %t290 to <8 x double>
  ; r293 := call free(r276, r273, r272, r271, r274, r275, r285, r286, r287, r288, r289, r290, r291, r292)
  %t299 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @free(i64 %t282, i64 %t279, i64 %t278, i64 %t277, i64 %t280, i64 %t281, <8 x double> %t291, <8 x double> %t292, <8 x double> %t293, <8 x double> %t294, <8 x double> %t295, <8 x double> %t296, <8 x double> %t297, <8 x double> %t298)
  ; r294 := (tuple_field r293 0)
  %t300 = extractvalue { i64, i64, <8 x double> } %t299, 0
  ; r295 := (tuple_field r293 1)
  %t301 = extractvalue { i64, i64, <8 x double> } %t299, 1
  ; r296 := (tuple_field r293 2)
  %t302 = extractvalue { i64, i64, <8 x double> } %t299, 2
  ; r297 := (bitcast r296 (bv 512))
  %t303 = bitcast <8 x double> %t302 to i512
  br label %block_0_423644
block_0_423644:
  ret void
block_0_42366a:
  %t304 = phi i64 [ %t113, %block_0_4235ea ]
  %t305 = phi i64 [ %t114, %block_0_4235ea ]
  %t306 = phi i64 [ %t115, %block_0_4235ea ]
  %t307 = phi i64 [ %t116, %block_0_4235ea ]
  %t308 = phi i64 [ %t117, %block_0_4235ea ]
  %t309 = phi i64 [ %t118, %block_0_4235ea ]
  %t310 = phi i64 [ %t119, %block_0_4235ea ]
  %t311 = phi i64 [ %t120, %block_0_4235ea ]
  %t312 = phi i64 [ %t121, %block_0_4235ea ]
  %t313 = phi i512 [ %t122, %block_0_4235ea ]
  %t314 = phi i512 [ %t123, %block_0_4235ea ]
  %t315 = phi i512 [ %t124, %block_0_4235ea ]
  %t316 = phi i512 [ %t125, %block_0_4235ea ]
  %t317 = phi i512 [ %t126, %block_0_4235ea ]
  %t318 = phi i512 [ %t127, %block_0_4235ea ]
  %t319 = phi i512 [ %t128, %block_0_4235ea ]
  %t320 = phi i512 [ %t129, %block_0_4235ea ]
  ; r315 := (trunc r300 32)
  %t321 = trunc i64 %t306 to i32
  ; r316 := (uext r315 64)
  %t322 = zext i32 %t321 to i64
  ; r317 := (bitcast r307 (vec 8 double))
  %t323 = bitcast i512 %t313 to <8 x double>
  ; r318 := call strvisx(r298, r301, r316, (0x9c : bv 64), r303, r304, r317)
  %t324 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>) @strvisx(i64 %t304, i64 %t307, i64 %t322, i64 156, i64 %t309, i64 %t310, <8 x double> %t323)
  ; r319 := (tuple_field r318 0)
  %t325 = extractvalue { i64, <8 x double> } %t324, 0
  ; r320 := (tuple_field r318 1)
  %t326 = extractvalue { i64, <8 x double> } %t324, 1
  ; r321 := (bitcast r320 (bv 512))
  %t327 = bitcast <8 x double> %t326 to i512
  br label %block_0_42367c
block_0_42367c:
  %t328 = phi i64 [ %t325, %block_0_42366a ]
  %t329 = phi i64 [ %t305, %block_0_42366a ]
  %t330 = phi i64 [ %t308, %block_0_42366a ]
  %t331 = phi i64 [ %t309, %block_0_42366a ]
  %t332 = phi i64 [ %t310, %block_0_42366a ]
  %t333 = phi i64 [ %t311, %block_0_42366a ]
  %t334 = phi i64 [ %t304, %block_0_42366a ]
  %t335 = phi i64 [ %t312, %block_0_42366a ]
  %t336 = phi i512 [ %t327, %block_0_42366a ]
  %t337 = phi i512 [ %t314, %block_0_42366a ]
  %t338 = phi i512 [ %t315, %block_0_42366a ]
  %t339 = phi i512 [ %t316, %block_0_42366a ]
  %t340 = phi i512 [ %t317, %block_0_42366a ]
  %t341 = phi i512 [ %t318, %block_0_42366a ]
  %t342 = phi i512 [ %t319, %block_0_42366a ]
  %t343 = phi i512 [ %t320, %block_0_42366a ]
  ; r338 := (trunc r322 32)
  %t344 = trunc i64 %t328 to i32
  ; r339 := (uext r338 64)
  %t345 = zext i32 %t344 to i64
  br label %block_0_423620
block_0_423680:
  %t346 = phi i64 [ %t156, %block_0_4235ff ]
  %t347 = phi i64 [ %t157, %block_0_4235ff ]
  %t348 = phi i64 [ %t158, %block_0_4235ff ]
  %t349 = phi i64 [ %t159, %block_0_4235ff ]
  %t350 = phi i64 [ %t160, %block_0_4235ff ]
  %t351 = phi i64 [ %t161, %block_0_4235ff ]
  %t352 = phi i64 [ %t162, %block_0_4235ff ]
  %t353 = phi i64 [ %t155, %block_0_4235ff ]
  %t354 = phi i64 [ %t163, %block_0_4235ff ]
  %t355 = phi i512 [ %t164, %block_0_4235ff ]
  %t356 = phi i512 [ %t165, %block_0_4235ff ]
  %t357 = phi i512 [ %t166, %block_0_4235ff ]
  %t358 = phi i512 [ %t167, %block_0_4235ff ]
  %t359 = phi i512 [ %t168, %block_0_4235ff ]
  %t360 = phi i512 [ %t169, %block_0_4235ff ]
  %t361 = phi i512 [ %t170, %block_0_4235ff ]
  %t362 = phi i512 [ %t171, %block_0_4235ff ]
  ; r357 := (trunc r341 32)
  %t363 = trunc i64 %t347 to i32
  ; r358 := (uext r357 64)
  %t364 = zext i32 %t363 to i64
  ; r359 := (bitcast r349 (vec 8 double))
  %t365 = bitcast i512 %t355 to <8 x double>
  ; r360 := call strvisx(r347, r342, r358, (0x1f : bv 64), r344, r345, r359)
  %t366 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>) @strvisx(i64 %t353, i64 %t348, i64 %t364, i64 31, i64 %t350, i64 %t351, <8 x double> %t365)
  ; r361 := (tuple_field r360 0)
  %t367 = extractvalue { i64, <8 x double> } %t366, 0
  ; r362 := (tuple_field r360 1)
  %t368 = extractvalue { i64, <8 x double> } %t366, 1
  ; r363 := (bitcast r362 (bv 512))
  %t369 = bitcast <8 x double> %t368 to i512
  br label %block_0_423692
block_0_423692:
  %t370 = phi i64 [ %t367, %block_0_423680 ]
  %t371 = phi i64 [ %t346, %block_0_423680 ]
  %t372 = phi i64 [ %t349, %block_0_423680 ]
  %t373 = phi i64 [ %t350, %block_0_423680 ]
  %t374 = phi i64 [ %t351, %block_0_423680 ]
  %t375 = phi i64 [ %t352, %block_0_423680 ]
  %t376 = phi i64 [ %t353, %block_0_423680 ]
  %t377 = phi i64 [ %t354, %block_0_423680 ]
  %t378 = phi i512 [ %t369, %block_0_423680 ]
  %t379 = phi i512 [ %t356, %block_0_423680 ]
  %t380 = phi i512 [ %t357, %block_0_423680 ]
  %t381 = phi i512 [ %t358, %block_0_423680 ]
  %t382 = phi i512 [ %t359, %block_0_423680 ]
  %t383 = phi i512 [ %t360, %block_0_423680 ]
  %t384 = phi i512 [ %t361, %block_0_423680 ]
  %t385 = phi i512 [ %t362, %block_0_423680 ]
  ; r380 := (trunc r364 32)
  %t386 = trunc i64 %t370 to i32
  ; r381 := (uext r380 64)
  %t387 = zext i32 %t386 to i64
  br label %block_0_423620
block_0_423696:
  %t388 = phi i64 [ %t42, %block_0_4235c4 ]
  %t389 = phi i64 [ %t44, %block_0_4235c4 ]
  %t390 = phi i64 [ %t45, %block_0_4235c4 ]
  %t391 = phi i64 [ %t46, %block_0_4235c4 ]
  %t392 = phi i64 [ %t47, %block_0_4235c4 ]
  %t393 = phi i64 [ %t48, %block_0_4235c4 ]
  %t394 = phi i512 [ %t49, %block_0_4235c4 ]
  %t395 = phi i512 [ %t50, %block_0_4235c4 ]
  %t396 = phi i512 [ %t51, %block_0_4235c4 ]
  %t397 = phi i512 [ %t52, %block_0_4235c4 ]
  %t398 = phi i512 [ %t53, %block_0_4235c4 ]
  %t399 = phi i512 [ %t54, %block_0_4235c4 ]
  %t400 = phi i512 [ %t55, %block_0_4235c4 ]
  %t401 = phi i512 [ %t56, %block_0_4235c4 ]
  ; r396 := (bitcast r388 (vec 8 double))
  %t402 = bitcast i512 %t394 to <8 x double>
  ; r397 := call strlen(r383, r396)
  %t403 = call { i64, i64, <8 x double> } (i64, <8 x double>) @strlen(i64 %t389, <8 x double> %t402)
  ; r398 := (tuple_field r397 0)
  %t404 = extractvalue { i64, i64, <8 x double> } %t403, 0
  ; r399 := (tuple_field r397 1)
  %t405 = extractvalue { i64, i64, <8 x double> } %t403, 1
  ; r400 := (tuple_field r397 2)
  %t406 = extractvalue { i64, i64, <8 x double> } %t403, 2
  ; r401 := (bitcast r400 (bv 512))
  %t407 = bitcast <8 x double> %t406 to i512
  br label %block_0_42369e
block_0_42369e:
  %t408 = phi i64 [ %t404, %block_0_423696 ]
  %t409 = phi i64 [ %t388, %block_0_423696 ]
  %t410 = phi i64 [ %t405, %block_0_423696 ]
  %t411 = phi i64 [ %t389, %block_0_423696 ]
  %t412 = phi i64 [ %t390, %block_0_423696 ]
  %t413 = phi i64 [ %t392, %block_0_423696 ]
  %t414 = phi i64 [ %t393, %block_0_423696 ]
  %t415 = phi i64 [ %t390, %block_0_423696 ]
  %t416 = phi i64 [ %t391, %block_0_423696 ]
  %t417 = phi i512 [ %t407, %block_0_423696 ]
  %t418 = phi i512 [ %t395, %block_0_423696 ]
  %t419 = phi i512 [ %t396, %block_0_423696 ]
  %t420 = phi i512 [ %t397, %block_0_423696 ]
  %t421 = phi i512 [ %t398, %block_0_423696 ]
  %t422 = phi i512 [ %t399, %block_0_423696 ]
  %t423 = phi i512 [ %t400, %block_0_423696 ]
  %t424 = phi i512 [ %t401, %block_0_423696 ]
  ; r419 := (trunc r402 32)
  %t425 = trunc i64 %t408 to i32
  ; r420 := (uext r419 64)
  %t426 = zext i32 %t425 to i64
  br label %block_0_4235d0
block_0_4236a5:
  %t427 = phi i64 [ %t134, %block_0_4235f3 ]
  %t428 = phi i64 [ %t135, %block_0_4235f3 ]
  %t429 = phi i64 [ %t136, %block_0_4235f3 ]
  %t430 = phi i64 [ %t137, %block_0_4235f3 ]
  %t431 = phi i64 [ %t138, %block_0_4235f3 ]
  %t432 = phi i64 [ %t139, %block_0_4235f3 ]
  %t433 = phi i64 [ %t140, %block_0_4235f3 ]
  %t434 = phi i64 [ %t141, %block_0_4235f3 ]
  %t435 = phi i64 [ %t142, %block_0_4235f3 ]
  %t436 = phi i512 [ %t143, %block_0_4235f3 ]
  %t437 = phi i512 [ %t144, %block_0_4235f3 ]
  %t438 = phi i512 [ %t145, %block_0_4235f3 ]
  %t439 = phi i512 [ %t146, %block_0_4235f3 ]
  %t440 = phi i512 [ %t147, %block_0_4235f3 ]
  %t441 = phi i512 [ %t148, %block_0_4235f3 ]
  %t442 = phi i512 [ %t149, %block_0_4235f3 ]
  %t443 = phi i512 [ %t150, %block_0_4235f3 ]
  ; r438 := (trunc r423 32)
  %t444 = trunc i64 %t429 to i32
  ; r439 := (uext r438 64)
  %t445 = zext i32 %t444 to i64
  ; r440 := (bitcast r430 (vec 8 double))
  %t446 = bitcast i512 %t436 to <8 x double>
  ; r441 := call strvisx(r421, r424, r439, (0x1d : bv 64), r426, r427, r440)
  %t447 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>) @strvisx(i64 %t427, i64 %t430, i64 %t445, i64 29, i64 %t432, i64 %t433, <8 x double> %t446)
  ; r442 := (tuple_field r441 0)
  %t448 = extractvalue { i64, <8 x double> } %t447, 0
  ; r443 := (tuple_field r441 1)
  %t449 = extractvalue { i64, <8 x double> } %t447, 1
  ; r444 := (bitcast r443 (bv 512))
  %t450 = bitcast <8 x double> %t449 to i512
  br label %block_0_4236b7
block_0_4236b7:
  %t451 = phi i64 [ %t448, %block_0_4236a5 ]
  %t452 = phi i64 [ %t428, %block_0_4236a5 ]
  %t453 = phi i64 [ %t431, %block_0_4236a5 ]
  %t454 = phi i64 [ %t432, %block_0_4236a5 ]
  %t455 = phi i64 [ %t433, %block_0_4236a5 ]
  %t456 = phi i64 [ %t434, %block_0_4236a5 ]
  %t457 = phi i64 [ %t427, %block_0_4236a5 ]
  %t458 = phi i64 [ %t435, %block_0_4236a5 ]
  %t459 = phi i512 [ %t450, %block_0_4236a5 ]
  %t460 = phi i512 [ %t437, %block_0_4236a5 ]
  %t461 = phi i512 [ %t438, %block_0_4236a5 ]
  %t462 = phi i512 [ %t439, %block_0_4236a5 ]
  %t463 = phi i512 [ %t440, %block_0_4236a5 ]
  %t464 = phi i512 [ %t441, %block_0_4236a5 ]
  %t465 = phi i512 [ %t442, %block_0_4236a5 ]
  %t466 = phi i512 [ %t443, %block_0_4236a5 ]
  ; r461 := (trunc r445 32)
  %t467 = trunc i64 %t451 to i32
  ; r462 := (uext r461 64)
  %t468 = zext i32 %t467 to i64
  br label %block_0_423620
}
define { i64, <8 x double> } @strvisx(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6) {
block_0_4239f0:
  ; r0 := (trunc arg3 32)
  %t0 = trunc i64 %arg3 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (bv_ult arg2 (0x1 : bv 64))
  %t2 = icmp ult i64 %arg2, 1
  ; r3 := (eq arg2 (0x1 : bv 64))
  %t3 = icmp eq i64 %arg2, 1
  ; r4 := (or r2 r3)
  %t4 = or i1 %t2, %t3
  ; r5 := (bitcast arg6 (bv 512))
  %t5 = bitcast <8 x double> %arg6 to i512
  ; r6 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  br i1 %t4, label %block_0_423a5d, label %block_0_423a10
block_0_423a10:
  %t7 = phi i64 [ %arg2, %block_0_4239f0 ]
  %t8 = phi i64 [ %arg1, %block_0_4239f0 ]
  %t9 = phi i64 [ %arg0, %block_0_4239f0 ]
  %t10 = phi i64 [ %arg4, %block_0_4239f0 ]
  %t11 = phi i64 [ %arg5, %block_0_4239f0 ]
  %t12 = phi i64 [ %t1, %block_0_4239f0 ]
  %t13 = phi i512 [ %t6, %block_0_4239f0 ]
  br label %block_0_423a16
block_0_423a16:
  %t14 = phi i64 [ %t8, %block_0_423a10 ], [ %t42, %block_0_423a2c ]
  %t15 = phi i64 [ %t7, %block_0_423a10 ], [ %t43, %block_0_423a2c ]
  %t16 = phi i64 [ %t9, %block_0_423a10 ], [ %t41, %block_0_423a2c ]
  %t17 = phi i64 [ %t10, %block_0_423a10 ], [ %t44, %block_0_423a2c ]
  %t18 = phi i64 [ %t11, %block_0_423a10 ], [ %t45, %block_0_423a2c ]
  %t19 = phi i64 [ %t12, %block_0_423a10 ], [ %t46, %block_0_423a2c ]
  %t20 = phi i64 [ %t7, %block_0_423a10 ], [ %t47, %block_0_423a2c ]
  %t21 = phi i64 [ %t8, %block_0_423a10 ], [ %t48, %block_0_423a2c ]
  %t22 = phi i64 [ %t9, %block_0_423a10 ], [ %t49, %block_0_423a2c ]
  %t23 = phi i512 [ %t13, %block_0_423a10 ], [ %t50, %block_0_423a2c ]
  ; r24 := (read r14 (bv 8))
  %t24 = inttoptr i64 %t14 to i8*
  %t25 = load i8, i8* %t24
  ; r25 := (sext r24 32)
  %t26 = sext i8 %t25 to i32
  ; r26 := (uext r25 64)
  %t27 = zext i32 %t26 to i64
  ; r27 := (bv_add r14 (0x1 : bv 64))
  %t28 = add i64 %t14, 1
  ; r28 := (trunc r19 32)
  %t29 = trunc i64 %t19 to i32
  ; r29 := (uext r28 64)
  %t30 = zext i32 %t29 to i64
  ; r30 := (read r27 (bv 8))
  %t31 = inttoptr i64 %t28 to i8*
  %t32 = load i8, i8* %t31
  ; r31 := (sext r30 32)
  %t33 = sext i8 %t32 to i32
  ; r32 := (uext r31 64)
  %t34 = zext i32 %t33 to i64
  ; r33 := (bv_add r15 (0xffffffffffffffff : bv 64))
  %t35 = add i64 %t15, 18446744073709551615
  ; r34 := (bitcast r23 (vec 8 double))
  %t36 = bitcast i512 %t23 to <8 x double>
  ; r35 := call vis(r16, r26, r29, r32, r17, r18, r34)
  %t37 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>) @vis(i64 %t16, i64 %t27, i64 %t30, i64 %t34, i64 %t17, i64 %t18, <8 x double> %t36)
  ; r36 := (tuple_field r35 0)
  %t38 = extractvalue { i64, <8 x double> } %t37, 0
  ; r37 := (tuple_field r35 1)
  %t39 = extractvalue { i64, <8 x double> } %t37, 1
  ; r38 := (bitcast r37 (bv 512))
  %t40 = bitcast <8 x double> %t39 to i512
  br label %block_0_423a2c
block_0_423a2c:
  %t41 = phi i64 [ %t38, %block_0_423a16 ]
  %t42 = phi i64 [ %t28, %block_0_423a16 ]
  %t43 = phi i64 [ %t35, %block_0_423a16 ]
  %t44 = phi i64 [ %t17, %block_0_423a16 ]
  %t45 = phi i64 [ %t18, %block_0_423a16 ]
  %t46 = phi i64 [ %t19, %block_0_423a16 ]
  %t47 = phi i64 [ %t20, %block_0_423a16 ]
  %t48 = phi i64 [ %t21, %block_0_423a16 ]
  %t49 = phi i64 [ %t22, %block_0_423a16 ]
  %t50 = phi i512 [ %t40, %block_0_423a16 ]
  ; r49 := (eq r41 (0x1 : bv 64))
  %t51 = icmp eq i64 %t43, 1
  br i1 %t51, label %block_0_423a35, label %block_0_423a16
block_0_423a35:
  %t52 = phi i64 [ %t41, %block_0_423a2c ]
  %t53 = phi i64 [ %t44, %block_0_423a2c ]
  %t54 = phi i64 [ %t45, %block_0_423a2c ]
  %t55 = phi i64 [ %t46, %block_0_423a2c ]
  %t56 = phi i64 [ %t47, %block_0_423a2c ]
  %t57 = phi i64 [ %t48, %block_0_423a2c ]
  %t58 = phi i64 [ %t49, %block_0_423a2c ]
  %t59 = phi i512 [ %t50, %block_0_423a2c ]
  ; r58 := (bv_add r55 r54)
  %t60 = add i64 %t57, %t56
  ; r59 := (bv_add r58 (0xffffffffffffffff : bv 64))
  %t61 = add i64 %t60, 18446744073709551615
  br label %block_0_423a3a
block_0_423a3a:
  %t62 = phi i64 [ %t52, %block_0_423a35 ], [ %t99, %block_0_423a65 ]
  %t63 = phi i64 [ %t53, %block_0_423a35 ], [ %t101, %block_0_423a65 ]
  %t64 = phi i64 [ %t54, %block_0_423a35 ], [ %t102, %block_0_423a65 ]
  %t65 = phi i64 [ %t55, %block_0_423a35 ], [ %t103, %block_0_423a65 ]
  %t66 = phi i64 [ %t61, %block_0_423a35 ], [ %t100, %block_0_423a65 ]
  %t67 = phi i64 [ %t58, %block_0_423a35 ], [ %t99, %block_0_423a65 ]
  %t68 = phi i512 [ %t59, %block_0_423a35 ], [ %t104, %block_0_423a65 ]
  ; r67 := (read r64 (bv 8))
  %t69 = inttoptr i64 %t66 to i8*
  %t70 = load i8, i8* %t69
  ; r68 := (sext r67 32)
  %t71 = sext i8 %t70 to i32
  ; r69 := (uext r68 64)
  %t72 = zext i32 %t71 to i64
  ; r70 := (trunc r63 32)
  %t73 = trunc i64 %t65 to i32
  ; r71 := (uext r70 64)
  %t74 = zext i32 %t73 to i64
  ; r72 := (bitcast r66 (vec 8 double))
  %t75 = bitcast i512 %t68 to <8 x double>
  ; r73 := call vis(r60, r69, r71, (0x0 : bv 64), r61, r62, r72)
  %t76 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>) @vis(i64 %t62, i64 %t72, i64 %t74, i64 0, i64 %t63, i64 %t64, <8 x double> %t75)
  ; r74 := (tuple_field r73 0)
  %t77 = extractvalue { i64, <8 x double> } %t76, 0
  ; r75 := (tuple_field r73 1)
  %t78 = extractvalue { i64, <8 x double> } %t76, 1
  ; r76 := (bitcast r75 (bv 512))
  %t79 = bitcast <8 x double> %t78 to i512
  br label %block_0_423a48
block_0_423a48:
  %t80 = phi i64 [ %t77, %block_0_423a3a ], [ %t93, %block_0_423a5d ]
  %t81 = phi i64 [ %t67, %block_0_423a3a ], [ %t93, %block_0_423a5d ]
  %t82 = phi i512 [ %t79, %block_0_423a3a ], [ %t97, %block_0_423a5d ]
  ; write r77 (0x0 : bv 8)
  %t83 = inttoptr i64 %t80 to i8*
  store i8 0, i8* %t83
  ; r80 := (trunc r77 32)
  %t84 = trunc i64 %t80 to i32
  ; r81 := (trunc r78 32)
  %t85 = trunc i64 %t81 to i32
  ; r82 := (bv_sub r80 r81)
  %t86 = sub i32 %t84, %t85
  ; r83 := (uext r82 64)
  %t87 = zext i32 %t86 to i64
  ; r84 := (bitcast r79 (vec 8 double))
  %t88 = bitcast i512 %t82 to <8 x double>
  ; r85 := (tuple r83 r84)
  %t89 = insertvalue { i64, <8 x double> } undef, i64 %t87, 0
  %t90 = insertvalue { i64, <8 x double> } %t89, <8 x double> %t88, 1
  ret { i64, <8 x double> } %t90
block_0_423a5d:
  %t91 = phi i64 [ %arg2, %block_0_4239f0 ]
  %t92 = phi i64 [ %arg1, %block_0_4239f0 ]
  %t93 = phi i64 [ %arg0, %block_0_4239f0 ]
  %t94 = phi i64 [ %arg4, %block_0_4239f0 ]
  %t95 = phi i64 [ %arg5, %block_0_4239f0 ]
  %t96 = phi i64 [ %t1, %block_0_4239f0 ]
  %t97 = phi i512 [ %t5, %block_0_4239f0 ]
  ; r93 := (eq r86 (0x0 : bv 64))
  %t98 = icmp eq i64 %t91, 0
  br i1 %t98, label %block_0_423a48, label %block_0_423a65
block_0_423a65:
  %t99 = phi i64 [ %t93, %block_0_423a5d ]
  %t100 = phi i64 [ %t92, %block_0_423a5d ]
  %t101 = phi i64 [ %t94, %block_0_423a5d ]
  %t102 = phi i64 [ %t95, %block_0_423a5d ]
  %t103 = phi i64 [ %t96, %block_0_423a5d ]
  %t104 = phi i512 [ %t97, %block_0_423a5d ]
  br label %block_0_423a3a
}
define void @strvis(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6) {
block_0_423a70:
  ; r0 := (trunc arg2 32)
  %t0 = trunc i64 %arg2 to i32
  ; r1 := (uext r0 64)
  %t1 = zext i32 %t0 to i64
  ; r2 := (read arg1 (bv 8))
  %t2 = inttoptr i64 %arg1 to i8*
  %t3 = load i8, i8* %t2
  ; r3 := (uext r2 64)
  %t4 = zext i8 %t3 to i64
  ; r4 := (eq r2 (0x0 : bv 8))
  %t5 = icmp eq i8 %t3, 0
  ; r5 := (bitcast arg6 (bv 512))
  %t6 = bitcast <8 x double> %arg6 to i512
  br i1 %t5, label %block_0_423aa8, label %block_0_423a82
block_0_423a82:
  %t7 = phi i64 [ %t4, %block_0_423a70 ]
  %t8 = phi i64 [ %t1, %block_0_423a70 ]
  %t9 = phi i64 [ %arg1, %block_0_423a70 ]
  %t10 = phi i64 [ %arg0, %block_0_423a70 ]
  %t11 = phi i64 [ %arg4, %block_0_423a70 ]
  %t12 = phi i64 [ %arg5, %block_0_423a70 ]
  %t13 = phi i512 [ %t6, %block_0_423a70 ]
  br label %block_0_423a85
block_0_423a85:
  %t14 = phi i64 [ %t7, %block_0_423a82 ], [ %t45, %block_0_423a93 ]
  %t15 = phi i64 [ %t9, %block_0_423a82 ], [ %t42, %block_0_423a93 ]
  %t16 = phi i64 [ %t8, %block_0_423a82 ], [ %t38, %block_0_423a93 ]
  %t17 = phi i64 [ %t10, %block_0_423a82 ], [ %t36, %block_0_423a93 ]
  %t18 = phi i64 [ %t11, %block_0_423a82 ], [ %t39, %block_0_423a93 ]
  %t19 = phi i64 [ %t12, %block_0_423a82 ], [ %t40, %block_0_423a93 ]
  %t20 = phi i512 [ %t13, %block_0_423a82 ], [ %t41, %block_0_423a93 ]
  ; r20 := (bv_add r14 (0x1 : bv 64))
  %t21 = add i64 %t15, 1
  ; r21 := (read r20 (bv 8))
  %t22 = inttoptr i64 %t21 to i8*
  %t23 = load i8, i8* %t22
  ; r22 := (sext r21 32)
  %t24 = sext i8 %t23 to i32
  ; r23 := (uext r22 64)
  %t25 = zext i32 %t24 to i64
  ; r24 := (trunc r13 8)
  %t26 = trunc i64 %t14 to i8
  ; r25 := (sext r24 32)
  %t27 = sext i8 %t26 to i32
  ; r26 := (uext r25 64)
  %t28 = zext i32 %t27 to i64
  ; r27 := (trunc r15 32)
  %t29 = trunc i64 %t16 to i32
  ; r28 := (uext r27 64)
  %t30 = zext i32 %t29 to i64
  ; r29 := (bitcast r19 (vec 8 double))
  %t31 = bitcast i512 %t20 to <8 x double>
  ; r30 := call vis(r16, r26, r28, r23, r17, r18, r29)
  %t32 = call { i64, <8 x double> } (i64, i64, i64, i64, i64, i64, <8 x double>) @vis(i64 %t17, i64 %t28, i64 %t30, i64 %t25, i64 %t18, i64 %t19, <8 x double> %t31)
  ; r31 := (tuple_field r30 0)
  %t33 = extractvalue { i64, <8 x double> } %t32, 0
  ; r32 := (tuple_field r30 1)
  %t34 = extractvalue { i64, <8 x double> } %t32, 1
  ; r33 := (bitcast r32 (bv 512))
  %t35 = bitcast <8 x double> %t34 to i512
  br label %block_0_423a93
block_0_423a93:
  %t36 = phi i64 [ %t33, %block_0_423a85 ]
  %t37 = phi i64 [ %t15, %block_0_423a85 ]
  %t38 = phi i64 [ %t16, %block_0_423a85 ]
  %t39 = phi i64 [ %t18, %block_0_423a85 ]
  %t40 = phi i64 [ %t19, %block_0_423a85 ]
  %t41 = phi i512 [ %t35, %block_0_423a85 ]
  ; r40 := (bv_add r35 (0x1 : bv 64))
  %t42 = add i64 %t37, 1
  ; r41 := (read r40 (bv 8))
  %t43 = inttoptr i64 %t42 to i8*
  %t44 = load i8, i8* %t43
  ; r42 := (uext r41 64)
  %t45 = zext i8 %t44 to i64
  ; r43 := (eq r41 (0x0 : bv 8))
  %t46 = icmp eq i8 %t44, 0
  br i1 %t46, label %block_0_423aa2, label %block_0_423a85
block_0_423aa2:
  %t47 = phi i64 [ %t36, %block_0_423a93 ]
  br label %block_0_423aa8
block_0_423aa8:
  %t48 = phi i64 [ %arg0, %block_0_423a70 ], [ %t47, %block_0_423aa2 ]
  ; write r45 (0x0 : bv 8)
  %t49 = inttoptr i64 %t48 to i8*
  store i8 0, i8* %t49
  ret void
}
define void @__printf_arginfo_int(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) {
block_0_424c00:
  ; r0 := (eq arg1 (0x0 : bv 64))
  %t0 = icmp eq i64 %arg1, 0
  br i1 %t0, label %block_0_424ca2, label %block_0_424c0d
block_0_424c0d:
  %t1 = phi i64 [ %arg2, %block_0_424c00 ]
  %t2 = phi i64 [ %arg0, %block_0_424c00 ]
  ; write r1 (0x1 : bv 32)
  %t3 = inttoptr i64 %t1 to i32*
  store i32 1, i32* %t3
  ; r3 := (bv_add r2 (0x44 : bv 64))
  %t4 = add i64 %t2, 68
  ; r4 := (read r3 (bv 32))
  %t5 = inttoptr i64 %t4 to i32*
  %t6 = load i32, i32* %t5
  ; r5 := (eq r4 (0x0 : bv 32))
  %t7 = icmp eq i32 %t6, 0
  br i1 %t7, label %block_0_424c1a, label %block_0_424c33
block_0_424c1a:
  %t8 = phi i64 [ %t1, %block_0_424c0d ]
  %t9 = phi i64 [ %t2, %block_0_424c0d ]
  ; r8 := (bv_add r7 (0x48 : bv 64))
  %t10 = add i64 %t9, 72
  ; r9 := (read r8 (bv 32))
  %t11 = inttoptr i64 %t10 to i32*
  %t12 = load i32, i32* %t11
  ; r10 := (eq r9 (0x0 : bv 32))
  %t13 = icmp eq i32 %t12, 0
  br i1 %t13, label %block_0_424c43, label %block_0_424c23
block_0_424c23:
  %t14 = phi i64 [ %t8, %block_0_424c1a ]
  ; write r11 (0x400001 : bv 32)
  %t15 = inttoptr i64 %t14 to i32*
  store i32 4194305, i32* %t15
  br label %block_0_424c29
block_0_424c29:
  ret void
block_0_424c33:
  %t16 = phi i64 [ %t1, %block_0_424c0d ]
  ; write r12 (0x800001 : bv 32)
  %t17 = inttoptr i64 %t16 to i32*
  store i32 8388609, i32* %t17
  ret void
block_0_424c43:
  %t18 = phi i64 [ %t8, %block_0_424c1a ]
  %t19 = phi i64 [ %t9, %block_0_424c1a ]
  ; r15 := (bv_add r14 (0x18 : bv 64))
  %t20 = add i64 %t19, 24
  ; r16 := (read r15 (bv 32))
  %t21 = inttoptr i64 %t20 to i32*
  %t22 = load i32, i32* %t21
  ; r17 := (eq r16 (0x0 : bv 32))
  %t23 = icmp eq i32 %t22, 0
  br i1 %t23, label %block_0_424c4c, label %block_0_424c60
block_0_424c4c:
  %t24 = phi i64 [ %t18, %block_0_424c43 ]
  %t25 = phi i64 [ %t19, %block_0_424c43 ]
  ; r20 := (bv_add r19 (0x40 : bv 64))
  %t26 = add i64 %t25, 64
  ; r21 := (read r20 (bv 32))
  %t27 = inttoptr i64 %t26 to i32*
  %t28 = load i32, i32* %t27
  ; r22 := (eq r21 (0x0 : bv 32))
  %t29 = icmp eq i32 %t28, 0
  br i1 %t29, label %block_0_424c70, label %block_0_424c55
block_0_424c55:
  %t30 = phi i64 [ %t24, %block_0_424c4c ]
  ; write r23 (0x200001 : bv 32)
  %t31 = inttoptr i64 %t30 to i32*
  store i32 2097153, i32* %t31
  br label %block_0_424c29
block_0_424c60:
  %t32 = phi i64 [ %t18, %block_0_424c43 ]
  ; write r24 (0x20001 : bv 32)
  %t33 = inttoptr i64 %t32 to i32*
  store i32 131073, i32* %t33
  ret void
block_0_424c70:
  %t34 = phi i64 [ %t24, %block_0_424c4c ]
  %t35 = phi i64 [ %t25, %block_0_424c4c ]
  ; r27 := (bv_add r26 (0x3c : bv 64))
  %t36 = add i64 %t35, 60
  ; r28 := (read r27 (bv 32))
  %t37 = inttoptr i64 %t36 to i32*
  %t38 = load i32, i32* %t37
  ; r29 := (eq r28 (0x0 : bv 32))
  %t39 = icmp eq i32 %t38, 0
  br i1 %t39, label %block_0_424c79, label %block_0_424c88
block_0_424c79:
  %t40 = phi i64 [ %t34, %block_0_424c70 ]
  %t41 = phi i64 [ %t35, %block_0_424c70 ]
  ; r32 := (bv_add r31 (0xc : bv 64))
  %t42 = add i64 %t41, 12
  ; r33 := (read r32 (bv 32))
  %t43 = inttoptr i64 %t42 to i32*
  %t44 = load i32, i32* %t43
  ; r34 := (eq r33 (0x0 : bv 32))
  %t45 = icmp eq i32 %t44, 0
  br i1 %t45, label %block_0_424c92, label %block_0_424c80
block_0_424c80:
  %t46 = phi i64 [ %t40, %block_0_424c79 ]
  ; write r35 (0x10001 : bv 32)
  %t47 = inttoptr i64 %t46 to i32*
  store i32 65537, i32* %t47
  br label %block_0_424c29
block_0_424c88:
  %t48 = phi i64 [ %t34, %block_0_424c70 ]
  ; write r36 (0x100001 : bv 32)
  %t49 = inttoptr i64 %t48 to i32*
  store i32 1048577, i32* %t49
  br label %block_0_424c29
block_0_424c92:
  %t50 = phi i64 [ %t40, %block_0_424c79 ]
  %t51 = phi i64 [ %t41, %block_0_424c79 ]
  ; r39 := (bv_add r38 (0x14 : bv 64))
  %t52 = add i64 %t51, 20
  ; r40 := (read r39 (bv 32))
  %t53 = inttoptr i64 %t52 to i32*
  %t54 = load i32, i32* %t53
  ; r41 := (eq r40 (0x0 : bv 32))
  %t55 = icmp eq i32 %t54, 0
  br i1 %t55, label %block_0_424cbb, label %block_0_424c99
block_0_424c99:
  %t56 = phi i64 [ %t50, %block_0_424c92 ]
  ; write r42 (0x40001 : bv 32)
  %t57 = inttoptr i64 %t56 to i32*
  store i32 262145, i32* %t57
  br label %block_0_424c29
block_0_424ca2:
  %t58 = phi i64 [ %arg0, %block_0_424c00 ]
  %t59 = phi i64 [ %arg4, %block_0_424c00 ]
  %t60 = phi i64 [ %arg5, %block_0_424c00 ]
  ; r46 := call __assert((0x42b3d0 : bv 64), (0x42b210 : bv 64), (0xea : bv 64), (0x42b177 : bv 64), r44, r45)
  %t61 = call { i64, i64, <8 x double> } (i64, i64, i64, i64, i64, i64) @__assert(i64 4371408, i64 4370960, i64 234, i64 4370807, i64 %t59, i64 %t60)
  ; r47 := (tuple_field r46 0)
  %t62 = extractvalue { i64, i64, <8 x double> } %t61, 0
  ; r48 := (tuple_field r46 1)
  %t63 = extractvalue { i64, i64, <8 x double> } %t61, 1
  ; r49 := (tuple_field r46 2)
  %t64 = extractvalue { i64, i64, <8 x double> } %t61, 2
  ; r50 := (bitcast r49 (bv 512))
  %t65 = bitcast <8 x double> %t64 to i512
  br label %block_0_424cbb
block_0_424cbb:
  %t66 = phi i64 [ %t50, %block_0_424c92 ], [ %t63, %block_0_424ca2 ]
  %t67 = phi i64 [ %t51, %block_0_424c92 ], [ %t58, %block_0_424ca2 ]
  ; r53 := (bv_add r52 (0x10 : bv 64))
  %t68 = add i64 %t67, 16
  ; r54 := (read r53 (bv 32))
  %t69 = inttoptr i64 %t68 to i32*
  %t70 = load i32, i32* %t69
  ; r55 := (eq r54 (0x0 : bv 32))
  %t71 = icmp eq i32 %t70, 0
  br i1 %t71, label %block_0_424c29, label %block_0_424cc6
block_0_424cc6:
  %t72 = phi i64 [ %t66, %block_0_424cbb ]
  ; write r56 (0x2 : bv 32)
  %t73 = inttoptr i64 %t72 to i32*
  store i32 2, i32* %t73
  br label %block_0_424c29
}
define void @_fini(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %arg6, <8 x double> %arg7, <8 x double> %arg8, <8 x double> %arg9, <8 x double> %arg10, <8 x double> %arg11, <8 x double> %arg12, <8 x double> %arg13) {
block_0_426194:
  ; r0 := (bitcast arg6 (bv 512))
  %t0 = bitcast <8 x double> %arg6 to i512
  ; r1 := (bitcast r0 (vec 8 double))
  %t1 = bitcast i512 %t0 to <8 x double>
  ; r2 := (bitcast arg7 (bv 512))
  %t2 = bitcast <8 x double> %arg7 to i512
  ; r3 := (bitcast r2 (vec 8 double))
  %t3 = bitcast i512 %t2 to <8 x double>
  ; r4 := (bitcast arg8 (bv 512))
  %t4 = bitcast <8 x double> %arg8 to i512
  ; r5 := (bitcast r4 (vec 8 double))
  %t5 = bitcast i512 %t4 to <8 x double>
  ; r6 := (bitcast arg9 (bv 512))
  %t6 = bitcast <8 x double> %arg9 to i512
  ; r7 := (bitcast r6 (vec 8 double))
  %t7 = bitcast i512 %t6 to <8 x double>
  ; r8 := (bitcast arg10 (bv 512))
  %t8 = bitcast <8 x double> %arg10 to i512
  ; r9 := (bitcast r8 (vec 8 double))
  %t9 = bitcast i512 %t8 to <8 x double>
  ; r10 := (bitcast arg11 (bv 512))
  %t10 = bitcast <8 x double> %arg11 to i512
  ; r11 := (bitcast r10 (vec 8 double))
  %t11 = bitcast i512 %t10 to <8 x double>
  ; r12 := (bitcast arg12 (bv 512))
  %t12 = bitcast <8 x double> %arg12 to i512
  ; r13 := (bitcast r12 (vec 8 double))
  %t13 = bitcast i512 %t12 to <8 x double>
  ; r14 := (bitcast arg13 (bv 512))
  %t14 = bitcast <8 x double> %arg13 to i512
  ; r15 := (bitcast r14 (vec 8 double))
  %t15 = bitcast i512 %t14 to <8 x double>
  ; call __do_global_dtors_aux(arg0, arg1, arg2, arg3, arg4, arg5, r1, r3, r5, r7, r9, r11, r13, r15)
  call void (i64, i64, i64, i64, i64, i64, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>, <8 x double>) @__do_global_dtors_aux(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, <8 x double> %t1, <8 x double> %t3, <8 x double> %t5, <8 x double> %t7, <8 x double> %t9, <8 x double> %t11, <8 x double> %t13, <8 x double> %t15)
  br label %block_0_42619d
block_0_42619d:
  ret void
}